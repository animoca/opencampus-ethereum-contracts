{"id":"85ee3aaf8127814e3f07d3e59445b625","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when `role` is granted to `account`.\n/// @param role The role that has been granted.\n/// @param account The account that has been granted the role.\n/// @param operator The account that granted the role.\nevent RoleGranted(bytes32 role, address account, address operator);\n\n/// @notice Emitted when `role` is revoked from `account`.\n/// @param role The role that has been revoked.\n/// @param account The account that has been revoked the role.\n/// @param operator The account that revoked the role.\nevent RoleRevoked(bytes32 role, address account, address operator);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {RoleGranted, RoleRevoked} from \"./../events/AccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\nlibrary AccessControlStorage {\n    using Address for address;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n\n/// @notice Thrown when an ETH transfer has failed.\nerror TransferFailed();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {ERC721Storage} from \"./../libraries/ERC721Storage.sol\";\nimport {TokenMetadataStorage} from \"./../../metadata/libraries/TokenMetadataStorage.sol\";\nimport {TokenMetadataBase} from \"./../../metadata/base/TokenMetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\n    using ERC721Storage for ERC721Storage.Layout;\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @inheritdoc IERC721Metadata\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\n        return TokenMetadataBase.name();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\n        return TokenMetadataBase.symbol();\n    }\n\n    /// @inheritdoc IERC721Metadata\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../metadata/interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../metadata/libraries/TokenMetadataStorage.sol\";\nimport {ERC721Storage} from \"./libraries/ERC721Storage.sol\";\nimport {ERC721MetadataBase} from \"./base/ERC721MetadataBase.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC721Metadata is ERC721MetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n    /// @param name The name of the token.\n    /// @param symbol The symbol of the token.\n    /// @param metadataResolver The address of the metadata resolver contract.\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\n        ERC721Storage.initERC721Metadata();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when trying to approve oneself.\n/// @param account The account trying to approve itself.\nerror ERC721SelfApproval(address account);\n\n/// @notice Thrown when trying to approveForAll oneself.\n/// @param account The account trying to approveForAll itself.\nerror ERC721SelfApprovalForAll(address account);\n\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when transferring a token to the zero address.\nerror ERC721TransferToAddressZero();\n\n/// @notice Thrown when a token does not exist but is required to.\n/// @param tokenId The identifier of the token that was checked.\nerror ERC721NonExistingToken(uint256 tokenId);\n\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n/// @param sender The message sender.\n/// @param tokenId The identifier of the token.\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\n\n/// @notice Thrown when a token is not owned by the expected account.\n/// @param account The account that was expected to own the token.\n/// @param tokenId The identifier of the token.\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\n\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\n/// @param recipient The recipient contract.\n/// @param tokenId The identifier of the token.\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\n\n/// @notice Thrown when querying the balance of the zero address.\nerror ERC721BalanceOfAddressZero();\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when minting a token to the zero address.\nerror ERC721MintToAddressZero();\n\n/// @notice Thrown when minting a token that already exists.\n/// @param tokenId The identifier of the token that already exists.\nerror ERC721ExistingToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n/// @param tokenId The identifier of the token that has been burnt before.\nerror ERC721BurntToken(uint256 tokenId);\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when a token is transferred.\n/// @param from The previous token owner.\n/// @param to The new token owner.\n/// @param tokenId The transferred token identifier.\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n/// @notice Emitted when a single token approval is set.\n/// @param owner The token owner.\n/// @param approved The approved address.\n/// @param tokenId The approved token identifier.\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n/// @notice Emitted when an approval for all tokens is set or unset.\n/// @param owner The tokens owner.\n/// @param operator The approved address.\n/// @param approved True when then approval is set, false when it is unset.\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\ninterface IERC721BatchTransfer {\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\ninterface IERC721Burnable {\n    /// @notice Burns a token.\n    /// @dev Reverts if `tokenId` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(address from, uint256 tokenId) external;\n\n    /// @notice Burns a batch of tokens.\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\ninterface IERC721Deliverable {\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\ninterface IERC721Metadata {\n    /// @notice Gets the name of the token. E.g. \"My Token\".\n    /// @return tokenName The name of the token.\n    function name() external view returns (string memory tokenName);\n\n    /// @notice Gets the symbol of the token. E.g. \"TOK\".\n    /// @return tokenSymbol The symbol of the token.\n    function symbol() external view returns (string memory tokenSymbol);\n\n    /// @notice Gets the metadata URI for a token identifier.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier.\n    /// @return uri The metadata URI for the token identifier.\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\ninterface IERC721Mintable {\n    /// @notice Unsafely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(address to, uint256 tokenId) external;\n\n    /// @notice Safely mints a token.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `tokenId` already exists.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if one of `tokenIds` already exists.\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(address to, uint256[] calldata tokenIds) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\ninterface IERC721Receiver {\n    /// @notice Handles the receipt of an ERC721 token.\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\n    /// @dev Note: The ERC721 contract address is always the message sender.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous token owner.\n    /// @param tokenId The token identifier.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse.\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n// solhint-disable-next-line max-line-length\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \"./../errors/ERC721Errors.sol\";\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \"./../errors/ERC721MintableErrors.sol\";\nimport {ERC721BurntToken} from \"./../errors/ERC721MintableOnceErrors.sol\";\nimport {InconsistentArrayLengths} from \"./../../../CommonErrors.sol\";\nimport {Transfer, Approval, ApprovalForAll} from \"./../events/ERC721Events.sol\";\nimport {IERC721} from \"./../interfaces/IERC721.sol\";\nimport {IERC721BatchTransfer} from \"./../interfaces/IERC721BatchTransfer.sol\";\nimport {IERC721Metadata} from \"./../interfaces/IERC721Metadata.sol\";\nimport {IERC721Mintable} from \"./../interfaces/IERC721Mintable.sol\";\nimport {IERC721Deliverable} from \"./../interfaces/IERC721Deliverable.sol\";\nimport {IERC721Burnable} from \"./../interfaces/IERC721Burnable.sol\";\nimport {IERC721Receiver} from \"./../interfaces/IERC721Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC721Storage {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(uint256 => uint256) owners;\n        mapping(address => uint256) balances;\n        mapping(uint256 => address) approvals;\n        mapping(address => mapping(address => bool)) operators;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.ERC721.ERC721.storage\")) - 1);\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n\n    // Single token approval flag\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\n\n    // Burnt token magic value\n    // This magic number is used as the owner's value to indicate that the token has been burnt\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\n    function init() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\n    function initERC721BatchTransfer() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\n    function initERC721Metadata() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\n    function initERC721Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\n    function initERC721Deliverable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\n    function initERC721Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param sender The message sender.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        address ownerAddress = _tokenOwner(owner);\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\n        if (to == address(0)) {\n            if (_tokenHasApproval(owner)) {\n                // remove the approval bit if it is present\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\n            }\n        } else {\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\n            if (owner != ownerWithApprovalBit) {\n                // add the approval bit if it is not present\n                s.owners[tokenId] = ownerWithApprovalBit;\n            }\n            s.approvals[tokenId] = to;\n        }\n        emit Approval(ownerAddress, to, tokenId);\n    }\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param sender The message sender.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\n        s.operators[sender][operator] = approved;\n        emit ApprovalForAll(sender, operator, approved);\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = uint256(uint160(to));\n        if (from != to) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                --s.balances[from];\n                //  cannot overflow as supply cannot overflow\n                ++s.balances[to];\n            }\n        }\n\n        emit Transfer(from, to, tokenId);\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, \"\");\n        }\n    }\n\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, from, to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n    /// @dev Resets the token approval for each of `tokenIds`.\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from Current tokens owner.\n    /// @param to Address of the new token owner.\n    /// @param tokenIds Identifiers of the tokens to transfer.\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\n        if (to == address(0)) revert ERC721TransferToAddressZero();\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(from, to, tokenId);\n        }\n\n        if (from != to && length != 0) {\n            unchecked {\n                // cannot underflow as balance is verified through ownership\n                s.balances[from] -= length;\n                // cannot overflow as supply cannot overflow\n                s.balances[to] += length;\n            }\n        }\n    }\n\n    /// @notice Unsafely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mint(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            s.mint(recipients[i], tokenIds[i]);\n        }\n    }\n\n    /// @notice Unsafely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 owner = s.owners[tokenId];\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n        s.owners[tokenId] = uint256(uint160(to));\n\n        unchecked {\n            // cannot overflow due to the cost of minting individual tokens\n            ++s.balances[to];\n        }\n\n        emit Transfer(address(0), to, tokenId);\n    }\n\n    /// @notice Safely mints a token once.\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event from the zero address.\n    /// @param to Address of the new token owner.\n    /// @param tokenId Identifier of the token to mint.\n    /// @param data Optional data to pass along to the receiver call.\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\n        s.mintOnce(to, tokenId);\n        if (to.isContract()) {\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\n        }\n    }\n\n    /// @notice Unsafely mints a batch of tokens once.\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n    /// @param to Address of the new tokens owner.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\n        if (to == address(0)) revert ERC721MintToAddressZero();\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n\n            emit Transfer(address(0), to, tokenId);\n        }\n\n        unchecked {\n            s.balances[to] += length;\n        }\n    }\n\n    /// @notice Unsafely mints tokens to multiple recipients once.\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n    /// @param recipients Addresses of the new tokens owners.\n    /// @param tokenIds Identifiers of the tokens to mint.\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\n        uint256 length = recipients.length;\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\n        for (uint256 i; i < length; ++i) {\n            address to = recipients[i];\n            if (to == address(0)) revert ERC721MintToAddressZero();\n\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\n\n            s.owners[tokenId] = uint256(uint160(to));\n            unchecked {\n                ++s.balances[to];\n            }\n\n            emit Transfer(address(0), to, tokenId);\n        }\n    }\n\n    /// @notice Burns a token by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param sender The message sender.\n    /// @param from The current token owner.\n    /// @param tokenId The identifier of the token to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n\n        if (!_isOperatable(s, from, sender)) {\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n        }\n\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n\n        unchecked {\n            // cannot underflow as balance is verified through TOKEN ownership\n            --s.balances[from];\n        }\n        emit Transfer(from, address(0), tokenId);\n    }\n\n    /// @notice Burns a batch of tokens by a sender.\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n    /// @param sender The message sender.\n    /// @param from The current tokens owner.\n    /// @param tokenIds The identifiers of the tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\n        bool operatable = _isOperatable(s, from, sender);\n\n        uint256 length = tokenIds.length;\n        for (uint256 i; i < length; ++i) {\n            uint256 tokenId = tokenIds[i];\n            uint256 owner = s.owners[tokenId];\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\n            if (!operatable) {\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\n            }\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\n            emit Transfer(from, address(0), tokenId);\n        }\n\n        if (length != 0) {\n            unchecked {\n                s.balances[from] -= length;\n            }\n        }\n    }\n\n    /// @notice Gets the balance of an address.\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the owner of a token.\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token.\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        return _tokenOwner(owner);\n    }\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\n        uint256 owner = s.owners[tokenId];\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\n        if (_tokenHasApproval(owner)) {\n            return s.approvals[tokenId];\n        } else {\n            return address(0);\n        }\n    }\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\n        return s.operators[owner][operator];\n    }\n\n    /// @notice Gets whether a token was burnt.\n    /// @param tokenId The token identifier.\n    /// @return tokenWasBurnt Whether the token was burnt.\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\n        return _tokenWasBurnt(s.owners[tokenId]);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param tokenId Identifier of the token transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\n    }\n\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n    /// @param owner The token owner.\n    /// @param account The account to check the operatability of.\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\n        return (owner == account) || s.operators[owner][account];\n    }\n\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\n        return address(uint160(owner));\n    }\n\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\n        return uint160(owner) != 0;\n    }\n\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\n        return owner == BURNT_TOKEN_OWNER_VALUE;\n    }\n\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {TokenMetadataStorage} from \"./../libraries/TokenMetadataStorage.sol\";\n\n/// @title TokenMetadataBase (proxiable version).\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n/// @dev This contract is to be used via inheritance in a proxied implementation.\nabstract contract TokenMetadataBase {\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\n\n    /// @notice Gets the token name. E.g. \"My Token\".\n    /// @return tokenName The token name.\n    function name() public view virtual returns (string memory tokenName) {\n        return TokenMetadataStorage.layout().name();\n    }\n\n    /// @notice Gets the token symbol. E.g. \"TOK\".\n    /// @return tokenSymbol The token symbol.\n    function symbol() public view virtual returns (string memory tokenSymbol) {\n        return TokenMetadataStorage.layout().symbol();\n    }\n\n    /// @notice Gets the token metadata resolver address.\n    /// @return tokenMetadataResolver The token metadata resolver address.\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return TokenMetadataStorage.layout().metadataResolver();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ITokenMetadataResolver\n/// @notice Interface for Token Metadata Resolvers.\ninterface ITokenMetadataResolver {\n    /// @notice Gets the token metadata URI for a token.\n    /// @param tokenContract The token contract for which to retrieve the token URI.\n    /// @param tokenId The token identifier.\n    /// @return tokenURI The token metadata URI.\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\n}\n"},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ITokenMetadataResolver} from \"./../interfaces/ITokenMetadataResolver.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary TokenMetadataStorage {\n    struct Layout {\n        string tokenName;\n        string tokenSymbol;\n        ITokenMetadataResolver tokenMetadataResolver;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.token.metadata.TokenMetadata.phase\")) - 1);\n\n    /// @notice Initializes the metadata storage (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function constructorInit(\n        Layout storage s,\n        string memory tokenName,\n        string memory tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Initializes the metadata storage (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @param tokenName The token name.\n    /// @param tokenSymbol The token symbol.\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\n    function proxyInit(\n        Layout storage s,\n        string calldata tokenName,\n        string calldata tokenSymbol,\n        ITokenMetadataResolver tokenMetadataResolver\n    ) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.tokenName = tokenName;\n        s.tokenSymbol = tokenSymbol;\n        s.tokenMetadataResolver = tokenMetadataResolver;\n    }\n\n    /// @notice Gets the name of the token.\n    /// @return tokenName The name of the token contract.\n    function name(Layout storage s) internal view returns (string memory tokenName) {\n        return s.tokenName;\n    }\n\n    /// @notice Gets the symbol of the token.\n    /// @return tokenSymbol The symbol of the token contract.\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\n        return s.tokenSymbol;\n    }\n\n    /// @notice Gets the address of the token metadata resolver.\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\n        return s.tokenMetadataResolver;\n    }\n\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\n    /// @param tokenContract The address of the token contract.\n    /// @param tokenId The ID of the token.\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`.\n/// @param recipient The address to which transfer was approved for.\n/// @param tokenId The tokenId that was approved for transfer.\n/// @param sender The account that approved the transfer.\nevent TransferAllowed(address indexed recipient, uint256 indexed tokenId, address sender);\n\n/// @notice Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`.\n/// @param recipient The address to which transfer was approved for.\n/// @param tokenId The tokenId that was approved for transfer.\n/// @param sender The account that approved the transfer.\nevent AllowedTransferRemoved(address indexed recipient, uint256 indexed tokenId, address sender);\n\n"},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title IAllowedIssuersRegistry\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\ninterface IIssuersDIDRegistry {\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\n\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\n}\n"},"contracts/vc/interfaces/IRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ninterface IRevocationRegistry {\n    function currentNonce() external view returns (uint256 nonce);\n\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\n\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\n\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\n}\n"},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nlibrary CertificateNFTv1MetaData {\n    struct MetaData {\n        uint16 schemaVersion;\n        uint16 achievementType;\n        uint64 awardedDate;\n        uint64 validFrom;\n        uint64 validUtil;\n        string issuerDid;\n        string achievementId;\n    }\n}\n"},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {AccessControl} from \"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {CertificateNFTv1MetaData} from \"./libraries/CertificateNFTv1MetaData.sol\";\nimport {OpenCampusCertificateNFTv1} from \"./OpenCampusCertificateNFTv1.sol\";\n\ncontract OpenCampusCertificateNFTMinter is AccessControl {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n    OpenCampusCertificateNFTv1 internal immutable NFT_V1;\n\n    IRevocationRegistry internal _revocationRegistry;\n    /// @notice Thrown when the signature is invalid for the NFT payload.\n    error InvalidSignature();\n\n    /// @notice Thrown when the issuer is not one of the allowed issuers.\n    error IssuerNotAllowed();\n\n    /// @notice Thrown when the VC has been revoked.\n    error VcRevoked();\n\n    constructor(\n        IIssuersDIDRegistry didRegistry,\n        OpenCampusCertificateNFTv1 nftv1,\n        IRevocationRegistry revocationRegistry\n    ) ContractOwnership(msg.sender) {\n        DID_REGISTRY = didRegistry;\n        NFT_V1 = nftv1;\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @param revocationRegistry The address of the Revocation Registry contract.\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @dev Reverts with `VcRevoked` error if the token being minted has been revoked.\n    /// @dev signature is ECDSA signature for (to, tokenId, metadata).\n    /// @dev signature is a 65 bytes raw signature without compacting.\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata, bytes calldata signature) external {\n        // recover the signer\n        if (signature.length != 65) revert InvalidSignature();\n\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        assembly {\n            r := calldataload(signature.offset)\n            s := calldataload(add(signature.offset, 0x20))\n            v := calldataload(add(signature.offset, 0x21))\n        }\n\n        // Use the native ecrecover provided by the EVM\n        address signer = ecrecover(keccak256(abi.encode(to, tokenId, metadata)), v, r, s);\n        bytes32 hashedDid = keccak256(abi.encodePacked(metadata.issuerDid));\n\n        if (DID_REGISTRY.issuers(hashedDid, signer)) {\n            if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\n                revert VcRevoked();\n            }\n            NFT_V1.mint(to, tokenId, metadata);\n        } else {\n            revert IssuerNotAllowed();\n        }\n    }\n}\n"},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {AccessControl} from \"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\";\nimport {ITokenMetadataResolver} from \"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\";\nimport {IERC721} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\";\nimport {IERC721Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\";\nimport {ERC721Metadata} from \"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\";\nimport {ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected} from \"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\";\nimport {Transfer} from \"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {ERC721Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\";\nimport {AccessControlStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\";\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {CertificateNFTv1MetaData} from \"./libraries/CertificateNFTv1MetaData.sol\";\nimport {TransferAllowed, AllowedTransferRemoved} from \"./events/OpenCampusCertificateNFTv1Events.sol\";\n\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl {\n    using Address for address;\n    using ERC721Storage for ERC721Storage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\n\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n    IRevocationRegistry internal _revocationRegistry;\n\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\n    bytes32 public constant MINTER_ROLE = \"minter\";\n    bytes32 public constant OPERATOR_ROLE = \"operator\";\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\n    mapping(uint256 => address) public allowedTransfers;\n\n    /// @notice Thrown when any transfer functions are called but not allowed.\n    error TransferNotAllowed();\n\n    /// @notice Thrown when any operator related methods are called.\n    error NoOperatorAllowed();\n\n    /// @notice Thrown when burn operation cannot be executed.\n    error InvalidBurn();\n\n    /// @notice Thrown when allowed transfer is called with receipt same as owner.\n    error RedundantAllowedTransfer(address recipient);\n\n    /// @notice Thrown when there is no allowed transfer for `tokenId`\n    error NonExistingAllowedTransfer(uint256 tokenId);\n\n    constructor(\n        string memory tokenName,\n        string memory tokenSymbol,\n        ITokenMetadataResolver metadataResolver,\n        IRevocationRegistry revocationRegistry,\n        IIssuersDIDRegistry didRegistry\n    ) ContractOwnership(msg.sender) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\n        ERC721Storage.initERC721Mintable();\n        DID_REGISTRY = didRegistry;\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @param revocationRegistry The address of the Revocation Registry contract.\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        _revocationRegistry = revocationRegistry;\n    }\n\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\n\n        ERC721Storage.layout().mint(to, tokenId);\n        vcData[tokenId] = metadata;\n    }\n\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\n    /// @param tokenId The Token Id to be burnt.\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\n    function burn(uint256 tokenId) external {\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\n\n            unchecked {\n                // cannot underflow as balance is verified through TOKEN ownership\n                --ERC721Storage.layout().balances[owner];\n            }\n            emit Transfer(owner, address(0), tokenId);\n        } else {\n            revert InvalidBurn();\n        }\n    }\n\n    /// @notice Allow a one time transfer of `tokenId` to `recipient`.\n    /// @dev emit a `TransferAllowed` event upon successful operation.\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\n    /// @dev Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.\n    /// @param recipient The address to which transfer would be allowed.\n    /// @param tokenId The tokenId to be allowed for transfer.\n    function allowTransfer(address recipient, uint256 tokenId) external {\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\n        // either the sender is allowed to operate on behalf of the issuer\n        // or sender has operator role for this NFT\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\n        }\n\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\n        if (owner == recipient) revert RedundantAllowedTransfer(recipient);\n\n        allowedTransfers[tokenId] = recipient;\n        emit TransferAllowed(recipient, tokenId, msg.sender);\n    }\n\n    /// @notice Remove the one time transfer that was allowed before for `tokenId`.\n    /// @dev emit a `AllowedTransferRemoved` event upon successful operation.\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\n    /// @dev Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.\n    /// @param tokenId The tokenId of which allowed transfer would be removed.\n    function removeAllowedTransfer(uint256 tokenId) external {\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\n        // either the sender is allowed to operate on behalf of the issuer\n        // or sender has operator role for this NFT\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\n        }\n\n        if (allowedTransfers[tokenId] == address(0)) revert NonExistingAllowedTransfer(tokenId);\n        emit AllowedTransferRemoved(allowedTransfers[tokenId], tokenId, msg.sender);\n        delete allowedTransfers[tokenId];\n    }\n\n    /// @inheritdoc IERC721\n    function balanceOf(address owner) external view returns (uint256 balance) {\n        return ERC721Storage.layout().balanceOf(owner);\n    }\n\n    /// @inheritdoc IERC721\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\n        return ERC721Storage.layout().ownerOf(tokenId);\n    }\n\n    /// @inheritdoc IERC721\n    function getApproved(uint256 tokenId) external view returns (address approved) {\n        revert NoOperatorAllowed();\n    }\n\n    /// @inheritdoc IERC721\n    function approve(address to, uint256 tokenId) external virtual {\n        revert TransferNotAllowed();\n    }\n\n    /// @inheritdoc IERC721\n    function setApprovalForAll(address operator, bool approved) external virtual {\n        revert NoOperatorAllowed();\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n    /// approved by a token's issuer or an operator.\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n    /// @dev remove the existing approval for `tokenId`.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) public {\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\n        if (owner != msg.sender) revert ERC721NonOwnedToken(msg.sender, tokenId);\n        if (from != owner || allowedTransfers[tokenId] != to) revert ERC721NonApprovedForTransfer(from, owner, tokenId);\n\n        ERC721Storage.layout().owners[tokenId] = uint256(uint160(to));\n        // already verified during approval that owner cannot be the same as to\n        unchecked {\n            // cannot underflow as balance is verified through ownership\n            --ERC721Storage.layout().balances[owner];\n            //  cannot overflow as supply cannot overflow\n            ++ERC721Storage.layout().balances[to];\n        }\n\n        delete allowedTransfers[tokenId];\n        emit Transfer(owner, to, tokenId);\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n    /// approved by a token's issuer or an operator.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev remove the existing approval for `tokenId`.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\n        transferFrom(from, to, tokenId);\n        if (to.isContract()) {\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, \"\") != ERC721_RECEIVED)\n                revert ERC721SafeTransferRejected(to, tokenId);\n        }\n    }\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n    /// approved by a token's issuer or an operator.\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev remove the existing approval for `tokenId`.\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\n        transferFrom(from, to, tokenId);\n        if (to.isContract()) {\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) != ERC721_RECEIVED)\n                revert ERC721SafeTransferRejected(to, tokenId);\n        }\n    }\n\n    /// @inheritdoc IERC721\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n        revert NoOperatorAllowed();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"errors":[{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:150:26:\n    |\n150 |     function getApproved(uint256 tokenId) external view returns (address approved) {\n    |                          ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8105,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8090},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:150:66:\n    |\n150 |     function getApproved(uint256 tokenId) external view returns (address approved) {\n    |                                                                  ^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8146,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8130},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:155:22:\n    |\n155 |     function approve(address to, uint256 tokenId) external virtual {\n    |                      ^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8252,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8242},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:155:34:\n    |\n155 |     function approve(address to, uint256 tokenId) external virtual {\n    |                                  ^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8269,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8254},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:160:32:\n    |\n160 |     function setApprovalForAll(address operator, bool approved) external virtual {\n    |                                ^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8409,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8393},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:160:50:\n    |\n160 |     function setApprovalForAll(address operator, bool approved) external virtual {\n    |                                                  ^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":8424,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8411},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:239:31:\n    |\n239 |     function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n    |                               ^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":13274,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":13261},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:239:46:\n    |\n239 |     function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n    |                                              ^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":13292,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":13276},"type":"Warning"},{"component":"general","errorCode":"5667","formattedMessage":"Warning: Unused function parameter. Remove or comment out the variable name to silence this warning.\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:239:87:\n    |\n239 |     function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n    |                                                                                       ^^^^^^^^^^^^^^^^^^^\n\n","message":"Unused function parameter. Remove or comment out the variable name to silence this warning.","severity":"warning","sourceLocation":{"end":13336,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":13317},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:150:5:\n    |\n150 |     function getApproved(uint256 tokenId) external view returns (address approved) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":8191,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":8069},"type":"Warning"},{"component":"general","errorCode":"2018","formattedMessage":"Warning: Function state mutability can be restricted to pure\n   --> contracts/vc/OpenCampusCertificateNFTv1.sol:239:5:\n    |\n239 |     function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\n    |     ^ (Relevant source part starts here and spans across multiple lines).\n\n","message":"Function state mutability can be restricted to pure","severity":"warning","sourceLocation":{"end":13381,"file":"contracts/vc/OpenCampusCertificateNFTv1.sol","start":13235},"type":"Warning"}],"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7],"TransferFailed":[10]},"id":11,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"},{"documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"286:52:0","text":"@notice Thrown when an ETH transfer has failed."},"errorSelector":"90b8ec18","id":10,"name":"TransferFailed","nameLocation":"344:14:0","nodeType":"ErrorDefinition","parameters":{"id":9,"nodeType":"ParameterList","parameters":[],"src":"358:2:0"},"src":"338:23:0"}],"src":"32:330:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[22],"AccessControlBase":[179],"ContractOwnership":[55]},"id":23,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":12,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":14,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":180,"src":"58:63:1","symbolAliases":[{"foreign":{"id":13,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":179,"src":"66:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":16,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":23,"sourceUnit":56,"src":"122:58:1","symbolAliases":[{"foreign":{"id":15,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"130:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":18,"name":"AccessControlBase","nameLocations":["384:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":179,"src":"384:17:1"},"id":19,"nodeType":"InheritanceSpecifier","src":"384:17:1"},{"baseName":{"id":20,"name":"ContractOwnership","nameLocations":["403:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"403:17:1"},"id":21,"nodeType":"InheritanceSpecifier","src":"403:17:1"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"182:167:1","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":22,"linearizedBaseContracts":[22,55,882,899,227,179,3851,331,315],"name":"AccessControl","nameLocation":"367:13:1","nodeType":"ContractDefinition","nodes":[],"scope":23,"src":"349:76:1","usedErrors":[236,259,887],"usedEvents":[277,286,295]}],"src":"32:394:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[55],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[852],"InterfaceDetection":[882]},"id":56,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":24,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":26,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":853,"src":"58:82:2","symbolAliases":[{"foreign":{"id":25,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":28,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":228,"src":"141:71:2","symbolAliases":[{"foreign":{"id":27,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":227,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":30,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":56,"sourceUnit":883,"src":"213:77:2","symbolAliases":[{"foreign":{"id":29,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":882,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":32,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":227,"src":"549:21:2"},"id":33,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":34,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":882,"src":"572:18:2"},"id":35,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":31,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":55,"linearizedBaseContracts":[55,882,899,227,3851,331],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":39,"libraryName":{"id":36,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":38,"nodeType":"UserDefinedTypeName","pathNode":{"id":37,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"632:31:2"},"referencedDeclaration":625,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":53,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":50,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":45,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":47,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":49,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":695,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":51,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":52,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":40,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":54,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":43,"nodeType":"ParameterList","parameters":[{"constant":false,"id":42,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":54,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":41,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":44,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":55,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":56,"src":"510:570:2","usedErrors":[259,887],"usedEvents":[295]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[179],"AccessControlStorage":[594],"Context":[3851],"ContractOwnershipStorage":[852],"IAccessControl":[315]},"id":180,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":57,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":59,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":316,"src":"58:76:3","symbolAliases":[{"foreign":{"id":58,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"66:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":61,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":595,"src":"135:77:3","symbolAliases":[{"foreign":{"id":60,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"143:20:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":63,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":853,"src":"213:85:3","symbolAliases":[{"foreign":{"id":62,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"221:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":65,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":180,"sourceUnit":3852,"src":"299:66:3","symbolAliases":[{"foreign":{"id":64,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"307:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":67,"name":"IAccessControl","nameLocations":["632:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":315,"src":"632:14:3"},"id":68,"nodeType":"InheritanceSpecifier","src":"632:14:3"},{"baseName":{"id":69,"name":"Context","nameLocations":["648:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":3851,"src":"648:7:3"},"id":70,"nodeType":"InheritanceSpecifier","src":"648:7:3"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":66,"nodeType":"StructuredDocumentation","src":"367:226:3","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":179,"linearizedBaseContracts":[179,3851,315],"name":"AccessControlBase","nameLocation":"611:17:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":74,"libraryName":{"id":71,"name":"AccessControlStorage","nameLocations":["668:20:3"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"668:20:3"},"nodeType":"UsingForDirective","src":"662:59:3","typeName":{"id":73,"nodeType":"UserDefinedTypeName","pathNode":{"id":72,"name":"AccessControlStorage.Layout","nameLocations":["693:20:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"693:27:3"},"referencedDeclaration":359,"src":"693:27:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":78,"libraryName":{"id":75,"name":"ContractOwnershipStorage","nameLocations":["732:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"732:24:3"},"nodeType":"UsingForDirective","src":"726:67:3","typeName":{"id":77,"nodeType":"UserDefinedTypeName","pathNode":{"id":76,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:3","786:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"761:31:3"},"referencedDeclaration":625,"src":"761:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":109,"nodeType":"Block","src":"1175:198:3","statements":[{"assignments":[87],"declarations":[{"constant":false,"id":87,"mutability":"mutable","name":"operator","nameLocation":"1193:8:3","nodeType":"VariableDeclaration","scope":109,"src":"1185:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":86,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":90,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":88,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"1204:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":89,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:3"},{"expression":{"arguments":[{"id":96,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1283:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":91,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1226:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":93,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1226:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":95,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1226:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":97,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":98,"nodeType":"ExpressionStatement","src":"1226:66:3"},{"expression":{"arguments":[{"id":104,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":81,"src":"1342:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":105,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":83,"src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":106,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"1357:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":99,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1302:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":101,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1302:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":102,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":103,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:3","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":410,"src":"1302:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":108,"nodeType":"ExpressionStatement","src":"1302:64:3"}]},"documentation":{"id":79,"nodeType":"StructuredDocumentation","src":"799:312:3","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":110,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:3","nodeType":"FunctionDefinition","parameters":{"id":84,"nodeType":"ParameterList","parameters":[{"constant":false,"id":81,"mutability":"mutable","name":"role","nameLocation":"1143:4:3","nodeType":"VariableDeclaration","scope":110,"src":"1135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":80,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":83,"mutability":"mutable","name":"account","nameLocation":"1157:7:3","nodeType":"VariableDeclaration","scope":110,"src":"1149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":82,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:3"},"returnParameters":{"id":85,"nodeType":"ParameterList","parameters":[],"src":"1175:0:3"},"scope":179,"src":"1116:257:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":141,"nodeType":"Block","src":"1754:199:3","statements":[{"assignments":[119],"declarations":[{"constant":false,"id":119,"mutability":"mutable","name":"operator","nameLocation":"1772:8:3","nodeType":"VariableDeclaration","scope":141,"src":"1764:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":118,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":122,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":120,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"1783:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":121,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:3"},{"expression":{"arguments":[{"id":128,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1862:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":123,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1805:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1805:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":127,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1805:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":130,"nodeType":"ExpressionStatement","src":"1805:66:3"},{"expression":{"arguments":[{"id":136,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":113,"src":"1922:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":137,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":115,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":138,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":119,"src":"1937:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":131,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1881:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"1881:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:3","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":447,"src":"1881:40:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":140,"nodeType":"ExpressionStatement","src":"1881:65:3"}]},"documentation":{"id":111,"nodeType":"StructuredDocumentation","src":"1379:310:3","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":142,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:3","nodeType":"FunctionDefinition","parameters":{"id":116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":113,"mutability":"mutable","name":"role","nameLocation":"1722:4:3","nodeType":"VariableDeclaration","scope":142,"src":"1714:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":112,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":115,"mutability":"mutable","name":"account","nameLocation":"1736:7:3","nodeType":"VariableDeclaration","scope":142,"src":"1728:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":114,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:3"},"returnParameters":{"id":117,"nodeType":"ParameterList","parameters":[],"src":"1754:0:3"},"scope":179,"src":"1694:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[304],"body":{"id":158,"nodeType":"Block","src":"2039:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":153,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"2092:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":155,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":145,"src":"2106:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":148,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2049:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"2049:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":152,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:3","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":482,"src":"2049:42:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$359_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":157,"nodeType":"ExpressionStatement","src":"2049:62:3"}]},"documentation":{"id":143,"nodeType":"StructuredDocumentation","src":"1959:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":159,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:3","nodeType":"FunctionDefinition","parameters":{"id":146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":145,"mutability":"mutable","name":"role","nameLocation":"2024:4:3","nodeType":"VariableDeclaration","scope":159,"src":"2016:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":144,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:3"},"returnParameters":{"id":147,"nodeType":"ParameterList","parameters":[],"src":"2039:0:3"},"scope":179,"src":"1994:124:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[314],"body":{"id":177,"nodeType":"Block","src":"2245:76:3","statements":[{"expression":{"arguments":[{"id":173,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":162,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":174,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":164,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":169,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"2262:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"2262:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":171,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":172,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:3","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"2262:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":168,"id":176,"nodeType":"Return","src":"2255:59:3"}]},"documentation":{"id":160,"nodeType":"StructuredDocumentation","src":"2124:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":178,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:3","nodeType":"FunctionDefinition","parameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":162,"mutability":"mutable","name":"role","nameLocation":"2184:4:3","nodeType":"VariableDeclaration","scope":178,"src":"2176:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":161,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":164,"mutability":"mutable","name":"account","nameLocation":"2198:7:3","nodeType":"VariableDeclaration","scope":178,"src":"2190:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":163,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:3"},"returnParameters":{"id":168,"nodeType":"ParameterList","parameters":[{"constant":false,"id":167,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:3","nodeType":"VariableDeclaration","scope":178,"src":"2230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":166,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:3"},"scope":179,"src":"2159:162:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":180,"src":"593:1730:3","usedErrors":[236,259],"usedEvents":[277,286]}],"src":"32:2292:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[3851],"ContractOwnershipBase":[227],"ContractOwnershipStorage":[852],"IERC173":[331]},"id":228,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":181,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":183,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":332,"src":"58:52:4","symbolAliases":[{"foreign":{"id":182,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"66:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":185,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":853,"src":"111:85:4","symbolAliases":[{"foreign":{"id":184,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"119:24:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":187,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":228,"sourceUnit":3852,"src":"197:66:4","symbolAliases":[{"foreign":{"id":186,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3851,"src":"205:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":189,"name":"IERC173","nameLocations":["586:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":331,"src":"586:7:4"},"id":190,"nodeType":"InheritanceSpecifier","src":"586:7:4"},{"baseName":{"id":191,"name":"Context","nameLocations":["595:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":3851,"src":"595:7:4"},"id":192,"nodeType":"InheritanceSpecifier","src":"595:7:4"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":188,"nodeType":"StructuredDocumentation","src":"265:278:4","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":227,"linearizedBaseContracts":[227,3851,331],"name":"ContractOwnershipBase","nameLocation":"561:21:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":196,"libraryName":{"id":193,"name":"ContractOwnershipStorage","nameLocations":["615:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"615:24:4"},"nodeType":"UsingForDirective","src":"609:67:4","typeName":{"id":195,"nodeType":"UserDefinedTypeName","pathNode":{"id":194,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:4","669:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"644:31:4"},"referencedDeclaration":625,"src":"644:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[330],"body":{"id":208,"nodeType":"Block","src":"765:65:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":202,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"782:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"782:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":204,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":205,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":772,"src":"782:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":201,"id":207,"nodeType":"Return","src":"775:48:4"}]},"documentation":{"id":197,"nodeType":"StructuredDocumentation","src":"682:23:4","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":209,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:4","nodeType":"FunctionDefinition","parameters":{"id":198,"nodeType":"ParameterList","parameters":[],"src":"724:2:4"},"returnParameters":{"id":201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":200,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":209,"src":"756:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":199,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:4"},"scope":227,"src":"710:120:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[324],"body":{"id":225,"nodeType":"Block","src":"924:92:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":220,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"986:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":221,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":222,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":212,"src":"1000:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":215,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"934:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"934:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":219,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:4","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":759,"src":"934:51:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":223,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":224,"nodeType":"ExpressionStatement","src":"934:75:4"}]},"documentation":{"id":210,"nodeType":"StructuredDocumentation","src":"836:23:4","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":226,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:4","nodeType":"FunctionDefinition","parameters":{"id":213,"nodeType":"ParameterList","parameters":[{"constant":false,"id":212,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:4","nodeType":"VariableDeclaration","scope":226,"src":"891:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":211,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:4"},"returnParameters":{"id":214,"nodeType":"ParameterList","parameters":[],"src":"924:0:4"},"scope":227,"src":"864:152:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":228,"src":"543:475:4","usedErrors":[259],"usedEvents":[295]}],"src":"32:987:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245]},"id":246,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":229,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":230,"nodeType":"StructuredDocumentation","src":"58:165:5","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":236,"name":"NotRoleHolder","nameLocation":"229:13:5","nodeType":"ErrorDefinition","parameters":{"id":235,"nodeType":"ParameterList","parameters":[{"constant":false,"id":232,"mutability":"mutable","name":"role","nameLocation":"251:4:5","nodeType":"VariableDeclaration","scope":236,"src":"243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":231,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":234,"mutability":"mutable","name":"account","nameLocation":"265:7:5","nodeType":"VariableDeclaration","scope":236,"src":"257:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":233,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:5"},"src":"223:51:5"},{"documentation":{"id":237,"nodeType":"StructuredDocumentation","src":"276:238:5","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":245,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:5","nodeType":"ErrorDefinition","parameters":{"id":244,"nodeType":"ParameterList","parameters":[{"constant":false,"id":239,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:5","nodeType":"VariableDeclaration","scope":245,"src":"548:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":238,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":241,"mutability":"mutable","name":"role","nameLocation":"580:4:5","nodeType":"VariableDeclaration","scope":245,"src":"572:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":240,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":243,"mutability":"mutable","name":"account","nameLocation":"594:7:5","nodeType":"VariableDeclaration","scope":245,"src":"586:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":242,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:5"},"src":"514:89:5"}],"src":"32:572:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[252]},"id":253,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":247,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":248,"nodeType":"StructuredDocumentation","src":"58:128:6","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":252,"name":"TargetIsNotAContract","nameLocation":"192:20:6","nodeType":"ErrorDefinition","parameters":{"id":251,"nodeType":"ParameterList","parameters":[{"constant":false,"id":250,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:6","nodeType":"VariableDeclaration","scope":252,"src":"213:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":249,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:6"},"src":"186:51:6"}],"src":"32:206:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[259],"NotTargetContractOwner":[266]},"id":267,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":254,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"documentation":{"id":255,"nodeType":"StructuredDocumentation","src":"58:130:7","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":259,"name":"NotContractOwner","nameLocation":"194:16:7","nodeType":"ErrorDefinition","parameters":{"id":258,"nodeType":"ParameterList","parameters":[{"constant":false,"id":257,"mutability":"mutable","name":"account","nameLocation":"219:7:7","nodeType":"VariableDeclaration","scope":259,"src":"211:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":256,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:7"},"src":"188:40:7"},{"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"230:194:7","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":266,"name":"NotTargetContractOwner","nameLocation":"430:22:7","nodeType":"ErrorDefinition","parameters":{"id":265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:7","nodeType":"VariableDeclaration","scope":266,"src":"453:22:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":264,"mutability":"mutable","name":"account","nameLocation":"485:7:7","nodeType":"VariableDeclaration","scope":266,"src":"477:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:7"},"src":"424:70:7"}],"src":"32:463:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","exportedSymbols":{"RoleGranted":[277],"RoleRevoked":[286]},"id":287,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":268,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"anonymous":false,"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"58:223:8","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":277,"name":"RoleGranted","nameLocation":"287:11:8","nodeType":"EventDefinition","parameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"307:4:8","nodeType":"VariableDeclaration","scope":277,"src":"299:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":273,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"321:7:8","nodeType":"VariableDeclaration","scope":277,"src":"313:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"313:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":275,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"338:8:8","nodeType":"VariableDeclaration","scope":277,"src":"330:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":274,"name":"address","nodeType":"ElementaryTypeName","src":"330:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"298:49:8"},"src":"281:67:8"},{"anonymous":false,"documentation":{"id":278,"nodeType":"StructuredDocumentation","src":"350:225:8","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":286,"name":"RoleRevoked","nameLocation":"581:11:8","nodeType":"EventDefinition","parameters":{"id":285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":280,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"601:4:8","nodeType":"VariableDeclaration","scope":286,"src":"593:12:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":279,"name":"bytes32","nodeType":"ElementaryTypeName","src":"593:7:8","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":282,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"615:7:8","nodeType":"VariableDeclaration","scope":286,"src":"607:15:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":281,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":284,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"632:8:8","nodeType":"VariableDeclaration","scope":286,"src":"624:16:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"624:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"592:49:8"},"src":"575:67:8"}],"src":"32:611:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[295]},"id":296,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":288,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"anonymous":false,"documentation":{"id":289,"nodeType":"StructuredDocumentation","src":"58:155:9","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":295,"name":"OwnershipTransferred","nameLocation":"219:20:9","nodeType":"EventDefinition","parameters":{"id":294,"nodeType":"ParameterList","parameters":[{"constant":false,"id":291,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:9","nodeType":"VariableDeclaration","scope":295,"src":"240:29:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":290,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":293,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:9","nodeType":"VariableDeclaration","scope":295,"src":"271:24:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":292,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:9"},"src":"213:84:9"}],"src":"32:269:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[315]},"id":316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":297,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":298,"nodeType":"StructuredDocumentation","src":"58:59:10","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":315,"linearizedBaseContracts":[315],"name":"IAccessControl","nameLocation":"127:14:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":299,"nodeType":"StructuredDocumentation","src":"148:182:10","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":304,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"344:12:10","nodeType":"FunctionDefinition","parameters":{"id":302,"nodeType":"ParameterList","parameters":[{"constant":false,"id":301,"mutability":"mutable","name":"role","nameLocation":"365:4:10","nodeType":"VariableDeclaration","scope":304,"src":"357:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":300,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"356:14:10"},"returnParameters":{"id":303,"nodeType":"ParameterList","parameters":[],"src":"379:0:10"},"scope":315,"src":"335:45:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"386:173:10","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":314,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"573:7:10","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"role","nameLocation":"589:4:10","nodeType":"VariableDeclaration","scope":314,"src":"581:12:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":306,"name":"bytes32","nodeType":"ElementaryTypeName","src":"581:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"603:7:10","nodeType":"VariableDeclaration","scope":314,"src":"595:15:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"595:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"580:31:10"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"hasRole_","nameLocation":"640:8:10","nodeType":"VariableDeclaration","scope":314,"src":"635:13:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"635:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"634:15:10"},"scope":315,"src":"564:86:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":316,"src":"117:535:10","usedErrors":[],"usedEvents":[]}],"src":"32:621:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[331]},"id":332,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":317,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"58:182:11","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":331,"linearizedBaseContracts":[331],"name":"IERC173","nameLocation":"250:7:11","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":319,"nodeType":"StructuredDocumentation","src":"264:342:11","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":324,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:11","nodeType":"FunctionDefinition","parameters":{"id":322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":321,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:11","nodeType":"VariableDeclaration","scope":324,"src":"638:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":320,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:11"},"returnParameters":{"id":323,"nodeType":"ParameterList","parameters":[],"src":"664:0:11"},"scope":331,"src":"611:54:11","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":325,"nodeType":"StructuredDocumentation","src":"671:116:11","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":330,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:11","nodeType":"FunctionDefinition","parameters":{"id":326,"nodeType":"ParameterList","parameters":[],"src":"806:2:11"},"returnParameters":{"id":329,"nodeType":"ParameterList","parameters":[{"constant":false,"id":328,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:11","nodeType":"VariableDeclaration","scope":330,"src":"832:21:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":327,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:11"},"scope":331,"src":"792:63:11","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":332,"src":"240:617:11","usedErrors":[],"usedEvents":[]}],"src":"32:826:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[594],"Address":[3829],"IAccessControl":[315],"NotRoleHolder":[236],"NotTargetContractRoleHolder":[245],"RoleGranted":[277],"RoleRevoked":[286],"TargetIsNotAContract":[252]},"id":595,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":333,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":336,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":246,"src":"58:95:12","symbolAliases":[{"foreign":{"id":334,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"66:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":335,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"81:27:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":338,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":253,"src":"154:60:12","symbolAliases":[{"foreign":{"id":337,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"162:20:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol","file":"./../events/AccessControlEvents.sol","id":341,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":287,"src":"215:77:12","symbolAliases":[{"foreign":{"id":339,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"223:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":340,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"236:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":343,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":316,"src":"293:66:12","symbolAliases":[{"foreign":{"id":342,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"301:14:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":345,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":595,"sourceUnit":3830,"src":"360:66:12","symbolAliases":[{"foreign":{"id":344,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"368:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":594,"linearizedBaseContracts":[594],"name":"AccessControlStorage","nameLocation":"436:20:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":348,"libraryName":{"id":346,"name":"Address","nameLocations":["469:7:12"],"nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"469:7:12"},"nodeType":"UsingForDirective","src":"463:26:12","typeName":{"id":347,"name":"address","nodeType":"ElementaryTypeName","src":"481:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":352,"libraryName":{"id":349,"name":"AccessControlStorage","nameLocations":["500:20:12"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"500:20:12"},"nodeType":"UsingForDirective","src":"494:59:12","typeName":{"id":351,"nodeType":"UserDefinedTypeName","pathNode":{"id":350,"name":"AccessControlStorage.Layout","nameLocations":["525:20:12","546:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"525:27:12"},"referencedDeclaration":359,"src":"525:27:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":359,"members":[{"constant":false,"id":358,"mutability":"mutable","name":"roles","nameLocation":"628:5:12","nodeType":"VariableDeclaration","scope":359,"src":"583:50:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":357,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"591:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"583:44:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":356,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":354,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"602:24:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":355,"name":"bool","nodeType":"ElementaryTypeName","src":"621:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"566:6:12","nodeType":"StructDefinition","scope":594,"src":"559:81:12","visibility":"public"},{"constant":true,"id":372,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"672:19:12","nodeType":"VariableDeclaration","scope":594,"src":"646:124:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":360,"name":"bytes32","nodeType":"ElementaryTypeName","src":"646:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":370,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"720:43:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":365,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"710:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"710:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"702:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":363,"name":"uint256","nodeType":"ElementaryTypeName","src":"702:7:12","typeDescriptions":{}}},"id":368,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"702:63:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":369,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"768:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"702:67:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":362,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"694:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":361,"name":"bytes32","nodeType":"ElementaryTypeName","src":"694:7:12","typeDescriptions":{}}},"id":371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"694:76:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":409,"nodeType":"Block","src":"1246:156:12","statements":[{"condition":{"id":390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1260:25:12","subExpression":{"arguments":[{"id":387,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1271:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1277:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":385,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1261:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":386,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1263:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1261:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1261:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":408,"nodeType":"IfStatement","src":"1256:140:12","trueBody":{"id":407,"nodeType":"Block","src":"1287:109:12","statements":[{"expression":{"id":399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":391,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1301:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":395,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1303:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1301:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":396,"indexExpression":{"id":393,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1309:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1301:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":397,"indexExpression":{"id":394,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1315:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1301:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":398,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1326:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1301:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":400,"nodeType":"ExpressionStatement","src":"1301:29:12"},{"eventCall":{"arguments":[{"id":402,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":378,"src":"1361:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":403,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":380,"src":"1367:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":404,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":382,"src":"1376:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":401,"name":"RoleGranted","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":277,"src":"1349:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1349:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":406,"nodeType":"EmitStatement","src":"1344:41:12"}]}}]},"documentation":{"id":373,"nodeType":"StructuredDocumentation","src":"777:369:12","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":410,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1160:9:12","nodeType":"FunctionDefinition","parameters":{"id":383,"nodeType":"ParameterList","parameters":[{"constant":false,"id":376,"mutability":"mutable","name":"s","nameLocation":"1185:1:12","nodeType":"VariableDeclaration","scope":410,"src":"1170:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":375,"nodeType":"UserDefinedTypeName","pathNode":{"id":374,"name":"Layout","nameLocations":["1170:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1170:6:12"},"referencedDeclaration":359,"src":"1170:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":378,"mutability":"mutable","name":"role","nameLocation":"1196:4:12","nodeType":"VariableDeclaration","scope":410,"src":"1188:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1188:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":380,"mutability":"mutable","name":"account","nameLocation":"1210:7:12","nodeType":"VariableDeclaration","scope":410,"src":"1202:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":379,"name":"address","nodeType":"ElementaryTypeName","src":"1202:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":382,"mutability":"mutable","name":"operator","nameLocation":"1227:8:12","nodeType":"VariableDeclaration","scope":410,"src":"1219:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":381,"name":"address","nodeType":"ElementaryTypeName","src":"1219:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1169:67:12"},"returnParameters":{"id":384,"nodeType":"ParameterList","parameters":[],"src":"1246:0:12"},"scope":594,"src":"1151:251:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":446,"nodeType":"Block","src":"1876:156:12","statements":[{"condition":{"arguments":[{"id":425,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1900:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":426,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1906:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":423,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1890:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":424,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1892:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1890:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1890:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":445,"nodeType":"IfStatement","src":"1886:140:12","trueBody":{"id":444,"nodeType":"Block","src":"1916:110:12","statements":[{"expression":{"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":428,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1930:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":432,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1932:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"1930:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":433,"indexExpression":{"id":430,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1938:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1930:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":434,"indexExpression":{"id":431,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1944:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1930:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":435,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1955:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1930:30:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":437,"nodeType":"ExpressionStatement","src":"1930:30:12"},{"eventCall":{"arguments":[{"id":439,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1991:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":440,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":418,"src":"1997:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":441,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":420,"src":"2006:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":438,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"1979:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":442,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1979:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":443,"nodeType":"EmitStatement","src":"1974:41:12"}]}}]},"documentation":{"id":411,"nodeType":"StructuredDocumentation","src":"1408:367:12","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":447,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1789:10:12","nodeType":"FunctionDefinition","parameters":{"id":421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":414,"mutability":"mutable","name":"s","nameLocation":"1815:1:12","nodeType":"VariableDeclaration","scope":447,"src":"1800:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":413,"nodeType":"UserDefinedTypeName","pathNode":{"id":412,"name":"Layout","nameLocations":["1800:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1800:6:12"},"referencedDeclaration":359,"src":"1800:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"role","nameLocation":"1826:4:12","nodeType":"VariableDeclaration","scope":447,"src":"1818:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":415,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1818:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":418,"mutability":"mutable","name":"account","nameLocation":"1840:7:12","nodeType":"VariableDeclaration","scope":447,"src":"1832:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":417,"name":"address","nodeType":"ElementaryTypeName","src":"1832:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":420,"mutability":"mutable","name":"operator","nameLocation":"1857:8:12","nodeType":"VariableDeclaration","scope":447,"src":"1849:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":419,"name":"address","nodeType":"ElementaryTypeName","src":"1849:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1799:67:12"},"returnParameters":{"id":422,"nodeType":"ParameterList","parameters":[],"src":"1876:0:12"},"scope":594,"src":"1780:252:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":481,"nodeType":"Block","src":"2367:134:12","statements":[{"expression":{"arguments":[{"id":461,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2394:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":462,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2400:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":458,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2377:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":460,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2379:14:12","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"2377:16:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":463,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2377:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":464,"nodeType":"ExpressionStatement","src":"2377:30:12"},{"expression":{"id":473,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":465,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2417:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":469,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2419:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"2417:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":470,"indexExpression":{"id":467,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2425:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2417:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":471,"indexExpression":{"id":468,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2431:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2417:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":472,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2441:5:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2417:29:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":474,"nodeType":"ExpressionStatement","src":"2417:29:12"},{"eventCall":{"arguments":[{"id":476,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"2473:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2479:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":478,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2487:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":475,"name":"RoleRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":286,"src":"2461:11:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2461:33:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":480,"nodeType":"EmitStatement","src":"2456:38:12"}]},"documentation":{"id":448,"nodeType":"StructuredDocumentation","src":"2038:245:12","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":482,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2297:12:12","nodeType":"FunctionDefinition","parameters":{"id":456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":451,"mutability":"mutable","name":"s","nameLocation":"2325:1:12","nodeType":"VariableDeclaration","scope":482,"src":"2310:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":450,"nodeType":"UserDefinedTypeName","pathNode":{"id":449,"name":"Layout","nameLocations":["2310:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2310:6:12"},"referencedDeclaration":359,"src":"2310:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"sender","nameLocation":"2336:6:12","nodeType":"VariableDeclaration","scope":482,"src":"2328:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":452,"name":"address","nodeType":"ElementaryTypeName","src":"2328:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":455,"mutability":"mutable","name":"role","nameLocation":"2352:4:12","nodeType":"VariableDeclaration","scope":482,"src":"2344:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":454,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2344:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2309:48:12"},"returnParameters":{"id":457,"nodeType":"ParameterList","parameters":[],"src":"2367:0:12"},"scope":594,"src":"2288:213:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"2789:46:12","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":495,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"2806:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2808:5:12","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":358,"src":"2806:7:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":498,"indexExpression":{"id":497,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"2814:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:13:12","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":500,"indexExpression":{"id":499,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2820:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2806:22:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":494,"id":501,"nodeType":"Return","src":"2799:29:12"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"2507:173:12","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2694:7:12","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"s","nameLocation":"2717:1:12","nodeType":"VariableDeclaration","scope":503,"src":"2702:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":485,"nodeType":"UserDefinedTypeName","pathNode":{"id":484,"name":"Layout","nameLocations":["2702:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"2702:6:12"},"referencedDeclaration":359,"src":"2702:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"role","nameLocation":"2728:4:12","nodeType":"VariableDeclaration","scope":503,"src":"2720:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2720:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"account","nameLocation":"2742:7:12","nodeType":"VariableDeclaration","scope":503,"src":"2734:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2701:49:12"},"returnParameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"hasRole_","nameLocation":"2779:8:12","nodeType":"VariableDeclaration","scope":503,"src":"2774:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":492,"name":"bool","nodeType":"ElementaryTypeName","src":"2774:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2773:15:12"},"scope":594,"src":"2685:150:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":532,"nodeType":"Block","src":"3280:164:12","statements":[{"condition":{"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3294:28:12","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":515,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3295:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":516,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3310:10:12","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"3295:25:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3295:27:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":523,"nodeType":"IfStatement","src":"3290:77:12","trueBody":{"errorCall":{"arguments":[{"id":520,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3352:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":519,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"3331:20:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3331:36:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":522,"nodeType":"RevertStatement","src":"3324:43:12"}},{"expression":{"arguments":[{"id":528,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3423:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":529,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"3429:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":525,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3399:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":524,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":315,"src":"3384:14:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$315_$","typeString":"type(contract IAccessControl)"}},"id":526,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:30:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$315","typeString":"contract IAccessControl"}},"id":527,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3415:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":314,"src":"3384:38:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":530,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3384:53:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":514,"id":531,"nodeType":"Return","src":"3377:60:12"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"2841:296:12","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":533,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3151:21:12","nodeType":"FunctionDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"targetContract","nameLocation":"3181:14:12","nodeType":"VariableDeclaration","scope":533,"src":"3173:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"3173:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"role","nameLocation":"3205:4:12","nodeType":"VariableDeclaration","scope":533,"src":"3197:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3197:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"account","nameLocation":"3219:7:12","nodeType":"VariableDeclaration","scope":533,"src":"3211:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":509,"name":"address","nodeType":"ElementaryTypeName","src":"3211:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3172:55:12"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3256:22:12","nodeType":"VariableDeclaration","scope":533,"src":"3251:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"3251:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3250:29:12"},"scope":594,"src":"3142:302:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":556,"nodeType":"Block","src":"3732:83:12","statements":[{"condition":{"id":549,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3746:25:12","subExpression":{"arguments":[{"id":546,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3757:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":547,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"3763:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":544,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":537,"src":"3747:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":545,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3749:7:12","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"3747:9:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3747:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":555,"nodeType":"IfStatement","src":"3742:66:12","trueBody":{"errorCall":{"arguments":[{"id":551,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":539,"src":"3794:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":552,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"3800:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":550,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":236,"src":"3780:13:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":553,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3780:28:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":554,"nodeType":"RevertStatement","src":"3773:35:12"}}]},"documentation":{"id":534,"nodeType":"StructuredDocumentation","src":"3450:190:12","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":557,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3654:14:12","nodeType":"FunctionDefinition","parameters":{"id":542,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"s","nameLocation":"3684:1:12","nodeType":"VariableDeclaration","scope":557,"src":"3669:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":536,"nodeType":"UserDefinedTypeName","pathNode":{"id":535,"name":"Layout","nameLocations":["3669:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"3669:6:12"},"referencedDeclaration":359,"src":"3669:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"role","nameLocation":"3695:4:12","nodeType":"VariableDeclaration","scope":557,"src":"3687:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":538,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3687:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":541,"mutability":"mutable","name":"account","nameLocation":"3709:7:12","nodeType":"VariableDeclaration","scope":557,"src":"3701:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":540,"name":"address","nodeType":"ElementaryTypeName","src":"3701:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3668:49:12"},"returnParameters":{"id":543,"nodeType":"ParameterList","parameters":[],"src":"3732:0:12"},"scope":594,"src":"3645:170:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":580,"nodeType":"Block","src":"4234:141:12","statements":[{"condition":{"id":572,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4248:53:12","subExpression":{"arguments":[{"id":568,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4271:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":569,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4287:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":570,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"4293:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":567,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":533,"src":"4249:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4249:52:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"4244:124:12","trueBody":{"errorCall":{"arguments":[{"id":574,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"4338:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":575,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":562,"src":"4354:4:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":576,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":564,"src":"4360:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":573,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":245,"src":"4310:27:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4310:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":578,"nodeType":"RevertStatement","src":"4303:65:12"}}]},"documentation":{"id":558,"nodeType":"StructuredDocumentation","src":"3821:301:12","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":581,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"4136:28:12","nodeType":"FunctionDefinition","parameters":{"id":565,"nodeType":"ParameterList","parameters":[{"constant":false,"id":560,"mutability":"mutable","name":"targetContract","nameLocation":"4173:14:12","nodeType":"VariableDeclaration","scope":581,"src":"4165:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":559,"name":"address","nodeType":"ElementaryTypeName","src":"4165:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":562,"mutability":"mutable","name":"role","nameLocation":"4197:4:12","nodeType":"VariableDeclaration","scope":581,"src":"4189:12:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":561,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4189:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":564,"mutability":"mutable","name":"account","nameLocation":"4211:7:12","nodeType":"VariableDeclaration","scope":581,"src":"4203:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":563,"name":"address","nodeType":"ElementaryTypeName","src":"4203:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4164:55:12"},"returnParameters":{"id":566,"nodeType":"ParameterList","parameters":[],"src":"4234:0:12"},"scope":594,"src":"4127:248:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":592,"nodeType":"Block","src":"4440:115:12","statements":[{"assignments":[588],"declarations":[{"constant":false,"id":588,"mutability":"mutable","name":"position","nameLocation":"4458:8:12","nodeType":"VariableDeclaration","scope":592,"src":"4450:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":587,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4450:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":590,"initialValue":{"id":589,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"4469:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4450:38:12"},{"AST":{"nativeSrc":"4507:42:12","nodeType":"YulBlock","src":"4507:42:12","statements":[{"nativeSrc":"4521:18:12","nodeType":"YulAssignment","src":"4521:18:12","value":{"name":"position","nativeSrc":"4531:8:12","nodeType":"YulIdentifier","src":"4531:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"4521:6:12","nodeType":"YulIdentifier","src":"4521:6:12"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":588,"isOffset":false,"isSlot":false,"src":"4531:8:12","valueSize":1},{"declaration":585,"isOffset":false,"isSlot":true,"src":"4521:6:12","suffix":"slot","valueSize":1}],"id":591,"nodeType":"InlineAssembly","src":"4498:51:12"}]},"id":593,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4390:6:12","nodeType":"FunctionDefinition","parameters":{"id":582,"nodeType":"ParameterList","parameters":[],"src":"4396:2:12"},"returnParameters":{"id":586,"nodeType":"ParameterList","parameters":[{"constant":false,"id":585,"mutability":"mutable","name":"s","nameLocation":"4437:1:12","nodeType":"VariableDeclaration","scope":593,"src":"4422:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":584,"nodeType":"UserDefinedTypeName","pathNode":{"id":583,"name":"Layout","nameLocations":["4422:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"4422:6:12"},"referencedDeclaration":359,"src":"4422:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4421:18:12"},"scope":594,"src":"4381:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":595,"src":"428:4129:12","usedErrors":[],"usedEvents":[]}],"src":"32:4526:12"},"id":12},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[3829],"ContractOwnershipStorage":[852],"IERC173":[331],"InterfaceDetectionStorage":[1000],"NotContractOwner":[259],"NotTargetContractOwner":[266],"OwnershipTransferred":[295],"ProxyInitialization":[1056],"TargetIsNotAContract":[252]},"id":853,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":596,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":267,"src":"58:97:13","symbolAliases":[{"foreign":{"id":597,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"66:16:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":598,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"84:22:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":601,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":253,"src":"156:60:13","symbolAliases":[{"foreign":{"id":600,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"164:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":603,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":296,"src":"217:66:13","symbolAliases":[{"foreign":{"id":602,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"225:20:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":605,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":332,"src":"284:52:13","symbolAliases":[{"foreign":{"id":604,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"292:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":607,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":3830,"src":"337:66:13","symbolAliases":[{"foreign":{"id":606,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"345:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":609,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":1057,"src":"404:84:13","symbolAliases":[{"foreign":{"id":608,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"412:19:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":611,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":853,"sourceUnit":1001,"src":"489:104:13","symbolAliases":[{"foreign":{"id":610,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"497:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":852,"linearizedBaseContracts":[852],"name":"ContractOwnershipStorage","nameLocation":"603:24:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":614,"libraryName":{"id":612,"name":"Address","nameLocations":["640:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"640:7:13"},"nodeType":"UsingForDirective","src":"634:26:13","typeName":{"id":613,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":618,"libraryName":{"id":615,"name":"ContractOwnershipStorage","nameLocations":["671:24:13"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"671:24:13"},"nodeType":"UsingForDirective","src":"665:67:13","typeName":{"id":617,"nodeType":"UserDefinedTypeName","pathNode":{"id":616,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:13","725:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"700:31:13"},"referencedDeclaration":625,"src":"700:31:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":622,"libraryName":{"id":619,"name":"InterfaceDetectionStorage","nameLocations":["743:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"743:25:13"},"nodeType":"UsingForDirective","src":"737:69:13","typeName":{"id":621,"nodeType":"UserDefinedTypeName","pathNode":{"id":620,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:13","799:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"773:32:13"},"referencedDeclaration":910,"src":"773:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":625,"members":[{"constant":false,"id":624,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:13","nodeType":"VariableDeclaration","scope":625,"src":"836:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":623,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:13","nodeType":"StructDefinition","scope":852,"src":"812:52:13","visibility":"public"},{"constant":true,"id":638,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:13","nodeType":"VariableDeclaration","scope":852,"src":"870:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":626,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":631,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":630,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":629,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:13","typeDescriptions":{}}},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":627,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:13","typeDescriptions":{}}},"id":637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":651,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:13","nodeType":"VariableDeclaration","scope":852,"src":"1004:128:13","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":639,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":644,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:13","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":646,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":643,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":642,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:13","typeDescriptions":{}}},"id":647,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":641,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":640,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:13","typeDescriptions":{}}},"id":650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":694,"nodeType":"Block","src":"1641:267:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":660,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1655:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":662,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":661,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:13","typeDescriptions":{}}},"id":664,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":681,"nodeType":"IfStatement","src":"1651:152:13","trueBody":{"id":680,"nodeType":"Block","src":"1683:120:13","statements":[{"expression":{"id":670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":666,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":655,"src":"1697:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":668,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"1697:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":669,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1715:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":671,"nodeType":"ExpressionStatement","src":"1697:30:13"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":675,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":674,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":673,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:13","typeDescriptions":{}}},"id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":677,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":657,"src":"1779:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":672,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"1746:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":679,"nodeType":"EmitStatement","src":"1741:51:13"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":688,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"1874:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}],"id":687,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:13","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$331","typeString":"type(contract IERC173)"}},"id":690,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:13","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":682,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1812:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":684,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"1812:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":686,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:13","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"1812:56:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":693,"nodeType":"ExpressionStatement","src":"1812:89:13"}]},"documentation":{"id":652,"nodeType":"StructuredDocumentation","src":"1139:423:13","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":695,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:13","nodeType":"FunctionDefinition","parameters":{"id":658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":655,"mutability":"mutable","name":"s","nameLocation":"1607:1:13","nodeType":"VariableDeclaration","scope":695,"src":"1592:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":654,"nodeType":"UserDefinedTypeName","pathNode":{"id":653,"name":"Layout","nameLocations":["1592:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"1592:6:13"},"referencedDeclaration":625,"src":"1592:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":657,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:13","nodeType":"VariableDeclaration","scope":695,"src":"1610:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":656,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:13"},"returnParameters":{"id":659,"nodeType":"ParameterList","parameters":[],"src":"1641:0:13"},"scope":852,"src":"1567:341:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":717,"nodeType":"Block","src":"2573:112:13","statements":[{"expression":{"arguments":[{"id":707,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":651,"src":"2612:21:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":708,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:13","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":704,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"2583:19:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1056_$","typeString":"type(library ProxyInitialization)"}},"id":706,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:13","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1055,"src":"2583:28:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":709,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":710,"nodeType":"ExpressionStatement","src":"2583:54:13"},{"expression":{"arguments":[{"id":714,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"2665:12:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":711,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":699,"src":"2647:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":713,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:13","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":695,"src":"2647:17:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":716,"nodeType":"ExpressionStatement","src":"2647:31:13"}]},"documentation":{"id":696,"nodeType":"StructuredDocumentation","src":"1914:586:13","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":718,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:13","nodeType":"FunctionDefinition","parameters":{"id":702,"nodeType":"ParameterList","parameters":[{"constant":false,"id":699,"mutability":"mutable","name":"s","nameLocation":"2539:1:13","nodeType":"VariableDeclaration","scope":718,"src":"2524:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":698,"nodeType":"UserDefinedTypeName","pathNode":{"id":697,"name":"Layout","nameLocations":["2524:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"2524:6:13"},"referencedDeclaration":625,"src":"2524:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":701,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:13","nodeType":"VariableDeclaration","scope":718,"src":"2542:20:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:13"},"returnParameters":{"id":703,"nodeType":"ParameterList","parameters":[],"src":"2573:0:13"},"scope":852,"src":"2505:180:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"3148:281:13","statements":[{"assignments":[730],"declarations":[{"constant":false,"id":730,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:13","nodeType":"VariableDeclaration","scope":758,"src":"3158:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":729,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":733,"initialValue":{"expression":{"id":731,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3182:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":732,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3182:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:13"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":734,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"3211:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":735,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3221:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":741,"nodeType":"IfStatement","src":"3207:60:13","trueBody":{"errorCall":{"arguments":[{"id":738,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"3260:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":737,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"3243:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":740,"nodeType":"RevertStatement","src":"3236:31:13"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":742,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3281:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":743,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3298:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":757,"nodeType":"IfStatement","src":"3277:146:13","trueBody":{"id":756,"nodeType":"Block","src":"3308:115:13","statements":[{"expression":{"id":749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":745,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":722,"src":"3322:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":747,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3322:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":748,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3340:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":750,"nodeType":"ExpressionStatement","src":"3322:26:13"},{"eventCall":{"arguments":[{"id":752,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":730,"src":"3388:13:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":753,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"3403:8:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":751,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3367:20:13","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":755,"nodeType":"EmitStatement","src":"3362:50:13"}]}}]},"documentation":{"id":719,"nodeType":"StructuredDocumentation","src":"2691:364:13","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:13","nodeType":"FunctionDefinition","parameters":{"id":727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":722,"mutability":"mutable","name":"s","nameLocation":"3102:1:13","nodeType":"VariableDeclaration","scope":759,"src":"3087:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":721,"nodeType":"UserDefinedTypeName","pathNode":{"id":720,"name":"Layout","nameLocations":["3087:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"3087:6:13"},"referencedDeclaration":625,"src":"3087:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":724,"mutability":"mutable","name":"sender","nameLocation":"3113:6:13","nodeType":"VariableDeclaration","scope":759,"src":"3105:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":723,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:13","nodeType":"VariableDeclaration","scope":759,"src":"3121:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":725,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:13"},"returnParameters":{"id":728,"nodeType":"ParameterList","parameters":[],"src":"3148:0:13"},"scope":852,"src":"3060:369:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":771,"nodeType":"Block","src":"3635:39:13","statements":[{"expression":{"expression":{"id":768,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":763,"src":"3652:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":769,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"3652:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":767,"id":770,"nodeType":"Return","src":"3645:22:13"}]},"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"3435:116:13","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":772,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:13","nodeType":"FunctionDefinition","parameters":{"id":764,"nodeType":"ParameterList","parameters":[{"constant":false,"id":763,"mutability":"mutable","name":"s","nameLocation":"3586:1:13","nodeType":"VariableDeclaration","scope":772,"src":"3571:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":762,"nodeType":"UserDefinedTypeName","pathNode":{"id":761,"name":"Layout","nameLocations":["3571:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"3571:6:13"},"referencedDeclaration":625,"src":"3571:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:13"},"returnParameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":766,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:13","nodeType":"VariableDeclaration","scope":772,"src":"3612:21:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:13"},"scope":852,"src":"3556:118:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":799,"nodeType":"Block","src":"4070:153:13","statements":[{"condition":{"id":785,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:13","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":782,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4085:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:13","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"4085:25:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":784,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":790,"nodeType":"IfStatement","src":"4080:77:13","trueBody":{"errorCall":{"arguments":[{"id":787,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4142:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":786,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":252,"src":"4121:20:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":788,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":789,"nodeType":"RevertStatement","src":"4114:43:13"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":792,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":775,"src":"4182:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":791,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":331,"src":"4174:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$331_$","typeString":"type(contract IERC173)"}},"id":793,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$331","typeString":"contract IERC173"}},"id":794,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:13","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":330,"src":"4174:29:13","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":796,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":777,"src":"4209:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":781,"id":798,"nodeType":"Return","src":"4167:49:13"}]},"documentation":{"id":773,"nodeType":"StructuredDocumentation","src":"3680:261:13","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":800,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:13","nodeType":"FunctionDefinition","parameters":{"id":778,"nodeType":"ParameterList","parameters":[{"constant":false,"id":775,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:13","nodeType":"VariableDeclaration","scope":800,"src":"3977:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":774,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":777,"mutability":"mutable","name":"account","nameLocation":"4009:7:13","nodeType":"VariableDeclaration","scope":800,"src":"4001:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":776,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:13"},"returnParameters":{"id":781,"nodeType":"ParameterList","parameters":[{"constant":false,"id":780,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:13","nodeType":"VariableDeclaration","scope":800,"src":"4041:27:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":779,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:13"},"scope":852,"src":"3946:277:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":818,"nodeType":"Block","src":"4494:81:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":812,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":809,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4508:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":810,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4519:1:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:13","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":624,"src":"4519:15:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":817,"nodeType":"IfStatement","src":"4504:64:13","trueBody":{"errorCall":{"arguments":[{"id":814,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":806,"src":"4560:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":813,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":259,"src":"4543:16:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"RevertStatement","src":"4536:32:13"}}]},"documentation":{"id":801,"nodeType":"StructuredDocumentation","src":"4229:179:13","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":819,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:13","nodeType":"FunctionDefinition","parameters":{"id":807,"nodeType":"ParameterList","parameters":[{"constant":false,"id":804,"mutability":"mutable","name":"s","nameLocation":"4460:1:13","nodeType":"VariableDeclaration","scope":819,"src":"4445:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":803,"nodeType":"UserDefinedTypeName","pathNode":{"id":802,"name":"Layout","nameLocations":["4445:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"4445:6:13"},"referencedDeclaration":625,"src":"4445:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":806,"mutability":"mutable","name":"account","nameLocation":"4471:7:13","nodeType":"VariableDeclaration","scope":819,"src":"4463:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":805,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:13"},"returnParameters":{"id":808,"nodeType":"ParameterList","parameters":[],"src":"4494:0:13"},"scope":852,"src":"4413:162:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":838,"nodeType":"Block","src":"4935:124:13","statements":[{"condition":{"id":831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:13","subExpression":{"arguments":[{"id":828,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"4972:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":829,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"4988:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":827,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":800,"src":"4950:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":837,"nodeType":"IfStatement","src":"4945:107:13","trueBody":{"errorCall":{"arguments":[{"id":833,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":822,"src":"5028:14:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":834,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":824,"src":"5044:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":832,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":266,"src":"5005:22:13","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":835,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":836,"nodeType":"RevertStatement","src":"4998:54:13"}}]},"documentation":{"id":820,"nodeType":"StructuredDocumentation","src":"4581:256:13","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":839,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:13","nodeType":"FunctionDefinition","parameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":822,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:13","nodeType":"VariableDeclaration","scope":839,"src":"4880:22:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":821,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":824,"mutability":"mutable","name":"account","nameLocation":"4912:7:13","nodeType":"VariableDeclaration","scope":839,"src":"4904:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":823,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:13"},"returnParameters":{"id":826,"nodeType":"ParameterList","parameters":[],"src":"4935:0:13"},"scope":852,"src":"4842:217:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":850,"nodeType":"Block","src":"5124:115:13","statements":[{"assignments":[846],"declarations":[{"constant":false,"id":846,"mutability":"mutable","name":"position","nameLocation":"5142:8:13","nodeType":"VariableDeclaration","scope":850,"src":"5134:16:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":845,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":848,"initialValue":{"id":847,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":638,"src":"5153:19:13","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:13"},{"AST":{"nativeSrc":"5191:42:13","nodeType":"YulBlock","src":"5191:42:13","statements":[{"nativeSrc":"5205:18:13","nodeType":"YulAssignment","src":"5205:18:13","value":{"name":"position","nativeSrc":"5215:8:13","nodeType":"YulIdentifier","src":"5215:8:13"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:13","nodeType":"YulIdentifier","src":"5205:6:13"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":846,"isOffset":false,"isSlot":false,"src":"5215:8:13","valueSize":1},{"declaration":843,"isOffset":false,"isSlot":true,"src":"5205:6:13","suffix":"slot","valueSize":1}],"id":849,"nodeType":"InlineAssembly","src":"5182:51:13"}]},"id":851,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:13","nodeType":"FunctionDefinition","parameters":{"id":840,"nodeType":"ParameterList","parameters":[],"src":"5080:2:13"},"returnParameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":843,"mutability":"mutable","name":"s","nameLocation":"5121:1:13","nodeType":"VariableDeclaration","scope":851,"src":"5106:16:13","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":842,"nodeType":"UserDefinedTypeName","pathNode":{"id":841,"name":"Layout","nameLocations":["5106:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"5106:6:13"},"referencedDeclaration":625,"src":"5106:6:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:13"},"scope":852,"src":"5065:174:13","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":853,"src":"595:4646:13","usedErrors":[],"usedEvents":[]}],"src":"32:5210:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[899],"InterfaceDetection":[882],"InterfaceDetectionStorage":[1000]},"id":883,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":854,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:14"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":856,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":883,"sourceUnit":900,"src":"58:49:14","symbolAliases":[{"foreign":{"id":855,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"66:7:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":858,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":883,"sourceUnit":1001,"src":"108:84:14","symbolAliases":[{"foreign":{"id":857,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"116:25:14","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":860,"name":"IERC165","nameLocations":["425:7:14"],"nodeType":"IdentifierPath","referencedDeclaration":899,"src":"425:7:14"},"id":861,"nodeType":"InheritanceSpecifier","src":"425:7:14"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":859,"nodeType":"StructuredDocumentation","src":"194:191:14","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":882,"linearizedBaseContracts":[882,899],"name":"InterfaceDetection","nameLocation":"403:18:14","nodeType":"ContractDefinition","nodes":[{"global":false,"id":865,"libraryName":{"id":862,"name":"InterfaceDetectionStorage","nameLocations":["445:25:14"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"445:25:14"},"nodeType":"UsingForDirective","src":"439:69:14","typeName":{"id":864,"nodeType":"UserDefinedTypeName","pathNode":{"id":863,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:14","501:6:14"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"475:32:14"},"referencedDeclaration":910,"src":"475:32:14","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[898],"body":{"id":880,"nodeType":"Block","src":"618:89:14","statements":[{"expression":{"arguments":[{"id":877,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"688:11:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":873,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"635:25:14","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":874,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:14","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"635:32:14","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":875,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":876,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:14","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":987,"src":"635:52:14","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":878,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:14","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":872,"id":879,"nodeType":"Return","src":"628:72:14"}]},"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"514:23:14","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":881,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:14","nodeType":"FunctionDefinition","parameters":{"id":869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":868,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:14","nodeType":"VariableDeclaration","scope":881,"src":"569:18:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":867,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:14","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:14"},"returnParameters":{"id":872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":871,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":881,"src":"612:4:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":870,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:14","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:14"},"scope":882,"src":"542:165:14","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":883,"src":"385:324:14","usedErrors":[],"usedEvents":[]}],"src":"32:678:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[887]},"id":888,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":884,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:15"},{"documentation":{"id":885,"nodeType":"StructuredDocumentation","src":"58:68:15","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":887,"name":"IllegalInterfaceId","nameLocation":"132:18:15","nodeType":"ErrorDefinition","parameters":{"id":886,"nodeType":"ParameterList","parameters":[],"src":"150:2:15"},"src":"126:27:15"}],"src":"32:122:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[899]},"id":900,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":889,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":890,"nodeType":"StructuredDocumentation","src":"58:173:16","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":899,"linearizedBaseContracts":[899],"name":"IERC165","nameLocation":"241:7:16","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":891,"nodeType":"StructuredDocumentation","src":"255:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":898,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:16","nodeType":"FunctionDefinition","parameters":{"id":894,"nodeType":"ParameterList","parameters":[{"constant":false,"id":893,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:16","nodeType":"VariableDeclaration","scope":898,"src":"627:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":892,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:16"},"returnParameters":{"id":897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":896,"mutability":"mutable","name":"supported","nameLocation":"675:9:16","nodeType":"VariableDeclaration","scope":898,"src":"670:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":895,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:16"},"scope":899,"src":"600:86:16","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":900,"src":"231:457:16","usedErrors":[],"usedEvents":[]}],"src":"32:657:16"},"id":16},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[899],"IllegalInterfaceId":[887],"InterfaceDetectionStorage":[1000]},"id":1001,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":901,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":903,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1001,"sourceUnit":888,"src":"58:76:17","symbolAliases":[{"foreign":{"id":902,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":905,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1001,"sourceUnit":900,"src":"135:52:17","symbolAliases":[{"foreign":{"id":904,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"143:7:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1000,"linearizedBaseContracts":[1000],"name":"InterfaceDetectionStorage","nameLocation":"197:25:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":910,"members":[{"constant":false,"id":909,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:17","nodeType":"VariableDeclaration","scope":910,"src":"253:43:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":908,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":906,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":907,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:17","nodeType":"StructDefinition","scope":1000,"src":"229:74:17","visibility":"public"},{"constant":true,"id":923,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:17","nodeType":"VariableDeclaration","scope":1000,"src":"309:136:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":911,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":921,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":917,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":916,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":918,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":915,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":914,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:17","typeDescriptions":{}}},"id":919,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:17","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":913,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":912,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:17","typeDescriptions":{}}},"id":922,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":926,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:17","nodeType":"VariableDeclaration","scope":1000,"src":"452:58:17","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":924,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":925,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:17","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":952,"nodeType":"Block","src":"867:141:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":939,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":937,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"881:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":938,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"896:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":943,"nodeType":"IfStatement","src":"877:68:17","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":940,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":887,"src":"925:18:17","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":942,"nodeType":"RevertStatement","src":"918:27:17"}},{"expression":{"id":950,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":944,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"955:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":947,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":909,"src":"955:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":948,"indexExpression":{"id":946,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":932,"src":"977:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":949,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":934,"src":"992:9:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":951,"nodeType":"ExpressionStatement","src":"955:46:17"}]},"documentation":{"id":927,"nodeType":"StructuredDocumentation","src":"517:251:17","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":953,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:17","nodeType":"FunctionDefinition","parameters":{"id":935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":930,"mutability":"mutable","name":"s","nameLocation":"819:1:17","nodeType":"VariableDeclaration","scope":953,"src":"804:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":929,"nodeType":"UserDefinedTypeName","pathNode":{"id":928,"name":"Layout","nameLocations":["804:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"804:6:17"},"referencedDeclaration":910,"src":"804:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":932,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:17","nodeType":"VariableDeclaration","scope":953,"src":"822:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":931,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":934,"mutability":"mutable","name":"supported","nameLocation":"847:9:17","nodeType":"VariableDeclaration","scope":953,"src":"842:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":933,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:17"},"returnParameters":{"id":936,"nodeType":"ParameterList","parameters":[],"src":"867:0:17"},"scope":1000,"src":"773:235:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":986,"nodeType":"Block","src":"1463:236:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":964,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1477:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":965,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":926,"src":"1492:20:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":970,"nodeType":"IfStatement","src":"1473:78:17","trueBody":{"id":969,"nodeType":"Block","src":"1514:37:17","statements":[{"expression":{"hexValue":"66616c7365","id":967,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":963,"id":968,"nodeType":"Return","src":"1528:12:17"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":971,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1564:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":973,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"1584:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$899_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$899_$","typeString":"type(contract IERC165)"}],"id":972,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:17","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":974,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$899","typeString":"type(contract IERC165)"}},"id":975,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:17","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":980,"nodeType":"IfStatement","src":"1560:82:17","trueBody":{"id":979,"nodeType":"Block","src":"1606:36:17","statements":[{"expression":{"hexValue":"74727565","id":977,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":963,"id":978,"nodeType":"Return","src":"1620:11:17"}]}},{"expression":{"baseExpression":{"expression":{"id":981,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":957,"src":"1658:1:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":982,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:17","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":909,"src":"1658:21:17","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":984,"indexExpression":{"id":983,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":959,"src":"1680:11:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":963,"id":985,"nodeType":"Return","src":"1651:41:17"}]},"documentation":{"id":954,"nodeType":"StructuredDocumentation","src":"1014:340:17","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":987,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:17","nodeType":"FunctionDefinition","parameters":{"id":960,"nodeType":"ParameterList","parameters":[{"constant":false,"id":957,"mutability":"mutable","name":"s","nameLocation":"1401:1:17","nodeType":"VariableDeclaration","scope":987,"src":"1386:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":956,"nodeType":"UserDefinedTypeName","pathNode":{"id":955,"name":"Layout","nameLocations":["1386:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1386:6:17"},"referencedDeclaration":910,"src":"1386:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":959,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:17","nodeType":"VariableDeclaration","scope":987,"src":"1404:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":958,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:17","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:17"},"returnParameters":{"id":963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":962,"mutability":"mutable","name":"supported","nameLocation":"1452:9:17","nodeType":"VariableDeclaration","scope":987,"src":"1447:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":961,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:17"},"scope":1000,"src":"1359:340:17","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":998,"nodeType":"Block","src":"1764:115:17","statements":[{"assignments":[994],"declarations":[{"constant":false,"id":994,"mutability":"mutable","name":"position","nameLocation":"1782:8:17","nodeType":"VariableDeclaration","scope":998,"src":"1774:16:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":993,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":996,"initialValue":{"id":995,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":923,"src":"1793:19:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:17"},{"AST":{"nativeSrc":"1831:42:17","nodeType":"YulBlock","src":"1831:42:17","statements":[{"nativeSrc":"1845:18:17","nodeType":"YulAssignment","src":"1845:18:17","value":{"name":"position","nativeSrc":"1855:8:17","nodeType":"YulIdentifier","src":"1855:8:17"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:17","nodeType":"YulIdentifier","src":"1845:6:17"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":994,"isOffset":false,"isSlot":false,"src":"1855:8:17","valueSize":1},{"declaration":991,"isOffset":false,"isSlot":true,"src":"1845:6:17","suffix":"slot","valueSize":1}],"id":997,"nodeType":"InlineAssembly","src":"1822:51:17"}]},"id":999,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:17","nodeType":"FunctionDefinition","parameters":{"id":988,"nodeType":"ParameterList","parameters":[],"src":"1720:2:17"},"returnParameters":{"id":992,"nodeType":"ParameterList","parameters":[{"constant":false,"id":991,"mutability":"mutable","name":"s","nameLocation":"1761:1:17","nodeType":"VariableDeclaration","scope":999,"src":"1746:16:17","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":990,"nodeType":"UserDefinedTypeName","pathNode":{"id":989,"name":"Layout","nameLocations":["1746:6:17"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1746:6:17"},"referencedDeclaration":910,"src":"1746:6:17","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:17"},"scope":1000,"src":"1705:174:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1001,"src":"189:1692:17","usedErrors":[],"usedEvents":[]}],"src":"32:1850:17"},"id":17},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1009]},"id":1010,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1002,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"documentation":{"id":1003,"nodeType":"StructuredDocumentation","src":"58:179:18","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1009,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:18","nodeType":"ErrorDefinition","parameters":{"id":1008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1005,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:18","nodeType":"VariableDeclaration","scope":1009,"src":"277:20:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1004,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1007,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:18","nodeType":"VariableDeclaration","scope":1009,"src":"299:16:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1006,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:18"},"src":"237:80:18"}],"src":"32:286:18"},"id":18},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1009],"ProxyInitialization":[1056],"StorageSlot":[3961]},"id":1057,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1011,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1013,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1057,"sourceUnit":1010,"src":"58:92:19","symbolAliases":[{"foreign":{"id":1012,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"66:33:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1015,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1057,"sourceUnit":3962,"src":"151:74:19","symbolAliases":[{"foreign":{"id":1014,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"159:11:19","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1016,"nodeType":"StructuredDocumentation","src":"227:92:19","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1056,"linearizedBaseContracts":[1056],"name":"ProxyInitialization","nameLocation":"327:19:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":1054,"nodeType":"Block","src":"735:294:19","statements":[{"assignments":[1028],"declarations":[{"constant":false,"id":1028,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:19","nodeType":"VariableDeclaration","scope":1054,"src":"745:46:19","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1027,"nodeType":"UserDefinedTypeName","pathNode":{"id":1026,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:19","757:11:19"],"nodeType":"IdentifierPath","referencedDeclaration":3866,"src":"745:23:19"},"referencedDeclaration":3866,"src":"745:23:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1033,"initialValue":{"arguments":[{"id":1031,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1019,"src":"821:11:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1029,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3961,"src":"794:11:19","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$3961_$","typeString":"type(library StorageSlot)"}},"id":1030,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:19","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":3916,"src":"794:26:19","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$3866_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1032,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:19"},{"assignments":[1035],"declarations":[{"constant":false,"id":1035,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:19","nodeType":"VariableDeclaration","scope":1054,"src":"843:20:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1034,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1038,"initialValue":{"expression":{"id":1036,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"866:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1037,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3865,"src":"866:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:19"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1039,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"900:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1040,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"916:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1047,"nodeType":"IfStatement","src":"896:88:19","trueBody":{"errorCall":{"arguments":[{"id":1043,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1035,"src":"964:12:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1044,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"978:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1042,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1009,"src":"930:33:19","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1045,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1046,"nodeType":"RevertStatement","src":"923:61:19"}},{"expression":{"id":1052,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1048,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1028,"src":"994:14:19","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1050,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:19","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":3865,"src":"994:20:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1051,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1021,"src":"1017:5:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1053,"nodeType":"ExpressionStatement","src":"994:28:19"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"353:314:19","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1055,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:19","nodeType":"FunctionDefinition","parameters":{"id":1022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:19","nodeType":"VariableDeclaration","scope":1055,"src":"690:19:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1018,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1021,"mutability":"mutable","name":"phase","nameLocation":"719:5:19","nodeType":"VariableDeclaration","scope":1055,"src":"711:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1020,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:19"},"returnParameters":{"id":1023,"nodeType":"ParameterList","parameters":[],"src":"735:0:19"},"scope":1056,"src":"672:357:19","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1057,"src":"319:712:19","usedErrors":[],"usedEvents":[]}],"src":"32:1000:19"},"id":19},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","exportedSymbols":{"ERC721Metadata":[1101],"ERC721MetadataBase":[1181],"ERC721Storage":[3246],"ITokenMetadataResolver":[3312],"TokenMetadataStorage":[3499]},"id":1102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1058,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../metadata/interfaces/ITokenMetadataResolver.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1102,"sourceUnit":3313,"src":"58:91:20","symbolAliases":[{"foreign":{"id":1059,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"66:22:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../metadata/libraries/TokenMetadataStorage.sol","id":1062,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1102,"sourceUnit":3500,"src":"150:86:20","symbolAliases":[{"foreign":{"id":1061,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"158:20:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./libraries/ERC721Storage.sol","id":1064,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1102,"sourceUnit":3247,"src":"237:60:20","symbolAliases":[{"foreign":{"id":1063,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"245:13:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","file":"./base/ERC721MetadataBase.sol","id":1066,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1102,"sourceUnit":1182,"src":"298:65:20","symbolAliases":[{"foreign":{"id":1065,"name":"ERC721MetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1181,"src":"306:18:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1068,"name":"ERC721MetadataBase","nameLocations":["691:18:20"],"nodeType":"IdentifierPath","referencedDeclaration":1181,"src":"691:18:20"},"id":1069,"nodeType":"InheritanceSpecifier","src":"691:18:20"}],"canonicalName":"ERC721Metadata","contractDependencies":[],"contractKind":"contract","documentation":{"id":1067,"nodeType":"StructuredDocumentation","src":"365:290:20","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1101,"linearizedBaseContracts":[1101,1181,1442,3298],"name":"ERC721Metadata","nameLocation":"673:14:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1073,"libraryName":{"id":1070,"name":"TokenMetadataStorage","nameLocations":["722:20:20"],"nodeType":"IdentifierPath","referencedDeclaration":3499,"src":"722:20:20"},"nodeType":"UsingForDirective","src":"716:59:20","typeName":{"id":1072,"nodeType":"UserDefinedTypeName","pathNode":{"id":1071,"name":"TokenMetadataStorage.Layout","nameLocations":["747:20:20","768:6:20"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"747:27:20"},"referencedDeclaration":3326,"src":"747:27:20","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":1099,"nodeType":"Block","src":"1129:138:20","statements":[{"expression":{"arguments":[{"id":1089,"name":"name","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"1185:4:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1090,"name":"symbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1078,"src":"1191:6:20","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1091,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"1199:16:20","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1084,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1139:20:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3499_$","typeString":"type(library TokenMetadataStorage)"}},"id":1086,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1160:6:20","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"1139:27:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:29:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1088,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1169:15:20","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":3385,"src":"1139:45:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$3326_storage_ptr_$_t_string_memory_ptr_$_t_string_memory_ptr_$_t_contract$_ITokenMetadataResolver_$3312_$returns$__$attached_to$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)"}},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1139:77:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1093,"nodeType":"ExpressionStatement","src":"1139:77:20"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1094,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1226:13:20","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1240:18:20","memberName":"initERC721Metadata","nodeType":"MemberAccess","referencedDeclaration":1639,"src":"1226:32:20","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":1097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1098,"nodeType":"ExpressionStatement","src":"1226:34:20"}]},"documentation":{"id":1074,"nodeType":"StructuredDocumentation","src":"781:248:20","text":"@notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\n @param name The name of the token.\n @param symbol The symbol of the token.\n @param metadataResolver The address of the metadata resolver contract."},"id":1100,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1076,"mutability":"mutable","name":"name","nameLocation":"1060:4:20","nodeType":"VariableDeclaration","scope":1100,"src":"1046:18:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1075,"name":"string","nodeType":"ElementaryTypeName","src":"1046:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1078,"mutability":"mutable","name":"symbol","nameLocation":"1080:6:20","nodeType":"VariableDeclaration","scope":1100,"src":"1066:20:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1077,"name":"string","nodeType":"ElementaryTypeName","src":"1066:6:20","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1081,"mutability":"mutable","name":"metadataResolver","nameLocation":"1111:16:20","nodeType":"VariableDeclaration","scope":1100,"src":"1088:39:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":1080,"nodeType":"UserDefinedTypeName","pathNode":{"id":1079,"name":"ITokenMetadataResolver","nameLocations":["1088:22:20"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1088:22:20"},"referencedDeclaration":3312,"src":"1088:22:20","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:83:20"},"returnParameters":{"id":1083,"nodeType":"ParameterList","parameters":[],"src":"1129:0:20"},"scope":1101,"src":"1034:233:20","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1102,"src":"655:614:20","usedErrors":[887,1210],"usedEvents":[]}],"src":"32:1238:20"},"id":20},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol","exportedSymbols":{"ERC721MetadataBase":[1181],"ERC721Storage":[3246],"IERC721Metadata":[1442],"TokenMetadataBase":[3298],"TokenMetadataStorage":[3499]},"id":1182,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1105,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1182,"sourceUnit":1443,"src":"58:68:21","symbolAliases":[{"foreign":{"id":1104,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"66:15:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"./../libraries/ERC721Storage.sol","id":1107,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1182,"sourceUnit":3247,"src":"127:63:21","symbolAliases":[{"foreign":{"id":1106,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"135:13:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../../metadata/libraries/TokenMetadataStorage.sol","id":1109,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1182,"sourceUnit":3500,"src":"191:89:21","symbolAliases":[{"foreign":{"id":1108,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"199:20:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","file":"./../../metadata/base/TokenMetadataBase.sol","id":1111,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1182,"sourceUnit":3299,"src":"281:78:21","symbolAliases":[{"foreign":{"id":1110,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"289:17:21","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1113,"name":"TokenMetadataBase","nameLocations":["750:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":3298,"src":"750:17:21"},"id":1114,"nodeType":"InheritanceSpecifier","src":"750:17:21"},{"baseName":{"id":1115,"name":"IERC721Metadata","nameLocations":["769:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":1442,"src":"769:15:21"},"id":1116,"nodeType":"InheritanceSpecifier","src":"769:15:21"}],"canonicalName":"ERC721MetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1112,"nodeType":"StructuredDocumentation","src":"361:349:21","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\n @notice This contracts uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC721 (Non-Fungible Token Standard)."},"fullyImplemented":true,"id":1181,"linearizedBaseContracts":[1181,1442,3298],"name":"ERC721MetadataBase","nameLocation":"728:18:21","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1120,"libraryName":{"id":1117,"name":"ERC721Storage","nameLocations":["797:13:21"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"797:13:21"},"nodeType":"UsingForDirective","src":"791:45:21","typeName":{"id":1119,"nodeType":"UserDefinedTypeName","pathNode":{"id":1118,"name":"ERC721Storage.Layout","nameLocations":["815:13:21","829:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"815:20:21"},"referencedDeclaration":1562,"src":"815:20:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1124,"libraryName":{"id":1121,"name":"TokenMetadataStorage","nameLocations":["847:20:21"],"nodeType":"IdentifierPath","referencedDeclaration":3499,"src":"847:20:21"},"nodeType":"UsingForDirective","src":"841:59:21","typeName":{"id":1123,"nodeType":"UserDefinedTypeName","pathNode":{"id":1122,"name":"TokenMetadataStorage.Layout","nameLocations":["872:20:21","893:6:21"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"872:27:21"},"referencedDeclaration":3326,"src":"872:27:21","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"baseFunctions":[1427,3270],"body":{"id":1137,"nodeType":"Block","src":"1057:48:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1133,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"1074:17:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3298_$","typeString":"type(contract TokenMetadataBase)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1092:4:21","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3270,"src":"1074:22:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1074:24:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1132,"id":1136,"nodeType":"Return","src":"1067:31:21"}]},"documentation":{"id":1125,"nodeType":"StructuredDocumentation","src":"906:31:21","text":"@inheritdoc IERC721Metadata"},"functionSelector":"06fdde03","id":1138,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"951:4:21","nodeType":"FunctionDefinition","overrides":{"id":1129,"nodeType":"OverrideSpecifier","overrides":[{"id":1127,"name":"IERC721Metadata","nameLocations":["987:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":1442,"src":"987:15:21"},{"id":1128,"name":"TokenMetadataBase","nameLocations":["1004:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":3298,"src":"1004:17:21"}],"src":"978:44:21"},"parameters":{"id":1126,"nodeType":"ParameterList","parameters":[],"src":"955:2:21"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1131,"mutability":"mutable","name":"tokenName","nameLocation":"1046:9:21","nodeType":"VariableDeclaration","scope":1138,"src":"1032:23:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1130,"name":"string","nodeType":"ElementaryTypeName","src":"1032:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1031:25:21"},"scope":1181,"src":"942:163:21","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1433,3283],"body":{"id":1151,"nodeType":"Block","src":"1266:50:21","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1147,"name":"TokenMetadataBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3298,"src":"1283:17:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataBase_$3298_$","typeString":"type(contract TokenMetadataBase)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1301:6:21","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3283,"src":"1283:24:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_string_memory_ptr_$","typeString":"function () view returns (string memory)"}},"id":1149,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1283:26:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1146,"id":1150,"nodeType":"Return","src":"1276:33:21"}]},"documentation":{"id":1139,"nodeType":"StructuredDocumentation","src":"1111:31:21","text":"@inheritdoc IERC721Metadata"},"functionSelector":"95d89b41","id":1152,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"1156:6:21","nodeType":"FunctionDefinition","overrides":{"id":1143,"nodeType":"OverrideSpecifier","overrides":[{"id":1141,"name":"IERC721Metadata","nameLocations":["1194:15:21"],"nodeType":"IdentifierPath","referencedDeclaration":1442,"src":"1194:15:21"},{"id":1142,"name":"TokenMetadataBase","nameLocations":["1211:17:21"],"nodeType":"IdentifierPath","referencedDeclaration":3298,"src":"1211:17:21"}],"src":"1185:44:21"},"parameters":{"id":1140,"nodeType":"ParameterList","parameters":[],"src":"1162:2:21"},"returnParameters":{"id":1146,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1145,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1253:11:21","nodeType":"VariableDeclaration","scope":1152,"src":"1239:25:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1144,"name":"string","nodeType":"ElementaryTypeName","src":"1239:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1238:27:21"},"scope":1181,"src":"1147:169:21","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[1441],"body":{"id":1179,"nodeType":"Block","src":"1443:182:21","statements":[{"expression":{"arguments":[{"id":1165,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"1484:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1160,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1453:13:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":1162,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1467:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"1453:20:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":1163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:22:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1164,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1476:7:21","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"1453:30:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":1166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1453:39:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1167,"nodeType":"ExpressionStatement","src":"1453:39:21"},{"expression":{"arguments":[{"arguments":[{"id":1174,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"1603:4:21","typeDescriptions":{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1181","typeString":"contract ERC721MetadataBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_ERC721MetadataBase_$1181","typeString":"contract ERC721MetadataBase"}],"id":1173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1595:7:21","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1172,"name":"address","nodeType":"ElementaryTypeName","src":"1595:7:21","typeDescriptions":{}}},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1595:13:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1176,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1155,"src":"1610:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1168,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1548:20:21","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3499_$","typeString":"type(library TokenMetadataStorage)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1569:6:21","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"1548:27:21","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":1170,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:29:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":1171,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1578:16:21","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3486,"src":"1548:46:21","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3326_storage_ptr_$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer,address,uint256) view returns (string memory)"}},"id":1177,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1548:70:21","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1159,"id":1178,"nodeType":"Return","src":"1541:77:21"}]},"documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"1322:31:21","text":"@inheritdoc IERC721Metadata"},"functionSelector":"c87b56dd","id":1180,"implemented":true,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"1367:8:21","nodeType":"FunctionDefinition","parameters":{"id":1156,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1155,"mutability":"mutable","name":"tokenId","nameLocation":"1384:7:21","nodeType":"VariableDeclaration","scope":1180,"src":"1376:15:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1154,"name":"uint256","nodeType":"ElementaryTypeName","src":"1376:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1375:17:21"},"returnParameters":{"id":1159,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1158,"mutability":"mutable","name":"uri","nameLocation":"1438:3:21","nodeType":"VariableDeclaration","scope":1180,"src":"1424:17:21","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1157,"name":"string","nodeType":"ElementaryTypeName","src":"1424:6:21","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1423:19:21"},"scope":1181,"src":"1358:267:21","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1182,"src":"710:917:21","usedErrors":[1210],"usedEvents":[]}],"src":"32:1596:21"},"id":21},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","exportedSymbols":{"ERC721BalanceOfAddressZero":[1236],"ERC721NonApprovedForApproval":[1202],"ERC721NonApprovedForTransfer":[1219],"ERC721NonExistingToken":[1210],"ERC721NonOwnedToken":[1226],"ERC721SafeTransferRejected":[1233],"ERC721SelfApproval":[1188],"ERC721SelfApprovalForAll":[1193],"ERC721TransferToAddressZero":[1205]},"id":1237,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1183,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:22"},{"documentation":{"id":1184,"nodeType":"StructuredDocumentation","src":"58:108:22","text":"@notice Thrown when trying to approve oneself.\n @param account The account trying to approve itself."},"errorSelector":"b7fdc010","id":1188,"name":"ERC721SelfApproval","nameLocation":"172:18:22","nodeType":"ErrorDefinition","parameters":{"id":1187,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1186,"mutability":"mutable","name":"account","nameLocation":"199:7:22","nodeType":"VariableDeclaration","scope":1188,"src":"191:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1185,"name":"address","nodeType":"ElementaryTypeName","src":"191:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"190:17:22"},"src":"166:42:22"},{"documentation":{"id":1189,"nodeType":"StructuredDocumentation","src":"210:120:22","text":"@notice Thrown when trying to approveForAll oneself.\n @param account The account trying to approveForAll itself."},"errorSelector":"e4215c6a","id":1193,"name":"ERC721SelfApprovalForAll","nameLocation":"336:24:22","nodeType":"ErrorDefinition","parameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"account","nameLocation":"369:7:22","nodeType":"VariableDeclaration","scope":1193,"src":"361:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1190,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"360:17:22"},"src":"330:48:22"},{"documentation":{"id":1194,"nodeType":"StructuredDocumentation","src":"380:207:22","text":"@notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"c7563a18","id":1202,"name":"ERC721NonApprovedForApproval","nameLocation":"593:28:22","nodeType":"ErrorDefinition","parameters":{"id":1201,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1196,"mutability":"mutable","name":"sender","nameLocation":"630:6:22","nodeType":"VariableDeclaration","scope":1202,"src":"622:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1195,"name":"address","nodeType":"ElementaryTypeName","src":"622:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1198,"mutability":"mutable","name":"owner","nameLocation":"646:5:22","nodeType":"VariableDeclaration","scope":1202,"src":"638:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1197,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1200,"mutability":"mutable","name":"tokenId","nameLocation":"661:7:22","nodeType":"VariableDeclaration","scope":1202,"src":"653:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1199,"name":"uint256","nodeType":"ElementaryTypeName","src":"653:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"621:48:22"},"src":"587:83:22"},{"documentation":{"id":1203,"nodeType":"StructuredDocumentation","src":"672:66:22","text":"@notice Thrown when transferring a token to the zero address."},"errorSelector":"86c87067","id":1205,"name":"ERC721TransferToAddressZero","nameLocation":"744:27:22","nodeType":"ErrorDefinition","parameters":{"id":1204,"nodeType":"ParameterList","parameters":[],"src":"771:2:22"},"src":"738:36:22"},{"documentation":{"id":1206,"nodeType":"StructuredDocumentation","src":"776:132:22","text":"@notice Thrown when a token does not exist but is required to.\n @param tokenId The identifier of the token that was checked."},"errorSelector":"dd560475","id":1210,"name":"ERC721NonExistingToken","nameLocation":"914:22:22","nodeType":"ErrorDefinition","parameters":{"id":1209,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1208,"mutability":"mutable","name":"tokenId","nameLocation":"945:7:22","nodeType":"VariableDeclaration","scope":1210,"src":"937:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"937:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"936:17:22"},"src":"908:46:22"},{"documentation":{"id":1211,"nodeType":"StructuredDocumentation","src":"956:197:22","text":"@notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\n @param sender The message sender.\n @param tokenId The identifier of the token."},"errorSelector":"a4a3018b","id":1219,"name":"ERC721NonApprovedForTransfer","nameLocation":"1159:28:22","nodeType":"ErrorDefinition","parameters":{"id":1218,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1213,"mutability":"mutable","name":"sender","nameLocation":"1196:6:22","nodeType":"VariableDeclaration","scope":1219,"src":"1188:14:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1212,"name":"address","nodeType":"ElementaryTypeName","src":"1188:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1215,"mutability":"mutable","name":"owner","nameLocation":"1212:5:22","nodeType":"VariableDeclaration","scope":1219,"src":"1204:13:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1214,"name":"address","nodeType":"ElementaryTypeName","src":"1204:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1217,"mutability":"mutable","name":"tokenId","nameLocation":"1227:7:22","nodeType":"VariableDeclaration","scope":1219,"src":"1219:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1216,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1187:48:22"},"src":"1153:83:22"},{"documentation":{"id":1220,"nodeType":"StructuredDocumentation","src":"1238:185:22","text":"@notice Thrown when a token is not owned by the expected account.\n @param account The account that was expected to own the token.\n @param tokenId The identifier of the token."},"errorSelector":"14dbb536","id":1226,"name":"ERC721NonOwnedToken","nameLocation":"1429:19:22","nodeType":"ErrorDefinition","parameters":{"id":1225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1222,"mutability":"mutable","name":"account","nameLocation":"1457:7:22","nodeType":"VariableDeclaration","scope":1226,"src":"1449:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1221,"name":"address","nodeType":"ElementaryTypeName","src":"1449:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1224,"mutability":"mutable","name":"tokenId","nameLocation":"1474:7:22","nodeType":"VariableDeclaration","scope":1226,"src":"1466:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1223,"name":"uint256","nodeType":"ElementaryTypeName","src":"1466:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1448:34:22"},"src":"1423:60:22"},{"documentation":{"id":1227,"nodeType":"StructuredDocumentation","src":"1485:172:22","text":"@notice Thrown when a safe transfer is rejected by the recipient contract.\n @param recipient The recipient contract.\n @param tokenId The identifier of the token."},"errorSelector":"c215a7a1","id":1233,"name":"ERC721SafeTransferRejected","nameLocation":"1663:26:22","nodeType":"ErrorDefinition","parameters":{"id":1232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1229,"mutability":"mutable","name":"recipient","nameLocation":"1698:9:22","nodeType":"VariableDeclaration","scope":1233,"src":"1690:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1228,"name":"address","nodeType":"ElementaryTypeName","src":"1690:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1231,"mutability":"mutable","name":"tokenId","nameLocation":"1717:7:22","nodeType":"VariableDeclaration","scope":1233,"src":"1709:15:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1230,"name":"uint256","nodeType":"ElementaryTypeName","src":"1709:7:22","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1689:36:22"},"src":"1657:69:22"},{"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"1728:66:22","text":"@notice Thrown when querying the balance of the zero address."},"errorSelector":"aefbce4e","id":1236,"name":"ERC721BalanceOfAddressZero","nameLocation":"1800:26:22","nodeType":"ErrorDefinition","parameters":{"id":1235,"nodeType":"ParameterList","parameters":[],"src":"1826:2:22"},"src":"1794:35:22"}],"src":"32:1798:22"},"id":22},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","exportedSymbols":{"ERC721ExistingToken":[1246],"ERC721MintToAddressZero":[1241]},"id":1247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1238,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:23"},{"documentation":{"id":1239,"nodeType":"StructuredDocumentation","src":"58:61:23","text":"@notice Thrown when minting a token to the zero address."},"errorSelector":"7851b9cd","id":1241,"name":"ERC721MintToAddressZero","nameLocation":"125:23:23","nodeType":"ErrorDefinition","parameters":{"id":1240,"nodeType":"ParameterList","parameters":[],"src":"148:2:23"},"src":"119:32:23"},{"documentation":{"id":1242,"nodeType":"StructuredDocumentation","src":"153:129:23","text":"@notice Thrown when minting a token that already exists.\n @param tokenId The identifier of the token that already exists."},"errorSelector":"753eceac","id":1246,"name":"ERC721ExistingToken","nameLocation":"288:19:23","nodeType":"ErrorDefinition","parameters":{"id":1245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1244,"mutability":"mutable","name":"tokenId","nameLocation":"316:7:23","nodeType":"VariableDeclaration","scope":1246,"src":"308:15:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1243,"name":"uint256","nodeType":"ElementaryTypeName","src":"308:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"307:17:23"},"src":"282:43:23"}],"src":"32:294:23"},"id":23},"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","exportedSymbols":{"ERC721BurntToken":[1253]},"id":1254,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1248,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:24"},{"documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"58:174:24","text":"@notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\n @param tokenId The identifier of the token that has been burnt before."},"errorSelector":"31e8d3d5","id":1253,"name":"ERC721BurntToken","nameLocation":"238:16:24","nodeType":"ErrorDefinition","parameters":{"id":1252,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1251,"mutability":"mutable","name":"tokenId","nameLocation":"263:7:24","nodeType":"VariableDeclaration","scope":1253,"src":"255:15:24","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1250,"name":"uint256","nodeType":"ElementaryTypeName","src":"255:7:24","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"254:17:24"},"src":"232:40:24"}],"src":"32:241:24"},"id":24},"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","exportedSymbols":{"Approval":[1273],"ApprovalForAll":[1282],"Transfer":[1264]},"id":1283,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1255,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:25"},{"anonymous":false,"documentation":{"id":1256,"nodeType":"StructuredDocumentation","src":"58:179:25","text":"@notice Emitted when a token is transferred.\n @param from The previous token owner.\n @param to The new token owner.\n @param tokenId The transferred token identifier."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1264,"name":"Transfer","nameLocation":"243:8:25","nodeType":"EventDefinition","parameters":{"id":1263,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1258,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"268:4:25","nodeType":"VariableDeclaration","scope":1264,"src":"252:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1257,"name":"address","nodeType":"ElementaryTypeName","src":"252:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1260,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"290:2:25","nodeType":"VariableDeclaration","scope":1264,"src":"274:18:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1259,"name":"address","nodeType":"ElementaryTypeName","src":"274:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1262,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"310:7:25","nodeType":"VariableDeclaration","scope":1264,"src":"294:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1261,"name":"uint256","nodeType":"ElementaryTypeName","src":"294:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"251:67:25"},"src":"237:82:25"},{"anonymous":false,"documentation":{"id":1265,"nodeType":"StructuredDocumentation","src":"321:183:25","text":"@notice Emitted when a single token approval is set.\n @param owner The token owner.\n @param approved The approved address.\n @param tokenId The approved token identifier."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1273,"name":"Approval","nameLocation":"510:8:25","nodeType":"EventDefinition","parameters":{"id":1272,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1267,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"535:5:25","nodeType":"VariableDeclaration","scope":1273,"src":"519:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1266,"name":"address","nodeType":"ElementaryTypeName","src":"519:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1269,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"558:8:25","nodeType":"VariableDeclaration","scope":1273,"src":"542:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1268,"name":"address","nodeType":"ElementaryTypeName","src":"542:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1271,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"584:7:25","nodeType":"VariableDeclaration","scope":1273,"src":"568:23:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1270,"name":"uint256","nodeType":"ElementaryTypeName","src":"568:7:25","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"518:74:25"},"src":"504:89:25"},{"anonymous":false,"documentation":{"id":1274,"nodeType":"StructuredDocumentation","src":"595:222:25","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":1282,"name":"ApprovalForAll","nameLocation":"823:14:25","nodeType":"EventDefinition","parameters":{"id":1281,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1276,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"854:5:25","nodeType":"VariableDeclaration","scope":1282,"src":"838:21:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1275,"name":"address","nodeType":"ElementaryTypeName","src":"838:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1278,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"877:8:25","nodeType":"VariableDeclaration","scope":1282,"src":"861:24:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1277,"name":"address","nodeType":"ElementaryTypeName","src":"861:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1280,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"892:8:25","nodeType":"VariableDeclaration","scope":1282,"src":"887:13:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1279,"name":"bool","nodeType":"ElementaryTypeName","src":"887:4:25","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"837:64:25"},"src":"817:85:25"}],"src":"32:872:25"},"id":25},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[1368]},"id":1369,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1284,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:26"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":1285,"nodeType":"StructuredDocumentation","src":"58:296:26","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":1368,"linearizedBaseContracts":[1368],"name":"IERC721","nameLocation":"364:7:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"378:684:26","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":1293,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1076:7:26","nodeType":"FunctionDefinition","parameters":{"id":1291,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1288,"mutability":"mutable","name":"to","nameLocation":"1092:2:26","nodeType":"VariableDeclaration","scope":1293,"src":"1084:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1287,"name":"address","nodeType":"ElementaryTypeName","src":"1084:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1290,"mutability":"mutable","name":"tokenId","nameLocation":"1104:7:26","nodeType":"VariableDeclaration","scope":1293,"src":"1096:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1289,"name":"uint256","nodeType":"ElementaryTypeName","src":"1096:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1083:29:26"},"returnParameters":{"id":1292,"nodeType":"ParameterList","parameters":[],"src":"1121:0:26"},"scope":1368,"src":"1067:55:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1294,"nodeType":"StructuredDocumentation","src":"1128:341:26","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":1301,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1483:17:26","nodeType":"FunctionDefinition","parameters":{"id":1299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1296,"mutability":"mutable","name":"operator","nameLocation":"1509:8:26","nodeType":"VariableDeclaration","scope":1301,"src":"1501:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1295,"name":"address","nodeType":"ElementaryTypeName","src":"1501:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1298,"mutability":"mutable","name":"approved","nameLocation":"1524:8:26","nodeType":"VariableDeclaration","scope":1301,"src":"1519:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1297,"name":"bool","nodeType":"ElementaryTypeName","src":"1519:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1500:33:26"},"returnParameters":{"id":1300,"nodeType":"ParameterList","parameters":[],"src":"1542:0:26"},"scope":1368,"src":"1474:69:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"1549:667:26","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":1311,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2230:12:26","nodeType":"FunctionDefinition","parameters":{"id":1309,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1304,"mutability":"mutable","name":"from","nameLocation":"2251:4:26","nodeType":"VariableDeclaration","scope":1311,"src":"2243:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1303,"name":"address","nodeType":"ElementaryTypeName","src":"2243:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1306,"mutability":"mutable","name":"to","nameLocation":"2265:2:26","nodeType":"VariableDeclaration","scope":1311,"src":"2257:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1305,"name":"address","nodeType":"ElementaryTypeName","src":"2257:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1308,"mutability":"mutable","name":"tokenId","nameLocation":"2277:7:26","nodeType":"VariableDeclaration","scope":1311,"src":"2269:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1307,"name":"uint256","nodeType":"ElementaryTypeName","src":"2269:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2242:43:26"},"returnParameters":{"id":1310,"nodeType":"ParameterList","parameters":[],"src":"2294:0:26"},"scope":1368,"src":"2221:74:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1312,"nodeType":"StructuredDocumentation","src":"2301:663:26","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":1321,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2978:16:26","nodeType":"FunctionDefinition","parameters":{"id":1319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1314,"mutability":"mutable","name":"from","nameLocation":"3003:4:26","nodeType":"VariableDeclaration","scope":1321,"src":"2995:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1313,"name":"address","nodeType":"ElementaryTypeName","src":"2995:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1316,"mutability":"mutable","name":"to","nameLocation":"3017:2:26","nodeType":"VariableDeclaration","scope":1321,"src":"3009:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1315,"name":"address","nodeType":"ElementaryTypeName","src":"3009:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1318,"mutability":"mutable","name":"tokenId","nameLocation":"3029:7:26","nodeType":"VariableDeclaration","scope":1321,"src":"3021:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1317,"name":"uint256","nodeType":"ElementaryTypeName","src":"3021:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2994:43:26"},"returnParameters":{"id":1320,"nodeType":"ParameterList","parameters":[],"src":"3046:0:26"},"scope":1368,"src":"2969:78:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1322,"nodeType":"StructuredDocumentation","src":"3053:735:26","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":1333,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3802:16:26","nodeType":"FunctionDefinition","parameters":{"id":1331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"from","nameLocation":"3827:4:26","nodeType":"VariableDeclaration","scope":1333,"src":"3819:12:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"3819:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1326,"mutability":"mutable","name":"to","nameLocation":"3841:2:26","nodeType":"VariableDeclaration","scope":1333,"src":"3833:10:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1325,"name":"address","nodeType":"ElementaryTypeName","src":"3833:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1328,"mutability":"mutable","name":"tokenId","nameLocation":"3853:7:26","nodeType":"VariableDeclaration","scope":1333,"src":"3845:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1327,"name":"uint256","nodeType":"ElementaryTypeName","src":"3845:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1330,"mutability":"mutable","name":"data","nameLocation":"3877:4:26","nodeType":"VariableDeclaration","scope":1333,"src":"3862:19:26","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1329,"name":"bytes","nodeType":"ElementaryTypeName","src":"3862:5:26","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3818:64:26"},"returnParameters":{"id":1332,"nodeType":"ParameterList","parameters":[],"src":"3891:0:26"},"scope":1368,"src":"3793:99:26","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"3898:209:26","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":1341,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4121:9:26","nodeType":"FunctionDefinition","parameters":{"id":1337,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"owner","nameLocation":"4139:5:26","nodeType":"VariableDeclaration","scope":1341,"src":"4131:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1335,"name":"address","nodeType":"ElementaryTypeName","src":"4131:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4130:15:26"},"returnParameters":{"id":1340,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1339,"mutability":"mutable","name":"balance","nameLocation":"4177:7:26","nodeType":"VariableDeclaration","scope":1341,"src":"4169:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1338,"name":"uint256","nodeType":"ElementaryTypeName","src":"4169:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4168:17:26"},"scope":1368,"src":"4112:74:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1342,"nodeType":"StructuredDocumentation","src":"4192:217:26","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":1349,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4423:7:26","nodeType":"FunctionDefinition","parameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1344,"mutability":"mutable","name":"tokenId","nameLocation":"4439:7:26","nodeType":"VariableDeclaration","scope":1349,"src":"4431:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1343,"name":"uint256","nodeType":"ElementaryTypeName","src":"4431:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4430:17:26"},"returnParameters":{"id":1348,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1347,"mutability":"mutable","name":"tokenOwner","nameLocation":"4479:10:26","nodeType":"VariableDeclaration","scope":1349,"src":"4471:18:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1346,"name":"address","nodeType":"ElementaryTypeName","src":"4471:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4470:20:26"},"scope":1368,"src":"4414:77:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1350,"nodeType":"StructuredDocumentation","src":"4497:285:26","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":1357,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4796:11:26","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1352,"mutability":"mutable","name":"tokenId","nameLocation":"4816:7:26","nodeType":"VariableDeclaration","scope":1357,"src":"4808:15:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1351,"name":"uint256","nodeType":"ElementaryTypeName","src":"4808:7:26","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4807:17:26"},"returnParameters":{"id":1356,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1355,"mutability":"mutable","name":"approved","nameLocation":"4856:8:26","nodeType":"VariableDeclaration","scope":1357,"src":"4848:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1354,"name":"address","nodeType":"ElementaryTypeName","src":"4848:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4847:18:26"},"scope":1368,"src":"4787:79:26","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1358,"nodeType":"StructuredDocumentation","src":"4872:323:26","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":1367,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5209:16:26","nodeType":"FunctionDefinition","parameters":{"id":1363,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1360,"mutability":"mutable","name":"owner","nameLocation":"5234:5:26","nodeType":"VariableDeclaration","scope":1367,"src":"5226:13:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1359,"name":"address","nodeType":"ElementaryTypeName","src":"5226:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"operator","nameLocation":"5249:8:26","nodeType":"VariableDeclaration","scope":1367,"src":"5241:16:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1361,"name":"address","nodeType":"ElementaryTypeName","src":"5241:7:26","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5225:33:26"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1365,"mutability":"mutable","name":"approvedForAll","nameLocation":"5287:14:26","nodeType":"VariableDeclaration","scope":1367,"src":"5282:19:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1364,"name":"bool","nodeType":"ElementaryTypeName","src":"5282:4:26","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5281:21:26"},"scope":1368,"src":"5200:103:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1369,"src":"354:4951:26","usedErrors":[],"usedEvents":[]}],"src":"32:5274:26"},"id":26},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","exportedSymbols":{"IERC721BatchTransfer":[1383]},"id":1384,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1370,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:27"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721BatchTransfer","contractDependencies":[],"contractKind":"interface","documentation":{"id":1371,"nodeType":"StructuredDocumentation","src":"58:207:27","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0xf3993d11."},"fullyImplemented":false,"id":1383,"linearizedBaseContracts":[1383],"name":"IERC721BatchTransfer","nameLocation":"275:20:27","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1372,"nodeType":"StructuredDocumentation","src":"302:578:27","text":"@notice Unsafely transfers a batch of tokens to a recipient.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"functionSelector":"f3993d11","id":1382,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"894:17:27","nodeType":"FunctionDefinition","parameters":{"id":1380,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"mutability":"mutable","name":"from","nameLocation":"920:4:27","nodeType":"VariableDeclaration","scope":1382,"src":"912:12:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"912:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1376,"mutability":"mutable","name":"to","nameLocation":"934:2:27","nodeType":"VariableDeclaration","scope":1382,"src":"926:10:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1375,"name":"address","nodeType":"ElementaryTypeName","src":"926:7:27","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1379,"mutability":"mutable","name":"tokenIds","nameLocation":"957:8:27","nodeType":"VariableDeclaration","scope":1382,"src":"938:27:27","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1377,"name":"uint256","nodeType":"ElementaryTypeName","src":"938:7:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1378,"nodeType":"ArrayTypeName","src":"938:9:27","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"911:55:27"},"returnParameters":{"id":1381,"nodeType":"ParameterList","parameters":[],"src":"975:0:27"},"scope":1383,"src":"885:91:27","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1384,"src":"265:713:27","usedErrors":[],"usedEvents":[]}],"src":"32:947:27"},"id":27},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","exportedSymbols":{"IERC721Burnable":[1404]},"id":1405,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1385,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:28"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1386,"nodeType":"StructuredDocumentation","src":"58:201:28","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5."},"fullyImplemented":false,"id":1404,"linearizedBaseContracts":[1404],"name":"IERC721Burnable","nameLocation":"269:15:28","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1387,"nodeType":"StructuredDocumentation","src":"291:371:28","text":"@notice Burns a token.\n @dev Reverts if `tokenId` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"functionSelector":"79cc6790","id":1394,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"676:8:28","nodeType":"FunctionDefinition","parameters":{"id":1392,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1389,"mutability":"mutable","name":"from","nameLocation":"693:4:28","nodeType":"VariableDeclaration","scope":1394,"src":"685:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1388,"name":"address","nodeType":"ElementaryTypeName","src":"685:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1391,"mutability":"mutable","name":"tokenId","nameLocation":"707:7:28","nodeType":"VariableDeclaration","scope":1394,"src":"699:15:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1390,"name":"uint256","nodeType":"ElementaryTypeName","src":"699:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"684:31:28"},"returnParameters":{"id":1393,"nodeType":"ParameterList","parameters":[],"src":"724:0:28"},"scope":1404,"src":"667:58:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1395,"nodeType":"StructuredDocumentation","src":"731:425:28","text":"@notice Burns a batch of tokens.\n @dev Reverts if one of `tokenIds` is not owned by `from`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"functionSelector":"f2472965","id":1403,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"1170:13:28","nodeType":"FunctionDefinition","parameters":{"id":1401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1397,"mutability":"mutable","name":"from","nameLocation":"1192:4:28","nodeType":"VariableDeclaration","scope":1403,"src":"1184:12:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1396,"name":"address","nodeType":"ElementaryTypeName","src":"1184:7:28","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1400,"mutability":"mutable","name":"tokenIds","nameLocation":"1217:8:28","nodeType":"VariableDeclaration","scope":1403,"src":"1198:27:28","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1398,"name":"uint256","nodeType":"ElementaryTypeName","src":"1198:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1399,"nodeType":"ArrayTypeName","src":"1198:9:28","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1183:43:28"},"returnParameters":{"id":1402,"nodeType":"ParameterList","parameters":[],"src":"1235:0:28"},"scope":1404,"src":"1161:75:28","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1405,"src":"259:979:28","usedErrors":[],"usedEvents":[]}],"src":"32:1207:28"},"id":28},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","exportedSymbols":{"IERC721Deliverable":[1418]},"id":1419,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1406,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:29"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Deliverable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1407,"nodeType":"StructuredDocumentation","src":"58:204:29","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x9da5e832."},"fullyImplemented":false,"id":1418,"linearizedBaseContracts":[1418],"name":"IERC721Deliverable","nameLocation":"272:18:29","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"297:487:29","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Reverts if `recipients` and `tokenIds` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"9da5e832","id":1417,"implemented":false,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"798:7:29","nodeType":"FunctionDefinition","parameters":{"id":1415,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"recipients","nameLocation":"825:10:29","nodeType":"VariableDeclaration","scope":1417,"src":"806:29:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1409,"name":"address","nodeType":"ElementaryTypeName","src":"806:7:29","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1410,"nodeType":"ArrayTypeName","src":"806:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1414,"mutability":"mutable","name":"tokenIds","nameLocation":"856:8:29","nodeType":"VariableDeclaration","scope":1417,"src":"837:27:29","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1412,"name":"uint256","nodeType":"ElementaryTypeName","src":"837:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1413,"nodeType":"ArrayTypeName","src":"837:9:29","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"805:60:29"},"returnParameters":{"id":1416,"nodeType":"ParameterList","parameters":[],"src":"874:0:29"},"scope":1418,"src":"789:86:29","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1419,"src":"262:615:29","usedErrors":[],"usedEvents":[]}],"src":"32:846:29"},"id":29},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","exportedSymbols":{"IERC721Metadata":[1442]},"id":1443,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1420,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:30"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Metadata","contractDependencies":[],"contractKind":"interface","documentation":{"id":1421,"nodeType":"StructuredDocumentation","src":"58:201:30","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f."},"fullyImplemented":false,"id":1442,"linearizedBaseContracts":[1442],"name":"IERC721Metadata","nameLocation":"269:15:30","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1422,"nodeType":"StructuredDocumentation","src":"291:105:30","text":"@notice Gets the name of the token. E.g. \"My Token\".\n @return tokenName The name of the token."},"functionSelector":"06fdde03","id":1427,"implemented":false,"kind":"function","modifiers":[],"name":"name","nameLocation":"410:4:30","nodeType":"FunctionDefinition","parameters":{"id":1423,"nodeType":"ParameterList","parameters":[],"src":"414:2:30"},"returnParameters":{"id":1426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1425,"mutability":"mutable","name":"tokenName","nameLocation":"454:9:30","nodeType":"VariableDeclaration","scope":1427,"src":"440:23:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1424,"name":"string","nodeType":"ElementaryTypeName","src":"440:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"439:25:30"},"scope":1442,"src":"401:64:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1428,"nodeType":"StructuredDocumentation","src":"471:106:30","text":"@notice Gets the symbol of the token. E.g. \"TOK\".\n @return tokenSymbol The symbol of the token."},"functionSelector":"95d89b41","id":1433,"implemented":false,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"591:6:30","nodeType":"FunctionDefinition","parameters":{"id":1429,"nodeType":"ParameterList","parameters":[],"src":"597:2:30"},"returnParameters":{"id":1432,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1431,"mutability":"mutable","name":"tokenSymbol","nameLocation":"637:11:30","nodeType":"VariableDeclaration","scope":1433,"src":"623:25:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1430,"name":"string","nodeType":"ElementaryTypeName","src":"623:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"622:27:30"},"scope":1442,"src":"582:68:30","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1434,"nodeType":"StructuredDocumentation","src":"656:215:30","text":"@notice Gets the metadata URI for a token identifier.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier.\n @return uri The metadata URI for the token identifier."},"functionSelector":"c87b56dd","id":1441,"implemented":false,"kind":"function","modifiers":[],"name":"tokenURI","nameLocation":"885:8:30","nodeType":"FunctionDefinition","parameters":{"id":1437,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1436,"mutability":"mutable","name":"tokenId","nameLocation":"902:7:30","nodeType":"VariableDeclaration","scope":1441,"src":"894:15:30","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1435,"name":"uint256","nodeType":"ElementaryTypeName","src":"894:7:30","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"893:17:30"},"returnParameters":{"id":1440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1439,"mutability":"mutable","name":"uri","nameLocation":"948:3:30","nodeType":"VariableDeclaration","scope":1441,"src":"934:17:30","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1438,"name":"string","nodeType":"ElementaryTypeName","src":"934:6:30","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"933:19:30"},"scope":1442,"src":"876:77:30","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1443,"src":"259:696:30","usedErrors":[],"usedEvents":[]}],"src":"32:924:30"},"id":30},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","exportedSymbols":{"IERC721Mintable":[1473]},"id":1474,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1444,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:31"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":1445,"nodeType":"StructuredDocumentation","src":"58:201:31","text":"@title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x8e773e13."},"fullyImplemented":false,"id":1473,"linearizedBaseContracts":[1473],"name":"IERC721Mintable","nameLocation":"269:15:31","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1446,"nodeType":"StructuredDocumentation","src":"291:311:31","text":"@notice Unsafely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"functionSelector":"40c10f19","id":1453,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"616:4:31","nodeType":"FunctionDefinition","parameters":{"id":1451,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1448,"mutability":"mutable","name":"to","nameLocation":"629:2:31","nodeType":"VariableDeclaration","scope":1453,"src":"621:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1447,"name":"address","nodeType":"ElementaryTypeName","src":"621:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1450,"mutability":"mutable","name":"tokenId","nameLocation":"641:7:31","nodeType":"VariableDeclaration","scope":1453,"src":"633:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1449,"name":"uint256","nodeType":"ElementaryTypeName","src":"633:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"620:29:31"},"returnParameters":{"id":1452,"nodeType":"ParameterList","parameters":[],"src":"658:0:31"},"scope":1473,"src":"607:52:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"665:504:31","text":"@notice Safely mints a token.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `tokenId` already exists.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits an {IERC721-Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"functionSelector":"8832e6e3","id":1463,"implemented":false,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"1183:8:31","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"to","nameLocation":"1200:2:31","nodeType":"VariableDeclaration","scope":1463,"src":"1192:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1455,"name":"address","nodeType":"ElementaryTypeName","src":"1192:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"tokenId","nameLocation":"1212:7:31","nodeType":"VariableDeclaration","scope":1463,"src":"1204:15:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1457,"name":"uint256","nodeType":"ElementaryTypeName","src":"1204:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"data","nameLocation":"1236:4:31","nodeType":"VariableDeclaration","scope":1463,"src":"1221:19:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1459,"name":"bytes","nodeType":"ElementaryTypeName","src":"1221:5:31","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1191:50:31"},"returnParameters":{"id":1462,"nodeType":"ParameterList","parameters":[],"src":"1250:0:31"},"scope":1473,"src":"1174:77:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1464,"nodeType":"StructuredDocumentation","src":"1257:356:31","text":"@notice Unsafely mints a batch of tokens.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if one of `tokenIds` already exists.\n @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"functionSelector":"4684d7e9","id":1472,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1627:9:31","nodeType":"FunctionDefinition","parameters":{"id":1470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1466,"mutability":"mutable","name":"to","nameLocation":"1645:2:31","nodeType":"VariableDeclaration","scope":1472,"src":"1637:10:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"1637:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"tokenIds","nameLocation":"1668:8:31","nodeType":"VariableDeclaration","scope":1472,"src":"1649:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1467,"name":"uint256","nodeType":"ElementaryTypeName","src":"1649:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1468,"nodeType":"ArrayTypeName","src":"1649:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1636:41:31"},"returnParameters":{"id":1471,"nodeType":"ParameterList","parameters":[],"src":"1686:0:31"},"scope":1473,"src":"1618:69:31","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1474,"src":"259:1430:31","usedErrors":[],"usedEvents":[]}],"src":"32:1658:31"},"id":31},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","exportedSymbols":{"IERC721Receiver":[1491]},"id":1492,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1475,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:32"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":1476,"nodeType":"StructuredDocumentation","src":"58:263:32","text":"@title ERC721 Non-Fungible Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC721 contracts.\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev Note: The ERC-165 identifier for this interface is 0x150b7a02."},"fullyImplemented":false,"id":1491,"linearizedBaseContracts":[1491],"name":"IERC721Receiver","nameLocation":"331:15:32","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1477,"nodeType":"StructuredDocumentation","src":"353:589:32","text":"@notice Handles the receipt of an ERC721 token.\n @dev Note: This function is called by an ERC721 contract after a safe transfer.\n @dev Note: The ERC721 contract address is always the message sender.\n @param operator The initiator of the safe transfer.\n @param from The previous token owner.\n @param tokenId The token identifier.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."},"functionSelector":"150b7a02","id":1490,"implemented":false,"kind":"function","modifiers":[],"name":"onERC721Received","nameLocation":"956:16:32","nodeType":"FunctionDefinition","parameters":{"id":1486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1479,"mutability":"mutable","name":"operator","nameLocation":"981:8:32","nodeType":"VariableDeclaration","scope":1490,"src":"973:16:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1478,"name":"address","nodeType":"ElementaryTypeName","src":"973:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1481,"mutability":"mutable","name":"from","nameLocation":"999:4:32","nodeType":"VariableDeclaration","scope":1490,"src":"991:12:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1480,"name":"address","nodeType":"ElementaryTypeName","src":"991:7:32","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1483,"mutability":"mutable","name":"tokenId","nameLocation":"1013:7:32","nodeType":"VariableDeclaration","scope":1490,"src":"1005:15:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1482,"name":"uint256","nodeType":"ElementaryTypeName","src":"1005:7:32","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1485,"mutability":"mutable","name":"data","nameLocation":"1037:4:32","nodeType":"VariableDeclaration","scope":1490,"src":"1022:19:32","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1484,"name":"bytes","nodeType":"ElementaryTypeName","src":"1022:5:32","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"972:70:32"},"returnParameters":{"id":1489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1488,"mutability":"mutable","name":"magicValue","nameLocation":"1068:10:32","nodeType":"VariableDeclaration","scope":1490,"src":"1061:17:32","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1487,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1061:6:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1060:19:32"},"scope":1491,"src":"947:133:32","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1492,"src":"321:761:32","usedErrors":[],"usedEvents":[]}],"src":"32:1051:32"},"id":32},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","exportedSymbols":{"Address":[3829],"Approval":[1273],"ApprovalForAll":[1282],"ERC721BalanceOfAddressZero":[1236],"ERC721BurntToken":[1253],"ERC721ExistingToken":[1246],"ERC721MintToAddressZero":[1241],"ERC721NonApprovedForApproval":[1202],"ERC721NonApprovedForTransfer":[1219],"ERC721NonExistingToken":[1210],"ERC721NonOwnedToken":[1226],"ERC721SafeTransferRejected":[1233],"ERC721SelfApproval":[1188],"ERC721SelfApprovalForAll":[1193],"ERC721Storage":[3246],"ERC721TransferToAddressZero":[1205],"IERC721":[1368],"IERC721BatchTransfer":[1383],"IERC721Burnable":[1404],"IERC721Deliverable":[1418],"IERC721Metadata":[1442],"IERC721Mintable":[1473],"IERC721Receiver":[1491],"InconsistentArrayLengths":[7],"InterfaceDetectionStorage":[1000],"Transfer":[1264]},"id":3247,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1493,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:33"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","file":"./../errors/ERC721Errors.sol","id":1503,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1237,"src":"103:280:33","symbolAliases":[{"foreign":{"id":1494,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"111:18:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1495,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"131:24:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1496,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"157:28:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1497,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"187:27:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1498,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"216:22:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1499,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"240:28:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1500,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"270:19:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1501,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"291:26:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1502,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"319:26:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol","file":"./../errors/ERC721MintableErrors.sol","id":1506,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1247,"src":"384:98:33","symbolAliases":[{"foreign":{"id":1504,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"392:23:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1505,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"417:19:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol","file":"./../errors/ERC721MintableOnceErrors.sol","id":1508,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1254,"src":"483:74:33","symbolAliases":[{"foreign":{"id":1507,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"491:16:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../../CommonErrors.sol","id":1510,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":11,"src":"558:69:33","symbolAliases":[{"foreign":{"id":1509,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"566:24:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","file":"./../events/ERC721Events.sol","id":1514,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1283,"src":"628:80:33","symbolAliases":[{"foreign":{"id":1511,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"636:8:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1512,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"646:8:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":1513,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"656:14:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../interfaces/IERC721.sol","id":1516,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1369,"src":"709:52:33","symbolAliases":[{"foreign":{"id":1515,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"717:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol","file":"./../interfaces/IERC721BatchTransfer.sol","id":1518,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1384,"src":"762:78:33","symbolAliases":[{"foreign":{"id":1517,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"770:20:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol","file":"./../interfaces/IERC721Metadata.sol","id":1520,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1443,"src":"841:68:33","symbolAliases":[{"foreign":{"id":1519,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"849:15:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol","file":"./../interfaces/IERC721Mintable.sol","id":1522,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1474,"src":"910:68:33","symbolAliases":[{"foreign":{"id":1521,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"918:15:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol","file":"./../interfaces/IERC721Deliverable.sol","id":1524,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1419,"src":"979:74:33","symbolAliases":[{"foreign":{"id":1523,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"987:18:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol","file":"./../interfaces/IERC721Burnable.sol","id":1526,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1405,"src":"1054:68:33","symbolAliases":[{"foreign":{"id":1525,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"1062:15:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","file":"./../interfaces/IERC721Receiver.sol","id":1528,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1492,"src":"1123:68:33","symbolAliases":[{"foreign":{"id":1527,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"1131:15:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1530,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":3830,"src":"1192:66:33","symbolAliases":[{"foreign":{"id":1529,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"1200:7:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":1532,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3247,"sourceUnit":1001,"src":"1259:107:33","symbolAliases":[{"foreign":{"id":1531,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"1267:25:33","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC721Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3246,"linearizedBaseContracts":[3246],"name":"ERC721Storage","nameLocation":"1376:13:33","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1535,"libraryName":{"id":1533,"name":"Address","nameLocations":["1402:7:33"],"nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"1402:7:33"},"nodeType":"UsingForDirective","src":"1396:26:33","typeName":{"id":1534,"name":"address","nodeType":"ElementaryTypeName","src":"1414:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":1539,"libraryName":{"id":1536,"name":"ERC721Storage","nameLocations":["1433:13:33"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"1433:13:33"},"nodeType":"UsingForDirective","src":"1427:45:33","typeName":{"id":1538,"nodeType":"UserDefinedTypeName","pathNode":{"id":1537,"name":"ERC721Storage.Layout","nameLocations":["1451:13:33","1465:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"1451:20:33"},"referencedDeclaration":1562,"src":"1451:20:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":1543,"libraryName":{"id":1540,"name":"InterfaceDetectionStorage","nameLocations":["1483:25:33"],"nodeType":"IdentifierPath","referencedDeclaration":1000,"src":"1483:25:33"},"nodeType":"UsingForDirective","src":"1477:69:33","typeName":{"id":1542,"nodeType":"UserDefinedTypeName","pathNode":{"id":1541,"name":"InterfaceDetectionStorage.Layout","nameLocations":["1513:25:33","1539:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":910,"src":"1513:32:33"},"referencedDeclaration":910,"src":"1513:32:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC721Storage.Layout","id":1562,"members":[{"constant":false,"id":1547,"mutability":"mutable","name":"owners","nameLocation":"1604:6:33","nodeType":"VariableDeclaration","scope":1562,"src":"1576:34:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"typeName":{"id":1546,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1544,"name":"uint256","nodeType":"ElementaryTypeName","src":"1584:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1576:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1545,"name":"uint256","nodeType":"ElementaryTypeName","src":"1595:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1551,"mutability":"mutable","name":"balances","nameLocation":"1648:8:33","nodeType":"VariableDeclaration","scope":1562,"src":"1620:36:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":1550,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1548,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1620:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1549,"name":"uint256","nodeType":"ElementaryTypeName","src":"1639:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":1555,"mutability":"mutable","name":"approvals","nameLocation":"1694:9:33","nodeType":"VariableDeclaration","scope":1562,"src":"1666:37:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":1554,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1552,"name":"uint256","nodeType":"ElementaryTypeName","src":"1674:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1666:27:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1553,"name":"address","nodeType":"ElementaryTypeName","src":"1685:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"internal"},{"constant":false,"id":1561,"mutability":"mutable","name":"operators","nameLocation":"1758:9:33","nodeType":"VariableDeclaration","scope":1562,"src":"1713:54:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"typeName":{"id":1560,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1556,"name":"address","nodeType":"ElementaryTypeName","src":"1721:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1713:44:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1559,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1557,"name":"address","nodeType":"ElementaryTypeName","src":"1740:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1732:24:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1558,"name":"bool","nodeType":"ElementaryTypeName","src":"1751:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"1559:6:33","nodeType":"StructDefinition","scope":3246,"src":"1552:222:33","visibility":"public"},{"constant":true,"id":1575,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1806:19:33","nodeType":"VariableDeclaration","scope":3246,"src":"1780:118:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1563,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1780:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1573,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e4552433732312e4552433732312e73746f72616765","id":1569,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1854:37:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""},"value":"animoca.token.ERC721.ERC721.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c1","typeString":"literal_string \"animoca.token.ERC721.ERC721.storage\""}],"id":1568,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1844:9:33","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1844:48:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1567,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1836:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1566,"name":"uint256","nodeType":"ElementaryTypeName","src":"1836:7:33","typeDescriptions":{}}},"id":1571,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1836:57:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1572,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1896:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1836:61:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1565,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1828:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1564,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1828:7:33","typeDescriptions":{}}},"id":1574,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1828:70:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1580,"mutability":"constant","name":"ERC721_RECEIVED","nameLocation":"1930:15:33","nodeType":"VariableDeclaration","scope":3246,"src":"1905:84:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":1576,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1905:6:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":1577,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"1948:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1491_$","typeString":"type(contract IERC721Receiver)"}},"id":1578,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1964:16:33","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"1948:32:33","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1981:8:33","memberName":"selector","nodeType":"MemberAccess","src":"1948:41:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"id":1585,"mutability":"constant","name":"TOKEN_APPROVAL_OWNER_FLAG","nameLocation":"2157:25:33","nodeType":"VariableDeclaration","scope":3246,"src":"2131:62:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1581,"name":"uint256","nodeType":"ElementaryTypeName","src":"2131:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"commonType":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"},"id":1584,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2185:1:33","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"313630","id":1583,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2190:3:33","typeDescriptions":{"typeIdentifier":"t_rational_160_by_1","typeString":"int_const 160"},"value":"160"},"src":"2185:8:33","typeDescriptions":{"typeIdentifier":"t_rational_1461501637330902918203684832716283019655932542976_by_1","typeString":"int_const 1461...(41 digits omitted)...2976"}},"visibility":"internal"},{"constant":true,"id":1588,"mutability":"constant","name":"BURNT_TOKEN_OWNER_VALUE","nameLocation":"2353:23:33","nodeType":"VariableDeclaration","scope":3246,"src":"2327:118:33","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1586,"name":"uint256","nodeType":"ElementaryTypeName","src":"2327:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"307864656164303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030","id":1587,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2379:66:33","typeDescriptions":{"typeIdentifier":"t_rational_100719116927691798707895874029850069994745719541394658707722161504685790330880_by_1","typeString":"int_const 1007...(70 digits omitted)...0880"},"value":"0xdead000000000000000000000000000000000000000000000000000000000000"},"visibility":"internal"},{"body":{"id":1604,"nodeType":"Block","src":"2555:106:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1598,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"2627:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721_$1368_$","typeString":"type(contract IERC721)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721_$1368_$","typeString":"type(contract IERC721)"}],"id":1597,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2622:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1599,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2622:13:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721_$1368","typeString":"type(contract IERC721)"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2636:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"2622:25:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2649:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1592,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2565:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1594,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2591:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"2565:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1595,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2600:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2565:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2565:89:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1603,"nodeType":"ExpressionStatement","src":"2565:89:33"}]},"documentation":{"id":1589,"nodeType":"StructuredDocumentation","src":"2452:73:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721."},"id":1605,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"2539:4:33","nodeType":"FunctionDefinition","parameters":{"id":1590,"nodeType":"ParameterList","parameters":[],"src":"2543:2:33"},"returnParameters":{"id":1591,"nodeType":"ParameterList","parameters":[],"src":"2555:0:33"},"scope":3246,"src":"2530:131:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1621,"nodeType":"Block","src":"2802:119:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1615,"name":"IERC721BatchTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1383,"src":"2874:20:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1383_$","typeString":"type(contract IERC721BatchTransfer)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721BatchTransfer_$1383_$","typeString":"type(contract IERC721BatchTransfer)"}],"id":1614,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2869:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1616,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2869:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721BatchTransfer_$1383","typeString":"type(contract IERC721BatchTransfer)"}},"id":1617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2896:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"2869:38:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2909:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1609,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"2812:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2838:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"2812:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1612,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1613,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2847:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"2812:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1619,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2812:102:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1620,"nodeType":"ExpressionStatement","src":"2812:102:33"}]},"documentation":{"id":1606,"nodeType":"StructuredDocumentation","src":"2667:86:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer."},"id":1622,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721BatchTransfer","nameLocation":"2767:23:33","nodeType":"FunctionDefinition","parameters":{"id":1607,"nodeType":"ParameterList","parameters":[],"src":"2790:2:33"},"returnParameters":{"id":1608,"nodeType":"ParameterList","parameters":[],"src":"2802:0:33"},"scope":3246,"src":"2758:163:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1638,"nodeType":"Block","src":"3052:114:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1632,"name":"IERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1442,"src":"3124:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1442_$","typeString":"type(contract IERC721Metadata)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Metadata_$1442_$","typeString":"type(contract IERC721Metadata)"}],"id":1631,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3119:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3119:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Metadata_$1442","typeString":"type(contract IERC721Metadata)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3141:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"3119:33:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3154:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1626,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3062:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3088:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3062:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1629,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1630,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3097:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3062:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3062:97:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1637,"nodeType":"ExpressionStatement","src":"3062:97:33"}]},"documentation":{"id":1623,"nodeType":"StructuredDocumentation","src":"2927:81:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Metadata."},"id":1639,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Metadata","nameLocation":"3022:18:33","nodeType":"FunctionDefinition","parameters":{"id":1624,"nodeType":"ParameterList","parameters":[],"src":"3040:2:33"},"returnParameters":{"id":1625,"nodeType":"ParameterList","parameters":[],"src":"3052:0:33"},"scope":3246,"src":"3013:153:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1655,"nodeType":"Block","src":"3297:114:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1649,"name":"IERC721Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1473,"src":"3369:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1473_$","typeString":"type(contract IERC721Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Mintable_$1473_$","typeString":"type(contract IERC721Mintable)"}],"id":1648,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3364:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Mintable_$1473","typeString":"type(contract IERC721Mintable)"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3386:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"3364:33:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1652,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3399:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1643,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3307:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1645,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3333:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3307:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1646,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1647,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3342:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3307:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3307:97:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1654,"nodeType":"ExpressionStatement","src":"3307:97:33"}]},"documentation":{"id":1640,"nodeType":"StructuredDocumentation","src":"3172:81:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Mintable."},"id":1656,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Mintable","nameLocation":"3267:18:33","nodeType":"FunctionDefinition","parameters":{"id":1641,"nodeType":"ParameterList","parameters":[],"src":"3285:2:33"},"returnParameters":{"id":1642,"nodeType":"ParameterList","parameters":[],"src":"3297:0:33"},"scope":3246,"src":"3258:153:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1672,"nodeType":"Block","src":"3548:117:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1666,"name":"IERC721Deliverable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1418,"src":"3620:18:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1418_$","typeString":"type(contract IERC721Deliverable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Deliverable_$1418_$","typeString":"type(contract IERC721Deliverable)"}],"id":1665,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3615:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3615:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Deliverable_$1418","typeString":"type(contract IERC721Deliverable)"}},"id":1668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3640:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"3615:36:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1669,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3653:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1660,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3558:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3584:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3558:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3593:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3558:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3558:100:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1671,"nodeType":"ExpressionStatement","src":"3558:100:33"}]},"documentation":{"id":1657,"nodeType":"StructuredDocumentation","src":"3417:84:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable."},"id":1673,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Deliverable","nameLocation":"3515:21:33","nodeType":"FunctionDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[],"src":"3536:2:33"},"returnParameters":{"id":1659,"nodeType":"ParameterList","parameters":[],"src":"3548:0:33"},"scope":3246,"src":"3506:159:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1689,"nodeType":"Block","src":"3796:114:33","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1683,"name":"IERC721Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1404,"src":"3868:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1404_$","typeString":"type(contract IERC721Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC721Burnable_$1404_$","typeString":"type(contract IERC721Burnable)"}],"id":1682,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3863:4:33","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1684,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3863:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC721Burnable_$1404","typeString":"type(contract IERC721Burnable)"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3885:11:33","memberName":"interfaceId","nodeType":"MemberAccess","src":"3863:33:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1686,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3898:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1677,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1000,"src":"3806:25:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$1000_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3832:6:33","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":999,"src":"3806:32:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1680,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$910_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1681,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3841:21:33","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":953,"src":"3806:56:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$910_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$910_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1687,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3806:97:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1688,"nodeType":"ExpressionStatement","src":"3806:97:33"}]},"documentation":{"id":1674,"nodeType":"StructuredDocumentation","src":"3671:81:33","text":"@notice Marks the following ERC165 interface(s) as supported: ERC721Burnable."},"id":1690,"implemented":true,"kind":"function","modifiers":[],"name":"initERC721Burnable","nameLocation":"3766:18:33","nodeType":"FunctionDefinition","parameters":{"id":1675,"nodeType":"ParameterList","parameters":[],"src":"3784:2:33"},"returnParameters":{"id":1676,"nodeType":"ParameterList","parameters":[],"src":"3796:0:33"},"scope":3246,"src":"3757:153:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1807,"nodeType":"Block","src":"4714:963:33","statements":[{"assignments":[1704],"declarations":[{"constant":false,"id":1704,"mutability":"mutable","name":"owner","nameLocation":"4732:5:33","nodeType":"VariableDeclaration","scope":1807,"src":"4724:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1703,"name":"uint256","nodeType":"ElementaryTypeName","src":"4724:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1709,"initialValue":{"baseExpression":{"expression":{"id":1705,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4740:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4742:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"4740:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1708,"indexExpression":{"id":1707,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"4749:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4740:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4724:33:33"},{"condition":{"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4771:20:33","subExpression":{"arguments":[{"id":1711,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"4785:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1710,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"4772:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4772:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1718,"nodeType":"IfStatement","src":"4767:64:33","trueBody":{"errorCall":{"arguments":[{"id":1715,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"4823:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1714,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"4800:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4800:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1717,"nodeType":"RevertStatement","src":"4793:38:33"}},{"assignments":[1720],"declarations":[{"constant":false,"id":1720,"mutability":"mutable","name":"ownerAddress","nameLocation":"4849:12:33","nodeType":"VariableDeclaration","scope":1807,"src":"4841:20:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1719,"name":"address","nodeType":"ElementaryTypeName","src":"4841:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1724,"initialValue":{"arguments":[{"id":1722,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"4876:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1721,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"4864:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4864:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4841:41:33"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1725,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"4896:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1726,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"4902:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4896:18:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1732,"nodeType":"IfStatement","src":"4892:63:33","trueBody":{"errorCall":{"arguments":[{"id":1729,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"4942:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1728,"name":"ERC721SelfApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1188,"src":"4923:18:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4923:32:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1731,"nodeType":"RevertStatement","src":"4916:39:33"}},{"condition":{"id":1738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4969:39:33","subExpression":{"arguments":[{"id":1734,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4984:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":1735,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"4987:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1736,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"5001:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1733,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"4970:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":1737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4970:38:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1745,"nodeType":"IfStatement","src":"4965:111:33","trueBody":{"errorCall":{"arguments":[{"id":1740,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1696,"src":"5046:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1741,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"5054:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1742,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5068:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1739,"name":"ERC721NonApprovedForApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1202,"src":"5017:28:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":1743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5017:59:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1744,"nodeType":"RevertStatement","src":"5010:66:33"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1751,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1746,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5090:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1749,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5104:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1748,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5096:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1747,"name":"address","nodeType":"ElementaryTypeName","src":"5096:7:33","typeDescriptions":{}}},"id":1750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5096:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5090:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1799,"nodeType":"Block","src":"5311:310:33","statements":[{"assignments":[1773],"declarations":[{"constant":false,"id":1773,"mutability":"mutable","name":"ownerWithApprovalBit","nameLocation":"5333:20:33","nodeType":"VariableDeclaration","scope":1799,"src":"5325:28:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1772,"name":"uint256","nodeType":"ElementaryTypeName","src":"5325:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1777,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1774,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"5356:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"|","rightExpression":{"id":1775,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"5364:25:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5356:33:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5325:64:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1780,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1778,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"5407:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1779,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"5416:20:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5407:29:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1790,"nodeType":"IfStatement","src":"5403:169:33","trueBody":{"id":1789,"nodeType":"Block","src":"5438:134:33","statements":[{"expression":{"id":1787,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1781,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"5517:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1784,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5519:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"5517:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1785,"indexExpression":{"id":1783,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5526:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5517:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1786,"name":"ownerWithApprovalBit","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1773,"src":"5537:20:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5517:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1788,"nodeType":"ExpressionStatement","src":"5517:40:33"}]}},{"expression":{"id":1797,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1791,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"5585:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1794,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5587:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"5585:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1795,"indexExpression":{"id":1793,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5597:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5585:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1796,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5608:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5585:25:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1798,"nodeType":"ExpressionStatement","src":"5585:25:33"}]},"id":1800,"nodeType":"IfStatement","src":"5086:535:33","trueBody":{"id":1771,"nodeType":"Block","src":"5108:197:33","statements":[{"condition":{"arguments":[{"id":1753,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1704,"src":"5144:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1752,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"5126:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5126:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1770,"nodeType":"IfStatement","src":"5122:173:33","trueBody":{"id":1769,"nodeType":"Block","src":"5152:143:33","statements":[{"expression":{"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1755,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"5230:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5232:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"5230:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1759,"indexExpression":{"id":1757,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5239:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5230:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1764,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"5266:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1763,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5258:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1762,"name":"uint160","nodeType":"ElementaryTypeName","src":"5258:7:33","typeDescriptions":{}}},"id":1765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5258:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1761,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5250:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1760,"name":"uint256","nodeType":"ElementaryTypeName","src":"5250:7:33","typeDescriptions":{}}},"id":1766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5250:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5230:50:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1768,"nodeType":"ExpressionStatement","src":"5230:50:33"}]}}]}},{"eventCall":{"arguments":[{"id":1802,"name":"ownerAddress","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1720,"src":"5644:12:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1803,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1698,"src":"5658:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1804,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1700,"src":"5662:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1801,"name":"Approval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1273,"src":"5635:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5635:35:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1806,"nodeType":"EmitStatement","src":"5630:40:33"}]},"documentation":{"id":1691,"nodeType":"StructuredDocumentation","src":"3916:704:33","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: This function implements {ERC721-approve(address,uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\n @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param sender The message sender.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"id":1808,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4634:7:33","nodeType":"FunctionDefinition","parameters":{"id":1701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1694,"mutability":"mutable","name":"s","nameLocation":"4657:1:33","nodeType":"VariableDeclaration","scope":1808,"src":"4642:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":1693,"nodeType":"UserDefinedTypeName","pathNode":{"id":1692,"name":"Layout","nameLocations":["4642:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"4642:6:33"},"referencedDeclaration":1562,"src":"4642:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":1696,"mutability":"mutable","name":"sender","nameLocation":"4668:6:33","nodeType":"VariableDeclaration","scope":1808,"src":"4660:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1695,"name":"address","nodeType":"ElementaryTypeName","src":"4660:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1698,"mutability":"mutable","name":"to","nameLocation":"4684:2:33","nodeType":"VariableDeclaration","scope":1808,"src":"4676:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1697,"name":"address","nodeType":"ElementaryTypeName","src":"4676:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1700,"mutability":"mutable","name":"tokenId","nameLocation":"4696:7:33","nodeType":"VariableDeclaration","scope":1808,"src":"4688:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1699,"name":"uint256","nodeType":"ElementaryTypeName","src":"4688:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4641:63:33"},"returnParameters":{"id":1702,"nodeType":"ParameterList","parameters":[],"src":"4714:0:33"},"scope":3246,"src":"4625:1052:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1845,"nodeType":"Block","src":"6290:187:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1821,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"6304:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":1822,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6316:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6304:18:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1828,"nodeType":"IfStatement","src":"6300:63:33","trueBody":{"errorCall":{"arguments":[{"id":1825,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6356:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1824,"name":"ERC721SelfApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1193,"src":"6331:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":1826,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6331:32:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1827,"nodeType":"RevertStatement","src":"6324:39:33"}},{"expression":{"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":1829,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1812,"src":"6373:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1833,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6375:9:33","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1561,"src":"6373:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":1834,"indexExpression":{"id":1831,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6385:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6373:19:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":1835,"indexExpression":{"id":1832,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"6393:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6373:29:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1836,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6405:8:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6373:40:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1838,"nodeType":"ExpressionStatement","src":"6373:40:33"},{"eventCall":{"arguments":[{"id":1840,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6443:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1841,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1816,"src":"6451:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1842,"name":"approved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1818,"src":"6461:8:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"}],"id":1839,"name":"ApprovalForAll","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1282,"src":"6428:14:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_bool_$returns$__$","typeString":"function (address,address,bool)"}},"id":1843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6428:42:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1844,"nodeType":"EmitStatement","src":"6423:47:33"}]},"documentation":{"id":1809,"nodeType":"StructuredDocumentation","src":"5683:499:33","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\n @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param sender The message sender.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"id":1846,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"6196:17:33","nodeType":"FunctionDefinition","parameters":{"id":1819,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"s","nameLocation":"6229:1:33","nodeType":"VariableDeclaration","scope":1846,"src":"6214:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":1811,"nodeType":"UserDefinedTypeName","pathNode":{"id":1810,"name":"Layout","nameLocations":["6214:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"6214:6:33"},"referencedDeclaration":1562,"src":"6214:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":1814,"mutability":"mutable","name":"sender","nameLocation":"6240:6:33","nodeType":"VariableDeclaration","scope":1846,"src":"6232:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1813,"name":"address","nodeType":"ElementaryTypeName","src":"6232:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1816,"mutability":"mutable","name":"operator","nameLocation":"6256:8:33","nodeType":"VariableDeclaration","scope":1846,"src":"6248:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1815,"name":"address","nodeType":"ElementaryTypeName","src":"6248:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1818,"mutability":"mutable","name":"approved","nameLocation":"6271:8:33","nodeType":"VariableDeclaration","scope":1846,"src":"6266:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1817,"name":"bool","nodeType":"ElementaryTypeName","src":"6266:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6213:67:33"},"returnParameters":{"id":1820,"nodeType":"ParameterList","parameters":[],"src":"6290:0:33"},"scope":3246,"src":"6187:290:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1962,"nodeType":"Block","src":"7458:848:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1866,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1861,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"7472:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1864,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7486:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1863,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7478:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1862,"name":"address","nodeType":"ElementaryTypeName","src":"7478:7:33","typeDescriptions":{}}},"id":1865,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7478:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7472:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1870,"nodeType":"IfStatement","src":"7468:58:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1867,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"7497:27:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7497:29:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1869,"nodeType":"RevertStatement","src":"7490:36:33"}},{"assignments":[1872],"declarations":[{"constant":false,"id":1872,"mutability":"mutable","name":"owner","nameLocation":"7545:5:33","nodeType":"VariableDeclaration","scope":1962,"src":"7537:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"7537:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1877,"initialValue":{"baseExpression":{"expression":{"id":1873,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"7553:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1874,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7555:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"7553:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1876,"indexExpression":{"id":1875,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7562:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7553:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7537:33:33"},{"condition":{"id":1881,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7584:20:33","subExpression":{"arguments":[{"id":1879,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"7598:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1878,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"7585:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7585:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1886,"nodeType":"IfStatement","src":"7580:64:33","trueBody":{"errorCall":{"arguments":[{"id":1883,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7636:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1882,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"7613:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7613:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1885,"nodeType":"RevertStatement","src":"7606:38:33"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1891,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1888,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"7670:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1887,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"7658:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":1889,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7658:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1890,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"7680:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7658:26:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1897,"nodeType":"IfStatement","src":"7654:73:33","trueBody":{"errorCall":{"arguments":[{"id":1893,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"7713:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1894,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7719:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1892,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"7693:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":1895,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7693:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1896,"nodeType":"RevertStatement","src":"7686:41:33"}},{"condition":{"id":1903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7742:31:33","subExpression":{"arguments":[{"id":1899,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"7757:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":1900,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"7760:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1901,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"7766:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":1898,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"7743:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":1902,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7743:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1923,"nodeType":"IfStatement","src":"7738:185:33","trueBody":{"id":1922,"nodeType":"Block","src":"7775:148:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1914,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7793:25:33","subExpression":{"arguments":[{"id":1905,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1872,"src":"7812:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1904,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"7794:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":1906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7794:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1908,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"7822:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":1909,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"7832:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1910,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7834:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"7832:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1912,"indexExpression":{"id":1911,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7844:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7832:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7822:30:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"7793:59:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1921,"nodeType":"IfStatement","src":"7789:123:33","trueBody":{"errorCall":{"arguments":[{"id":1916,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1852,"src":"7890:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1917,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"7898:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1918,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7904:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1915,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"7861:28:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":1919,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7861:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1920,"nodeType":"RevertStatement","src":"7854:58:33"}}]}},{"expression":{"id":1936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":1924,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"7933:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7935:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"7933:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":1928,"indexExpression":{"id":1926,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"7942:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7933:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":1933,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"7969:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1932,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7961:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1931,"name":"uint160","nodeType":"ElementaryTypeName","src":"7961:7:33","typeDescriptions":{}}},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7961:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1930,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7953:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1929,"name":"uint256","nodeType":"ElementaryTypeName","src":"7953:7:33","typeDescriptions":{}}},"id":1935,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7953:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7933:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1937,"nodeType":"ExpressionStatement","src":"7933:40:33"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1940,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1938,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"7987:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1939,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"7995:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7987:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1955,"nodeType":"IfStatement","src":"7983:274:33","trueBody":{"id":1954,"nodeType":"Block","src":"7999:258:33","statements":[{"id":1953,"nodeType":"UncheckedBlock","src":"8013:234:33","statements":[{"expression":{"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"8118:18:33","subExpression":{"baseExpression":{"expression":{"id":1941,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"8120:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1942,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8122:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"8120:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1944,"indexExpression":{"id":1943,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"8131:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8120:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1946,"nodeType":"ExpressionStatement","src":"8118:18:33"},{"expression":{"id":1951,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8216:16:33","subExpression":{"baseExpression":{"expression":{"id":1947,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1850,"src":"8218:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1948,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8220:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"8218:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":1950,"indexExpression":{"id":1949,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"8229:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8218:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1952,"nodeType":"ExpressionStatement","src":"8216:16:33"}]}]}},{"eventCall":{"arguments":[{"id":1957,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"8281:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1958,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1856,"src":"8287:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1959,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1858,"src":"8291:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1956,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"8272:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8272:27:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1961,"nodeType":"EmitStatement","src":"8267:32:33"}]},"documentation":{"id":1847,"nodeType":"StructuredDocumentation","src":"6483:862:33","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":1963,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"7359:12:33","nodeType":"FunctionDefinition","parameters":{"id":1859,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"s","nameLocation":"7387:1:33","nodeType":"VariableDeclaration","scope":1963,"src":"7372:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":1849,"nodeType":"UserDefinedTypeName","pathNode":{"id":1848,"name":"Layout","nameLocations":["7372:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"7372:6:33"},"referencedDeclaration":1562,"src":"7372:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"sender","nameLocation":"7398:6:33","nodeType":"VariableDeclaration","scope":1963,"src":"7390:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1851,"name":"address","nodeType":"ElementaryTypeName","src":"7390:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1854,"mutability":"mutable","name":"from","nameLocation":"7414:4:33","nodeType":"VariableDeclaration","scope":1963,"src":"7406:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1853,"name":"address","nodeType":"ElementaryTypeName","src":"7406:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1856,"mutability":"mutable","name":"to","nameLocation":"7428:2:33","nodeType":"VariableDeclaration","scope":1963,"src":"7420:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1855,"name":"address","nodeType":"ElementaryTypeName","src":"7420:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1858,"mutability":"mutable","name":"tokenId","nameLocation":"7440:7:33","nodeType":"VariableDeclaration","scope":1963,"src":"7432:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1857,"name":"uint256","nodeType":"ElementaryTypeName","src":"7432:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7371:77:33"},"returnParameters":{"id":1860,"nodeType":"ParameterList","parameters":[],"src":"7458:0:33"},"scope":3246,"src":"7350:956:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2000,"nodeType":"Block","src":"9590:165:33","statements":[{"expression":{"arguments":[{"id":1981,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"9615:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1982,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"9623:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1983,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"9629:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1984,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"9633:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1978,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1967,"src":"9600:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":1980,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9602:12:33","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1963,"src":"9600:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":1985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9600:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1986,"nodeType":"ExpressionStatement","src":"9600:41:33"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1987,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"9655:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9658:10:33","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"9655:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9655:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1999,"nodeType":"IfStatement","src":"9651:98:33","trueBody":{"id":1998,"nodeType":"Block","src":"9672:77:33","statements":[{"expression":{"arguments":[{"id":1991,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1969,"src":"9708:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1992,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"9716:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1993,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1973,"src":"9722:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1994,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1975,"src":"9726:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":1995,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9735:2:33","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"id":1990,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"9686:21:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":1996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9686:52:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1997,"nodeType":"ExpressionStatement","src":"9686:52:33"}]}}]},"documentation":{"id":1964,"nodeType":"StructuredDocumentation","src":"8312:1161:33","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"id":2001,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"9487:16:33","nodeType":"FunctionDefinition","parameters":{"id":1976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1967,"mutability":"mutable","name":"s","nameLocation":"9519:1:33","nodeType":"VariableDeclaration","scope":2001,"src":"9504:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":1966,"nodeType":"UserDefinedTypeName","pathNode":{"id":1965,"name":"Layout","nameLocations":["9504:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"9504:6:33"},"referencedDeclaration":1562,"src":"9504:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":1969,"mutability":"mutable","name":"sender","nameLocation":"9530:6:33","nodeType":"VariableDeclaration","scope":2001,"src":"9522:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1968,"name":"address","nodeType":"ElementaryTypeName","src":"9522:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1971,"mutability":"mutable","name":"from","nameLocation":"9546:4:33","nodeType":"VariableDeclaration","scope":2001,"src":"9538:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1970,"name":"address","nodeType":"ElementaryTypeName","src":"9538:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1973,"mutability":"mutable","name":"to","nameLocation":"9560:2:33","nodeType":"VariableDeclaration","scope":2001,"src":"9552:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1972,"name":"address","nodeType":"ElementaryTypeName","src":"9552:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1975,"mutability":"mutable","name":"tokenId","nameLocation":"9572:7:33","nodeType":"VariableDeclaration","scope":2001,"src":"9564:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1974,"name":"uint256","nodeType":"ElementaryTypeName","src":"9564:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9503:77:33"},"returnParameters":{"id":1977,"nodeType":"ParameterList","parameters":[],"src":"9590:0:33"},"scope":3246,"src":"9478:277:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2040,"nodeType":"Block","src":"11138:167:33","statements":[{"expression":{"arguments":[{"id":2021,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"11163:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2022,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"11171:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2023,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11177:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2024,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"11181:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2018,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2005,"src":"11148:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2020,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11150:12:33","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":1963,"src":"11148:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address,address,uint256)"}},"id":2025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11148:41:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2026,"nodeType":"ExpressionStatement","src":"11148:41:33"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2027,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11203:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2028,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11206:10:33","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"11203:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2029,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11203:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2039,"nodeType":"IfStatement","src":"11199:100:33","trueBody":{"id":2038,"nodeType":"Block","src":"11220:79:33","statements":[{"expression":{"arguments":[{"id":2031,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2007,"src":"11256:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2032,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2009,"src":"11264:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2033,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2011,"src":"11270:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2034,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2013,"src":"11274:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2035,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2015,"src":"11283:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":2030,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"11234:21:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11234:54:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2037,"nodeType":"ExpressionStatement","src":"11234:54:33"}]}}]},"documentation":{"id":2002,"nodeType":"StructuredDocumentation","src":"9761:1239:33","text":"@notice Safely transfers the ownership of a token to a recipient by a sender.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param sender The message sender.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"id":2041,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"11014:16:33","nodeType":"FunctionDefinition","parameters":{"id":2016,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2005,"mutability":"mutable","name":"s","nameLocation":"11046:1:33","nodeType":"VariableDeclaration","scope":2041,"src":"11031:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2004,"nodeType":"UserDefinedTypeName","pathNode":{"id":2003,"name":"Layout","nameLocations":["11031:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"11031:6:33"},"referencedDeclaration":1562,"src":"11031:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2007,"mutability":"mutable","name":"sender","nameLocation":"11057:6:33","nodeType":"VariableDeclaration","scope":2041,"src":"11049:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2006,"name":"address","nodeType":"ElementaryTypeName","src":"11049:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2009,"mutability":"mutable","name":"from","nameLocation":"11073:4:33","nodeType":"VariableDeclaration","scope":2041,"src":"11065:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2008,"name":"address","nodeType":"ElementaryTypeName","src":"11065:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2011,"mutability":"mutable","name":"to","nameLocation":"11087:2:33","nodeType":"VariableDeclaration","scope":2041,"src":"11079:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2010,"name":"address","nodeType":"ElementaryTypeName","src":"11079:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2013,"mutability":"mutable","name":"tokenId","nameLocation":"11099:7:33","nodeType":"VariableDeclaration","scope":2041,"src":"11091:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2012,"name":"uint256","nodeType":"ElementaryTypeName","src":"11091:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2015,"mutability":"mutable","name":"data","nameLocation":"11123:4:33","nodeType":"VariableDeclaration","scope":2041,"src":"11108:19:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2014,"name":"bytes","nodeType":"ElementaryTypeName","src":"11108:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"11030:98:33"},"returnParameters":{"id":2017,"nodeType":"ParameterList","parameters":[],"src":"11138:0:33"},"scope":3246,"src":"11005:300:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2192,"nodeType":"Block","src":"12362:1084:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2062,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2057,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"12376:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12390:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2059,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"12382:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2058,"name":"address","nodeType":"ElementaryTypeName","src":"12382:7:33","typeDescriptions":{}}},"id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12382:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12376:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2066,"nodeType":"IfStatement","src":"12372:58:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2063,"name":"ERC721TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"12401:27:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2064,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12401:29:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2065,"nodeType":"RevertStatement","src":"12394:36:33"}},{"assignments":[2068],"declarations":[{"constant":false,"id":2068,"mutability":"mutable","name":"operatable","nameLocation":"12445:10:33","nodeType":"VariableDeclaration","scope":2192,"src":"12440:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2067,"name":"bool","nodeType":"ElementaryTypeName","src":"12440:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2074,"initialValue":{"arguments":[{"id":2070,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"12472:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2071,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"12475:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2072,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12481:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2069,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"12458:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2073,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12458:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"12440:48:33"},{"assignments":[2076],"declarations":[{"constant":false,"id":2076,"mutability":"mutable","name":"length","nameLocation":"12507:6:33","nodeType":"VariableDeclaration","scope":2192,"src":"12499:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2075,"name":"uint256","nodeType":"ElementaryTypeName","src":"12499:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2079,"initialValue":{"expression":{"id":2077,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"12516:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2078,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12525:6:33","memberName":"length","nodeType":"MemberAccess","src":"12516:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12499:32:33"},{"body":{"id":2164,"nodeType":"Block","src":"12574:552:33","statements":[{"assignments":[2090],"declarations":[{"constant":false,"id":2090,"mutability":"mutable","name":"tokenId","nameLocation":"12596:7:33","nodeType":"VariableDeclaration","scope":2164,"src":"12588:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2089,"name":"uint256","nodeType":"ElementaryTypeName","src":"12588:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2094,"initialValue":{"baseExpression":{"id":2091,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"12606:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2093,"indexExpression":{"id":2092,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"12615:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12606:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12588:29:33"},{"assignments":[2096],"declarations":[{"constant":false,"id":2096,"mutability":"mutable","name":"owner","nameLocation":"12639:5:33","nodeType":"VariableDeclaration","scope":2164,"src":"12631:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2095,"name":"uint256","nodeType":"ElementaryTypeName","src":"12631:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2101,"initialValue":{"baseExpression":{"expression":{"id":2097,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"12647:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2098,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12649:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"12647:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2100,"indexExpression":{"id":2099,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"12656:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12647:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12631:33:33"},{"condition":{"id":2105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12682:20:33","subExpression":{"arguments":[{"id":2103,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"12696:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2102,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"12683:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12683:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2110,"nodeType":"IfStatement","src":"12678:64:33","trueBody":{"errorCall":{"arguments":[{"id":2107,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"12734:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2106,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"12711:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12711:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2109,"nodeType":"RevertStatement","src":"12704:38:33"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2112,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"12772:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2111,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"12760:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12760:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2114,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"12782:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12760:26:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2121,"nodeType":"IfStatement","src":"12756:73:33","trueBody":{"errorCall":{"arguments":[{"id":2117,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"12815:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2118,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"12821:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2116,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"12795:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12795:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2120,"nodeType":"RevertStatement","src":"12788:41:33"}},{"condition":{"id":2123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12847:11:33","subExpression":{"id":2122,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2068,"src":"12848:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2143,"nodeType":"IfStatement","src":"12843:173:33","trueBody":{"id":2142,"nodeType":"Block","src":"12860:156:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"12882:25:33","subExpression":{"arguments":[{"id":2125,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2096,"src":"12901:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2124,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"12883:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12883:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2128,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12911:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2129,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"12921:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2130,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12923:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"12921:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2132,"indexExpression":{"id":2131,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"12933:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12921:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"12911:30:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12882:59:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2141,"nodeType":"IfStatement","src":"12878:123:33","trueBody":{"errorCall":{"arguments":[{"id":2136,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2047,"src":"12979:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2137,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"12987:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2138,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"12993:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2135,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"12950:28:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2139,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12950:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2140,"nodeType":"RevertStatement","src":"12943:58:33"}}]}},{"expression":{"id":2156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2144,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"13029:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13031:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"13029:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2148,"indexExpression":{"id":2146,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"13038:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13029:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2153,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"13065:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2152,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13057:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2151,"name":"uint160","nodeType":"ElementaryTypeName","src":"13057:7:33","typeDescriptions":{}}},"id":2154,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13057:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2150,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13049:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2149,"name":"uint256","nodeType":"ElementaryTypeName","src":"13049:7:33","typeDescriptions":{}}},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13049:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13029:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2157,"nodeType":"ExpressionStatement","src":"13029:40:33"},{"eventCall":{"arguments":[{"id":2159,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"13097:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2160,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"13103:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2161,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2090,"src":"13107:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2158,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"13088:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2162,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13088:27:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2163,"nodeType":"EmitStatement","src":"13083:32:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2083,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"12557:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2084,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"12561:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12557:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2165,"initializationExpression":{"assignments":[2081],"declarations":[{"constant":false,"id":2081,"mutability":"mutable","name":"i","nameLocation":"12554:1:33","nodeType":"VariableDeclaration","scope":2165,"src":"12546:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2080,"name":"uint256","nodeType":"ElementaryTypeName","src":"12546:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2082,"nodeType":"VariableDeclarationStatement","src":"12546:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"12569:3:33","subExpression":{"id":2086,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2081,"src":"12571:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2088,"nodeType":"ExpressionStatement","src":"12569:3:33"},"nodeType":"ForStatement","src":"12541:585:33"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2168,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2166,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"13140:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2167,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"13148:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"13140:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2171,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2169,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"13154:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2170,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13164:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13154:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"13140:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2191,"nodeType":"IfStatement","src":"13136:304:33","trueBody":{"id":2190,"nodeType":"Block","src":"13167:273:33","statements":[{"id":2189,"nodeType":"UncheckedBlock","src":"13181:249:33","statements":[{"expression":{"id":2179,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2173,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"13286:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2176,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13288:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"13286:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2177,"indexExpression":{"id":2175,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2049,"src":"13297:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13286:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2178,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"13306:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13286:26:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2180,"nodeType":"ExpressionStatement","src":"13286:26:33"},{"expression":{"id":2187,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2181,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2045,"src":"13391:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2184,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13393:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"13391:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2185,"indexExpression":{"id":2183,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2051,"src":"13402:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"13391:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2186,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2076,"src":"13409:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13391:24:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2188,"nodeType":"ExpressionStatement","src":"13391:24:33"}]}]}}]},"documentation":{"id":2042,"nodeType":"StructuredDocumentation","src":"11311:921:33","text":"@notice Unsafely transfers a batch of tokens to a recipient by a sender.\n @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\n @dev Resets the token approval for each of `tokenIds`.\n @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event for each of `tokenIds`.\n @param sender The message sender.\n @param from Current tokens owner.\n @param to Address of the new token owner.\n @param tokenIds Identifiers of the tokens to transfer."},"id":2193,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"12246:17:33","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2045,"mutability":"mutable","name":"s","nameLocation":"12279:1:33","nodeType":"VariableDeclaration","scope":2193,"src":"12264:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2044,"nodeType":"UserDefinedTypeName","pathNode":{"id":2043,"name":"Layout","nameLocations":["12264:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"12264:6:33"},"referencedDeclaration":1562,"src":"12264:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2047,"mutability":"mutable","name":"sender","nameLocation":"12290:6:33","nodeType":"VariableDeclaration","scope":2193,"src":"12282:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2046,"name":"address","nodeType":"ElementaryTypeName","src":"12282:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2049,"mutability":"mutable","name":"from","nameLocation":"12306:4:33","nodeType":"VariableDeclaration","scope":2193,"src":"12298:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2048,"name":"address","nodeType":"ElementaryTypeName","src":"12298:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2051,"mutability":"mutable","name":"to","nameLocation":"12320:2:33","nodeType":"VariableDeclaration","scope":2193,"src":"12312:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2050,"name":"address","nodeType":"ElementaryTypeName","src":"12312:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2054,"mutability":"mutable","name":"tokenIds","nameLocation":"12343:8:33","nodeType":"VariableDeclaration","scope":2193,"src":"12324:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2052,"name":"uint256","nodeType":"ElementaryTypeName","src":"12324:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2053,"nodeType":"ArrayTypeName","src":"12324:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"12263:89:33"},"returnParameters":{"id":2056,"nodeType":"ParameterList","parameters":[],"src":"12362:0:33"},"scope":3246,"src":"12237:1209:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2255,"nodeType":"Block","src":"14068:390:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2204,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"14082:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14096:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14088:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2205,"name":"address","nodeType":"ElementaryTypeName","src":"14088:7:33","typeDescriptions":{}}},"id":2208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14088:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14082:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2213,"nodeType":"IfStatement","src":"14078:54:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2210,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"14107:23:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14107:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2212,"nodeType":"RevertStatement","src":"14100:32:33"}},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2215,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"14159:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14161:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"14159:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2218,"indexExpression":{"id":2217,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"14168:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14159:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2214,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"14146:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14146:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2224,"nodeType":"IfStatement","src":"14142:72:33","trueBody":{"errorCall":{"arguments":[{"id":2221,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"14206:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2220,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"14186:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14186:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2223,"nodeType":"RevertStatement","src":"14179:35:33"}},{"expression":{"id":2237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2225,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"14225:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2228,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14227:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"14225:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2229,"indexExpression":{"id":2227,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"14234:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14225:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2234,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"14261:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2233,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14253:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2232,"name":"uint160","nodeType":"ElementaryTypeName","src":"14253:7:33","typeDescriptions":{}}},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14253:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2231,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14245:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2230,"name":"uint256","nodeType":"ElementaryTypeName","src":"14245:7:33","typeDescriptions":{}}},"id":2236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14245:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14225:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2238,"nodeType":"ExpressionStatement","src":"14225:40:33"},{"id":2245,"nodeType":"UncheckedBlock","src":"14276:127:33","statements":[{"expression":{"id":2243,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"14376:16:33","subExpression":{"baseExpression":{"expression":{"id":2239,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2197,"src":"14378:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2240,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14380:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"14378:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2242,"indexExpression":{"id":2241,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"14389:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14378:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2244,"nodeType":"ExpressionStatement","src":"14376:16:33"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14435:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2248,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14427:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2247,"name":"address","nodeType":"ElementaryTypeName","src":"14427:7:33","typeDescriptions":{}}},"id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14427:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2251,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2199,"src":"14439:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2252,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"14443:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2246,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"14418:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14418:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2254,"nodeType":"EmitStatement","src":"14413:38:33"}]},"documentation":{"id":2194,"nodeType":"StructuredDocumentation","src":"13452:541:33","text":"@notice Unsafely mints a token.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2256,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"14007:4:33","nodeType":"FunctionDefinition","parameters":{"id":2202,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2197,"mutability":"mutable","name":"s","nameLocation":"14027:1:33","nodeType":"VariableDeclaration","scope":2256,"src":"14012:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2196,"nodeType":"UserDefinedTypeName","pathNode":{"id":2195,"name":"Layout","nameLocations":["14012:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"14012:6:33"},"referencedDeclaration":1562,"src":"14012:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2199,"mutability":"mutable","name":"to","nameLocation":"14038:2:33","nodeType":"VariableDeclaration","scope":2256,"src":"14030:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2198,"name":"address","nodeType":"ElementaryTypeName","src":"14030:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2201,"mutability":"mutable","name":"tokenId","nameLocation":"14050:7:33","nodeType":"VariableDeclaration","scope":2256,"src":"14042:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2200,"name":"uint256","nodeType":"ElementaryTypeName","src":"14042:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"14011:47:33"},"returnParameters":{"id":2203,"nodeType":"ParameterList","parameters":[],"src":"14068:0:33"},"scope":3246,"src":"13998:460:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2294,"nodeType":"Block","src":"15502:151:33","statements":[{"expression":{"arguments":[{"id":2274,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"15519:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2275,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"15523:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2271,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2260,"src":"15512:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2273,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15514:4:33","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2256,"src":"15512:6:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2276,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15512:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2277,"nodeType":"ExpressionStatement","src":"15512:19:33"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2278,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"15545:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2279,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15548:10:33","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"15545:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15545:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2293,"nodeType":"IfStatement","src":"15541:106:33","trueBody":{"id":2292,"nodeType":"Block","src":"15562:85:33","statements":[{"expression":{"arguments":[{"id":2282,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2262,"src":"15598:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2285,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15614:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2284,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"15606:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2283,"name":"address","nodeType":"ElementaryTypeName","src":"15606:7:33","typeDescriptions":{}}},"id":2286,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15606:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2287,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2264,"src":"15618:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2288,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2266,"src":"15622:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2289,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2268,"src":"15631:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2281,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"15576:21:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15576:60:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2291,"nodeType":"ExpressionStatement","src":"15576:60:33"}]}}]},"documentation":{"id":2257,"nodeType":"StructuredDocumentation","src":"14464:924:33","text":"@notice Safely mints a token.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2295,"implemented":true,"kind":"function","modifiers":[],"name":"safeMint","nameLocation":"15402:8:33","nodeType":"FunctionDefinition","parameters":{"id":2269,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2260,"mutability":"mutable","name":"s","nameLocation":"15426:1:33","nodeType":"VariableDeclaration","scope":2295,"src":"15411:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2259,"nodeType":"UserDefinedTypeName","pathNode":{"id":2258,"name":"Layout","nameLocations":["15411:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"15411:6:33"},"referencedDeclaration":1562,"src":"15411:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2262,"mutability":"mutable","name":"sender","nameLocation":"15437:6:33","nodeType":"VariableDeclaration","scope":2295,"src":"15429:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2261,"name":"address","nodeType":"ElementaryTypeName","src":"15429:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2264,"mutability":"mutable","name":"to","nameLocation":"15453:2:33","nodeType":"VariableDeclaration","scope":2295,"src":"15445:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2263,"name":"address","nodeType":"ElementaryTypeName","src":"15445:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2266,"mutability":"mutable","name":"tokenId","nameLocation":"15465:7:33","nodeType":"VariableDeclaration","scope":2295,"src":"15457:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2265,"name":"uint256","nodeType":"ElementaryTypeName","src":"15457:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2268,"mutability":"mutable","name":"data","nameLocation":"15487:4:33","nodeType":"VariableDeclaration","scope":2295,"src":"15474:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2267,"name":"bytes","nodeType":"ElementaryTypeName","src":"15474:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"15410:82:33"},"returnParameters":{"id":2270,"nodeType":"ParameterList","parameters":[],"src":"15502:0:33"},"scope":3246,"src":"15393:260:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2382,"nodeType":"Block","src":"16352:472:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2307,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"16366:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16380:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16372:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2308,"name":"address","nodeType":"ElementaryTypeName","src":"16372:7:33","typeDescriptions":{}}},"id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16372:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"16366:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2316,"nodeType":"IfStatement","src":"16362:54:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2313,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"16391:23:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2314,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16391:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2315,"nodeType":"RevertStatement","src":"16384:32:33"}},{"assignments":[2318],"declarations":[{"constant":false,"id":2318,"mutability":"mutable","name":"length","nameLocation":"16435:6:33","nodeType":"VariableDeclaration","scope":2382,"src":"16427:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2317,"name":"uint256","nodeType":"ElementaryTypeName","src":"16427:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2321,"initialValue":{"expression":{"id":2319,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"16444:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"16453:6:33","memberName":"length","nodeType":"MemberAccess","src":"16444:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16427:32:33"},{"body":{"id":2371,"nodeType":"Block","src":"16502:247:33","statements":[{"assignments":[2332],"declarations":[{"constant":false,"id":2332,"mutability":"mutable","name":"tokenId","nameLocation":"16524:7:33","nodeType":"VariableDeclaration","scope":2371,"src":"16516:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2331,"name":"uint256","nodeType":"ElementaryTypeName","src":"16516:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2336,"initialValue":{"baseExpression":{"id":2333,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2304,"src":"16534:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2335,"indexExpression":{"id":2334,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"16543:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16534:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"16516:29:33"},{"condition":{"arguments":[{"baseExpression":{"expression":{"id":2338,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"16576:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2339,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16578:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"16576:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2341,"indexExpression":{"id":2340,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"16585:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"16576:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2337,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"16563:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2342,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16563:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2347,"nodeType":"IfStatement","src":"16559:72:33","trueBody":{"errorCall":{"arguments":[{"id":2344,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"16623:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2343,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"16603:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2345,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16603:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2346,"nodeType":"RevertStatement","src":"16596:35:33"}},{"expression":{"id":2360,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2348,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"16646:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2351,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16648:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"16646:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2352,"indexExpression":{"id":2350,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"16655:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16646:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2357,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"16682:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16674:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2355,"name":"uint160","nodeType":"ElementaryTypeName","src":"16674:7:33","typeDescriptions":{}}},"id":2358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16674:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2354,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16666:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2353,"name":"uint256","nodeType":"ElementaryTypeName","src":"16666:7:33","typeDescriptions":{}}},"id":2359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16666:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16646:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2361,"nodeType":"ExpressionStatement","src":"16646:40:33"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"16722:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"16714:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2363,"name":"address","nodeType":"ElementaryTypeName","src":"16714:7:33","typeDescriptions":{}}},"id":2366,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16714:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2367,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"16726:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2368,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2332,"src":"16730:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2362,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"16705:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"16705:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2370,"nodeType":"EmitStatement","src":"16700:38:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2327,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2325,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"16485:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2326,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"16489:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16485:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2372,"initializationExpression":{"assignments":[2323],"declarations":[{"constant":false,"id":2323,"mutability":"mutable","name":"i","nameLocation":"16482:1:33","nodeType":"VariableDeclaration","scope":2372,"src":"16474:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2322,"name":"uint256","nodeType":"ElementaryTypeName","src":"16474:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2324,"nodeType":"VariableDeclarationStatement","src":"16474:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"16497:3:33","subExpression":{"id":2328,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2323,"src":"16499:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2330,"nodeType":"ExpressionStatement","src":"16497:3:33"},"nodeType":"ForStatement","src":"16469:280:33"},{"id":2381,"nodeType":"UncheckedBlock","src":"16759:59:33","statements":[{"expression":{"id":2379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2373,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2299,"src":"16783:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2376,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"16785:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"16783:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2377,"indexExpression":{"id":2375,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2301,"src":"16794:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"16783:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2378,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2318,"src":"16801:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"16783:24:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2380,"nodeType":"ExpressionStatement","src":"16783:24:33"}]}]},"documentation":{"id":2296,"nodeType":"StructuredDocumentation","src":"15659:603:33","text":"@notice Unsafely mints a batch of tokens.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":2383,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"16276:9:33","nodeType":"FunctionDefinition","parameters":{"id":2305,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2299,"mutability":"mutable","name":"s","nameLocation":"16301:1:33","nodeType":"VariableDeclaration","scope":2383,"src":"16286:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2298,"nodeType":"UserDefinedTypeName","pathNode":{"id":2297,"name":"Layout","nameLocations":["16286:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"16286:6:33"},"referencedDeclaration":1562,"src":"16286:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2301,"mutability":"mutable","name":"to","nameLocation":"16312:2:33","nodeType":"VariableDeclaration","scope":2383,"src":"16304:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2300,"name":"address","nodeType":"ElementaryTypeName","src":"16304:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2304,"mutability":"mutable","name":"tokenIds","nameLocation":"16333:8:33","nodeType":"VariableDeclaration","scope":2383,"src":"16316:25:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2302,"name":"uint256","nodeType":"ElementaryTypeName","src":"16316:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2303,"nodeType":"ArrayTypeName","src":"16316:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"16285:57:33"},"returnParameters":{"id":2306,"nodeType":"ParameterList","parameters":[],"src":"16352:0:33"},"scope":3246,"src":"16267:557:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2431,"nodeType":"Block","src":"17700:226:33","statements":[{"assignments":[2397],"declarations":[{"constant":false,"id":2397,"mutability":"mutable","name":"length","nameLocation":"17718:6:33","nodeType":"VariableDeclaration","scope":2431,"src":"17710:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2396,"name":"uint256","nodeType":"ElementaryTypeName","src":"17710:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2400,"initialValue":{"expression":{"id":2398,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"17727:10:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2399,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17738:6:33","memberName":"length","nodeType":"MemberAccess","src":"17727:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"17710:34:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2404,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2401,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"17758:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2402,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"17768:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17777:6:33","memberName":"length","nodeType":"MemberAccess","src":"17768:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17758:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2408,"nodeType":"IfStatement","src":"17754:64:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2405,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"17792:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17792:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2407,"nodeType":"RevertStatement","src":"17785:33:33"}},{"body":{"id":2429,"nodeType":"Block","src":"17861:59:33","statements":[{"expression":{"arguments":[{"baseExpression":{"id":2421,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2390,"src":"17882:10:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2423,"indexExpression":{"id":2422,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"17893:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17882:13:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2424,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"17897:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2426,"indexExpression":{"id":2425,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"17906:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"17897:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2418,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"17875:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17877:4:33","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2256,"src":"17875:6:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2427,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17875:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2428,"nodeType":"ExpressionStatement","src":"17875:34:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"17844:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2413,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2397,"src":"17848:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"17844:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2430,"initializationExpression":{"assignments":[2410],"declarations":[{"constant":false,"id":2410,"mutability":"mutable","name":"i","nameLocation":"17841:1:33","nodeType":"VariableDeclaration","scope":2430,"src":"17833:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2409,"name":"uint256","nodeType":"ElementaryTypeName","src":"17833:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2411,"nodeType":"VariableDeclarationStatement","src":"17833:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"17856:3:33","subExpression":{"id":2415,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2410,"src":"17858:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2417,"nodeType":"ExpressionStatement","src":"17856:3:33"},"nodeType":"ForStatement","src":"17828:92:33"}]},"documentation":{"id":2384,"nodeType":"StructuredDocumentation","src":"16830:765:33","text":"@notice Unsafely mints tokens to multiple recipients.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":2432,"implemented":true,"kind":"function","modifiers":[],"name":"deliver","nameLocation":"17609:7:33","nodeType":"FunctionDefinition","parameters":{"id":2394,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"s","nameLocation":"17632:1:33","nodeType":"VariableDeclaration","scope":2432,"src":"17617:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2386,"nodeType":"UserDefinedTypeName","pathNode":{"id":2385,"name":"Layout","nameLocations":["17617:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"17617:6:33"},"referencedDeclaration":1562,"src":"17617:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2390,"mutability":"mutable","name":"recipients","nameLocation":"17652:10:33","nodeType":"VariableDeclaration","scope":2432,"src":"17635:27:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"17635:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2389,"nodeType":"ArrayTypeName","src":"17635:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2393,"mutability":"mutable","name":"tokenIds","nameLocation":"17681:8:33","nodeType":"VariableDeclaration","scope":2432,"src":"17664:25:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2391,"name":"uint256","nodeType":"ElementaryTypeName","src":"17664:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2392,"nodeType":"ArrayTypeName","src":"17664:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"17616:74:33"},"returnParameters":{"id":2395,"nodeType":"ParameterList","parameters":[],"src":"17700:0:33"},"scope":3246,"src":"17600:326:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2506,"nodeType":"Block","src":"18642:491:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2443,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"18656:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2446,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"18670:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18662:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2444,"name":"address","nodeType":"ElementaryTypeName","src":"18662:7:33","typeDescriptions":{}}},"id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18662:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"18656:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2452,"nodeType":"IfStatement","src":"18652:54:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2449,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"18681:23:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18681:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2451,"nodeType":"RevertStatement","src":"18674:32:33"}},{"assignments":[2454],"declarations":[{"constant":false,"id":2454,"mutability":"mutable","name":"owner","nameLocation":"18725:5:33","nodeType":"VariableDeclaration","scope":2506,"src":"18717:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2453,"name":"uint256","nodeType":"ElementaryTypeName","src":"18717:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2459,"initialValue":{"baseExpression":{"expression":{"id":2455,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"18733:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2456,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18735:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"18733:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2458,"indexExpression":{"id":2457,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"18742:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"18733:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"18717:33:33"},{"condition":{"arguments":[{"id":2461,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"18777:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2460,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"18764:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2462,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18764:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2467,"nodeType":"IfStatement","src":"18760:60:33","trueBody":{"errorCall":{"arguments":[{"id":2464,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"18812:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2463,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"18792:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2465,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18792:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2466,"nodeType":"RevertStatement","src":"18785:35:33"}},{"condition":{"arguments":[{"id":2469,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2454,"src":"18849:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2468,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"18834:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2470,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18834:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2475,"nodeType":"IfStatement","src":"18830:59:33","trueBody":{"errorCall":{"arguments":[{"id":2472,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"18881:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2471,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"18864:16:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18864:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2474,"nodeType":"RevertStatement","src":"18857:32:33"}},{"expression":{"id":2488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"18900:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18902:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"18900:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2480,"indexExpression":{"id":2478,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"18909:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"18900:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2485,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"18936:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2484,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18928:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2483,"name":"uint160","nodeType":"ElementaryTypeName","src":"18928:7:33","typeDescriptions":{}}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18928:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2482,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"18920:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2481,"name":"uint256","nodeType":"ElementaryTypeName","src":"18920:7:33","typeDescriptions":{}}},"id":2487,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18920:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"18900:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2489,"nodeType":"ExpressionStatement","src":"18900:40:33"},{"id":2496,"nodeType":"UncheckedBlock","src":"18951:127:33","statements":[{"expression":{"id":2494,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"19051:16:33","subExpression":{"baseExpression":{"expression":{"id":2490,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2436,"src":"19053:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2491,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19055:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"19053:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2493,"indexExpression":{"id":2492,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"19064:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19053:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2495,"nodeType":"ExpressionStatement","src":"19051:16:33"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2500,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19110:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2499,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19102:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2498,"name":"address","nodeType":"ElementaryTypeName","src":"19102:7:33","typeDescriptions":{}}},"id":2501,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19102:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2502,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2438,"src":"19114:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2503,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2440,"src":"19118:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2497,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"19093:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19093:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2505,"nodeType":"EmitStatement","src":"19088:38:33"}]},"documentation":{"id":2433,"nodeType":"StructuredDocumentation","src":"17932:631:33","text":"@notice Unsafely mints a token once.\n @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\n @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint."},"id":2507,"implemented":true,"kind":"function","modifiers":[],"name":"mintOnce","nameLocation":"18577:8:33","nodeType":"FunctionDefinition","parameters":{"id":2441,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2436,"mutability":"mutable","name":"s","nameLocation":"18601:1:33","nodeType":"VariableDeclaration","scope":2507,"src":"18586:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2435,"nodeType":"UserDefinedTypeName","pathNode":{"id":2434,"name":"Layout","nameLocations":["18586:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"18586:6:33"},"referencedDeclaration":1562,"src":"18586:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2438,"mutability":"mutable","name":"to","nameLocation":"18612:2:33","nodeType":"VariableDeclaration","scope":2507,"src":"18604:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2437,"name":"address","nodeType":"ElementaryTypeName","src":"18604:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2440,"mutability":"mutable","name":"tokenId","nameLocation":"18624:7:33","nodeType":"VariableDeclaration","scope":2507,"src":"18616:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2439,"name":"uint256","nodeType":"ElementaryTypeName","src":"18616:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"18585:47:33"},"returnParameters":{"id":2442,"nodeType":"ParameterList","parameters":[],"src":"18642:0:33"},"scope":3246,"src":"18568:565:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2545,"nodeType":"Block","src":"20142:155:33","statements":[{"expression":{"arguments":[{"id":2525,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"20163:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2526,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"20167:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2522,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"20152:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2524,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"20154:8:33","memberName":"mintOnce","nodeType":"MemberAccess","referencedDeclaration":2507,"src":"20152:10:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":2527,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20152:23:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2528,"nodeType":"ExpressionStatement","src":"20152:23:33"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2529,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"20189:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20192:10:33","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"20189:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":2531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20189:15:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2544,"nodeType":"IfStatement","src":"20185:106:33","trueBody":{"id":2543,"nodeType":"Block","src":"20206:85:33","statements":[{"expression":{"arguments":[{"id":2533,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2513,"src":"20242:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2536,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20258:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2535,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20250:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2534,"name":"address","nodeType":"ElementaryTypeName","src":"20250:7:33","typeDescriptions":{}}},"id":2537,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20250:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2538,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2515,"src":"20262:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2539,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"20266:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2540,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"20275:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2532,"name":"_callOnERC721Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3162,"src":"20220:21:33","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":2541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20220:60:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2542,"nodeType":"ExpressionStatement","src":"20220:60:33"}]}}]},"documentation":{"id":2508,"nodeType":"StructuredDocumentation","src":"19139:885:33","text":"@notice Safely mints a token once.\n @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\n @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\n @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event from the zero address.\n @param to Address of the new token owner.\n @param tokenId Identifier of the token to mint.\n @param data Optional data to pass along to the receiver call."},"id":2546,"implemented":true,"kind":"function","modifiers":[],"name":"safeMintOnce","nameLocation":"20038:12:33","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2511,"mutability":"mutable","name":"s","nameLocation":"20066:1:33","nodeType":"VariableDeclaration","scope":2546,"src":"20051:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2510,"nodeType":"UserDefinedTypeName","pathNode":{"id":2509,"name":"Layout","nameLocations":["20051:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"20051:6:33"},"referencedDeclaration":1562,"src":"20051:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2513,"mutability":"mutable","name":"sender","nameLocation":"20077:6:33","nodeType":"VariableDeclaration","scope":2546,"src":"20069:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2512,"name":"address","nodeType":"ElementaryTypeName","src":"20069:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2515,"mutability":"mutable","name":"to","nameLocation":"20093:2:33","nodeType":"VariableDeclaration","scope":2546,"src":"20085:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2514,"name":"address","nodeType":"ElementaryTypeName","src":"20085:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2517,"mutability":"mutable","name":"tokenId","nameLocation":"20105:7:33","nodeType":"VariableDeclaration","scope":2546,"src":"20097:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2516,"name":"uint256","nodeType":"ElementaryTypeName","src":"20097:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"data","nameLocation":"20127:4:33","nodeType":"VariableDeclaration","scope":2546,"src":"20114:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2518,"name":"bytes","nodeType":"ElementaryTypeName","src":"20114:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"20050:82:33"},"returnParameters":{"id":2521,"nodeType":"ParameterList","parameters":[],"src":"20142:0:33"},"scope":3246,"src":"20029:268:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2645,"nodeType":"Block","src":"21098:581:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2558,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"21112:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2561,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21126:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2560,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21118:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2559,"name":"address","nodeType":"ElementaryTypeName","src":"21118:7:33","typeDescriptions":{}}},"id":2562,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21118:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21112:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2567,"nodeType":"IfStatement","src":"21108:54:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2564,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"21137:23:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21137:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2566,"nodeType":"RevertStatement","src":"21130:32:33"}},{"assignments":[2569],"declarations":[{"constant":false,"id":2569,"mutability":"mutable","name":"length","nameLocation":"21181:6:33","nodeType":"VariableDeclaration","scope":2645,"src":"21173:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2568,"name":"uint256","nodeType":"ElementaryTypeName","src":"21173:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2572,"initialValue":{"expression":{"id":2570,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"21190:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21199:6:33","memberName":"length","nodeType":"MemberAccess","src":"21190:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21173:32:33"},{"body":{"id":2634,"nodeType":"Block","src":"21248:356:33","statements":[{"assignments":[2583],"declarations":[{"constant":false,"id":2583,"mutability":"mutable","name":"tokenId","nameLocation":"21270:7:33","nodeType":"VariableDeclaration","scope":2634,"src":"21262:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2582,"name":"uint256","nodeType":"ElementaryTypeName","src":"21262:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2587,"initialValue":{"baseExpression":{"id":2584,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"21280:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2586,"indexExpression":{"id":2585,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"21289:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21280:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21262:29:33"},{"assignments":[2589],"declarations":[{"constant":false,"id":2589,"mutability":"mutable","name":"owner","nameLocation":"21313:5:33","nodeType":"VariableDeclaration","scope":2634,"src":"21305:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2588,"name":"uint256","nodeType":"ElementaryTypeName","src":"21305:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2594,"initialValue":{"baseExpression":{"expression":{"id":2590,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"21321:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2591,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21323:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"21321:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2593,"indexExpression":{"id":2592,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"21330:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21321:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21305:33:33"},{"condition":{"arguments":[{"id":2596,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"21369:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2595,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"21356:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2597,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21356:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2602,"nodeType":"IfStatement","src":"21352:60:33","trueBody":{"errorCall":{"arguments":[{"id":2599,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"21404:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2598,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"21384:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2600,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21384:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2601,"nodeType":"RevertStatement","src":"21377:35:33"}},{"condition":{"arguments":[{"id":2604,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2589,"src":"21445:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2603,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"21430:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2605,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21430:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2610,"nodeType":"IfStatement","src":"21426:59:33","trueBody":{"errorCall":{"arguments":[{"id":2607,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"21477:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2606,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"21460:16:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21460:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2609,"nodeType":"RevertStatement","src":"21453:32:33"}},{"expression":{"id":2623,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2611,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"21500:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2614,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21502:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"21500:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2615,"indexExpression":{"id":2613,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"21509:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21500:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2620,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"21536:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2619,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21528:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2618,"name":"uint160","nodeType":"ElementaryTypeName","src":"21528:7:33","typeDescriptions":{}}},"id":2621,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21528:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2617,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21520:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2616,"name":"uint256","nodeType":"ElementaryTypeName","src":"21520:7:33","typeDescriptions":{}}},"id":2622,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21520:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21500:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2624,"nodeType":"ExpressionStatement","src":"21500:40:33"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2628,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21577:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2627,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21569:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2626,"name":"address","nodeType":"ElementaryTypeName","src":"21569:7:33","typeDescriptions":{}}},"id":2629,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21569:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2630,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"21581:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2631,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2583,"src":"21585:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2625,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"21560:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21560:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2633,"nodeType":"EmitStatement","src":"21555:38:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2576,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"21231:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2577,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"21235:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21231:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2635,"initializationExpression":{"assignments":[2574],"declarations":[{"constant":false,"id":2574,"mutability":"mutable","name":"i","nameLocation":"21228:1:33","nodeType":"VariableDeclaration","scope":2635,"src":"21220:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2573,"name":"uint256","nodeType":"ElementaryTypeName","src":"21220:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2575,"nodeType":"VariableDeclarationStatement","src":"21220:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21243:3:33","subExpression":{"id":2579,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2574,"src":"21245:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2581,"nodeType":"ExpressionStatement","src":"21243:3:33"},"nodeType":"ForStatement","src":"21215:389:33"},{"id":2644,"nodeType":"UncheckedBlock","src":"21614:59:33","statements":[{"expression":{"id":2642,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2636,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"21638:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2639,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21640:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"21638:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2640,"indexExpression":{"id":2638,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2552,"src":"21649:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21638:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2641,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2569,"src":"21656:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21638:24:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2643,"nodeType":"ExpressionStatement","src":"21638:24:33"}]}]},"documentation":{"id":2547,"nodeType":"StructuredDocumentation","src":"20303:701:33","text":"@notice Unsafely mints a batch of tokens once.\n @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\n @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\n @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\n @param to Address of the new tokens owner.\n @param tokenIds Identifiers of the tokens to mint."},"id":2646,"implemented":true,"kind":"function","modifiers":[],"name":"batchMintOnce","nameLocation":"21018:13:33","nodeType":"FunctionDefinition","parameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2550,"mutability":"mutable","name":"s","nameLocation":"21047:1:33","nodeType":"VariableDeclaration","scope":2646,"src":"21032:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2549,"nodeType":"UserDefinedTypeName","pathNode":{"id":2548,"name":"Layout","nameLocations":["21032:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"21032:6:33"},"referencedDeclaration":1562,"src":"21032:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2552,"mutability":"mutable","name":"to","nameLocation":"21058:2:33","nodeType":"VariableDeclaration","scope":2646,"src":"21050:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2551,"name":"address","nodeType":"ElementaryTypeName","src":"21050:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2555,"mutability":"mutable","name":"tokenIds","nameLocation":"21079:8:33","nodeType":"VariableDeclaration","scope":2646,"src":"21062:25:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2553,"name":"uint256","nodeType":"ElementaryTypeName","src":"21062:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2554,"nodeType":"ArrayTypeName","src":"21062:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"21031:57:33"},"returnParameters":{"id":2557,"nodeType":"ParameterList","parameters":[],"src":"21098:0:33"},"scope":3246,"src":"21009:670:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2758,"nodeType":"Block","src":"22657:704:33","statements":[{"assignments":[2660],"declarations":[{"constant":false,"id":2660,"mutability":"mutable","name":"length","nameLocation":"22675:6:33","nodeType":"VariableDeclaration","scope":2758,"src":"22667:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2659,"name":"uint256","nodeType":"ElementaryTypeName","src":"22667:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2663,"initialValue":{"expression":{"id":2661,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"22684:10:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22695:6:33","memberName":"length","nodeType":"MemberAccess","src":"22684:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22667:34:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2664,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"22715:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2665,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"22725:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2666,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"22734:6:33","memberName":"length","nodeType":"MemberAccess","src":"22725:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22715:25:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2671,"nodeType":"IfStatement","src":"22711:64:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2668,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"22749:24:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2669,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22749:26:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2670,"nodeType":"RevertStatement","src":"22742:33:33"}},{"body":{"id":2756,"nodeType":"Block","src":"22818:537:33","statements":[{"assignments":[2682],"declarations":[{"constant":false,"id":2682,"mutability":"mutable","name":"to","nameLocation":"22840:2:33","nodeType":"VariableDeclaration","scope":2756,"src":"22832:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2681,"name":"address","nodeType":"ElementaryTypeName","src":"22832:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2686,"initialValue":{"baseExpression":{"id":2683,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2653,"src":"22845:10:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":2685,"indexExpression":{"id":2684,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"22856:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22845:13:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"22832:26:33"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2687,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"22876:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2690,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22890:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2689,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"22882:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2688,"name":"address","nodeType":"ElementaryTypeName","src":"22882:7:33","typeDescriptions":{}}},"id":2691,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22882:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"22876:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2696,"nodeType":"IfStatement","src":"22872:54:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2693,"name":"ERC721MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1241,"src":"22901:23:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2694,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22901:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2695,"nodeType":"RevertStatement","src":"22894:32:33"}},{"assignments":[2698],"declarations":[{"constant":false,"id":2698,"mutability":"mutable","name":"tokenId","nameLocation":"22949:7:33","nodeType":"VariableDeclaration","scope":2756,"src":"22941:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2697,"name":"uint256","nodeType":"ElementaryTypeName","src":"22941:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2702,"initialValue":{"baseExpression":{"id":2699,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2656,"src":"22959:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":2701,"indexExpression":{"id":2700,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"22968:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22959:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22941:29:33"},{"assignments":[2704],"declarations":[{"constant":false,"id":2704,"mutability":"mutable","name":"owner","nameLocation":"22992:5:33","nodeType":"VariableDeclaration","scope":2756,"src":"22984:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"22984:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2709,"initialValue":{"baseExpression":{"expression":{"id":2705,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"23000:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2706,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23002:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"23000:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2708,"indexExpression":{"id":2707,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"23009:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"23000:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22984:33:33"},{"condition":{"arguments":[{"id":2711,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"23048:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2710,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"23035:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23035:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2717,"nodeType":"IfStatement","src":"23031:60:33","trueBody":{"errorCall":{"arguments":[{"id":2714,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"23083:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2713,"name":"ERC721ExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1246,"src":"23063:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2715,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23063:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2716,"nodeType":"RevertStatement","src":"23056:35:33"}},{"condition":{"arguments":[{"id":2719,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"23124:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2718,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"23109:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2720,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23109:21:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2725,"nodeType":"IfStatement","src":"23105:59:33","trueBody":{"errorCall":{"arguments":[{"id":2722,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"23156:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2721,"name":"ERC721BurntToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1253,"src":"23139:16:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23139:25:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2724,"nodeType":"RevertStatement","src":"23132:32:33"}},{"expression":{"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2726,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"23179:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2729,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23181:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"23179:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2730,"indexExpression":{"id":2728,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"23188:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23179:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":2735,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"23215:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2734,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23207:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":2733,"name":"uint160","nodeType":"ElementaryTypeName","src":"23207:7:33","typeDescriptions":{}}},"id":2736,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23207:11:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":2732,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23199:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2731,"name":"uint256","nodeType":"ElementaryTypeName","src":"23199:7:33","typeDescriptions":{}}},"id":2737,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23199:20:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23179:40:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2739,"nodeType":"ExpressionStatement","src":"23179:40:33"},{"id":2746,"nodeType":"UncheckedBlock","src":"23233:59:33","statements":[{"expression":{"id":2744,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"23261:16:33","subExpression":{"baseExpression":{"expression":{"id":2740,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2650,"src":"23263:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2741,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23265:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"23263:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2743,"indexExpression":{"id":2742,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"23274:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23263:14:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2745,"nodeType":"ExpressionStatement","src":"23261:16:33"}]},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":2750,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23328:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2749,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23320:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2748,"name":"address","nodeType":"ElementaryTypeName","src":"23320:7:33","typeDescriptions":{}}},"id":2751,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23320:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2752,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2682,"src":"23332:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2753,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2698,"src":"23336:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2747,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"23311:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23311:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2755,"nodeType":"EmitStatement","src":"23306:38:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2675,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"22801:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2676,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"22805:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22801:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2757,"initializationExpression":{"assignments":[2673],"declarations":[{"constant":false,"id":2673,"mutability":"mutable","name":"i","nameLocation":"22798:1:33","nodeType":"VariableDeclaration","scope":2757,"src":"22790:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2672,"name":"uint256","nodeType":"ElementaryTypeName","src":"22790:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2674,"nodeType":"VariableDeclarationStatement","src":"22790:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2679,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"22813:3:33","subExpression":{"id":2678,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2673,"src":"22815:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2680,"nodeType":"ExpressionStatement","src":"22813:3:33"},"nodeType":"ForStatement","src":"22785:570:33"}]},"documentation":{"id":2647,"nodeType":"StructuredDocumentation","src":"21685:863:33","text":"@notice Unsafely mints tokens to multiple recipients once.\n @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\n @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\n @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\n @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\n @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\n @param recipients Addresses of the new tokens owners.\n @param tokenIds Identifiers of the tokens to mint."},"id":2759,"implemented":true,"kind":"function","modifiers":[],"name":"deliverOnce","nameLocation":"22562:11:33","nodeType":"FunctionDefinition","parameters":{"id":2657,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2650,"mutability":"mutable","name":"s","nameLocation":"22589:1:33","nodeType":"VariableDeclaration","scope":2759,"src":"22574:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2649,"nodeType":"UserDefinedTypeName","pathNode":{"id":2648,"name":"Layout","nameLocations":["22574:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"22574:6:33"},"referencedDeclaration":1562,"src":"22574:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2653,"mutability":"mutable","name":"recipients","nameLocation":"22609:10:33","nodeType":"VariableDeclaration","scope":2759,"src":"22592:27:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2651,"name":"address","nodeType":"ElementaryTypeName","src":"22592:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2652,"nodeType":"ArrayTypeName","src":"22592:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2656,"mutability":"mutable","name":"tokenIds","nameLocation":"22638:8:33","nodeType":"VariableDeclaration","scope":2759,"src":"22621:25:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2654,"name":"uint256","nodeType":"ElementaryTypeName","src":"22621:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2655,"nodeType":"ArrayTypeName","src":"22621:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"22573:74:33"},"returnParameters":{"id":2658,"nodeType":"ParameterList","parameters":[],"src":"22657:0:33"},"scope":3246,"src":"22553:808:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2849,"nodeType":"Block","src":"24029:648:33","statements":[{"assignments":[2773],"declarations":[{"constant":false,"id":2773,"mutability":"mutable","name":"owner","nameLocation":"24047:5:33","nodeType":"VariableDeclaration","scope":2849,"src":"24039:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2772,"name":"uint256","nodeType":"ElementaryTypeName","src":"24039:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2778,"initialValue":{"baseExpression":{"expression":{"id":2774,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"24055:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2775,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24057:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"24055:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2777,"indexExpression":{"id":2776,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24064:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24055:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"24039:33:33"},{"condition":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24086:20:33","subExpression":{"arguments":[{"id":2780,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"24100:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2779,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"24087:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24087:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2787,"nodeType":"IfStatement","src":"24082:64:33","trueBody":{"errorCall":{"arguments":[{"id":2784,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24138:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2783,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"24115:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24115:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2786,"nodeType":"RevertStatement","src":"24108:38:33"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2789,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"24172:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2788,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"24160:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24160:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24182:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24160:26:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2798,"nodeType":"IfStatement","src":"24156:73:33","trueBody":{"errorCall":{"arguments":[{"id":2794,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24215:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2795,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24221:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2793,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"24195:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2796,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24195:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2797,"nodeType":"RevertStatement","src":"24188:41:33"}},{"condition":{"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24244:31:33","subExpression":{"arguments":[{"id":2800,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"24259:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2801,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24262:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2802,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"24268:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2799,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"24245:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24245:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2824,"nodeType":"IfStatement","src":"24240:185:33","trueBody":{"id":2823,"nodeType":"Block","src":"24277:148:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2808,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"24295:25:33","subExpression":{"arguments":[{"id":2806,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2773,"src":"24314:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2805,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"24296:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2807,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24296:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2809,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"24324:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2810,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"24334:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2811,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24336:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"24334:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2813,"indexExpression":{"id":2812,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24346:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"24334:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24324:30:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"24295:59:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2822,"nodeType":"IfStatement","src":"24291:123:33","trueBody":{"errorCall":{"arguments":[{"id":2817,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2765,"src":"24392:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2818,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24400:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2819,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24406:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2816,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"24363:28:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24363:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2821,"nodeType":"RevertStatement","src":"24356:58:33"}}]}},{"expression":{"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2825,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"24435:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2828,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24437:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"24435:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2829,"indexExpression":{"id":2827,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24444:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24435:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2830,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"24455:23:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"24435:43:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2832,"nodeType":"ExpressionStatement","src":"24435:43:33"},{"id":2839,"nodeType":"UncheckedBlock","src":"24489:132:33","statements":[{"expression":{"id":2837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"24592:18:33","subExpression":{"baseExpression":{"expression":{"id":2833,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2763,"src":"24594:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2834,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24596:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"24594:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2836,"indexExpression":{"id":2835,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24605:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"24594:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2838,"nodeType":"ExpressionStatement","src":"24592:18:33"}]},{"eventCall":{"arguments":[{"id":2841,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2767,"src":"24644:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2844,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"24658:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2843,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"24650:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2842,"name":"address","nodeType":"ElementaryTypeName","src":"24650:7:33","typeDescriptions":{}}},"id":2845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24650:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2846,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"24662:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2840,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"24635:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2847,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24635:35:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2848,"nodeType":"EmitStatement","src":"24630:40:33"}]},"documentation":{"id":2760,"nodeType":"StructuredDocumentation","src":"23367:565:33","text":"@notice Burns a token by a sender.\n @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\n @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @param sender The message sender.\n @param from The current token owner.\n @param tokenId The identifier of the token to burn."},"id":2850,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"23946:8:33","nodeType":"FunctionDefinition","parameters":{"id":2770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2763,"mutability":"mutable","name":"s","nameLocation":"23970:1:33","nodeType":"VariableDeclaration","scope":2850,"src":"23955:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2762,"nodeType":"UserDefinedTypeName","pathNode":{"id":2761,"name":"Layout","nameLocations":["23955:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"23955:6:33"},"referencedDeclaration":1562,"src":"23955:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2765,"mutability":"mutable","name":"sender","nameLocation":"23981:6:33","nodeType":"VariableDeclaration","scope":2850,"src":"23973:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2764,"name":"address","nodeType":"ElementaryTypeName","src":"23973:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2767,"mutability":"mutable","name":"from","nameLocation":"23997:4:33","nodeType":"VariableDeclaration","scope":2850,"src":"23989:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2766,"name":"address","nodeType":"ElementaryTypeName","src":"23989:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2769,"mutability":"mutable","name":"tokenId","nameLocation":"24011:7:33","nodeType":"VariableDeclaration","scope":2850,"src":"24003:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2768,"name":"uint256","nodeType":"ElementaryTypeName","src":"24003:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23954:65:33"},"returnParameters":{"id":2771,"nodeType":"ParameterList","parameters":[],"src":"24029:0:33"},"scope":3246,"src":"23937:740:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2974,"nodeType":"Block","src":"25423:833:33","statements":[{"assignments":[2865],"declarations":[{"constant":false,"id":2865,"mutability":"mutable","name":"operatable","nameLocation":"25438:10:33","nodeType":"VariableDeclaration","scope":2974,"src":"25433:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2864,"name":"bool","nodeType":"ElementaryTypeName","src":"25433:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"id":2871,"initialValue":{"arguments":[{"id":2867,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"25465:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},{"id":2868,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"25468:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2869,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"25474:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":2866,"name":"_isOperatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3188,"src":"25451:13:33","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,address) view returns (bool)"}},"id":2870,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25451:30:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"VariableDeclarationStatement","src":"25433:48:33"},{"assignments":[2873],"declarations":[{"constant":false,"id":2873,"mutability":"mutable","name":"length","nameLocation":"25500:6:33","nodeType":"VariableDeclaration","scope":2974,"src":"25492:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2872,"name":"uint256","nodeType":"ElementaryTypeName","src":"25492:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2876,"initialValue":{"expression":{"id":2874,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"25509:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2875,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25518:6:33","memberName":"length","nodeType":"MemberAccess","src":"25509:15:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25492:32:33"},{"body":{"id":2958,"nodeType":"Block","src":"25567:563:33","statements":[{"assignments":[2887],"declarations":[{"constant":false,"id":2887,"mutability":"mutable","name":"tokenId","nameLocation":"25589:7:33","nodeType":"VariableDeclaration","scope":2958,"src":"25581:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2886,"name":"uint256","nodeType":"ElementaryTypeName","src":"25581:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2891,"initialValue":{"baseExpression":{"id":2888,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2861,"src":"25599:8:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2890,"indexExpression":{"id":2889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"25608:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25599:11:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25581:29:33"},{"assignments":[2893],"declarations":[{"constant":false,"id":2893,"mutability":"mutable","name":"owner","nameLocation":"25632:5:33","nodeType":"VariableDeclaration","scope":2958,"src":"25624:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2892,"name":"uint256","nodeType":"ElementaryTypeName","src":"25624:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2898,"initialValue":{"baseExpression":{"expression":{"id":2894,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"25640:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2895,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25642:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"25640:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2897,"indexExpression":{"id":2896,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"25649:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25640:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25624:33:33"},{"condition":{"id":2902,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25675:20:33","subExpression":{"arguments":[{"id":2900,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"25689:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2899,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"25676:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2901,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25676:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2907,"nodeType":"IfStatement","src":"25671:64:33","trueBody":{"errorCall":{"arguments":[{"id":2904,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"25727:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2903,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"25704:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25704:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2906,"nodeType":"RevertStatement","src":"25697:38:33"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2912,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2909,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"25765:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2908,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"25753:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":2910,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25753:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2911,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"25775:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25753:26:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2918,"nodeType":"IfStatement","src":"25749:73:33","trueBody":{"errorCall":{"arguments":[{"id":2914,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"25808:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2915,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"25814:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2913,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"25788:19:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":2916,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25788:34:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2917,"nodeType":"RevertStatement","src":"25781:41:33"}},{"condition":{"id":2920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25840:11:33","subExpression":{"id":2919,"name":"operatable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2865,"src":"25841:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2940,"nodeType":"IfStatement","src":"25836:173:33","trueBody":{"id":2939,"nodeType":"Block","src":"25853:156:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"25875:25:33","subExpression":{"arguments":[{"id":2922,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"25894:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2921,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"25876:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":2923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25876:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2930,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2925,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"25904:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"baseExpression":{"expression":{"id":2926,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"25914:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2927,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25916:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"25914:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2929,"indexExpression":{"id":2928,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"25926:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25914:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25904:30:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"25875:59:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2938,"nodeType":"IfStatement","src":"25871:123:33","trueBody":{"errorCall":{"arguments":[{"id":2933,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2856,"src":"25972:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2934,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"25980:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2935,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"25986:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2932,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"25943:28:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":2936,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25943:51:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2937,"nodeType":"RevertStatement","src":"25936:58:33"}}]}},{"expression":{"id":2947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2941,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"26022:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2944,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26024:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"26022:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":2945,"indexExpression":{"id":2943,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"26031:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26022:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2946,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"26042:23:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26022:43:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2948,"nodeType":"ExpressionStatement","src":"26022:43:33"},{"eventCall":{"arguments":[{"id":2950,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"26093:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":2953,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26107:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2952,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26099:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2951,"name":"address","nodeType":"ElementaryTypeName","src":"26099:7:33","typeDescriptions":{}}},"id":2954,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26099:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2955,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2887,"src":"26111:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2949,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"26084:8:33","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2956,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26084:35:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2957,"nodeType":"EmitStatement","src":"26079:40:33"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2880,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"25550:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2881,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"25554:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25550:10:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2959,"initializationExpression":{"assignments":[2878],"declarations":[{"constant":false,"id":2878,"mutability":"mutable","name":"i","nameLocation":"25547:1:33","nodeType":"VariableDeclaration","scope":2959,"src":"25539:9:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2877,"name":"uint256","nodeType":"ElementaryTypeName","src":"25539:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2879,"nodeType":"VariableDeclarationStatement","src":"25539:9:33"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2884,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"25562:3:33","subExpression":{"id":2883,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"25564:1:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2885,"nodeType":"ExpressionStatement","src":"25562:3:33"},"nodeType":"ForStatement","src":"25534:596:33"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2960,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"26144:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2961,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26154:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26144:11:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2973,"nodeType":"IfStatement","src":"26140:110:33","trueBody":{"id":2972,"nodeType":"Block","src":"26157:93:33","statements":[{"id":2971,"nodeType":"UncheckedBlock","src":"26171:69:33","statements":[{"expression":{"id":2969,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2963,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2854,"src":"26199:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2966,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26201:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"26199:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2967,"indexExpression":{"id":2965,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2858,"src":"26210:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26199:16:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":2968,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2873,"src":"26219:6:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26199:26:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2970,"nodeType":"ExpressionStatement","src":"26199:26:33"}]}]}}]},"documentation":{"id":2851,"nodeType":"StructuredDocumentation","src":"24683:626:33","text":"@notice Burns a batch of tokens by a sender.\n @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\n @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\n @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\n @param sender The message sender.\n @param from The current tokens owner.\n @param tokenIds The identifiers of the tokens to burn."},"id":2975,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"25323:13:33","nodeType":"FunctionDefinition","parameters":{"id":2862,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2854,"mutability":"mutable","name":"s","nameLocation":"25352:1:33","nodeType":"VariableDeclaration","scope":2975,"src":"25337:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2853,"nodeType":"UserDefinedTypeName","pathNode":{"id":2852,"name":"Layout","nameLocations":["25337:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"25337:6:33"},"referencedDeclaration":1562,"src":"25337:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2856,"mutability":"mutable","name":"sender","nameLocation":"25363:6:33","nodeType":"VariableDeclaration","scope":2975,"src":"25355:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2855,"name":"address","nodeType":"ElementaryTypeName","src":"25355:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2858,"mutability":"mutable","name":"from","nameLocation":"25379:4:33","nodeType":"VariableDeclaration","scope":2975,"src":"25371:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2857,"name":"address","nodeType":"ElementaryTypeName","src":"25371:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2861,"mutability":"mutable","name":"tokenIds","nameLocation":"25404:8:33","nodeType":"VariableDeclaration","scope":2975,"src":"25385:27:33","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2859,"name":"uint256","nodeType":"ElementaryTypeName","src":"25385:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2860,"nodeType":"ArrayTypeName","src":"25385:9:33","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"25336:77:33"},"returnParameters":{"id":2863,"nodeType":"ParameterList","parameters":[],"src":"25423:0:33"},"scope":3246,"src":"25314:942:33","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3001,"nodeType":"Block","src":"26675:111:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2986,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"26689:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2989,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26706:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26698:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2987,"name":"address","nodeType":"ElementaryTypeName","src":"26698:7:33","typeDescriptions":{}}},"id":2990,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26698:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"26689:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2995,"nodeType":"IfStatement","src":"26685:60:33","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2992,"name":"ERC721BalanceOfAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"26717:26:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26717:28:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2994,"nodeType":"RevertStatement","src":"26710:35:33"}},{"expression":{"baseExpression":{"expression":{"id":2996,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2979,"src":"26762:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":2997,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26764:8:33","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"26762:10:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2999,"indexExpression":{"id":2998,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2981,"src":"26773:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"26762:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2985,"id":3000,"nodeType":"Return","src":"26755:24:33"}]},"documentation":{"id":2976,"nodeType":"StructuredDocumentation","src":"26262:316:33","text":"@notice Gets the balance of an address.\n @dev Note: This function implements {ERC721-balanceOf(address)}.\n @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"id":3002,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"26592:9:33","nodeType":"FunctionDefinition","parameters":{"id":2982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2979,"mutability":"mutable","name":"s","nameLocation":"26617:1:33","nodeType":"VariableDeclaration","scope":3002,"src":"26602:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":2978,"nodeType":"UserDefinedTypeName","pathNode":{"id":2977,"name":"Layout","nameLocations":["26602:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"26602:6:33"},"referencedDeclaration":1562,"src":"26602:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2981,"mutability":"mutable","name":"owner","nameLocation":"26628:5:33","nodeType":"VariableDeclaration","scope":3002,"src":"26620:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2980,"name":"address","nodeType":"ElementaryTypeName","src":"26620:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26601:33:33"},"returnParameters":{"id":2985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2984,"mutability":"mutable","name":"balance","nameLocation":"26666:7:33","nodeType":"VariableDeclaration","scope":3002,"src":"26658:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2983,"name":"uint256","nodeType":"ElementaryTypeName","src":"26658:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26657:17:33"},"scope":3246,"src":"26583:203:33","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3033,"nodeType":"Block","src":"27199:159:33","statements":[{"assignments":[3014],"declarations":[{"constant":false,"id":3014,"mutability":"mutable","name":"owner","nameLocation":"27217:5:33","nodeType":"VariableDeclaration","scope":3033,"src":"27209:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3013,"name":"uint256","nodeType":"ElementaryTypeName","src":"27209:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3019,"initialValue":{"baseExpression":{"expression":{"id":3015,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3006,"src":"27225:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3016,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27227:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"27225:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3018,"indexExpression":{"id":3017,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"27234:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27225:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27209:33:33"},{"condition":{"id":3023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27256:20:33","subExpression":{"arguments":[{"id":3021,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"27270:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3020,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"27257:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27257:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3028,"nodeType":"IfStatement","src":"27252:64:33","trueBody":{"errorCall":{"arguments":[{"id":3025,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3008,"src":"27308:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3024,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"27285:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3026,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27285:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3027,"nodeType":"RevertStatement","src":"27278:38:33"}},{"expression":{"arguments":[{"id":3030,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3014,"src":"27345:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3029,"name":"_tokenOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3204,"src":"27333:11:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_address_$","typeString":"function (uint256) pure returns (address)"}},"id":3031,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27333:18:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3012,"id":3032,"nodeType":"Return","src":"27326:25:33"}]},"documentation":{"id":3003,"nodeType":"StructuredDocumentation","src":"26792:307:33","text":"@notice Gets the owner of a token.\n @dev Note: This function implements {ERC721-ownerOf(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token."},"id":3034,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"27113:7:33","nodeType":"FunctionDefinition","parameters":{"id":3009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3006,"mutability":"mutable","name":"s","nameLocation":"27136:1:33","nodeType":"VariableDeclaration","scope":3034,"src":"27121:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3005,"nodeType":"UserDefinedTypeName","pathNode":{"id":3004,"name":"Layout","nameLocations":["27121:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"27121:6:33"},"referencedDeclaration":1562,"src":"27121:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3008,"mutability":"mutable","name":"tokenId","nameLocation":"27147:7:33","nodeType":"VariableDeclaration","scope":3034,"src":"27139:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3007,"name":"uint256","nodeType":"ElementaryTypeName","src":"27139:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27120:35:33"},"returnParameters":{"id":3012,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3011,"mutability":"mutable","name":"tokenOwner","nameLocation":"27187:10:33","nodeType":"VariableDeclaration","scope":3034,"src":"27179:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3010,"name":"address","nodeType":"ElementaryTypeName","src":"27179:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27178:20:33"},"scope":3246,"src":"27104:254:33","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3077,"nodeType":"Block","src":"27856:263:33","statements":[{"assignments":[3046],"declarations":[{"constant":false,"id":3046,"mutability":"mutable","name":"owner","nameLocation":"27874:5:33","nodeType":"VariableDeclaration","scope":3077,"src":"27866:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3045,"name":"uint256","nodeType":"ElementaryTypeName","src":"27866:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3051,"initialValue":{"baseExpression":{"expression":{"id":3047,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"27882:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3048,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27884:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"27882:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3050,"indexExpression":{"id":3049,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"27891:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27882:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"27866:33:33"},{"condition":{"id":3055,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"27913:20:33","subExpression":{"arguments":[{"id":3053,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"27927:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3052,"name":"_tokenExists","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"27914:12:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3054,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27914:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3060,"nodeType":"IfStatement","src":"27909:64:33","trueBody":{"errorCall":{"arguments":[{"id":3057,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"27965:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3056,"name":"ERC721NonExistingToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1210,"src":"27942:22:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":3058,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27942:31:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3059,"nodeType":"RevertStatement","src":"27935:38:33"}},{"condition":{"arguments":[{"id":3062,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3046,"src":"28005:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3061,"name":"_tokenHasApproval","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3245,"src":"27987:17:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3063,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"27987:24:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3075,"nodeType":"Block","src":"28071:42:33","statements":[{"expression":{"arguments":[{"hexValue":"30","id":3072,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"28100:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3071,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"28092:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3070,"name":"address","nodeType":"ElementaryTypeName","src":"28092:7:33","typeDescriptions":{}}},"id":3073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28092:10:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3044,"id":3074,"nodeType":"Return","src":"28085:17:33"}]},"id":3076,"nodeType":"IfStatement","src":"27983:130:33","trueBody":{"id":3069,"nodeType":"Block","src":"28013:52:33","statements":[{"expression":{"baseExpression":{"expression":{"id":3064,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3038,"src":"28034:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3065,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28036:9:33","memberName":"approvals","nodeType":"MemberAccess","referencedDeclaration":1555,"src":"28034:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":3067,"indexExpression":{"id":3066,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3040,"src":"28046:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28034:20:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3044,"id":3068,"nodeType":"Return","src":"28027:27:33"}]}}]},"documentation":{"id":3035,"nodeType":"StructuredDocumentation","src":"27364:390:33","text":"@notice Gets the approved address for a token.\n @dev Note: This function implements {ERC721-getApproved(uint256)}.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"id":3078,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"27768:11:33","nodeType":"FunctionDefinition","parameters":{"id":3041,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3038,"mutability":"mutable","name":"s","nameLocation":"27795:1:33","nodeType":"VariableDeclaration","scope":3078,"src":"27780:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3037,"nodeType":"UserDefinedTypeName","pathNode":{"id":3036,"name":"Layout","nameLocations":["27780:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"27780:6:33"},"referencedDeclaration":1562,"src":"27780:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3040,"mutability":"mutable","name":"tokenId","nameLocation":"27806:7:33","nodeType":"VariableDeclaration","scope":3078,"src":"27798:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3039,"name":"uint256","nodeType":"ElementaryTypeName","src":"27798:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27779:35:33"},"returnParameters":{"id":3044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3043,"mutability":"mutable","name":"approved","nameLocation":"27846:8:33","nodeType":"VariableDeclaration","scope":3078,"src":"27838:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3042,"name":"address","nodeType":"ElementaryTypeName","src":"27838:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27837:18:33"},"scope":3246,"src":"27759:360:33","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3098,"nodeType":"Block","src":"28662:52:33","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":3091,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3082,"src":"28679:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3092,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"28681:9:33","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1561,"src":"28679:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3094,"indexExpression":{"id":3093,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3084,"src":"28691:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:18:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3096,"indexExpression":{"id":3095,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3086,"src":"28698:8:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"28679:28:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3090,"id":3097,"nodeType":"Return","src":"28672:35:33"}]},"documentation":{"id":3079,"nodeType":"StructuredDocumentation","src":"28125:411:33","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"id":3099,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"28550:16:33","nodeType":"FunctionDefinition","parameters":{"id":3087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3082,"mutability":"mutable","name":"s","nameLocation":"28582:1:33","nodeType":"VariableDeclaration","scope":3099,"src":"28567:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3081,"nodeType":"UserDefinedTypeName","pathNode":{"id":3080,"name":"Layout","nameLocations":["28567:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"28567:6:33"},"referencedDeclaration":1562,"src":"28567:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3084,"mutability":"mutable","name":"owner","nameLocation":"28593:5:33","nodeType":"VariableDeclaration","scope":3099,"src":"28585:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3083,"name":"address","nodeType":"ElementaryTypeName","src":"28585:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3086,"mutability":"mutable","name":"operator","nameLocation":"28608:8:33","nodeType":"VariableDeclaration","scope":3099,"src":"28600:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3085,"name":"address","nodeType":"ElementaryTypeName","src":"28600:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"28566:51:33"},"returnParameters":{"id":3090,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3089,"mutability":"mutable","name":"approvedForAll","nameLocation":"28646:14:33","nodeType":"VariableDeclaration","scope":3099,"src":"28641:19:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3088,"name":"bool","nodeType":"ElementaryTypeName","src":"28641:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28640:21:33"},"scope":3246,"src":"28541:173:33","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3117,"nodeType":"Block","src":"28968:57:33","statements":[{"expression":{"arguments":[{"baseExpression":{"expression":{"id":3111,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3103,"src":"29000:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3112,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"29002:6:33","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"29000:8:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":3114,"indexExpression":{"id":3113,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3105,"src":"29009:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"29000:17:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3110,"name":"_tokenWasBurnt","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3231,"src":"28985:14:33","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_bool_$","typeString":"function (uint256) pure returns (bool)"}},"id":3115,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28985:33:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3109,"id":3116,"nodeType":"Return","src":"28978:40:33"}]},"documentation":{"id":3100,"nodeType":"StructuredDocumentation","src":"28720:147:33","text":"@notice Gets whether a token was burnt.\n @param tokenId The token identifier.\n @return tokenWasBurnt Whether the token was burnt."},"id":3118,"implemented":true,"kind":"function","modifiers":[],"name":"wasBurnt","nameLocation":"28881:8:33","nodeType":"FunctionDefinition","parameters":{"id":3106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3103,"mutability":"mutable","name":"s","nameLocation":"28905:1:33","nodeType":"VariableDeclaration","scope":3118,"src":"28890:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3102,"nodeType":"UserDefinedTypeName","pathNode":{"id":3101,"name":"Layout","nameLocations":["28890:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"28890:6:33"},"referencedDeclaration":1562,"src":"28890:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3105,"mutability":"mutable","name":"tokenId","nameLocation":"28916:7:33","nodeType":"VariableDeclaration","scope":3118,"src":"28908:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3104,"name":"uint256","nodeType":"ElementaryTypeName","src":"28908:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"28889:35:33"},"returnParameters":{"id":3109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3108,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"28953:13:33","nodeType":"VariableDeclaration","scope":3118,"src":"28948:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3107,"name":"bool","nodeType":"ElementaryTypeName","src":"28948:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"28947:20:33"},"scope":3246,"src":"28872:153:33","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3129,"nodeType":"Block","src":"29090:115:33","statements":[{"assignments":[3125],"declarations":[{"constant":false,"id":3125,"mutability":"mutable","name":"position","nameLocation":"29108:8:33","nodeType":"VariableDeclaration","scope":3129,"src":"29100:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3124,"name":"bytes32","nodeType":"ElementaryTypeName","src":"29100:7:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3127,"initialValue":{"id":3126,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1575,"src":"29119:19:33","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"29100:38:33"},{"AST":{"nativeSrc":"29157:42:33","nodeType":"YulBlock","src":"29157:42:33","statements":[{"nativeSrc":"29171:18:33","nodeType":"YulAssignment","src":"29171:18:33","value":{"name":"position","nativeSrc":"29181:8:33","nodeType":"YulIdentifier","src":"29181:8:33"},"variableNames":[{"name":"s.slot","nativeSrc":"29171:6:33","nodeType":"YulIdentifier","src":"29171:6:33"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3125,"isOffset":false,"isSlot":false,"src":"29181:8:33","valueSize":1},{"declaration":3122,"isOffset":false,"isSlot":true,"src":"29171:6:33","suffix":"slot","valueSize":1}],"id":3128,"nodeType":"InlineAssembly","src":"29148:51:33"}]},"id":3130,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"29040:6:33","nodeType":"FunctionDefinition","parameters":{"id":3119,"nodeType":"ParameterList","parameters":[],"src":"29046:2:33"},"returnParameters":{"id":3123,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3122,"mutability":"mutable","name":"s","nameLocation":"29087:1:33","nodeType":"VariableDeclaration","scope":3130,"src":"29072:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3121,"nodeType":"UserDefinedTypeName","pathNode":{"id":3120,"name":"Layout","nameLocations":["29072:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"29072:6:33"},"referencedDeclaration":1562,"src":"29072:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"}],"src":"29071:18:33"},"scope":3246,"src":"29031:174:33","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3161,"nodeType":"Block","src":"29779:153:33","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3154,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3148,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3133,"src":"29830:6:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3149,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3135,"src":"29838:4:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3150,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"29844:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3151,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3141,"src":"29853:4:33","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3145,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"29809:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3144,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"29793:15:33","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1491_$","typeString":"type(contract IERC721Receiver)"}},"id":3146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:19:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1491","typeString":"contract IERC721Receiver"}},"id":3147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"29813:16:33","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"29793:36:33","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3152,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29793:65:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3153,"name":"ERC721_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1580,"src":"29862:15:33","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"29793:84:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3160,"nodeType":"IfStatement","src":"29789:136:33","trueBody":{"errorCall":{"arguments":[{"id":3156,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3137,"src":"29913:2:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3157,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3139,"src":"29917:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3155,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"29886:26:33","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"29886:39:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3159,"nodeType":"RevertStatement","src":"29879:46:33"}}]},"documentation":{"id":3131,"nodeType":"StructuredDocumentation","src":"29211:446:33","text":"@notice Calls {IERC721Receiver-onERC721Received} on a target contract.\n @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param tokenId Identifier of the token transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3162,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC721Received","nameLocation":"29671:21:33","nodeType":"FunctionDefinition","parameters":{"id":3142,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3133,"mutability":"mutable","name":"sender","nameLocation":"29701:6:33","nodeType":"VariableDeclaration","scope":3162,"src":"29693:14:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3132,"name":"address","nodeType":"ElementaryTypeName","src":"29693:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3135,"mutability":"mutable","name":"from","nameLocation":"29717:4:33","nodeType":"VariableDeclaration","scope":3162,"src":"29709:12:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3134,"name":"address","nodeType":"ElementaryTypeName","src":"29709:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3137,"mutability":"mutable","name":"to","nameLocation":"29731:2:33","nodeType":"VariableDeclaration","scope":3162,"src":"29723:10:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3136,"name":"address","nodeType":"ElementaryTypeName","src":"29723:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3139,"mutability":"mutable","name":"tokenId","nameLocation":"29743:7:33","nodeType":"VariableDeclaration","scope":3162,"src":"29735:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3138,"name":"uint256","nodeType":"ElementaryTypeName","src":"29735:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3141,"mutability":"mutable","name":"data","nameLocation":"29765:4:33","nodeType":"VariableDeclaration","scope":3162,"src":"29752:17:33","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3140,"name":"bytes","nodeType":"ElementaryTypeName","src":"29752:5:33","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"29692:78:33"},"returnParameters":{"id":3143,"nodeType":"ParameterList","parameters":[],"src":"29779:0:33"},"scope":3246,"src":"29662:270:33","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":3187,"nodeType":"Block","src":"30357:73:33","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3177,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3175,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"30375:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3176,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"30384:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"30375:16:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3178,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"30374:18:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"baseExpression":{"baseExpression":{"expression":{"id":3179,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3166,"src":"30396:1:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":3180,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"30398:9:33","memberName":"operators","nodeType":"MemberAccess","referencedDeclaration":1561,"src":"30396:11:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(address => mapping(address => bool))"}},"id":3182,"indexExpression":{"id":3181,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3168,"src":"30408:5:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:18:33","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":3184,"indexExpression":{"id":3183,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3170,"src":"30415:7:33","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"30396:27:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"30374:49:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3174,"id":3186,"nodeType":"Return","src":"30367:56:33"}]},"documentation":{"id":3163,"nodeType":"StructuredDocumentation","src":"29938:302:33","text":"@notice Returns whether an account is authorised to make a transfer on behalf of an owner.\n @param owner The token owner.\n @param account The account to check the operatability of.\n @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise."},"id":3188,"implemented":true,"kind":"function","modifiers":[],"name":"_isOperatable","nameLocation":"30254:13:33","nodeType":"FunctionDefinition","parameters":{"id":3171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3166,"mutability":"mutable","name":"s","nameLocation":"30283:1:33","nodeType":"VariableDeclaration","scope":3188,"src":"30268:16:33","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"},"typeName":{"id":3165,"nodeType":"UserDefinedTypeName","pathNode":{"id":3164,"name":"Layout","nameLocations":["30268:6:33"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"30268:6:33"},"referencedDeclaration":1562,"src":"30268:6:33","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3168,"mutability":"mutable","name":"owner","nameLocation":"30294:5:33","nodeType":"VariableDeclaration","scope":3188,"src":"30286:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3167,"name":"address","nodeType":"ElementaryTypeName","src":"30286:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3170,"mutability":"mutable","name":"account","nameLocation":"30309:7:33","nodeType":"VariableDeclaration","scope":3188,"src":"30301:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3169,"name":"address","nodeType":"ElementaryTypeName","src":"30301:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30267:50:33"},"returnParameters":{"id":3174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3173,"mutability":"mutable","name":"operatable","nameLocation":"30345:10:33","nodeType":"VariableDeclaration","scope":3188,"src":"30340:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3172,"name":"bool","nodeType":"ElementaryTypeName","src":"30340:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30339:17:33"},"scope":3246,"src":"30245:185:33","stateMutability":"view","virtual":false,"visibility":"private"},{"body":{"id":3203,"nodeType":"Block","src":"30514:47:33","statements":[{"expression":{"arguments":[{"arguments":[{"id":3199,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3190,"src":"30547:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3198,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30539:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3197,"name":"uint160","nodeType":"ElementaryTypeName","src":"30539:7:33","typeDescriptions":{}}},"id":3200,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30539:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":3196,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30531:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3195,"name":"address","nodeType":"ElementaryTypeName","src":"30531:7:33","typeDescriptions":{}}},"id":3201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30531:23:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3194,"id":3202,"nodeType":"Return","src":"30524:30:33"}]},"id":3204,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenOwner","nameLocation":"30445:11:33","nodeType":"FunctionDefinition","parameters":{"id":3191,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3190,"mutability":"mutable","name":"owner","nameLocation":"30465:5:33","nodeType":"VariableDeclaration","scope":3204,"src":"30457:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3189,"name":"uint256","nodeType":"ElementaryTypeName","src":"30457:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30456:15:33"},"returnParameters":{"id":3194,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3193,"mutability":"mutable","name":"tokenOwner","nameLocation":"30502:10:33","nodeType":"VariableDeclaration","scope":3204,"src":"30494:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3192,"name":"address","nodeType":"ElementaryTypeName","src":"30494:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"30493:20:33"},"scope":3246,"src":"30436:125:33","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3218,"nodeType":"Block","src":"30644:43:33","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint160","typeString":"uint160"},"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3213,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3206,"src":"30669:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3212,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"30661:7:33","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":3211,"name":"uint160","nodeType":"ElementaryTypeName","src":"30661:7:33","typeDescriptions":{}}},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"30661:14:33","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30679:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30661:19:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3210,"id":3217,"nodeType":"Return","src":"30654:26:33"}]},"id":3219,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenExists","nameLocation":"30576:12:33","nodeType":"FunctionDefinition","parameters":{"id":3207,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3206,"mutability":"mutable","name":"owner","nameLocation":"30597:5:33","nodeType":"VariableDeclaration","scope":3219,"src":"30589:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3205,"name":"uint256","nodeType":"ElementaryTypeName","src":"30589:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30588:15:33"},"returnParameters":{"id":3210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3209,"mutability":"mutable","name":"tokenExists","nameLocation":"30631:11:33","nodeType":"VariableDeclaration","scope":3219,"src":"30626:16:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3208,"name":"bool","nodeType":"ElementaryTypeName","src":"30626:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30625:18:33"},"scope":3246,"src":"30567:120:33","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3230,"nodeType":"Block","src":"30774:56:33","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3228,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3226,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3221,"src":"30791:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":3227,"name":"BURNT_TOKEN_OWNER_VALUE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1588,"src":"30800:23:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30791:32:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3225,"id":3229,"nodeType":"Return","src":"30784:39:33"}]},"id":3231,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenWasBurnt","nameLocation":"30702:14:33","nodeType":"FunctionDefinition","parameters":{"id":3222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3221,"mutability":"mutable","name":"owner","nameLocation":"30725:5:33","nodeType":"VariableDeclaration","scope":3231,"src":"30717:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3220,"name":"uint256","nodeType":"ElementaryTypeName","src":"30717:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30716:15:33"},"returnParameters":{"id":3225,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3224,"mutability":"mutable","name":"tokenWasBurnt","nameLocation":"30759:13:33","nodeType":"VariableDeclaration","scope":3231,"src":"30754:18:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3223,"name":"bool","nodeType":"ElementaryTypeName","src":"30754:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30753:20:33"},"scope":3246,"src":"30693:137:33","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":3244,"nodeType":"Block","src":"30923:62:33","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3238,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3233,"src":"30940:5:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":3239,"name":"TOKEN_APPROVAL_OWNER_FLAG","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1585,"src":"30948:25:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"30940:33:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"30977:1:33","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"30940:38:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3237,"id":3243,"nodeType":"Return","src":"30933:45:33"}]},"id":3245,"implemented":true,"kind":"function","modifiers":[],"name":"_tokenHasApproval","nameLocation":"30845:17:33","nodeType":"FunctionDefinition","parameters":{"id":3234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3233,"mutability":"mutable","name":"owner","nameLocation":"30871:5:33","nodeType":"VariableDeclaration","scope":3245,"src":"30863:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3232,"name":"uint256","nodeType":"ElementaryTypeName","src":"30863:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"30862:15:33"},"returnParameters":{"id":3237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3236,"mutability":"mutable","name":"tokenHasApproval","nameLocation":"30905:16:33","nodeType":"VariableDeclaration","scope":3245,"src":"30900:21:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3235,"name":"bool","nodeType":"ElementaryTypeName","src":"30900:4:33","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"30899:23:33"},"scope":3246,"src":"30836:149:33","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3247,"src":"1368:29619:33","usedErrors":[],"usedEvents":[]}],"src":"32:30956:33"},"id":33},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol","exportedSymbols":{"ITokenMetadataResolver":[3312],"TokenMetadataBase":[3298],"TokenMetadataStorage":[3499]},"id":3299,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3248,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:34"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3250,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3299,"sourceUnit":3313,"src":"58:82:34","symbolAliases":[{"foreign":{"id":3249,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"66:22:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","file":"./../libraries/TokenMetadataStorage.sol","id":3252,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3299,"sourceUnit":3500,"src":"141:77:34","symbolAliases":[{"foreign":{"id":3251,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"149:20:34","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"TokenMetadataBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":3253,"nodeType":"StructuredDocumentation","src":"220:283:34","text":"@title TokenMetadataBase (proxiable version).\n @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\n @dev This contract is to be used via inheritance in a proxied implementation."},"fullyImplemented":true,"id":3298,"linearizedBaseContracts":[3298],"name":"TokenMetadataBase","nameLocation":"521:17:34","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3257,"libraryName":{"id":3254,"name":"TokenMetadataStorage","nameLocations":["551:20:34"],"nodeType":"IdentifierPath","referencedDeclaration":3499,"src":"551:20:34"},"nodeType":"UsingForDirective","src":"545:59:34","typeName":{"id":3256,"nodeType":"UserDefinedTypeName","pathNode":{"id":3255,"name":"TokenMetadataStorage.Layout","nameLocations":["576:20:34","597:6:34"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"576:27:34"},"referencedDeclaration":3326,"src":"576:27:34","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}}},{"body":{"id":3269,"nodeType":"Block","src":"776:60:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3263,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"793:20:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3499_$","typeString":"type(library TokenMetadataStorage)"}},"id":3264,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"814:6:34","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"793:27:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3265,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3266,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"823:4:34","memberName":"name","nodeType":"MemberAccess","referencedDeclaration":3438,"src":"793:34:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3326_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:36:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3262,"id":3268,"nodeType":"Return","src":"786:43:34"}]},"documentation":{"id":3258,"nodeType":"StructuredDocumentation","src":"610:91:34","text":"@notice Gets the token name. E.g. \"My Token\".\n @return tokenName The token name."},"functionSelector":"06fdde03","id":3270,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"715:4:34","nodeType":"FunctionDefinition","parameters":{"id":3259,"nodeType":"ParameterList","parameters":[],"src":"719:2:34"},"returnParameters":{"id":3262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3261,"mutability":"mutable","name":"tokenName","nameLocation":"765:9:34","nodeType":"VariableDeclaration","scope":3270,"src":"751:23:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3260,"name":"string","nodeType":"ElementaryTypeName","src":"751:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"750:25:34"},"scope":3298,"src":"706:130:34","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3282,"nodeType":"Block","src":"1013:62:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3276,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1030:20:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3499_$","typeString":"type(library TokenMetadataStorage)"}},"id":3277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:34","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"1030:27:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3278,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1060:6:34","memberName":"symbol","nodeType":"MemberAccess","referencedDeclaration":3451,"src":"1030:36:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3326_storage_ptr_$returns$_t_string_memory_ptr_$attached_to$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (string memory)"}},"id":3280,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1030:38:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3275,"id":3281,"nodeType":"Return","src":"1023:45:34"}]},"documentation":{"id":3271,"nodeType":"StructuredDocumentation","src":"842:92:34","text":"@notice Gets the token symbol. E.g. \"TOK\".\n @return tokenSymbol The token symbol."},"functionSelector":"95d89b41","id":3283,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"948:6:34","nodeType":"FunctionDefinition","parameters":{"id":3272,"nodeType":"ParameterList","parameters":[],"src":"954:2:34"},"returnParameters":{"id":3275,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3274,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1000:11:34","nodeType":"VariableDeclaration","scope":3283,"src":"986:25:34","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3273,"name":"string","nodeType":"ElementaryTypeName","src":"986:6:34","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"985:27:34"},"scope":3298,"src":"939:136:34","stateMutability":"view","virtual":true,"visibility":"public"},{"body":{"id":3296,"nodeType":"Block","src":"1319:72:34","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3290,"name":"TokenMetadataStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3499,"src":"1336:20:34","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_TokenMetadataStorage_$3499_$","typeString":"type(library TokenMetadataStorage)"}},"id":3291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1357:6:34","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3498,"src":"1336:27:34","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function () pure returns (struct TokenMetadataStorage.Layout storage pointer)"}},"id":3292,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:29:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3293,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1366:16:34","memberName":"metadataResolver","nodeType":"MemberAccess","referencedDeclaration":3465,"src":"1336:46:34","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$3326_storage_ptr_$returns$_t_contract$_ITokenMetadataResolver_$3312_$attached_to$_t_struct$_Layout_$3326_storage_ptr_$","typeString":"function (struct TokenMetadataStorage.Layout storage pointer) view returns (contract ITokenMetadataResolver)"}},"id":3294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1336:48:34","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3289,"id":3295,"nodeType":"Return","src":"1329:55:34"}]},"documentation":{"id":3284,"nodeType":"StructuredDocumentation","src":"1081:128:34","text":"@notice Gets the token metadata resolver address.\n @return tokenMetadataResolver The token metadata resolver address."},"functionSelector":"a0c76f62","id":3297,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"1223:16:34","nodeType":"FunctionDefinition","parameters":{"id":3285,"nodeType":"ParameterList","parameters":[],"src":"1239:2:34"},"returnParameters":{"id":3289,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3288,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1296:21:34","nodeType":"VariableDeclaration","scope":3297,"src":"1273:44:34","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3287,"nodeType":"UserDefinedTypeName","pathNode":{"id":3286,"name":"ITokenMetadataResolver","nameLocations":["1273:22:34"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1273:22:34"},"referencedDeclaration":3312,"src":"1273:22:34","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1272:46:34"},"scope":3298,"src":"1214:177:34","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":3299,"src":"503:890:34","usedErrors":[],"usedEvents":[]}],"src":"32:1362:34"},"id":34},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","exportedSymbols":{"ITokenMetadataResolver":[3312]},"id":3313,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3300,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:35"},{"abstract":false,"baseContracts":[],"canonicalName":"ITokenMetadataResolver","contractDependencies":[],"contractKind":"interface","documentation":{"id":3301,"nodeType":"StructuredDocumentation","src":"58:86:35","text":"@title ITokenMetadataResolver\n @notice Interface for Token Metadata Resolvers."},"fullyImplemented":false,"id":3312,"linearizedBaseContracts":[3312],"name":"ITokenMetadataResolver","nameLocation":"154:22:35","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3302,"nodeType":"StructuredDocumentation","src":"183:231:35","text":"@notice Gets the token metadata URI for a token.\n @param tokenContract The token contract for which to retrieve the token URI.\n @param tokenId The token identifier.\n @return tokenURI The token metadata URI."},"functionSelector":"f724dad7","id":3311,"implemented":false,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"428:16:35","nodeType":"FunctionDefinition","parameters":{"id":3307,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3304,"mutability":"mutable","name":"tokenContract","nameLocation":"453:13:35","nodeType":"VariableDeclaration","scope":3311,"src":"445:21:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3303,"name":"address","nodeType":"ElementaryTypeName","src":"445:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3306,"mutability":"mutable","name":"tokenId","nameLocation":"476:7:35","nodeType":"VariableDeclaration","scope":3311,"src":"468:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3305,"name":"uint256","nodeType":"ElementaryTypeName","src":"468:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"444:40:35"},"returnParameters":{"id":3310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3309,"mutability":"mutable","name":"tokenURI","nameLocation":"522:8:35","nodeType":"VariableDeclaration","scope":3311,"src":"508:22:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3308,"name":"string","nodeType":"ElementaryTypeName","src":"508:6:35","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"507:24:35"},"scope":3312,"src":"419:113:35","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3313,"src":"144:390:35","usedErrors":[],"usedEvents":[]}],"src":"32:503:35"},"id":35},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol","exportedSymbols":{"ITokenMetadataResolver":[3312],"ProxyInitialization":[1056],"TokenMetadataStorage":[3499]},"id":3500,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3314,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:36"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"./../interfaces/ITokenMetadataResolver.sol","id":3316,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3500,"sourceUnit":3313,"src":"58:82:36","symbolAliases":[{"foreign":{"id":3315,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"66:22:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":3318,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3500,"sourceUnit":1057,"src":"141:87:36","symbolAliases":[{"foreign":{"id":3317,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"149:19:36","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"TokenMetadataStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3499,"linearizedBaseContracts":[3499],"name":"TokenMetadataStorage","nameLocation":"238:20:36","nodeType":"ContractDefinition","nodes":[{"canonicalName":"TokenMetadataStorage.Layout","id":3326,"members":[{"constant":false,"id":3320,"mutability":"mutable","name":"tokenName","nameLocation":"296:9:36","nodeType":"VariableDeclaration","scope":3326,"src":"289:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3319,"name":"string","nodeType":"ElementaryTypeName","src":"289:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3322,"mutability":"mutable","name":"tokenSymbol","nameLocation":"322:11:36","nodeType":"VariableDeclaration","scope":3326,"src":"315:18:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3321,"name":"string","nodeType":"ElementaryTypeName","src":"315:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3325,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"366:21:36","nodeType":"VariableDeclaration","scope":3326,"src":"343:44:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3324,"nodeType":"UserDefinedTypeName","pathNode":{"id":3323,"name":"ITokenMetadataResolver","nameLocations":["343:22:36"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"343:22:36"},"referencedDeclaration":3312,"src":"343:22:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"name":"Layout","nameLocation":"272:6:36","nodeType":"StructDefinition","scope":3499,"src":"265:129:36","visibility":"public"},{"constant":true,"id":3339,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"426:19:36","nodeType":"VariableDeclaration","scope":3499,"src":"400:127:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3327,"name":"bytes32","nodeType":"ElementaryTypeName","src":"400:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3337,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e73746f72616765","id":3333,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"474:46:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""},"value":"animoca.token.metadata.TokenMetadata.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a5","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.storage\""}],"id":3332,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"464:9:36","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"464:57:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3331,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"456:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3330,"name":"uint256","nodeType":"ElementaryTypeName","src":"456:7:36","typeDescriptions":{}}},"id":3335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"456:66:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3336,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"525:1:36","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"456:70:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3329,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"448:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3328,"name":"bytes32","nodeType":"ElementaryTypeName","src":"448:7:36","typeDescriptions":{}}},"id":3338,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"448:79:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":3352,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"559:21:36","nodeType":"VariableDeclaration","scope":3499,"src":"533:127:36","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3340,"name":"bytes32","nodeType":"ElementaryTypeName","src":"533:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3350,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e746f6b656e2e6d657461646174612e546f6b656e4d657461646174612e7068617365","id":3346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"609:44:36","typeDescriptions":{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""},"value":"animoca.token.metadata.TokenMetadata.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_92f72593ca50a0096f68ee94e7000db40ed086164b695855e2250750b8bfaf59","typeString":"literal_string \"animoca.token.metadata.TokenMetadata.phase\""}],"id":3345,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"599:9:36","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":3347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"599:55:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":3344,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"591:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":3343,"name":"uint256","nodeType":"ElementaryTypeName","src":"591:7:36","typeDescriptions":{}}},"id":3348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"591:64:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":3349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"658:1:36","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"591:68:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3342,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"583:7:36","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":3341,"name":"bytes32","nodeType":"ElementaryTypeName","src":"583:7:36","typeDescriptions":{}}},"id":3351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"583:77:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":3384,"nodeType":"Block","src":"1209:134:36","statements":[{"expression":{"id":3370,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3366,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"1219:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3368,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1221:9:36","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3320,"src":"1219:11:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3369,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3358,"src":"1233:9:36","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1219:23:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3371,"nodeType":"ExpressionStatement","src":"1219:23:36"},{"expression":{"id":3376,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3372,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"1252:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3374,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1254:11:36","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3322,"src":"1252:13:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3375,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3360,"src":"1268:11:36","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"src":"1252:27:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3377,"nodeType":"ExpressionStatement","src":"1252:27:36"},{"expression":{"id":3382,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3378,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3356,"src":"1289:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1291:21:36","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3325,"src":"1289:23:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3381,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3363,"src":"1315:21:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"src":"1289:47:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"id":3383,"nodeType":"ExpressionStatement","src":"1289:47:36"}]},"documentation":{"id":3353,"nodeType":"StructuredDocumentation","src":"667:349:36","text":"@notice Initializes the metadata storage (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3385,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1030:15:36","nodeType":"FunctionDefinition","parameters":{"id":3364,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3356,"mutability":"mutable","name":"s","nameLocation":"1070:1:36","nodeType":"VariableDeclaration","scope":3385,"src":"1055:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3355,"nodeType":"UserDefinedTypeName","pathNode":{"id":3354,"name":"Layout","nameLocations":["1055:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"1055:6:36"},"referencedDeclaration":3326,"src":"1055:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3358,"mutability":"mutable","name":"tokenName","nameLocation":"1095:9:36","nodeType":"VariableDeclaration","scope":3385,"src":"1081:23:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3357,"name":"string","nodeType":"ElementaryTypeName","src":"1081:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3360,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1128:11:36","nodeType":"VariableDeclaration","scope":3385,"src":"1114:25:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3359,"name":"string","nodeType":"ElementaryTypeName","src":"1114:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3363,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"1172:21:36","nodeType":"VariableDeclaration","scope":3385,"src":"1149:44:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3362,"nodeType":"UserDefinedTypeName","pathNode":{"id":3361,"name":"ITokenMetadataResolver","nameLocations":["1149:22:36"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1149:22:36"},"referencedDeclaration":3312,"src":"1149:22:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1045:154:36"},"returnParameters":{"id":3365,"nodeType":"ParameterList","parameters":[],"src":"1209:0:36"},"scope":3499,"src":"1021:322:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3424,"nodeType":"Block","src":"2052:198:36","statements":[{"expression":{"arguments":[{"id":3402,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3352,"src":"2091:21:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":3403,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2114:1:36","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":3399,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1056,"src":"2062:19:36","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1056_$","typeString":"type(library ProxyInitialization)"}},"id":3401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2082:8:36","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1055,"src":"2062:28:36","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2062:54:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3405,"nodeType":"ExpressionStatement","src":"2062:54:36"},{"expression":{"id":3410,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3406,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"2126:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2128:9:36","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3320,"src":"2126:11:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3409,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3391,"src":"2140:9:36","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2126:23:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3411,"nodeType":"ExpressionStatement","src":"2126:23:36"},{"expression":{"id":3416,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3412,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"2159:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3414,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2161:11:36","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3322,"src":"2159:13:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3415,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3393,"src":"2175:11:36","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}},"src":"2159:27:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"id":3417,"nodeType":"ExpressionStatement","src":"2159:27:36"},{"expression":{"id":3422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3418,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3389,"src":"2196:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2198:21:36","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3325,"src":"2196:23:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3421,"name":"tokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3396,"src":"2222:21:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"src":"2196:47:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"id":3423,"nodeType":"ExpressionStatement","src":"2196:47:36"}]},"documentation":{"id":3386,"nodeType":"StructuredDocumentation","src":"1349:512:36","text":"@notice Initializes the metadata storage (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @param tokenName The token name.\n @param tokenSymbol The token symbol.\n @param tokenMetadataResolver The address of the metadata resolver contract."},"id":3425,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1875:9:36","nodeType":"FunctionDefinition","parameters":{"id":3397,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3389,"mutability":"mutable","name":"s","nameLocation":"1909:1:36","nodeType":"VariableDeclaration","scope":3425,"src":"1894:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3388,"nodeType":"UserDefinedTypeName","pathNode":{"id":3387,"name":"Layout","nameLocations":["1894:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"1894:6:36"},"referencedDeclaration":3326,"src":"1894:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3391,"mutability":"mutable","name":"tokenName","nameLocation":"1936:9:36","nodeType":"VariableDeclaration","scope":3425,"src":"1920:25:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3390,"name":"string","nodeType":"ElementaryTypeName","src":"1920:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3393,"mutability":"mutable","name":"tokenSymbol","nameLocation":"1971:11:36","nodeType":"VariableDeclaration","scope":3425,"src":"1955:27:36","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":3392,"name":"string","nodeType":"ElementaryTypeName","src":"1955:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":3396,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2015:21:36","nodeType":"VariableDeclaration","scope":3425,"src":"1992:44:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3395,"nodeType":"UserDefinedTypeName","pathNode":{"id":3394,"name":"ITokenMetadataResolver","nameLocations":["1992:22:36"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"1992:22:36"},"referencedDeclaration":3312,"src":"1992:22:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"1884:158:36"},"returnParameters":{"id":3398,"nodeType":"ParameterList","parameters":[],"src":"2052:0:36"},"scope":3499,"src":"1866:384:36","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3437,"nodeType":"Block","src":"2438:35:36","statements":[{"expression":{"expression":{"id":3434,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3429,"src":"2455:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3435,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2457:9:36","memberName":"tokenName","nodeType":"MemberAccess","referencedDeclaration":3320,"src":"2455:11:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3433,"id":3436,"nodeType":"Return","src":"2448:18:36"}]},"documentation":{"id":3426,"nodeType":"StructuredDocumentation","src":"2256:97:36","text":"@notice Gets the name of the token.\n @return tokenName The name of the token contract."},"id":3438,"implemented":true,"kind":"function","modifiers":[],"name":"name","nameLocation":"2367:4:36","nodeType":"FunctionDefinition","parameters":{"id":3430,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3429,"mutability":"mutable","name":"s","nameLocation":"2387:1:36","nodeType":"VariableDeclaration","scope":3438,"src":"2372:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3428,"nodeType":"UserDefinedTypeName","pathNode":{"id":3427,"name":"Layout","nameLocations":["2372:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"2372:6:36"},"referencedDeclaration":3326,"src":"2372:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2371:18:36"},"returnParameters":{"id":3433,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3432,"mutability":"mutable","name":"tokenName","nameLocation":"2427:9:36","nodeType":"VariableDeclaration","scope":3438,"src":"2413:23:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3431,"name":"string","nodeType":"ElementaryTypeName","src":"2413:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2412:25:36"},"scope":3499,"src":"2358:115:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3450,"nodeType":"Block","src":"2671:37:36","statements":[{"expression":{"expression":{"id":3447,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3442,"src":"2688:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3448,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2690:11:36","memberName":"tokenSymbol","nodeType":"MemberAccess","referencedDeclaration":3322,"src":"2688:13:36","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}},"functionReturnParameters":3446,"id":3449,"nodeType":"Return","src":"2681:20:36"}]},"documentation":{"id":3439,"nodeType":"StructuredDocumentation","src":"2479:103:36","text":"@notice Gets the symbol of the token.\n @return tokenSymbol The symbol of the token contract."},"id":3451,"implemented":true,"kind":"function","modifiers":[],"name":"symbol","nameLocation":"2596:6:36","nodeType":"FunctionDefinition","parameters":{"id":3443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3442,"mutability":"mutable","name":"s","nameLocation":"2618:1:36","nodeType":"VariableDeclaration","scope":3451,"src":"2603:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3441,"nodeType":"UserDefinedTypeName","pathNode":{"id":3440,"name":"Layout","nameLocations":["2603:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"2603:6:36"},"referencedDeclaration":3326,"src":"2603:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2602:18:36"},"returnParameters":{"id":3446,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3445,"mutability":"mutable","name":"tokenSymbol","nameLocation":"2658:11:36","nodeType":"VariableDeclaration","scope":3451,"src":"2644:25:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3444,"name":"string","nodeType":"ElementaryTypeName","src":"2644:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2643:27:36"},"scope":3499,"src":"2587:121:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3464,"nodeType":"Block","src":"2974:47:36","statements":[{"expression":{"expression":{"id":3461,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3455,"src":"2991:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3462,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2993:21:36","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3325,"src":"2991:23:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"functionReturnParameters":3460,"id":3463,"nodeType":"Return","src":"2984:30:36"}]},"documentation":{"id":3452,"nodeType":"StructuredDocumentation","src":"2714:142:36","text":"@notice Gets the address of the token metadata resolver.\n @return tokenMetadataResolver The address of the token metadata resolver."},"id":3465,"implemented":true,"kind":"function","modifiers":[],"name":"metadataResolver","nameLocation":"2870:16:36","nodeType":"FunctionDefinition","parameters":{"id":3456,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3455,"mutability":"mutable","name":"s","nameLocation":"2902:1:36","nodeType":"VariableDeclaration","scope":3465,"src":"2887:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3454,"nodeType":"UserDefinedTypeName","pathNode":{"id":3453,"name":"Layout","nameLocations":["2887:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"2887:6:36"},"referencedDeclaration":3326,"src":"2887:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"2886:18:36"},"returnParameters":{"id":3460,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3459,"mutability":"mutable","name":"tokenMetadataResolver","nameLocation":"2951:21:36","nodeType":"VariableDeclaration","scope":3465,"src":"2928:44:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":3458,"nodeType":"UserDefinedTypeName","pathNode":{"id":3457,"name":"ITokenMetadataResolver","nameLocations":["2928:22:36"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"2928:22:36"},"referencedDeclaration":3312,"src":"2928:22:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"}],"src":"2927:46:36"},"scope":3499,"src":"2861:160:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3485,"nodeType":"Block","src":"3347:88:36","statements":[{"expression":{"arguments":[{"id":3481,"name":"tokenContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3471,"src":"3405:13:36","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3482,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3473,"src":"3420:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"expression":{"id":3478,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3469,"src":"3364:1:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout storage pointer"}},"id":3479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3366:21:36","memberName":"tokenMetadataResolver","nodeType":"MemberAccess","referencedDeclaration":3325,"src":"3364:23:36","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"id":3480,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3388:16:36","memberName":"tokenMetadataURI","nodeType":"MemberAccess","referencedDeclaration":3311,"src":"3364:40:36","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (address,uint256) view external returns (string memory)"}},"id":3483,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3364:64:36","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":3477,"id":3484,"nodeType":"Return","src":"3357:71:36"}]},"documentation":{"id":3466,"nodeType":"StructuredDocumentation","src":"3027:193:36","text":"@notice Gets the token metadata URI retieved from the metadata resolver contract.\n @param tokenContract The address of the token contract.\n @param tokenId The ID of the token."},"id":3486,"implemented":true,"kind":"function","modifiers":[],"name":"tokenMetadataURI","nameLocation":"3234:16:36","nodeType":"FunctionDefinition","parameters":{"id":3474,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3469,"mutability":"mutable","name":"s","nameLocation":"3266:1:36","nodeType":"VariableDeclaration","scope":3486,"src":"3251:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3468,"nodeType":"UserDefinedTypeName","pathNode":{"id":3467,"name":"Layout","nameLocations":["3251:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"3251:6:36"},"referencedDeclaration":3326,"src":"3251:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":3471,"mutability":"mutable","name":"tokenContract","nameLocation":"3277:13:36","nodeType":"VariableDeclaration","scope":3486,"src":"3269:21:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3470,"name":"address","nodeType":"ElementaryTypeName","src":"3269:7:36","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3473,"mutability":"mutable","name":"tokenId","nameLocation":"3300:7:36","nodeType":"VariableDeclaration","scope":3486,"src":"3292:15:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3472,"name":"uint256","nodeType":"ElementaryTypeName","src":"3292:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3250:58:36"},"returnParameters":{"id":3477,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3476,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3486,"src":"3332:13:36","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3475,"name":"string","nodeType":"ElementaryTypeName","src":"3332:6:36","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3331:15:36"},"scope":3499,"src":"3225:210:36","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3497,"nodeType":"Block","src":"3500:115:36","statements":[{"assignments":[3493],"declarations":[{"constant":false,"id":3493,"mutability":"mutable","name":"position","nameLocation":"3518:8:36","nodeType":"VariableDeclaration","scope":3497,"src":"3510:16:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3492,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3510:7:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3495,"initialValue":{"id":3494,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3339,"src":"3529:19:36","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"3510:38:36"},{"AST":{"nativeSrc":"3567:42:36","nodeType":"YulBlock","src":"3567:42:36","statements":[{"nativeSrc":"3581:18:36","nodeType":"YulAssignment","src":"3581:18:36","value":{"name":"position","nativeSrc":"3591:8:36","nodeType":"YulIdentifier","src":"3591:8:36"},"variableNames":[{"name":"s.slot","nativeSrc":"3581:6:36","nodeType":"YulIdentifier","src":"3581:6:36"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":3493,"isOffset":false,"isSlot":false,"src":"3591:8:36","valueSize":1},{"declaration":3490,"isOffset":false,"isSlot":true,"src":"3581:6:36","suffix":"slot","valueSize":1}],"id":3496,"nodeType":"InlineAssembly","src":"3558:51:36"}]},"id":3498,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"3450:6:36","nodeType":"FunctionDefinition","parameters":{"id":3487,"nodeType":"ParameterList","parameters":[],"src":"3456:2:36"},"returnParameters":{"id":3491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3490,"mutability":"mutable","name":"s","nameLocation":"3497:1:36","nodeType":"VariableDeclaration","scope":3498,"src":"3482:16:36","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"},"typeName":{"id":3489,"nodeType":"UserDefinedTypeName","pathNode":{"id":3488,"name":"Layout","nameLocations":["3482:6:36"],"nodeType":"IdentifierPath","referencedDeclaration":3326,"src":"3482:6:36"},"referencedDeclaration":3326,"src":"3482:6:36","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$3326_storage_ptr","typeString":"struct TokenMetadataStorage.Layout"}},"visibility":"internal"}],"src":"3481:18:36"},"scope":3499,"src":"3441:174:36","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3500,"src":"230:3387:36","usedErrors":[],"usedEvents":[]}],"src":"32:3586:36"},"id":36},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[3829]},"id":3830,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3501,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:37"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":3502,"nodeType":"StructuredDocumentation","src":"126:67:37","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":3829,"linearizedBaseContracts":[3829],"name":"Address","nameLocation":"202:7:37","nodeType":"ContractDefinition","nodes":[{"body":{"id":3516,"nodeType":"Block","src":"1478:254:37","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3514,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":3510,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3505,"src":"1702:7:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3511,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:37","memberName":"code","nodeType":"MemberAccess","src":"1702:12:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3512,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:37","memberName":"length","nodeType":"MemberAccess","src":"1702:19:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3513,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":3509,"id":3515,"nodeType":"Return","src":"1695:30:37"}]},"documentation":{"id":3503,"nodeType":"StructuredDocumentation","src":"216:1191:37","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":3517,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:37","nodeType":"FunctionDefinition","parameters":{"id":3506,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3505,"mutability":"mutable","name":"account","nameLocation":"1440:7:37","nodeType":"VariableDeclaration","scope":3517,"src":"1432:15:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3504,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:37"},"returnParameters":{"id":3509,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3508,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3517,"src":"1472:4:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3507,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:37"},"scope":3829,"src":"1412:320:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3550,"nodeType":"Block","src":"2718:241:37","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3532,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3528,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3829","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3829","typeString":"library Address"}],"id":3527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3526,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:37","typeDescriptions":{}}},"id":3529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:37","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3531,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2761:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":3533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":3525,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3534,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3535,"nodeType":"ExpressionStatement","src":"2728:73:37"},{"assignments":[3537,null],"declarations":[{"constant":false,"id":3537,"mutability":"mutable","name":"success","nameLocation":"2818:7:37","nodeType":"VariableDeclaration","scope":3550,"src":"2813:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3536,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":3544,"initialValue":{"arguments":[{"hexValue":"","id":3542,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":3538,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3520,"src":"2831:9:37","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":3539,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:37","memberName":"call","nodeType":"MemberAccess","src":"2831:14:37","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3540,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3522,"src":"2853:6:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:37","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3543,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:37"},{"expression":{"arguments":[{"id":3546,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3537,"src":"2882:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":3547,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":3545,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3548,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3549,"nodeType":"ExpressionStatement","src":"2874:78:37"}]},"documentation":{"id":3518,"nodeType":"StructuredDocumentation","src":"1738:904:37","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":3551,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:37","nodeType":"FunctionDefinition","parameters":{"id":3523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3520,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:37","nodeType":"VariableDeclaration","scope":3551,"src":"2666:25:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":3519,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:37","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":3522,"mutability":"mutable","name":"amount","nameLocation":"2701:6:37","nodeType":"VariableDeclaration","scope":3551,"src":"2693:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3521,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:37"},"returnParameters":{"id":3524,"nodeType":"ParameterList","parameters":[],"src":"2718:0:37"},"scope":3829,"src":"2647:312:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3568,"nodeType":"Block","src":"3790:96:37","statements":[{"expression":{"arguments":[{"id":3562,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3554,"src":"3829:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3563,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"3837:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3564,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":3565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":3561,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3609,3653],"referencedDeclaration":3653,"src":"3807:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3566,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3560,"id":3567,"nodeType":"Return","src":"3800:79:37"}]},"documentation":{"id":3552,"nodeType":"StructuredDocumentation","src":"2965:731:37","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":3569,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:37","nodeType":"FunctionDefinition","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3554,"mutability":"mutable","name":"target","nameLocation":"3731:6:37","nodeType":"VariableDeclaration","scope":3569,"src":"3723:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3553,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3556,"mutability":"mutable","name":"data","nameLocation":"3752:4:37","nodeType":"VariableDeclaration","scope":3569,"src":"3739:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3555,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:37"},"returnParameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3569,"src":"3776:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3558,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:37"},"scope":3829,"src":"3701:185:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3588,"nodeType":"Block","src":"4255:76:37","statements":[{"expression":{"arguments":[{"id":3582,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3572,"src":"4294:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3583,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3574,"src":"4302:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":3584,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":3585,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3576,"src":"4311:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3581,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3609,3653],"referencedDeclaration":3653,"src":"4272:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3586,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3580,"id":3587,"nodeType":"Return","src":"4265:59:37"}]},"documentation":{"id":3570,"nodeType":"StructuredDocumentation","src":"3892:211:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3589,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:37","nodeType":"FunctionDefinition","parameters":{"id":3577,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3572,"mutability":"mutable","name":"target","nameLocation":"4147:6:37","nodeType":"VariableDeclaration","scope":3589,"src":"4139:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3571,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3574,"mutability":"mutable","name":"data","nameLocation":"4176:4:37","nodeType":"VariableDeclaration","scope":3589,"src":"4163:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3573,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3576,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:37","nodeType":"VariableDeclaration","scope":3589,"src":"4190:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3575,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:37"},"returnParameters":{"id":3580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3589,"src":"4241:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3578,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:37"},"scope":3829,"src":"4108:223:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3608,"nodeType":"Block","src":"4806:111:37","statements":[{"expression":{"arguments":[{"id":3602,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3592,"src":"4845:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3603,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3594,"src":"4853:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3604,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3596,"src":"4859:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":3605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":3601,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[3609,3653],"referencedDeclaration":3653,"src":"4823:21:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":3606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3600,"id":3607,"nodeType":"Return","src":"4816:94:37"}]},"documentation":{"id":3590,"nodeType":"StructuredDocumentation","src":"4337:351:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":3609,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:37","nodeType":"FunctionDefinition","parameters":{"id":3597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3592,"mutability":"mutable","name":"target","nameLocation":"4732:6:37","nodeType":"VariableDeclaration","scope":3609,"src":"4724:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3591,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3594,"mutability":"mutable","name":"data","nameLocation":"4753:4:37","nodeType":"VariableDeclaration","scope":3609,"src":"4740:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3593,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3596,"mutability":"mutable","name":"value","nameLocation":"4767:5:37","nodeType":"VariableDeclaration","scope":3609,"src":"4759:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3595,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:37"},"returnParameters":{"id":3600,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3599,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3609,"src":"4792:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3598,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:37"},"scope":3829,"src":"4693:224:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3652,"nodeType":"Block","src":"5344:267:37","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":3626,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:37","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$3829","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$3829","typeString":"library Address"}],"id":3625,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:37","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3624,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:37","typeDescriptions":{}}},"id":3627,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:37","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3629,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"5387:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":3631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":3623,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3633,"nodeType":"ExpressionStatement","src":"5354:81:37"},{"assignments":[3635,3637],"declarations":[{"constant":false,"id":3635,"mutability":"mutable","name":"success","nameLocation":"5451:7:37","nodeType":"VariableDeclaration","scope":3652,"src":"5446:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3634,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3637,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:37","nodeType":"VariableDeclaration","scope":3652,"src":"5460:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3636,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3644,"initialValue":{"arguments":[{"id":3642,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3614,"src":"5513:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3638,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"5487:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:37","memberName":"call","nodeType":"MemberAccess","src":"5487:11:37","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3641,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":3640,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3616,"src":"5506:5:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:37","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":3643,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:37"},{"expression":{"arguments":[{"id":3646,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3612,"src":"5562:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3647,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3635,"src":"5570:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3648,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3637,"src":"5579:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3649,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"5591:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3645,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"5535:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3650,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3622,"id":3651,"nodeType":"Return","src":"5528:76:37"}]},"documentation":{"id":3610,"nodeType":"StructuredDocumentation","src":"4923:237:37","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":3653,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:37","nodeType":"FunctionDefinition","parameters":{"id":3619,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3612,"mutability":"mutable","name":"target","nameLocation":"5213:6:37","nodeType":"VariableDeclaration","scope":3653,"src":"5205:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3611,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3614,"mutability":"mutable","name":"data","nameLocation":"5242:4:37","nodeType":"VariableDeclaration","scope":3653,"src":"5229:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3613,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3616,"mutability":"mutable","name":"value","nameLocation":"5264:5:37","nodeType":"VariableDeclaration","scope":3653,"src":"5256:13:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3615,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3618,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:37","nodeType":"VariableDeclaration","scope":3653,"src":"5279:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3617,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:37"},"returnParameters":{"id":3622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3621,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3653,"src":"5330:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3620,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:37"},"scope":3829,"src":"5165:446:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3669,"nodeType":"Block","src":"5888:97:37","statements":[{"expression":{"arguments":[{"id":3664,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3656,"src":"5924:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3665,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3658,"src":"5932:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":3666,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":3663,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[3670,3699],"referencedDeclaration":3699,"src":"5905:18:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":3667,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3662,"id":3668,"nodeType":"Return","src":"5898:80:37"}]},"documentation":{"id":3654,"nodeType":"StructuredDocumentation","src":"5617:166:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3670,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:37","nodeType":"FunctionDefinition","parameters":{"id":3659,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3656,"mutability":"mutable","name":"target","nameLocation":"5824:6:37","nodeType":"VariableDeclaration","scope":3670,"src":"5816:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3655,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3658,"mutability":"mutable","name":"data","nameLocation":"5845:4:37","nodeType":"VariableDeclaration","scope":3670,"src":"5832:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3657,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:37"},"returnParameters":{"id":3662,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3661,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3670,"src":"5874:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3660,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:37"},"scope":3829,"src":"5788:197:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3698,"nodeType":"Block","src":"6327:168:37","statements":[{"assignments":[3683,3685],"declarations":[{"constant":false,"id":3683,"mutability":"mutable","name":"success","nameLocation":"6343:7:37","nodeType":"VariableDeclaration","scope":3698,"src":"6338:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3682,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3685,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:37","nodeType":"VariableDeclaration","scope":3698,"src":"6352:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3684,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3690,"initialValue":{"arguments":[{"id":3688,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3675,"src":"6397:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3686,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"6379:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:37","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:37","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":3689,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:37"},{"expression":{"arguments":[{"id":3692,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3673,"src":"6446:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3693,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3683,"src":"6454:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3694,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3685,"src":"6463:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3695,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3677,"src":"6475:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3691,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"6419:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3681,"id":3697,"nodeType":"Return","src":"6412:76:37"}]},"documentation":{"id":3671,"nodeType":"StructuredDocumentation","src":"5991:173:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":3699,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:37","nodeType":"FunctionDefinition","parameters":{"id":3678,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3673,"mutability":"mutable","name":"target","nameLocation":"6214:6:37","nodeType":"VariableDeclaration","scope":3699,"src":"6206:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3675,"mutability":"mutable","name":"data","nameLocation":"6243:4:37","nodeType":"VariableDeclaration","scope":3699,"src":"6230:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3674,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3677,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:37","nodeType":"VariableDeclaration","scope":3699,"src":"6257:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3676,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:37"},"returnParameters":{"id":3681,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3680,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3699,"src":"6313:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3679,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:37"},"scope":3829,"src":"6169:326:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3715,"nodeType":"Block","src":"6771:101:37","statements":[{"expression":{"arguments":[{"id":3710,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3702,"src":"6809:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3711,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3704,"src":"6817:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":3712,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":3709,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[3716,3745],"referencedDeclaration":3745,"src":"6788:20:37","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":3713,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3708,"id":3714,"nodeType":"Return","src":"6781:84:37"}]},"documentation":{"id":3700,"nodeType":"StructuredDocumentation","src":"6501:168:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3716,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:37","nodeType":"FunctionDefinition","parameters":{"id":3705,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3702,"mutability":"mutable","name":"target","nameLocation":"6712:6:37","nodeType":"VariableDeclaration","scope":3716,"src":"6704:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3701,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3704,"mutability":"mutable","name":"data","nameLocation":"6733:4:37","nodeType":"VariableDeclaration","scope":3716,"src":"6720:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3703,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:37"},"returnParameters":{"id":3708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3707,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3716,"src":"6757:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3706,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:37"},"scope":3829,"src":"6674:198:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3744,"nodeType":"Block","src":"7213:170:37","statements":[{"assignments":[3729,3731],"declarations":[{"constant":false,"id":3729,"mutability":"mutable","name":"success","nameLocation":"7229:7:37","nodeType":"VariableDeclaration","scope":3744,"src":"7224:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3728,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3731,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:37","nodeType":"VariableDeclaration","scope":3744,"src":"7238:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3730,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":3736,"initialValue":{"arguments":[{"id":3734,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3721,"src":"7285:4:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":3732,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7265:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:37","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:37","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":3735,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:37"},{"expression":{"arguments":[{"id":3738,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3719,"src":"7334:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3739,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3729,"src":"7342:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":3740,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3731,"src":"7351:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3741,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3723,"src":"7363:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3737,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3784,"src":"7307:26:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":3742,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3727,"id":3743,"nodeType":"Return","src":"7300:76:37"}]},"documentation":{"id":3717,"nodeType":"StructuredDocumentation","src":"6878:175:37","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":3745,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:37","nodeType":"FunctionDefinition","parameters":{"id":3724,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3719,"mutability":"mutable","name":"target","nameLocation":"7105:6:37","nodeType":"VariableDeclaration","scope":3745,"src":"7097:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3718,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3721,"mutability":"mutable","name":"data","nameLocation":"7134:4:37","nodeType":"VariableDeclaration","scope":3745,"src":"7121:17:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3720,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3723,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:37","nodeType":"VariableDeclaration","scope":3745,"src":"7148:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3722,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:37"},"returnParameters":{"id":3727,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3726,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3745,"src":"7199:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3725,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:37"},"scope":3829,"src":"7058:325:37","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3783,"nodeType":"Block","src":"7865:434:37","statements":[{"condition":{"id":3759,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3750,"src":"7879:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3781,"nodeType":"Block","src":"8235:58:37","statements":[{"expression":{"arguments":[{"id":3777,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"8257:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3778,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3754,"src":"8269:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3776,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"8249:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3779,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3780,"nodeType":"ExpressionStatement","src":"8249:33:37"}]},"id":3782,"nodeType":"IfStatement","src":"7875:418:37","trueBody":{"id":3775,"nodeType":"Block","src":"7888:341:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3763,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3760,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"7906:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3761,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:37","memberName":"length","nodeType":"MemberAccess","src":"7906:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3762,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3772,"nodeType":"IfStatement","src":"7902:286:37","trueBody":{"id":3771,"nodeType":"Block","src":"7930:258:37","statements":[{"expression":{"arguments":[{"arguments":[{"id":3766,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3748,"src":"8132:6:37","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3765,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3517,"src":"8121:10:37","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":3767,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":3768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:37","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":3764,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:37","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3770,"nodeType":"ExpressionStatement","src":"8113:60:37"}]}},{"expression":{"id":3773,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3752,"src":"8208:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3758,"id":3774,"nodeType":"Return","src":"8201:17:37"}]}}]},"documentation":{"id":3746,"nodeType":"StructuredDocumentation","src":"7389:277:37","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":3784,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:37","nodeType":"FunctionDefinition","parameters":{"id":3755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3748,"mutability":"mutable","name":"target","nameLocation":"7724:6:37","nodeType":"VariableDeclaration","scope":3784,"src":"7716:14:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3747,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3750,"mutability":"mutable","name":"success","nameLocation":"7745:7:37","nodeType":"VariableDeclaration","scope":3784,"src":"7740:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3749,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3752,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:37","nodeType":"VariableDeclaration","scope":3784,"src":"7762:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3751,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3754,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:37","nodeType":"VariableDeclaration","scope":3784,"src":"7795:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3753,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:37"},"returnParameters":{"id":3758,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3757,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3784,"src":"7851:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3756,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:37"},"scope":3829,"src":"7671:628:37","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3807,"nodeType":"Block","src":"8680:135:37","statements":[{"condition":{"id":3796,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3787,"src":"8694:7:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3805,"nodeType":"Block","src":"8751:58:37","statements":[{"expression":{"arguments":[{"id":3801,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"8773:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":3802,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3791,"src":"8785:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3800,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3828,"src":"8765:7:37","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":3803,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3804,"nodeType":"ExpressionStatement","src":"8765:33:37"}]},"id":3806,"nodeType":"IfStatement","src":"8690:119:37","trueBody":{"id":3799,"nodeType":"Block","src":"8703:42:37","statements":[{"expression":{"id":3797,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3789,"src":"8724:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":3795,"id":3798,"nodeType":"Return","src":"8717:17:37"}]}}]},"documentation":{"id":3785,"nodeType":"StructuredDocumentation","src":"8305:210:37","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":3808,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:37","nodeType":"FunctionDefinition","parameters":{"id":3792,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3787,"mutability":"mutable","name":"success","nameLocation":"8560:7:37","nodeType":"VariableDeclaration","scope":3808,"src":"8555:12:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3786,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":3789,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:37","nodeType":"VariableDeclaration","scope":3808,"src":"8577:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3788,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3791,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:37","nodeType":"VariableDeclaration","scope":3808,"src":"8610:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3790,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:37"},"returnParameters":{"id":3795,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3794,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3808,"src":"8666:12:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3793,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:37"},"scope":3829,"src":"8520:295:37","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3827,"nodeType":"Block","src":"8904:457:37","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3818,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":3815,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3810,"src":"8980:10:37","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":3816,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:37","memberName":"length","nodeType":"MemberAccess","src":"8980:17:37","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":3817,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:37","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:37","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":3825,"nodeType":"Block","src":"9310:45:37","statements":[{"expression":{"arguments":[{"id":3822,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3812,"src":"9331:12:37","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":3821,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:37","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":3823,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:37","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3824,"nodeType":"ExpressionStatement","src":"9324:20:37"}]},"id":3826,"nodeType":"IfStatement","src":"8976:379:37","trueBody":{"id":3820,"nodeType":"Block","src":"9003:301:37","statements":[{"AST":{"nativeSrc":"9161:133:37","nodeType":"YulBlock","src":"9161:133:37","statements":[{"nativeSrc":"9179:40:37","nodeType":"YulVariableDeclaration","src":"9179:40:37","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:37","nodeType":"YulIdentifier","src":"9208:10:37"}],"functionName":{"name":"mload","nativeSrc":"9202:5:37","nodeType":"YulIdentifier","src":"9202:5:37"},"nativeSrc":"9202:17:37","nodeType":"YulFunctionCall","src":"9202:17:37"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:37","nodeType":"YulTypedName","src":"9183:15:37","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:37","nodeType":"YulLiteral","src":"9247:2:37","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:37","nodeType":"YulIdentifier","src":"9251:10:37"}],"functionName":{"name":"add","nativeSrc":"9243:3:37","nodeType":"YulIdentifier","src":"9243:3:37"},"nativeSrc":"9243:19:37","nodeType":"YulFunctionCall","src":"9243:19:37"},{"name":"returndata_size","nativeSrc":"9264:15:37","nodeType":"YulIdentifier","src":"9264:15:37"}],"functionName":{"name":"revert","nativeSrc":"9236:6:37","nodeType":"YulIdentifier","src":"9236:6:37"},"nativeSrc":"9236:44:37","nodeType":"YulFunctionCall","src":"9236:44:37"},"nativeSrc":"9236:44:37","nodeType":"YulExpressionStatement","src":"9236:44:37"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3810,"isOffset":false,"isSlot":false,"src":"9208:10:37","valueSize":1},{"declaration":3810,"isOffset":false,"isSlot":false,"src":"9251:10:37","valueSize":1}],"id":3819,"nodeType":"InlineAssembly","src":"9152:142:37"}]}}]},"id":3828,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:37","nodeType":"FunctionDefinition","parameters":{"id":3813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3810,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:37","nodeType":"VariableDeclaration","scope":3828,"src":"8838:23:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3809,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:37","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":3812,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:37","nodeType":"VariableDeclaration","scope":3828,"src":"8863:26:37","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":3811,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:37","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:37"},"returnParameters":{"id":3814,"nodeType":"ParameterList","parameters":[],"src":"8904:0:37"},"scope":3829,"src":"8821:540:37","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":3830,"src":"194:9169:37","usedErrors":[],"usedEvents":[]}],"src":"101:9263:37"},"id":37},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[3851]},"id":3852,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3831,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:38"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":3832,"nodeType":"StructuredDocumentation","src":"111:496:38","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":3851,"linearizedBaseContracts":[3851],"name":"Context","nameLocation":"626:7:38","nodeType":"ContractDefinition","nodes":[{"body":{"id":3840,"nodeType":"Block","src":"702:34:38","statements":[{"expression":{"expression":{"id":3837,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:38","memberName":"sender","nodeType":"MemberAccess","src":"719:10:38","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":3836,"id":3839,"nodeType":"Return","src":"712:17:38"}]},"id":3841,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:38","nodeType":"FunctionDefinition","parameters":{"id":3833,"nodeType":"ParameterList","parameters":[],"src":"659:2:38"},"returnParameters":{"id":3836,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3835,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3841,"src":"693:7:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3834,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:38"},"scope":3851,"src":"640:96:38","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":3849,"nodeType":"Block","src":"809:32:38","statements":[{"expression":{"expression":{"id":3846,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:38","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":3847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:38","memberName":"data","nodeType":"MemberAccess","src":"826:8:38","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":3845,"id":3848,"nodeType":"Return","src":"819:15:38"}]},"id":3850,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:38","nodeType":"FunctionDefinition","parameters":{"id":3842,"nodeType":"ParameterList","parameters":[],"src":"759:2:38"},"returnParameters":{"id":3845,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3844,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3850,"src":"793:14:38","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3843,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:38","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:38"},"scope":3851,"src":"742:99:38","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":3852,"src":"608:235:38","usedErrors":[],"usedEvents":[]}],"src":"86:758:38"},"id":38},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[3961]},"id":3962,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3853,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:39"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":3854,"nodeType":"StructuredDocumentation","src":"218:1201:39","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":3961,"linearizedBaseContracts":[3961],"name":"StorageSlot","nameLocation":"1428:11:39","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":3857,"members":[{"constant":false,"id":3856,"mutability":"mutable","name":"value","nameLocation":"1483:5:39","nodeType":"VariableDeclaration","scope":3857,"src":"1475:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3855,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:39","nodeType":"StructDefinition","scope":3961,"src":"1446:49:39","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":3860,"members":[{"constant":false,"id":3859,"mutability":"mutable","name":"value","nameLocation":"1535:5:39","nodeType":"VariableDeclaration","scope":3860,"src":"1530:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3858,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:39","nodeType":"StructDefinition","scope":3961,"src":"1501:46:39","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":3863,"members":[{"constant":false,"id":3862,"mutability":"mutable","name":"value","nameLocation":"1590:5:39","nodeType":"VariableDeclaration","scope":3863,"src":"1582:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3861,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:39","nodeType":"StructDefinition","scope":3961,"src":"1553:49:39","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":3866,"members":[{"constant":false,"id":3865,"mutability":"mutable","name":"value","nameLocation":"1645:5:39","nodeType":"VariableDeclaration","scope":3866,"src":"1637:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3864,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:39","nodeType":"StructDefinition","scope":3961,"src":"1608:49:39","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":3869,"members":[{"constant":false,"id":3868,"mutability":"mutable","name":"value","nameLocation":"1698:5:39","nodeType":"VariableDeclaration","scope":3869,"src":"1691:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3867,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:39","nodeType":"StructDefinition","scope":3961,"src":"1663:47:39","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":3872,"members":[{"constant":false,"id":3871,"mutability":"mutable","name":"value","nameLocation":"1749:5:39","nodeType":"VariableDeclaration","scope":3872,"src":"1743:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3870,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:39","nodeType":"StructDefinition","scope":3961,"src":"1716:45:39","visibility":"public"},{"body":{"id":3882,"nodeType":"Block","src":"1943:106:39","statements":[{"AST":{"nativeSrc":"2005:38:39","nodeType":"YulBlock","src":"2005:38:39","statements":[{"nativeSrc":"2019:14:39","nodeType":"YulAssignment","src":"2019:14:39","value":{"name":"slot","nativeSrc":"2029:4:39","nodeType":"YulIdentifier","src":"2029:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:39","nodeType":"YulIdentifier","src":"2019:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3879,"isOffset":false,"isSlot":true,"src":"2019:6:39","suffix":"slot","valueSize":1},{"declaration":3875,"isOffset":false,"isSlot":false,"src":"2029:4:39","valueSize":1}],"id":3881,"nodeType":"InlineAssembly","src":"1996:47:39"}]},"documentation":{"id":3873,"nodeType":"StructuredDocumentation","src":"1767:87:39","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":3883,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:39","nodeType":"FunctionDefinition","parameters":{"id":3876,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3875,"mutability":"mutable","name":"slot","nameLocation":"1891:4:39","nodeType":"VariableDeclaration","scope":3883,"src":"1883:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3874,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:39"},"returnParameters":{"id":3880,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3879,"mutability":"mutable","name":"r","nameLocation":"1940:1:39","nodeType":"VariableDeclaration","scope":3883,"src":"1920:21:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3857_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":3878,"nodeType":"UserDefinedTypeName","pathNode":{"id":3877,"name":"AddressSlot","nameLocations":["1920:11:39"],"nodeType":"IdentifierPath","referencedDeclaration":3857,"src":"1920:11:39"},"referencedDeclaration":3857,"src":"1920:11:39","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$3857_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:39"},"scope":3961,"src":"1859:190:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3893,"nodeType":"Block","src":"2231:106:39","statements":[{"AST":{"nativeSrc":"2293:38:39","nodeType":"YulBlock","src":"2293:38:39","statements":[{"nativeSrc":"2307:14:39","nodeType":"YulAssignment","src":"2307:14:39","value":{"name":"slot","nativeSrc":"2317:4:39","nodeType":"YulIdentifier","src":"2317:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:39","nodeType":"YulIdentifier","src":"2307:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3890,"isOffset":false,"isSlot":true,"src":"2307:6:39","suffix":"slot","valueSize":1},{"declaration":3886,"isOffset":false,"isSlot":false,"src":"2317:4:39","valueSize":1}],"id":3892,"nodeType":"InlineAssembly","src":"2284:47:39"}]},"documentation":{"id":3884,"nodeType":"StructuredDocumentation","src":"2055:87:39","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":3894,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:39","nodeType":"FunctionDefinition","parameters":{"id":3887,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3886,"mutability":"mutable","name":"slot","nameLocation":"2179:4:39","nodeType":"VariableDeclaration","scope":3894,"src":"2171:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3885,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:39"},"returnParameters":{"id":3891,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3890,"mutability":"mutable","name":"r","nameLocation":"2228:1:39","nodeType":"VariableDeclaration","scope":3894,"src":"2208:21:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3860_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":3889,"nodeType":"UserDefinedTypeName","pathNode":{"id":3888,"name":"BooleanSlot","nameLocations":["2208:11:39"],"nodeType":"IdentifierPath","referencedDeclaration":3860,"src":"2208:11:39"},"referencedDeclaration":3860,"src":"2208:11:39","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$3860_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:39"},"scope":3961,"src":"2147:190:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3904,"nodeType":"Block","src":"2519:106:39","statements":[{"AST":{"nativeSrc":"2581:38:39","nodeType":"YulBlock","src":"2581:38:39","statements":[{"nativeSrc":"2595:14:39","nodeType":"YulAssignment","src":"2595:14:39","value":{"name":"slot","nativeSrc":"2605:4:39","nodeType":"YulIdentifier","src":"2605:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:39","nodeType":"YulIdentifier","src":"2595:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3901,"isOffset":false,"isSlot":true,"src":"2595:6:39","suffix":"slot","valueSize":1},{"declaration":3897,"isOffset":false,"isSlot":false,"src":"2605:4:39","valueSize":1}],"id":3903,"nodeType":"InlineAssembly","src":"2572:47:39"}]},"documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"2343:87:39","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":3905,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:39","nodeType":"FunctionDefinition","parameters":{"id":3898,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3897,"mutability":"mutable","name":"slot","nameLocation":"2467:4:39","nodeType":"VariableDeclaration","scope":3905,"src":"2459:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3896,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:39"},"returnParameters":{"id":3902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3901,"mutability":"mutable","name":"r","nameLocation":"2516:1:39","nodeType":"VariableDeclaration","scope":3905,"src":"2496:21:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3863_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":3900,"nodeType":"UserDefinedTypeName","pathNode":{"id":3899,"name":"Bytes32Slot","nameLocations":["2496:11:39"],"nodeType":"IdentifierPath","referencedDeclaration":3863,"src":"2496:11:39"},"referencedDeclaration":3863,"src":"2496:11:39","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$3863_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:39"},"scope":3961,"src":"2435:190:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3915,"nodeType":"Block","src":"2807:106:39","statements":[{"AST":{"nativeSrc":"2869:38:39","nodeType":"YulBlock","src":"2869:38:39","statements":[{"nativeSrc":"2883:14:39","nodeType":"YulAssignment","src":"2883:14:39","value":{"name":"slot","nativeSrc":"2893:4:39","nodeType":"YulIdentifier","src":"2893:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:39","nodeType":"YulIdentifier","src":"2883:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3912,"isOffset":false,"isSlot":true,"src":"2883:6:39","suffix":"slot","valueSize":1},{"declaration":3908,"isOffset":false,"isSlot":false,"src":"2893:4:39","valueSize":1}],"id":3914,"nodeType":"InlineAssembly","src":"2860:47:39"}]},"documentation":{"id":3906,"nodeType":"StructuredDocumentation","src":"2631:87:39","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":3916,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:39","nodeType":"FunctionDefinition","parameters":{"id":3909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3908,"mutability":"mutable","name":"slot","nameLocation":"2755:4:39","nodeType":"VariableDeclaration","scope":3916,"src":"2747:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3907,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:39"},"returnParameters":{"id":3913,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3912,"mutability":"mutable","name":"r","nameLocation":"2804:1:39","nodeType":"VariableDeclaration","scope":3916,"src":"2784:21:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":3911,"nodeType":"UserDefinedTypeName","pathNode":{"id":3910,"name":"Uint256Slot","nameLocations":["2784:11:39"],"nodeType":"IdentifierPath","referencedDeclaration":3866,"src":"2784:11:39"},"referencedDeclaration":3866,"src":"2784:11:39","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$3866_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:39"},"scope":3961,"src":"2723:190:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3926,"nodeType":"Block","src":"3092:106:39","statements":[{"AST":{"nativeSrc":"3154:38:39","nodeType":"YulBlock","src":"3154:38:39","statements":[{"nativeSrc":"3168:14:39","nodeType":"YulAssignment","src":"3168:14:39","value":{"name":"slot","nativeSrc":"3178:4:39","nodeType":"YulIdentifier","src":"3178:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:39","nodeType":"YulIdentifier","src":"3168:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3923,"isOffset":false,"isSlot":true,"src":"3168:6:39","suffix":"slot","valueSize":1},{"declaration":3919,"isOffset":false,"isSlot":false,"src":"3178:4:39","valueSize":1}],"id":3925,"nodeType":"InlineAssembly","src":"3145:47:39"}]},"documentation":{"id":3917,"nodeType":"StructuredDocumentation","src":"2919:86:39","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":3927,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:39","nodeType":"FunctionDefinition","parameters":{"id":3920,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3919,"mutability":"mutable","name":"slot","nameLocation":"3041:4:39","nodeType":"VariableDeclaration","scope":3927,"src":"3033:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3918,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:39"},"returnParameters":{"id":3924,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3923,"mutability":"mutable","name":"r","nameLocation":"3089:1:39","nodeType":"VariableDeclaration","scope":3927,"src":"3070:20:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3869_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3922,"nodeType":"UserDefinedTypeName","pathNode":{"id":3921,"name":"StringSlot","nameLocations":["3070:10:39"],"nodeType":"IdentifierPath","referencedDeclaration":3869,"src":"3070:10:39"},"referencedDeclaration":3869,"src":"3070:10:39","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3869_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:39"},"scope":3961,"src":"3010:188:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3937,"nodeType":"Block","src":"3400:112:39","statements":[{"AST":{"nativeSrc":"3462:44:39","nodeType":"YulBlock","src":"3462:44:39","statements":[{"nativeSrc":"3476:20:39","nodeType":"YulAssignment","src":"3476:20:39","value":{"name":"store.slot","nativeSrc":"3486:10:39","nodeType":"YulIdentifier","src":"3486:10:39"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:39","nodeType":"YulIdentifier","src":"3476:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3934,"isOffset":false,"isSlot":true,"src":"3476:6:39","suffix":"slot","valueSize":1},{"declaration":3930,"isOffset":false,"isSlot":true,"src":"3486:10:39","suffix":"slot","valueSize":1}],"id":3936,"nodeType":"InlineAssembly","src":"3453:53:39"}]},"documentation":{"id":3928,"nodeType":"StructuredDocumentation","src":"3204:101:39","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":3938,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:39","nodeType":"FunctionDefinition","parameters":{"id":3931,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3930,"mutability":"mutable","name":"store","nameLocation":"3348:5:39","nodeType":"VariableDeclaration","scope":3938,"src":"3333:20:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":3929,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:39","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:39"},"returnParameters":{"id":3935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3934,"mutability":"mutable","name":"r","nameLocation":"3397:1:39","nodeType":"VariableDeclaration","scope":3938,"src":"3378:20:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3869_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":3933,"nodeType":"UserDefinedTypeName","pathNode":{"id":3932,"name":"StringSlot","nameLocations":["3378:10:39"],"nodeType":"IdentifierPath","referencedDeclaration":3869,"src":"3378:10:39"},"referencedDeclaration":3869,"src":"3378:10:39","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$3869_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:39"},"scope":3961,"src":"3310:202:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3948,"nodeType":"Block","src":"3688:106:39","statements":[{"AST":{"nativeSrc":"3750:38:39","nodeType":"YulBlock","src":"3750:38:39","statements":[{"nativeSrc":"3764:14:39","nodeType":"YulAssignment","src":"3764:14:39","value":{"name":"slot","nativeSrc":"3774:4:39","nodeType":"YulIdentifier","src":"3774:4:39"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:39","nodeType":"YulIdentifier","src":"3764:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3945,"isOffset":false,"isSlot":true,"src":"3764:6:39","suffix":"slot","valueSize":1},{"declaration":3941,"isOffset":false,"isSlot":false,"src":"3774:4:39","valueSize":1}],"id":3947,"nodeType":"InlineAssembly","src":"3741:47:39"}]},"documentation":{"id":3939,"nodeType":"StructuredDocumentation","src":"3518:85:39","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":3949,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:39","nodeType":"FunctionDefinition","parameters":{"id":3942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3941,"mutability":"mutable","name":"slot","nameLocation":"3638:4:39","nodeType":"VariableDeclaration","scope":3949,"src":"3630:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3940,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:39","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:39"},"returnParameters":{"id":3946,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3945,"mutability":"mutable","name":"r","nameLocation":"3685:1:39","nodeType":"VariableDeclaration","scope":3949,"src":"3667:19:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3872_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3944,"nodeType":"UserDefinedTypeName","pathNode":{"id":3943,"name":"BytesSlot","nameLocations":["3667:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":3872,"src":"3667:9:39"},"referencedDeclaration":3872,"src":"3667:9:39","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3872_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:39"},"scope":3961,"src":"3608:186:39","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3959,"nodeType":"Block","src":"3991:112:39","statements":[{"AST":{"nativeSrc":"4053:44:39","nodeType":"YulBlock","src":"4053:44:39","statements":[{"nativeSrc":"4067:20:39","nodeType":"YulAssignment","src":"4067:20:39","value":{"name":"store.slot","nativeSrc":"4077:10:39","nodeType":"YulIdentifier","src":"4077:10:39"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:39","nodeType":"YulIdentifier","src":"4067:6:39"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":3956,"isOffset":false,"isSlot":true,"src":"4067:6:39","suffix":"slot","valueSize":1},{"declaration":3952,"isOffset":false,"isSlot":true,"src":"4077:10:39","suffix":"slot","valueSize":1}],"id":3958,"nodeType":"InlineAssembly","src":"4044:53:39"}]},"documentation":{"id":3950,"nodeType":"StructuredDocumentation","src":"3800:99:39","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":3960,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:39","nodeType":"FunctionDefinition","parameters":{"id":3953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3952,"mutability":"mutable","name":"store","nameLocation":"3940:5:39","nodeType":"VariableDeclaration","scope":3960,"src":"3926:19:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":3951,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:39","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:39"},"returnParameters":{"id":3957,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3956,"mutability":"mutable","name":"r","nameLocation":"3988:1:39","nodeType":"VariableDeclaration","scope":3960,"src":"3970:19:39","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3872_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":3955,"nodeType":"UserDefinedTypeName","pathNode":{"id":3954,"name":"BytesSlot","nameLocations":["3970:9:39"],"nodeType":"IdentifierPath","referencedDeclaration":3872,"src":"3970:9:39"},"referencedDeclaration":3872,"src":"3970:9:39","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$3872_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:39"},"scope":3961,"src":"3904:199:39","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":3962,"src":"1420:2685:39","usedErrors":[],"usedEvents":[]}],"src":"193:3913:39"},"id":39},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateNFTMinter.sol","exportedSymbols":{"AccessControl":[22],"CertificateNFTv1MetaData":[4902],"ContractOwnership":[55],"ContractOwnershipStorage":[852],"IIssuersDIDRegistry":[4844],"IRevocationRegistry":[4884],"OpenCampusCertificateNFTMinter":[4139],"OpenCampusCertificateNFTv1":[4802]},"id":4140,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3963,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:40"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","id":3965,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":23,"src":"58:93:40","symbolAliases":[{"foreign":{"id":3964,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"66:13:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":3967,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":56,"src":"152:101:40","symbolAliases":[{"foreign":{"id":3966,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"160:17:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":3969,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":853,"src":"254:125:40","symbolAliases":[{"foreign":{"id":3968,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"262:24:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":3971,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":4845,"src":"380:73:40","symbolAliases":[{"foreign":{"id":3970,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"388:19:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":3973,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":4885,"src":"454:73:40","symbolAliases":[{"foreign":{"id":3972,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4884,"src":"462:19:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","file":"./libraries/CertificateNFTv1MetaData.sol","id":3975,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":4903,"src":"528:82:40","symbolAliases":[{"foreign":{"id":3974,"name":"CertificateNFTv1MetaData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4902,"src":"536:24:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/OpenCampusCertificateNFTv1.sol","file":"./OpenCampusCertificateNFTv1.sol","id":3977,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4140,"sourceUnit":4803,"src":"611:76:40","symbolAliases":[{"foreign":{"id":3976,"name":"OpenCampusCertificateNFTv1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4802,"src":"619:26:40","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3978,"name":"AccessControl","nameLocations":["732:13:40"],"nodeType":"IdentifierPath","referencedDeclaration":22,"src":"732:13:40"},"id":3979,"nodeType":"InheritanceSpecifier","src":"732:13:40"}],"canonicalName":"OpenCampusCertificateNFTMinter","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4139,"linearizedBaseContracts":[4139,22,55,882,899,227,179,3851,331,315],"name":"OpenCampusCertificateNFTMinter","nameLocation":"698:30:40","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3983,"libraryName":{"id":3980,"name":"ContractOwnershipStorage","nameLocations":["758:24:40"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"758:24:40"},"nodeType":"UsingForDirective","src":"752:67:40","typeName":{"id":3982,"nodeType":"UserDefinedTypeName","pathNode":{"id":3981,"name":"ContractOwnershipStorage.Layout","nameLocations":["787:24:40","812:6:40"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"787:31:40"},"referencedDeclaration":625,"src":"787:31:40","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"constant":false,"id":3986,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"864:12:40","nodeType":"VariableDeclaration","scope":4139,"src":"825:51:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":3985,"nodeType":"UserDefinedTypeName","pathNode":{"id":3984,"name":"IIssuersDIDRegistry","nameLocations":["825:19:40"],"nodeType":"IdentifierPath","referencedDeclaration":4844,"src":"825:19:40"},"referencedDeclaration":4844,"src":"825:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":3989,"mutability":"immutable","name":"NFT_V1","nameLocation":"928:6:40","nodeType":"VariableDeclaration","scope":4139,"src":"882:52:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"},"typeName":{"id":3988,"nodeType":"UserDefinedTypeName","pathNode":{"id":3987,"name":"OpenCampusCertificateNFTv1","nameLocations":["882:26:40"],"nodeType":"IdentifierPath","referencedDeclaration":4802,"src":"882:26:40"},"referencedDeclaration":4802,"src":"882:26:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"visibility":"internal"},{"constant":false,"id":3992,"mutability":"mutable","name":"_revocationRegistry","nameLocation":"970:19:40","nodeType":"VariableDeclaration","scope":4139,"src":"941:48:40","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":3991,"nodeType":"UserDefinedTypeName","pathNode":{"id":3990,"name":"IRevocationRegistry","nameLocations":["941:19:40"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"941:19:40"},"referencedDeclaration":4884,"src":"941:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"documentation":{"id":3993,"nodeType":"StructuredDocumentation","src":"995:69:40","text":"@notice Thrown when the signature is invalid for the NFT payload."},"errorSelector":"8baa579f","id":3995,"name":"InvalidSignature","nameLocation":"1075:16:40","nodeType":"ErrorDefinition","parameters":{"id":3994,"nodeType":"ParameterList","parameters":[],"src":"1091:2:40"},"src":"1069:25:40"},{"documentation":{"id":3996,"nodeType":"StructuredDocumentation","src":"1100:69:40","text":"@notice Thrown when the issuer is not one of the allowed issuers."},"errorSelector":"e41bfc58","id":3998,"name":"IssuerNotAllowed","nameLocation":"1180:16:40","nodeType":"ErrorDefinition","parameters":{"id":3997,"nodeType":"ParameterList","parameters":[],"src":"1196:2:40"},"src":"1174:25:40"},{"documentation":{"id":3999,"nodeType":"StructuredDocumentation","src":"1205:48:40","text":"@notice Thrown when the VC has been revoked."},"errorSelector":"6e803857","id":4001,"name":"VcRevoked","nameLocation":"1264:9:40","nodeType":"ErrorDefinition","parameters":{"id":4000,"nodeType":"ParameterList","parameters":[],"src":"1273:2:40"},"src":"1258:18:40"},{"body":{"id":4029,"nodeType":"Block","src":"1461:117:40","statements":[{"expression":{"id":4019,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4017,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"1471:12:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4018,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4004,"src":"1486:11:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"src":"1471:26:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"id":4020,"nodeType":"ExpressionStatement","src":"1471:26:40"},{"expression":{"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4021,"name":"NFT_V1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"1507:6:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4022,"name":"nftv1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4007,"src":"1516:5:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"src":"1507:14:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"id":4024,"nodeType":"ExpressionStatement","src":"1507:14:40"},{"expression":{"id":4027,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4025,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"1531:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4026,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4010,"src":"1553:18:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"src":"1531:40:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4028,"nodeType":"ExpressionStatement","src":"1531:40:40"}]},"id":4030,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":4013,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1449:3:40","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4014,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1453:6:40","memberName":"sender","nodeType":"MemberAccess","src":"1449:10:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4015,"kind":"baseConstructorSpecifier","modifierName":{"id":4012,"name":"ContractOwnership","nameLocations":["1431:17:40"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"1431:17:40"},"nodeType":"ModifierInvocation","src":"1431:29:40"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4004,"mutability":"mutable","name":"didRegistry","nameLocation":"1323:11:40","nodeType":"VariableDeclaration","scope":4030,"src":"1303:31:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4003,"nodeType":"UserDefinedTypeName","pathNode":{"id":4002,"name":"IIssuersDIDRegistry","nameLocations":["1303:19:40"],"nodeType":"IdentifierPath","referencedDeclaration":4844,"src":"1303:19:40"},"referencedDeclaration":4844,"src":"1303:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":4007,"mutability":"mutable","name":"nftv1","nameLocation":"1371:5:40","nodeType":"VariableDeclaration","scope":4030,"src":"1344:32:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"},"typeName":{"id":4006,"nodeType":"UserDefinedTypeName","pathNode":{"id":4005,"name":"OpenCampusCertificateNFTv1","nameLocations":["1344:26:40"],"nodeType":"IdentifierPath","referencedDeclaration":4802,"src":"1344:26:40"},"referencedDeclaration":4802,"src":"1344:26:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"visibility":"internal"},{"constant":false,"id":4010,"mutability":"mutable","name":"revocationRegistry","nameLocation":"1406:18:40","nodeType":"VariableDeclaration","scope":4030,"src":"1386:38:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":4009,"nodeType":"UserDefinedTypeName","pathNode":{"id":4008,"name":"IRevocationRegistry","nameLocations":["1386:19:40"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"1386:19:40"},"referencedDeclaration":4884,"src":"1386:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"1293:137:40"},"returnParameters":{"id":4016,"nodeType":"ParameterList","parameters":[],"src":"1461:0:40"},"scope":4139,"src":"1282:296:40","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4050,"nodeType":"Block","src":"1747:137:40","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4042,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"1814:10:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4043,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1814:12:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4037,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1757:24:40","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1782:6:40","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"1757:31:40","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:33:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4041,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1791:22:40","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"1757:56:40","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1757:70:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4045,"nodeType":"ExpressionStatement","src":"1757:70:40"},{"expression":{"id":4048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4046,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"1837:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4047,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"1859:18:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"src":"1837:40:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4049,"nodeType":"ExpressionStatement","src":"1837:40:40"}]},"documentation":{"id":4031,"nodeType":"StructuredDocumentation","src":"1584:78:40","text":"@param revocationRegistry The address of the Revocation Registry contract."},"functionSelector":"95f94bc4","id":4051,"implemented":true,"kind":"function","modifiers":[],"name":"setRevocationRegistry","nameLocation":"1676:21:40","nodeType":"FunctionDefinition","parameters":{"id":4035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4034,"mutability":"mutable","name":"revocationRegistry","nameLocation":"1718:18:40","nodeType":"VariableDeclaration","scope":4051,"src":"1698:38:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":4033,"nodeType":"UserDefinedTypeName","pathNode":{"id":4032,"name":"IRevocationRegistry","nameLocations":["1698:19:40"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"1698:19:40"},"referencedDeclaration":4884,"src":"1698:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"1697:40:40"},"returnParameters":{"id":4036,"nodeType":"ParameterList","parameters":[],"src":"1747:0:40"},"scope":4139,"src":"1667:217:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4137,"nodeType":"Block","src":"2251:865:40","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4064,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4061,"src":"2295:9:40","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2305:6:40","memberName":"length","nodeType":"MemberAccess","src":"2295:16:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3635","id":4066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2315:2:40","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2295:22:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4071,"nodeType":"IfStatement","src":"2291:53:40","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4068,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"2326:16:40","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2326:18:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4070,"nodeType":"RevertStatement","src":"2319:25:40"}},{"assignments":[4073],"declarations":[{"constant":false,"id":4073,"mutability":"mutable","name":"v","nameLocation":"2361:1:40","nodeType":"VariableDeclaration","scope":4137,"src":"2355:7:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4072,"name":"uint8","nodeType":"ElementaryTypeName","src":"2355:5:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":4074,"nodeType":"VariableDeclarationStatement","src":"2355:7:40"},{"assignments":[4076],"declarations":[{"constant":false,"id":4076,"mutability":"mutable","name":"r","nameLocation":"2380:1:40","nodeType":"VariableDeclaration","scope":4137,"src":"2372:9:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4075,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2372:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4077,"nodeType":"VariableDeclarationStatement","src":"2372:9:40"},{"assignments":[4079],"declarations":[{"constant":false,"id":4079,"mutability":"mutable","name":"s","nameLocation":"2399:1:40","nodeType":"VariableDeclaration","scope":4137,"src":"2391:9:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4078,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2391:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4080,"nodeType":"VariableDeclarationStatement","src":"2391:9:40"},{"AST":{"nativeSrc":"2419:177:40","nodeType":"YulBlock","src":"2419:177:40","statements":[{"nativeSrc":"2433:35:40","nodeType":"YulAssignment","src":"2433:35:40","value":{"arguments":[{"name":"signature.offset","nativeSrc":"2451:16:40","nodeType":"YulIdentifier","src":"2451:16:40"}],"functionName":{"name":"calldataload","nativeSrc":"2438:12:40","nodeType":"YulIdentifier","src":"2438:12:40"},"nativeSrc":"2438:30:40","nodeType":"YulFunctionCall","src":"2438:30:40"},"variableNames":[{"name":"r","nativeSrc":"2433:1:40","nodeType":"YulIdentifier","src":"2433:1:40"}]},{"nativeSrc":"2481:46:40","nodeType":"YulAssignment","src":"2481:46:40","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2503:16:40","nodeType":"YulIdentifier","src":"2503:16:40"},{"kind":"number","nativeSrc":"2521:4:40","nodeType":"YulLiteral","src":"2521:4:40","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2499:3:40","nodeType":"YulIdentifier","src":"2499:3:40"},"nativeSrc":"2499:27:40","nodeType":"YulFunctionCall","src":"2499:27:40"}],"functionName":{"name":"calldataload","nativeSrc":"2486:12:40","nodeType":"YulIdentifier","src":"2486:12:40"},"nativeSrc":"2486:41:40","nodeType":"YulFunctionCall","src":"2486:41:40"},"variableNames":[{"name":"s","nativeSrc":"2481:1:40","nodeType":"YulIdentifier","src":"2481:1:40"}]},{"nativeSrc":"2540:46:40","nodeType":"YulAssignment","src":"2540:46:40","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2562:16:40","nodeType":"YulIdentifier","src":"2562:16:40"},{"kind":"number","nativeSrc":"2580:4:40","nodeType":"YulLiteral","src":"2580:4:40","type":"","value":"0x21"}],"functionName":{"name":"add","nativeSrc":"2558:3:40","nodeType":"YulIdentifier","src":"2558:3:40"},"nativeSrc":"2558:27:40","nodeType":"YulFunctionCall","src":"2558:27:40"}],"functionName":{"name":"calldataload","nativeSrc":"2545:12:40","nodeType":"YulIdentifier","src":"2545:12:40"},"nativeSrc":"2545:41:40","nodeType":"YulFunctionCall","src":"2545:41:40"},"variableNames":[{"name":"v","nativeSrc":"2540:1:40","nodeType":"YulIdentifier","src":"2540:1:40"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":4076,"isOffset":false,"isSlot":false,"src":"2433:1:40","valueSize":1},{"declaration":4079,"isOffset":false,"isSlot":false,"src":"2481:1:40","valueSize":1},{"declaration":4061,"isOffset":true,"isSlot":false,"src":"2451:16:40","suffix":"offset","valueSize":1},{"declaration":4061,"isOffset":true,"isSlot":false,"src":"2503:16:40","suffix":"offset","valueSize":1},{"declaration":4061,"isOffset":true,"isSlot":false,"src":"2562:16:40","suffix":"offset","valueSize":1},{"declaration":4073,"isOffset":false,"isSlot":false,"src":"2540:1:40","valueSize":1}],"id":4081,"nodeType":"InlineAssembly","src":"2410:186:40"},{"assignments":[4083],"declarations":[{"constant":false,"id":4083,"mutability":"mutable","name":"signer","nameLocation":"2670:6:40","nodeType":"VariableDeclaration","scope":4137,"src":"2662:14:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4082,"name":"address","nodeType":"ElementaryTypeName","src":"2662:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4097,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":4088,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"2710:2:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4089,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4056,"src":"2714:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4090,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2723:8:40","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}],"expression":{"id":4086,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2699:3:40","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2703:6:40","memberName":"encode","nodeType":"MemberAccess","src":"2699:10:40","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2699:33:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4085,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2689:9:40","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4092,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2689:44:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4093,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4073,"src":"2735:1:40","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4094,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4076,"src":"2738:1:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4095,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"2741:1:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":4084,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"2679:9:40","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2679:64:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2662:81:40"},{"assignments":[4099],"declarations":[{"constant":false,"id":4099,"mutability":"mutable","name":"hashedDid","nameLocation":"2761:9:40","nodeType":"VariableDeclaration","scope":4137,"src":"2753:17:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4098,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2753:7:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4107,"initialValue":{"arguments":[{"arguments":[{"expression":{"id":4103,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"2800:8:40","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2809:9:40","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":4898,"src":"2800:18:40","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_calldata_ptr","typeString":"string calldata"}],"expression":{"id":4101,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2783:3:40","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4102,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2787:12:40","memberName":"encodePacked","nodeType":"MemberAccess","src":"2783:16:40","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4105,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2783:36:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4100,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2773:9:40","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4106,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2773:47:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2753:67:40"},{"condition":{"arguments":[{"id":4110,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"2856:9:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4111,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"2867:6:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4108,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3986,"src":"2835:12:40","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"id":4109,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2848:7:40","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":4834,"src":"2835:20:40","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":4112,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2835:39:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4135,"nodeType":"Block","src":"3060:50:40","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4132,"name":"IssuerNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3998,"src":"3081:16:40","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3081:18:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4134,"nodeType":"RevertStatement","src":"3074:25:40"}]},"id":4136,"nodeType":"IfStatement","src":"2831:279:40","trueBody":{"id":4131,"nodeType":"Block","src":"2876:178:40","statements":[{"condition":{"arguments":[{"id":4115,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4099,"src":"2924:9:40","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4116,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4056,"src":"2935:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4113,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3992,"src":"2894:19:40","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2914:9:40","memberName":"isRevoked","nodeType":"MemberAccess","referencedDeclaration":4883,"src":"2894:29:40","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,uint256) view external returns (bool)"}},"id":4117,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2894:49:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4122,"nodeType":"IfStatement","src":"2890:106:40","trueBody":{"id":4121,"nodeType":"Block","src":"2945:51:40","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4118,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"2970:9:40","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2970:11:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4120,"nodeType":"RevertStatement","src":"2963:18:40"}]}},{"expression":{"arguments":[{"id":4126,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4054,"src":"3021:2:40","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4127,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4056,"src":"3025:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4128,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4059,"src":"3034:8:40","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}],"expression":{"id":4123,"name":"NFT_V1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3989,"src":"3009:6:40","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateNFTv1_$4802","typeString":"contract OpenCampusCertificateNFTv1"}},"id":4125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3016:4:40","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":4343,"src":"3009:11:40","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$_t_struct$_MetaData_$4901_memory_ptr_$returns$__$","typeString":"function (address,uint256,struct CertificateNFTv1MetaData.MetaData memory) external"}},"id":4129,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3009:34:40","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4130,"nodeType":"ExpressionStatement","src":"3009:34:40"}]}}]},"documentation":{"id":4052,"nodeType":"StructuredDocumentation","src":"1890:225:40","text":"@dev Reverts with `VcRevoked` error if the token being minted has been revoked.\n @dev signature is ECDSA signature for (to, tokenId, metadata).\n @dev signature is a 65 bytes raw signature without compacting."},"functionSelector":"4d5b0423","id":4138,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"2129:4:40","nodeType":"FunctionDefinition","parameters":{"id":4062,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4054,"mutability":"mutable","name":"to","nameLocation":"2142:2:40","nodeType":"VariableDeclaration","scope":4138,"src":"2134:10:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4053,"name":"address","nodeType":"ElementaryTypeName","src":"2134:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4056,"mutability":"mutable","name":"tokenId","nameLocation":"2154:7:40","nodeType":"VariableDeclaration","scope":4138,"src":"2146:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4055,"name":"uint256","nodeType":"ElementaryTypeName","src":"2146:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4059,"mutability":"mutable","name":"metadata","nameLocation":"2206:8:40","nodeType":"VariableDeclaration","scope":4138,"src":"2163:51:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"},"typeName":{"id":4058,"nodeType":"UserDefinedTypeName","pathNode":{"id":4057,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2163:24:40","2188:8:40"],"nodeType":"IdentifierPath","referencedDeclaration":4901,"src":"2163:33:40"},"referencedDeclaration":4901,"src":"2163:33:40","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}},"visibility":"internal"},{"constant":false,"id":4061,"mutability":"mutable","name":"signature","nameLocation":"2231:9:40","nodeType":"VariableDeclaration","scope":4138,"src":"2216:24:40","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4060,"name":"bytes","nodeType":"ElementaryTypeName","src":"2216:5:40","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2133:108:40"},"returnParameters":{"id":4063,"nodeType":"ParameterList","parameters":[],"src":"2251:0:40"},"scope":4139,"src":"2120:996:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":4140,"src":"689:2429:40","usedErrors":[236,259,887,3995,3998,4001],"usedEvents":[277,286,295]}],"src":"32:3087:40"},"id":40},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateNFTv1.sol","exportedSymbols":{"AccessControl":[22],"AccessControlStorage":[594],"Address":[3829],"AllowedTransferRemoved":[4822],"CertificateNFTv1MetaData":[4902],"ContractOwnership":[55],"ContractOwnershipStorage":[852],"ERC721Metadata":[1101],"ERC721NonApprovedForTransfer":[1219],"ERC721NonOwnedToken":[1226],"ERC721SafeTransferRejected":[1233],"ERC721Storage":[3246],"IERC721":[1368],"IERC721Receiver":[1491],"IIssuersDIDRegistry":[4844],"IRevocationRegistry":[4884],"ITokenMetadataResolver":[3312],"OpenCampusCertificateNFTv1":[4802],"Transfer":[1264],"TransferAllowed":[4813]},"id":4803,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4141,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:41"},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":4143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":3830,"src":"58:66:41","symbolAliases":[{"foreign":{"id":4142,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3829,"src":"66:7:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","id":4145,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":23,"src":"125:93:41","symbolAliases":[{"foreign":{"id":4144,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":22,"src":"133:13:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","file":"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol","id":4147,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":3313,"src":"219:130:41","symbolAliases":[{"foreign":{"id":4146,"name":"ITokenMetadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3312,"src":"227:22:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","id":4149,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":1369,"src":"350:98:41","symbolAliases":[{"foreign":{"id":4148,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"358:7:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol","id":4151,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":1492,"src":"449:114:41","symbolAliases":[{"foreign":{"id":4150,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"457:15:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol","id":4153,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":1102,"src":"564:101:41","symbolAliases":[{"foreign":{"id":4152,"name":"ERC721Metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1101,"src":"572:14:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol","id":4157,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":1237,"src":"666:169:41","symbolAliases":[{"foreign":{"id":4154,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"674:28:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4155,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"704:19:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4156,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"725:26:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol","id":4159,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":1283,"src":"836:100:41","symbolAliases":[{"foreign":{"id":4158,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"844:8:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":4161,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":56,"src":"937:101:41","symbolAliases":[{"foreign":{"id":4160,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":55,"src":"945:17:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":4163,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":853,"src":"1039:125:41","symbolAliases":[{"foreign":{"id":4162,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"1047:24:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol","id":4165,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":3247,"src":"1165:109:41","symbolAliases":[{"foreign":{"id":4164,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"1173:13:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","id":4167,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":595,"src":"1275:117:41","symbolAliases":[{"foreign":{"id":4166,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1283:20:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":4169,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":4845,"src":"1393:73:41","symbolAliases":[{"foreign":{"id":4168,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4844,"src":"1401:19:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":4171,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":4885,"src":"1467:73:41","symbolAliases":[{"foreign":{"id":4170,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4884,"src":"1475:19:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","file":"./libraries/CertificateNFTv1MetaData.sol","id":4173,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":4903,"src":"1541:82:41","symbolAliases":[{"foreign":{"id":4172,"name":"CertificateNFTv1MetaData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4902,"src":"1549:24:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol","file":"./events/OpenCampusCertificateNFTv1Events.sol","id":4176,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4803,"sourceUnit":4823,"src":"1624:102:41","symbolAliases":[{"foreign":{"id":4174,"name":"TransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"1632:15:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":4175,"name":"AllowedTransferRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"1649:22:41","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4177,"name":"IERC721","nameLocations":["1767:7:41"],"nodeType":"IdentifierPath","referencedDeclaration":1368,"src":"1767:7:41"},"id":4178,"nodeType":"InheritanceSpecifier","src":"1767:7:41"},{"baseName":{"id":4179,"name":"ERC721Metadata","nameLocations":["1776:14:41"],"nodeType":"IdentifierPath","referencedDeclaration":1101,"src":"1776:14:41"},"id":4180,"nodeType":"InheritanceSpecifier","src":"1776:14:41"},{"baseName":{"id":4181,"name":"AccessControl","nameLocations":["1792:13:41"],"nodeType":"IdentifierPath","referencedDeclaration":22,"src":"1792:13:41"},"id":4182,"nodeType":"InheritanceSpecifier","src":"1792:13:41"}],"canonicalName":"OpenCampusCertificateNFTv1","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4802,"linearizedBaseContracts":[4802,22,55,882,899,227,179,3851,331,315,1101,1181,1442,3298,1368],"name":"OpenCampusCertificateNFTv1","nameLocation":"1737:26:41","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4185,"libraryName":{"id":4183,"name":"Address","nameLocations":["1818:7:41"],"nodeType":"IdentifierPath","referencedDeclaration":3829,"src":"1818:7:41"},"nodeType":"UsingForDirective","src":"1812:26:41","typeName":{"id":4184,"name":"address","nodeType":"ElementaryTypeName","src":"1830:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":4189,"libraryName":{"id":4186,"name":"ERC721Storage","nameLocations":["1849:13:41"],"nodeType":"IdentifierPath","referencedDeclaration":3246,"src":"1849:13:41"},"nodeType":"UsingForDirective","src":"1843:45:41","typeName":{"id":4188,"nodeType":"UserDefinedTypeName","pathNode":{"id":4187,"name":"ERC721Storage.Layout","nameLocations":["1867:13:41","1881:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":1562,"src":"1867:20:41"},"referencedDeclaration":1562,"src":"1867:20:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout"}}},{"global":false,"id":4193,"libraryName":{"id":4190,"name":"AccessControlStorage","nameLocations":["1899:20:41"],"nodeType":"IdentifierPath","referencedDeclaration":594,"src":"1899:20:41"},"nodeType":"UsingForDirective","src":"1893:59:41","typeName":{"id":4192,"nodeType":"UserDefinedTypeName","pathNode":{"id":4191,"name":"AccessControlStorage.Layout","nameLocations":["1924:20:41","1945:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":359,"src":"1924:27:41"},"referencedDeclaration":359,"src":"1924:27:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":4197,"libraryName":{"id":4194,"name":"ContractOwnershipStorage","nameLocations":["1963:24:41"],"nodeType":"IdentifierPath","referencedDeclaration":852,"src":"1963:24:41"},"nodeType":"UsingForDirective","src":"1957:67:41","typeName":{"id":4196,"nodeType":"UserDefinedTypeName","pathNode":{"id":4195,"name":"ContractOwnershipStorage.Layout","nameLocations":["1992:24:41","2017:6:41"],"nodeType":"IdentifierPath","referencedDeclaration":625,"src":"1992:31:41"},"referencedDeclaration":625,"src":"1992:31:41","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":4201,"libraryName":{"id":4198,"name":"CertificateNFTv1MetaData","nameLocations":["2035:24:41"],"nodeType":"IdentifierPath","referencedDeclaration":4902,"src":"2035:24:41"},"nodeType":"UsingForDirective","src":"2029:69:41","typeName":{"id":4200,"nodeType":"UserDefinedTypeName","pathNode":{"id":4199,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2064:24:41","2089:8:41"],"nodeType":"IdentifierPath","referencedDeclaration":4901,"src":"2064:33:41"},"referencedDeclaration":4901,"src":"2064:33:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}}},{"constant":false,"id":4204,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"2143:12:41","nodeType":"VariableDeclaration","scope":4802,"src":"2104:51:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4203,"nodeType":"UserDefinedTypeName","pathNode":{"id":4202,"name":"IIssuersDIDRegistry","nameLocations":["2104:19:41"],"nodeType":"IdentifierPath","referencedDeclaration":4844,"src":"2104:19:41"},"referencedDeclaration":4844,"src":"2104:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"id":4207,"mutability":"mutable","name":"_revocationRegistry","nameLocation":"2190:19:41","nodeType":"VariableDeclaration","scope":4802,"src":"2161:48:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":4206,"nodeType":"UserDefinedTypeName","pathNode":{"id":4205,"name":"IRevocationRegistry","nameLocations":["2161:19:41"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"2161:19:41"},"referencedDeclaration":4884,"src":"2161:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"constant":true,"id":4212,"mutability":"constant","name":"ERC721_RECEIVED","nameLocation":"2241:15:41","nodeType":"VariableDeclaration","scope":4802,"src":"2216:84:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":4208,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2216:6:41","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":4209,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"2259:15:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1491_$","typeString":"type(contract IERC721Receiver)"}},"id":4210,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2275:16:41","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"2259:32:41","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC721Receiver.onERC721Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":4211,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2292:8:41","memberName":"selector","nodeType":"MemberAccess","src":"2259:41:41","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":true,"functionSelector":"d5391393","id":4215,"mutability":"constant","name":"MINTER_ROLE","nameLocation":"2330:11:41","nodeType":"VariableDeclaration","scope":4802,"src":"2306:46:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4213,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2306:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6d696e746572","id":4214,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2344:8:41","typeDescriptions":{"typeIdentifier":"t_stringliteral_39eb9ec2059d897c44a17440c762c429de204f6fddd727156ca52b8da086a6f7","typeString":"literal_string \"minter\""},"value":"minter"},"visibility":"public"},{"constant":true,"functionSelector":"f5b541a6","id":4218,"mutability":"constant","name":"OPERATOR_ROLE","nameLocation":"2382:13:41","nodeType":"VariableDeclaration","scope":4802,"src":"2358:50:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4216,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2358:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"6f70657261746f72","id":4217,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2398:10:41","typeDescriptions":{"typeIdentifier":"t_stringliteral_46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622","typeString":"literal_string \"operator\""},"value":"operator"},"visibility":"public"},{"constant":false,"functionSelector":"4bae2be8","id":4223,"mutability":"mutable","name":"vcData","nameLocation":"2475:6:41","nodeType":"VariableDeclaration","scope":4802,"src":"2414:67:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)"},"typeName":{"id":4222,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4219,"name":"uint256","nodeType":"ElementaryTypeName","src":"2422:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2414:53:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4221,"nodeType":"UserDefinedTypeName","pathNode":{"id":4220,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["2433:24:41","2458:8:41"],"nodeType":"IdentifierPath","referencedDeclaration":4901,"src":"2433:33:41"},"referencedDeclaration":4901,"src":"2433:33:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}}},"visibility":"public"},{"constant":false,"functionSelector":"3886d512","id":4227,"mutability":"mutable","name":"allowedTransfers","nameLocation":"2522:16:41","nodeType":"VariableDeclaration","scope":4802,"src":"2487:51:41","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"typeName":{"id":4226,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4224,"name":"uint256","nodeType":"ElementaryTypeName","src":"2495:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"2487:27:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4225,"name":"address","nodeType":"ElementaryTypeName","src":"2506:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},"visibility":"public"},{"documentation":{"id":4228,"nodeType":"StructuredDocumentation","src":"2545:74:41","text":"@notice Thrown when any transfer functions are called but not allowed."},"errorSelector":"8cd22d19","id":4230,"name":"TransferNotAllowed","nameLocation":"2630:18:41","nodeType":"ErrorDefinition","parameters":{"id":4229,"nodeType":"ParameterList","parameters":[],"src":"2648:2:41"},"src":"2624:27:41"},{"documentation":{"id":4231,"nodeType":"StructuredDocumentation","src":"2657:64:41","text":"@notice Thrown when any operator related methods are called."},"errorSelector":"5211920d","id":4233,"name":"NoOperatorAllowed","nameLocation":"2732:17:41","nodeType":"ErrorDefinition","parameters":{"id":4232,"nodeType":"ParameterList","parameters":[],"src":"2749:2:41"},"src":"2726:26:41"},{"documentation":{"id":4234,"nodeType":"StructuredDocumentation","src":"2758:58:41","text":"@notice Thrown when burn operation cannot be executed."},"errorSelector":"eeddf6ab","id":4236,"name":"InvalidBurn","nameLocation":"2827:11:41","nodeType":"ErrorDefinition","parameters":{"id":4235,"nodeType":"ParameterList","parameters":[],"src":"2838:2:41"},"src":"2821:20:41"},{"documentation":{"id":4237,"nodeType":"StructuredDocumentation","src":"2847:78:41","text":"@notice Thrown when allowed transfer is called with receipt same as owner."},"errorSelector":"4c349c00","id":4241,"name":"RedundantAllowedTransfer","nameLocation":"2936:24:41","nodeType":"ErrorDefinition","parameters":{"id":4240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4239,"mutability":"mutable","name":"recipient","nameLocation":"2969:9:41","nodeType":"VariableDeclaration","scope":4241,"src":"2961:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4238,"name":"address","nodeType":"ElementaryTypeName","src":"2961:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2960:19:41"},"src":"2930:50:41"},{"documentation":{"id":4242,"nodeType":"StructuredDocumentation","src":"2986:66:41","text":"@notice Thrown when there is no allowed transfer for `tokenId`"},"errorSelector":"d43553b5","id":4246,"name":"NonExistingAllowedTransfer","nameLocation":"3063:26:41","nodeType":"ErrorDefinition","parameters":{"id":4245,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4244,"mutability":"mutable","name":"tokenId","nameLocation":"3098:7:41","nodeType":"VariableDeclaration","scope":4246,"src":"3090:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4243,"name":"uint256","nodeType":"ElementaryTypeName","src":"3090:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3089:17:41"},"src":"3057:50:41"},{"body":{"id":4284,"nodeType":"Block","src":"3424:137:41","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4271,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"3434:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3448:18:41","memberName":"initERC721Mintable","nodeType":"MemberAccess","referencedDeclaration":1656,"src":"3434:32:41","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3434:34:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4275,"nodeType":"ExpressionStatement","src":"3434:34:41"},{"expression":{"id":4278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4276,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4204,"src":"3478:12:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4277,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4259,"src":"3493:11:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"src":"3478:26:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"id":4279,"nodeType":"ExpressionStatement","src":"3478:26:41"},{"expression":{"id":4282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4280,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"3514:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4281,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4256,"src":"3536:18:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"src":"3514:40:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4283,"nodeType":"ExpressionStatement","src":"3514:40:41"}]},"id":4285,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":4262,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"3355:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4263,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3359:6:41","memberName":"sender","nodeType":"MemberAccess","src":"3355:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4264,"kind":"baseConstructorSpecifier","modifierName":{"id":4261,"name":"ContractOwnership","nameLocations":["3337:17:41"],"nodeType":"IdentifierPath","referencedDeclaration":55,"src":"3337:17:41"},"nodeType":"ModifierInvocation","src":"3337:29:41"},{"arguments":[{"id":4266,"name":"tokenName","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4248,"src":"3382:9:41","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4267,"name":"tokenSymbol","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4250,"src":"3393:11:41","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":4268,"name":"metadataResolver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4253,"src":"3406:16:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}}],"id":4269,"kind":"baseConstructorSpecifier","modifierName":{"id":4265,"name":"ERC721Metadata","nameLocations":["3367:14:41"],"nodeType":"IdentifierPath","referencedDeclaration":1101,"src":"3367:14:41"},"nodeType":"ModifierInvocation","src":"3367:56:41"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4260,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4248,"mutability":"mutable","name":"tokenName","nameLocation":"3148:9:41","nodeType":"VariableDeclaration","scope":4285,"src":"3134:23:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4247,"name":"string","nodeType":"ElementaryTypeName","src":"3134:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4250,"mutability":"mutable","name":"tokenSymbol","nameLocation":"3181:11:41","nodeType":"VariableDeclaration","scope":4285,"src":"3167:25:41","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4249,"name":"string","nodeType":"ElementaryTypeName","src":"3167:6:41","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4253,"mutability":"mutable","name":"metadataResolver","nameLocation":"3225:16:41","nodeType":"VariableDeclaration","scope":4285,"src":"3202:39:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"},"typeName":{"id":4252,"nodeType":"UserDefinedTypeName","pathNode":{"id":4251,"name":"ITokenMetadataResolver","nameLocations":["3202:22:41"],"nodeType":"IdentifierPath","referencedDeclaration":3312,"src":"3202:22:41"},"referencedDeclaration":3312,"src":"3202:22:41","typeDescriptions":{"typeIdentifier":"t_contract$_ITokenMetadataResolver_$3312","typeString":"contract ITokenMetadataResolver"}},"visibility":"internal"},{"constant":false,"id":4256,"mutability":"mutable","name":"revocationRegistry","nameLocation":"3271:18:41","nodeType":"VariableDeclaration","scope":4285,"src":"3251:38:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":4255,"nodeType":"UserDefinedTypeName","pathNode":{"id":4254,"name":"IRevocationRegistry","nameLocations":["3251:19:41"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"3251:19:41"},"referencedDeclaration":4884,"src":"3251:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"},{"constant":false,"id":4259,"mutability":"mutable","name":"didRegistry","nameLocation":"3319:11:41","nodeType":"VariableDeclaration","scope":4285,"src":"3299:31:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":4258,"nodeType":"UserDefinedTypeName","pathNode":{"id":4257,"name":"IIssuersDIDRegistry","nameLocations":["3299:19:41"],"nodeType":"IdentifierPath","referencedDeclaration":4844,"src":"3299:19:41"},"referencedDeclaration":4844,"src":"3299:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"}],"src":"3124:212:41"},"returnParameters":{"id":4270,"nodeType":"ParameterList","parameters":[],"src":"3424:0:41"},"scope":4802,"src":"3113:448:41","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4305,"nodeType":"Block","src":"3730:137:41","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4297,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3841,"src":"3797:10:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3797:12:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4292,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":852,"src":"3740:24:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$852_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3765:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":851,"src":"3740:31:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3740:33:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$625_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3774:22:41","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":819,"src":"3740:56:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$625_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$625_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4299,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3740:70:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4300,"nodeType":"ExpressionStatement","src":"3740:70:41"},{"expression":{"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4301,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"3820:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4302,"name":"revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4289,"src":"3842:18:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"src":"3820:40:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4304,"nodeType":"ExpressionStatement","src":"3820:40:41"}]},"documentation":{"id":4286,"nodeType":"StructuredDocumentation","src":"3567:78:41","text":"@param revocationRegistry The address of the Revocation Registry contract."},"functionSelector":"95f94bc4","id":4306,"implemented":true,"kind":"function","modifiers":[],"name":"setRevocationRegistry","nameLocation":"3659:21:41","nodeType":"FunctionDefinition","parameters":{"id":4290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4289,"mutability":"mutable","name":"revocationRegistry","nameLocation":"3701:18:41","nodeType":"VariableDeclaration","scope":4306,"src":"3681:38:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"},"typeName":{"id":4288,"nodeType":"UserDefinedTypeName","pathNode":{"id":4287,"name":"IRevocationRegistry","nameLocations":["3681:19:41"],"nodeType":"IdentifierPath","referencedDeclaration":4884,"src":"3681:19:41"},"referencedDeclaration":4884,"src":"3681:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"visibility":"internal"}],"src":"3680:40:41"},"returnParameters":{"id":4291,"nodeType":"ParameterList","parameters":[],"src":"3730:0:41"},"scope":4802,"src":"3650:217:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4342,"nodeType":"Block","src":"4067:173:41","statements":[{"expression":{"arguments":[{"id":4322,"name":"MINTER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4215,"src":"4122:11:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4323,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"4135:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4324,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4139:6:41","memberName":"sender","nodeType":"MemberAccess","src":"4135:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4317,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"4077:20:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":4319,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4098:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"4077:27:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4077:29:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4321,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4107:14:41","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"4077:44:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4077:69:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4326,"nodeType":"ExpressionStatement","src":"4077:69:41"},{"expression":{"arguments":[{"id":4332,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4309,"src":"4185:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4333,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"4189:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4327,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"4157:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4171:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"4157:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4330,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4157:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4331,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4180:4:41","memberName":"mint","nodeType":"MemberAccess","referencedDeclaration":2256,"src":"4157:27:41","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address,uint256)"}},"id":4334,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4157:40:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4335,"nodeType":"ExpressionStatement","src":"4157:40:41"},{"expression":{"id":4340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4336,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"4207:6:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4338,"indexExpression":{"id":4337,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4311,"src":"4214:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4207:15:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4339,"name":"metadata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4314,"src":"4225:8:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData calldata"}},"src":"4207:26:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4341,"nodeType":"ExpressionStatement","src":"4207:26:41"}]},"documentation":{"id":4307,"nodeType":"StructuredDocumentation","src":"3873:84:41","text":"@dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role."},"functionSelector":"54c7be06","id":4343,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"3971:4:41","nodeType":"FunctionDefinition","parameters":{"id":4315,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4309,"mutability":"mutable","name":"to","nameLocation":"3984:2:41","nodeType":"VariableDeclaration","scope":4343,"src":"3976:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4308,"name":"address","nodeType":"ElementaryTypeName","src":"3976:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4311,"mutability":"mutable","name":"tokenId","nameLocation":"3996:7:41","nodeType":"VariableDeclaration","scope":4343,"src":"3988:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4310,"name":"uint256","nodeType":"ElementaryTypeName","src":"3988:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4314,"mutability":"mutable","name":"metadata","nameLocation":"4048:8:41","nodeType":"VariableDeclaration","scope":4343,"src":"4005:51:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_calldata_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"},"typeName":{"id":4313,"nodeType":"UserDefinedTypeName","pathNode":{"id":4312,"name":"CertificateNFTv1MetaData.MetaData","nameLocations":["4005:24:41","4030:8:41"],"nodeType":"IdentifierPath","referencedDeclaration":4901,"src":"4005:33:41"},"referencedDeclaration":4901,"src":"4005:33:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage_ptr","typeString":"struct CertificateNFTv1MetaData.MetaData"}},"visibility":"internal"}],"src":"3975:82:41"},"returnParameters":{"id":4316,"nodeType":"ParameterList","parameters":[],"src":"4067:0:41"},"scope":4802,"src":"3962:278:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4410,"nodeType":"Block","src":"4588:613:41","statements":[{"assignments":[4350],"declarations":[{"constant":false,"id":4350,"mutability":"mutable","name":"hashedDid","nameLocation":"4606:9:41","nodeType":"VariableDeclaration","scope":4410,"src":"4598:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4349,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4598:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4360,"initialValue":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":4354,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"4645:6:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4356,"indexExpression":{"id":4355,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"4652:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4645:15:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4357,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4661:9:41","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":4898,"src":"4645:25:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4352,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4628:3:41","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4632:12:41","memberName":"encodePacked","nodeType":"MemberAccess","src":"4628:16:41","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4358,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4628:43:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4351,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4618:9:41","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4359,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4618:54:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4598:74:41"},{"condition":{"arguments":[{"id":4363,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4350,"src":"4716:9:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4364,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"4727:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4361,"name":"_revocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4207,"src":"4686:19:41","typeDescriptions":{"typeIdentifier":"t_contract$_IRevocationRegistry_$4884","typeString":"contract IRevocationRegistry"}},"id":4362,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4706:9:41","memberName":"isRevoked","nodeType":"MemberAccess","referencedDeclaration":4883,"src":"4686:29:41","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_uint256_$returns$_t_bool_$","typeString":"function (bytes32,uint256) view external returns (bool)"}},"id":4365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4686:49:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4408,"nodeType":"Block","src":"5150:45:41","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4405,"name":"InvalidBurn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4236,"src":"5171:11:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4406,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5171:13:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4407,"nodeType":"RevertStatement","src":"5164:20:41"}]},"id":4409,"nodeType":"IfStatement","src":"4682:513:41","trueBody":{"id":4404,"nodeType":"Block","src":"4737:407:41","statements":[{"assignments":[4367],"declarations":[{"constant":false,"id":4367,"mutability":"mutable","name":"owner","nameLocation":"4759:5:41","nodeType":"VariableDeclaration","scope":4404,"src":"4751:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4366,"name":"address","nodeType":"ElementaryTypeName","src":"4751:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4374,"initialValue":{"arguments":[{"id":4372,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"4798:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4368,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"4767:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4781:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"4767:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4370,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4767:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4371,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4790:7:41","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"4767:30:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4373,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4767:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4751:55:41"},{"expression":{"id":4384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4375,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"4820:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4377,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4834:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"4820:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4378,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4820:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4843:6:41","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"4820:29:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4381,"indexExpression":{"id":4380,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"4850:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4820:38:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"expression":{"id":4382,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"4861:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4383,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4875:23:41","memberName":"BURNT_TOKEN_OWNER_VALUE","nodeType":"MemberAccess","referencedDeclaration":1588,"src":"4861:37:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4820:78:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4385,"nodeType":"ExpressionStatement","src":"4820:78:41"},{"id":4394,"nodeType":"UncheckedBlock","src":"4913:166:41","statements":[{"expression":{"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"5024:40:41","subExpression":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4386,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"5026:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5040:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"5026:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4388,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5026:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5049:8:41","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"5026:31:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4391,"indexExpression":{"id":4390,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"5058:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5026:38:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4393,"nodeType":"ExpressionStatement","src":"5024:40:41"}]},{"eventCall":{"arguments":[{"id":4396,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4367,"src":"5106:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":4399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5121:1:41","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4398,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5113:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4397,"name":"address","nodeType":"ElementaryTypeName","src":"5113:7:41","typeDescriptions":{}}},"id":4400,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5113:10:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4401,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4346,"src":"5125:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4395,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"5097:8:41","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5097:36:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4403,"nodeType":"EmitStatement","src":"5092:41:41"}]}}]},"documentation":{"id":4344,"nodeType":"StructuredDocumentation","src":"4246:297:41","text":"@dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\n @dev Emit a `Transfer` event to address 0 when the token has been burnt.\n @param tokenId The Token Id to be burnt.\n Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry."},"functionSelector":"42966c68","id":4411,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"4557:4:41","nodeType":"FunctionDefinition","parameters":{"id":4347,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4346,"mutability":"mutable","name":"tokenId","nameLocation":"4570:7:41","nodeType":"VariableDeclaration","scope":4411,"src":"4562:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4345,"name":"uint256","nodeType":"ElementaryTypeName","src":"4562:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4561:17:41"},"returnParameters":{"id":4348,"nodeType":"ParameterList","parameters":[],"src":"4588:0:41"},"scope":4802,"src":"4548:653:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4480,"nodeType":"Block","src":"5855:625:41","statements":[{"assignments":[4420],"declarations":[{"constant":false,"id":4420,"mutability":"mutable","name":"hashedDid","nameLocation":"5873:9:41","nodeType":"VariableDeclaration","scope":4480,"src":"5865:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4419,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5865:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4430,"initialValue":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":4424,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"5912:6:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4426,"indexExpression":{"id":4425,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"5919:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5912:15:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4427,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5928:9:41","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":4898,"src":"5912:25:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4422,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5895:3:41","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4423,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5899:12:41","memberName":"encodePacked","nodeType":"MemberAccess","src":"5895:16:41","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5895:43:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4421,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5885:9:41","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5885:54:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5865:74:41"},{"condition":{"id":4437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"6080:44:41","subExpression":{"arguments":[{"id":4433,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4420,"src":"6102:9:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4434,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6113:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6117:6:41","memberName":"sender","nodeType":"MemberAccess","src":"6113:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4431,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4204,"src":"6081:12:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"id":4432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6094:7:41","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":4834,"src":"6081:20:41","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":4436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6081:43:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4449,"nodeType":"IfStatement","src":"6076:146:41","trueBody":{"id":4448,"nodeType":"Block","src":"6126:96:41","statements":[{"expression":{"arguments":[{"id":4443,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"6185:13:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4444,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6200:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6204:6:41","memberName":"sender","nodeType":"MemberAccess","src":"6200:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4438,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"6140:20:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":4440,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6161:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"6140:27:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:29:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4442,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6170:14:41","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"6140:44:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4446,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6140:71:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4447,"nodeType":"ExpressionStatement","src":"6140:71:41"}]}},{"assignments":[4451],"declarations":[{"constant":false,"id":4451,"mutability":"mutable","name":"owner","nameLocation":"6240:5:41","nodeType":"VariableDeclaration","scope":4480,"src":"6232:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4450,"name":"address","nodeType":"ElementaryTypeName","src":"6232:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4458,"initialValue":{"arguments":[{"id":4456,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"6279:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4452,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"6248:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4453,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6262:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"6248:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4454,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6248:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4455,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6271:7:41","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"6248:30:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4457,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6248:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6232:55:41"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4461,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4459,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4451,"src":"6301:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":4460,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"6310:9:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6301:18:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4466,"nodeType":"IfStatement","src":"6297:66:41","trueBody":{"errorCall":{"arguments":[{"id":4463,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"6353:9:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4462,"name":"RedundantAllowedTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4241,"src":"6328:24:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":4464,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6328:35:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4465,"nodeType":"RevertStatement","src":"6321:42:41"}},{"expression":{"id":4471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":4467,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"6374:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4469,"indexExpression":{"id":4468,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"6391:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"6374:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4470,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"6402:9:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6374:37:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4472,"nodeType":"ExpressionStatement","src":"6374:37:41"},{"eventCall":{"arguments":[{"id":4474,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4414,"src":"6442:9:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4475,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4416,"src":"6453:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4476,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6462:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4477,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6466:6:41","memberName":"sender","nodeType":"MemberAccess","src":"6462:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4473,"name":"TransferAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4813,"src":"6426:15:41","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":4478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6426:47:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4479,"nodeType":"EmitStatement","src":"6421:52:41"}]},"documentation":{"id":4412,"nodeType":"StructuredDocumentation","src":"5207:575:41","text":"@notice Allow a one time transfer of `tokenId` to `recipient`.\n @dev emit a `TransferAllowed` event upon successful operation.\n @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\n @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\n @dev Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.\n @param recipient The address to which transfer would be allowed.\n @param tokenId The tokenId to be allowed for transfer."},"functionSelector":"19c02b27","id":4481,"implemented":true,"kind":"function","modifiers":[],"name":"allowTransfer","nameLocation":"5796:13:41","nodeType":"FunctionDefinition","parameters":{"id":4417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4414,"mutability":"mutable","name":"recipient","nameLocation":"5818:9:41","nodeType":"VariableDeclaration","scope":4481,"src":"5810:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4413,"name":"address","nodeType":"ElementaryTypeName","src":"5810:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4416,"mutability":"mutable","name":"tokenId","nameLocation":"5837:7:41","nodeType":"VariableDeclaration","scope":4481,"src":"5829:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4415,"name":"uint256","nodeType":"ElementaryTypeName","src":"5829:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5809:36:41"},"returnParameters":{"id":4418,"nodeType":"ParameterList","parameters":[],"src":"5855:0:41"},"scope":4802,"src":"5787:693:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":4545,"nodeType":"Block","src":"7092:598:41","statements":[{"assignments":[4488],"declarations":[{"constant":false,"id":4488,"mutability":"mutable","name":"hashedDid","nameLocation":"7110:9:41","nodeType":"VariableDeclaration","scope":4545,"src":"7102:17:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7102:7:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":4498,"initialValue":{"arguments":[{"arguments":[{"expression":{"baseExpression":{"id":4492,"name":"vcData","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4223,"src":"7149:6:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_struct$_MetaData_$4901_storage_$","typeString":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData storage ref)"}},"id":4494,"indexExpression":{"id":4493,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7156:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7149:15:41","typeDescriptions":{"typeIdentifier":"t_struct$_MetaData_$4901_storage","typeString":"struct CertificateNFTv1MetaData.MetaData storage ref"}},"id":4495,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7165:9:41","memberName":"issuerDid","nodeType":"MemberAccess","referencedDeclaration":4898,"src":"7149:25:41","typeDescriptions":{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_storage","typeString":"string storage ref"}],"expression":{"id":4490,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7132:3:41","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7136:12:41","memberName":"encodePacked","nodeType":"MemberAccess","src":"7132:16:41","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":4496,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7132:43:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4489,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7122:9:41","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7122:54:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"7102:74:41"},{"condition":{"id":4505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"7317:44:41","subExpression":{"arguments":[{"id":4501,"name":"hashedDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4488,"src":"7339:9:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4502,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7350:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4503,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7354:6:41","memberName":"sender","nodeType":"MemberAccess","src":"7350:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4499,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4204,"src":"7318:12:41","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$4844","typeString":"contract IIssuersDIDRegistry"}},"id":4500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7331:7:41","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":4834,"src":"7318:20:41","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7318:43:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4517,"nodeType":"IfStatement","src":"7313:146:41","trueBody":{"id":4516,"nodeType":"Block","src":"7363:96:41","statements":[{"expression":{"arguments":[{"id":4511,"name":"OPERATOR_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"7422:13:41","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"expression":{"id":4512,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7437:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4513,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7441:6:41","memberName":"sender","nodeType":"MemberAccess","src":"7437:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4506,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"7377:20:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$594_$","typeString":"type(library AccessControlStorage)"}},"id":4508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7398:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":593,"src":"7377:27:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":4509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7377:29:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$359_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":4510,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7407:14:41","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":557,"src":"7377:44:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$359_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$359_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":4514,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7377:71:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4515,"nodeType":"ExpressionStatement","src":"7377:71:41"}]}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4518,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"7473:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4520,"indexExpression":{"id":4519,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7490:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7473:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":4523,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7510:1:41","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":4522,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"7502:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4521,"name":"address","nodeType":"ElementaryTypeName","src":"7502:7:41","typeDescriptions":{}}},"id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7502:10:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"7473:39:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4530,"nodeType":"IfStatement","src":"7469:87:41","trueBody":{"errorCall":{"arguments":[{"id":4527,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7548:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4526,"name":"NonExistingAllowedTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4246,"src":"7521:26:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":4528,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7521:35:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4529,"nodeType":"RevertStatement","src":"7514:42:41"}},{"eventCall":{"arguments":[{"baseExpression":{"id":4532,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"7594:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4534,"indexExpression":{"id":4533,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7611:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7594:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4535,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7621:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"expression":{"id":4536,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"7630:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4537,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7634:6:41","memberName":"sender","nodeType":"MemberAccess","src":"7630:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"id":4531,"name":"AllowedTransferRemoved","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4822,"src":"7571:22:41","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_uint256_$_t_address_$returns$__$","typeString":"function (address,uint256,address)"}},"id":4538,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7571:70:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4539,"nodeType":"EmitStatement","src":"7566:75:41"},{"expression":{"id":4543,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"7651:32:41","subExpression":{"baseExpression":{"id":4540,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"7658:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4542,"indexExpression":{"id":4541,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4484,"src":"7675:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7658:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4544,"nodeType":"ExpressionStatement","src":"7651:32:41"}]},"documentation":{"id":4482,"nodeType":"StructuredDocumentation","src":"6486:544:41","text":"@notice Remove the one time transfer that was allowed before for `tokenId`.\n @dev emit a `AllowedTransferRemoved` event upon successful operation.\n @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\n @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\n @dev Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.\n @param tokenId The tokenId of which allowed transfer would be removed."},"functionSelector":"42532616","id":4546,"implemented":true,"kind":"function","modifiers":[],"name":"removeAllowedTransfer","nameLocation":"7044:21:41","nodeType":"FunctionDefinition","parameters":{"id":4485,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4484,"mutability":"mutable","name":"tokenId","nameLocation":"7074:7:41","nodeType":"VariableDeclaration","scope":4546,"src":"7066:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4483,"name":"uint256","nodeType":"ElementaryTypeName","src":"7066:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7065:17:41"},"returnParameters":{"id":4486,"nodeType":"ParameterList","parameters":[],"src":"7092:0:41"},"scope":4802,"src":"7035:655:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1341],"body":{"id":4561,"nodeType":"Block","src":"7798:63:41","statements":[{"expression":{"arguments":[{"id":4558,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4549,"src":"7848:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4554,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7815:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4555,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7829:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"7815:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4556,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7815:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4557,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7838:9:41","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3002,"src":"7815:32:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_address_$returns$_t_uint256_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,address) view returns (uint256)"}},"id":4559,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7815:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":4553,"id":4560,"nodeType":"Return","src":"7808:46:41"}]},"documentation":{"id":4547,"nodeType":"StructuredDocumentation","src":"7696:23:41","text":"@inheritdoc IERC721"},"functionSelector":"70a08231","id":4562,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"7733:9:41","nodeType":"FunctionDefinition","parameters":{"id":4550,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4549,"mutability":"mutable","name":"owner","nameLocation":"7751:5:41","nodeType":"VariableDeclaration","scope":4562,"src":"7743:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4548,"name":"address","nodeType":"ElementaryTypeName","src":"7743:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7742:15:41"},"returnParameters":{"id":4553,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4552,"mutability":"mutable","name":"balance","nameLocation":"7789:7:41","nodeType":"VariableDeclaration","scope":4562,"src":"7781:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4551,"name":"uint256","nodeType":"ElementaryTypeName","src":"7781:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7780:17:41"},"scope":4802,"src":"7724:137:41","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1349],"body":{"id":4577,"nodeType":"Block","src":"7972:63:41","statements":[{"expression":{"arguments":[{"id":4574,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4565,"src":"8020:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4570,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"7989:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8003:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"7989:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4572,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7989:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4573,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8012:7:41","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"7989:30:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7989:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4569,"id":4576,"nodeType":"Return","src":"7982:46:41"}]},"documentation":{"id":4563,"nodeType":"StructuredDocumentation","src":"7867:23:41","text":"@inheritdoc IERC721"},"functionSelector":"6352211e","id":4578,"implemented":true,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"7904:7:41","nodeType":"FunctionDefinition","parameters":{"id":4566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4565,"mutability":"mutable","name":"tokenId","nameLocation":"7920:7:41","nodeType":"VariableDeclaration","scope":4578,"src":"7912:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4564,"name":"uint256","nodeType":"ElementaryTypeName","src":"7912:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7911:17:41"},"returnParameters":{"id":4569,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4568,"mutability":"mutable","name":"tokenOwner","nameLocation":"7960:10:41","nodeType":"VariableDeclaration","scope":4578,"src":"7952:18:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4567,"name":"address","nodeType":"ElementaryTypeName","src":"7952:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"7951:20:41"},"scope":4802,"src":"7895:140:41","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1357],"body":{"id":4589,"nodeType":"Block","src":"8148:43:41","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4586,"name":"NoOperatorAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"8165:17:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8165:19:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4588,"nodeType":"RevertStatement","src":"8158:26:41"}]},"documentation":{"id":4579,"nodeType":"StructuredDocumentation","src":"8041:23:41","text":"@inheritdoc IERC721"},"functionSelector":"081812fc","id":4590,"implemented":true,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"8078:11:41","nodeType":"FunctionDefinition","parameters":{"id":4582,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4581,"mutability":"mutable","name":"tokenId","nameLocation":"8098:7:41","nodeType":"VariableDeclaration","scope":4590,"src":"8090:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4580,"name":"uint256","nodeType":"ElementaryTypeName","src":"8090:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8089:17:41"},"returnParameters":{"id":4585,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4584,"mutability":"mutable","name":"approved","nameLocation":"8138:8:41","nodeType":"VariableDeclaration","scope":4590,"src":"8130:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4583,"name":"address","nodeType":"ElementaryTypeName","src":"8130:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"8129:18:41"},"scope":4802,"src":"8069:122:41","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1293],"body":{"id":4601,"nodeType":"Block","src":"8288:44:41","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4598,"name":"TransferNotAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4230,"src":"8305:18:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4599,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8305:20:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4600,"nodeType":"RevertStatement","src":"8298:27:41"}]},"documentation":{"id":4591,"nodeType":"StructuredDocumentation","src":"8197:23:41","text":"@inheritdoc IERC721"},"functionSelector":"095ea7b3","id":4602,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"8234:7:41","nodeType":"FunctionDefinition","parameters":{"id":4596,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4593,"mutability":"mutable","name":"to","nameLocation":"8250:2:41","nodeType":"VariableDeclaration","scope":4602,"src":"8242:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4592,"name":"address","nodeType":"ElementaryTypeName","src":"8242:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4595,"mutability":"mutable","name":"tokenId","nameLocation":"8262:7:41","nodeType":"VariableDeclaration","scope":4602,"src":"8254:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4594,"name":"uint256","nodeType":"ElementaryTypeName","src":"8254:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8241:29:41"},"returnParameters":{"id":4597,"nodeType":"ParameterList","parameters":[],"src":"8288:0:41"},"scope":4802,"src":"8225:107:41","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1301],"body":{"id":4613,"nodeType":"Block","src":"8443:43:41","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4610,"name":"NoOperatorAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"8460:17:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8460:19:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4612,"nodeType":"RevertStatement","src":"8453:26:41"}]},"documentation":{"id":4603,"nodeType":"StructuredDocumentation","src":"8338:23:41","text":"@inheritdoc IERC721"},"functionSelector":"a22cb465","id":4614,"implemented":true,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"8375:17:41","nodeType":"FunctionDefinition","parameters":{"id":4608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4605,"mutability":"mutable","name":"operator","nameLocation":"8401:8:41","nodeType":"VariableDeclaration","scope":4614,"src":"8393:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4604,"name":"address","nodeType":"ElementaryTypeName","src":"8393:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4607,"mutability":"mutable","name":"approved","nameLocation":"8416:8:41","nodeType":"VariableDeclaration","scope":4614,"src":"8411:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4606,"name":"bool","nodeType":"ElementaryTypeName","src":"8411:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"8392:33:41"},"returnParameters":{"id":4609,"nodeType":"ParameterList","parameters":[],"src":"8443:0:41"},"scope":4802,"src":"8366:120:41","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1311],"body":{"id":4704,"nodeType":"Block","src":"9385:779:41","statements":[{"assignments":[4625],"declarations":[{"constant":false,"id":4625,"mutability":"mutable","name":"owner","nameLocation":"9403:5:41","nodeType":"VariableDeclaration","scope":4704,"src":"9395:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4624,"name":"address","nodeType":"ElementaryTypeName","src":"9395:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":4632,"initialValue":{"arguments":[{"id":4630,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"9442:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4626,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"9411:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4627,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9425:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"9411:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4628,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9411:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4629,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9434:7:41","memberName":"ownerOf","nodeType":"MemberAccess","referencedDeclaration":3034,"src":"9411:30:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1562_storage_ptr_$_t_uint256_$returns$_t_address_$attached_to$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function (struct ERC721Storage.Layout storage pointer,uint256) view returns (address)"}},"id":4631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9411:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"9395:55:41"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4636,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4633,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"9464:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":4634,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9473:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4635,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9477:6:41","memberName":"sender","nodeType":"MemberAccess","src":"9473:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9464:19:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4643,"nodeType":"IfStatement","src":"9460:72:41","trueBody":{"errorCall":{"arguments":[{"expression":{"id":4638,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"9512:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9516:6:41","memberName":"sender","nodeType":"MemberAccess","src":"9512:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4640,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"9524:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4637,"name":"ERC721NonOwnedToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1226,"src":"9492:19:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":4641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9492:40:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4642,"nodeType":"RevertStatement","src":"9485:47:41"}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4646,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4644,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"9546:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4645,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"9554:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9546:13:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":4651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":4647,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"9563:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4649,"indexExpression":{"id":4648,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"9580:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9563:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4650,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"9592:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9563:31:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9546:48:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4659,"nodeType":"IfStatement","src":"9542:111:41","trueBody":{"errorCall":{"arguments":[{"id":4654,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4617,"src":"9632:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4655,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"9638:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4656,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"9645:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4653,"name":"ERC721NonApprovedForTransfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1219,"src":"9603:28:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":4657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9603:50:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4658,"nodeType":"RevertStatement","src":"9596:57:41"}},{"expression":{"id":4674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4660,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"9664:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4662,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9678:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"9664:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4663,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9664:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4664,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9687:6:41","memberName":"owners","nodeType":"MemberAccess","referencedDeclaration":1547,"src":"9664:29:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_uint256_$","typeString":"mapping(uint256 => uint256)"}},"id":4666,"indexExpression":{"id":4665,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"9694:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9664:38:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"arguments":[{"id":4671,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"9721:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4670,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9713:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":4669,"name":"uint160","nodeType":"ElementaryTypeName","src":"9713:7:41","typeDescriptions":{}}},"id":4672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9713:11:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":4668,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"9705:7:41","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":4667,"name":"uint256","nodeType":"ElementaryTypeName","src":"9705:7:41","typeDescriptions":{}}},"id":4673,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9705:20:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9664:61:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4675,"nodeType":"ExpressionStatement","src":"9664:61:41"},{"id":4692,"nodeType":"UncheckedBlock","src":"9815:257:41","statements":[{"expression":{"id":4682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"9912:40:41","subExpression":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4676,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"9914:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4677,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"9928:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"9914:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4678,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9914:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4679,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9937:8:41","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"9914:31:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4681,"indexExpression":{"id":4680,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"9946:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"9914:38:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4683,"nodeType":"ExpressionStatement","src":"9912:40:41"},{"expression":{"id":4690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"10024:37:41","subExpression":{"baseExpression":{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4684,"name":"ERC721Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3246,"src":"10026:13:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC721Storage_$3246_$","typeString":"type(library ERC721Storage)"}},"id":4685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"10040:6:41","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":3130,"src":"10026:20:41","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1562_storage_ptr_$","typeString":"function () pure returns (struct ERC721Storage.Layout storage pointer)"}},"id":4686,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10026:22:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1562_storage_ptr","typeString":"struct ERC721Storage.Layout storage pointer"}},"id":4687,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"10049:8:41","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":1551,"src":"10026:31:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":4689,"indexExpression":{"id":4688,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"10058:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10026:35:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4691,"nodeType":"ExpressionStatement","src":"10024:37:41"}]},{"expression":{"id":4696,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"delete","prefix":true,"src":"10082:32:41","subExpression":{"baseExpression":{"id":4693,"name":"allowedTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4227,"src":"10089:16:41","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":4695,"indexExpression":{"id":4694,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"10106:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"10089:25:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4697,"nodeType":"ExpressionStatement","src":"10082:32:41"},{"eventCall":{"arguments":[{"id":4699,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4625,"src":"10138:5:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4700,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4619,"src":"10145:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4701,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4621,"src":"10149:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4698,"name":"Transfer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"10129:8:41","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10129:28:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4703,"nodeType":"EmitStatement","src":"10124:33:41"}]},"documentation":{"id":4615,"nodeType":"StructuredDocumentation","src":"8492:816:41","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n approved by a token's issuer or an operator.\n @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\n @dev remove the existing approval for `tokenId`.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":4705,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"9322:12:41","nodeType":"FunctionDefinition","parameters":{"id":4622,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4617,"mutability":"mutable","name":"from","nameLocation":"9343:4:41","nodeType":"VariableDeclaration","scope":4705,"src":"9335:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4616,"name":"address","nodeType":"ElementaryTypeName","src":"9335:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4619,"mutability":"mutable","name":"to","nameLocation":"9357:2:41","nodeType":"VariableDeclaration","scope":4705,"src":"9349:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4618,"name":"address","nodeType":"ElementaryTypeName","src":"9349:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4621,"mutability":"mutable","name":"tokenId","nameLocation":"9369:7:41","nodeType":"VariableDeclaration","scope":4705,"src":"9361:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4620,"name":"uint256","nodeType":"ElementaryTypeName","src":"9361:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9334:43:41"},"returnParameters":{"id":4623,"nodeType":"ParameterList","parameters":[],"src":"9385:0:41"},"scope":4802,"src":"9313:851:41","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1321],"body":{"id":4744,"nodeType":"Block","src":"11378:257:41","statements":[{"expression":{"arguments":[{"id":4716,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"11401:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4717,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11407:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4718,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11411:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4715,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"11388:12:41","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4719,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11388:31:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4720,"nodeType":"ExpressionStatement","src":"11388:31:41"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4721,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11433:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4722,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11436:10:41","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"11433:13:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4723,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11433:15:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4743,"nodeType":"IfStatement","src":"11429:200:41","trueBody":{"id":4742,"nodeType":"Block","src":"11450:179:41","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":4728,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"11505:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11509:6:41","memberName":"sender","nodeType":"MemberAccess","src":"11505:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4730,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4708,"src":"11517:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4731,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11523:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"","id":4732,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"11532:2:41","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"arguments":[{"id":4725,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11484:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4724,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"11468:15:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1491_$","typeString":"type(contract IERC721Receiver)"}},"id":4726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11468:19:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1491","typeString":"contract IERC721Receiver"}},"id":4727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11488:16:41","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"11468:36:41","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":4733,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11468:67:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4734,"name":"ERC721_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"11539:15:41","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"11468:86:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4741,"nodeType":"IfStatement","src":"11464:154:41","trueBody":{"errorCall":{"arguments":[{"id":4737,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4710,"src":"11606:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4738,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4712,"src":"11610:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4736,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"11579:26:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":4739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11579:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4740,"nodeType":"RevertStatement","src":"11572:46:41"}}]}}]},"documentation":{"id":4706,"nodeType":"StructuredDocumentation","src":"10170:1117:41","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n approved by a token's issuer or an operator.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev remove the existing approval for `tokenId`.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":4745,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"11301:16:41","nodeType":"FunctionDefinition","parameters":{"id":4713,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4708,"mutability":"mutable","name":"from","nameLocation":"11326:4:41","nodeType":"VariableDeclaration","scope":4745,"src":"11318:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4707,"name":"address","nodeType":"ElementaryTypeName","src":"11318:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4710,"mutability":"mutable","name":"to","nameLocation":"11340:2:41","nodeType":"VariableDeclaration","scope":4745,"src":"11332:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4709,"name":"address","nodeType":"ElementaryTypeName","src":"11332:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4712,"mutability":"mutable","name":"tokenId","nameLocation":"11352:7:41","nodeType":"VariableDeclaration","scope":4745,"src":"11344:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4711,"name":"uint256","nodeType":"ElementaryTypeName","src":"11344:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11317:43:41"},"returnParameters":{"id":4714,"nodeType":"ParameterList","parameters":[],"src":"11378:0:41"},"scope":4802,"src":"11292:343:41","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1333],"body":{"id":4786,"nodeType":"Block","src":"12942:259:41","statements":[{"expression":{"arguments":[{"id":4758,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"12965:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4759,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"12971:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4760,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"12975:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4757,"name":"transferFrom","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4705,"src":"12952:12:41","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":4761,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12952:31:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4762,"nodeType":"ExpressionStatement","src":"12952:31:41"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4763,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"12997:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4764,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13000:10:41","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":3517,"src":"12997:13:41","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":4765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12997:15:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4785,"nodeType":"IfStatement","src":"12993:202:41","trueBody":{"id":4784,"nodeType":"Block","src":"13014:181:41","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":4777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"expression":{"id":4770,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"13069:3:41","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4771,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13073:6:41","memberName":"sender","nodeType":"MemberAccess","src":"13069:10:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4772,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4748,"src":"13081:4:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4773,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"13087:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4774,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4754,"src":"13096:4:41","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":4767,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"13048:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4766,"name":"IERC721Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1491,"src":"13032:15:41","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC721Receiver_$1491_$","typeString":"type(contract IERC721Receiver)"}},"id":4768,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13032:19:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC721Receiver_$1491","typeString":"contract IERC721Receiver"}},"id":4769,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13052:16:41","memberName":"onERC721Received","nodeType":"MemberAccess","referencedDeclaration":1490,"src":"13032:36:41","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":4775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13032:69:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":4776,"name":"ERC721_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"13105:15:41","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"13032:88:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4783,"nodeType":"IfStatement","src":"13028:156:41","trueBody":{"errorCall":{"arguments":[{"id":4779,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4750,"src":"13172:2:41","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4780,"name":"tokenId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4752,"src":"13176:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4778,"name":"ERC721SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"13145:26:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,uint256) pure"}},"id":4781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13145:39:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4782,"nodeType":"RevertStatement","src":"13138:46:41"}}]}}]},"documentation":{"id":4746,"nodeType":"StructuredDocumentation","src":"11641:1189:41","text":"@notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\n approved by a token's issuer or an operator.\n @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev remove the existing approval for `tokenId`.\n @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\n @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\n @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\n @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\n  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":4787,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"12844:16:41","nodeType":"FunctionDefinition","parameters":{"id":4755,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4748,"mutability":"mutable","name":"from","nameLocation":"12869:4:41","nodeType":"VariableDeclaration","scope":4787,"src":"12861:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4747,"name":"address","nodeType":"ElementaryTypeName","src":"12861:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4750,"mutability":"mutable","name":"to","nameLocation":"12883:2:41","nodeType":"VariableDeclaration","scope":4787,"src":"12875:10:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4749,"name":"address","nodeType":"ElementaryTypeName","src":"12875:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4752,"mutability":"mutable","name":"tokenId","nameLocation":"12895:7:41","nodeType":"VariableDeclaration","scope":4787,"src":"12887:15:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4751,"name":"uint256","nodeType":"ElementaryTypeName","src":"12887:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4754,"mutability":"mutable","name":"data","nameLocation":"12919:4:41","nodeType":"VariableDeclaration","scope":4787,"src":"12904:19:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4753,"name":"bytes","nodeType":"ElementaryTypeName","src":"12904:5:41","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"12860:64:41"},"returnParameters":{"id":4756,"nodeType":"ParameterList","parameters":[],"src":"12942:0:41"},"scope":4802,"src":"12835:366:41","stateMutability":"nonpayable","virtual":true,"visibility":"external"},{"baseFunctions":[1367],"body":{"id":4800,"nodeType":"Block","src":"13338:43:41","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":4797,"name":"NoOperatorAllowed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4233,"src":"13355:17:41","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":4798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13355:19:41","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4799,"nodeType":"RevertStatement","src":"13348:26:41"}]},"documentation":{"id":4788,"nodeType":"StructuredDocumentation","src":"13207:23:41","text":"@inheritdoc IERC721"},"functionSelector":"e985e9c5","id":4801,"implemented":true,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"13244:16:41","nodeType":"FunctionDefinition","parameters":{"id":4793,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4790,"mutability":"mutable","name":"owner","nameLocation":"13269:5:41","nodeType":"VariableDeclaration","scope":4801,"src":"13261:13:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4789,"name":"address","nodeType":"ElementaryTypeName","src":"13261:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4792,"mutability":"mutable","name":"operator","nameLocation":"13284:8:41","nodeType":"VariableDeclaration","scope":4801,"src":"13276:16:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4791,"name":"address","nodeType":"ElementaryTypeName","src":"13276:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"13260:33:41"},"returnParameters":{"id":4796,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4795,"mutability":"mutable","name":"approvedForAll","nameLocation":"13322:14:41","nodeType":"VariableDeclaration","scope":4801,"src":"13317:19:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4794,"name":"bool","nodeType":"ElementaryTypeName","src":"13317:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"13316:21:41"},"scope":4802,"src":"13235:146:41","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4803,"src":"1728:11655:41","usedErrors":[236,259,887,1210,1219,1226,1233,1236,1241,1246,4230,4233,4236,4241,4246],"usedEvents":[277,286,295,1264,4813,4822]}],"src":"32:13352:41"},"id":41},"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol":{"ast":{"absolutePath":"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol","exportedSymbols":{"AllowedTransferRemoved":[4822],"TransferAllowed":[4813]},"id":4823,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4804,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:42"},{"anonymous":false,"documentation":{"id":4805,"nodeType":"StructuredDocumentation","src":"58:288:42","text":"@notice Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`.\n @param recipient The address to which transfer was approved for.\n @param tokenId The tokenId that was approved for transfer.\n @param sender The account that approved the transfer."},"eventSelector":"1617c30910ed9def77a5583fb42361192fa9e1a3ae60209c6281a276f88f9624","id":4813,"name":"TransferAllowed","nameLocation":"352:15:42","nodeType":"EventDefinition","parameters":{"id":4812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4807,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"384:9:42","nodeType":"VariableDeclaration","scope":4813,"src":"368:25:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4806,"name":"address","nodeType":"ElementaryTypeName","src":"368:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4809,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"411:7:42","nodeType":"VariableDeclaration","scope":4813,"src":"395:23:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4808,"name":"uint256","nodeType":"ElementaryTypeName","src":"395:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4811,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"428:6:42","nodeType":"VariableDeclaration","scope":4813,"src":"420:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4810,"name":"address","nodeType":"ElementaryTypeName","src":"420:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"367:68:42"},"src":"346:90:42"},{"anonymous":false,"documentation":{"id":4814,"nodeType":"StructuredDocumentation","src":"438:289:42","text":"@notice Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`.\n @param recipient The address to which transfer was approved for.\n @param tokenId The tokenId that was approved for transfer.\n @param sender The account that approved the transfer."},"eventSelector":"648e1fca65e8b59490cc7c26438ac6ed40ea5c54de21e85e2ef44a52b8f2ebab","id":4822,"name":"AllowedTransferRemoved","nameLocation":"733:22:42","nodeType":"EventDefinition","parameters":{"id":4821,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4816,"indexed":true,"mutability":"mutable","name":"recipient","nameLocation":"772:9:42","nodeType":"VariableDeclaration","scope":4822,"src":"756:25:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4815,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4818,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"799:7:42","nodeType":"VariableDeclaration","scope":4822,"src":"783:23:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4817,"name":"uint256","nodeType":"ElementaryTypeName","src":"783:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4820,"indexed":false,"mutability":"mutable","name":"sender","nameLocation":"816:6:42","nodeType":"VariableDeclaration","scope":4822,"src":"808:14:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4819,"name":"address","nodeType":"ElementaryTypeName","src":"808:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:68:42"},"src":"727:97:42"}],"src":"32:794:42"},"id":42},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","exportedSymbols":{"IIssuersDIDRegistry":[4844]},"id":4845,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4824,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:43"},{"abstract":false,"baseContracts":[],"canonicalName":"IIssuersDIDRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":4825,"nodeType":"StructuredDocumentation","src":"58:119:43","text":"@title IAllowedIssuersRegistry\n @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs"},"fullyImplemented":false,"id":4844,"linearizedBaseContracts":[4844],"name":"IIssuersDIDRegistry","nameLocation":"187:19:43","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f9236a39","id":4834,"implemented":false,"kind":"function","modifiers":[],"name":"issuers","nameLocation":"222:7:43","nodeType":"FunctionDefinition","parameters":{"id":4830,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4827,"mutability":"mutable","name":"hashedDid","nameLocation":"238:9:43","nodeType":"VariableDeclaration","scope":4834,"src":"230:17:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"230:7:43","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4829,"mutability":"mutable","name":"issuerAddress","nameLocation":"257:13:43","nodeType":"VariableDeclaration","scope":4834,"src":"249:21:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4828,"name":"address","nodeType":"ElementaryTypeName","src":"249:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"229:42:43"},"returnParameters":{"id":4833,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4832,"mutability":"mutable","name":"allowed","nameLocation":"300:7:43","nodeType":"VariableDeclaration","scope":4834,"src":"295:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4831,"name":"bool","nodeType":"ElementaryTypeName","src":"295:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"294:14:43"},"scope":4844,"src":"213:96:43","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f176f7e","id":4843,"implemented":false,"kind":"function","modifiers":[],"name":"isIssuerAllowed","nameLocation":"324:15:43","nodeType":"FunctionDefinition","parameters":{"id":4839,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4836,"mutability":"mutable","name":"did","nameLocation":"356:3:43","nodeType":"VariableDeclaration","scope":4843,"src":"340:19:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":4835,"name":"string","nodeType":"ElementaryTypeName","src":"340:6:43","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4838,"mutability":"mutable","name":"issuerAddress","nameLocation":"369:13:43","nodeType":"VariableDeclaration","scope":4843,"src":"361:21:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4837,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"339:44:43"},"returnParameters":{"id":4842,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4841,"mutability":"mutable","name":"allowed","nameLocation":"412:7:43","nodeType":"VariableDeclaration","scope":4843,"src":"407:12:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4840,"name":"bool","nodeType":"ElementaryTypeName","src":"407:4:43","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"406:14:43"},"scope":4844,"src":"315:106:43","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4845,"src":"177:246:43","usedErrors":[],"usedEvents":[]}],"src":"32:392:43"},"id":43},"contracts/vc/interfaces/IRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","exportedSymbols":{"IRevocationRegistry":[4884]},"id":4885,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4846,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:44"},{"abstract":false,"baseContracts":[],"canonicalName":"IRevocationRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":4884,"linearizedBaseContracts":[4884],"name":"IRevocationRegistry","nameLocation":"68:19:44","nodeType":"ContractDefinition","nodes":[{"functionSelector":"adb610a3","id":4851,"implemented":false,"kind":"function","modifiers":[],"name":"currentNonce","nameLocation":"103:12:44","nodeType":"FunctionDefinition","parameters":{"id":4847,"nodeType":"ParameterList","parameters":[],"src":"115:2:44"},"returnParameters":{"id":4850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4849,"mutability":"mutable","name":"nonce","nameLocation":"149:5:44","nodeType":"VariableDeclaration","scope":4851,"src":"141:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4848,"name":"uint256","nodeType":"ElementaryTypeName","src":"141:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"140:15:44"},"scope":4884,"src":"94:62:44","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"12b7ad29","id":4862,"implemented":false,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"171:8:44","nodeType":"FunctionDefinition","parameters":{"id":4860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4853,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"188:15:44","nodeType":"VariableDeclaration","scope":4862,"src":"180:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4852,"name":"bytes32","nodeType":"ElementaryTypeName","src":"180:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4855,"mutability":"mutable","name":"vcId","nameLocation":"213:4:44","nodeType":"VariableDeclaration","scope":4862,"src":"205:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4854,"name":"uint256","nodeType":"ElementaryTypeName","src":"205:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4857,"mutability":"mutable","name":"nonce","nameLocation":"227:5:44","nodeType":"VariableDeclaration","scope":4862,"src":"219:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4856,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4859,"mutability":"mutable","name":"signature","nameLocation":"249:9:44","nodeType":"VariableDeclaration","scope":4862,"src":"234:24:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4858,"name":"bytes","nodeType":"ElementaryTypeName","src":"234:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"179:80:44"},"returnParameters":{"id":4861,"nodeType":"ParameterList","parameters":[],"src":"268:0:44"},"scope":4884,"src":"162:107:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4c66f71c","id":4874,"implemented":false,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"284:14:44","nodeType":"FunctionDefinition","parameters":{"id":4872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4864,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"307:15:44","nodeType":"VariableDeclaration","scope":4874,"src":"299:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4863,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4867,"mutability":"mutable","name":"vcIds","nameLocation":"343:5:44","nodeType":"VariableDeclaration","scope":4874,"src":"324:24:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4865,"name":"uint256","nodeType":"ElementaryTypeName","src":"324:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4866,"nodeType":"ArrayTypeName","src":"324:9:44","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4869,"mutability":"mutable","name":"nonce","nameLocation":"358:5:44","nodeType":"VariableDeclaration","scope":4874,"src":"350:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4868,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4871,"mutability":"mutable","name":"signature","nameLocation":"380:9:44","nodeType":"VariableDeclaration","scope":4874,"src":"365:24:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4870,"name":"bytes","nodeType":"ElementaryTypeName","src":"365:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"298:92:44"},"returnParameters":{"id":4873,"nodeType":"ParameterList","parameters":[],"src":"399:0:44"},"scope":4884,"src":"275:125:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a3a2656a","id":4883,"implemented":false,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"415:9:44","nodeType":"FunctionDefinition","parameters":{"id":4879,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4876,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"433:15:44","nodeType":"VariableDeclaration","scope":4883,"src":"425:23:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4875,"name":"bytes32","nodeType":"ElementaryTypeName","src":"425:7:44","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4878,"mutability":"mutable","name":"vcId","nameLocation":"458:4:44","nodeType":"VariableDeclaration","scope":4883,"src":"450:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4877,"name":"uint256","nodeType":"ElementaryTypeName","src":"450:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"424:39:44"},"returnParameters":{"id":4882,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4881,"mutability":"mutable","name":"revoked","nameLocation":"492:7:44","nodeType":"VariableDeclaration","scope":4883,"src":"487:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4880,"name":"bool","nodeType":"ElementaryTypeName","src":"487:4:44","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"486:14:44"},"scope":4884,"src":"406:95:44","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4885,"src":"58:445:44","usedErrors":[],"usedEvents":[]}],"src":"32:472:44"},"id":44},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"ast":{"absolutePath":"contracts/vc/libraries/CertificateNFTv1MetaData.sol","exportedSymbols":{"CertificateNFTv1MetaData":[4902]},"id":4903,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4886,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:45"},{"abstract":false,"baseContracts":[],"canonicalName":"CertificateNFTv1MetaData","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":4902,"linearizedBaseContracts":[4902],"name":"CertificateNFTv1MetaData","nameLocation":"66:24:45","nodeType":"ContractDefinition","nodes":[{"canonicalName":"CertificateNFTv1MetaData.MetaData","id":4901,"members":[{"constant":false,"id":4888,"mutability":"mutable","name":"schemaVersion","nameLocation":"130:13:45","nodeType":"VariableDeclaration","scope":4901,"src":"123:20:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4887,"name":"uint16","nodeType":"ElementaryTypeName","src":"123:6:45","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4890,"mutability":"mutable","name":"achievementType","nameLocation":"160:15:45","nodeType":"VariableDeclaration","scope":4901,"src":"153:22:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"},"typeName":{"id":4889,"name":"uint16","nodeType":"ElementaryTypeName","src":"153:6:45","typeDescriptions":{"typeIdentifier":"t_uint16","typeString":"uint16"}},"visibility":"internal"},{"constant":false,"id":4892,"mutability":"mutable","name":"awardedDate","nameLocation":"192:11:45","nodeType":"VariableDeclaration","scope":4901,"src":"185:18:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4891,"name":"uint64","nodeType":"ElementaryTypeName","src":"185:6:45","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4894,"mutability":"mutable","name":"validFrom","nameLocation":"220:9:45","nodeType":"VariableDeclaration","scope":4901,"src":"213:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4893,"name":"uint64","nodeType":"ElementaryTypeName","src":"213:6:45","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4896,"mutability":"mutable","name":"validUtil","nameLocation":"246:9:45","nodeType":"VariableDeclaration","scope":4901,"src":"239:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"},"typeName":{"id":4895,"name":"uint64","nodeType":"ElementaryTypeName","src":"239:6:45","typeDescriptions":{"typeIdentifier":"t_uint64","typeString":"uint64"}},"visibility":"internal"},{"constant":false,"id":4898,"mutability":"mutable","name":"issuerDid","nameLocation":"272:9:45","nodeType":"VariableDeclaration","scope":4901,"src":"265:16:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4897,"name":"string","nodeType":"ElementaryTypeName","src":"265:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":4900,"mutability":"mutable","name":"achievementId","nameLocation":"298:13:45","nodeType":"VariableDeclaration","scope":4901,"src":"291:20:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4899,"name":"string","nodeType":"ElementaryTypeName","src":"291:6:45","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"MetaData","nameLocation":"104:8:45","nodeType":"StructDefinition","scope":4902,"src":"97:221:45","visibility":"public"}],"scope":4903,"src":"58:262:45","usedErrors":[],"usedEvents":[]}],"src":"32:289:45"},"id":45}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4dec3e681a4a3c2735847a4f5f0ae2b32979f9bc8911002e3fd438425686a5864736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xDE 0xC3 0xE6 DUP2 LOG4 LOG3 0xC2 PUSH20 0x5847A4F5F0AE2B32979F9BC8911002E3FD438425 PUSH9 0x6A5864736F6C634300 ADDMOD AND STOP CALLER ","sourceMap":"428:4129:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;428:4129:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220a4dec3e681a4a3c2735847a4f5f0ae2b32979f9bc8911002e3fd438425686a5864736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG4 0xDE 0xC3 0xE6 DUP2 LOG4 LOG3 0xC2 PUSH20 0x5847A4F5F0AE2B32979F9BC8911002E3FD438425 PUSH9 0x6A5864736F6C634300 ADDMOD AND STOP CALLER ","sourceMap":"428:4129:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol":{"ERC721Metadata":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"constructor":{"params":{"metadataResolver":"The address of the metadata resolver contract.","name":"The name of the token.","symbol":"The symbol of the token."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"metadataResolver\":\"The address of the metadata resolver contract.\",\"name\":\"The name of the token.\",\"symbol\":\"The symbol of the token.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interfaces as supported: ERC721Metadata.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":\"ERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interfaces as supported: ERC721Metadata."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol":{"ERC721MetadataBase":{"abi":[{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).","errors":{"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}]},"kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC721 (Non-Fungible Token Standard).\",\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"notice\":\"This contracts uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":\"ERC721MetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}]},"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"notice":"This contracts uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol":{"IERC721BatchTransfer":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.","kind":"dev","methods":{"batchTransferFrom(address,address,uint256[])":{"details":"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.","params":{"from":"Current tokens owner.","to":"Address of the new token owner.","tokenIds":"Identifiers of the tokens to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransferFrom(address,address,uint256[])":"f3993d11"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0xf3993d11.\",\"kind\":\"dev\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"details\":\"Resets the token approval for each of `tokenIds`.Reverts if `to` is the zero address.Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event for each of `tokenIds`.\",\"params\":{\"from\":\"Current tokens owner.\",\"to\":\"Address of the new token owner.\",\"tokenIds\":\"Identifiers of the tokens to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransferFrom(address,address,uint256[])\":{\"notice\":\"Unsafely transfers a batch of tokens to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":\"IERC721BatchTransfer\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransferFrom(address,address,uint256[])":{"notice":"Unsafely transfers a batch of tokens to a recipient."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol":{"IERC721Burnable":{"abi":[{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burnFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.","kind":"dev","methods":{"batchBurnFrom(address,uint256[])":{"details":"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.","params":{"from":"The current tokens owner.","tokenIds":"The identifiers of the tokens to burn."}},"burnFrom(address,uint256)":{"details":"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.","params":{"from":"The current token owner.","tokenId":"The identifier of the token to burn."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address,uint256[])":"f2472965","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"details\":\"Reverts if one of `tokenIds` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\",\"params\":{\"from\":\"The current tokens owner.\",\"tokenIds\":\"The identifiers of the tokens to burn.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `tokenId` is not owned by `from`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits an {IERC721-Transfer} event with `to` set to the zero address.\",\"params\":{\"from\":\"The current token owner.\",\"tokenId\":\"The identifier of the token to burn.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address,uint256[])\":{\"notice\":\"Burns a batch of tokens.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":\"IERC721Burnable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address,uint256[])":{"notice":"Burns a batch of tokens."},"burnFrom(address,uint256)":{"notice":"Burns a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol":{"IERC721Deliverable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"deliver","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.","kind":"dev","methods":{"deliver(address[],uint256[])":{"details":"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.","params":{"recipients":"Addresses of the new tokens owners.","tokenIds":"Identifiers of the tokens to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"deliver(address[],uint256[])":"9da5e832"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"deliver\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x9da5e832.\",\"kind\":\"dev\",\"methods\":{\"deliver(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `tokenIds` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\",\"params\":{\"recipients\":\"Addresses of the new tokens owners.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deliver(address[],uint256[])\":{\"notice\":\"Unsafely mints tokens to multiple recipients.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":\"IERC721Deliverable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"deliver(address[],uint256[])":{"notice":"Unsafely mints tokens to multiple recipients."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol":{"IERC721Metadata":{"abi":[{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.","kind":"dev","methods":{"name()":{"returns":{"tokenName":"The name of the token."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Metadata.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"name()":"06fdde03","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x5b5e139f.\",\"kind\":\"dev\",\"methods\":{\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Metadata.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":\"IERC721Metadata\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol":{"IERC721Mintable":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeMint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.","kind":"dev","methods":{"batchMint(address,uint256[])":{"details":"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.","params":{"to":"Address of the new tokens owner.","tokenIds":"Identifiers of the tokens to mint."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.","params":{"to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}},"safeMint(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.","params":{"data":"Optional data to pass along to the receiver call.","to":"Address of the new token owner.","tokenId":"Identifier of the token to mint."}}},"title":"ERC721 Non-Fungible Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address,uint256[])":"4684d7e9","mint(address,uint256)":"40c10f19","safeMint(address,uint256,bytes)":"8832e6e3"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x8e773e13.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address,uint256[])\":{\"details\":\"Reverts if `to` is the zero address.Reverts if one of `tokenIds` already exists.Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\",\"params\":{\"to\":\"Address of the new tokens owner.\",\"tokenIds\":\"Identifiers of the tokens to mint.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}},\"safeMint(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `tokenId` already exists.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits an {IERC721-Transfer} event from the zero address.\",\"params\":{\"data\":\"Optional data to pass along to the receiver call.\",\"to\":\"Address of the new token owner.\",\"tokenId\":\"Identifier of the token to mint.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address,uint256[])\":{\"notice\":\"Unsafely mints a batch of tokens.\"},\"mint(address,uint256)\":{\"notice\":\"Unsafely mints a token.\"},\"safeMint(address,uint256,bytes)\":{\"notice\":\"Safely mints a token.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":\"IERC721Mintable\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address,uint256[])":{"notice":"Unsafely mints a batch of tokens."},"mint(address,uint256)":{"notice":"Unsafely mints a token."},"safeMint(address,uint256,bytes)":{"notice":"Safely mints a token."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol":{"IERC721Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC721Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.","kind":"dev","methods":{"onERC721Received(address,address,uint256,bytes)":{"details":"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.","params":{"data":"Optional additional data with no specified format.","from":"The previous token owner.","operator":"The initiator of the safe transfer.","tokenId":"The token identifier."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` (`0x150b7a02`) to accept, any other value to refuse."}}},"title":"ERC721 Non-Fungible Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC721Received(address,address,uint256,bytes)":"150b7a02"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721Note: The ERC-165 identifier for this interface is 0x150b7a02.\",\"kind\":\"dev\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"Note: This function is called by an ERC721 contract after a safe transfer.Note: The ERC721 contract address is always the message sender.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous token owner.\",\"operator\":\"The initiator of the safe transfer.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of an ERC721 token.\"}},\"notice\":\"Interface for supporting safe transfers from ERC721 contracts.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":\"IERC721Receiver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC721Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of an ERC721 token."}},"notice":"Interface for supporting safe transfers from ERC721 contracts.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol":{"ERC721Storage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f33e12fece2d0f7d886ba42f4e492c112090989c77a3dc44341279767998eda764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN RETURNDATACOPY SLT INVALID 0xCE 0x2D 0xF PUSH30 0x886BA42F4E492C112090989C77A3DC44341279767998EDA764736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1368:29619:33:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1368:29619:33;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220f33e12fece2d0f7d886ba42f4e492c112090989c77a3dc44341279767998eda764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 RETURN RETURNDATACOPY SLT INVALID 0xCE 0x2D 0xF PUSH30 0x886BA42F4E492C112090989C77A3DC44341279767998EDA764736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"1368:29619:33:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_callOnERC721Received(address,address,address,uint256,bytes memory)":"infinite","_isOperatable(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","_tokenExists(uint256)":"infinite","_tokenHasApproval(uint256)":"infinite","_tokenOwner(uint256)":"infinite","_tokenWasBurnt(uint256)":"infinite","approve(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","balanceOf(struct ERC721Storage.Layout storage pointer,address)":"infinite","batchBurnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256[] calldata)":"infinite","batchMint(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchMintOnce(struct ERC721Storage.Layout storage pointer,address,uint256[] memory)":"infinite","batchTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256[] calldata)":"infinite","burnFrom(struct ERC721Storage.Layout storage pointer,address,address,uint256)":"infinite","deliver(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","deliverOnce(struct ERC721Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","getApproved(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","init()":"infinite","initERC721BatchTransfer()":"infinite","initERC721Burnable()":"infinite","initERC721Deliverable()":"infinite","initERC721Metadata()":"infinite","initERC721Mintable()":"infinite","isApprovedForAll(struct ERC721Storage.Layout storage pointer,address,address)":"infinite","layout()":"infinite","mint(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","mintOnce(struct ERC721Storage.Layout storage pointer,address,uint256)":"infinite","ownerOf(struct ERC721Storage.Layout storage pointer,uint256)":"infinite","safeMint(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeMintOnce(struct ERC721Storage.Layout storage pointer,address,address,uint256,bytes memory)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","safeTransferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)":"infinite","setApprovalForAll(struct ERC721Storage.Layout storage pointer,address,address,bool)":"infinite","transferFrom(struct ERC721Storage.Layout storage pointer,address,address,address,uint256)":"infinite","wasBurnt(struct ERC721Storage.Layout storage pointer,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":\"ERC721Storage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol":{"TokenMetadataBase":{"abi":[{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.","kind":"dev","methods":{"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"name()":{"returns":{"tokenName":"The token name."}},"symbol()":{"returns":{"tokenSymbol":"The token symbol."}}},"title":"TokenMetadataBase (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"metadataResolver()":"a0c76f62","name()":"06fdde03","symbol()":"95d89b41"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"name()\":{\"returns\":{\"tokenName\":\"The token name.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The token symbol.\"}}},\"title\":\"TokenMetadataBase (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the token name. E.g. \\\"My Token\\\".\"},\"symbol()\":{\"notice\":\"Gets the token symbol. E.g. \\\"TOK\\\".\"}},\"notice\":\"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":\"TokenMetadataBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the token name. E.g. \"My Token\"."},"symbol()":{"notice":"Gets the token symbol. E.g. \"TOK\"."}},"notice":"Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol":{"ITokenMetadataResolver":{"abi":[{"inputs":[{"internalType":"address","name":"tokenContract","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenMetadataURI","outputs":[{"internalType":"string","name":"tokenURI","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{"tokenMetadataURI(address,uint256)":{"params":{"tokenContract":"The token contract for which to retrieve the token URI.","tokenId":"The token identifier."},"returns":{"tokenURI":"The token metadata URI."}}},"title":"ITokenMetadataResolver","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"tokenMetadataURI(address,uint256)":"f724dad7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenContract\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenMetadataURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenURI\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"params\":{\"tokenContract\":\"The token contract for which to retrieve the token URI.\",\"tokenId\":\"The token identifier.\"},\"returns\":{\"tokenURI\":\"The token metadata URI.\"}}},\"title\":\"ITokenMetadataResolver\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"tokenMetadataURI(address,uint256)\":{\"notice\":\"Gets the token metadata URI for a token.\"}},\"notice\":\"Interface for Token Metadata Resolvers.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":\"ITokenMetadataResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"tokenMetadataURI(address,uint256)":{"notice":"Gets the token metadata URI for a token."}},"notice":"Interface for Token Metadata Resolvers.","version":1}}},"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol":{"TokenMetadataStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028c417df087b66ebee642c0e92dee9cbbe8d6ba0131b7c7b08d03e7403ee522a64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0xC4 OR 0xDF ADDMOD PUSH28 0x66EBEE642C0E92DEE9CBBE8D6BA0131B7C7B08D03E7403EE522A6473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"230:3387:36:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;230:3387:36;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea264697066735822122028c417df087b66ebee642c0e92dee9cbbe8d6ba0131b7c7b08d03e7403ee522a64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x28 0xC4 OR 0xDF ADDMOD PUSH28 0x66EBEE642C0E92DEE9CBBE8D6BA0131B7C7B08D03E7403EE522A6473 PUSH16 0x6C634300081600330000000000000000 ","sourceMap":"230:3387:36:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct TokenMetadataStorage.Layout storage pointer,string memory,string memory,contract ITokenMetadataResolver)":"infinite","layout()":"infinite","metadataResolver(struct TokenMetadataStorage.Layout storage pointer)":"infinite","name(struct TokenMetadataStorage.Layout storage pointer)":"infinite","proxyInit(struct TokenMetadataStorage.Layout storage pointer,string calldata,string calldata,contract ITokenMetadataResolver)":"infinite","symbol(struct TokenMetadataStorage.Layout storage pointer)":"infinite","tokenMetadataURI(struct TokenMetadataStorage.Layout storage pointer,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":\"TokenMetadataStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:37:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:37;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:37:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:39:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:39;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:39:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/vc/OpenCampusCertificateNFTMinter.sol":{"OpenCampusCertificateNFTMinter":{"abi":[{"inputs":[{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"},{"internalType":"contract OpenCampusCertificateNFTv1","name":"nftv1","type":"address"},{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[],"name":"IssuerNotAllowed","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[],"name":"VcRevoked","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"internalType":"struct CertificateNFTv1MetaData.MetaData","name":"metadata","type":"tuple"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"name":"setRevocationRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":{"details":"Reverts with `VcRevoked` error if the token being minted has been revoked.signature is ECDSA signature for (to, tokenId, metadata).signature is a 65 bytes raw signature without compacting."},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"setRevocationRegistry(address)":{"params":{"revocationRegistry":"The address of the Revocation Registry contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_4030":{"entryPoint":null,"id":4030,"parameterSlots":3,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@constructorInit_695":{"entryPoint":177,"id":695,"parameterSlots":2,"returnSlots":0},"@layout_851":{"entryPoint":123,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":300,"id":999,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_953":{"entryPoint":348,"id":953,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4844t_contract$_OpenCampusCertificateNFTv1_$4802t_contract$_IRevocationRegistry_$4884_fromMemory":{"entryPoint":466,"id":null,"parameterSlots":2,"returnSlots":3},"checked_sub_t_uint256":{"entryPoint":550,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IIssuersDIDRegistry":{"entryPoint":441,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1076:46","nodeType":"YulBlock","src":"0:1076:46","statements":[{"nativeSrc":"6:3:46","nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nativeSrc":"80:86:46","nodeType":"YulBlock","src":"80:86:46","statements":[{"body":{"nativeSrc":"144:16:46","nodeType":"YulBlock","src":"144:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"153:1:46","nodeType":"YulLiteral","src":"153:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"156:1:46","nodeType":"YulLiteral","src":"156:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"146:6:46","nodeType":"YulIdentifier","src":"146:6:46"},"nativeSrc":"146:12:46","nodeType":"YulFunctionCall","src":"146:12:46"},"nativeSrc":"146:12:46","nodeType":"YulExpressionStatement","src":"146:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"103:5:46","nodeType":"YulIdentifier","src":"103:5:46"},{"arguments":[{"name":"value","nativeSrc":"114:5:46","nodeType":"YulIdentifier","src":"114:5:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"129:3:46","nodeType":"YulLiteral","src":"129:3:46","type":"","value":"160"},{"kind":"number","nativeSrc":"134:1:46","nodeType":"YulLiteral","src":"134:1:46","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"125:3:46","nodeType":"YulIdentifier","src":"125:3:46"},"nativeSrc":"125:11:46","nodeType":"YulFunctionCall","src":"125:11:46"},{"kind":"number","nativeSrc":"138:1:46","nodeType":"YulLiteral","src":"138:1:46","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"121:3:46","nodeType":"YulIdentifier","src":"121:3:46"},"nativeSrc":"121:19:46","nodeType":"YulFunctionCall","src":"121:19:46"}],"functionName":{"name":"and","nativeSrc":"110:3:46","nodeType":"YulIdentifier","src":"110:3:46"},"nativeSrc":"110:31:46","nodeType":"YulFunctionCall","src":"110:31:46"}],"functionName":{"name":"eq","nativeSrc":"100:2:46","nodeType":"YulIdentifier","src":"100:2:46"},"nativeSrc":"100:42:46","nodeType":"YulFunctionCall","src":"100:42:46"}],"functionName":{"name":"iszero","nativeSrc":"93:6:46","nodeType":"YulIdentifier","src":"93:6:46"},"nativeSrc":"93:50:46","nodeType":"YulFunctionCall","src":"93:50:46"},"nativeSrc":"90:70:46","nodeType":"YulIf","src":"90:70:46"}]},"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"14:152:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"69:5:46","nodeType":"YulTypedName","src":"69:5:46","type":""}],"src":"14:152:46"},{"body":{"nativeSrc":"377:467:46","nodeType":"YulBlock","src":"377:467:46","statements":[{"body":{"nativeSrc":"423:16:46","nodeType":"YulBlock","src":"423:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"432:1:46","nodeType":"YulLiteral","src":"432:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"435:1:46","nodeType":"YulLiteral","src":"435:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"425:6:46","nodeType":"YulIdentifier","src":"425:6:46"},"nativeSrc":"425:12:46","nodeType":"YulFunctionCall","src":"425:12:46"},"nativeSrc":"425:12:46","nodeType":"YulExpressionStatement","src":"425:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"398:7:46","nodeType":"YulIdentifier","src":"398:7:46"},{"name":"headStart","nativeSrc":"407:9:46","nodeType":"YulIdentifier","src":"407:9:46"}],"functionName":{"name":"sub","nativeSrc":"394:3:46","nodeType":"YulIdentifier","src":"394:3:46"},"nativeSrc":"394:23:46","nodeType":"YulFunctionCall","src":"394:23:46"},{"kind":"number","nativeSrc":"419:2:46","nodeType":"YulLiteral","src":"419:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"390:3:46","nodeType":"YulIdentifier","src":"390:3:46"},"nativeSrc":"390:32:46","nodeType":"YulFunctionCall","src":"390:32:46"},"nativeSrc":"387:52:46","nodeType":"YulIf","src":"387:52:46"},{"nativeSrc":"448:29:46","nodeType":"YulVariableDeclaration","src":"448:29:46","value":{"arguments":[{"name":"headStart","nativeSrc":"467:9:46","nodeType":"YulIdentifier","src":"467:9:46"}],"functionName":{"name":"mload","nativeSrc":"461:5:46","nodeType":"YulIdentifier","src":"461:5:46"},"nativeSrc":"461:16:46","nodeType":"YulFunctionCall","src":"461:16:46"},"variables":[{"name":"value","nativeSrc":"452:5:46","nodeType":"YulTypedName","src":"452:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"532:5:46","nodeType":"YulIdentifier","src":"532:5:46"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"486:45:46","nodeType":"YulIdentifier","src":"486:45:46"},"nativeSrc":"486:52:46","nodeType":"YulFunctionCall","src":"486:52:46"},"nativeSrc":"486:52:46","nodeType":"YulExpressionStatement","src":"486:52:46"},{"nativeSrc":"547:15:46","nodeType":"YulAssignment","src":"547:15:46","value":{"name":"value","nativeSrc":"557:5:46","nodeType":"YulIdentifier","src":"557:5:46"},"variableNames":[{"name":"value0","nativeSrc":"547:6:46","nodeType":"YulIdentifier","src":"547:6:46"}]},{"nativeSrc":"571:40:46","nodeType":"YulVariableDeclaration","src":"571:40:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"596:9:46","nodeType":"YulIdentifier","src":"596:9:46"},{"kind":"number","nativeSrc":"607:2:46","nodeType":"YulLiteral","src":"607:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"592:3:46","nodeType":"YulIdentifier","src":"592:3:46"},"nativeSrc":"592:18:46","nodeType":"YulFunctionCall","src":"592:18:46"}],"functionName":{"name":"mload","nativeSrc":"586:5:46","nodeType":"YulIdentifier","src":"586:5:46"},"nativeSrc":"586:25:46","nodeType":"YulFunctionCall","src":"586:25:46"},"variables":[{"name":"value_1","nativeSrc":"575:7:46","nodeType":"YulTypedName","src":"575:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"666:7:46","nodeType":"YulIdentifier","src":"666:7:46"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"620:45:46","nodeType":"YulIdentifier","src":"620:45:46"},"nativeSrc":"620:54:46","nodeType":"YulFunctionCall","src":"620:54:46"},"nativeSrc":"620:54:46","nodeType":"YulExpressionStatement","src":"620:54:46"},{"nativeSrc":"683:17:46","nodeType":"YulAssignment","src":"683:17:46","value":{"name":"value_1","nativeSrc":"693:7:46","nodeType":"YulIdentifier","src":"693:7:46"},"variableNames":[{"name":"value1","nativeSrc":"683:6:46","nodeType":"YulIdentifier","src":"683:6:46"}]},{"nativeSrc":"709:40:46","nodeType":"YulVariableDeclaration","src":"709:40:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"734:9:46","nodeType":"YulIdentifier","src":"734:9:46"},{"kind":"number","nativeSrc":"745:2:46","nodeType":"YulLiteral","src":"745:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"730:3:46","nodeType":"YulIdentifier","src":"730:3:46"},"nativeSrc":"730:18:46","nodeType":"YulFunctionCall","src":"730:18:46"}],"functionName":{"name":"mload","nativeSrc":"724:5:46","nodeType":"YulIdentifier","src":"724:5:46"},"nativeSrc":"724:25:46","nodeType":"YulFunctionCall","src":"724:25:46"},"variables":[{"name":"value_2","nativeSrc":"713:7:46","nodeType":"YulTypedName","src":"713:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"804:7:46","nodeType":"YulIdentifier","src":"804:7:46"}],"functionName":{"name":"validator_revert_contract_IIssuersDIDRegistry","nativeSrc":"758:45:46","nodeType":"YulIdentifier","src":"758:45:46"},"nativeSrc":"758:54:46","nodeType":"YulFunctionCall","src":"758:54:46"},"nativeSrc":"758:54:46","nodeType":"YulExpressionStatement","src":"758:54:46"},{"nativeSrc":"821:17:46","nodeType":"YulAssignment","src":"821:17:46","value":{"name":"value_2","nativeSrc":"831:7:46","nodeType":"YulIdentifier","src":"831:7:46"},"variableNames":[{"name":"value2","nativeSrc":"821:6:46","nodeType":"YulIdentifier","src":"821:6:46"}]}]},"name":"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4844t_contract$_OpenCampusCertificateNFTv1_$4802t_contract$_IRevocationRegistry_$4884_fromMemory","nativeSrc":"171:673:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"327:9:46","nodeType":"YulTypedName","src":"327:9:46","type":""},{"name":"dataEnd","nativeSrc":"338:7:46","nodeType":"YulTypedName","src":"338:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"350:6:46","nodeType":"YulTypedName","src":"350:6:46","type":""},{"name":"value1","nativeSrc":"358:6:46","nodeType":"YulTypedName","src":"358:6:46","type":""},{"name":"value2","nativeSrc":"366:6:46","nodeType":"YulTypedName","src":"366:6:46","type":""}],"src":"171:673:46"},{"body":{"nativeSrc":"898:176:46","nodeType":"YulBlock","src":"898:176:46","statements":[{"nativeSrc":"908:17:46","nodeType":"YulAssignment","src":"908:17:46","value":{"arguments":[{"name":"x","nativeSrc":"920:1:46","nodeType":"YulIdentifier","src":"920:1:46"},{"name":"y","nativeSrc":"923:1:46","nodeType":"YulIdentifier","src":"923:1:46"}],"functionName":{"name":"sub","nativeSrc":"916:3:46","nodeType":"YulIdentifier","src":"916:3:46"},"nativeSrc":"916:9:46","nodeType":"YulFunctionCall","src":"916:9:46"},"variableNames":[{"name":"diff","nativeSrc":"908:4:46","nodeType":"YulIdentifier","src":"908:4:46"}]},{"body":{"nativeSrc":"957:111:46","nodeType":"YulBlock","src":"957:111:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"978:1:46","nodeType":"YulLiteral","src":"978:1:46","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"985:3:46","nodeType":"YulLiteral","src":"985:3:46","type":"","value":"224"},{"kind":"number","nativeSrc":"990:10:46","nodeType":"YulLiteral","src":"990:10:46","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"981:3:46","nodeType":"YulIdentifier","src":"981:3:46"},"nativeSrc":"981:20:46","nodeType":"YulFunctionCall","src":"981:20:46"}],"functionName":{"name":"mstore","nativeSrc":"971:6:46","nodeType":"YulIdentifier","src":"971:6:46"},"nativeSrc":"971:31:46","nodeType":"YulFunctionCall","src":"971:31:46"},"nativeSrc":"971:31:46","nodeType":"YulExpressionStatement","src":"971:31:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1022:1:46","nodeType":"YulLiteral","src":"1022:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"1025:4:46","nodeType":"YulLiteral","src":"1025:4:46","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1015:6:46","nodeType":"YulIdentifier","src":"1015:6:46"},"nativeSrc":"1015:15:46","nodeType":"YulFunctionCall","src":"1015:15:46"},"nativeSrc":"1015:15:46","nodeType":"YulExpressionStatement","src":"1015:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1050:1:46","nodeType":"YulLiteral","src":"1050:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1053:4:46","nodeType":"YulLiteral","src":"1053:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1043:6:46","nodeType":"YulIdentifier","src":"1043:6:46"},"nativeSrc":"1043:15:46","nodeType":"YulFunctionCall","src":"1043:15:46"},"nativeSrc":"1043:15:46","nodeType":"YulExpressionStatement","src":"1043:15:46"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"940:4:46","nodeType":"YulIdentifier","src":"940:4:46"},{"name":"x","nativeSrc":"946:1:46","nodeType":"YulIdentifier","src":"946:1:46"}],"functionName":{"name":"gt","nativeSrc":"937:2:46","nodeType":"YulIdentifier","src":"937:2:46"},"nativeSrc":"937:11:46","nodeType":"YulFunctionCall","src":"937:11:46"},"nativeSrc":"934:134:46","nodeType":"YulIf","src":"934:134:46"}]},"name":"checked_sub_t_uint256","nativeSrc":"849:225:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"880:1:46","nodeType":"YulTypedName","src":"880:1:46","type":""},{"name":"y","nativeSrc":"883:1:46","nodeType":"YulTypedName","src":"883:1:46","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"889:4:46","nodeType":"YulTypedName","src":"889:4:46","type":""}],"src":"849:225:46"}]},"contents":"{\n    { }\n    function validator_revert_contract_IIssuersDIDRegistry(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$4844t_contract$_OpenCampusCertificateNFTv1_$4802t_contract$_IRevocationRegistry_$4884_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IIssuersDIDRegistry(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IIssuersDIDRegistry(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IIssuersDIDRegistry(value_2)\n        value2 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60c06040523480156200001157600080fd5b5060405162001366380380620013668339810160408190526200003491620001d2565b336200004b81620000446200007b565b90620000b1565b506001600160a01b0392831660805290821660a052600080546001600160a01b0319169190921617905562000248565b600080620000ab60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000226565b92915050565b6001600160a01b03811615620001085781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001286307f5828d60e41b6001620001206200012c565b91906200015c565b5050565b600080620000ab60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000226565b600160e01b6001600160e01b03198316016200018b576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381168114620001cf57600080fd5b50565b600080600060608486031215620001e857600080fd5b8351620001f581620001b9565b60208501519093506200020881620001b9565b60408501519092506200021b81620001b9565b809150509250925092565b81810381811115620000ab57634e487b7160e01b600052601160045260246000fd5b60805160a0516110f86200026e60003960006104f80152600061037a01526110f86000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b1161007657806395f94bc41161005b57806395f94bc41461014b578063d547741f1461015e578063f2fde38b1461017157600080fd5b80638da5cb5b1461010b57806391d148541461013857600080fd5b806301ffc9a7146100a85780632f2ff15d146100d05780634d5b0423146100e55780638bb9c5bf146100f8575b600080fd5b6100bb6100b6366004610c75565b610184565b60405190151581526020015b60405180910390f35b6100e36100de366004610cd9565b61019e565b005b6100e36100f3366004610d09565b6101cc565b6100e3610106366004610dc2565b6105a6565b6101136105bd565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100bb610146366004610cd9565b6105e9565b6100e3610159366004610ddb565b610634565b6100e361016c366004610cd9565b610687565b6100e361017f366004610ddb565b6106aa565b6000610198826101926106be565b906106ec565b92915050565b336101b1816101ab6107c6565b906107f4565b6101c78383836101bf610868565b929190610896565b505050565b60418114610206576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516021830135908335906020808601359160009160019161022f918c918c918c9101610edb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156102ab573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150600090506102e660a0890189610ff1565b6040516020016102f7929190611056565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff84811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190611066565b15610568576000546040517fa3a2656a00000000000000000000000000000000000000000000000000000000815260048101839052602481018b905273ffffffffffffffffffffffffffffffffffffffff9091169063a3a2656a90604401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611066565b156104bb576040517f6e80385700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f54c7be0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906354c7be0690610531908d908d908d90600401610edb565b600060405180830381600087803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b5050505061059a565b6040517fe41bfc5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b6105ba33826105b3610868565b919061096d565b50565b60006105e46105ca6107c6565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600061062d83836105f8610868565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b610640336101ab6107c6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610694816101ab6107c6565b6101c78383836106a2610868565b929190610a11565b6105ba33826106b76107c6565b9190610adb565b60008061019860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611088565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161073c57506000610198565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161078d57506001610198565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611088565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610864576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b60008061019860017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611088565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166109675760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b610978838284610bef565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156109675760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600161095e565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b48576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161085b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109675783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166101c7576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216602482015260440161085b565b600060208284031215610c8757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461062d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105ba57600080fd5b60008060408385031215610cec57600080fd5b823591506020830135610cfe81610cb7565b809150509250929050565b600080600080600060808688031215610d2157600080fd5b8535610d2c81610cb7565b945060208601359350604086013567ffffffffffffffff80821115610d5057600080fd5b9087019060e0828a031215610d6457600080fd5b90935060608701359080821115610d7a57600080fd5b818801915088601f830112610d8e57600080fd5b813581811115610d9d57600080fd5b896020828501011115610daf57600080fd5b9699959850939650602001949392505050565b600060208284031215610dd457600080fd5b5035919050565b600060208284031215610ded57600080fd5b813561062d81610cb7565b803561ffff81168114610e0a57600080fd5b919050565b803567ffffffffffffffff81168114610e0a57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e5c57600080fd5b830160208101925035905067ffffffffffffffff811115610e7c57600080fd5b803603821315610e8b57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061ffff80610f1085610df8565b16606084015280610f2360208601610df8565b1660808401525067ffffffffffffffff610f3f60408501610e0f565b1660a0830152610f5160608401610e0f565b67ffffffffffffffff1660c0830152610f6c60808401610e0f565b67ffffffffffffffff1660e0830152610f8860a0840184610e27565b60e0610100850152610f9f61014085018284610e92565b915050610faf60c0850185610e27565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa085840301610120860152610fe5838284610e92565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261102657600080fd5b83018035915067ffffffffffffffff82111561104157600080fd5b602001915036819003821315610e8b57600080fd5b8183823760009101908152919050565b60006020828403121561107857600080fd5b8151801515811461062d57600080fd5b81810381811115610198577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220a3227850e41d01a70299ca6417069970ac5963482eef007f93ecfa2938ba32bd64736f6c63430008160033","opcodes":"PUSH1 0xC0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1366 CODESIZE SUB DUP1 PUSH3 0x1366 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x1D2 JUMP JUMPDEST CALLER PUSH3 0x4B DUP2 PUSH3 0x44 PUSH3 0x7B JUMP JUMPDEST SWAP1 PUSH3 0xB1 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 DUP4 AND PUSH1 0x80 MSTORE SWAP1 DUP3 AND PUSH1 0xA0 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP2 SWAP1 SWAP3 AND OR SWAP1 SSTORE PUSH3 0x248 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAB PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x226 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x108 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x128 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x120 PUSH3 0x12C JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x15C JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xAB PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x226 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x18B JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x1E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 MLOAD PUSH3 0x1F5 DUP2 PUSH3 0x1B9 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x208 DUP2 PUSH3 0x1B9 JUMP JUMPDEST PUSH1 0x40 DUP6 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x21B DUP2 PUSH3 0x1B9 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xAB JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH2 0x10F8 PUSH3 0x26E PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x4F8 ADD MSTORE PUSH1 0x0 PUSH2 0x37A ADD MSTORE PUSH2 0x10F8 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x95F94BC4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x4D5B0423 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x19E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE3 PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC2 JUMP JUMPDEST PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x5E9 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x634 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x16C CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x687 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198 DUP3 PUSH2 0x192 PUSH2 0x6BE JUMP JUMPDEST SWAP1 PUSH2 0x6EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x1B1 DUP2 PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST SWAP1 PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0x1C7 DUP4 DUP4 DUP4 PUSH2 0x1BF PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x206 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x22F SWAP2 DUP13 SWAP2 DUP13 SWAP2 DUP13 SWAP2 ADD PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x2E6 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0xFF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F7 SWAP3 SWAP2 SWAP1 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x460 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0x4BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x6E80385700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x54C7BE0600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x54C7BE06 SWAP1 PUSH2 0x531 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x59A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE41BFC5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5BA CALLER DUP3 PUSH2 0x5B3 PUSH2 0x868 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x96D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E4 PUSH2 0x5CA PUSH2 0x7C6 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x62D DUP4 DUP4 PUSH2 0x5F8 PUSH2 0x868 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x640 CALLER PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH2 0x694 DUP2 PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x1C7 DUP4 DUP4 DUP4 PUSH2 0x6A2 PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x5BA CALLER DUP3 PUSH2 0x6B7 PUSH2 0x7C6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x73C JUMPI POP PUSH1 0x0 PUSH2 0x198 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x78D JUMPI POP PUSH1 0x1 PUSH2 0x198 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1088 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x967 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x978 DUP4 DUP3 DUP5 PUSH2 0xBEF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x95E JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x85B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x967 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x85B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xCFE DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xD2C DUP2 PUSH2 0xCB7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0xE0 DUP3 DUP11 SUB SLT ISZERO PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x62D DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xE0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFFFF DUP1 PUSH2 0xF10 DUP6 PUSH2 0xDF8 JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH2 0xF23 PUSH1 0x20 DUP7 ADD PUSH2 0xDF8 JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0xF3F PUSH1 0x40 DUP6 ADD PUSH2 0xE0F JUMP JUMPDEST AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0xF51 PUSH1 0x60 DUP5 ADD PUSH2 0xE0F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xF6C PUSH1 0x80 DUP5 ADD PUSH2 0xE0F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0xF88 PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0xE0 PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0xF9F PUSH2 0x140 DUP6 ADD DUP3 DUP5 PUSH2 0xE92 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xFAF PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0xE27 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP6 DUP5 SUB ADD PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0xFE5 DUP4 DUP3 DUP5 PUSH2 0xE92 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x198 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0x22 PUSH25 0x50E41D01A70299CA6417069970AC5963482EEF007F93ECFA29 CODESIZE 0xBA ORIGIN 0xBD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"689:2429:40:-:0;;;1282:296;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1449:10;1008:63:2;1449:10:40;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;1471:26:40;;::::1;;::::0;1507:14;;::::1;;::::0;1531:19:::1;:40:::0;;-1:-1:-1;;;;;;1531:40:40::1;::::0;;;::::1;;::::0;;689:2429;;5065:174:13;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:13:o;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:152:46:-;-1:-1:-1;;;;;110:31:46;;100:42;;90:70;;156:1;153;146:12;90:70;14:152;:::o;171:673::-;350:6;358;366;419:2;407:9;398:7;394:23;390:32;387:52;;;435:1;432;425:12;387:52;467:9;461:16;486:52;532:5;486:52;:::i;:::-;607:2;592:18;;586:25;557:5;;-1:-1:-1;620:54:46;586:25;620:54;:::i;:::-;745:2;730:18;;724:25;693:7;;-1:-1:-1;758:54:46;724:25;758:54;:::i;:::-;831:7;821:17;;;171:673;;;;;:::o;849:225::-;916:9;;;937:11;;;934:134;;;990:10;985:3;981:20;978:1;971:31;1025:4;1022:1;1015:15;1053:4;1050:1;1043:15;849:225;689:2429:40;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_3841":{"entryPoint":null,"id":3841,"parameterSlots":0,"returnSlots":1},"@enforceHasRole_557":{"entryPoint":3055,"id":557,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_819":{"entryPoint":2036,"id":819,"parameterSlots":2,"returnSlots":0},"@grantRole_110":{"entryPoint":414,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_410":{"entryPoint":2198,"id":410,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":1513,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@layout_593":{"entryPoint":2152,"id":593,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":1990,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":1726,"id":999,"parameterSlots":0,"returnSlots":1},"@mint_4138":{"entryPoint":460,"id":4138,"parameterSlots":5,"returnSlots":0},"@owner_209":{"entryPoint":1469,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_772":{"entryPoint":null,"id":772,"parameterSlots":1,"returnSlots":1},"@renounceRole_159":{"entryPoint":1446,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":2413,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":1671,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_447":{"entryPoint":2577,"id":447,"parameterSlots":4,"returnSlots":0},"@setRevocationRegistry_4051":{"entryPoint":1588,"id":4051,"parameterSlots":1,"returnSlots":0},"@supportsInterface_881":{"entryPoint":388,"id":881,"parameterSlots":1,"returnSlots":1},"@supportsInterface_987":{"entryPoint":1772,"id":987,"parameterSlots":2,"returnSlots":1},"@transferOwnership_226":{"entryPoint":1706,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_759":{"entryPoint":2779,"id":759,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":3337,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4198,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":3522,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":3289,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":3189,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IRevocationRegistry_$4884":{"entryPoint":3547,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_uint16":{"entryPoint":3576,"id":null,"parameterSlots":1,"returnSlots":1},"abi_decode_uint64":{"entryPoint":3599,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_string_calldata":{"entryPoint":3730,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4182,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$4901_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$4901_memory_ptr__fromStack_reversed":{"entryPoint":3803,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"access_calldata_tail_t_string_calldata_ptr":{"entryPoint":4081,"id":null,"parameterSlots":2,"returnSlots":2},"calldata_access_string_calldata":{"entryPoint":3623,"id":null,"parameterSlots":2,"returnSlots":2},"checked_sub_t_uint256":{"entryPoint":4232,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_address":{"entryPoint":3255,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8650:46","nodeType":"YulBlock","src":"0:8650:46","statements":[{"nativeSrc":"6:3:46","nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nativeSrc":"83:263:46","nodeType":"YulBlock","src":"83:263:46","statements":[{"body":{"nativeSrc":"129:16:46","nodeType":"YulBlock","src":"129:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:46","nodeType":"YulLiteral","src":"138:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:46","nodeType":"YulLiteral","src":"141:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:46","nodeType":"YulIdentifier","src":"131:6:46"},"nativeSrc":"131:12:46","nodeType":"YulFunctionCall","src":"131:12:46"},"nativeSrc":"131:12:46","nodeType":"YulExpressionStatement","src":"131:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:46","nodeType":"YulIdentifier","src":"104:7:46"},{"name":"headStart","nativeSrc":"113:9:46","nodeType":"YulIdentifier","src":"113:9:46"}],"functionName":{"name":"sub","nativeSrc":"100:3:46","nodeType":"YulIdentifier","src":"100:3:46"},"nativeSrc":"100:23:46","nodeType":"YulFunctionCall","src":"100:23:46"},{"kind":"number","nativeSrc":"125:2:46","nodeType":"YulLiteral","src":"125:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:46","nodeType":"YulIdentifier","src":"96:3:46"},"nativeSrc":"96:32:46","nodeType":"YulFunctionCall","src":"96:32:46"},"nativeSrc":"93:52:46","nodeType":"YulIf","src":"93:52:46"},{"nativeSrc":"154:36:46","nodeType":"YulVariableDeclaration","src":"154:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:46","nodeType":"YulIdentifier","src":"180:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:46","nodeType":"YulIdentifier","src":"167:12:46"},"nativeSrc":"167:23:46","nodeType":"YulFunctionCall","src":"167:23:46"},"variables":[{"name":"value","nativeSrc":"158:5:46","nodeType":"YulTypedName","src":"158:5:46","type":""}]},{"body":{"nativeSrc":"300:16:46","nodeType":"YulBlock","src":"300:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:46","nodeType":"YulLiteral","src":"309:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:46","nodeType":"YulLiteral","src":"312:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:46","nodeType":"YulIdentifier","src":"302:6:46"},"nativeSrc":"302:12:46","nodeType":"YulFunctionCall","src":"302:12:46"},"nativeSrc":"302:12:46","nodeType":"YulExpressionStatement","src":"302:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:46","nodeType":"YulIdentifier","src":"212:5:46"},{"arguments":[{"name":"value","nativeSrc":"223:5:46","nodeType":"YulIdentifier","src":"223:5:46"},{"kind":"number","nativeSrc":"230:66:46","nodeType":"YulLiteral","src":"230:66:46","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:46","nodeType":"YulIdentifier","src":"219:3:46"},"nativeSrc":"219:78:46","nodeType":"YulFunctionCall","src":"219:78:46"}],"functionName":{"name":"eq","nativeSrc":"209:2:46","nodeType":"YulIdentifier","src":"209:2:46"},"nativeSrc":"209:89:46","nodeType":"YulFunctionCall","src":"209:89:46"}],"functionName":{"name":"iszero","nativeSrc":"202:6:46","nodeType":"YulIdentifier","src":"202:6:46"},"nativeSrc":"202:97:46","nodeType":"YulFunctionCall","src":"202:97:46"},"nativeSrc":"199:117:46","nodeType":"YulIf","src":"199:117:46"},{"nativeSrc":"325:15:46","nodeType":"YulAssignment","src":"325:15:46","value":{"name":"value","nativeSrc":"335:5:46","nodeType":"YulIdentifier","src":"335:5:46"},"variableNames":[{"name":"value0","nativeSrc":"325:6:46","nodeType":"YulIdentifier","src":"325:6:46"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:46","nodeType":"YulTypedName","src":"49:9:46","type":""},{"name":"dataEnd","nativeSrc":"60:7:46","nodeType":"YulTypedName","src":"60:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:46","nodeType":"YulTypedName","src":"72:6:46","type":""}],"src":"14:332:46"},{"body":{"nativeSrc":"446:92:46","nodeType":"YulBlock","src":"446:92:46","statements":[{"nativeSrc":"456:26:46","nodeType":"YulAssignment","src":"456:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:46","nodeType":"YulIdentifier","src":"468:9:46"},{"kind":"number","nativeSrc":"479:2:46","nodeType":"YulLiteral","src":"479:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:46","nodeType":"YulIdentifier","src":"464:3:46"},"nativeSrc":"464:18:46","nodeType":"YulFunctionCall","src":"464:18:46"},"variableNames":[{"name":"tail","nativeSrc":"456:4:46","nodeType":"YulIdentifier","src":"456:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:46","nodeType":"YulIdentifier","src":"498:9:46"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:46","nodeType":"YulIdentifier","src":"523:6:46"}],"functionName":{"name":"iszero","nativeSrc":"516:6:46","nodeType":"YulIdentifier","src":"516:6:46"},"nativeSrc":"516:14:46","nodeType":"YulFunctionCall","src":"516:14:46"}],"functionName":{"name":"iszero","nativeSrc":"509:6:46","nodeType":"YulIdentifier","src":"509:6:46"},"nativeSrc":"509:22:46","nodeType":"YulFunctionCall","src":"509:22:46"}],"functionName":{"name":"mstore","nativeSrc":"491:6:46","nodeType":"YulIdentifier","src":"491:6:46"},"nativeSrc":"491:41:46","nodeType":"YulFunctionCall","src":"491:41:46"},"nativeSrc":"491:41:46","nodeType":"YulExpressionStatement","src":"491:41:46"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:46","nodeType":"YulTypedName","src":"415:9:46","type":""},{"name":"value0","nativeSrc":"426:6:46","nodeType":"YulTypedName","src":"426:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:46","nodeType":"YulTypedName","src":"437:4:46","type":""}],"src":"351:187:46"},{"body":{"nativeSrc":"588:109:46","nodeType":"YulBlock","src":"588:109:46","statements":[{"body":{"nativeSrc":"675:16:46","nodeType":"YulBlock","src":"675:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"684:1:46","nodeType":"YulLiteral","src":"684:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"687:1:46","nodeType":"YulLiteral","src":"687:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"677:6:46","nodeType":"YulIdentifier","src":"677:6:46"},"nativeSrc":"677:12:46","nodeType":"YulFunctionCall","src":"677:12:46"},"nativeSrc":"677:12:46","nodeType":"YulExpressionStatement","src":"677:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"611:5:46","nodeType":"YulIdentifier","src":"611:5:46"},{"arguments":[{"name":"value","nativeSrc":"622:5:46","nodeType":"YulIdentifier","src":"622:5:46"},{"kind":"number","nativeSrc":"629:42:46","nodeType":"YulLiteral","src":"629:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"618:3:46","nodeType":"YulIdentifier","src":"618:3:46"},"nativeSrc":"618:54:46","nodeType":"YulFunctionCall","src":"618:54:46"}],"functionName":{"name":"eq","nativeSrc":"608:2:46","nodeType":"YulIdentifier","src":"608:2:46"},"nativeSrc":"608:65:46","nodeType":"YulFunctionCall","src":"608:65:46"}],"functionName":{"name":"iszero","nativeSrc":"601:6:46","nodeType":"YulIdentifier","src":"601:6:46"},"nativeSrc":"601:73:46","nodeType":"YulFunctionCall","src":"601:73:46"},"nativeSrc":"598:93:46","nodeType":"YulIf","src":"598:93:46"}]},"name":"validator_revert_address","nativeSrc":"543:154:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"577:5:46","nodeType":"YulTypedName","src":"577:5:46","type":""}],"src":"543:154:46"},{"body":{"nativeSrc":"789:228:46","nodeType":"YulBlock","src":"789:228:46","statements":[{"body":{"nativeSrc":"835:16:46","nodeType":"YulBlock","src":"835:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"844:1:46","nodeType":"YulLiteral","src":"844:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"847:1:46","nodeType":"YulLiteral","src":"847:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"837:6:46","nodeType":"YulIdentifier","src":"837:6:46"},"nativeSrc":"837:12:46","nodeType":"YulFunctionCall","src":"837:12:46"},"nativeSrc":"837:12:46","nodeType":"YulExpressionStatement","src":"837:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"810:7:46","nodeType":"YulIdentifier","src":"810:7:46"},{"name":"headStart","nativeSrc":"819:9:46","nodeType":"YulIdentifier","src":"819:9:46"}],"functionName":{"name":"sub","nativeSrc":"806:3:46","nodeType":"YulIdentifier","src":"806:3:46"},"nativeSrc":"806:23:46","nodeType":"YulFunctionCall","src":"806:23:46"},{"kind":"number","nativeSrc":"831:2:46","nodeType":"YulLiteral","src":"831:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"802:3:46","nodeType":"YulIdentifier","src":"802:3:46"},"nativeSrc":"802:32:46","nodeType":"YulFunctionCall","src":"802:32:46"},"nativeSrc":"799:52:46","nodeType":"YulIf","src":"799:52:46"},{"nativeSrc":"860:33:46","nodeType":"YulAssignment","src":"860:33:46","value":{"arguments":[{"name":"headStart","nativeSrc":"883:9:46","nodeType":"YulIdentifier","src":"883:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"870:12:46","nodeType":"YulIdentifier","src":"870:12:46"},"nativeSrc":"870:23:46","nodeType":"YulFunctionCall","src":"870:23:46"},"variableNames":[{"name":"value0","nativeSrc":"860:6:46","nodeType":"YulIdentifier","src":"860:6:46"}]},{"nativeSrc":"902:45:46","nodeType":"YulVariableDeclaration","src":"902:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"932:9:46","nodeType":"YulIdentifier","src":"932:9:46"},{"kind":"number","nativeSrc":"943:2:46","nodeType":"YulLiteral","src":"943:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"928:3:46","nodeType":"YulIdentifier","src":"928:3:46"},"nativeSrc":"928:18:46","nodeType":"YulFunctionCall","src":"928:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"915:12:46","nodeType":"YulIdentifier","src":"915:12:46"},"nativeSrc":"915:32:46","nodeType":"YulFunctionCall","src":"915:32:46"},"variables":[{"name":"value","nativeSrc":"906:5:46","nodeType":"YulTypedName","src":"906:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"981:5:46","nodeType":"YulIdentifier","src":"981:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"956:24:46","nodeType":"YulIdentifier","src":"956:24:46"},"nativeSrc":"956:31:46","nodeType":"YulFunctionCall","src":"956:31:46"},"nativeSrc":"956:31:46","nodeType":"YulExpressionStatement","src":"956:31:46"},{"nativeSrc":"996:15:46","nodeType":"YulAssignment","src":"996:15:46","value":{"name":"value","nativeSrc":"1006:5:46","nodeType":"YulIdentifier","src":"1006:5:46"},"variableNames":[{"name":"value1","nativeSrc":"996:6:46","nodeType":"YulIdentifier","src":"996:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"702:315:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"747:9:46","nodeType":"YulTypedName","src":"747:9:46","type":""},{"name":"dataEnd","nativeSrc":"758:7:46","nodeType":"YulTypedName","src":"758:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"770:6:46","nodeType":"YulTypedName","src":"770:6:46","type":""},{"name":"value1","nativeSrc":"778:6:46","nodeType":"YulTypedName","src":"778:6:46","type":""}],"src":"702:315:46"},{"body":{"nativeSrc":"1190:893:46","nodeType":"YulBlock","src":"1190:893:46","statements":[{"body":{"nativeSrc":"1237:16:46","nodeType":"YulBlock","src":"1237:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1246:1:46","nodeType":"YulLiteral","src":"1246:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1249:1:46","nodeType":"YulLiteral","src":"1249:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1239:6:46","nodeType":"YulIdentifier","src":"1239:6:46"},"nativeSrc":"1239:12:46","nodeType":"YulFunctionCall","src":"1239:12:46"},"nativeSrc":"1239:12:46","nodeType":"YulExpressionStatement","src":"1239:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1211:7:46","nodeType":"YulIdentifier","src":"1211:7:46"},{"name":"headStart","nativeSrc":"1220:9:46","nodeType":"YulIdentifier","src":"1220:9:46"}],"functionName":{"name":"sub","nativeSrc":"1207:3:46","nodeType":"YulIdentifier","src":"1207:3:46"},"nativeSrc":"1207:23:46","nodeType":"YulFunctionCall","src":"1207:23:46"},{"kind":"number","nativeSrc":"1232:3:46","nodeType":"YulLiteral","src":"1232:3:46","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1203:3:46","nodeType":"YulIdentifier","src":"1203:3:46"},"nativeSrc":"1203:33:46","nodeType":"YulFunctionCall","src":"1203:33:46"},"nativeSrc":"1200:53:46","nodeType":"YulIf","src":"1200:53:46"},{"nativeSrc":"1262:36:46","nodeType":"YulVariableDeclaration","src":"1262:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1288:9:46","nodeType":"YulIdentifier","src":"1288:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"1275:12:46","nodeType":"YulIdentifier","src":"1275:12:46"},"nativeSrc":"1275:23:46","nodeType":"YulFunctionCall","src":"1275:23:46"},"variables":[{"name":"value","nativeSrc":"1266:5:46","nodeType":"YulTypedName","src":"1266:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1332:5:46","nodeType":"YulIdentifier","src":"1332:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1307:24:46","nodeType":"YulIdentifier","src":"1307:24:46"},"nativeSrc":"1307:31:46","nodeType":"YulFunctionCall","src":"1307:31:46"},"nativeSrc":"1307:31:46","nodeType":"YulExpressionStatement","src":"1307:31:46"},{"nativeSrc":"1347:15:46","nodeType":"YulAssignment","src":"1347:15:46","value":{"name":"value","nativeSrc":"1357:5:46","nodeType":"YulIdentifier","src":"1357:5:46"},"variableNames":[{"name":"value0","nativeSrc":"1347:6:46","nodeType":"YulIdentifier","src":"1347:6:46"}]},{"nativeSrc":"1371:42:46","nodeType":"YulAssignment","src":"1371:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1398:9:46","nodeType":"YulIdentifier","src":"1398:9:46"},{"kind":"number","nativeSrc":"1409:2:46","nodeType":"YulLiteral","src":"1409:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1394:3:46","nodeType":"YulIdentifier","src":"1394:3:46"},"nativeSrc":"1394:18:46","nodeType":"YulFunctionCall","src":"1394:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"1381:12:46","nodeType":"YulIdentifier","src":"1381:12:46"},"nativeSrc":"1381:32:46","nodeType":"YulFunctionCall","src":"1381:32:46"},"variableNames":[{"name":"value1","nativeSrc":"1371:6:46","nodeType":"YulIdentifier","src":"1371:6:46"}]},{"nativeSrc":"1422:46:46","nodeType":"YulVariableDeclaration","src":"1422:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1453:9:46","nodeType":"YulIdentifier","src":"1453:9:46"},{"kind":"number","nativeSrc":"1464:2:46","nodeType":"YulLiteral","src":"1464:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1449:3:46","nodeType":"YulIdentifier","src":"1449:3:46"},"nativeSrc":"1449:18:46","nodeType":"YulFunctionCall","src":"1449:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"1436:12:46","nodeType":"YulIdentifier","src":"1436:12:46"},"nativeSrc":"1436:32:46","nodeType":"YulFunctionCall","src":"1436:32:46"},"variables":[{"name":"offset","nativeSrc":"1426:6:46","nodeType":"YulTypedName","src":"1426:6:46","type":""}]},{"nativeSrc":"1477:28:46","nodeType":"YulVariableDeclaration","src":"1477:28:46","value":{"kind":"number","nativeSrc":"1487:18:46","nodeType":"YulLiteral","src":"1487:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1481:2:46","nodeType":"YulTypedName","src":"1481:2:46","type":""}]},{"body":{"nativeSrc":"1532:16:46","nodeType":"YulBlock","src":"1532:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1541:1:46","nodeType":"YulLiteral","src":"1541:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1544:1:46","nodeType":"YulLiteral","src":"1544:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1534:6:46","nodeType":"YulIdentifier","src":"1534:6:46"},"nativeSrc":"1534:12:46","nodeType":"YulFunctionCall","src":"1534:12:46"},"nativeSrc":"1534:12:46","nodeType":"YulExpressionStatement","src":"1534:12:46"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1520:6:46","nodeType":"YulIdentifier","src":"1520:6:46"},{"name":"_1","nativeSrc":"1528:2:46","nodeType":"YulIdentifier","src":"1528:2:46"}],"functionName":{"name":"gt","nativeSrc":"1517:2:46","nodeType":"YulIdentifier","src":"1517:2:46"},"nativeSrc":"1517:14:46","nodeType":"YulFunctionCall","src":"1517:14:46"},"nativeSrc":"1514:34:46","nodeType":"YulIf","src":"1514:34:46"},{"nativeSrc":"1557:32:46","nodeType":"YulVariableDeclaration","src":"1557:32:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1571:9:46","nodeType":"YulIdentifier","src":"1571:9:46"},{"name":"offset","nativeSrc":"1582:6:46","nodeType":"YulIdentifier","src":"1582:6:46"}],"functionName":{"name":"add","nativeSrc":"1567:3:46","nodeType":"YulIdentifier","src":"1567:3:46"},"nativeSrc":"1567:22:46","nodeType":"YulFunctionCall","src":"1567:22:46"},"variables":[{"name":"_2","nativeSrc":"1561:2:46","nodeType":"YulTypedName","src":"1561:2:46","type":""}]},{"body":{"nativeSrc":"1628:16:46","nodeType":"YulBlock","src":"1628:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1637:1:46","nodeType":"YulLiteral","src":"1637:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1640:1:46","nodeType":"YulLiteral","src":"1640:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1630:6:46","nodeType":"YulIdentifier","src":"1630:6:46"},"nativeSrc":"1630:12:46","nodeType":"YulFunctionCall","src":"1630:12:46"},"nativeSrc":"1630:12:46","nodeType":"YulExpressionStatement","src":"1630:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1609:7:46","nodeType":"YulIdentifier","src":"1609:7:46"},{"name":"_2","nativeSrc":"1618:2:46","nodeType":"YulIdentifier","src":"1618:2:46"}],"functionName":{"name":"sub","nativeSrc":"1605:3:46","nodeType":"YulIdentifier","src":"1605:3:46"},"nativeSrc":"1605:16:46","nodeType":"YulFunctionCall","src":"1605:16:46"},{"kind":"number","nativeSrc":"1623:3:46","nodeType":"YulLiteral","src":"1623:3:46","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"1601:3:46","nodeType":"YulIdentifier","src":"1601:3:46"},"nativeSrc":"1601:26:46","nodeType":"YulFunctionCall","src":"1601:26:46"},"nativeSrc":"1598:46:46","nodeType":"YulIf","src":"1598:46:46"},{"nativeSrc":"1653:12:46","nodeType":"YulAssignment","src":"1653:12:46","value":{"name":"_2","nativeSrc":"1663:2:46","nodeType":"YulIdentifier","src":"1663:2:46"},"variableNames":[{"name":"value2","nativeSrc":"1653:6:46","nodeType":"YulIdentifier","src":"1653:6:46"}]},{"nativeSrc":"1674:48:46","nodeType":"YulVariableDeclaration","src":"1674:48:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1707:9:46","nodeType":"YulIdentifier","src":"1707:9:46"},{"kind":"number","nativeSrc":"1718:2:46","nodeType":"YulLiteral","src":"1718:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1703:3:46","nodeType":"YulIdentifier","src":"1703:3:46"},"nativeSrc":"1703:18:46","nodeType":"YulFunctionCall","src":"1703:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"1690:12:46","nodeType":"YulIdentifier","src":"1690:12:46"},"nativeSrc":"1690:32:46","nodeType":"YulFunctionCall","src":"1690:32:46"},"variables":[{"name":"offset_1","nativeSrc":"1678:8:46","nodeType":"YulTypedName","src":"1678:8:46","type":""}]},{"body":{"nativeSrc":"1751:16:46","nodeType":"YulBlock","src":"1751:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1760:1:46","nodeType":"YulLiteral","src":"1760:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1763:1:46","nodeType":"YulLiteral","src":"1763:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1753:6:46","nodeType":"YulIdentifier","src":"1753:6:46"},"nativeSrc":"1753:12:46","nodeType":"YulFunctionCall","src":"1753:12:46"},"nativeSrc":"1753:12:46","nodeType":"YulExpressionStatement","src":"1753:12:46"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1737:8:46","nodeType":"YulIdentifier","src":"1737:8:46"},{"name":"_1","nativeSrc":"1747:2:46","nodeType":"YulIdentifier","src":"1747:2:46"}],"functionName":{"name":"gt","nativeSrc":"1734:2:46","nodeType":"YulIdentifier","src":"1734:2:46"},"nativeSrc":"1734:16:46","nodeType":"YulFunctionCall","src":"1734:16:46"},"nativeSrc":"1731:36:46","nodeType":"YulIf","src":"1731:36:46"},{"nativeSrc":"1776:34:46","nodeType":"YulVariableDeclaration","src":"1776:34:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1790:9:46","nodeType":"YulIdentifier","src":"1790:9:46"},{"name":"offset_1","nativeSrc":"1801:8:46","nodeType":"YulIdentifier","src":"1801:8:46"}],"functionName":{"name":"add","nativeSrc":"1786:3:46","nodeType":"YulIdentifier","src":"1786:3:46"},"nativeSrc":"1786:24:46","nodeType":"YulFunctionCall","src":"1786:24:46"},"variables":[{"name":"_3","nativeSrc":"1780:2:46","nodeType":"YulTypedName","src":"1780:2:46","type":""}]},{"body":{"nativeSrc":"1858:16:46","nodeType":"YulBlock","src":"1858:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1867:1:46","nodeType":"YulLiteral","src":"1867:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1870:1:46","nodeType":"YulLiteral","src":"1870:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1860:6:46","nodeType":"YulIdentifier","src":"1860:6:46"},"nativeSrc":"1860:12:46","nodeType":"YulFunctionCall","src":"1860:12:46"},"nativeSrc":"1860:12:46","nodeType":"YulExpressionStatement","src":"1860:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"1837:2:46","nodeType":"YulIdentifier","src":"1837:2:46"},{"kind":"number","nativeSrc":"1841:4:46","nodeType":"YulLiteral","src":"1841:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1833:3:46","nodeType":"YulIdentifier","src":"1833:3:46"},"nativeSrc":"1833:13:46","nodeType":"YulFunctionCall","src":"1833:13:46"},{"name":"dataEnd","nativeSrc":"1848:7:46","nodeType":"YulIdentifier","src":"1848:7:46"}],"functionName":{"name":"slt","nativeSrc":"1829:3:46","nodeType":"YulIdentifier","src":"1829:3:46"},"nativeSrc":"1829:27:46","nodeType":"YulFunctionCall","src":"1829:27:46"}],"functionName":{"name":"iszero","nativeSrc":"1822:6:46","nodeType":"YulIdentifier","src":"1822:6:46"},"nativeSrc":"1822:35:46","nodeType":"YulFunctionCall","src":"1822:35:46"},"nativeSrc":"1819:55:46","nodeType":"YulIf","src":"1819:55:46"},{"nativeSrc":"1883:30:46","nodeType":"YulVariableDeclaration","src":"1883:30:46","value":{"arguments":[{"name":"_3","nativeSrc":"1910:2:46","nodeType":"YulIdentifier","src":"1910:2:46"}],"functionName":{"name":"calldataload","nativeSrc":"1897:12:46","nodeType":"YulIdentifier","src":"1897:12:46"},"nativeSrc":"1897:16:46","nodeType":"YulFunctionCall","src":"1897:16:46"},"variables":[{"name":"length","nativeSrc":"1887:6:46","nodeType":"YulTypedName","src":"1887:6:46","type":""}]},{"body":{"nativeSrc":"1940:16:46","nodeType":"YulBlock","src":"1940:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1949:1:46","nodeType":"YulLiteral","src":"1949:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1952:1:46","nodeType":"YulLiteral","src":"1952:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1942:6:46","nodeType":"YulIdentifier","src":"1942:6:46"},"nativeSrc":"1942:12:46","nodeType":"YulFunctionCall","src":"1942:12:46"},"nativeSrc":"1942:12:46","nodeType":"YulExpressionStatement","src":"1942:12:46"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1928:6:46","nodeType":"YulIdentifier","src":"1928:6:46"},{"name":"_1","nativeSrc":"1936:2:46","nodeType":"YulIdentifier","src":"1936:2:46"}],"functionName":{"name":"gt","nativeSrc":"1925:2:46","nodeType":"YulIdentifier","src":"1925:2:46"},"nativeSrc":"1925:14:46","nodeType":"YulFunctionCall","src":"1925:14:46"},"nativeSrc":"1922:34:46","nodeType":"YulIf","src":"1922:34:46"},{"body":{"nativeSrc":"2006:16:46","nodeType":"YulBlock","src":"2006:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2015:1:46","nodeType":"YulLiteral","src":"2015:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2018:1:46","nodeType":"YulLiteral","src":"2018:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2008:6:46","nodeType":"YulIdentifier","src":"2008:6:46"},"nativeSrc":"2008:12:46","nodeType":"YulFunctionCall","src":"2008:12:46"},"nativeSrc":"2008:12:46","nodeType":"YulExpressionStatement","src":"2008:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"1979:2:46","nodeType":"YulIdentifier","src":"1979:2:46"},{"name":"length","nativeSrc":"1983:6:46","nodeType":"YulIdentifier","src":"1983:6:46"}],"functionName":{"name":"add","nativeSrc":"1975:3:46","nodeType":"YulIdentifier","src":"1975:3:46"},"nativeSrc":"1975:15:46","nodeType":"YulFunctionCall","src":"1975:15:46"},{"kind":"number","nativeSrc":"1992:2:46","nodeType":"YulLiteral","src":"1992:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1971:3:46","nodeType":"YulIdentifier","src":"1971:3:46"},"nativeSrc":"1971:24:46","nodeType":"YulFunctionCall","src":"1971:24:46"},{"name":"dataEnd","nativeSrc":"1997:7:46","nodeType":"YulIdentifier","src":"1997:7:46"}],"functionName":{"name":"gt","nativeSrc":"1968:2:46","nodeType":"YulIdentifier","src":"1968:2:46"},"nativeSrc":"1968:37:46","nodeType":"YulFunctionCall","src":"1968:37:46"},"nativeSrc":"1965:57:46","nodeType":"YulIf","src":"1965:57:46"},{"nativeSrc":"2031:21:46","nodeType":"YulAssignment","src":"2031:21:46","value":{"arguments":[{"name":"_3","nativeSrc":"2045:2:46","nodeType":"YulIdentifier","src":"2045:2:46"},{"kind":"number","nativeSrc":"2049:2:46","nodeType":"YulLiteral","src":"2049:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2041:3:46","nodeType":"YulIdentifier","src":"2041:3:46"},"nativeSrc":"2041:11:46","nodeType":"YulFunctionCall","src":"2041:11:46"},"variableNames":[{"name":"value3","nativeSrc":"2031:6:46","nodeType":"YulIdentifier","src":"2031:6:46"}]},{"nativeSrc":"2061:16:46","nodeType":"YulAssignment","src":"2061:16:46","value":{"name":"length","nativeSrc":"2071:6:46","nodeType":"YulIdentifier","src":"2071:6:46"},"variableNames":[{"name":"value4","nativeSrc":"2061:6:46","nodeType":"YulIdentifier","src":"2061:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"1022:1061:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1124:9:46","nodeType":"YulTypedName","src":"1124:9:46","type":""},{"name":"dataEnd","nativeSrc":"1135:7:46","nodeType":"YulTypedName","src":"1135:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1147:6:46","nodeType":"YulTypedName","src":"1147:6:46","type":""},{"name":"value1","nativeSrc":"1155:6:46","nodeType":"YulTypedName","src":"1155:6:46","type":""},{"name":"value2","nativeSrc":"1163:6:46","nodeType":"YulTypedName","src":"1163:6:46","type":""},{"name":"value3","nativeSrc":"1171:6:46","nodeType":"YulTypedName","src":"1171:6:46","type":""},{"name":"value4","nativeSrc":"1179:6:46","nodeType":"YulTypedName","src":"1179:6:46","type":""}],"src":"1022:1061:46"},{"body":{"nativeSrc":"2158:110:46","nodeType":"YulBlock","src":"2158:110:46","statements":[{"body":{"nativeSrc":"2204:16:46","nodeType":"YulBlock","src":"2204:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2213:1:46","nodeType":"YulLiteral","src":"2213:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2216:1:46","nodeType":"YulLiteral","src":"2216:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2206:6:46","nodeType":"YulIdentifier","src":"2206:6:46"},"nativeSrc":"2206:12:46","nodeType":"YulFunctionCall","src":"2206:12:46"},"nativeSrc":"2206:12:46","nodeType":"YulExpressionStatement","src":"2206:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2179:7:46","nodeType":"YulIdentifier","src":"2179:7:46"},{"name":"headStart","nativeSrc":"2188:9:46","nodeType":"YulIdentifier","src":"2188:9:46"}],"functionName":{"name":"sub","nativeSrc":"2175:3:46","nodeType":"YulIdentifier","src":"2175:3:46"},"nativeSrc":"2175:23:46","nodeType":"YulFunctionCall","src":"2175:23:46"},{"kind":"number","nativeSrc":"2200:2:46","nodeType":"YulLiteral","src":"2200:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2171:3:46","nodeType":"YulIdentifier","src":"2171:3:46"},"nativeSrc":"2171:32:46","nodeType":"YulFunctionCall","src":"2171:32:46"},"nativeSrc":"2168:52:46","nodeType":"YulIf","src":"2168:52:46"},{"nativeSrc":"2229:33:46","nodeType":"YulAssignment","src":"2229:33:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2252:9:46","nodeType":"YulIdentifier","src":"2252:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2239:12:46","nodeType":"YulIdentifier","src":"2239:12:46"},"nativeSrc":"2239:23:46","nodeType":"YulFunctionCall","src":"2239:23:46"},"variableNames":[{"name":"value0","nativeSrc":"2229:6:46","nodeType":"YulIdentifier","src":"2229:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"2088:180:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2124:9:46","nodeType":"YulTypedName","src":"2124:9:46","type":""},{"name":"dataEnd","nativeSrc":"2135:7:46","nodeType":"YulTypedName","src":"2135:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2147:6:46","nodeType":"YulTypedName","src":"2147:6:46","type":""}],"src":"2088:180:46"},{"body":{"nativeSrc":"2374:125:46","nodeType":"YulBlock","src":"2374:125:46","statements":[{"nativeSrc":"2384:26:46","nodeType":"YulAssignment","src":"2384:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2396:9:46","nodeType":"YulIdentifier","src":"2396:9:46"},{"kind":"number","nativeSrc":"2407:2:46","nodeType":"YulLiteral","src":"2407:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2392:3:46","nodeType":"YulIdentifier","src":"2392:3:46"},"nativeSrc":"2392:18:46","nodeType":"YulFunctionCall","src":"2392:18:46"},"variableNames":[{"name":"tail","nativeSrc":"2384:4:46","nodeType":"YulIdentifier","src":"2384:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2426:9:46","nodeType":"YulIdentifier","src":"2426:9:46"},{"arguments":[{"name":"value0","nativeSrc":"2441:6:46","nodeType":"YulIdentifier","src":"2441:6:46"},{"kind":"number","nativeSrc":"2449:42:46","nodeType":"YulLiteral","src":"2449:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2437:3:46","nodeType":"YulIdentifier","src":"2437:3:46"},"nativeSrc":"2437:55:46","nodeType":"YulFunctionCall","src":"2437:55:46"}],"functionName":{"name":"mstore","nativeSrc":"2419:6:46","nodeType":"YulIdentifier","src":"2419:6:46"},"nativeSrc":"2419:74:46","nodeType":"YulFunctionCall","src":"2419:74:46"},"nativeSrc":"2419:74:46","nodeType":"YulExpressionStatement","src":"2419:74:46"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2273:226:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2343:9:46","nodeType":"YulTypedName","src":"2343:9:46","type":""},{"name":"value0","nativeSrc":"2354:6:46","nodeType":"YulTypedName","src":"2354:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2365:4:46","nodeType":"YulTypedName","src":"2365:4:46","type":""}],"src":"2273:226:46"},{"body":{"nativeSrc":"2602:177:46","nodeType":"YulBlock","src":"2602:177:46","statements":[{"body":{"nativeSrc":"2648:16:46","nodeType":"YulBlock","src":"2648:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2657:1:46","nodeType":"YulLiteral","src":"2657:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2660:1:46","nodeType":"YulLiteral","src":"2660:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2650:6:46","nodeType":"YulIdentifier","src":"2650:6:46"},"nativeSrc":"2650:12:46","nodeType":"YulFunctionCall","src":"2650:12:46"},"nativeSrc":"2650:12:46","nodeType":"YulExpressionStatement","src":"2650:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2623:7:46","nodeType":"YulIdentifier","src":"2623:7:46"},{"name":"headStart","nativeSrc":"2632:9:46","nodeType":"YulIdentifier","src":"2632:9:46"}],"functionName":{"name":"sub","nativeSrc":"2619:3:46","nodeType":"YulIdentifier","src":"2619:3:46"},"nativeSrc":"2619:23:46","nodeType":"YulFunctionCall","src":"2619:23:46"},{"kind":"number","nativeSrc":"2644:2:46","nodeType":"YulLiteral","src":"2644:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2615:3:46","nodeType":"YulIdentifier","src":"2615:3:46"},"nativeSrc":"2615:32:46","nodeType":"YulFunctionCall","src":"2615:32:46"},"nativeSrc":"2612:52:46","nodeType":"YulIf","src":"2612:52:46"},{"nativeSrc":"2673:36:46","nodeType":"YulVariableDeclaration","src":"2673:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2699:9:46","nodeType":"YulIdentifier","src":"2699:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2686:12:46","nodeType":"YulIdentifier","src":"2686:12:46"},"nativeSrc":"2686:23:46","nodeType":"YulFunctionCall","src":"2686:23:46"},"variables":[{"name":"value","nativeSrc":"2677:5:46","nodeType":"YulTypedName","src":"2677:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2743:5:46","nodeType":"YulIdentifier","src":"2743:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2718:24:46","nodeType":"YulIdentifier","src":"2718:24:46"},"nativeSrc":"2718:31:46","nodeType":"YulFunctionCall","src":"2718:31:46"},"nativeSrc":"2718:31:46","nodeType":"YulExpressionStatement","src":"2718:31:46"},{"nativeSrc":"2758:15:46","nodeType":"YulAssignment","src":"2758:15:46","value":{"name":"value","nativeSrc":"2768:5:46","nodeType":"YulIdentifier","src":"2768:5:46"},"variableNames":[{"name":"value0","nativeSrc":"2758:6:46","nodeType":"YulIdentifier","src":"2758:6:46"}]}]},"name":"abi_decode_tuple_t_contract$_IRevocationRegistry_$4884","nativeSrc":"2504:275:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2568:9:46","nodeType":"YulTypedName","src":"2568:9:46","type":""},{"name":"dataEnd","nativeSrc":"2579:7:46","nodeType":"YulTypedName","src":"2579:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2591:6:46","nodeType":"YulTypedName","src":"2591:6:46","type":""}],"src":"2504:275:46"},{"body":{"nativeSrc":"2854:177:46","nodeType":"YulBlock","src":"2854:177:46","statements":[{"body":{"nativeSrc":"2900:16:46","nodeType":"YulBlock","src":"2900:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2909:1:46","nodeType":"YulLiteral","src":"2909:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2912:1:46","nodeType":"YulLiteral","src":"2912:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2902:6:46","nodeType":"YulIdentifier","src":"2902:6:46"},"nativeSrc":"2902:12:46","nodeType":"YulFunctionCall","src":"2902:12:46"},"nativeSrc":"2902:12:46","nodeType":"YulExpressionStatement","src":"2902:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2875:7:46","nodeType":"YulIdentifier","src":"2875:7:46"},{"name":"headStart","nativeSrc":"2884:9:46","nodeType":"YulIdentifier","src":"2884:9:46"}],"functionName":{"name":"sub","nativeSrc":"2871:3:46","nodeType":"YulIdentifier","src":"2871:3:46"},"nativeSrc":"2871:23:46","nodeType":"YulFunctionCall","src":"2871:23:46"},{"kind":"number","nativeSrc":"2896:2:46","nodeType":"YulLiteral","src":"2896:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"2867:3:46","nodeType":"YulIdentifier","src":"2867:3:46"},"nativeSrc":"2867:32:46","nodeType":"YulFunctionCall","src":"2867:32:46"},"nativeSrc":"2864:52:46","nodeType":"YulIf","src":"2864:52:46"},{"nativeSrc":"2925:36:46","nodeType":"YulVariableDeclaration","src":"2925:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2951:9:46","nodeType":"YulIdentifier","src":"2951:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2938:12:46","nodeType":"YulIdentifier","src":"2938:12:46"},"nativeSrc":"2938:23:46","nodeType":"YulFunctionCall","src":"2938:23:46"},"variables":[{"name":"value","nativeSrc":"2929:5:46","nodeType":"YulTypedName","src":"2929:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2995:5:46","nodeType":"YulIdentifier","src":"2995:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2970:24:46","nodeType":"YulIdentifier","src":"2970:24:46"},"nativeSrc":"2970:31:46","nodeType":"YulFunctionCall","src":"2970:31:46"},"nativeSrc":"2970:31:46","nodeType":"YulExpressionStatement","src":"2970:31:46"},{"nativeSrc":"3010:15:46","nodeType":"YulAssignment","src":"3010:15:46","value":{"name":"value","nativeSrc":"3020:5:46","nodeType":"YulIdentifier","src":"3020:5:46"},"variableNames":[{"name":"value0","nativeSrc":"3010:6:46","nodeType":"YulIdentifier","src":"3010:6:46"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"2784:247:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2820:9:46","nodeType":"YulTypedName","src":"2820:9:46","type":""},{"name":"dataEnd","nativeSrc":"2831:7:46","nodeType":"YulTypedName","src":"2831:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2843:6:46","nodeType":"YulTypedName","src":"2843:6:46","type":""}],"src":"2784:247:46"},{"body":{"nativeSrc":"3084:111:46","nodeType":"YulBlock","src":"3084:111:46","statements":[{"nativeSrc":"3094:29:46","nodeType":"YulAssignment","src":"3094:29:46","value":{"arguments":[{"name":"offset","nativeSrc":"3116:6:46","nodeType":"YulIdentifier","src":"3116:6:46"}],"functionName":{"name":"calldataload","nativeSrc":"3103:12:46","nodeType":"YulIdentifier","src":"3103:12:46"},"nativeSrc":"3103:20:46","nodeType":"YulFunctionCall","src":"3103:20:46"},"variableNames":[{"name":"value","nativeSrc":"3094:5:46","nodeType":"YulIdentifier","src":"3094:5:46"}]},{"body":{"nativeSrc":"3173:16:46","nodeType":"YulBlock","src":"3173:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3182:1:46","nodeType":"YulLiteral","src":"3182:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3185:1:46","nodeType":"YulLiteral","src":"3185:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3175:6:46","nodeType":"YulIdentifier","src":"3175:6:46"},"nativeSrc":"3175:12:46","nodeType":"YulFunctionCall","src":"3175:12:46"},"nativeSrc":"3175:12:46","nodeType":"YulExpressionStatement","src":"3175:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3145:5:46","nodeType":"YulIdentifier","src":"3145:5:46"},{"arguments":[{"name":"value","nativeSrc":"3156:5:46","nodeType":"YulIdentifier","src":"3156:5:46"},{"kind":"number","nativeSrc":"3163:6:46","nodeType":"YulLiteral","src":"3163:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"3152:3:46","nodeType":"YulIdentifier","src":"3152:3:46"},"nativeSrc":"3152:18:46","nodeType":"YulFunctionCall","src":"3152:18:46"}],"functionName":{"name":"eq","nativeSrc":"3142:2:46","nodeType":"YulIdentifier","src":"3142:2:46"},"nativeSrc":"3142:29:46","nodeType":"YulFunctionCall","src":"3142:29:46"}],"functionName":{"name":"iszero","nativeSrc":"3135:6:46","nodeType":"YulIdentifier","src":"3135:6:46"},"nativeSrc":"3135:37:46","nodeType":"YulFunctionCall","src":"3135:37:46"},"nativeSrc":"3132:57:46","nodeType":"YulIf","src":"3132:57:46"}]},"name":"abi_decode_uint16","nativeSrc":"3036:159:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3063:6:46","nodeType":"YulTypedName","src":"3063:6:46","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3074:5:46","nodeType":"YulTypedName","src":"3074:5:46","type":""}],"src":"3036:159:46"},{"body":{"nativeSrc":"3248:123:46","nodeType":"YulBlock","src":"3248:123:46","statements":[{"nativeSrc":"3258:29:46","nodeType":"YulAssignment","src":"3258:29:46","value":{"arguments":[{"name":"offset","nativeSrc":"3280:6:46","nodeType":"YulIdentifier","src":"3280:6:46"}],"functionName":{"name":"calldataload","nativeSrc":"3267:12:46","nodeType":"YulIdentifier","src":"3267:12:46"},"nativeSrc":"3267:20:46","nodeType":"YulFunctionCall","src":"3267:20:46"},"variableNames":[{"name":"value","nativeSrc":"3258:5:46","nodeType":"YulIdentifier","src":"3258:5:46"}]},{"body":{"nativeSrc":"3349:16:46","nodeType":"YulBlock","src":"3349:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3358:1:46","nodeType":"YulLiteral","src":"3358:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3361:1:46","nodeType":"YulLiteral","src":"3361:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3351:6:46","nodeType":"YulIdentifier","src":"3351:6:46"},"nativeSrc":"3351:12:46","nodeType":"YulFunctionCall","src":"3351:12:46"},"nativeSrc":"3351:12:46","nodeType":"YulExpressionStatement","src":"3351:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3309:5:46","nodeType":"YulIdentifier","src":"3309:5:46"},{"arguments":[{"name":"value","nativeSrc":"3320:5:46","nodeType":"YulIdentifier","src":"3320:5:46"},{"kind":"number","nativeSrc":"3327:18:46","nodeType":"YulLiteral","src":"3327:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3316:3:46","nodeType":"YulIdentifier","src":"3316:3:46"},"nativeSrc":"3316:30:46","nodeType":"YulFunctionCall","src":"3316:30:46"}],"functionName":{"name":"eq","nativeSrc":"3306:2:46","nodeType":"YulIdentifier","src":"3306:2:46"},"nativeSrc":"3306:41:46","nodeType":"YulFunctionCall","src":"3306:41:46"}],"functionName":{"name":"iszero","nativeSrc":"3299:6:46","nodeType":"YulIdentifier","src":"3299:6:46"},"nativeSrc":"3299:49:46","nodeType":"YulFunctionCall","src":"3299:49:46"},"nativeSrc":"3296:69:46","nodeType":"YulIf","src":"3296:69:46"}]},"name":"abi_decode_uint64","nativeSrc":"3200:171:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"3227:6:46","nodeType":"YulTypedName","src":"3227:6:46","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3238:5:46","nodeType":"YulTypedName","src":"3238:5:46","type":""}],"src":"3200:171:46"},{"body":{"nativeSrc":"3419:59:46","nodeType":"YulBlock","src":"3419:59:46","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3436:3:46","nodeType":"YulIdentifier","src":"3436:3:46"},{"arguments":[{"name":"value","nativeSrc":"3445:5:46","nodeType":"YulIdentifier","src":"3445:5:46"},{"kind":"number","nativeSrc":"3452:18:46","nodeType":"YulLiteral","src":"3452:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3441:3:46","nodeType":"YulIdentifier","src":"3441:3:46"},"nativeSrc":"3441:30:46","nodeType":"YulFunctionCall","src":"3441:30:46"}],"functionName":{"name":"mstore","nativeSrc":"3429:6:46","nodeType":"YulIdentifier","src":"3429:6:46"},"nativeSrc":"3429:43:46","nodeType":"YulFunctionCall","src":"3429:43:46"},"nativeSrc":"3429:43:46","nodeType":"YulExpressionStatement","src":"3429:43:46"}]},"name":"abi_encode_uint64","nativeSrc":"3376:102:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"3403:5:46","nodeType":"YulTypedName","src":"3403:5:46","type":""},{"name":"pos","nativeSrc":"3410:3:46","nodeType":"YulTypedName","src":"3410:3:46","type":""}],"src":"3376:102:46"},{"body":{"nativeSrc":"3560:483:46","nodeType":"YulBlock","src":"3560:483:46","statements":[{"nativeSrc":"3570:43:46","nodeType":"YulVariableDeclaration","src":"3570:43:46","value":{"arguments":[{"name":"ptr","nativeSrc":"3609:3:46","nodeType":"YulIdentifier","src":"3609:3:46"}],"functionName":{"name":"calldataload","nativeSrc":"3596:12:46","nodeType":"YulIdentifier","src":"3596:12:46"},"nativeSrc":"3596:17:46","nodeType":"YulFunctionCall","src":"3596:17:46"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"3574:18:46","nodeType":"YulTypedName","src":"3574:18:46","type":""}]},{"body":{"nativeSrc":"3761:16:46","nodeType":"YulBlock","src":"3761:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3770:1:46","nodeType":"YulLiteral","src":"3770:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3773:1:46","nodeType":"YulLiteral","src":"3773:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3763:6:46","nodeType":"YulIdentifier","src":"3763:6:46"},"nativeSrc":"3763:12:46","nodeType":"YulFunctionCall","src":"3763:12:46"},"nativeSrc":"3763:12:46","nodeType":"YulExpressionStatement","src":"3763:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"3636:18:46","nodeType":"YulIdentifier","src":"3636:18:46"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3664:12:46","nodeType":"YulIdentifier","src":"3664:12:46"},"nativeSrc":"3664:14:46","nodeType":"YulFunctionCall","src":"3664:14:46"},{"name":"base_ref","nativeSrc":"3680:8:46","nodeType":"YulIdentifier","src":"3680:8:46"}],"functionName":{"name":"sub","nativeSrc":"3660:3:46","nodeType":"YulIdentifier","src":"3660:3:46"},"nativeSrc":"3660:29:46","nodeType":"YulFunctionCall","src":"3660:29:46"},{"kind":"number","nativeSrc":"3691:66:46","nodeType":"YulLiteral","src":"3691:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"3656:3:46","nodeType":"YulIdentifier","src":"3656:3:46"},"nativeSrc":"3656:102:46","nodeType":"YulFunctionCall","src":"3656:102:46"}],"functionName":{"name":"slt","nativeSrc":"3632:3:46","nodeType":"YulIdentifier","src":"3632:3:46"},"nativeSrc":"3632:127:46","nodeType":"YulFunctionCall","src":"3632:127:46"}],"functionName":{"name":"iszero","nativeSrc":"3625:6:46","nodeType":"YulIdentifier","src":"3625:6:46"},"nativeSrc":"3625:135:46","nodeType":"YulFunctionCall","src":"3625:135:46"},"nativeSrc":"3622:155:46","nodeType":"YulIf","src":"3622:155:46"},{"nativeSrc":"3786:48:46","nodeType":"YulVariableDeclaration","src":"3786:48:46","value":{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"3805:18:46","nodeType":"YulIdentifier","src":"3805:18:46"},{"name":"base_ref","nativeSrc":"3825:8:46","nodeType":"YulIdentifier","src":"3825:8:46"}],"functionName":{"name":"add","nativeSrc":"3801:3:46","nodeType":"YulIdentifier","src":"3801:3:46"},"nativeSrc":"3801:33:46","nodeType":"YulFunctionCall","src":"3801:33:46"},"variables":[{"name":"value_1","nativeSrc":"3790:7:46","nodeType":"YulTypedName","src":"3790:7:46","type":""}]},{"nativeSrc":"3843:31:46","nodeType":"YulAssignment","src":"3843:31:46","value":{"arguments":[{"name":"value_1","nativeSrc":"3866:7:46","nodeType":"YulIdentifier","src":"3866:7:46"}],"functionName":{"name":"calldataload","nativeSrc":"3853:12:46","nodeType":"YulIdentifier","src":"3853:12:46"},"nativeSrc":"3853:21:46","nodeType":"YulFunctionCall","src":"3853:21:46"},"variableNames":[{"name":"length","nativeSrc":"3843:6:46","nodeType":"YulIdentifier","src":"3843:6:46"}]},{"nativeSrc":"3883:27:46","nodeType":"YulAssignment","src":"3883:27:46","value":{"arguments":[{"name":"value_1","nativeSrc":"3896:7:46","nodeType":"YulIdentifier","src":"3896:7:46"},{"kind":"number","nativeSrc":"3905:4:46","nodeType":"YulLiteral","src":"3905:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3892:3:46","nodeType":"YulIdentifier","src":"3892:3:46"},"nativeSrc":"3892:18:46","nodeType":"YulFunctionCall","src":"3892:18:46"},"variableNames":[{"name":"value","nativeSrc":"3883:5:46","nodeType":"YulIdentifier","src":"3883:5:46"}]},{"body":{"nativeSrc":"3953:16:46","nodeType":"YulBlock","src":"3953:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3962:1:46","nodeType":"YulLiteral","src":"3962:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3965:1:46","nodeType":"YulLiteral","src":"3965:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3955:6:46","nodeType":"YulIdentifier","src":"3955:6:46"},"nativeSrc":"3955:12:46","nodeType":"YulFunctionCall","src":"3955:12:46"},"nativeSrc":"3955:12:46","nodeType":"YulExpressionStatement","src":"3955:12:46"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3925:6:46","nodeType":"YulIdentifier","src":"3925:6:46"},{"kind":"number","nativeSrc":"3933:18:46","nodeType":"YulLiteral","src":"3933:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"3922:2:46","nodeType":"YulIdentifier","src":"3922:2:46"},"nativeSrc":"3922:30:46","nodeType":"YulFunctionCall","src":"3922:30:46"},"nativeSrc":"3919:50:46","nodeType":"YulIf","src":"3919:50:46"},{"body":{"nativeSrc":"4021:16:46","nodeType":"YulBlock","src":"4021:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4030:1:46","nodeType":"YulLiteral","src":"4030:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"4033:1:46","nodeType":"YulLiteral","src":"4033:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4023:6:46","nodeType":"YulIdentifier","src":"4023:6:46"},"nativeSrc":"4023:12:46","nodeType":"YulFunctionCall","src":"4023:12:46"},"nativeSrc":"4023:12:46","nodeType":"YulExpressionStatement","src":"4023:12:46"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"3985:5:46","nodeType":"YulIdentifier","src":"3985:5:46"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"3996:12:46","nodeType":"YulIdentifier","src":"3996:12:46"},"nativeSrc":"3996:14:46","nodeType":"YulFunctionCall","src":"3996:14:46"},{"name":"length","nativeSrc":"4012:6:46","nodeType":"YulIdentifier","src":"4012:6:46"}],"functionName":{"name":"sub","nativeSrc":"3992:3:46","nodeType":"YulIdentifier","src":"3992:3:46"},"nativeSrc":"3992:27:46","nodeType":"YulFunctionCall","src":"3992:27:46"}],"functionName":{"name":"sgt","nativeSrc":"3981:3:46","nodeType":"YulIdentifier","src":"3981:3:46"},"nativeSrc":"3981:39:46","nodeType":"YulFunctionCall","src":"3981:39:46"},"nativeSrc":"3978:59:46","nodeType":"YulIf","src":"3978:59:46"}]},"name":"calldata_access_string_calldata","nativeSrc":"3483:560:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"3524:8:46","nodeType":"YulTypedName","src":"3524:8:46","type":""},{"name":"ptr","nativeSrc":"3534:3:46","nodeType":"YulTypedName","src":"3534:3:46","type":""}],"returnVariables":[{"name":"value","nativeSrc":"3542:5:46","nodeType":"YulTypedName","src":"3542:5:46","type":""},{"name":"length","nativeSrc":"3549:6:46","nodeType":"YulTypedName","src":"3549:6:46","type":""}],"src":"3483:560:46"},{"body":{"nativeSrc":"4115:259:46","nodeType":"YulBlock","src":"4115:259:46","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"4132:3:46","nodeType":"YulIdentifier","src":"4132:3:46"},{"name":"length","nativeSrc":"4137:6:46","nodeType":"YulIdentifier","src":"4137:6:46"}],"functionName":{"name":"mstore","nativeSrc":"4125:6:46","nodeType":"YulIdentifier","src":"4125:6:46"},"nativeSrc":"4125:19:46","nodeType":"YulFunctionCall","src":"4125:19:46"},"nativeSrc":"4125:19:46","nodeType":"YulExpressionStatement","src":"4125:19:46"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4170:3:46","nodeType":"YulIdentifier","src":"4170:3:46"},{"kind":"number","nativeSrc":"4175:4:46","nodeType":"YulLiteral","src":"4175:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4166:3:46","nodeType":"YulIdentifier","src":"4166:3:46"},"nativeSrc":"4166:14:46","nodeType":"YulFunctionCall","src":"4166:14:46"},{"name":"start","nativeSrc":"4182:5:46","nodeType":"YulIdentifier","src":"4182:5:46"},{"name":"length","nativeSrc":"4189:6:46","nodeType":"YulIdentifier","src":"4189:6:46"}],"functionName":{"name":"calldatacopy","nativeSrc":"4153:12:46","nodeType":"YulIdentifier","src":"4153:12:46"},"nativeSrc":"4153:43:46","nodeType":"YulFunctionCall","src":"4153:43:46"},"nativeSrc":"4153:43:46","nodeType":"YulExpressionStatement","src":"4153:43:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4220:3:46","nodeType":"YulIdentifier","src":"4220:3:46"},{"name":"length","nativeSrc":"4225:6:46","nodeType":"YulIdentifier","src":"4225:6:46"}],"functionName":{"name":"add","nativeSrc":"4216:3:46","nodeType":"YulIdentifier","src":"4216:3:46"},"nativeSrc":"4216:16:46","nodeType":"YulFunctionCall","src":"4216:16:46"},{"kind":"number","nativeSrc":"4234:4:46","nodeType":"YulLiteral","src":"4234:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4212:3:46","nodeType":"YulIdentifier","src":"4212:3:46"},"nativeSrc":"4212:27:46","nodeType":"YulFunctionCall","src":"4212:27:46"},{"kind":"number","nativeSrc":"4241:1:46","nodeType":"YulLiteral","src":"4241:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"4205:6:46","nodeType":"YulIdentifier","src":"4205:6:46"},"nativeSrc":"4205:38:46","nodeType":"YulFunctionCall","src":"4205:38:46"},"nativeSrc":"4205:38:46","nodeType":"YulExpressionStatement","src":"4205:38:46"},{"nativeSrc":"4252:116:46","nodeType":"YulAssignment","src":"4252:116:46","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4267:3:46","nodeType":"YulIdentifier","src":"4267:3:46"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"4280:6:46","nodeType":"YulIdentifier","src":"4280:6:46"},{"kind":"number","nativeSrc":"4288:2:46","nodeType":"YulLiteral","src":"4288:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"4276:3:46","nodeType":"YulIdentifier","src":"4276:3:46"},"nativeSrc":"4276:15:46","nodeType":"YulFunctionCall","src":"4276:15:46"},{"kind":"number","nativeSrc":"4293:66:46","nodeType":"YulLiteral","src":"4293:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"4272:3:46","nodeType":"YulIdentifier","src":"4272:3:46"},"nativeSrc":"4272:88:46","nodeType":"YulFunctionCall","src":"4272:88:46"}],"functionName":{"name":"add","nativeSrc":"4263:3:46","nodeType":"YulIdentifier","src":"4263:3:46"},"nativeSrc":"4263:98:46","nodeType":"YulFunctionCall","src":"4263:98:46"},{"kind":"number","nativeSrc":"4363:4:46","nodeType":"YulLiteral","src":"4363:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4259:3:46","nodeType":"YulIdentifier","src":"4259:3:46"},"nativeSrc":"4259:109:46","nodeType":"YulFunctionCall","src":"4259:109:46"},"variableNames":[{"name":"end","nativeSrc":"4252:3:46","nodeType":"YulIdentifier","src":"4252:3:46"}]}]},"name":"abi_encode_string_calldata","nativeSrc":"4048:326:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"4084:5:46","nodeType":"YulTypedName","src":"4084:5:46","type":""},{"name":"length","nativeSrc":"4091:6:46","nodeType":"YulTypedName","src":"4091:6:46","type":""},{"name":"pos","nativeSrc":"4099:3:46","nodeType":"YulTypedName","src":"4099:3:46","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4107:3:46","nodeType":"YulTypedName","src":"4107:3:46","type":""}],"src":"4048:326:46"},{"body":{"nativeSrc":"4590:1264:46","nodeType":"YulBlock","src":"4590:1264:46","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4607:9:46","nodeType":"YulIdentifier","src":"4607:9:46"},{"arguments":[{"name":"value0","nativeSrc":"4622:6:46","nodeType":"YulIdentifier","src":"4622:6:46"},{"kind":"number","nativeSrc":"4630:42:46","nodeType":"YulLiteral","src":"4630:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4618:3:46","nodeType":"YulIdentifier","src":"4618:3:46"},"nativeSrc":"4618:55:46","nodeType":"YulFunctionCall","src":"4618:55:46"}],"functionName":{"name":"mstore","nativeSrc":"4600:6:46","nodeType":"YulIdentifier","src":"4600:6:46"},"nativeSrc":"4600:74:46","nodeType":"YulFunctionCall","src":"4600:74:46"},"nativeSrc":"4600:74:46","nodeType":"YulExpressionStatement","src":"4600:74:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4694:9:46","nodeType":"YulIdentifier","src":"4694:9:46"},{"kind":"number","nativeSrc":"4705:2:46","nodeType":"YulLiteral","src":"4705:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4690:3:46","nodeType":"YulIdentifier","src":"4690:3:46"},"nativeSrc":"4690:18:46","nodeType":"YulFunctionCall","src":"4690:18:46"},{"name":"value1","nativeSrc":"4710:6:46","nodeType":"YulIdentifier","src":"4710:6:46"}],"functionName":{"name":"mstore","nativeSrc":"4683:6:46","nodeType":"YulIdentifier","src":"4683:6:46"},"nativeSrc":"4683:34:46","nodeType":"YulFunctionCall","src":"4683:34:46"},"nativeSrc":"4683:34:46","nodeType":"YulExpressionStatement","src":"4683:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4737:9:46","nodeType":"YulIdentifier","src":"4737:9:46"},{"kind":"number","nativeSrc":"4748:2:46","nodeType":"YulLiteral","src":"4748:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4733:3:46","nodeType":"YulIdentifier","src":"4733:3:46"},"nativeSrc":"4733:18:46","nodeType":"YulFunctionCall","src":"4733:18:46"},{"kind":"number","nativeSrc":"4753:2:46","nodeType":"YulLiteral","src":"4753:2:46","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"4726:6:46","nodeType":"YulIdentifier","src":"4726:6:46"},"nativeSrc":"4726:30:46","nodeType":"YulFunctionCall","src":"4726:30:46"},"nativeSrc":"4726:30:46","nodeType":"YulExpressionStatement","src":"4726:30:46"},{"nativeSrc":"4765:16:46","nodeType":"YulVariableDeclaration","src":"4765:16:46","value":{"kind":"number","nativeSrc":"4775:6:46","nodeType":"YulLiteral","src":"4775:6:46","type":"","value":"0xffff"},"variables":[{"name":"_1","nativeSrc":"4769:2:46","nodeType":"YulTypedName","src":"4769:2:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4801:9:46","nodeType":"YulIdentifier","src":"4801:9:46"},{"kind":"number","nativeSrc":"4812:2:46","nodeType":"YulLiteral","src":"4812:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4797:3:46","nodeType":"YulIdentifier","src":"4797:3:46"},"nativeSrc":"4797:18:46","nodeType":"YulFunctionCall","src":"4797:18:46"},{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4839:6:46","nodeType":"YulIdentifier","src":"4839:6:46"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"4821:17:46","nodeType":"YulIdentifier","src":"4821:17:46"},"nativeSrc":"4821:25:46","nodeType":"YulFunctionCall","src":"4821:25:46"},{"name":"_1","nativeSrc":"4848:2:46","nodeType":"YulIdentifier","src":"4848:2:46"}],"functionName":{"name":"and","nativeSrc":"4817:3:46","nodeType":"YulIdentifier","src":"4817:3:46"},"nativeSrc":"4817:34:46","nodeType":"YulFunctionCall","src":"4817:34:46"}],"functionName":{"name":"mstore","nativeSrc":"4790:6:46","nodeType":"YulIdentifier","src":"4790:6:46"},"nativeSrc":"4790:62:46","nodeType":"YulFunctionCall","src":"4790:62:46"},"nativeSrc":"4790:62:46","nodeType":"YulExpressionStatement","src":"4790:62:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4872:9:46","nodeType":"YulIdentifier","src":"4872:9:46"},{"kind":"number","nativeSrc":"4883:3:46","nodeType":"YulLiteral","src":"4883:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4868:3:46","nodeType":"YulIdentifier","src":"4868:3:46"},"nativeSrc":"4868:19:46","nodeType":"YulFunctionCall","src":"4868:19:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4915:6:46","nodeType":"YulIdentifier","src":"4915:6:46"},{"kind":"number","nativeSrc":"4923:2:46","nodeType":"YulLiteral","src":"4923:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4911:3:46","nodeType":"YulIdentifier","src":"4911:3:46"},"nativeSrc":"4911:15:46","nodeType":"YulFunctionCall","src":"4911:15:46"}],"functionName":{"name":"abi_decode_uint16","nativeSrc":"4893:17:46","nodeType":"YulIdentifier","src":"4893:17:46"},"nativeSrc":"4893:34:46","nodeType":"YulFunctionCall","src":"4893:34:46"},{"name":"_1","nativeSrc":"4929:2:46","nodeType":"YulIdentifier","src":"4929:2:46"}],"functionName":{"name":"and","nativeSrc":"4889:3:46","nodeType":"YulIdentifier","src":"4889:3:46"},"nativeSrc":"4889:43:46","nodeType":"YulFunctionCall","src":"4889:43:46"}],"functionName":{"name":"mstore","nativeSrc":"4861:6:46","nodeType":"YulIdentifier","src":"4861:6:46"},"nativeSrc":"4861:72:46","nodeType":"YulFunctionCall","src":"4861:72:46"},"nativeSrc":"4861:72:46","nodeType":"YulExpressionStatement","src":"4861:72:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4953:9:46","nodeType":"YulIdentifier","src":"4953:9:46"},{"kind":"number","nativeSrc":"4964:3:46","nodeType":"YulLiteral","src":"4964:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"4949:3:46","nodeType":"YulIdentifier","src":"4949:3:46"},"nativeSrc":"4949:19:46","nodeType":"YulFunctionCall","src":"4949:19:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"4996:6:46","nodeType":"YulIdentifier","src":"4996:6:46"},{"kind":"number","nativeSrc":"5004:2:46","nodeType":"YulLiteral","src":"5004:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4992:3:46","nodeType":"YulIdentifier","src":"4992:3:46"},"nativeSrc":"4992:15:46","nodeType":"YulFunctionCall","src":"4992:15:46"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"4974:17:46","nodeType":"YulIdentifier","src":"4974:17:46"},"nativeSrc":"4974:34:46","nodeType":"YulFunctionCall","src":"4974:34:46"},{"kind":"number","nativeSrc":"5010:18:46","nodeType":"YulLiteral","src":"5010:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4970:3:46","nodeType":"YulIdentifier","src":"4970:3:46"},"nativeSrc":"4970:59:46","nodeType":"YulFunctionCall","src":"4970:59:46"}],"functionName":{"name":"mstore","nativeSrc":"4942:6:46","nodeType":"YulIdentifier","src":"4942:6:46"},"nativeSrc":"4942:88:46","nodeType":"YulFunctionCall","src":"4942:88:46"},"nativeSrc":"4942:88:46","nodeType":"YulExpressionStatement","src":"4942:88:46"},{"nativeSrc":"5039:54:46","nodeType":"YulVariableDeclaration","src":"5039:54:46","value":{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"5081:6:46","nodeType":"YulIdentifier","src":"5081:6:46"},{"kind":"number","nativeSrc":"5089:2:46","nodeType":"YulLiteral","src":"5089:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5077:3:46","nodeType":"YulIdentifier","src":"5077:3:46"},"nativeSrc":"5077:15:46","nodeType":"YulFunctionCall","src":"5077:15:46"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"5059:17:46","nodeType":"YulIdentifier","src":"5059:17:46"},"nativeSrc":"5059:34:46","nodeType":"YulFunctionCall","src":"5059:34:46"},"variables":[{"name":"memberValue0","nativeSrc":"5043:12:46","nodeType":"YulTypedName","src":"5043:12:46","type":""}]},{"expression":{"arguments":[{"name":"memberValue0","nativeSrc":"5120:12:46","nodeType":"YulIdentifier","src":"5120:12:46"},{"arguments":[{"name":"headStart","nativeSrc":"5138:9:46","nodeType":"YulIdentifier","src":"5138:9:46"},{"kind":"number","nativeSrc":"5149:3:46","nodeType":"YulLiteral","src":"5149:3:46","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"5134:3:46","nodeType":"YulIdentifier","src":"5134:3:46"},"nativeSrc":"5134:19:46","nodeType":"YulFunctionCall","src":"5134:19:46"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"5102:17:46","nodeType":"YulIdentifier","src":"5102:17:46"},"nativeSrc":"5102:52:46","nodeType":"YulFunctionCall","src":"5102:52:46"},"nativeSrc":"5102:52:46","nodeType":"YulExpressionStatement","src":"5102:52:46"},{"nativeSrc":"5163:57:46","nodeType":"YulVariableDeclaration","src":"5163:57:46","value":{"arguments":[{"arguments":[{"name":"value2","nativeSrc":"5207:6:46","nodeType":"YulIdentifier","src":"5207:6:46"},{"kind":"number","nativeSrc":"5215:3:46","nodeType":"YulLiteral","src":"5215:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5203:3:46","nodeType":"YulIdentifier","src":"5203:3:46"},"nativeSrc":"5203:16:46","nodeType":"YulFunctionCall","src":"5203:16:46"}],"functionName":{"name":"abi_decode_uint64","nativeSrc":"5185:17:46","nodeType":"YulIdentifier","src":"5185:17:46"},"nativeSrc":"5185:35:46","nodeType":"YulFunctionCall","src":"5185:35:46"},"variables":[{"name":"memberValue0_1","nativeSrc":"5167:14:46","nodeType":"YulTypedName","src":"5167:14:46","type":""}]},{"expression":{"arguments":[{"name":"memberValue0_1","nativeSrc":"5247:14:46","nodeType":"YulIdentifier","src":"5247:14:46"},{"arguments":[{"name":"headStart","nativeSrc":"5267:9:46","nodeType":"YulIdentifier","src":"5267:9:46"},{"kind":"number","nativeSrc":"5278:4:46","nodeType":"YulLiteral","src":"5278:4:46","type":"","value":"0xe0"}],"functionName":{"name":"add","nativeSrc":"5263:3:46","nodeType":"YulIdentifier","src":"5263:3:46"},"nativeSrc":"5263:20:46","nodeType":"YulFunctionCall","src":"5263:20:46"}],"functionName":{"name":"abi_encode_uint64","nativeSrc":"5229:17:46","nodeType":"YulIdentifier","src":"5229:17:46"},"nativeSrc":"5229:55:46","nodeType":"YulFunctionCall","src":"5229:55:46"},"nativeSrc":"5229:55:46","nodeType":"YulExpressionStatement","src":"5229:55:46"},{"nativeSrc":"5293:93:46","nodeType":"YulVariableDeclaration","src":"5293:93:46","value":{"arguments":[{"name":"value2","nativeSrc":"5361:6:46","nodeType":"YulIdentifier","src":"5361:6:46"},{"arguments":[{"name":"value2","nativeSrc":"5373:6:46","nodeType":"YulIdentifier","src":"5373:6:46"},{"kind":"number","nativeSrc":"5381:3:46","nodeType":"YulLiteral","src":"5381:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"5369:3:46","nodeType":"YulIdentifier","src":"5369:3:46"},"nativeSrc":"5369:16:46","nodeType":"YulFunctionCall","src":"5369:16:46"}],"functionName":{"name":"calldata_access_string_calldata","nativeSrc":"5329:31:46","nodeType":"YulIdentifier","src":"5329:31:46"},"nativeSrc":"5329:57:46","nodeType":"YulFunctionCall","src":"5329:57:46"},"variables":[{"name":"memberValue0_2","nativeSrc":"5297:14:46","nodeType":"YulTypedName","src":"5297:14:46","type":""},{"name":"memberValue1","nativeSrc":"5313:12:46","nodeType":"YulTypedName","src":"5313:12:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5406:9:46","nodeType":"YulIdentifier","src":"5406:9:46"},{"kind":"number","nativeSrc":"5417:3:46","nodeType":"YulLiteral","src":"5417:3:46","type":"","value":"256"}],"functionName":{"name":"add","nativeSrc":"5402:3:46","nodeType":"YulIdentifier","src":"5402:3:46"},"nativeSrc":"5402:19:46","nodeType":"YulFunctionCall","src":"5402:19:46"},{"kind":"number","nativeSrc":"5423:4:46","nodeType":"YulLiteral","src":"5423:4:46","type":"","value":"0xe0"}],"functionName":{"name":"mstore","nativeSrc":"5395:6:46","nodeType":"YulIdentifier","src":"5395:6:46"},"nativeSrc":"5395:33:46","nodeType":"YulFunctionCall","src":"5395:33:46"},"nativeSrc":"5395:33:46","nodeType":"YulExpressionStatement","src":"5395:33:46"},{"nativeSrc":"5437:91:46","nodeType":"YulVariableDeclaration","src":"5437:91:46","value":{"arguments":[{"name":"memberValue0_2","nativeSrc":"5478:14:46","nodeType":"YulIdentifier","src":"5478:14:46"},{"name":"memberValue1","nativeSrc":"5494:12:46","nodeType":"YulIdentifier","src":"5494:12:46"},{"arguments":[{"name":"headStart","nativeSrc":"5512:9:46","nodeType":"YulIdentifier","src":"5512:9:46"},{"kind":"number","nativeSrc":"5523:3:46","nodeType":"YulLiteral","src":"5523:3:46","type":"","value":"320"}],"functionName":{"name":"add","nativeSrc":"5508:3:46","nodeType":"YulIdentifier","src":"5508:3:46"},"nativeSrc":"5508:19:46","nodeType":"YulFunctionCall","src":"5508:19:46"}],"functionName":{"name":"abi_encode_string_calldata","nativeSrc":"5451:26:46","nodeType":"YulIdentifier","src":"5451:26:46"},"nativeSrc":"5451:77:46","nodeType":"YulFunctionCall","src":"5451:77:46"},"variables":[{"name":"tail_1","nativeSrc":"5441:6:46","nodeType":"YulTypedName","src":"5441:6:46","type":""}]},{"nativeSrc":"5537:95:46","nodeType":"YulVariableDeclaration","src":"5537:95:46","value":{"arguments":[{"name":"value2","nativeSrc":"5607:6:46","nodeType":"YulIdentifier","src":"5607:6:46"},{"arguments":[{"name":"value2","nativeSrc":"5619:6:46","nodeType":"YulIdentifier","src":"5619:6:46"},{"kind":"number","nativeSrc":"5627:3:46","nodeType":"YulLiteral","src":"5627:3:46","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"5615:3:46","nodeType":"YulIdentifier","src":"5615:3:46"},"nativeSrc":"5615:16:46","nodeType":"YulFunctionCall","src":"5615:16:46"}],"functionName":{"name":"calldata_access_string_calldata","nativeSrc":"5575:31:46","nodeType":"YulIdentifier","src":"5575:31:46"},"nativeSrc":"5575:57:46","nodeType":"YulFunctionCall","src":"5575:57:46"},"variables":[{"name":"memberValue0_3","nativeSrc":"5541:14:46","nodeType":"YulTypedName","src":"5541:14:46","type":""},{"name":"memberValue1_1","nativeSrc":"5557:14:46","nodeType":"YulTypedName","src":"5557:14:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5652:9:46","nodeType":"YulIdentifier","src":"5652:9:46"},{"kind":"number","nativeSrc":"5663:3:46","nodeType":"YulLiteral","src":"5663:3:46","type":"","value":"288"}],"functionName":{"name":"add","nativeSrc":"5648:3:46","nodeType":"YulIdentifier","src":"5648:3:46"},"nativeSrc":"5648:19:46","nodeType":"YulFunctionCall","src":"5648:19:46"},{"arguments":[{"arguments":[{"name":"tail_1","nativeSrc":"5677:6:46","nodeType":"YulIdentifier","src":"5677:6:46"},{"name":"headStart","nativeSrc":"5685:9:46","nodeType":"YulIdentifier","src":"5685:9:46"}],"functionName":{"name":"sub","nativeSrc":"5673:3:46","nodeType":"YulIdentifier","src":"5673:3:46"},"nativeSrc":"5673:22:46","nodeType":"YulFunctionCall","src":"5673:22:46"},{"kind":"number","nativeSrc":"5697:66:46","nodeType":"YulLiteral","src":"5697:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0"}],"functionName":{"name":"add","nativeSrc":"5669:3:46","nodeType":"YulIdentifier","src":"5669:3:46"},"nativeSrc":"5669:95:46","nodeType":"YulFunctionCall","src":"5669:95:46"}],"functionName":{"name":"mstore","nativeSrc":"5641:6:46","nodeType":"YulIdentifier","src":"5641:6:46"},"nativeSrc":"5641:124:46","nodeType":"YulFunctionCall","src":"5641:124:46"},"nativeSrc":"5641:124:46","nodeType":"YulExpressionStatement","src":"5641:124:46"},{"nativeSrc":"5774:74:46","nodeType":"YulAssignment","src":"5774:74:46","value":{"arguments":[{"name":"memberValue0_3","nativeSrc":"5809:14:46","nodeType":"YulIdentifier","src":"5809:14:46"},{"name":"memberValue1_1","nativeSrc":"5825:14:46","nodeType":"YulIdentifier","src":"5825:14:46"},{"name":"tail_1","nativeSrc":"5841:6:46","nodeType":"YulIdentifier","src":"5841:6:46"}],"functionName":{"name":"abi_encode_string_calldata","nativeSrc":"5782:26:46","nodeType":"YulIdentifier","src":"5782:26:46"},"nativeSrc":"5782:66:46","nodeType":"YulFunctionCall","src":"5782:66:46"},"variableNames":[{"name":"tail","nativeSrc":"5774:4:46","nodeType":"YulIdentifier","src":"5774:4:46"}]}]},"name":"abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$4901_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$4901_memory_ptr__fromStack_reversed","nativeSrc":"4379:1475:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4543:9:46","nodeType":"YulTypedName","src":"4543:9:46","type":""},{"name":"value2","nativeSrc":"4554:6:46","nodeType":"YulTypedName","src":"4554:6:46","type":""},{"name":"value1","nativeSrc":"4562:6:46","nodeType":"YulTypedName","src":"4562:6:46","type":""},{"name":"value0","nativeSrc":"4570:6:46","nodeType":"YulTypedName","src":"4570:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4581:4:46","nodeType":"YulTypedName","src":"4581:4:46","type":""}],"src":"4379:1475:46"},{"body":{"nativeSrc":"6040:217:46","nodeType":"YulBlock","src":"6040:217:46","statements":[{"nativeSrc":"6050:27:46","nodeType":"YulAssignment","src":"6050:27:46","value":{"arguments":[{"name":"headStart","nativeSrc":"6062:9:46","nodeType":"YulIdentifier","src":"6062:9:46"},{"kind":"number","nativeSrc":"6073:3:46","nodeType":"YulLiteral","src":"6073:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6058:3:46","nodeType":"YulIdentifier","src":"6058:3:46"},"nativeSrc":"6058:19:46","nodeType":"YulFunctionCall","src":"6058:19:46"},"variableNames":[{"name":"tail","nativeSrc":"6050:4:46","nodeType":"YulIdentifier","src":"6050:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6093:9:46","nodeType":"YulIdentifier","src":"6093:9:46"},{"name":"value0","nativeSrc":"6104:6:46","nodeType":"YulIdentifier","src":"6104:6:46"}],"functionName":{"name":"mstore","nativeSrc":"6086:6:46","nodeType":"YulIdentifier","src":"6086:6:46"},"nativeSrc":"6086:25:46","nodeType":"YulFunctionCall","src":"6086:25:46"},"nativeSrc":"6086:25:46","nodeType":"YulExpressionStatement","src":"6086:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6131:9:46","nodeType":"YulIdentifier","src":"6131:9:46"},{"kind":"number","nativeSrc":"6142:2:46","nodeType":"YulLiteral","src":"6142:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6127:3:46","nodeType":"YulIdentifier","src":"6127:3:46"},"nativeSrc":"6127:18:46","nodeType":"YulFunctionCall","src":"6127:18:46"},{"arguments":[{"name":"value1","nativeSrc":"6151:6:46","nodeType":"YulIdentifier","src":"6151:6:46"},{"kind":"number","nativeSrc":"6159:4:46","nodeType":"YulLiteral","src":"6159:4:46","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"6147:3:46","nodeType":"YulIdentifier","src":"6147:3:46"},"nativeSrc":"6147:17:46","nodeType":"YulFunctionCall","src":"6147:17:46"}],"functionName":{"name":"mstore","nativeSrc":"6120:6:46","nodeType":"YulIdentifier","src":"6120:6:46"},"nativeSrc":"6120:45:46","nodeType":"YulFunctionCall","src":"6120:45:46"},"nativeSrc":"6120:45:46","nodeType":"YulExpressionStatement","src":"6120:45:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6185:9:46","nodeType":"YulIdentifier","src":"6185:9:46"},{"kind":"number","nativeSrc":"6196:2:46","nodeType":"YulLiteral","src":"6196:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6181:3:46","nodeType":"YulIdentifier","src":"6181:3:46"},"nativeSrc":"6181:18:46","nodeType":"YulFunctionCall","src":"6181:18:46"},{"name":"value2","nativeSrc":"6201:6:46","nodeType":"YulIdentifier","src":"6201:6:46"}],"functionName":{"name":"mstore","nativeSrc":"6174:6:46","nodeType":"YulIdentifier","src":"6174:6:46"},"nativeSrc":"6174:34:46","nodeType":"YulFunctionCall","src":"6174:34:46"},"nativeSrc":"6174:34:46","nodeType":"YulExpressionStatement","src":"6174:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6228:9:46","nodeType":"YulIdentifier","src":"6228:9:46"},{"kind":"number","nativeSrc":"6239:2:46","nodeType":"YulLiteral","src":"6239:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6224:3:46","nodeType":"YulIdentifier","src":"6224:3:46"},"nativeSrc":"6224:18:46","nodeType":"YulFunctionCall","src":"6224:18:46"},{"name":"value3","nativeSrc":"6244:6:46","nodeType":"YulIdentifier","src":"6244:6:46"}],"functionName":{"name":"mstore","nativeSrc":"6217:6:46","nodeType":"YulIdentifier","src":"6217:6:46"},"nativeSrc":"6217:34:46","nodeType":"YulFunctionCall","src":"6217:34:46"},"nativeSrc":"6217:34:46","nodeType":"YulExpressionStatement","src":"6217:34:46"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"5859:398:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5985:9:46","nodeType":"YulTypedName","src":"5985:9:46","type":""},{"name":"value3","nativeSrc":"5996:6:46","nodeType":"YulTypedName","src":"5996:6:46","type":""},{"name":"value2","nativeSrc":"6004:6:46","nodeType":"YulTypedName","src":"6004:6:46","type":""},{"name":"value1","nativeSrc":"6012:6:46","nodeType":"YulTypedName","src":"6012:6:46","type":""},{"name":"value0","nativeSrc":"6020:6:46","nodeType":"YulTypedName","src":"6020:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6031:4:46","nodeType":"YulTypedName","src":"6031:4:46","type":""}],"src":"5859:398:46"},{"body":{"nativeSrc":"6357:486:46","nodeType":"YulBlock","src":"6357:486:46","statements":[{"nativeSrc":"6367:51:46","nodeType":"YulVariableDeclaration","src":"6367:51:46","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"6406:11:46","nodeType":"YulIdentifier","src":"6406:11:46"}],"functionName":{"name":"calldataload","nativeSrc":"6393:12:46","nodeType":"YulIdentifier","src":"6393:12:46"},"nativeSrc":"6393:25:46","nodeType":"YulFunctionCall","src":"6393:25:46"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"6371:18:46","nodeType":"YulTypedName","src":"6371:18:46","type":""}]},{"body":{"nativeSrc":"6566:16:46","nodeType":"YulBlock","src":"6566:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6575:1:46","nodeType":"YulLiteral","src":"6575:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6578:1:46","nodeType":"YulLiteral","src":"6578:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6568:6:46","nodeType":"YulIdentifier","src":"6568:6:46"},"nativeSrc":"6568:12:46","nodeType":"YulFunctionCall","src":"6568:12:46"},"nativeSrc":"6568:12:46","nodeType":"YulExpressionStatement","src":"6568:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"6441:18:46","nodeType":"YulIdentifier","src":"6441:18:46"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6469:12:46","nodeType":"YulIdentifier","src":"6469:12:46"},"nativeSrc":"6469:14:46","nodeType":"YulFunctionCall","src":"6469:14:46"},{"name":"base_ref","nativeSrc":"6485:8:46","nodeType":"YulIdentifier","src":"6485:8:46"}],"functionName":{"name":"sub","nativeSrc":"6465:3:46","nodeType":"YulIdentifier","src":"6465:3:46"},"nativeSrc":"6465:29:46","nodeType":"YulFunctionCall","src":"6465:29:46"},{"kind":"number","nativeSrc":"6496:66:46","nodeType":"YulLiteral","src":"6496:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"6461:3:46","nodeType":"YulIdentifier","src":"6461:3:46"},"nativeSrc":"6461:102:46","nodeType":"YulFunctionCall","src":"6461:102:46"}],"functionName":{"name":"slt","nativeSrc":"6437:3:46","nodeType":"YulIdentifier","src":"6437:3:46"},"nativeSrc":"6437:127:46","nodeType":"YulFunctionCall","src":"6437:127:46"}],"functionName":{"name":"iszero","nativeSrc":"6430:6:46","nodeType":"YulIdentifier","src":"6430:6:46"},"nativeSrc":"6430:135:46","nodeType":"YulFunctionCall","src":"6430:135:46"},"nativeSrc":"6427:155:46","nodeType":"YulIf","src":"6427:155:46"},{"nativeSrc":"6591:47:46","nodeType":"YulVariableDeclaration","src":"6591:47:46","value":{"arguments":[{"name":"base_ref","nativeSrc":"6609:8:46","nodeType":"YulIdentifier","src":"6609:8:46"},{"name":"rel_offset_of_tail","nativeSrc":"6619:18:46","nodeType":"YulIdentifier","src":"6619:18:46"}],"functionName":{"name":"add","nativeSrc":"6605:3:46","nodeType":"YulIdentifier","src":"6605:3:46"},"nativeSrc":"6605:33:46","nodeType":"YulFunctionCall","src":"6605:33:46"},"variables":[{"name":"addr_1","nativeSrc":"6595:6:46","nodeType":"YulTypedName","src":"6595:6:46","type":""}]},{"nativeSrc":"6647:30:46","nodeType":"YulAssignment","src":"6647:30:46","value":{"arguments":[{"name":"addr_1","nativeSrc":"6670:6:46","nodeType":"YulIdentifier","src":"6670:6:46"}],"functionName":{"name":"calldataload","nativeSrc":"6657:12:46","nodeType":"YulIdentifier","src":"6657:12:46"},"nativeSrc":"6657:20:46","nodeType":"YulFunctionCall","src":"6657:20:46"},"variableNames":[{"name":"length","nativeSrc":"6647:6:46","nodeType":"YulIdentifier","src":"6647:6:46"}]},{"body":{"nativeSrc":"6720:16:46","nodeType":"YulBlock","src":"6720:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6729:1:46","nodeType":"YulLiteral","src":"6729:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6732:1:46","nodeType":"YulLiteral","src":"6732:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6722:6:46","nodeType":"YulIdentifier","src":"6722:6:46"},"nativeSrc":"6722:12:46","nodeType":"YulFunctionCall","src":"6722:12:46"},"nativeSrc":"6722:12:46","nodeType":"YulExpressionStatement","src":"6722:12:46"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"6692:6:46","nodeType":"YulIdentifier","src":"6692:6:46"},{"kind":"number","nativeSrc":"6700:18:46","nodeType":"YulLiteral","src":"6700:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"6689:2:46","nodeType":"YulIdentifier","src":"6689:2:46"},"nativeSrc":"6689:30:46","nodeType":"YulFunctionCall","src":"6689:30:46"},"nativeSrc":"6686:50:46","nodeType":"YulIf","src":"6686:50:46"},{"nativeSrc":"6745:25:46","nodeType":"YulAssignment","src":"6745:25:46","value":{"arguments":[{"name":"addr_1","nativeSrc":"6757:6:46","nodeType":"YulIdentifier","src":"6757:6:46"},{"kind":"number","nativeSrc":"6765:4:46","nodeType":"YulLiteral","src":"6765:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"6753:3:46","nodeType":"YulIdentifier","src":"6753:3:46"},"nativeSrc":"6753:17:46","nodeType":"YulFunctionCall","src":"6753:17:46"},"variableNames":[{"name":"addr","nativeSrc":"6745:4:46","nodeType":"YulIdentifier","src":"6745:4:46"}]},{"body":{"nativeSrc":"6821:16:46","nodeType":"YulBlock","src":"6821:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6830:1:46","nodeType":"YulLiteral","src":"6830:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6833:1:46","nodeType":"YulLiteral","src":"6833:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6823:6:46","nodeType":"YulIdentifier","src":"6823:6:46"},"nativeSrc":"6823:12:46","nodeType":"YulFunctionCall","src":"6823:12:46"},"nativeSrc":"6823:12:46","nodeType":"YulExpressionStatement","src":"6823:12:46"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"6786:4:46","nodeType":"YulIdentifier","src":"6786:4:46"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"6796:12:46","nodeType":"YulIdentifier","src":"6796:12:46"},"nativeSrc":"6796:14:46","nodeType":"YulFunctionCall","src":"6796:14:46"},{"name":"length","nativeSrc":"6812:6:46","nodeType":"YulIdentifier","src":"6812:6:46"}],"functionName":{"name":"sub","nativeSrc":"6792:3:46","nodeType":"YulIdentifier","src":"6792:3:46"},"nativeSrc":"6792:27:46","nodeType":"YulFunctionCall","src":"6792:27:46"}],"functionName":{"name":"sgt","nativeSrc":"6782:3:46","nodeType":"YulIdentifier","src":"6782:3:46"},"nativeSrc":"6782:38:46","nodeType":"YulFunctionCall","src":"6782:38:46"},"nativeSrc":"6779:58:46","nodeType":"YulIf","src":"6779:58:46"}]},"name":"access_calldata_tail_t_string_calldata_ptr","nativeSrc":"6262:581:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"6314:8:46","nodeType":"YulTypedName","src":"6314:8:46","type":""},{"name":"ptr_to_tail","nativeSrc":"6324:11:46","nodeType":"YulTypedName","src":"6324:11:46","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"6340:4:46","nodeType":"YulTypedName","src":"6340:4:46","type":""},{"name":"length","nativeSrc":"6346:6:46","nodeType":"YulTypedName","src":"6346:6:46","type":""}],"src":"6262:581:46"},{"body":{"nativeSrc":"6997:124:46","nodeType":"YulBlock","src":"6997:124:46","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"7020:3:46","nodeType":"YulIdentifier","src":"7020:3:46"},{"name":"value0","nativeSrc":"7025:6:46","nodeType":"YulIdentifier","src":"7025:6:46"},{"name":"value1","nativeSrc":"7033:6:46","nodeType":"YulIdentifier","src":"7033:6:46"}],"functionName":{"name":"calldatacopy","nativeSrc":"7007:12:46","nodeType":"YulIdentifier","src":"7007:12:46"},"nativeSrc":"7007:33:46","nodeType":"YulFunctionCall","src":"7007:33:46"},"nativeSrc":"7007:33:46","nodeType":"YulExpressionStatement","src":"7007:33:46"},{"nativeSrc":"7049:26:46","nodeType":"YulVariableDeclaration","src":"7049:26:46","value":{"arguments":[{"name":"pos","nativeSrc":"7063:3:46","nodeType":"YulIdentifier","src":"7063:3:46"},{"name":"value1","nativeSrc":"7068:6:46","nodeType":"YulIdentifier","src":"7068:6:46"}],"functionName":{"name":"add","nativeSrc":"7059:3:46","nodeType":"YulIdentifier","src":"7059:3:46"},"nativeSrc":"7059:16:46","nodeType":"YulFunctionCall","src":"7059:16:46"},"variables":[{"name":"_1","nativeSrc":"7053:2:46","nodeType":"YulTypedName","src":"7053:2:46","type":""}]},{"expression":{"arguments":[{"name":"_1","nativeSrc":"7091:2:46","nodeType":"YulIdentifier","src":"7091:2:46"},{"kind":"number","nativeSrc":"7095:1:46","nodeType":"YulLiteral","src":"7095:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"7084:6:46","nodeType":"YulIdentifier","src":"7084:6:46"},"nativeSrc":"7084:13:46","nodeType":"YulFunctionCall","src":"7084:13:46"},"nativeSrc":"7084:13:46","nodeType":"YulExpressionStatement","src":"7084:13:46"},{"nativeSrc":"7106:9:46","nodeType":"YulAssignment","src":"7106:9:46","value":{"name":"_1","nativeSrc":"7113:2:46","nodeType":"YulIdentifier","src":"7113:2:46"},"variableNames":[{"name":"end","nativeSrc":"7106:3:46","nodeType":"YulIdentifier","src":"7106:3:46"}]}]},"name":"abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"6848:273:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"6965:3:46","nodeType":"YulTypedName","src":"6965:3:46","type":""},{"name":"value1","nativeSrc":"6970:6:46","nodeType":"YulTypedName","src":"6970:6:46","type":""},{"name":"value0","nativeSrc":"6978:6:46","nodeType":"YulTypedName","src":"6978:6:46","type":""}],"returnVariables":[{"name":"end","nativeSrc":"6989:3:46","nodeType":"YulTypedName","src":"6989:3:46","type":""}],"src":"6848:273:46"},{"body":{"nativeSrc":"7255:168:46","nodeType":"YulBlock","src":"7255:168:46","statements":[{"nativeSrc":"7265:26:46","nodeType":"YulAssignment","src":"7265:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"7277:9:46","nodeType":"YulIdentifier","src":"7277:9:46"},{"kind":"number","nativeSrc":"7288:2:46","nodeType":"YulLiteral","src":"7288:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7273:3:46","nodeType":"YulIdentifier","src":"7273:3:46"},"nativeSrc":"7273:18:46","nodeType":"YulFunctionCall","src":"7273:18:46"},"variableNames":[{"name":"tail","nativeSrc":"7265:4:46","nodeType":"YulIdentifier","src":"7265:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7307:9:46","nodeType":"YulIdentifier","src":"7307:9:46"},{"name":"value0","nativeSrc":"7318:6:46","nodeType":"YulIdentifier","src":"7318:6:46"}],"functionName":{"name":"mstore","nativeSrc":"7300:6:46","nodeType":"YulIdentifier","src":"7300:6:46"},"nativeSrc":"7300:25:46","nodeType":"YulFunctionCall","src":"7300:25:46"},"nativeSrc":"7300:25:46","nodeType":"YulExpressionStatement","src":"7300:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7345:9:46","nodeType":"YulIdentifier","src":"7345:9:46"},{"kind":"number","nativeSrc":"7356:2:46","nodeType":"YulLiteral","src":"7356:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7341:3:46","nodeType":"YulIdentifier","src":"7341:3:46"},"nativeSrc":"7341:18:46","nodeType":"YulFunctionCall","src":"7341:18:46"},{"arguments":[{"name":"value1","nativeSrc":"7365:6:46","nodeType":"YulIdentifier","src":"7365:6:46"},{"kind":"number","nativeSrc":"7373:42:46","nodeType":"YulLiteral","src":"7373:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7361:3:46","nodeType":"YulIdentifier","src":"7361:3:46"},"nativeSrc":"7361:55:46","nodeType":"YulFunctionCall","src":"7361:55:46"}],"functionName":{"name":"mstore","nativeSrc":"7334:6:46","nodeType":"YulIdentifier","src":"7334:6:46"},"nativeSrc":"7334:83:46","nodeType":"YulFunctionCall","src":"7334:83:46"},"nativeSrc":"7334:83:46","nodeType":"YulExpressionStatement","src":"7334:83:46"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"7126:297:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7216:9:46","nodeType":"YulTypedName","src":"7216:9:46","type":""},{"name":"value1","nativeSrc":"7227:6:46","nodeType":"YulTypedName","src":"7227:6:46","type":""},{"name":"value0","nativeSrc":"7235:6:46","nodeType":"YulTypedName","src":"7235:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7246:4:46","nodeType":"YulTypedName","src":"7246:4:46","type":""}],"src":"7126:297:46"},{"body":{"nativeSrc":"7506:199:46","nodeType":"YulBlock","src":"7506:199:46","statements":[{"body":{"nativeSrc":"7552:16:46","nodeType":"YulBlock","src":"7552:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7561:1:46","nodeType":"YulLiteral","src":"7561:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7564:1:46","nodeType":"YulLiteral","src":"7564:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7554:6:46","nodeType":"YulIdentifier","src":"7554:6:46"},"nativeSrc":"7554:12:46","nodeType":"YulFunctionCall","src":"7554:12:46"},"nativeSrc":"7554:12:46","nodeType":"YulExpressionStatement","src":"7554:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7527:7:46","nodeType":"YulIdentifier","src":"7527:7:46"},{"name":"headStart","nativeSrc":"7536:9:46","nodeType":"YulIdentifier","src":"7536:9:46"}],"functionName":{"name":"sub","nativeSrc":"7523:3:46","nodeType":"YulIdentifier","src":"7523:3:46"},"nativeSrc":"7523:23:46","nodeType":"YulFunctionCall","src":"7523:23:46"},{"kind":"number","nativeSrc":"7548:2:46","nodeType":"YulLiteral","src":"7548:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7519:3:46","nodeType":"YulIdentifier","src":"7519:3:46"},"nativeSrc":"7519:32:46","nodeType":"YulFunctionCall","src":"7519:32:46"},"nativeSrc":"7516:52:46","nodeType":"YulIf","src":"7516:52:46"},{"nativeSrc":"7577:29:46","nodeType":"YulVariableDeclaration","src":"7577:29:46","value":{"arguments":[{"name":"headStart","nativeSrc":"7596:9:46","nodeType":"YulIdentifier","src":"7596:9:46"}],"functionName":{"name":"mload","nativeSrc":"7590:5:46","nodeType":"YulIdentifier","src":"7590:5:46"},"nativeSrc":"7590:16:46","nodeType":"YulFunctionCall","src":"7590:16:46"},"variables":[{"name":"value","nativeSrc":"7581:5:46","nodeType":"YulTypedName","src":"7581:5:46","type":""}]},{"body":{"nativeSrc":"7659:16:46","nodeType":"YulBlock","src":"7659:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7668:1:46","nodeType":"YulLiteral","src":"7668:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7671:1:46","nodeType":"YulLiteral","src":"7671:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7661:6:46","nodeType":"YulIdentifier","src":"7661:6:46"},"nativeSrc":"7661:12:46","nodeType":"YulFunctionCall","src":"7661:12:46"},"nativeSrc":"7661:12:46","nodeType":"YulExpressionStatement","src":"7661:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7628:5:46","nodeType":"YulIdentifier","src":"7628:5:46"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"7649:5:46","nodeType":"YulIdentifier","src":"7649:5:46"}],"functionName":{"name":"iszero","nativeSrc":"7642:6:46","nodeType":"YulIdentifier","src":"7642:6:46"},"nativeSrc":"7642:13:46","nodeType":"YulFunctionCall","src":"7642:13:46"}],"functionName":{"name":"iszero","nativeSrc":"7635:6:46","nodeType":"YulIdentifier","src":"7635:6:46"},"nativeSrc":"7635:21:46","nodeType":"YulFunctionCall","src":"7635:21:46"}],"functionName":{"name":"eq","nativeSrc":"7625:2:46","nodeType":"YulIdentifier","src":"7625:2:46"},"nativeSrc":"7625:32:46","nodeType":"YulFunctionCall","src":"7625:32:46"}],"functionName":{"name":"iszero","nativeSrc":"7618:6:46","nodeType":"YulIdentifier","src":"7618:6:46"},"nativeSrc":"7618:40:46","nodeType":"YulFunctionCall","src":"7618:40:46"},"nativeSrc":"7615:60:46","nodeType":"YulIf","src":"7615:60:46"},{"nativeSrc":"7684:15:46","nodeType":"YulAssignment","src":"7684:15:46","value":{"name":"value","nativeSrc":"7694:5:46","nodeType":"YulIdentifier","src":"7694:5:46"},"variableNames":[{"name":"value0","nativeSrc":"7684:6:46","nodeType":"YulIdentifier","src":"7684:6:46"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"7428:277:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7472:9:46","nodeType":"YulTypedName","src":"7472:9:46","type":""},{"name":"dataEnd","nativeSrc":"7483:7:46","nodeType":"YulTypedName","src":"7483:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7495:6:46","nodeType":"YulTypedName","src":"7495:6:46","type":""}],"src":"7428:277:46"},{"body":{"nativeSrc":"7839:119:46","nodeType":"YulBlock","src":"7839:119:46","statements":[{"nativeSrc":"7849:26:46","nodeType":"YulAssignment","src":"7849:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"7861:9:46","nodeType":"YulIdentifier","src":"7861:9:46"},{"kind":"number","nativeSrc":"7872:2:46","nodeType":"YulLiteral","src":"7872:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7857:3:46","nodeType":"YulIdentifier","src":"7857:3:46"},"nativeSrc":"7857:18:46","nodeType":"YulFunctionCall","src":"7857:18:46"},"variableNames":[{"name":"tail","nativeSrc":"7849:4:46","nodeType":"YulIdentifier","src":"7849:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7891:9:46","nodeType":"YulIdentifier","src":"7891:9:46"},{"name":"value0","nativeSrc":"7902:6:46","nodeType":"YulIdentifier","src":"7902:6:46"}],"functionName":{"name":"mstore","nativeSrc":"7884:6:46","nodeType":"YulIdentifier","src":"7884:6:46"},"nativeSrc":"7884:25:46","nodeType":"YulFunctionCall","src":"7884:25:46"},"nativeSrc":"7884:25:46","nodeType":"YulExpressionStatement","src":"7884:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7929:9:46","nodeType":"YulIdentifier","src":"7929:9:46"},{"kind":"number","nativeSrc":"7940:2:46","nodeType":"YulLiteral","src":"7940:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7925:3:46","nodeType":"YulIdentifier","src":"7925:3:46"},"nativeSrc":"7925:18:46","nodeType":"YulFunctionCall","src":"7925:18:46"},{"name":"value1","nativeSrc":"7945:6:46","nodeType":"YulIdentifier","src":"7945:6:46"}],"functionName":{"name":"mstore","nativeSrc":"7918:6:46","nodeType":"YulIdentifier","src":"7918:6:46"},"nativeSrc":"7918:34:46","nodeType":"YulFunctionCall","src":"7918:34:46"},"nativeSrc":"7918:34:46","nodeType":"YulExpressionStatement","src":"7918:34:46"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"7710:248:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7800:9:46","nodeType":"YulTypedName","src":"7800:9:46","type":""},{"name":"value1","nativeSrc":"7811:6:46","nodeType":"YulTypedName","src":"7811:6:46","type":""},{"name":"value0","nativeSrc":"7819:6:46","nodeType":"YulTypedName","src":"7819:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7830:4:46","nodeType":"YulTypedName","src":"7830:4:46","type":""}],"src":"7710:248:46"},{"body":{"nativeSrc":"8012:233:46","nodeType":"YulBlock","src":"8012:233:46","statements":[{"nativeSrc":"8022:17:46","nodeType":"YulAssignment","src":"8022:17:46","value":{"arguments":[{"name":"x","nativeSrc":"8034:1:46","nodeType":"YulIdentifier","src":"8034:1:46"},{"name":"y","nativeSrc":"8037:1:46","nodeType":"YulIdentifier","src":"8037:1:46"}],"functionName":{"name":"sub","nativeSrc":"8030:3:46","nodeType":"YulIdentifier","src":"8030:3:46"},"nativeSrc":"8030:9:46","nodeType":"YulFunctionCall","src":"8030:9:46"},"variableNames":[{"name":"diff","nativeSrc":"8022:4:46","nodeType":"YulIdentifier","src":"8022:4:46"}]},{"body":{"nativeSrc":"8071:168:46","nodeType":"YulBlock","src":"8071:168:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8092:1:46","nodeType":"YulLiteral","src":"8092:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8095:77:46","nodeType":"YulLiteral","src":"8095:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8085:6:46","nodeType":"YulIdentifier","src":"8085:6:46"},"nativeSrc":"8085:88:46","nodeType":"YulFunctionCall","src":"8085:88:46"},"nativeSrc":"8085:88:46","nodeType":"YulExpressionStatement","src":"8085:88:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8193:1:46","nodeType":"YulLiteral","src":"8193:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"8196:4:46","nodeType":"YulLiteral","src":"8196:4:46","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"8186:6:46","nodeType":"YulIdentifier","src":"8186:6:46"},"nativeSrc":"8186:15:46","nodeType":"YulFunctionCall","src":"8186:15:46"},"nativeSrc":"8186:15:46","nodeType":"YulExpressionStatement","src":"8186:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8221:1:46","nodeType":"YulLiteral","src":"8221:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8224:4:46","nodeType":"YulLiteral","src":"8224:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8214:6:46","nodeType":"YulIdentifier","src":"8214:6:46"},"nativeSrc":"8214:15:46","nodeType":"YulFunctionCall","src":"8214:15:46"},"nativeSrc":"8214:15:46","nodeType":"YulExpressionStatement","src":"8214:15:46"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"8054:4:46","nodeType":"YulIdentifier","src":"8054:4:46"},{"name":"x","nativeSrc":"8060:1:46","nodeType":"YulIdentifier","src":"8060:1:46"}],"functionName":{"name":"gt","nativeSrc":"8051:2:46","nodeType":"YulIdentifier","src":"8051:2:46"},"nativeSrc":"8051:11:46","nodeType":"YulFunctionCall","src":"8051:11:46"},"nativeSrc":"8048:191:46","nodeType":"YulIf","src":"8048:191:46"}]},"name":"checked_sub_t_uint256","nativeSrc":"7963:282:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"7994:1:46","nodeType":"YulTypedName","src":"7994:1:46","type":""},{"name":"y","nativeSrc":"7997:1:46","nodeType":"YulTypedName","src":"7997:1:46","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"8003:4:46","nodeType":"YulTypedName","src":"8003:4:46","type":""}],"src":"7963:282:46"},{"body":{"nativeSrc":"8407:241:46","nodeType":"YulBlock","src":"8407:241:46","statements":[{"nativeSrc":"8417:26:46","nodeType":"YulAssignment","src":"8417:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"8429:9:46","nodeType":"YulIdentifier","src":"8429:9:46"},{"kind":"number","nativeSrc":"8440:2:46","nodeType":"YulLiteral","src":"8440:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8425:3:46","nodeType":"YulIdentifier","src":"8425:3:46"},"nativeSrc":"8425:18:46","nodeType":"YulFunctionCall","src":"8425:18:46"},"variableNames":[{"name":"tail","nativeSrc":"8417:4:46","nodeType":"YulIdentifier","src":"8417:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"8459:9:46","nodeType":"YulIdentifier","src":"8459:9:46"},{"name":"value0","nativeSrc":"8470:6:46","nodeType":"YulIdentifier","src":"8470:6:46"}],"functionName":{"name":"mstore","nativeSrc":"8452:6:46","nodeType":"YulIdentifier","src":"8452:6:46"},"nativeSrc":"8452:25:46","nodeType":"YulFunctionCall","src":"8452:25:46"},"nativeSrc":"8452:25:46","nodeType":"YulExpressionStatement","src":"8452:25:46"},{"nativeSrc":"8486:52:46","nodeType":"YulVariableDeclaration","src":"8486:52:46","value":{"kind":"number","nativeSrc":"8496:42:46","nodeType":"YulLiteral","src":"8496:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8490:2:46","nodeType":"YulTypedName","src":"8490:2:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8558:9:46","nodeType":"YulIdentifier","src":"8558:9:46"},{"kind":"number","nativeSrc":"8569:2:46","nodeType":"YulLiteral","src":"8569:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8554:3:46","nodeType":"YulIdentifier","src":"8554:3:46"},"nativeSrc":"8554:18:46","nodeType":"YulFunctionCall","src":"8554:18:46"},{"arguments":[{"name":"value1","nativeSrc":"8578:6:46","nodeType":"YulIdentifier","src":"8578:6:46"},{"name":"_1","nativeSrc":"8586:2:46","nodeType":"YulIdentifier","src":"8586:2:46"}],"functionName":{"name":"and","nativeSrc":"8574:3:46","nodeType":"YulIdentifier","src":"8574:3:46"},"nativeSrc":"8574:15:46","nodeType":"YulFunctionCall","src":"8574:15:46"}],"functionName":{"name":"mstore","nativeSrc":"8547:6:46","nodeType":"YulIdentifier","src":"8547:6:46"},"nativeSrc":"8547:43:46","nodeType":"YulFunctionCall","src":"8547:43:46"},"nativeSrc":"8547:43:46","nodeType":"YulExpressionStatement","src":"8547:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8610:9:46","nodeType":"YulIdentifier","src":"8610:9:46"},{"kind":"number","nativeSrc":"8621:2:46","nodeType":"YulLiteral","src":"8621:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8606:3:46","nodeType":"YulIdentifier","src":"8606:3:46"},"nativeSrc":"8606:18:46","nodeType":"YulFunctionCall","src":"8606:18:46"},{"arguments":[{"name":"value2","nativeSrc":"8630:6:46","nodeType":"YulIdentifier","src":"8630:6:46"},{"name":"_1","nativeSrc":"8638:2:46","nodeType":"YulIdentifier","src":"8638:2:46"}],"functionName":{"name":"and","nativeSrc":"8626:3:46","nodeType":"YulIdentifier","src":"8626:3:46"},"nativeSrc":"8626:15:46","nodeType":"YulFunctionCall","src":"8626:15:46"}],"functionName":{"name":"mstore","nativeSrc":"8599:6:46","nodeType":"YulIdentifier","src":"8599:6:46"},"nativeSrc":"8599:43:46","nodeType":"YulFunctionCall","src":"8599:43:46"},"nativeSrc":"8599:43:46","nodeType":"YulExpressionStatement","src":"8599:43:46"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"8250:398:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8360:9:46","nodeType":"YulTypedName","src":"8360:9:46","type":""},{"name":"value2","nativeSrc":"8371:6:46","nodeType":"YulTypedName","src":"8371:6:46","type":""},{"name":"value1","nativeSrc":"8379:6:46","nodeType":"YulTypedName","src":"8379:6:46","type":""},{"name":"value0","nativeSrc":"8387:6:46","nodeType":"YulTypedName","src":"8387:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"8398:4:46","nodeType":"YulTypedName","src":"8398:4:46","type":""}],"src":"8250:398:46"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if slt(sub(dataEnd, _2), 224) { revert(0, 0) }\n        value2 := _2\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let _3 := add(headStart, offset_1)\n        if iszero(slt(add(_3, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_3)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_3, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_3, 32)\n        value4 := length\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_contract$_IRevocationRegistry_$4884(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_decode_uint16(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n    }\n    function abi_decode_uint64(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_encode_uint64(value, pos)\n    {\n        mstore(pos, and(value, 0xffffffffffffffff))\n    }\n    function calldata_access_string_calldata(base_ref, ptr) -> value, length\n    {\n        let rel_offset_of_tail := calldataload(ptr)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let value_1 := add(rel_offset_of_tail, base_ref)\n        length := calldataload(value_1)\n        value := add(value_1, 0x20)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        if sgt(value, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_string_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        calldatacopy(add(pos, 0x20), start, length)\n        mstore(add(add(pos, length), 0x20), 0)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_address_t_uint256_t_struct$_MetaData_$4901_calldata_ptr__to_t_address_t_uint256_t_struct$_MetaData_$4901_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), 96)\n        let _1 := 0xffff\n        mstore(add(headStart, 96), and(abi_decode_uint16(value2), _1))\n        mstore(add(headStart, 128), and(abi_decode_uint16(add(value2, 32)), _1))\n        mstore(add(headStart, 160), and(abi_decode_uint64(add(value2, 64)), 0xffffffffffffffff))\n        let memberValue0 := abi_decode_uint64(add(value2, 96))\n        abi_encode_uint64(memberValue0, add(headStart, 192))\n        let memberValue0_1 := abi_decode_uint64(add(value2, 128))\n        abi_encode_uint64(memberValue0_1, add(headStart, 0xe0))\n        let memberValue0_2, memberValue1 := calldata_access_string_calldata(value2, add(value2, 160))\n        mstore(add(headStart, 256), 0xe0)\n        let tail_1 := abi_encode_string_calldata(memberValue0_2, memberValue1, add(headStart, 320))\n        let memberValue0_3, memberValue1_1 := calldata_access_string_calldata(value2, add(value2, 192))\n        mstore(add(headStart, 288), add(sub(tail_1, headStart), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0))\n        tail := abi_encode_string_calldata(memberValue0_3, memberValue1_1, tail_1)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function access_calldata_tail_t_string_calldata_ptr(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function abi_encode_tuple_packed_t_string_calldata_ptr__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        calldatacopy(pos, value0, value1)\n        let _1 := add(pos, value1)\n        mstore(_1, 0)\n        end := _1\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"3986":[{"length":32,"start":890}],"3989":[{"length":32,"start":1272}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100a35760003560e01c80638da5cb5b1161007657806395f94bc41161005b57806395f94bc41461014b578063d547741f1461015e578063f2fde38b1461017157600080fd5b80638da5cb5b1461010b57806391d148541461013857600080fd5b806301ffc9a7146100a85780632f2ff15d146100d05780634d5b0423146100e55780638bb9c5bf146100f8575b600080fd5b6100bb6100b6366004610c75565b610184565b60405190151581526020015b60405180910390f35b6100e36100de366004610cd9565b61019e565b005b6100e36100f3366004610d09565b6101cc565b6100e3610106366004610dc2565b6105a6565b6101136105bd565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c7565b6100bb610146366004610cd9565b6105e9565b6100e3610159366004610ddb565b610634565b6100e361016c366004610cd9565b610687565b6100e361017f366004610ddb565b6106aa565b6000610198826101926106be565b906106ec565b92915050565b336101b1816101ab6107c6565b906107f4565b6101c78383836101bf610868565b929190610896565b505050565b60418114610206576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040516021830135908335906020808601359160009160019161022f918c918c918c9101610edb565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156102ab573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001519150600090506102e660a0890189610ff1565b6040516020016102f7929190611056565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905273ffffffffffffffffffffffffffffffffffffffff84811660248401529092507f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa1580156103c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103e59190611066565b15610568576000546040517fa3a2656a00000000000000000000000000000000000000000000000000000000815260048101839052602481018b905273ffffffffffffffffffffffffffffffffffffffff9091169063a3a2656a90604401602060405180830381865afa158015610460573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104849190611066565b156104bb576040517f6e80385700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f54c7be0600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906354c7be0690610531908d908d908d90600401610edb565b600060405180830381600087803b15801561054b57600080fd5b505af115801561055f573d6000803e3d6000fd5b5050505061059a565b6040517fe41bfc5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050565b6105ba33826105b3610868565b919061096d565b50565b60006105e46105ca6107c6565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b600061062d83836105f8610868565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b610640336101ab6107c6565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b33610694816101ab6107c6565b6101c78383836106a2610868565b929190610a11565b6105ba33826106b76107c6565b9190610adb565b60008061019860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e611088565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161073c57506000610198565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161078d57506001610198565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd611088565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610864576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024015b60405180910390fd5b5050565b60008061019860017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23611088565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166109675760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b610978838284610bef565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156109675760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600161095e565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b48576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240161085b565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146109675783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166101c7576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff8216602482015260440161085b565b600060208284031215610c8757600080fd5b81357fffffffff000000000000000000000000000000000000000000000000000000008116811461062d57600080fd5b73ffffffffffffffffffffffffffffffffffffffff811681146105ba57600080fd5b60008060408385031215610cec57600080fd5b823591506020830135610cfe81610cb7565b809150509250929050565b600080600080600060808688031215610d2157600080fd5b8535610d2c81610cb7565b945060208601359350604086013567ffffffffffffffff80821115610d5057600080fd5b9087019060e0828a031215610d6457600080fd5b90935060608701359080821115610d7a57600080fd5b818801915088601f830112610d8e57600080fd5b813581811115610d9d57600080fd5b896020828501011115610daf57600080fd5b9699959850939650602001949392505050565b600060208284031215610dd457600080fd5b5035919050565b600060208284031215610ded57600080fd5b813561062d81610cb7565b803561ffff81168114610e0a57600080fd5b919050565b803567ffffffffffffffff81168114610e0a57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e5c57600080fd5b830160208101925035905067ffffffffffffffff811115610e7c57600080fd5b803603821315610e8b57600080fd5b9250929050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b73ffffffffffffffffffffffffffffffffffffffff8416815282602082015260606040820152600061ffff80610f1085610df8565b16606084015280610f2360208601610df8565b1660808401525067ffffffffffffffff610f3f60408501610e0f565b1660a0830152610f5160608401610e0f565b67ffffffffffffffff1660c0830152610f6c60808401610e0f565b67ffffffffffffffff1660e0830152610f8860a0840184610e27565b60e0610100850152610f9f61014085018284610e92565b915050610faf60c0850185610e27565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa085840301610120860152610fe5838284610e92565b98975050505050505050565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261102657600080fd5b83018035915067ffffffffffffffff82111561104157600080fd5b602001915036819003821315610e8b57600080fd5b8183823760009101908152919050565b60006020828403121561107857600080fd5b8151801515811461062d57600080fd5b81810381811115610198577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220a3227850e41d01a70299ca6417069970ac5963482eef007f93ecfa2938ba32bd64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0xA3 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x8DA5CB5B GT PUSH2 0x76 JUMPI DUP1 PUSH4 0x95F94BC4 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x14B JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x10B JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x138 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0xA8 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0xD0 JUMPI DUP1 PUSH4 0x4D5B0423 EQ PUSH2 0xE5 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBB PUSH2 0xB6 CALLDATASIZE PUSH1 0x4 PUSH2 0xC75 JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xE3 PUSH2 0xDE CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x19E JUMP JUMPDEST STOP JUMPDEST PUSH2 0xE3 PUSH2 0xF3 CALLDATASIZE PUSH1 0x4 PUSH2 0xD09 JUMP JUMPDEST PUSH2 0x1CC JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0xDC2 JUMP JUMPDEST PUSH2 0x5A6 JUMP JUMPDEST PUSH2 0x113 PUSH2 0x5BD JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xC7 JUMP JUMPDEST PUSH2 0xBB PUSH2 0x146 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x5E9 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x159 CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x634 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x16C CALLDATASIZE PUSH1 0x4 PUSH2 0xCD9 JUMP JUMPDEST PUSH2 0x687 JUMP JUMPDEST PUSH2 0xE3 PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0xDDB JUMP JUMPDEST PUSH2 0x6AA JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198 DUP3 PUSH2 0x192 PUSH2 0x6BE JUMP JUMPDEST SWAP1 PUSH2 0x6EC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH2 0x1B1 DUP2 PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST SWAP1 PUSH2 0x7F4 JUMP JUMPDEST PUSH2 0x1C7 DUP4 DUP4 DUP4 PUSH2 0x1BF PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x896 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x206 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x22F SWAP2 DUP13 SWAP2 DUP13 SWAP2 DUP13 SWAP2 ADD PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2AB JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP PUSH1 0x0 SWAP1 POP PUSH2 0x2E6 PUSH1 0xA0 DUP10 ADD DUP10 PUSH2 0xFF1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x2F7 SWAP3 SWAP2 SWAP1 PUSH2 0x1056 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP3 POP PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x3C1 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3E5 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0x568 JUMPI PUSH1 0x0 SLOAD PUSH1 0x40 MLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x460 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x484 SWAP2 SWAP1 PUSH2 0x1066 JUMP JUMPDEST ISZERO PUSH2 0x4BB JUMPI PUSH1 0x40 MLOAD PUSH32 0x6E80385700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x54C7BE0600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x54C7BE06 SWAP1 PUSH2 0x531 SWAP1 DUP14 SWAP1 DUP14 SWAP1 DUP14 SWAP1 PUSH1 0x4 ADD PUSH2 0xEDB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x54B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x55F JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH2 0x59A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xE41BFC5800000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x5BA CALLER DUP3 PUSH2 0x5B3 PUSH2 0x868 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x96D JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x5E4 PUSH2 0x5CA PUSH2 0x7C6 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x62D DUP4 DUP4 PUSH2 0x5F8 PUSH2 0x868 JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH2 0x640 CALLER PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST CALLER PUSH2 0x694 DUP2 PUSH2 0x1AB PUSH2 0x7C6 JUMP JUMPDEST PUSH2 0x1C7 DUP4 DUP4 DUP4 PUSH2 0x6A2 PUSH2 0x868 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0xA11 JUMP JUMPDEST PUSH2 0x5BA CALLER DUP3 PUSH2 0x6B7 PUSH2 0x7C6 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xADB JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x73C JUMPI POP PUSH1 0x0 PUSH2 0x198 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x78D JUMPI POP PUSH1 0x1 PUSH2 0x198 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x1088 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x864 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x1088 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x967 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH2 0x978 DUP4 DUP3 DUP5 PUSH2 0xBEF JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x967 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x95E JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB48 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x85B JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x967 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1C7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x85B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xC87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x5BA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0xCFE DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xD21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0xD2C DUP2 PUSH2 0xCB7 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xD50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 DUP8 ADD SWAP1 PUSH1 0xE0 DUP3 DUP11 SUB SLT ISZERO PUSH2 0xD64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP1 SWAP4 POP PUSH1 0x60 DUP8 ADD CALLDATALOAD SWAP1 DUP1 DUP3 GT ISZERO PUSH2 0xD7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xD8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xD9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xDAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDD4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xDED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x62D DUP2 PUSH2 0xCB7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0xE0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST DUP1 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xE0A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0xE5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD PUSH1 0x20 DUP2 ADD SWAP3 POP CALLDATALOAD SWAP1 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xE7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 CALLDATASIZE SUB DUP3 SGT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST DUP2 DUP4 MSTORE DUP2 DUP2 PUSH1 0x20 DUP6 ADD CALLDATACOPY POP PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 ADD ADD MSTORE PUSH1 0x0 PUSH1 0x20 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP5 ADD AND DUP5 ADD ADD SWAP1 POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND DUP2 MSTORE DUP3 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x60 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x0 PUSH2 0xFFFF DUP1 PUSH2 0xF10 DUP6 PUSH2 0xDF8 JUMP JUMPDEST AND PUSH1 0x60 DUP5 ADD MSTORE DUP1 PUSH2 0xF23 PUSH1 0x20 DUP7 ADD PUSH2 0xDF8 JUMP JUMPDEST AND PUSH1 0x80 DUP5 ADD MSTORE POP PUSH8 0xFFFFFFFFFFFFFFFF PUSH2 0xF3F PUSH1 0x40 DUP6 ADD PUSH2 0xE0F JUMP JUMPDEST AND PUSH1 0xA0 DUP4 ADD MSTORE PUSH2 0xF51 PUSH1 0x60 DUP5 ADD PUSH2 0xE0F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xC0 DUP4 ADD MSTORE PUSH2 0xF6C PUSH1 0x80 DUP5 ADD PUSH2 0xE0F JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0xE0 DUP4 ADD MSTORE PUSH2 0xF88 PUSH1 0xA0 DUP5 ADD DUP5 PUSH2 0xE27 JUMP JUMPDEST PUSH1 0xE0 PUSH2 0x100 DUP6 ADD MSTORE PUSH2 0xF9F PUSH2 0x140 DUP6 ADD DUP3 DUP5 PUSH2 0xE92 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xFAF PUSH1 0xC0 DUP6 ADD DUP6 PUSH2 0xE27 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFA0 DUP6 DUP5 SUB ADD PUSH2 0x120 DUP7 ADD MSTORE PUSH2 0xFE5 DUP4 DUP3 DUP5 PUSH2 0xE92 JUMP JUMPDEST SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x1026 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x1041 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0xE8B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP4 DUP3 CALLDATACOPY PUSH1 0x0 SWAP2 ADD SWAP1 DUP2 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1078 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x62D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x198 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 LOG3 0x22 PUSH25 0x50E41D01A70299CA6417069970AC5963482EEF007F93ECFA29 CODESIZE 0xBA ORIGIN 0xBD PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"689:2429:40:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;516:14:46;;509:22;491:41;;479:2;464:18;542:165:14;;;;;;;;1116:257:3;;;;;;:::i;:::-;;:::i;:::-;;2120:996:40;;;;;;:::i;:::-;;:::i;1994:124:3:-;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;:::-;;;2449:42:46;2437:55;;;2419:74;;2407:2;2392:18;710:120:4;2273:226:46;2159:162:3;;;;;;:::i;:::-;;:::i;1667:217:40:-;;;;;;:::i;:::-;;:::i;1694:259:3:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;542:165:14:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;1116:257:3:-;719:10:38;1226:66:3;719:10:38;1226:33:3;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;2120:996:40:-;2315:2;2295:22;;2291:53;;2326:18;;;;;;;;;;;;;;2291:53;2699:33;;2580:4;2558:27;;2545:41;;2438:30;;;2521:4;2499:27;;;2486:41;;2355:7;;2679:64;;2699:33;;2710:2;;2714:7;;2723:8;;2699:33;;:::i;:::-;;;;;;;;;;;;;;2689:44;;2699:33;2689:44;;;;2679:64;;;;;;;;;6086:25:46;6159:4;6147:17;;6127:18;;;6120:45;6181:18;;;6174:34;;;6224:18;;;6217:34;;;6058:19;;2679:64:40;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2679:64:40;;;;;;-1:-1:-1;2753:17:40;;-1:-1:-1;2800:18:40;;;;:8;:18;:::i;:::-;2783:36;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;2773:47;;2783:36;2773:47;;;;2835:39;;;;;;7300:25:46;;;2835:20:40;7361:55:46;;;7341:18;;;7334:83;2773:47:40;;-1:-1:-1;2835:12:40;:20;;;;7273:18:46;;2835:39:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2831:279;;;2894:19;;:49;;;;;;;;7884:25:46;;;7925:18;;;7918:34;;;2894:19:40;;;;;:29;;7857:18:46;;2894:49:40;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2890:106;;;2970:11;;;;;;;;;;;;;;2890:106;3009:34;;;;;:11;:6;:11;;;;:34;;3021:2;;3025:7;;3034:8;;3009:34;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2831:279;;;3081:18;;;;;;;;;;;;;;2831:279;2251:865;;;;;2120:996;;;;;:::o;1994:124:3:-;2049:62;719:10:38;2106:4:3;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;782:41:4;775:48;;710:120;:::o;2159:162:3:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2774:13:12;2806;;;;;;;;;;;:22;;;;;;;;;;;;;;;2685:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;1667:217:40:-;1757:70;719:10:38;1757:33:40;:31;:33::i;:70::-;1837:19;:40;;;;;;;;;;;;;;;1667:217::o;1694:259:3:-;719:10:38;1805:66:3;719:10:38;1805:33:3;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;719:10:38;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;2449:42:46;2437:55;;4543:25:13;;;2419:74:46;2392:18;;4543:25:13;;;;;;;;4504:64;4413:162;;:::o;4381:174:12:-;4422:16;;702:67;768:1;710:54;702:67;:::i;1151:251::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1256:140;;1301:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1326:4;1301:29;;;1349:36;;8452:25:46;;;8554:18;;;8547:43;8626:15;;;8606:18;;;8599:43;;;;1349:36:12;;8440:2:46;8425:18;1349:36:12;;;;;;;;1256:140;1151:251;;;;:::o;2288:213::-;2377:30;:1;2394:4;2400:6;2377:16;:30::i;:::-;2441:5;2417:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2461:33;;8452:25:46;;;8554:18;;;8547:43;;;8606:18;;8599:43;;;;2461:33:12;;8440:2:46;8425:18;2461:33:12;;;;;;;2288:213;;;:::o;1780:252::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1886:140;;;1955:5;1930:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1979:36;;8452:25:46;;;8554:18;;;8547:43;8626:15;;;8606:18;;;8599:43;;;;1979:36:12;;8440:2:46;8425:18;1979:36:12;8250:398:46;3060:369:13;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2449:42:46;2437:55;;3243:24:13;;;2419:74:46;2392:18;;3243:24:13;2273:226:46;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3148:281;3060:369;;;:::o;3645:170:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;3742:66;;3780:28;;;;;;;;7300:25:46;;;7373:42;7361:55;;7341:18;;;7334:83;7273:18;;3780:28:12;7126:297:46;14:332;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;543:154;629:42;622:5;618:54;611:5;608:65;598:93;;687:1;684;677:12;702:315;770:6;778;831:2;819:9;810:7;806:23;802:32;799:52;;;847:1;844;837:12;799:52;883:9;870:23;860:33;;943:2;932:9;928:18;915:32;956:31;981:5;956:31;:::i;:::-;1006:5;996:15;;;702:315;;;;;:::o;1022:1061::-;1147:6;1155;1163;1171;1179;1232:3;1220:9;1211:7;1207:23;1203:33;1200:53;;;1249:1;1246;1239:12;1200:53;1288:9;1275:23;1307:31;1332:5;1307:31;:::i;:::-;1357:5;-1:-1:-1;1409:2:46;1394:18;;1381:32;;-1:-1:-1;1464:2:46;1449:18;;1436:32;1487:18;1517:14;;;1514:34;;;1544:1;1541;1534:12;1514:34;1567:22;;;;1623:3;1605:16;;;1601:26;1598:46;;;1640:1;1637;1630:12;1598:46;1663:2;;-1:-1:-1;1718:2:46;1703:18;;1690:32;;1734:16;;;1731:36;;;1763:1;1760;1753:12;1731:36;1801:8;1790:9;1786:24;1776:34;;1848:7;1841:4;1837:2;1833:13;1829:27;1819:55;;1870:1;1867;1860:12;1819:55;1910:2;1897:16;1936:2;1928:6;1925:14;1922:34;;;1952:1;1949;1942:12;1922:34;1997:7;1992:2;1983:6;1979:2;1975:15;1971:24;1968:37;1965:57;;;2018:1;2015;2008:12;1965:57;1022:1061;;;;-1:-1:-1;1022:1061:46;;-1:-1:-1;2049:2:46;2041:11;;2071:6;1022:1061;-1:-1:-1;;;1022:1061:46:o;2088:180::-;2147:6;2200:2;2188:9;2179:7;2175:23;2171:32;2168:52;;;2216:1;2213;2206:12;2168:52;-1:-1:-1;2239:23:46;;2088:180;-1:-1:-1;2088:180:46:o;2504:275::-;2591:6;2644:2;2632:9;2623:7;2619:23;2615:32;2612:52;;;2660:1;2657;2650:12;2612:52;2699:9;2686:23;2718:31;2743:5;2718:31;:::i;3036:159::-;3103:20;;3163:6;3152:18;;3142:29;;3132:57;;3185:1;3182;3175:12;3132:57;3036:159;;;:::o;3200:171::-;3267:20;;3327:18;3316:30;;3306:41;;3296:69;;3361:1;3358;3351:12;3483:560;3542:5;3549:6;3609:3;3596:17;3691:66;3680:8;3664:14;3660:29;3656:102;3636:18;3632:127;3622:155;;3773:1;3770;3763:12;3622:155;3801:33;;3905:4;3892:18;;;-1:-1:-1;3853:21:46;;-1:-1:-1;3933:18:46;3922:30;;3919:50;;;3965:1;3962;3955:12;3919:50;4012:6;3996:14;3992:27;3985:5;3981:39;3978:59;;;4033:1;4030;4023:12;3978:59;3483:560;;;;;:::o;4048:326::-;4137:6;4132:3;4125:19;4189:6;4182:5;4175:4;4170:3;4166:14;4153:43;;4241:1;4234:4;4225:6;4220:3;4216:16;4212:27;4205:38;4107:3;4363:4;4293:66;4288:2;4280:6;4276:15;4272:88;4267:3;4263:98;4259:109;4252:116;;4048:326;;;;:::o;4379:1475::-;4630:42;4622:6;4618:55;4607:9;4600:74;4710:6;4705:2;4694:9;4690:18;4683:34;4753:2;4748;4737:9;4733:18;4726:30;4581:4;4775:6;4848:2;4821:25;4839:6;4821:25;:::i;:::-;4817:34;4812:2;4801:9;4797:18;4790:62;4929:2;4893:34;4923:2;4915:6;4911:15;4893:34;:::i;:::-;4889:43;4883:3;4872:9;4868:19;4861:72;;5010:18;4974:34;5004:2;4996:6;4992:15;4974:34;:::i;:::-;4970:59;4964:3;4953:9;4949:19;4942:88;5059:34;5089:2;5081:6;5077:15;5059:34;:::i;:::-;3452:18;3441:30;5149:3;5134:19;;3429:43;5185:35;5215:3;5203:16;;5185:35;:::i;:::-;3452:18;3441:30;5278:4;5263:20;;3429:43;5329:57;5381:3;5369:16;;5373:6;5329:57;:::i;:::-;5423:4;5417:3;5406:9;5402:19;5395:33;5451:77;5523:3;5512:9;5508:19;5494:12;5478:14;5451:77;:::i;:::-;5437:91;;;5575:57;5627:3;5619:6;5615:16;5607:6;5575:57;:::i;:::-;5697:66;5685:9;5677:6;5673:22;5669:95;5663:3;5652:9;5648:19;5641:124;5782:66;5841:6;5825:14;5809;5782:66;:::i;:::-;5774:74;4379:1475;-1:-1:-1;;;;;;;;4379:1475:46:o;6262:581::-;6340:4;6346:6;6406:11;6393:25;6496:66;6485:8;6469:14;6465:29;6461:102;6441:18;6437:127;6427:155;;6578:1;6575;6568:12;6427:155;6605:33;;6657:20;;;-1:-1:-1;6700:18:46;6689:30;;6686:50;;;6732:1;6729;6722:12;6686:50;6765:4;6753:17;;-1:-1:-1;6796:14:46;6792:27;;;6782:38;;6779:58;;;6833:1;6830;6823:12;6848:273;7033:6;7025;7020:3;7007:33;6989:3;7059:16;;7084:13;;;7059:16;6848:273;-1:-1:-1;6848:273:46:o;7428:277::-;7495:6;7548:2;7536:9;7527:7;7523:23;7519:32;7516:52;;;7564:1;7561;7554:12;7516:52;7596:9;7590:16;7649:5;7642:13;7635:21;7628:5;7625:32;7615:60;;7671:1;7668;7661:12;7963:282;8030:9;;;8051:11;;;8048:191;;;8095:77;8092:1;8085:88;8196:4;8193:1;8186:15;8224:4;8221:1;8214:15"},"gasEstimates":{"creation":{"codeDepositCost":"868800","executionCost":"infinite","totalCost":"infinite"},"external":{"grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":"infinite","owner()":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","setRevocationRegistry(address)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)":"4d5b0423","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","setRevocationRegistry(address)":"95f94bc4","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"},{\"internalType\":\"contract OpenCampusCertificateNFTv1\",\"name\":\"nftv1\",\"type\":\"address\"},{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IssuerNotAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"VcRevoked\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"internalType\":\"struct CertificateNFTv1MetaData.MetaData\",\"name\":\"metadata\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"name\":\"setRevocationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string),bytes)\":{\"details\":\"Reverts with `VcRevoked` error if the token being minted has been revoked.signature is ECDSA signature for (to, tokenId, metadata).signature is a 65 bytes raw signature without compacting.\"},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"setRevocationRegistry(address)\":{\"params\":{\"revocationRegistry\":\"The address of the Revocation Registry contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the signature is invalid for the NFT payload.\"}],\"IssuerNotAllowed()\":[{\"notice\":\"Thrown when the issuer is not one of the allowed issuers.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"VcRevoked()\":[{\"notice\":\"Thrown when the VC has been revoked.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateNFTMinter.sol\":\"OpenCampusCertificateNFTMinter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTMinter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\nimport {OpenCampusCertificateNFTv1} from \\\"./OpenCampusCertificateNFTv1.sol\\\";\\n\\ncontract OpenCampusCertificateNFTMinter is AccessControl {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    OpenCampusCertificateNFTv1 internal immutable NFT_V1;\\n\\n    IRevocationRegistry internal _revocationRegistry;\\n    /// @notice Thrown when the signature is invalid for the NFT payload.\\n    error InvalidSignature();\\n\\n    /// @notice Thrown when the issuer is not one of the allowed issuers.\\n    error IssuerNotAllowed();\\n\\n    /// @notice Thrown when the VC has been revoked.\\n    error VcRevoked();\\n\\n    constructor(\\n        IIssuersDIDRegistry didRegistry,\\n        OpenCampusCertificateNFTv1 nftv1,\\n        IRevocationRegistry revocationRegistry\\n    ) ContractOwnership(msg.sender) {\\n        DID_REGISTRY = didRegistry;\\n        NFT_V1 = nftv1;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `VcRevoked` error if the token being minted has been revoked.\\n    /// @dev signature is ECDSA signature for (to, tokenId, metadata).\\n    /// @dev signature is a 65 bytes raw signature without compacting.\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata, bytes calldata signature) external {\\n        // recover the signer\\n        if (signature.length != 65) revert InvalidSignature();\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        assembly {\\n            r := calldataload(signature.offset)\\n            s := calldataload(add(signature.offset, 0x20))\\n            v := calldataload(add(signature.offset, 0x21))\\n        }\\n\\n        // Use the native ecrecover provided by the EVM\\n        address signer = ecrecover(keccak256(abi.encode(to, tokenId, metadata)), v, r, s);\\n        bytes32 hashedDid = keccak256(abi.encodePacked(metadata.issuerDid));\\n\\n        if (DID_REGISTRY.issuers(hashedDid, signer)) {\\n            if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n                revert VcRevoked();\\n            }\\n            NFT_V1.mint(to, tokenId, metadata);\\n        } else {\\n            revert IssuerNotAllowed();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd425982bb022b9273adf9c190bafdd5d8d284b6c9f14516e17d105028dd1ba5d\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTv1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {IERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\\\";\\nimport {Transfer} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ERC721Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\nimport {TransferAllowed, AllowedTransferRemoved} from \\\"./events/OpenCampusCertificateNFTv1Events.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    IRevocationRegistry internal _revocationRegistry;\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n    bytes32 public constant OPERATOR_ROLE = \\\"operator\\\";\\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\\n    mapping(uint256 => address) public allowedTransfers;\\n\\n    /// @notice Thrown when any transfer functions are called but not allowed.\\n    error TransferNotAllowed();\\n\\n    /// @notice Thrown when any operator related methods are called.\\n    error NoOperatorAllowed();\\n\\n    /// @notice Thrown when burn operation cannot be executed.\\n    error InvalidBurn();\\n\\n    /// @notice Thrown when allowed transfer is called with receipt same as owner.\\n    error RedundantAllowedTransfer(address recipient);\\n\\n    /// @notice Thrown when there is no allowed transfer for `tokenId`\\n    error NonExistingAllowedTransfer(uint256 tokenId);\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) ContractOwnership(msg.sender) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\\n        ERC721Storage.initERC721Mintable();\\n        DID_REGISTRY = didRegistry;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\\n\\n        ERC721Storage.layout().mint(to, tokenId);\\n        vcData[tokenId] = metadata;\\n    }\\n\\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\\n    /// @param tokenId The Token Id to be burnt.\\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\\n    function burn(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\\n\\n            unchecked {\\n                // cannot underflow as balance is verified through TOKEN ownership\\n                --ERC721Storage.layout().balances[owner];\\n            }\\n            emit Transfer(owner, address(0), tokenId);\\n        } else {\\n            revert InvalidBurn();\\n        }\\n    }\\n\\n    /// @notice Allow a one time transfer of `tokenId` to `recipient`.\\n    /// @dev emit a `TransferAllowed` event upon successful operation.\\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\\n    /// @dev Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.\\n    /// @param recipient The address to which transfer would be allowed.\\n    /// @param tokenId The tokenId to be allowed for transfer.\\n    function allowTransfer(address recipient, uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\\n        }\\n\\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\\n        if (owner == recipient) revert RedundantAllowedTransfer(recipient);\\n\\n        allowedTransfers[tokenId] = recipient;\\n        emit TransferAllowed(recipient, tokenId, msg.sender);\\n    }\\n\\n    /// @notice Remove the one time transfer that was allowed before for `tokenId`.\\n    /// @dev emit a `AllowedTransferRemoved` event upon successful operation.\\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\\n    /// @dev Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.\\n    /// @param tokenId The tokenId of which allowed transfer would be removed.\\n    function removeAllowedTransfer(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\\n        }\\n\\n        if (allowedTransfers[tokenId] == address(0)) revert NonExistingAllowedTransfer(tokenId);\\n        emit AllowedTransferRemoved(allowedTransfers[tokenId], tokenId, msg.sender);\\n        delete allowedTransfers[tokenId];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        revert NoOperatorAllowed();\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external virtual {\\n        revert TransferNotAllowed();\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external virtual {\\n        revert NoOperatorAllowed();\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\\n        if (owner != msg.sender) revert ERC721NonOwnedToken(msg.sender, tokenId);\\n        if (from != owner || allowedTransfers[tokenId] != to) revert ERC721NonApprovedForTransfer(from, owner, tokenId);\\n\\n        ERC721Storage.layout().owners[tokenId] = uint256(uint160(to));\\n        // already verified during approval that owner cannot be the same as to\\n        unchecked {\\n            // cannot underflow as balance is verified through ownership\\n            --ERC721Storage.layout().balances[owner];\\n            //  cannot overflow as supply cannot overflow\\n            ++ERC721Storage.layout().balances[to];\\n        }\\n\\n        delete allowedTransfers[tokenId];\\n        emit Transfer(owner, to, tokenId);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\\n        transferFrom(from, to, tokenId);\\n        if (to.isContract()) {\\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, \\\"\\\") != ERC721_RECEIVED)\\n                revert ERC721SafeTransferRejected(to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\\n        transferFrom(from, to, tokenId);\\n        if (to.isContract()) {\\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) != ERC721_RECEIVED)\\n                revert ERC721SafeTransferRejected(to, tokenId);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        revert NoOperatorAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x05ccd61c0eca08a80b1160b7a839c37e46edb7ed5fd438d444104bb7d5c89cac\",\"license\":\"MIT\"},\"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`.\\n/// @param recipient The address to which transfer was approved for.\\n/// @param tokenId The tokenId that was approved for transfer.\\n/// @param sender The account that approved the transfer.\\nevent TransferAllowed(address indexed recipient, uint256 indexed tokenId, address sender);\\n\\n/// @notice Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`.\\n/// @param recipient The address to which transfer was approved for.\\n/// @param tokenId The tokenId that was approved for transfer.\\n/// @param sender The account that approved the transfer.\\nevent AllowedTransferRemoved(address indexed recipient, uint256 indexed tokenId, address sender);\\n\\n\",\"keccak256\":\"0xff5220949ff5f6d724dcfbdb5335973ed82345bdcb83e449db1e91d8fa226fc2\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function currentNonce() external view returns (uint256 nonce);\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0xc8d0c75f88a0cc7324a0155ca47eddf4de4f093195df083f55382679098d2585\",\"license\":\"MIT\"},\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":3992,"contract":"contracts/vc/OpenCampusCertificateNFTMinter.sol:OpenCampusCertificateNFTMinter","label":"_revocationRegistry","offset":0,"slot":"0","type":"t_contract(IRevocationRegistry)4884"}],"types":{"t_contract(IRevocationRegistry)4884":{"encoding":"inplace","label":"contract IRevocationRegistry","numberOfBytes":"20"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidSignature()":[{"notice":"Thrown when the signature is invalid for the NFT payload."}],"IssuerNotAllowed()":[{"notice":"Thrown when the issuer is not one of the allowed issuers."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"VcRevoked()":[{"notice":"Thrown when the VC has been revoked."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/vc/OpenCampusCertificateNFTv1.sol":{"OpenCampusCertificateNFTv1":{"abi":[{"inputs":[{"internalType":"string","name":"tokenName","type":"string"},{"internalType":"string","name":"tokenSymbol","type":"string"},{"internalType":"contract ITokenMetadataResolver","name":"metadataResolver","type":"address"},{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"},{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"ERC721BalanceOfAddressZero","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721ExistingToken","type":"error"},{"inputs":[],"name":"ERC721MintToAddressZero","type":"error"},{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"owner","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonApprovedForTransfer","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonExistingToken","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721NonOwnedToken","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ERC721SafeTransferRejected","type":"error"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidBurn","type":"error"},{"inputs":[],"name":"NoOperatorAllowed","type":"error"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"NonExistingAllowedTransfer","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"}],"name":"RedundantAllowedTransfer","type":"error"},{"inputs":[],"name":"TransferNotAllowed","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"}],"name":"AllowedTransferRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"recipient","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"},{"indexed":false,"internalType":"address","name":"sender","type":"address"}],"name":"TransferAllowed","type":"event"},{"inputs":[],"name":"MINTER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"OPERATOR_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"recipient","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"allowTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"allowedTransfers","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"burn","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"metadataResolver","outputs":[{"internalType":"contract ITokenMetadataResolver","name":"tokenMetadataResolver","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"components":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"internalType":"struct CertificateNFTv1MetaData.MetaData","name":"metadata","type":"tuple"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"name","outputs":[{"internalType":"string","name":"tokenName","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"removeAllowedTransfer","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"contract IRevocationRegistry","name":"revocationRegistry","type":"address"}],"name":"setRevocationRegistry","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"symbol","outputs":[{"internalType":"string","name":"tokenSymbol","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"tokenURI","outputs":[{"internalType":"string","name":"uri","type":"string"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"","type":"uint256"}],"name":"vcData","outputs":[{"internalType":"uint16","name":"schemaVersion","type":"uint16"},{"internalType":"uint16","name":"achievementType","type":"uint16"},{"internalType":"uint64","name":"awardedDate","type":"uint64"},{"internalType":"uint64","name":"validFrom","type":"uint64"},{"internalType":"uint64","name":"validUtil","type":"uint64"},{"internalType":"string","name":"issuerDid","type":"string"},{"internalType":"string","name":"achievementId","type":"string"}],"stateMutability":"view","type":"function"}],"devdoc":{"errors":{"ERC721ExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that already exists."}}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"params":{"sender":"The message sender.","tokenId":"The identifier of the token."}}],"ERC721NonExistingToken(uint256)":[{"params":{"tokenId":"The identifier of the token that was checked."}}],"ERC721NonOwnedToken(address,uint256)":[{"params":{"account":"The account that was expected to own the token.","tokenId":"The identifier of the token."}}],"ERC721SafeTransferRejected(address,uint256)":[{"params":{"recipient":"The recipient contract.","tokenId":"The identifier of the token."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"AllowedTransferRemoved(address,uint256,address)":{"params":{"recipient":"The address to which transfer was approved for.","sender":"The account that approved the transfer.","tokenId":"The tokenId that was approved for transfer."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}},"TransferAllowed(address,uint256,address)":{"params":{"recipient":"The address to which transfer was approved for.","sender":"The account that approved the transfer.","tokenId":"The tokenId that was approved for transfer."}}},"kind":"dev","methods":{"allowTransfer(address,uint256)":{"details":"emit a `TransferAllowed` event upon successful operation.Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.","params":{"recipient":"The address to which transfer would be allowed.","tokenId":"The tokenId to be allowed for transfer."}},"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"burn(uint256)":{"details":"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.","params":{"tokenId":"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"metadataResolver()":{"returns":{"tokenMetadataResolver":"The token metadata resolver address."}},"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":{"details":"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role."},"name()":{"returns":{"tokenName":"The name of the token."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"removeAllowedTransfer(uint256)":{"details":"emit a `AllowedTransferRemoved` event upon successful operation.Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.","params":{"tokenId":"The tokenId of which allowed transfer would be removed."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"safeTransferFrom(address,address,uint256)":{"details":"Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"setRevocationRegistry(address)":{"params":{"revocationRegistry":"The address of the Revocation Registry contract."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"symbol()":{"returns":{"tokenSymbol":"The symbol of the token."}},"tokenURI(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier."},"returns":{"uri":"The metadata URI for the token identifier."}},"transferFrom(address,address,uint256)":{"details":"Note: This function implements {ERC721-transferFrom(address,address,uint256)}.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Emits a {Transfer} event.","params":{"from":"The The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1100":{"entryPoint":null,"id":1100,"parameterSlots":3,"returnSlots":0},"@_4285":{"entryPoint":null,"id":4285,"parameterSlots":5,"returnSlots":0},"@_54":{"entryPoint":null,"id":54,"parameterSlots":1,"returnSlots":0},"@constructorInit_3385":{"entryPoint":236,"id":3385,"parameterSlots":4,"returnSlots":0},"@constructorInit_695":{"entryPoint":389,"id":695,"parameterSlots":2,"returnSlots":0},"@initERC721Metadata_1639":{"entryPoint":307,"id":1639,"parameterSlots":0,"returnSlots":0},"@initERC721Mintable_1656":{"entryPoint":504,"id":1656,"parameterSlots":0,"returnSlots":0},"@layout_3498":{"entryPoint":182,"id":3498,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":341,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":523,"id":999,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_953":{"entryPoint":571,"id":953,"parameterSlots":3,"returnSlots":0},"abi_decode_string_fromMemory":{"entryPoint":686,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_ITokenMetadataResolver_$3312t_contract$_IRevocationRegistry_$4884t_contract$_IIssuersDIDRegistry_$4844_fromMemory":{"entryPoint":889,"id":null,"parameterSlots":2,"returnSlots":5},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":1061,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":1155,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage":{"entryPoint":1240,"id":null,"parameterSlots":2,"returnSlots":0},"extract_byte_array_length":{"entryPoint":1095,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":664,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_contract_ITokenMetadataResolver":{"entryPoint":864,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:5086:46","nodeType":"YulBlock","src":"0:5086:46","statements":[{"nativeSrc":"6:3:46","nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nativeSrc":"46:95:46","nodeType":"YulBlock","src":"46:95:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"63:1:46","nodeType":"YulLiteral","src":"63:1:46","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"70:3:46","nodeType":"YulLiteral","src":"70:3:46","type":"","value":"224"},{"kind":"number","nativeSrc":"75:10:46","nodeType":"YulLiteral","src":"75:10:46","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"66:3:46","nodeType":"YulIdentifier","src":"66:3:46"},"nativeSrc":"66:20:46","nodeType":"YulFunctionCall","src":"66:20:46"}],"functionName":{"name":"mstore","nativeSrc":"56:6:46","nodeType":"YulIdentifier","src":"56:6:46"},"nativeSrc":"56:31:46","nodeType":"YulFunctionCall","src":"56:31:46"},"nativeSrc":"56:31:46","nodeType":"YulExpressionStatement","src":"56:31:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"103:1:46","nodeType":"YulLiteral","src":"103:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"106:4:46","nodeType":"YulLiteral","src":"106:4:46","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"96:6:46","nodeType":"YulIdentifier","src":"96:6:46"},"nativeSrc":"96:15:46","nodeType":"YulFunctionCall","src":"96:15:46"},"nativeSrc":"96:15:46","nodeType":"YulExpressionStatement","src":"96:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"127:1:46","nodeType":"YulLiteral","src":"127:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"130:4:46","nodeType":"YulLiteral","src":"130:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"120:6:46","nodeType":"YulIdentifier","src":"120:6:46"},"nativeSrc":"120:15:46","nodeType":"YulFunctionCall","src":"120:15:46"},"nativeSrc":"120:15:46","nodeType":"YulExpressionStatement","src":"120:15:46"}]},"name":"panic_error_0x41","nativeSrc":"14:127:46","nodeType":"YulFunctionDefinition","src":"14:127:46"},{"body":{"nativeSrc":"210:780:46","nodeType":"YulBlock","src":"210:780:46","statements":[{"body":{"nativeSrc":"259:16:46","nodeType":"YulBlock","src":"259:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"268:1:46","nodeType":"YulLiteral","src":"268:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"271:1:46","nodeType":"YulLiteral","src":"271:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"261:6:46","nodeType":"YulIdentifier","src":"261:6:46"},"nativeSrc":"261:12:46","nodeType":"YulFunctionCall","src":"261:12:46"},"nativeSrc":"261:12:46","nodeType":"YulExpressionStatement","src":"261:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"238:6:46","nodeType":"YulIdentifier","src":"238:6:46"},{"kind":"number","nativeSrc":"246:4:46","nodeType":"YulLiteral","src":"246:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"234:3:46","nodeType":"YulIdentifier","src":"234:3:46"},"nativeSrc":"234:17:46","nodeType":"YulFunctionCall","src":"234:17:46"},{"name":"end","nativeSrc":"253:3:46","nodeType":"YulIdentifier","src":"253:3:46"}],"functionName":{"name":"slt","nativeSrc":"230:3:46","nodeType":"YulIdentifier","src":"230:3:46"},"nativeSrc":"230:27:46","nodeType":"YulFunctionCall","src":"230:27:46"}],"functionName":{"name":"iszero","nativeSrc":"223:6:46","nodeType":"YulIdentifier","src":"223:6:46"},"nativeSrc":"223:35:46","nodeType":"YulFunctionCall","src":"223:35:46"},"nativeSrc":"220:55:46","nodeType":"YulIf","src":"220:55:46"},{"nativeSrc":"284:23:46","nodeType":"YulVariableDeclaration","src":"284:23:46","value":{"arguments":[{"name":"offset","nativeSrc":"300:6:46","nodeType":"YulIdentifier","src":"300:6:46"}],"functionName":{"name":"mload","nativeSrc":"294:5:46","nodeType":"YulIdentifier","src":"294:5:46"},"nativeSrc":"294:13:46","nodeType":"YulFunctionCall","src":"294:13:46"},"variables":[{"name":"_1","nativeSrc":"288:2:46","nodeType":"YulTypedName","src":"288:2:46","type":""}]},{"nativeSrc":"316:28:46","nodeType":"YulVariableDeclaration","src":"316:28:46","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"334:2:46","nodeType":"YulLiteral","src":"334:2:46","type":"","value":"64"},{"kind":"number","nativeSrc":"338:1:46","nodeType":"YulLiteral","src":"338:1:46","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"330:3:46","nodeType":"YulIdentifier","src":"330:3:46"},"nativeSrc":"330:10:46","nodeType":"YulFunctionCall","src":"330:10:46"},{"kind":"number","nativeSrc":"342:1:46","nodeType":"YulLiteral","src":"342:1:46","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"326:3:46","nodeType":"YulIdentifier","src":"326:3:46"},"nativeSrc":"326:18:46","nodeType":"YulFunctionCall","src":"326:18:46"},"variables":[{"name":"_2","nativeSrc":"320:2:46","nodeType":"YulTypedName","src":"320:2:46","type":""}]},{"body":{"nativeSrc":"367:22:46","nodeType":"YulBlock","src":"367:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"369:16:46","nodeType":"YulIdentifier","src":"369:16:46"},"nativeSrc":"369:18:46","nodeType":"YulFunctionCall","src":"369:18:46"},"nativeSrc":"369:18:46","nodeType":"YulExpressionStatement","src":"369:18:46"}]},"condition":{"arguments":[{"name":"_1","nativeSrc":"359:2:46","nodeType":"YulIdentifier","src":"359:2:46"},{"name":"_2","nativeSrc":"363:2:46","nodeType":"YulIdentifier","src":"363:2:46"}],"functionName":{"name":"gt","nativeSrc":"356:2:46","nodeType":"YulIdentifier","src":"356:2:46"},"nativeSrc":"356:10:46","nodeType":"YulFunctionCall","src":"356:10:46"},"nativeSrc":"353:36:46","nodeType":"YulIf","src":"353:36:46"},{"nativeSrc":"398:17:46","nodeType":"YulVariableDeclaration","src":"398:17:46","value":{"arguments":[{"kind":"number","nativeSrc":"412:2:46","nodeType":"YulLiteral","src":"412:2:46","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"408:3:46","nodeType":"YulIdentifier","src":"408:3:46"},"nativeSrc":"408:7:46","nodeType":"YulFunctionCall","src":"408:7:46"},"variables":[{"name":"_3","nativeSrc":"402:2:46","nodeType":"YulTypedName","src":"402:2:46","type":""}]},{"nativeSrc":"424:23:46","nodeType":"YulVariableDeclaration","src":"424:23:46","value":{"arguments":[{"kind":"number","nativeSrc":"444:2:46","nodeType":"YulLiteral","src":"444:2:46","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"438:5:46","nodeType":"YulIdentifier","src":"438:5:46"},"nativeSrc":"438:9:46","nodeType":"YulFunctionCall","src":"438:9:46"},"variables":[{"name":"memPtr","nativeSrc":"428:6:46","nodeType":"YulTypedName","src":"428:6:46","type":""}]},{"nativeSrc":"456:71:46","nodeType":"YulVariableDeclaration","src":"456:71:46","value":{"arguments":[{"name":"memPtr","nativeSrc":"478:6:46","nodeType":"YulIdentifier","src":"478:6:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"502:2:46","nodeType":"YulIdentifier","src":"502:2:46"},{"kind":"number","nativeSrc":"506:4:46","nodeType":"YulLiteral","src":"506:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"498:3:46","nodeType":"YulIdentifier","src":"498:3:46"},"nativeSrc":"498:13:46","nodeType":"YulFunctionCall","src":"498:13:46"},{"name":"_3","nativeSrc":"513:2:46","nodeType":"YulIdentifier","src":"513:2:46"}],"functionName":{"name":"and","nativeSrc":"494:3:46","nodeType":"YulIdentifier","src":"494:3:46"},"nativeSrc":"494:22:46","nodeType":"YulFunctionCall","src":"494:22:46"},{"kind":"number","nativeSrc":"518:2:46","nodeType":"YulLiteral","src":"518:2:46","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"490:3:46","nodeType":"YulIdentifier","src":"490:3:46"},"nativeSrc":"490:31:46","nodeType":"YulFunctionCall","src":"490:31:46"},{"name":"_3","nativeSrc":"523:2:46","nodeType":"YulIdentifier","src":"523:2:46"}],"functionName":{"name":"and","nativeSrc":"486:3:46","nodeType":"YulIdentifier","src":"486:3:46"},"nativeSrc":"486:40:46","nodeType":"YulFunctionCall","src":"486:40:46"}],"functionName":{"name":"add","nativeSrc":"474:3:46","nodeType":"YulIdentifier","src":"474:3:46"},"nativeSrc":"474:53:46","nodeType":"YulFunctionCall","src":"474:53:46"},"variables":[{"name":"newFreePtr","nativeSrc":"460:10:46","nodeType":"YulTypedName","src":"460:10:46","type":""}]},{"body":{"nativeSrc":"586:22:46","nodeType":"YulBlock","src":"586:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"588:16:46","nodeType":"YulIdentifier","src":"588:16:46"},"nativeSrc":"588:18:46","nodeType":"YulFunctionCall","src":"588:18:46"},"nativeSrc":"588:18:46","nodeType":"YulExpressionStatement","src":"588:18:46"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"545:10:46","nodeType":"YulIdentifier","src":"545:10:46"},{"name":"_2","nativeSrc":"557:2:46","nodeType":"YulIdentifier","src":"557:2:46"}],"functionName":{"name":"gt","nativeSrc":"542:2:46","nodeType":"YulIdentifier","src":"542:2:46"},"nativeSrc":"542:18:46","nodeType":"YulFunctionCall","src":"542:18:46"},{"arguments":[{"name":"newFreePtr","nativeSrc":"565:10:46","nodeType":"YulIdentifier","src":"565:10:46"},{"name":"memPtr","nativeSrc":"577:6:46","nodeType":"YulIdentifier","src":"577:6:46"}],"functionName":{"name":"lt","nativeSrc":"562:2:46","nodeType":"YulIdentifier","src":"562:2:46"},"nativeSrc":"562:22:46","nodeType":"YulFunctionCall","src":"562:22:46"}],"functionName":{"name":"or","nativeSrc":"539:2:46","nodeType":"YulIdentifier","src":"539:2:46"},"nativeSrc":"539:46:46","nodeType":"YulFunctionCall","src":"539:46:46"},"nativeSrc":"536:72:46","nodeType":"YulIf","src":"536:72:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"624:2:46","nodeType":"YulLiteral","src":"624:2:46","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"628:10:46","nodeType":"YulIdentifier","src":"628:10:46"}],"functionName":{"name":"mstore","nativeSrc":"617:6:46","nodeType":"YulIdentifier","src":"617:6:46"},"nativeSrc":"617:22:46","nodeType":"YulFunctionCall","src":"617:22:46"},"nativeSrc":"617:22:46","nodeType":"YulExpressionStatement","src":"617:22:46"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"655:6:46","nodeType":"YulIdentifier","src":"655:6:46"},{"name":"_1","nativeSrc":"663:2:46","nodeType":"YulIdentifier","src":"663:2:46"}],"functionName":{"name":"mstore","nativeSrc":"648:6:46","nodeType":"YulIdentifier","src":"648:6:46"},"nativeSrc":"648:18:46","nodeType":"YulFunctionCall","src":"648:18:46"},"nativeSrc":"648:18:46","nodeType":"YulExpressionStatement","src":"648:18:46"},{"nativeSrc":"675:14:46","nodeType":"YulVariableDeclaration","src":"675:14:46","value":{"kind":"number","nativeSrc":"685:4:46","nodeType":"YulLiteral","src":"685:4:46","type":"","value":"0x20"},"variables":[{"name":"_4","nativeSrc":"679:2:46","nodeType":"YulTypedName","src":"679:2:46","type":""}]},{"body":{"nativeSrc":"737:16:46","nodeType":"YulBlock","src":"737:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"746:1:46","nodeType":"YulLiteral","src":"746:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"749:1:46","nodeType":"YulLiteral","src":"749:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"739:6:46","nodeType":"YulIdentifier","src":"739:6:46"},"nativeSrc":"739:12:46","nodeType":"YulFunctionCall","src":"739:12:46"},"nativeSrc":"739:12:46","nodeType":"YulExpressionStatement","src":"739:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"712:6:46","nodeType":"YulIdentifier","src":"712:6:46"},{"name":"_1","nativeSrc":"720:2:46","nodeType":"YulIdentifier","src":"720:2:46"}],"functionName":{"name":"add","nativeSrc":"708:3:46","nodeType":"YulIdentifier","src":"708:3:46"},"nativeSrc":"708:15:46","nodeType":"YulFunctionCall","src":"708:15:46"},{"kind":"number","nativeSrc":"725:4:46","nodeType":"YulLiteral","src":"725:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"704:3:46","nodeType":"YulIdentifier","src":"704:3:46"},"nativeSrc":"704:26:46","nodeType":"YulFunctionCall","src":"704:26:46"},{"name":"end","nativeSrc":"732:3:46","nodeType":"YulIdentifier","src":"732:3:46"}],"functionName":{"name":"gt","nativeSrc":"701:2:46","nodeType":"YulIdentifier","src":"701:2:46"},"nativeSrc":"701:35:46","nodeType":"YulFunctionCall","src":"701:35:46"},"nativeSrc":"698:55:46","nodeType":"YulIf","src":"698:55:46"},{"nativeSrc":"762:10:46","nodeType":"YulVariableDeclaration","src":"762:10:46","value":{"kind":"number","nativeSrc":"771:1:46","nodeType":"YulLiteral","src":"771:1:46","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"766:1:46","nodeType":"YulTypedName","src":"766:1:46","type":""}]},{"body":{"nativeSrc":"827:87:46","nodeType":"YulBlock","src":"827:87:46","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"856:6:46","nodeType":"YulIdentifier","src":"856:6:46"},{"name":"i","nativeSrc":"864:1:46","nodeType":"YulIdentifier","src":"864:1:46"}],"functionName":{"name":"add","nativeSrc":"852:3:46","nodeType":"YulIdentifier","src":"852:3:46"},"nativeSrc":"852:14:46","nodeType":"YulFunctionCall","src":"852:14:46"},{"name":"_4","nativeSrc":"868:2:46","nodeType":"YulIdentifier","src":"868:2:46"}],"functionName":{"name":"add","nativeSrc":"848:3:46","nodeType":"YulIdentifier","src":"848:3:46"},"nativeSrc":"848:23:46","nodeType":"YulFunctionCall","src":"848:23:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"887:6:46","nodeType":"YulIdentifier","src":"887:6:46"},{"name":"i","nativeSrc":"895:1:46","nodeType":"YulIdentifier","src":"895:1:46"}],"functionName":{"name":"add","nativeSrc":"883:3:46","nodeType":"YulIdentifier","src":"883:3:46"},"nativeSrc":"883:14:46","nodeType":"YulFunctionCall","src":"883:14:46"},{"name":"_4","nativeSrc":"899:2:46","nodeType":"YulIdentifier","src":"899:2:46"}],"functionName":{"name":"add","nativeSrc":"879:3:46","nodeType":"YulIdentifier","src":"879:3:46"},"nativeSrc":"879:23:46","nodeType":"YulFunctionCall","src":"879:23:46"}],"functionName":{"name":"mload","nativeSrc":"873:5:46","nodeType":"YulIdentifier","src":"873:5:46"},"nativeSrc":"873:30:46","nodeType":"YulFunctionCall","src":"873:30:46"}],"functionName":{"name":"mstore","nativeSrc":"841:6:46","nodeType":"YulIdentifier","src":"841:6:46"},"nativeSrc":"841:63:46","nodeType":"YulFunctionCall","src":"841:63:46"},"nativeSrc":"841:63:46","nodeType":"YulExpressionStatement","src":"841:63:46"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"792:1:46","nodeType":"YulIdentifier","src":"792:1:46"},{"name":"_1","nativeSrc":"795:2:46","nodeType":"YulIdentifier","src":"795:2:46"}],"functionName":{"name":"lt","nativeSrc":"789:2:46","nodeType":"YulIdentifier","src":"789:2:46"},"nativeSrc":"789:9:46","nodeType":"YulFunctionCall","src":"789:9:46"},"nativeSrc":"781:133:46","nodeType":"YulForLoop","post":{"nativeSrc":"799:19:46","nodeType":"YulBlock","src":"799:19:46","statements":[{"nativeSrc":"801:15:46","nodeType":"YulAssignment","src":"801:15:46","value":{"arguments":[{"name":"i","nativeSrc":"810:1:46","nodeType":"YulIdentifier","src":"810:1:46"},{"name":"_4","nativeSrc":"813:2:46","nodeType":"YulIdentifier","src":"813:2:46"}],"functionName":{"name":"add","nativeSrc":"806:3:46","nodeType":"YulIdentifier","src":"806:3:46"},"nativeSrc":"806:10:46","nodeType":"YulFunctionCall","src":"806:10:46"},"variableNames":[{"name":"i","nativeSrc":"801:1:46","nodeType":"YulIdentifier","src":"801:1:46"}]}]},"pre":{"nativeSrc":"785:3:46","nodeType":"YulBlock","src":"785:3:46","statements":[]},"src":"781:133:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"memPtr","nativeSrc":"938:6:46","nodeType":"YulIdentifier","src":"938:6:46"},{"name":"_1","nativeSrc":"946:2:46","nodeType":"YulIdentifier","src":"946:2:46"}],"functionName":{"name":"add","nativeSrc":"934:3:46","nodeType":"YulIdentifier","src":"934:3:46"},"nativeSrc":"934:15:46","nodeType":"YulFunctionCall","src":"934:15:46"},{"kind":"number","nativeSrc":"951:4:46","nodeType":"YulLiteral","src":"951:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"930:3:46","nodeType":"YulIdentifier","src":"930:3:46"},"nativeSrc":"930:26:46","nodeType":"YulFunctionCall","src":"930:26:46"},{"kind":"number","nativeSrc":"958:1:46","nodeType":"YulLiteral","src":"958:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"923:6:46","nodeType":"YulIdentifier","src":"923:6:46"},"nativeSrc":"923:37:46","nodeType":"YulFunctionCall","src":"923:37:46"},"nativeSrc":"923:37:46","nodeType":"YulExpressionStatement","src":"923:37:46"},{"nativeSrc":"969:15:46","nodeType":"YulAssignment","src":"969:15:46","value":{"name":"memPtr","nativeSrc":"978:6:46","nodeType":"YulIdentifier","src":"978:6:46"},"variableNames":[{"name":"array","nativeSrc":"969:5:46","nodeType":"YulIdentifier","src":"969:5:46"}]}]},"name":"abi_decode_string_fromMemory","nativeSrc":"146:844:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"184:6:46","nodeType":"YulTypedName","src":"184:6:46","type":""},{"name":"end","nativeSrc":"192:3:46","nodeType":"YulTypedName","src":"192:3:46","type":""}],"returnVariables":[{"name":"array","nativeSrc":"200:5:46","nodeType":"YulTypedName","src":"200:5:46","type":""}],"src":"146:844:46"},{"body":{"nativeSrc":"1064:86:46","nodeType":"YulBlock","src":"1064:86:46","statements":[{"body":{"nativeSrc":"1128:16:46","nodeType":"YulBlock","src":"1128:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1137:1:46","nodeType":"YulLiteral","src":"1137:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1140:1:46","nodeType":"YulLiteral","src":"1140:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1130:6:46","nodeType":"YulIdentifier","src":"1130:6:46"},"nativeSrc":"1130:12:46","nodeType":"YulFunctionCall","src":"1130:12:46"},"nativeSrc":"1130:12:46","nodeType":"YulExpressionStatement","src":"1130:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1087:5:46","nodeType":"YulIdentifier","src":"1087:5:46"},{"arguments":[{"name":"value","nativeSrc":"1098:5:46","nodeType":"YulIdentifier","src":"1098:5:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1113:3:46","nodeType":"YulLiteral","src":"1113:3:46","type":"","value":"160"},{"kind":"number","nativeSrc":"1118:1:46","nodeType":"YulLiteral","src":"1118:1:46","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1109:3:46","nodeType":"YulIdentifier","src":"1109:3:46"},"nativeSrc":"1109:11:46","nodeType":"YulFunctionCall","src":"1109:11:46"},{"kind":"number","nativeSrc":"1122:1:46","nodeType":"YulLiteral","src":"1122:1:46","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1105:3:46","nodeType":"YulIdentifier","src":"1105:3:46"},"nativeSrc":"1105:19:46","nodeType":"YulFunctionCall","src":"1105:19:46"}],"functionName":{"name":"and","nativeSrc":"1094:3:46","nodeType":"YulIdentifier","src":"1094:3:46"},"nativeSrc":"1094:31:46","nodeType":"YulFunctionCall","src":"1094:31:46"}],"functionName":{"name":"eq","nativeSrc":"1084:2:46","nodeType":"YulIdentifier","src":"1084:2:46"},"nativeSrc":"1084:42:46","nodeType":"YulFunctionCall","src":"1084:42:46"}],"functionName":{"name":"iszero","nativeSrc":"1077:6:46","nodeType":"YulIdentifier","src":"1077:6:46"},"nativeSrc":"1077:50:46","nodeType":"YulFunctionCall","src":"1077:50:46"},"nativeSrc":"1074:70:46","nodeType":"YulIf","src":"1074:70:46"}]},"name":"validator_revert_contract_ITokenMetadataResolver","nativeSrc":"995:155:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1053:5:46","nodeType":"YulTypedName","src":"1053:5:46","type":""}],"src":"995:155:46"},{"body":{"nativeSrc":"1411:863:46","nodeType":"YulBlock","src":"1411:863:46","statements":[{"body":{"nativeSrc":"1458:16:46","nodeType":"YulBlock","src":"1458:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1467:1:46","nodeType":"YulLiteral","src":"1467:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1470:1:46","nodeType":"YulLiteral","src":"1470:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1460:6:46","nodeType":"YulIdentifier","src":"1460:6:46"},"nativeSrc":"1460:12:46","nodeType":"YulFunctionCall","src":"1460:12:46"},"nativeSrc":"1460:12:46","nodeType":"YulExpressionStatement","src":"1460:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1432:7:46","nodeType":"YulIdentifier","src":"1432:7:46"},{"name":"headStart","nativeSrc":"1441:9:46","nodeType":"YulIdentifier","src":"1441:9:46"}],"functionName":{"name":"sub","nativeSrc":"1428:3:46","nodeType":"YulIdentifier","src":"1428:3:46"},"nativeSrc":"1428:23:46","nodeType":"YulFunctionCall","src":"1428:23:46"},{"kind":"number","nativeSrc":"1453:3:46","nodeType":"YulLiteral","src":"1453:3:46","type":"","value":"160"}],"functionName":{"name":"slt","nativeSrc":"1424:3:46","nodeType":"YulIdentifier","src":"1424:3:46"},"nativeSrc":"1424:33:46","nodeType":"YulFunctionCall","src":"1424:33:46"},"nativeSrc":"1421:53:46","nodeType":"YulIf","src":"1421:53:46"},{"nativeSrc":"1483:30:46","nodeType":"YulVariableDeclaration","src":"1483:30:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1503:9:46","nodeType":"YulIdentifier","src":"1503:9:46"}],"functionName":{"name":"mload","nativeSrc":"1497:5:46","nodeType":"YulIdentifier","src":"1497:5:46"},"nativeSrc":"1497:16:46","nodeType":"YulFunctionCall","src":"1497:16:46"},"variables":[{"name":"offset","nativeSrc":"1487:6:46","nodeType":"YulTypedName","src":"1487:6:46","type":""}]},{"nativeSrc":"1522:28:46","nodeType":"YulVariableDeclaration","src":"1522:28:46","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1540:2:46","nodeType":"YulLiteral","src":"1540:2:46","type":"","value":"64"},{"kind":"number","nativeSrc":"1544:1:46","nodeType":"YulLiteral","src":"1544:1:46","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1536:3:46","nodeType":"YulIdentifier","src":"1536:3:46"},"nativeSrc":"1536:10:46","nodeType":"YulFunctionCall","src":"1536:10:46"},{"kind":"number","nativeSrc":"1548:1:46","nodeType":"YulLiteral","src":"1548:1:46","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1532:3:46","nodeType":"YulIdentifier","src":"1532:3:46"},"nativeSrc":"1532:18:46","nodeType":"YulFunctionCall","src":"1532:18:46"},"variables":[{"name":"_1","nativeSrc":"1526:2:46","nodeType":"YulTypedName","src":"1526:2:46","type":""}]},{"body":{"nativeSrc":"1577:16:46","nodeType":"YulBlock","src":"1577:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1586:1:46","nodeType":"YulLiteral","src":"1586:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1589:1:46","nodeType":"YulLiteral","src":"1589:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1579:6:46","nodeType":"YulIdentifier","src":"1579:6:46"},"nativeSrc":"1579:12:46","nodeType":"YulFunctionCall","src":"1579:12:46"},"nativeSrc":"1579:12:46","nodeType":"YulExpressionStatement","src":"1579:12:46"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1565:6:46","nodeType":"YulIdentifier","src":"1565:6:46"},{"name":"_1","nativeSrc":"1573:2:46","nodeType":"YulIdentifier","src":"1573:2:46"}],"functionName":{"name":"gt","nativeSrc":"1562:2:46","nodeType":"YulIdentifier","src":"1562:2:46"},"nativeSrc":"1562:14:46","nodeType":"YulFunctionCall","src":"1562:14:46"},"nativeSrc":"1559:34:46","nodeType":"YulIf","src":"1559:34:46"},{"nativeSrc":"1602:71:46","nodeType":"YulAssignment","src":"1602:71:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1645:9:46","nodeType":"YulIdentifier","src":"1645:9:46"},{"name":"offset","nativeSrc":"1656:6:46","nodeType":"YulIdentifier","src":"1656:6:46"}],"functionName":{"name":"add","nativeSrc":"1641:3:46","nodeType":"YulIdentifier","src":"1641:3:46"},"nativeSrc":"1641:22:46","nodeType":"YulFunctionCall","src":"1641:22:46"},{"name":"dataEnd","nativeSrc":"1665:7:46","nodeType":"YulIdentifier","src":"1665:7:46"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1612:28:46","nodeType":"YulIdentifier","src":"1612:28:46"},"nativeSrc":"1612:61:46","nodeType":"YulFunctionCall","src":"1612:61:46"},"variableNames":[{"name":"value0","nativeSrc":"1602:6:46","nodeType":"YulIdentifier","src":"1602:6:46"}]},{"nativeSrc":"1682:41:46","nodeType":"YulVariableDeclaration","src":"1682:41:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1708:9:46","nodeType":"YulIdentifier","src":"1708:9:46"},{"kind":"number","nativeSrc":"1719:2:46","nodeType":"YulLiteral","src":"1719:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1704:3:46","nodeType":"YulIdentifier","src":"1704:3:46"},"nativeSrc":"1704:18:46","nodeType":"YulFunctionCall","src":"1704:18:46"}],"functionName":{"name":"mload","nativeSrc":"1698:5:46","nodeType":"YulIdentifier","src":"1698:5:46"},"nativeSrc":"1698:25:46","nodeType":"YulFunctionCall","src":"1698:25:46"},"variables":[{"name":"offset_1","nativeSrc":"1686:8:46","nodeType":"YulTypedName","src":"1686:8:46","type":""}]},{"body":{"nativeSrc":"1752:16:46","nodeType":"YulBlock","src":"1752:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1761:1:46","nodeType":"YulLiteral","src":"1761:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1764:1:46","nodeType":"YulLiteral","src":"1764:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1754:6:46","nodeType":"YulIdentifier","src":"1754:6:46"},"nativeSrc":"1754:12:46","nodeType":"YulFunctionCall","src":"1754:12:46"},"nativeSrc":"1754:12:46","nodeType":"YulExpressionStatement","src":"1754:12:46"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"1738:8:46","nodeType":"YulIdentifier","src":"1738:8:46"},{"name":"_1","nativeSrc":"1748:2:46","nodeType":"YulIdentifier","src":"1748:2:46"}],"functionName":{"name":"gt","nativeSrc":"1735:2:46","nodeType":"YulIdentifier","src":"1735:2:46"},"nativeSrc":"1735:16:46","nodeType":"YulFunctionCall","src":"1735:16:46"},"nativeSrc":"1732:36:46","nodeType":"YulIf","src":"1732:36:46"},{"nativeSrc":"1777:73:46","nodeType":"YulAssignment","src":"1777:73:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1820:9:46","nodeType":"YulIdentifier","src":"1820:9:46"},{"name":"offset_1","nativeSrc":"1831:8:46","nodeType":"YulIdentifier","src":"1831:8:46"}],"functionName":{"name":"add","nativeSrc":"1816:3:46","nodeType":"YulIdentifier","src":"1816:3:46"},"nativeSrc":"1816:24:46","nodeType":"YulFunctionCall","src":"1816:24:46"},{"name":"dataEnd","nativeSrc":"1842:7:46","nodeType":"YulIdentifier","src":"1842:7:46"}],"functionName":{"name":"abi_decode_string_fromMemory","nativeSrc":"1787:28:46","nodeType":"YulIdentifier","src":"1787:28:46"},"nativeSrc":"1787:63:46","nodeType":"YulFunctionCall","src":"1787:63:46"},"variableNames":[{"name":"value1","nativeSrc":"1777:6:46","nodeType":"YulIdentifier","src":"1777:6:46"}]},{"nativeSrc":"1859:38:46","nodeType":"YulVariableDeclaration","src":"1859:38:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1882:9:46","nodeType":"YulIdentifier","src":"1882:9:46"},{"kind":"number","nativeSrc":"1893:2:46","nodeType":"YulLiteral","src":"1893:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1878:3:46","nodeType":"YulIdentifier","src":"1878:3:46"},"nativeSrc":"1878:18:46","nodeType":"YulFunctionCall","src":"1878:18:46"}],"functionName":{"name":"mload","nativeSrc":"1872:5:46","nodeType":"YulIdentifier","src":"1872:5:46"},"nativeSrc":"1872:25:46","nodeType":"YulFunctionCall","src":"1872:25:46"},"variables":[{"name":"value","nativeSrc":"1863:5:46","nodeType":"YulTypedName","src":"1863:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1955:5:46","nodeType":"YulIdentifier","src":"1955:5:46"}],"functionName":{"name":"validator_revert_contract_ITokenMetadataResolver","nativeSrc":"1906:48:46","nodeType":"YulIdentifier","src":"1906:48:46"},"nativeSrc":"1906:55:46","nodeType":"YulFunctionCall","src":"1906:55:46"},"nativeSrc":"1906:55:46","nodeType":"YulExpressionStatement","src":"1906:55:46"},{"nativeSrc":"1970:15:46","nodeType":"YulAssignment","src":"1970:15:46","value":{"name":"value","nativeSrc":"1980:5:46","nodeType":"YulIdentifier","src":"1980:5:46"},"variableNames":[{"name":"value2","nativeSrc":"1970:6:46","nodeType":"YulIdentifier","src":"1970:6:46"}]},{"nativeSrc":"1994:40:46","nodeType":"YulVariableDeclaration","src":"1994:40:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2019:9:46","nodeType":"YulIdentifier","src":"2019:9:46"},{"kind":"number","nativeSrc":"2030:2:46","nodeType":"YulLiteral","src":"2030:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2015:3:46","nodeType":"YulIdentifier","src":"2015:3:46"},"nativeSrc":"2015:18:46","nodeType":"YulFunctionCall","src":"2015:18:46"}],"functionName":{"name":"mload","nativeSrc":"2009:5:46","nodeType":"YulIdentifier","src":"2009:5:46"},"nativeSrc":"2009:25:46","nodeType":"YulFunctionCall","src":"2009:25:46"},"variables":[{"name":"value_1","nativeSrc":"1998:7:46","nodeType":"YulTypedName","src":"1998:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2092:7:46","nodeType":"YulIdentifier","src":"2092:7:46"}],"functionName":{"name":"validator_revert_contract_ITokenMetadataResolver","nativeSrc":"2043:48:46","nodeType":"YulIdentifier","src":"2043:48:46"},"nativeSrc":"2043:57:46","nodeType":"YulFunctionCall","src":"2043:57:46"},"nativeSrc":"2043:57:46","nodeType":"YulExpressionStatement","src":"2043:57:46"},{"nativeSrc":"2109:17:46","nodeType":"YulAssignment","src":"2109:17:46","value":{"name":"value_1","nativeSrc":"2119:7:46","nodeType":"YulIdentifier","src":"2119:7:46"},"variableNames":[{"name":"value3","nativeSrc":"2109:6:46","nodeType":"YulIdentifier","src":"2109:6:46"}]},{"nativeSrc":"2135:41:46","nodeType":"YulVariableDeclaration","src":"2135:41:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2160:9:46","nodeType":"YulIdentifier","src":"2160:9:46"},{"kind":"number","nativeSrc":"2171:3:46","nodeType":"YulLiteral","src":"2171:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"2156:3:46","nodeType":"YulIdentifier","src":"2156:3:46"},"nativeSrc":"2156:19:46","nodeType":"YulFunctionCall","src":"2156:19:46"}],"functionName":{"name":"mload","nativeSrc":"2150:5:46","nodeType":"YulIdentifier","src":"2150:5:46"},"nativeSrc":"2150:26:46","nodeType":"YulFunctionCall","src":"2150:26:46"},"variables":[{"name":"value_2","nativeSrc":"2139:7:46","nodeType":"YulTypedName","src":"2139:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"2234:7:46","nodeType":"YulIdentifier","src":"2234:7:46"}],"functionName":{"name":"validator_revert_contract_ITokenMetadataResolver","nativeSrc":"2185:48:46","nodeType":"YulIdentifier","src":"2185:48:46"},"nativeSrc":"2185:57:46","nodeType":"YulFunctionCall","src":"2185:57:46"},"nativeSrc":"2185:57:46","nodeType":"YulExpressionStatement","src":"2185:57:46"},{"nativeSrc":"2251:17:46","nodeType":"YulAssignment","src":"2251:17:46","value":{"name":"value_2","nativeSrc":"2261:7:46","nodeType":"YulIdentifier","src":"2261:7:46"},"variableNames":[{"name":"value4","nativeSrc":"2251:6:46","nodeType":"YulIdentifier","src":"2251:6:46"}]}]},"name":"abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_ITokenMetadataResolver_$3312t_contract$_IRevocationRegistry_$4884t_contract$_IIssuersDIDRegistry_$4844_fromMemory","nativeSrc":"1155:1119:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1345:9:46","nodeType":"YulTypedName","src":"1345:9:46","type":""},{"name":"dataEnd","nativeSrc":"1356:7:46","nodeType":"YulTypedName","src":"1356:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1368:6:46","nodeType":"YulTypedName","src":"1368:6:46","type":""},{"name":"value1","nativeSrc":"1376:6:46","nodeType":"YulTypedName","src":"1376:6:46","type":""},{"name":"value2","nativeSrc":"1384:6:46","nodeType":"YulTypedName","src":"1384:6:46","type":""},{"name":"value3","nativeSrc":"1392:6:46","nodeType":"YulTypedName","src":"1392:6:46","type":""},{"name":"value4","nativeSrc":"1400:6:46","nodeType":"YulTypedName","src":"1400:6:46","type":""}],"src":"1155:1119:46"},{"body":{"nativeSrc":"2328:176:46","nodeType":"YulBlock","src":"2328:176:46","statements":[{"nativeSrc":"2338:17:46","nodeType":"YulAssignment","src":"2338:17:46","value":{"arguments":[{"name":"x","nativeSrc":"2350:1:46","nodeType":"YulIdentifier","src":"2350:1:46"},{"name":"y","nativeSrc":"2353:1:46","nodeType":"YulIdentifier","src":"2353:1:46"}],"functionName":{"name":"sub","nativeSrc":"2346:3:46","nodeType":"YulIdentifier","src":"2346:3:46"},"nativeSrc":"2346:9:46","nodeType":"YulFunctionCall","src":"2346:9:46"},"variableNames":[{"name":"diff","nativeSrc":"2338:4:46","nodeType":"YulIdentifier","src":"2338:4:46"}]},{"body":{"nativeSrc":"2387:111:46","nodeType":"YulBlock","src":"2387:111:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2408:1:46","nodeType":"YulLiteral","src":"2408:1:46","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2415:3:46","nodeType":"YulLiteral","src":"2415:3:46","type":"","value":"224"},{"kind":"number","nativeSrc":"2420:10:46","nodeType":"YulLiteral","src":"2420:10:46","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2411:3:46","nodeType":"YulIdentifier","src":"2411:3:46"},"nativeSrc":"2411:20:46","nodeType":"YulFunctionCall","src":"2411:20:46"}],"functionName":{"name":"mstore","nativeSrc":"2401:6:46","nodeType":"YulIdentifier","src":"2401:6:46"},"nativeSrc":"2401:31:46","nodeType":"YulFunctionCall","src":"2401:31:46"},"nativeSrc":"2401:31:46","nodeType":"YulExpressionStatement","src":"2401:31:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2452:1:46","nodeType":"YulLiteral","src":"2452:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"2455:4:46","nodeType":"YulLiteral","src":"2455:4:46","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"2445:6:46","nodeType":"YulIdentifier","src":"2445:6:46"},"nativeSrc":"2445:15:46","nodeType":"YulFunctionCall","src":"2445:15:46"},"nativeSrc":"2445:15:46","nodeType":"YulExpressionStatement","src":"2445:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2480:1:46","nodeType":"YulLiteral","src":"2480:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2483:4:46","nodeType":"YulLiteral","src":"2483:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2473:6:46","nodeType":"YulIdentifier","src":"2473:6:46"},"nativeSrc":"2473:15:46","nodeType":"YulFunctionCall","src":"2473:15:46"},"nativeSrc":"2473:15:46","nodeType":"YulExpressionStatement","src":"2473:15:46"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"2370:4:46","nodeType":"YulIdentifier","src":"2370:4:46"},{"name":"x","nativeSrc":"2376:1:46","nodeType":"YulIdentifier","src":"2376:1:46"}],"functionName":{"name":"gt","nativeSrc":"2367:2:46","nodeType":"YulIdentifier","src":"2367:2:46"},"nativeSrc":"2367:11:46","nodeType":"YulFunctionCall","src":"2367:11:46"},"nativeSrc":"2364:134:46","nodeType":"YulIf","src":"2364:134:46"}]},"name":"checked_sub_t_uint256","nativeSrc":"2279:225:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"2310:1:46","nodeType":"YulTypedName","src":"2310:1:46","type":""},{"name":"y","nativeSrc":"2313:1:46","nodeType":"YulTypedName","src":"2313:1:46","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"2319:4:46","nodeType":"YulTypedName","src":"2319:4:46","type":""}],"src":"2279:225:46"},{"body":{"nativeSrc":"2564:325:46","nodeType":"YulBlock","src":"2564:325:46","statements":[{"nativeSrc":"2574:22:46","nodeType":"YulAssignment","src":"2574:22:46","value":{"arguments":[{"kind":"number","nativeSrc":"2588:1:46","nodeType":"YulLiteral","src":"2588:1:46","type":"","value":"1"},{"name":"data","nativeSrc":"2591:4:46","nodeType":"YulIdentifier","src":"2591:4:46"}],"functionName":{"name":"shr","nativeSrc":"2584:3:46","nodeType":"YulIdentifier","src":"2584:3:46"},"nativeSrc":"2584:12:46","nodeType":"YulFunctionCall","src":"2584:12:46"},"variableNames":[{"name":"length","nativeSrc":"2574:6:46","nodeType":"YulIdentifier","src":"2574:6:46"}]},{"nativeSrc":"2605:38:46","nodeType":"YulVariableDeclaration","src":"2605:38:46","value":{"arguments":[{"name":"data","nativeSrc":"2635:4:46","nodeType":"YulIdentifier","src":"2635:4:46"},{"kind":"number","nativeSrc":"2641:1:46","nodeType":"YulLiteral","src":"2641:1:46","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"2631:3:46","nodeType":"YulIdentifier","src":"2631:3:46"},"nativeSrc":"2631:12:46","nodeType":"YulFunctionCall","src":"2631:12:46"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"2609:18:46","nodeType":"YulTypedName","src":"2609:18:46","type":""}]},{"body":{"nativeSrc":"2682:31:46","nodeType":"YulBlock","src":"2682:31:46","statements":[{"nativeSrc":"2684:27:46","nodeType":"YulAssignment","src":"2684:27:46","value":{"arguments":[{"name":"length","nativeSrc":"2698:6:46","nodeType":"YulIdentifier","src":"2698:6:46"},{"kind":"number","nativeSrc":"2706:4:46","nodeType":"YulLiteral","src":"2706:4:46","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"2694:3:46","nodeType":"YulIdentifier","src":"2694:3:46"},"nativeSrc":"2694:17:46","nodeType":"YulFunctionCall","src":"2694:17:46"},"variableNames":[{"name":"length","nativeSrc":"2684:6:46","nodeType":"YulIdentifier","src":"2684:6:46"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2662:18:46","nodeType":"YulIdentifier","src":"2662:18:46"}],"functionName":{"name":"iszero","nativeSrc":"2655:6:46","nodeType":"YulIdentifier","src":"2655:6:46"},"nativeSrc":"2655:26:46","nodeType":"YulFunctionCall","src":"2655:26:46"},"nativeSrc":"2652:61:46","nodeType":"YulIf","src":"2652:61:46"},{"body":{"nativeSrc":"2772:111:46","nodeType":"YulBlock","src":"2772:111:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2793:1:46","nodeType":"YulLiteral","src":"2793:1:46","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"2800:3:46","nodeType":"YulLiteral","src":"2800:3:46","type":"","value":"224"},{"kind":"number","nativeSrc":"2805:10:46","nodeType":"YulLiteral","src":"2805:10:46","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"2796:3:46","nodeType":"YulIdentifier","src":"2796:3:46"},"nativeSrc":"2796:20:46","nodeType":"YulFunctionCall","src":"2796:20:46"}],"functionName":{"name":"mstore","nativeSrc":"2786:6:46","nodeType":"YulIdentifier","src":"2786:6:46"},"nativeSrc":"2786:31:46","nodeType":"YulFunctionCall","src":"2786:31:46"},"nativeSrc":"2786:31:46","nodeType":"YulExpressionStatement","src":"2786:31:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2837:1:46","nodeType":"YulLiteral","src":"2837:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"2840:4:46","nodeType":"YulLiteral","src":"2840:4:46","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"2830:6:46","nodeType":"YulIdentifier","src":"2830:6:46"},"nativeSrc":"2830:15:46","nodeType":"YulFunctionCall","src":"2830:15:46"},"nativeSrc":"2830:15:46","nodeType":"YulExpressionStatement","src":"2830:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"2865:1:46","nodeType":"YulLiteral","src":"2865:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2868:4:46","nodeType":"YulLiteral","src":"2868:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"2858:6:46","nodeType":"YulIdentifier","src":"2858:6:46"},"nativeSrc":"2858:15:46","nodeType":"YulFunctionCall","src":"2858:15:46"},"nativeSrc":"2858:15:46","nodeType":"YulExpressionStatement","src":"2858:15:46"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"2728:18:46","nodeType":"YulIdentifier","src":"2728:18:46"},{"arguments":[{"name":"length","nativeSrc":"2751:6:46","nodeType":"YulIdentifier","src":"2751:6:46"},{"kind":"number","nativeSrc":"2759:2:46","nodeType":"YulLiteral","src":"2759:2:46","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"2748:2:46","nodeType":"YulIdentifier","src":"2748:2:46"},"nativeSrc":"2748:14:46","nodeType":"YulFunctionCall","src":"2748:14:46"}],"functionName":{"name":"eq","nativeSrc":"2725:2:46","nodeType":"YulIdentifier","src":"2725:2:46"},"nativeSrc":"2725:38:46","nodeType":"YulFunctionCall","src":"2725:38:46"},"nativeSrc":"2722:161:46","nodeType":"YulIf","src":"2722:161:46"}]},"name":"extract_byte_array_length","nativeSrc":"2509:380:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"2544:4:46","nodeType":"YulTypedName","src":"2544:4:46","type":""}],"returnVariables":[{"name":"length","nativeSrc":"2553:6:46","nodeType":"YulTypedName","src":"2553:6:46","type":""}],"src":"2509:380:46"},{"body":{"nativeSrc":"2950:65:46","nodeType":"YulBlock","src":"2950:65:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2967:1:46","nodeType":"YulLiteral","src":"2967:1:46","type":"","value":"0"},{"name":"ptr","nativeSrc":"2970:3:46","nodeType":"YulIdentifier","src":"2970:3:46"}],"functionName":{"name":"mstore","nativeSrc":"2960:6:46","nodeType":"YulIdentifier","src":"2960:6:46"},"nativeSrc":"2960:14:46","nodeType":"YulFunctionCall","src":"2960:14:46"},"nativeSrc":"2960:14:46","nodeType":"YulExpressionStatement","src":"2960:14:46"},{"nativeSrc":"2983:26:46","nodeType":"YulAssignment","src":"2983:26:46","value":{"arguments":[{"kind":"number","nativeSrc":"3001:1:46","nodeType":"YulLiteral","src":"3001:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3004:4:46","nodeType":"YulLiteral","src":"3004:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"2991:9:46","nodeType":"YulIdentifier","src":"2991:9:46"},"nativeSrc":"2991:18:46","nodeType":"YulFunctionCall","src":"2991:18:46"},"variableNames":[{"name":"data","nativeSrc":"2983:4:46","nodeType":"YulIdentifier","src":"2983:4:46"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"2894:121:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"2933:3:46","nodeType":"YulTypedName","src":"2933:3:46","type":""}],"returnVariables":[{"name":"data","nativeSrc":"2941:4:46","nodeType":"YulTypedName","src":"2941:4:46","type":""}],"src":"2894:121:46"},{"body":{"nativeSrc":"3101:462:46","nodeType":"YulBlock","src":"3101:462:46","statements":[{"body":{"nativeSrc":"3134:423:46","nodeType":"YulBlock","src":"3134:423:46","statements":[{"nativeSrc":"3148:11:46","nodeType":"YulVariableDeclaration","src":"3148:11:46","value":{"kind":"number","nativeSrc":"3158:1:46","nodeType":"YulLiteral","src":"3158:1:46","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"3152:2:46","nodeType":"YulTypedName","src":"3152:2:46","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"3179:1:46","nodeType":"YulLiteral","src":"3179:1:46","type":"","value":"0"},{"name":"array","nativeSrc":"3182:5:46","nodeType":"YulIdentifier","src":"3182:5:46"}],"functionName":{"name":"mstore","nativeSrc":"3172:6:46","nodeType":"YulIdentifier","src":"3172:6:46"},"nativeSrc":"3172:16:46","nodeType":"YulFunctionCall","src":"3172:16:46"},"nativeSrc":"3172:16:46","nodeType":"YulExpressionStatement","src":"3172:16:46"},{"nativeSrc":"3201:30:46","nodeType":"YulVariableDeclaration","src":"3201:30:46","value":{"arguments":[{"kind":"number","nativeSrc":"3223:1:46","nodeType":"YulLiteral","src":"3223:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"3226:4:46","nodeType":"YulLiteral","src":"3226:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"3213:9:46","nodeType":"YulIdentifier","src":"3213:9:46"},"nativeSrc":"3213:18:46","nodeType":"YulFunctionCall","src":"3213:18:46"},"variables":[{"name":"data","nativeSrc":"3205:4:46","nodeType":"YulTypedName","src":"3205:4:46","type":""}]},{"nativeSrc":"3244:57:46","nodeType":"YulVariableDeclaration","src":"3244:57:46","value":{"arguments":[{"name":"data","nativeSrc":"3267:4:46","nodeType":"YulIdentifier","src":"3267:4:46"},{"arguments":[{"kind":"number","nativeSrc":"3277:1:46","nodeType":"YulLiteral","src":"3277:1:46","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"3284:10:46","nodeType":"YulIdentifier","src":"3284:10:46"},{"kind":"number","nativeSrc":"3296:2:46","nodeType":"YulLiteral","src":"3296:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3280:3:46","nodeType":"YulIdentifier","src":"3280:3:46"},"nativeSrc":"3280:19:46","nodeType":"YulFunctionCall","src":"3280:19:46"}],"functionName":{"name":"shr","nativeSrc":"3273:3:46","nodeType":"YulIdentifier","src":"3273:3:46"},"nativeSrc":"3273:27:46","nodeType":"YulFunctionCall","src":"3273:27:46"}],"functionName":{"name":"add","nativeSrc":"3263:3:46","nodeType":"YulIdentifier","src":"3263:3:46"},"nativeSrc":"3263:38:46","nodeType":"YulFunctionCall","src":"3263:38:46"},"variables":[{"name":"deleteStart","nativeSrc":"3248:11:46","nodeType":"YulTypedName","src":"3248:11:46","type":""}]},{"body":{"nativeSrc":"3338:23:46","nodeType":"YulBlock","src":"3338:23:46","statements":[{"nativeSrc":"3340:19:46","nodeType":"YulAssignment","src":"3340:19:46","value":{"name":"data","nativeSrc":"3355:4:46","nodeType":"YulIdentifier","src":"3355:4:46"},"variableNames":[{"name":"deleteStart","nativeSrc":"3340:11:46","nodeType":"YulIdentifier","src":"3340:11:46"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"3320:10:46","nodeType":"YulIdentifier","src":"3320:10:46"},{"kind":"number","nativeSrc":"3332:4:46","nodeType":"YulLiteral","src":"3332:4:46","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"3317:2:46","nodeType":"YulIdentifier","src":"3317:2:46"},"nativeSrc":"3317:20:46","nodeType":"YulFunctionCall","src":"3317:20:46"},"nativeSrc":"3314:47:46","nodeType":"YulIf","src":"3314:47:46"},{"nativeSrc":"3374:41:46","nodeType":"YulVariableDeclaration","src":"3374:41:46","value":{"arguments":[{"name":"data","nativeSrc":"3388:4:46","nodeType":"YulIdentifier","src":"3388:4:46"},{"arguments":[{"kind":"number","nativeSrc":"3398:1:46","nodeType":"YulLiteral","src":"3398:1:46","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"3405:3:46","nodeType":"YulIdentifier","src":"3405:3:46"},{"kind":"number","nativeSrc":"3410:2:46","nodeType":"YulLiteral","src":"3410:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"3401:3:46","nodeType":"YulIdentifier","src":"3401:3:46"},"nativeSrc":"3401:12:46","nodeType":"YulFunctionCall","src":"3401:12:46"}],"functionName":{"name":"shr","nativeSrc":"3394:3:46","nodeType":"YulIdentifier","src":"3394:3:46"},"nativeSrc":"3394:20:46","nodeType":"YulFunctionCall","src":"3394:20:46"}],"functionName":{"name":"add","nativeSrc":"3384:3:46","nodeType":"YulIdentifier","src":"3384:3:46"},"nativeSrc":"3384:31:46","nodeType":"YulFunctionCall","src":"3384:31:46"},"variables":[{"name":"_2","nativeSrc":"3378:2:46","nodeType":"YulTypedName","src":"3378:2:46","type":""}]},{"nativeSrc":"3428:24:46","nodeType":"YulVariableDeclaration","src":"3428:24:46","value":{"name":"deleteStart","nativeSrc":"3441:11:46","nodeType":"YulIdentifier","src":"3441:11:46"},"variables":[{"name":"start","nativeSrc":"3432:5:46","nodeType":"YulTypedName","src":"3432:5:46","type":""}]},{"body":{"nativeSrc":"3526:21:46","nodeType":"YulBlock","src":"3526:21:46","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"3535:5:46","nodeType":"YulIdentifier","src":"3535:5:46"},{"name":"_1","nativeSrc":"3542:2:46","nodeType":"YulIdentifier","src":"3542:2:46"}],"functionName":{"name":"sstore","nativeSrc":"3528:6:46","nodeType":"YulIdentifier","src":"3528:6:46"},"nativeSrc":"3528:17:46","nodeType":"YulFunctionCall","src":"3528:17:46"},"nativeSrc":"3528:17:46","nodeType":"YulExpressionStatement","src":"3528:17:46"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"3476:5:46","nodeType":"YulIdentifier","src":"3476:5:46"},{"name":"_2","nativeSrc":"3483:2:46","nodeType":"YulIdentifier","src":"3483:2:46"}],"functionName":{"name":"lt","nativeSrc":"3473:2:46","nodeType":"YulIdentifier","src":"3473:2:46"},"nativeSrc":"3473:13:46","nodeType":"YulFunctionCall","src":"3473:13:46"},"nativeSrc":"3465:82:46","nodeType":"YulForLoop","post":{"nativeSrc":"3487:26:46","nodeType":"YulBlock","src":"3487:26:46","statements":[{"nativeSrc":"3489:22:46","nodeType":"YulAssignment","src":"3489:22:46","value":{"arguments":[{"name":"start","nativeSrc":"3502:5:46","nodeType":"YulIdentifier","src":"3502:5:46"},{"kind":"number","nativeSrc":"3509:1:46","nodeType":"YulLiteral","src":"3509:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"3498:3:46","nodeType":"YulIdentifier","src":"3498:3:46"},"nativeSrc":"3498:13:46","nodeType":"YulFunctionCall","src":"3498:13:46"},"variableNames":[{"name":"start","nativeSrc":"3489:5:46","nodeType":"YulIdentifier","src":"3489:5:46"}]}]},"pre":{"nativeSrc":"3469:3:46","nodeType":"YulBlock","src":"3469:3:46","statements":[]},"src":"3465:82:46"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"3117:3:46","nodeType":"YulIdentifier","src":"3117:3:46"},{"kind":"number","nativeSrc":"3122:2:46","nodeType":"YulLiteral","src":"3122:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"3114:2:46","nodeType":"YulIdentifier","src":"3114:2:46"},"nativeSrc":"3114:11:46","nodeType":"YulFunctionCall","src":"3114:11:46"},"nativeSrc":"3111:446:46","nodeType":"YulIf","src":"3111:446:46"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"3020:543:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"3073:5:46","nodeType":"YulTypedName","src":"3073:5:46","type":""},{"name":"len","nativeSrc":"3080:3:46","nodeType":"YulTypedName","src":"3080:3:46","type":""},{"name":"startIndex","nativeSrc":"3085:10:46","nodeType":"YulTypedName","src":"3085:10:46","type":""}],"src":"3020:543:46"},{"body":{"nativeSrc":"3653:81:46","nodeType":"YulBlock","src":"3653:81:46","statements":[{"nativeSrc":"3663:65:46","nodeType":"YulAssignment","src":"3663:65:46","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"3678:4:46","nodeType":"YulIdentifier","src":"3678:4:46"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3696:1:46","nodeType":"YulLiteral","src":"3696:1:46","type":"","value":"3"},{"name":"len","nativeSrc":"3699:3:46","nodeType":"YulIdentifier","src":"3699:3:46"}],"functionName":{"name":"shl","nativeSrc":"3692:3:46","nodeType":"YulIdentifier","src":"3692:3:46"},"nativeSrc":"3692:11:46","nodeType":"YulFunctionCall","src":"3692:11:46"},{"arguments":[{"kind":"number","nativeSrc":"3709:1:46","nodeType":"YulLiteral","src":"3709:1:46","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"3705:3:46","nodeType":"YulIdentifier","src":"3705:3:46"},"nativeSrc":"3705:6:46","nodeType":"YulFunctionCall","src":"3705:6:46"}],"functionName":{"name":"shr","nativeSrc":"3688:3:46","nodeType":"YulIdentifier","src":"3688:3:46"},"nativeSrc":"3688:24:46","nodeType":"YulFunctionCall","src":"3688:24:46"}],"functionName":{"name":"not","nativeSrc":"3684:3:46","nodeType":"YulIdentifier","src":"3684:3:46"},"nativeSrc":"3684:29:46","nodeType":"YulFunctionCall","src":"3684:29:46"}],"functionName":{"name":"and","nativeSrc":"3674:3:46","nodeType":"YulIdentifier","src":"3674:3:46"},"nativeSrc":"3674:40:46","nodeType":"YulFunctionCall","src":"3674:40:46"},{"arguments":[{"kind":"number","nativeSrc":"3720:1:46","nodeType":"YulLiteral","src":"3720:1:46","type":"","value":"1"},{"name":"len","nativeSrc":"3723:3:46","nodeType":"YulIdentifier","src":"3723:3:46"}],"functionName":{"name":"shl","nativeSrc":"3716:3:46","nodeType":"YulIdentifier","src":"3716:3:46"},"nativeSrc":"3716:11:46","nodeType":"YulFunctionCall","src":"3716:11:46"}],"functionName":{"name":"or","nativeSrc":"3671:2:46","nodeType":"YulIdentifier","src":"3671:2:46"},"nativeSrc":"3671:57:46","nodeType":"YulFunctionCall","src":"3671:57:46"},"variableNames":[{"name":"used","nativeSrc":"3663:4:46","nodeType":"YulIdentifier","src":"3663:4:46"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"3568:166:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"3630:4:46","nodeType":"YulTypedName","src":"3630:4:46","type":""},{"name":"len","nativeSrc":"3636:3:46","nodeType":"YulTypedName","src":"3636:3:46","type":""}],"returnVariables":[{"name":"used","nativeSrc":"3644:4:46","nodeType":"YulTypedName","src":"3644:4:46","type":""}],"src":"3568:166:46"},{"body":{"nativeSrc":"3835:1249:46","nodeType":"YulBlock","src":"3835:1249:46","statements":[{"nativeSrc":"3845:24:46","nodeType":"YulVariableDeclaration","src":"3845:24:46","value":{"arguments":[{"name":"src","nativeSrc":"3865:3:46","nodeType":"YulIdentifier","src":"3865:3:46"}],"functionName":{"name":"mload","nativeSrc":"3859:5:46","nodeType":"YulIdentifier","src":"3859:5:46"},"nativeSrc":"3859:10:46","nodeType":"YulFunctionCall","src":"3859:10:46"},"variables":[{"name":"newLen","nativeSrc":"3849:6:46","nodeType":"YulTypedName","src":"3849:6:46","type":""}]},{"body":{"nativeSrc":"3912:22:46","nodeType":"YulBlock","src":"3912:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"3914:16:46","nodeType":"YulIdentifier","src":"3914:16:46"},"nativeSrc":"3914:18:46","nodeType":"YulFunctionCall","src":"3914:18:46"},"nativeSrc":"3914:18:46","nodeType":"YulExpressionStatement","src":"3914:18:46"}]},"condition":{"arguments":[{"name":"newLen","nativeSrc":"3884:6:46","nodeType":"YulIdentifier","src":"3884:6:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"3900:2:46","nodeType":"YulLiteral","src":"3900:2:46","type":"","value":"64"},{"kind":"number","nativeSrc":"3904:1:46","nodeType":"YulLiteral","src":"3904:1:46","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"3896:3:46","nodeType":"YulIdentifier","src":"3896:3:46"},"nativeSrc":"3896:10:46","nodeType":"YulFunctionCall","src":"3896:10:46"},{"kind":"number","nativeSrc":"3908:1:46","nodeType":"YulLiteral","src":"3908:1:46","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"3892:3:46","nodeType":"YulIdentifier","src":"3892:3:46"},"nativeSrc":"3892:18:46","nodeType":"YulFunctionCall","src":"3892:18:46"}],"functionName":{"name":"gt","nativeSrc":"3881:2:46","nodeType":"YulIdentifier","src":"3881:2:46"},"nativeSrc":"3881:30:46","nodeType":"YulFunctionCall","src":"3881:30:46"},"nativeSrc":"3878:56:46","nodeType":"YulIf","src":"3878:56:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"3987:4:46","nodeType":"YulIdentifier","src":"3987:4:46"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"4025:4:46","nodeType":"YulIdentifier","src":"4025:4:46"}],"functionName":{"name":"sload","nativeSrc":"4019:5:46","nodeType":"YulIdentifier","src":"4019:5:46"},"nativeSrc":"4019:11:46","nodeType":"YulFunctionCall","src":"4019:11:46"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"3993:25:46","nodeType":"YulIdentifier","src":"3993:25:46"},"nativeSrc":"3993:38:46","nodeType":"YulFunctionCall","src":"3993:38:46"},{"name":"newLen","nativeSrc":"4033:6:46","nodeType":"YulIdentifier","src":"4033:6:46"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"3943:43:46","nodeType":"YulIdentifier","src":"3943:43:46"},"nativeSrc":"3943:97:46","nodeType":"YulFunctionCall","src":"3943:97:46"},"nativeSrc":"3943:97:46","nodeType":"YulExpressionStatement","src":"3943:97:46"},{"nativeSrc":"4049:18:46","nodeType":"YulVariableDeclaration","src":"4049:18:46","value":{"kind":"number","nativeSrc":"4066:1:46","nodeType":"YulLiteral","src":"4066:1:46","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"4053:9:46","nodeType":"YulTypedName","src":"4053:9:46","type":""}]},{"nativeSrc":"4076:23:46","nodeType":"YulVariableDeclaration","src":"4076:23:46","value":{"kind":"number","nativeSrc":"4095:4:46","nodeType":"YulLiteral","src":"4095:4:46","type":"","value":"0x20"},"variables":[{"name":"srcOffset_1","nativeSrc":"4080:11:46","nodeType":"YulTypedName","src":"4080:11:46","type":""}]},{"nativeSrc":"4108:17:46","nodeType":"YulAssignment","src":"4108:17:46","value":{"kind":"number","nativeSrc":"4121:4:46","nodeType":"YulLiteral","src":"4121:4:46","type":"","value":"0x20"},"variableNames":[{"name":"srcOffset","nativeSrc":"4108:9:46","nodeType":"YulIdentifier","src":"4108:9:46"}]},{"cases":[{"body":{"nativeSrc":"4171:656:46","nodeType":"YulBlock","src":"4171:656:46","statements":[{"nativeSrc":"4185:35:46","nodeType":"YulVariableDeclaration","src":"4185:35:46","value":{"arguments":[{"name":"newLen","nativeSrc":"4204:6:46","nodeType":"YulIdentifier","src":"4204:6:46"},{"arguments":[{"kind":"number","nativeSrc":"4216:2:46","nodeType":"YulLiteral","src":"4216:2:46","type":"","value":"31"}],"functionName":{"name":"not","nativeSrc":"4212:3:46","nodeType":"YulIdentifier","src":"4212:3:46"},"nativeSrc":"4212:7:46","nodeType":"YulFunctionCall","src":"4212:7:46"}],"functionName":{"name":"and","nativeSrc":"4200:3:46","nodeType":"YulIdentifier","src":"4200:3:46"},"nativeSrc":"4200:20:46","nodeType":"YulFunctionCall","src":"4200:20:46"},"variables":[{"name":"loopEnd","nativeSrc":"4189:7:46","nodeType":"YulTypedName","src":"4189:7:46","type":""}]},{"nativeSrc":"4233:49:46","nodeType":"YulVariableDeclaration","src":"4233:49:46","value":{"arguments":[{"name":"slot","nativeSrc":"4277:4:46","nodeType":"YulIdentifier","src":"4277:4:46"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"4247:29:46","nodeType":"YulIdentifier","src":"4247:29:46"},"nativeSrc":"4247:35:46","nodeType":"YulFunctionCall","src":"4247:35:46"},"variables":[{"name":"dstPtr","nativeSrc":"4237:6:46","nodeType":"YulTypedName","src":"4237:6:46","type":""}]},{"nativeSrc":"4295:10:46","nodeType":"YulVariableDeclaration","src":"4295:10:46","value":{"kind":"number","nativeSrc":"4304:1:46","nodeType":"YulLiteral","src":"4304:1:46","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"4299:1:46","nodeType":"YulTypedName","src":"4299:1:46","type":""}]},{"body":{"nativeSrc":"4382:172:46","nodeType":"YulBlock","src":"4382:172:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4407:6:46","nodeType":"YulIdentifier","src":"4407:6:46"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4425:3:46","nodeType":"YulIdentifier","src":"4425:3:46"},{"name":"srcOffset","nativeSrc":"4430:9:46","nodeType":"YulIdentifier","src":"4430:9:46"}],"functionName":{"name":"add","nativeSrc":"4421:3:46","nodeType":"YulIdentifier","src":"4421:3:46"},"nativeSrc":"4421:19:46","nodeType":"YulFunctionCall","src":"4421:19:46"}],"functionName":{"name":"mload","nativeSrc":"4415:5:46","nodeType":"YulIdentifier","src":"4415:5:46"},"nativeSrc":"4415:26:46","nodeType":"YulFunctionCall","src":"4415:26:46"}],"functionName":{"name":"sstore","nativeSrc":"4400:6:46","nodeType":"YulIdentifier","src":"4400:6:46"},"nativeSrc":"4400:42:46","nodeType":"YulFunctionCall","src":"4400:42:46"},"nativeSrc":"4400:42:46","nodeType":"YulExpressionStatement","src":"4400:42:46"},{"nativeSrc":"4459:24:46","nodeType":"YulAssignment","src":"4459:24:46","value":{"arguments":[{"name":"dstPtr","nativeSrc":"4473:6:46","nodeType":"YulIdentifier","src":"4473:6:46"},{"kind":"number","nativeSrc":"4481:1:46","nodeType":"YulLiteral","src":"4481:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4469:3:46","nodeType":"YulIdentifier","src":"4469:3:46"},"nativeSrc":"4469:14:46","nodeType":"YulFunctionCall","src":"4469:14:46"},"variableNames":[{"name":"dstPtr","nativeSrc":"4459:6:46","nodeType":"YulIdentifier","src":"4459:6:46"}]},{"nativeSrc":"4500:40:46","nodeType":"YulAssignment","src":"4500:40:46","value":{"arguments":[{"name":"srcOffset","nativeSrc":"4517:9:46","nodeType":"YulIdentifier","src":"4517:9:46"},{"name":"srcOffset_1","nativeSrc":"4528:11:46","nodeType":"YulIdentifier","src":"4528:11:46"}],"functionName":{"name":"add","nativeSrc":"4513:3:46","nodeType":"YulIdentifier","src":"4513:3:46"},"nativeSrc":"4513:27:46","nodeType":"YulFunctionCall","src":"4513:27:46"},"variableNames":[{"name":"srcOffset","nativeSrc":"4500:9:46","nodeType":"YulIdentifier","src":"4500:9:46"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"4329:1:46","nodeType":"YulIdentifier","src":"4329:1:46"},{"name":"loopEnd","nativeSrc":"4332:7:46","nodeType":"YulIdentifier","src":"4332:7:46"}],"functionName":{"name":"lt","nativeSrc":"4326:2:46","nodeType":"YulIdentifier","src":"4326:2:46"},"nativeSrc":"4326:14:46","nodeType":"YulFunctionCall","src":"4326:14:46"},"nativeSrc":"4318:236:46","nodeType":"YulForLoop","post":{"nativeSrc":"4341:28:46","nodeType":"YulBlock","src":"4341:28:46","statements":[{"nativeSrc":"4343:24:46","nodeType":"YulAssignment","src":"4343:24:46","value":{"arguments":[{"name":"i","nativeSrc":"4352:1:46","nodeType":"YulIdentifier","src":"4352:1:46"},{"name":"srcOffset_1","nativeSrc":"4355:11:46","nodeType":"YulIdentifier","src":"4355:11:46"}],"functionName":{"name":"add","nativeSrc":"4348:3:46","nodeType":"YulIdentifier","src":"4348:3:46"},"nativeSrc":"4348:19:46","nodeType":"YulFunctionCall","src":"4348:19:46"},"variableNames":[{"name":"i","nativeSrc":"4343:1:46","nodeType":"YulIdentifier","src":"4343:1:46"}]}]},"pre":{"nativeSrc":"4322:3:46","nodeType":"YulBlock","src":"4322:3:46","statements":[]},"src":"4318:236:46"},{"body":{"nativeSrc":"4602:166:46","nodeType":"YulBlock","src":"4602:166:46","statements":[{"nativeSrc":"4620:43:46","nodeType":"YulVariableDeclaration","src":"4620:43:46","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4647:3:46","nodeType":"YulIdentifier","src":"4647:3:46"},{"name":"srcOffset","nativeSrc":"4652:9:46","nodeType":"YulIdentifier","src":"4652:9:46"}],"functionName":{"name":"add","nativeSrc":"4643:3:46","nodeType":"YulIdentifier","src":"4643:3:46"},"nativeSrc":"4643:19:46","nodeType":"YulFunctionCall","src":"4643:19:46"}],"functionName":{"name":"mload","nativeSrc":"4637:5:46","nodeType":"YulIdentifier","src":"4637:5:46"},"nativeSrc":"4637:26:46","nodeType":"YulFunctionCall","src":"4637:26:46"},"variables":[{"name":"lastValue","nativeSrc":"4624:9:46","nodeType":"YulTypedName","src":"4624:9:46","type":""}]},{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"4687:6:46","nodeType":"YulIdentifier","src":"4687:6:46"},{"arguments":[{"name":"lastValue","nativeSrc":"4699:9:46","nodeType":"YulIdentifier","src":"4699:9:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4726:1:46","nodeType":"YulLiteral","src":"4726:1:46","type":"","value":"3"},{"name":"newLen","nativeSrc":"4729:6:46","nodeType":"YulIdentifier","src":"4729:6:46"}],"functionName":{"name":"shl","nativeSrc":"4722:3:46","nodeType":"YulIdentifier","src":"4722:3:46"},"nativeSrc":"4722:14:46","nodeType":"YulFunctionCall","src":"4722:14:46"},{"kind":"number","nativeSrc":"4738:3:46","nodeType":"YulLiteral","src":"4738:3:46","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"4718:3:46","nodeType":"YulIdentifier","src":"4718:3:46"},"nativeSrc":"4718:24:46","nodeType":"YulFunctionCall","src":"4718:24:46"},{"arguments":[{"kind":"number","nativeSrc":"4748:1:46","nodeType":"YulLiteral","src":"4748:1:46","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"4744:3:46","nodeType":"YulIdentifier","src":"4744:3:46"},"nativeSrc":"4744:6:46","nodeType":"YulFunctionCall","src":"4744:6:46"}],"functionName":{"name":"shr","nativeSrc":"4714:3:46","nodeType":"YulIdentifier","src":"4714:3:46"},"nativeSrc":"4714:37:46","nodeType":"YulFunctionCall","src":"4714:37:46"}],"functionName":{"name":"not","nativeSrc":"4710:3:46","nodeType":"YulIdentifier","src":"4710:3:46"},"nativeSrc":"4710:42:46","nodeType":"YulFunctionCall","src":"4710:42:46"}],"functionName":{"name":"and","nativeSrc":"4695:3:46","nodeType":"YulIdentifier","src":"4695:3:46"},"nativeSrc":"4695:58:46","nodeType":"YulFunctionCall","src":"4695:58:46"}],"functionName":{"name":"sstore","nativeSrc":"4680:6:46","nodeType":"YulIdentifier","src":"4680:6:46"},"nativeSrc":"4680:74:46","nodeType":"YulFunctionCall","src":"4680:74:46"},"nativeSrc":"4680:74:46","nodeType":"YulExpressionStatement","src":"4680:74:46"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"4573:7:46","nodeType":"YulIdentifier","src":"4573:7:46"},{"name":"newLen","nativeSrc":"4582:6:46","nodeType":"YulIdentifier","src":"4582:6:46"}],"functionName":{"name":"lt","nativeSrc":"4570:2:46","nodeType":"YulIdentifier","src":"4570:2:46"},"nativeSrc":"4570:19:46","nodeType":"YulFunctionCall","src":"4570:19:46"},"nativeSrc":"4567:201:46","nodeType":"YulIf","src":"4567:201:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4788:4:46","nodeType":"YulIdentifier","src":"4788:4:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4802:1:46","nodeType":"YulLiteral","src":"4802:1:46","type":"","value":"1"},{"name":"newLen","nativeSrc":"4805:6:46","nodeType":"YulIdentifier","src":"4805:6:46"}],"functionName":{"name":"shl","nativeSrc":"4798:3:46","nodeType":"YulIdentifier","src":"4798:3:46"},"nativeSrc":"4798:14:46","nodeType":"YulFunctionCall","src":"4798:14:46"},{"kind":"number","nativeSrc":"4814:1:46","nodeType":"YulLiteral","src":"4814:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4794:3:46","nodeType":"YulIdentifier","src":"4794:3:46"},"nativeSrc":"4794:22:46","nodeType":"YulFunctionCall","src":"4794:22:46"}],"functionName":{"name":"sstore","nativeSrc":"4781:6:46","nodeType":"YulIdentifier","src":"4781:6:46"},"nativeSrc":"4781:36:46","nodeType":"YulFunctionCall","src":"4781:36:46"},"nativeSrc":"4781:36:46","nodeType":"YulExpressionStatement","src":"4781:36:46"}]},"nativeSrc":"4164:663:46","nodeType":"YulCase","src":"4164:663:46","value":{"kind":"number","nativeSrc":"4169:1:46","nodeType":"YulLiteral","src":"4169:1:46","type":"","value":"1"}},{"body":{"nativeSrc":"4844:234:46","nodeType":"YulBlock","src":"4844:234:46","statements":[{"nativeSrc":"4858:14:46","nodeType":"YulVariableDeclaration","src":"4858:14:46","value":{"kind":"number","nativeSrc":"4871:1:46","nodeType":"YulLiteral","src":"4871:1:46","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"4862:5:46","nodeType":"YulTypedName","src":"4862:5:46","type":""}]},{"body":{"nativeSrc":"4907:67:46","nodeType":"YulBlock","src":"4907:67:46","statements":[{"nativeSrc":"4925:35:46","nodeType":"YulAssignment","src":"4925:35:46","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"4944:3:46","nodeType":"YulIdentifier","src":"4944:3:46"},{"name":"srcOffset","nativeSrc":"4949:9:46","nodeType":"YulIdentifier","src":"4949:9:46"}],"functionName":{"name":"add","nativeSrc":"4940:3:46","nodeType":"YulIdentifier","src":"4940:3:46"},"nativeSrc":"4940:19:46","nodeType":"YulFunctionCall","src":"4940:19:46"}],"functionName":{"name":"mload","nativeSrc":"4934:5:46","nodeType":"YulIdentifier","src":"4934:5:46"},"nativeSrc":"4934:26:46","nodeType":"YulFunctionCall","src":"4934:26:46"},"variableNames":[{"name":"value","nativeSrc":"4925:5:46","nodeType":"YulIdentifier","src":"4925:5:46"}]}]},"condition":{"name":"newLen","nativeSrc":"4888:6:46","nodeType":"YulIdentifier","src":"4888:6:46"},"nativeSrc":"4885:89:46","nodeType":"YulIf","src":"4885:89:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"4994:4:46","nodeType":"YulIdentifier","src":"4994:4:46"},{"arguments":[{"name":"value","nativeSrc":"5053:5:46","nodeType":"YulIdentifier","src":"5053:5:46"},{"name":"newLen","nativeSrc":"5060:6:46","nodeType":"YulIdentifier","src":"5060:6:46"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"5000:52:46","nodeType":"YulIdentifier","src":"5000:52:46"},"nativeSrc":"5000:67:46","nodeType":"YulFunctionCall","src":"5000:67:46"}],"functionName":{"name":"sstore","nativeSrc":"4987:6:46","nodeType":"YulIdentifier","src":"4987:6:46"},"nativeSrc":"4987:81:46","nodeType":"YulFunctionCall","src":"4987:81:46"},"nativeSrc":"4987:81:46","nodeType":"YulExpressionStatement","src":"4987:81:46"}]},"nativeSrc":"4836:242:46","nodeType":"YulCase","src":"4836:242:46","value":"default"}],"expression":{"arguments":[{"name":"newLen","nativeSrc":"4144:6:46","nodeType":"YulIdentifier","src":"4144:6:46"},{"kind":"number","nativeSrc":"4152:2:46","nodeType":"YulLiteral","src":"4152:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"4141:2:46","nodeType":"YulIdentifier","src":"4141:2:46"},"nativeSrc":"4141:14:46","nodeType":"YulFunctionCall","src":"4141:14:46"},"nativeSrc":"4134:944:46","nodeType":"YulSwitch","src":"4134:944:46"}]},"name":"copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage","nativeSrc":"3739:1345:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"3820:4:46","nodeType":"YulTypedName","src":"3820:4:46","type":""},{"name":"src","nativeSrc":"3826:3:46","nodeType":"YulTypedName","src":"3826:3:46","type":""}],"src":"3739:1345:46"}]},"contents":"{\n    { }\n    function panic_error_0x41()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function abi_decode_string_fromMemory(offset, end) -> array\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        let _1 := mload(offset)\n        let _2 := sub(shl(64, 1), 1)\n        if gt(_1, _2) { panic_error_0x41() }\n        let _3 := not(31)\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_1, 0x1f), _3), 63), _3))\n        if or(gt(newFreePtr, _2), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _1)\n        let _4 := 0x20\n        if gt(add(add(offset, _1), 0x20), end) { revert(0, 0) }\n        let i := 0\n        for { } lt(i, _1) { i := add(i, _4) }\n        {\n            mstore(add(add(memPtr, i), _4), mload(add(add(offset, i), _4)))\n        }\n        mstore(add(add(memPtr, _1), 0x20), 0)\n        array := memPtr\n    }\n    function validator_revert_contract_ITokenMetadataResolver(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_string_memory_ptrt_string_memory_ptrt_contract$_ITokenMetadataResolver_$3312t_contract$_IRevocationRegistry_$4884t_contract$_IIssuersDIDRegistry_$4844_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 160) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := sub(shl(64, 1), 1)\n        if gt(offset, _1) { revert(0, 0) }\n        value0 := abi_decode_string_fromMemory(add(headStart, offset), dataEnd)\n        let offset_1 := mload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        value1 := abi_decode_string_fromMemory(add(headStart, offset_1), dataEnd)\n        let value := mload(add(headStart, 64))\n        validator_revert_contract_ITokenMetadataResolver(value)\n        value2 := value\n        let value_1 := mload(add(headStart, 96))\n        validator_revert_contract_ITokenMetadataResolver(value_1)\n        value3 := value_1\n        let value_2 := mload(add(headStart, 128))\n        validator_revert_contract_ITokenMetadataResolver(value_2)\n        value4 := value_2\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), not(0)))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_t_string_memory_ptr_to_t_string_storage(slot, src)\n    {\n        let newLen := mload(src)\n        if gt(newLen, sub(shl(64, 1), 1)) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), newLen)\n        let srcOffset := 0\n        let srcOffset_1 := 0x20\n        srcOffset := 0x20\n        switch gt(newLen, 31)\n        case 1 {\n            let loopEnd := and(newLen, not(31))\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := 0\n            for { } lt(i, loopEnd) { i := add(i, srcOffset_1) }\n            {\n                sstore(dstPtr, mload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, srcOffset_1)\n            }\n            if lt(loopEnd, newLen)\n            {\n                let lastValue := mload(add(src, srcOffset))\n                sstore(dstPtr, and(lastValue, not(shr(and(shl(3, newLen), 248), not(0)))))\n            }\n            sstore(slot, add(shl(1, newLen), 1))\n        }\n        default {\n            let value := 0\n            if newLen\n            {\n                value := mload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, newLen))\n        }\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b5060405162002df338038062002df3833981016040819052620000349162000379565b338585856200005283838362000049620000b6565b929190620000ec565b6200005c62000133565b5050506200007b81620000746200015560201b60201c565b9062000185565b5062000086620001f8565b6001600160a01b03908116608052600080546001600160a01b0319169290911691909117905550620005a4915050565b600080620000e660017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a562000425565b92915050565b83620000f98482620004d8565b50600184016200010a8382620004d8565b5060029390930180546001600160a01b0319166001600160a01b03909416939093179092555050565b62000153635b5e139f60e01b60016200014b6200020b565b91906200023b565b565b600080620000e660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000425565b6001600160a01b03811615620001dc5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001f46307f5828d60e41b60016200014b6200020b565b5050565b62000153638e773e1360e01b60016200014b5b600080620000e660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000425565b600160e01b6001600160e01b03198316016200026a576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002c057600080fd5b81516001600160401b0380821115620002dd57620002dd62000298565b604051601f8301601f19908116603f0116810190828211818310171562000308576200030862000298565b81604052838152602092508660208588010111156200032657600080fd5b600091505b838210156200034a57858201830151818301840152908201906200032b565b6000602085830101528094505050505092915050565b6001600160a01b03811681146200037657600080fd5b50565b600080600080600060a086880312156200039257600080fd5b85516001600160401b0380821115620003aa57600080fd5b620003b889838a01620002ae565b96506020880151915080821115620003cf57600080fd5b50620003de88828901620002ae565b9450506040860151620003f18162000360565b6060870151909350620004048162000360565b6080870151909250620004178162000360565b809150509295509295909350565b81810381811115620000e657634e487b7160e01b600052601160045260246000fd5b600181811c908216806200045c57607f821691505b6020821081036200047d57634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620004d3576000816000526020600020601f850160051c81016020861015620004ae5750805b601f850160051c820191505b81811015620004cf57828155600101620004ba565b5050505b505050565b81516001600160401b03811115620004f457620004f462000298565b6200050c8162000505845462000447565b8462000483565b602080601f8311600181146200054457600084156200052b5750858301515b600019600386901b1c1916600185901b178555620004cf565b600085815260208120601f198616915b82811015620005755788860151825594840194600190910190840162000554565b5085821015620005945787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60805161282c620005c76000396000818161059b0152610a7e015261282c6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a22cb465116100a2578063d547741f11610071578063d547741f14610424578063e985e9c514610437578063f2fde38b14610445578063f5b541a61461045857600080fd5b8063a22cb465146103c4578063b88d4fde146103d7578063c87b56dd146103ea578063d5391393146103fd57600080fd5b806391d14854116100de57806391d148541461038e57806395d89b41146103a157806395f94bc4146103a9578063a0c76f62146103bc57600080fd5b806370a08231146103525780638bb9c5bf146103735780638da5cb5b1461038657600080fd5b80633886d5121161017157806342966c681161014b57806342966c68146102f35780634bae2be81461030657806354c7be061461032c5780636352211e1461033f57600080fd5b80633886d5121461029757806342532616146102cd57806342842e0e146102e057600080fd5b8063095ea7b3116101ad578063095ea7b31461024957806319c02b271461025e57806323b872dd146102715780632f2ff15d1461028457600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611e15565b61047f565b60405190151581526020015b60405180910390f35b610204610499565b6040516101f39190611ea0565b61022461021f366004611eb3565b6104a8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61025c610257366004611eee565b6104dc565b005b61025c61026c366004611eee565b61050e565b61025c61027f366004611f1a565b610777565b61025c610292366004611f5b565b6109c3565b6102246102a5366004611eb3565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61025c6102db366004611eb3565b6109f1565b61025c6102ee366004611f1a565b610c20565b61025c610301366004611eb3565b610d71565b610319610314366004611eb3565b610f6d565b6040516101f39796959493929190611f8b565b61025c61033a366004611ff2565b6110f4565b61022461034d366004611eb3565b611156565b610365610360366004612052565b611164565b6040519081526020016101f3565b61025c610381366004611eb3565b611178565b61022461118f565b6101e761039c366004611f5b565b6111b6565b610204611201565b61025c6103b7366004612052565b61120b565b61022461125e565b61025c6103d236600461207d565b611288565b61025c6103e53660046120ab565b6112ba565b6102046103f8366004611eb3565b6113f9565b6103657f6d696e746572000000000000000000000000000000000000000000000000000081565b61025c610432366004611f5b565b61141c565b6101e761021f36600461214a565b61025c610453366004612052565b61143f565b6103657f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104938261048d611453565b90611481565b92915050565b60606104a361155b565b905090565b60006040517f5211920d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602081815260408084209051610530939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905233602483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f9236a3990604401602060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b919061225f565b610653576106537f6f70657261746f720000000000000000000000000000000000000000000000003361064c61156d565b919061159b565b600061066783610661611621565b9061164f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106eb576040517f4c349c0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024015b60405180910390fd5b60008381526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881690811790915591513381528592917f1617c30910ed9def77a5583fb42361192fa9e1a3ae60209c6281a276f88f9624910160405180910390a350505050565b600061078582610661611621565b905073ffffffffffffffffffffffffffffffffffffffff811633146107df576040517f14dbb536000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044016106e2565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580610841575060008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff848116911614155b1561089f576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015282166024820152604481018390526064016106e2565b8273ffffffffffffffffffffffffffffffffffffffff166108be611621565b600084815260209190915260409020556108d6611621565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001919091016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561092d611621565b73ffffffffffffffffffffffffffffffffffffffff808516600081815260019384016020908152604080832080549096019095558682526002905283812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559251859391928516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b336109d6816109d06116b8565b906116e6565b6109ec8383836109e461156d565b929190611751565b505050565b60008181526001602081815260408084209051610a13939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905233602483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f9236a3990604401602060405180830381865afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe919061225f565b610b2f57610b2f7f6f70657261746f720000000000000000000000000000000000000000000000003361064c61156d565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16610b8d576040517fd43553b5000000000000000000000000000000000000000000000000000000008152600481018390526024016106e2565b600082815260026020908152604091829020549151338152849273ffffffffffffffffffffffffffffffffffffffff16917f648e1fca65e8b59490cc7c26438ac6ed40ea5c54de21e85e2ef44a52b8f2ebab910160405180910390a350600090815260026020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610c2b838383610777565b73ffffffffffffffffffffffffffffffffffffffff82163b156109ec576040517f150b7a020000000000000000000000000000000000000000000000000000000080825233600483015273ffffffffffffffffffffffffffffffffffffffff858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf9919061227c565b7fffffffff0000000000000000000000000000000000000000000000000000000016146109ec576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018290526044016106e2565b60008181526001602081815260408084209051610d93939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061225f565b15610f37576000610e7583610661611621565b90507fdead000000000000000000000000000000000000000000000000000000000000610ea0611621565b60008581526020919091526040902055610eb8611621565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c0100000000000000000000000084048216947401000000000000000000000000000000000000000090940490911692610fe390612178565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612178565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b50505050509080600201805461107190612178565b80601f016020809104026020016040519081016040528092919081815260200182805461109d90612178565b80156110ea5780601f106110bf576101008083540402835291602001916110ea565b820191906000526020600020905b8154815290600101906020018083116110cd57829003601f168201915b5050505050905087565b6111217f6d696e74657200000000000000000000000000000000000000000000000000003361064c61156d565b611135838361112e611621565b9190611828565b6000828152600160205260409020819061114f82826124cc565b5050505050565b600061049382610661611621565b600061049382611172611621565b90611942565b61118c338261118561156d565b91906119be565b50565b60006104a361119c6116b8565b5473ffffffffffffffffffffffffffffffffffffffff1690565b60006111fa83836111c561156d565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104a3611a62565b611217336109d06116b8565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104a361126b611a74565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f5211920d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112c5858585610777565b73ffffffffffffffffffffffffffffffffffffffff84163b1561114f576040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff86169063150b7a029061133e9033908a90899089908990600401612672565b6020604051808303816000875af115801561135d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611381919061227c565b7fffffffff00000000000000000000000000000000000000000000000000000000161461114f576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481018490526044016106e2565b606061140782610661611621565b506104933083611415611a74565b9190611aa2565b33611429816109d06116b8565b6109ec83838361143761156d565b929190611b62565b61118c338261144c6116b8565b9190611c2c565b60008061049360017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6126f1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016114d157506000610493565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161152257506001610493565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104a3611568611a74565b611d40565b60008061049360017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236126f1565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109ec576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff821660248201526044016106e2565b60008061049360017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16126f1565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116ae576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024016106e2565b805b949350505050565b60008061049360017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6126f1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610f69576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106e2565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166118225760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b73ffffffffffffffffffffffffffffffffffffffff8216611875576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff16156118d4576040517f753eceac000000000000000000000000000000000000000000000000000000008152600481018290526024016106e2565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611991576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b6119c983828461159b565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104a3611a6f611a74565b611dd6565b60008061049360017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56126f1565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b0919081019061272b565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156118225760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611819565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c99576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e2565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118225783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611d5190612178565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7d90612178565b8015611dca5780601f10611d9f57610100808354040283529160200191611dca565b820191906000526020600020905b815481529060010190602001808311611dad57829003601f168201915b50505050509050919050565b6060816001018054611d5190612178565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461118c57600080fd5b600060208284031215611e2757600080fd5b81356111fa81611de7565b60005b83811015611e4d578181015183820152602001611e35565b50506000910152565b60008151808452611e6e816020860160208601611e32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111fa6020830184611e56565b600060208284031215611ec557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461118c57600080fd5b60008060408385031215611f0157600080fd5b8235611f0c81611ecc565b946020939093013593505050565b600080600060608486031215611f2f57600080fd5b8335611f3a81611ecc565b92506020840135611f4a81611ecc565b929592945050506040919091013590565b60008060408385031215611f6e57600080fd5b823591506020830135611f8081611ecc565b809150509250929050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a08201819052600090611fd290830185611e56565b82810360c0840152611fe48185611e56565b9a9950505050505050505050565b60008060006060848603121561200757600080fd5b833561201281611ecc565b925060208401359150604084013567ffffffffffffffff81111561203557600080fd5b840160e0818703121561204757600080fd5b809150509250925092565b60006020828403121561206457600080fd5b81356111fa81611ecc565b801515811461118c57600080fd5b6000806040838503121561209057600080fd5b823561209b81611ecc565b91506020830135611f808161206f565b6000806000806000608086880312156120c357600080fd5b85356120ce81611ecc565b945060208601356120de81611ecc565b935060408601359250606086013567ffffffffffffffff8082111561210257600080fd5b818801915088601f83011261211657600080fd5b81358181111561212557600080fd5b89602082850101111561213757600080fd5b9699959850939650602001949392505050565b6000806040838503121561215d57600080fd5b823561216881611ecc565b91506020830135611f8081611ecc565b600181811c9082168061218c57607f821691505b6020821081036121c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008083546121d981612178565b600182811680156121f1576001811461222457612253565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450612253565b8760005260208060002060005b8581101561224a5781548a820152908401908201612231565b50505082870194505b50929695505050505050565b60006020828403121561227157600080fd5b81516111fa8161206f565b60006020828403121561228e57600080fd5b81516111fa81611de7565b6000813561ffff8116811461049357600080fd5b6000813567ffffffffffffffff8116811461049357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126122fc57600080fd5b83018035915067ffffffffffffffff82111561231757600080fd5b60200191503681900382131561232c57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156109ec576000816000526020600020601f850160051c8101602086101561238b5750805b601f850160051c820191505b818110156123aa57828155600101612397565b505050505050565b67ffffffffffffffff8311156123ca576123ca612333565b6123de836123d88354612178565b83612362565b6000601f84116001811461243057600085156123fa5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561114f565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561247f578685013582556020948501946001909201910161245f565b50868210156124ba577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff6124d883612299565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff000061251360208601612299565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff00000000612559604087016122ad565b60201b16837fffffffffffffffffffffffffffffffffffffffff00000000000000000000000084161782171784555050506125de612599606084016122ad565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b61263a6125ed608084016122ad565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b61264760a08301836122c7565b6126558183600186016123b2565b505061266460c08301836122c7565b6118228183600286016123b2565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b81810381811115610493577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006020828403121561273d57600080fd5b815167ffffffffffffffff8082111561275557600080fd5b818401915084601f83011261276957600080fd5b81518181111561277b5761277b612333565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156127c1576127c1612333565b816040528281528760208487010111156127da57600080fd5b6127eb836020830160208801611e32565b97965050505050505056fea264697066735822122087a9f5cbaf4f8aae8726258c952e68064d610dd28c157f7c2acdd4767ecc5b8364736f6c63430008160033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2DF3 CODESIZE SUB DUP1 PUSH3 0x2DF3 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x379 JUMP JUMPDEST CALLER DUP6 DUP6 DUP6 PUSH3 0x52 DUP4 DUP4 DUP4 PUSH3 0x49 PUSH3 0xB6 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH3 0xEC JUMP JUMPDEST PUSH3 0x5C PUSH3 0x133 JUMP JUMPDEST POP POP POP PUSH3 0x7B DUP2 PUSH3 0x74 PUSH3 0x155 PUSH1 0x20 SHL PUSH1 0x20 SHR JUMP JUMPDEST SWAP1 PUSH3 0x185 JUMP JUMPDEST POP PUSH3 0x86 PUSH3 0x1F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND SWAP3 SWAP1 SWAP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x5A4 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE6 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH3 0x425 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST DUP4 PUSH3 0xF9 DUP5 DUP3 PUSH3 0x4D8 JUMP JUMPDEST POP PUSH1 0x1 DUP5 ADD PUSH3 0x10A DUP4 DUP3 PUSH3 0x4D8 JUMP JUMPDEST POP PUSH1 0x2 SWAP4 SWAP1 SWAP4 ADD DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE POP POP JUMP JUMPDEST PUSH3 0x153 PUSH4 0x5B5E139F PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x14B PUSH3 0x20B JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x23B JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE6 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x1DC JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x1F4 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x14B PUSH3 0x20B JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH3 0x153 PUSH4 0x8E773E13 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x14B JUMPDEST PUSH1 0x0 DUP1 PUSH3 0xE6 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x425 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x26A JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 DUP3 PUSH1 0x1F DUP4 ADD SLT PUSH3 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x2DD JUMPI PUSH3 0x2DD PUSH3 0x298 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP4 ADD PUSH1 0x1F NOT SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP3 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH3 0x308 JUMPI PUSH3 0x308 PUSH3 0x298 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP4 DUP2 MSTORE PUSH1 0x20 SWAP3 POP DUP7 PUSH1 0x20 DUP6 DUP9 ADD ADD GT ISZERO PUSH3 0x326 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SWAP2 POP JUMPDEST DUP4 DUP3 LT ISZERO PUSH3 0x34A JUMPI DUP6 DUP3 ADD DUP4 ADD MLOAD DUP2 DUP4 ADD DUP5 ADD MSTORE SWAP1 DUP3 ADD SWAP1 PUSH3 0x32B JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP6 DUP4 ADD ADD MSTORE DUP1 SWAP5 POP POP POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x376 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0xA0 DUP7 DUP9 SUB SLT ISZERO PUSH3 0x392 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP1 DUP3 GT ISZERO PUSH3 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x3B8 DUP10 DUP4 DUP11 ADD PUSH3 0x2AE JUMP JUMPDEST SWAP7 POP PUSH1 0x20 DUP9 ADD MLOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH3 0x3CF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH3 0x3DE DUP9 DUP3 DUP10 ADD PUSH3 0x2AE JUMP JUMPDEST SWAP5 POP POP PUSH1 0x40 DUP7 ADD MLOAD PUSH3 0x3F1 DUP2 PUSH3 0x360 JUMP JUMPDEST PUSH1 0x60 DUP8 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x404 DUP2 PUSH3 0x360 JUMP JUMPDEST PUSH1 0x80 DUP8 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x417 DUP2 PUSH3 0x360 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 SWAP6 POP SWAP3 SWAP6 SWAP1 SWAP4 POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0xE6 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH3 0x45C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH3 0x47D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH3 0x4D3 JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH3 0x4AE JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH3 0x4CF JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x4BA JUMP JUMPDEST POP POP POP JUMPDEST POP POP POP JUMP JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0x40 SHL SUB DUP2 GT ISZERO PUSH3 0x4F4 JUMPI PUSH3 0x4F4 PUSH3 0x298 JUMP JUMPDEST PUSH3 0x50C DUP2 PUSH3 0x505 DUP5 SLOAD PUSH3 0x447 JUMP JUMPDEST DUP5 PUSH3 0x483 JUMP JUMPDEST PUSH1 0x20 DUP1 PUSH1 0x1F DUP4 GT PUSH1 0x1 DUP2 EQ PUSH3 0x544 JUMPI PUSH1 0x0 DUP5 ISZERO PUSH3 0x52B JUMPI POP DUP6 DUP4 ADD MLOAD JUMPDEST PUSH1 0x0 NOT PUSH1 0x3 DUP7 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP6 SWAP1 SHL OR DUP6 SSTORE PUSH3 0x4CF JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 DUP2 KECCAK256 PUSH1 0x1F NOT DUP7 AND SWAP2 JUMPDEST DUP3 DUP2 LT ISZERO PUSH3 0x575 JUMPI DUP9 DUP7 ADD MLOAD DUP3 SSTORE SWAP5 DUP5 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 DUP5 ADD PUSH3 0x554 JUMP JUMPDEST POP DUP6 DUP3 LT ISZERO PUSH3 0x594 JUMPI DUP8 DUP6 ADD MLOAD PUSH1 0x0 NOT PUSH1 0x3 DUP9 SWAP1 SHL PUSH1 0xF8 AND SHR NOT AND DUP2 SSTORE JUMPDEST POP POP POP POP POP PUSH1 0x1 SWAP1 DUP2 SHL ADD SWAP1 SSTORE POP JUMP JUMPDEST PUSH1 0x80 MLOAD PUSH2 0x282C PUSH3 0x5C7 PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x59B ADD MSTORE PUSH2 0xA7E ADD MSTORE PUSH2 0x282C PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x424 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3886D512 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3886D512 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x42532616 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x19C02B27 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E15 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x4A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST PUSH2 0x25C PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x319 PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0xF6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0x25C PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x1FF2 JUMP JUMPDEST PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x34D CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x365 PUSH2 0x360 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x1178 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x118F JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x11B6 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x1201 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x120B JUMP JUMPDEST PUSH2 0x224 PUSH2 0x125E JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x207D JUMP JUMPDEST PUSH2 0x1288 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x20AB JUMP JUMPDEST PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x365 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x432 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x141C JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x214A JUMP JUMPDEST PUSH2 0x25C PUSH2 0x453 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST PUSH2 0x365 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x48D PUSH2 0x1453 JUMP JUMPDEST SWAP1 PUSH2 0x1481 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x155B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x5211920D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8CD22D1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x530 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE SWAP2 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH2 0x653 JUMPI PUSH2 0x653 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x159B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 PUSH2 0x164F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x4C349C0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD CALLER DUP2 MSTORE DUP6 SWAP3 SWAP2 PUSH32 0x1617C30910ED9DEF77A5583FB42361192FA9E1A3AE60209C6281A276F88F9624 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x785 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x841 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8BE PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x8D6 PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE PUSH2 0x92D PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP7 ADD SWAP1 SWAP6 SSTORE DUP7 DUP3 MSTORE PUSH1 0x2 SWAP1 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP3 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x9D6 DUP2 PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST SWAP1 PUSH2 0x16E6 JUMP JUMPDEST PUSH2 0x9EC DUP4 DUP4 DUP4 PUSH2 0x9E4 PUSH2 0x156D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1751 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0xA13 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE SWAP2 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xADA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAFE SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH2 0xB2F JUMPI PUSH2 0xB2F PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB8D JUMPI PUSH1 0x40 MLOAD PUSH32 0xD43553B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD CALLER DUP2 MSTORE DUP5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH32 0x648E1FCA65E8B59490CC7C26438AC6ED40EA5C54DE21E85E2EF44A52B8F2EBAB SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC2B DUP4 DUP4 DUP4 PUSH2 0x777 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCF9 SWAP2 SWAP1 PUSH2 0x227C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0xD93 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST ISZERO PUSH2 0xF37 JUMPI PUSH1 0x0 PUSH2 0xE75 DUP4 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0xEA0 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xEB8 PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0xFE3 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x100F SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x105C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1031 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x105C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x103F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x1071 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x109D SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10EA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10BF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10EA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x10CD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x1121 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST PUSH2 0x1135 DUP4 DUP4 PUSH2 0x112E PUSH2 0x1621 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1828 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x114F DUP3 DUP3 PUSH2 0x24CC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x1172 PUSH2 0x1621 JUMP JUMPDEST SWAP1 PUSH2 0x1942 JUMP JUMPDEST PUSH2 0x118C CALLER DUP3 PUSH2 0x1185 PUSH2 0x156D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3 PUSH2 0x119C PUSH2 0x16B8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FA DUP4 DUP4 PUSH2 0x11C5 PUSH2 0x156D JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1A62 JUMP JUMPDEST PUSH2 0x1217 CALLER PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3 PUSH2 0x126B PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5211920D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12C5 DUP6 DUP6 DUP6 PUSH2 0x777 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x114F JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x133E SWAP1 CALLER SWAP1 DUP11 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2672 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x135D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x227C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x114F JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1407 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST POP PUSH2 0x493 ADDRESS DUP4 PUSH2 0x1415 PUSH2 0x1A74 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1AA2 JUMP JUMPDEST CALLER PUSH2 0x1429 DUP2 PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST PUSH2 0x9EC DUP4 DUP4 DUP4 PUSH2 0x1437 PUSH2 0x156D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1B62 JUMP JUMPDEST PUSH2 0x118C CALLER DUP3 PUSH2 0x144C PUSH2 0x16B8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x14D1 JUMPI POP PUSH1 0x0 PUSH2 0x493 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1522 JUMPI POP PUSH1 0x1 PUSH2 0x493 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1568 PUSH2 0x1A74 JUMP JUMPDEST PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16AE JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x26F1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xF69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1822 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1875 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x18D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1991 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x19C9 DUP4 DUP3 DUP5 PUSH2 0x159B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1A6F PUSH2 0x1A74 JUMP JUMPDEST PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x272B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1822 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1819 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1822 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1D51 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D7D SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DCA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D9F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DCA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DAD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1D51 SWAP1 PUSH2 0x2178 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11FA DUP2 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E4D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E35 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1E6E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x11FA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F0C DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F3A DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1F4A DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x1ECC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1FD2 SWAP1 DUP4 ADD DUP6 PUSH2 0x1E56 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x1FE4 DUP2 DUP6 PUSH2 0x1E56 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2012 DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x2047 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2064 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11FA DUP2 PUSH2 0x1ECC JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x209B DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x20C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x20CE DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x20DE DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x215D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2168 DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x1ECC JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x218C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21C5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x21D9 DUP2 PUSH2 0x2178 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2224 JUMPI PUSH2 0x2253 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x2253 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x224A JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x2231 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11FA DUP2 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11FA DUP2 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x22FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x232C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x238B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2397 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x23CA JUMPI PUSH2 0x23CA PUSH2 0x2333 JUMP JUMPDEST PUSH2 0x23DE DUP4 PUSH2 0x23D8 DUP4 SLOAD PUSH2 0x2178 JUMP JUMPDEST DUP4 PUSH2 0x2362 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2430 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x23FA JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x114F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x247F JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x245F JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x24BA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x24D8 DUP4 PUSH2 0x2299 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2513 PUSH1 0x20 DUP7 ADD PUSH2 0x2299 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x2559 PUSH1 0x40 DUP8 ADD PUSH2 0x22AD JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x25DE PUSH2 0x2599 PUSH1 0x60 DUP5 ADD PUSH2 0x22AD JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x263A PUSH2 0x25ED PUSH1 0x80 DUP5 ADD PUSH2 0x22AD JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2647 PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x22C7 JUMP JUMPDEST PUSH2 0x2655 DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST POP POP PUSH2 0x2664 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x22C7 JUMP JUMPDEST PUSH2 0x1822 DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE DUP3 PUSH1 0x80 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xA0 DUP5 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xA0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x493 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x273D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x277B JUMPI PUSH2 0x277B PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x27C1 JUMPI PUSH2 0x27C1 PUSH2 0x2333 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27EB DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E32 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xA9 CREATE2 0xCB 0xAF 0x4F DUP11 0xAE DUP8 0x26 0x25 DUP13 SWAP6 0x2E PUSH9 0x64D610DD28C157F7C 0x2A 0xCD 0xD4 PUSH23 0x7ECC5B8364736F6C634300081600330000000000000000 ","sourceMap":"1728:11655:41:-:0;;;3113:448;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3355:10;3382:9;3393:11;3406:16;1139:77:20;3382:9:41;3393:11;3406:16;1139:29:20;:27;:29::i;:::-;:45;:77;;:45;:77::i;:::-;1226:34;:32;:34::i;:::-;1034:233;;;1008:63:2;1058:12;1008:33;:31;;;:33;;:::i;:::-;:49;;:63::i;:::-;-1:-1:-1;3434:34:41::2;:32;:34::i;:::-;-1:-1:-1::0;;;;;3478:26:41;;::::2;;::::0;3514:19:::2;:40:::0;;-1:-1:-1;;;;;;3514:40:41::2;::::0;;;::::2;::::0;;;::::2;::::0;;-1:-1:-1;1728:11655:41;;-1:-1:-1;;1728:11655:41;3441:174:36;3482:16;;456:70;525:1;464:57;456:70;:::i;:::-;448:79;3441:174;-1:-1:-1;;3441:174:36:o;1021:322::-;1219:1;:23;1233:9;1219:1;:23;:::i;:::-;-1:-1:-1;1252:13:36;;;:27;1268:11;1252:13;:27;:::i;:::-;-1:-1:-1;1289:23:36;;;;;:47;;-1:-1:-1;;;;;;1289:47:36;-1:-1:-1;;;;;1289:47:36;;;;;;;;;;-1:-1:-1;;1021:322:36:o;3013:153:33:-;3062:97;-1:-1:-1;;;3154:4:33;3062:34;:32;:34::i;:::-;:56;:97;:56;:97::i;:::-;3013:153::o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;1567:341::-;-1:-1:-1;;;;;1655:26:13;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:13;-1:-1:-1;;;;;1697:30:13;;;;;;;1746:46;;-1:-1:-1;;1746:46:13;;-1:-1:-1;;1746:46:13;1651:152;1812:89;-1:-1:-1;;;1896:4:13;1812:34;:32;:34::i;:89::-;1567:341;;:::o;3258:153:33:-;3307:97;-1:-1:-1;;;3399:4:33;3307:34;1705:174:17;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:17;;;877:68;;925:20;;-1:-1:-1;;;925:20:17;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:17;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:17;;;;;;;;;;773:235::o;14:127:46:-;75:10;70:3;66:20;63:1;56:31;106:4;103:1;96:15;130:4;127:1;120:15;146:844;200:5;253:3;246:4;238:6;234:17;230:27;220:55;;271:1;268;261:12;220:55;294:13;;-1:-1:-1;;;;;356:10:46;;;353:36;;;369:18;;:::i;:::-;444:2;438:9;412:2;498:13;;-1:-1:-1;;494:22:46;;;518:2;490:31;486:40;474:53;;;542:18;;;562:22;;;539:46;536:72;;;588:18;;:::i;:::-;628:10;624:2;617:22;663:2;655:6;648:18;685:4;675:14;;732:3;725:4;720:2;712:6;708:15;704:26;701:35;698:55;;;749:1;746;739:12;698:55;771:1;762:10;;781:133;795:2;792:1;789:9;781:133;;;883:14;;;879:23;;873:30;852:14;;;848:23;;841:63;806:10;;;;781:133;;;958:1;951:4;946:2;938:6;934:15;930:26;923:37;978:6;969:15;;;;;;146:844;;;;:::o;995:155::-;-1:-1:-1;;;;;1094:31:46;;1084:42;;1074:70;;1140:1;1137;1130:12;1074:70;995:155;:::o;1155:1119::-;1368:6;1376;1384;1392;1400;1453:3;1441:9;1432:7;1428:23;1424:33;1421:53;;;1470:1;1467;1460:12;1421:53;1497:16;;-1:-1:-1;;;;;1562:14:46;;;1559:34;;;1589:1;1586;1579:12;1559:34;1612:61;1665:7;1656:6;1645:9;1641:22;1612:61;:::i;:::-;1602:71;;1719:2;1708:9;1704:18;1698:25;1682:41;;1748:2;1738:8;1735:16;1732:36;;;1764:1;1761;1754:12;1732:36;;1787:63;1842:7;1831:8;1820:9;1816:24;1787:63;:::i;:::-;1777:73;;;1893:2;1882:9;1878:18;1872:25;1906:55;1955:5;1906:55;:::i;:::-;2030:2;2015:18;;2009:25;1980:5;;-1:-1:-1;2043:57:46;2009:25;2043:57;:::i;:::-;2171:3;2156:19;;2150:26;2119:7;;-1:-1:-1;2185:57:46;2150:26;2185:57;:::i;:::-;2261:7;2251:17;;;1155:1119;;;;;;;;:::o;2279:225::-;2346:9;;;2367:11;;;2364:134;;;2420:10;2415:3;2411:20;2408:1;2401:31;2455:4;2452:1;2445:15;2483:4;2480:1;2473:15;2509:380;2588:1;2584:12;;;;2631;;;2652:61;;2706:4;2698:6;2694:17;2684:27;;2652:61;2759:2;2751:6;2748:14;2728:18;2725:38;2722:161;;2805:10;2800:3;2796:20;2793:1;2786:31;2840:4;2837:1;2830:15;2868:4;2865:1;2858:15;2722:161;;2509:380;;;:::o;3020:543::-;3122:2;3117:3;3114:11;3111:446;;;3158:1;3182:5;3179:1;3172:16;3226:4;3223:1;3213:18;3296:2;3284:10;3280:19;3277:1;3273:27;3267:4;3263:38;3332:4;3320:10;3317:20;3314:47;;;-1:-1:-1;3355:4:46;3314:47;3410:2;3405:3;3401:12;3398:1;3394:20;3388:4;3384:31;3374:41;;3465:82;3483:2;3476:5;3473:13;3465:82;;;3528:17;;;3509:1;3498:13;3465:82;;;3469:3;;;3111:446;3020:543;;;:::o;3739:1345::-;3859:10;;-1:-1:-1;;;;;3881:30:46;;3878:56;;;3914:18;;:::i;:::-;3943:97;4033:6;3993:38;4025:4;4019:11;3993:38;:::i;:::-;3987:4;3943:97;:::i;:::-;4095:4;;4152:2;4141:14;;4169:1;4164:663;;;;4871:1;4888:6;4885:89;;;-1:-1:-1;4940:19:46;;;4934:26;4885:89;-1:-1:-1;;3696:1:46;3692:11;;;3688:24;3684:29;3674:40;3720:1;3716:11;;;3671:57;4987:81;;4134:944;;4164:663;2967:1;2960:14;;;3004:4;2991:18;;-1:-1:-1;;4200:20:46;;;4318:236;4332:7;4329:1;4326:14;4318:236;;;4421:19;;;4415:26;4400:42;;4513:27;;;;4481:1;4469:14;;;;4348:19;;4318:236;;;4322:3;4582:6;4573:7;4570:19;4567:201;;;4643:19;;;4637:26;-1:-1:-1;;4726:1:46;4722:14;;;4738:3;4718:24;4714:37;4710:42;4695:58;4680:74;;4567:201;-1:-1:-1;;;;;4814:1:46;4798:14;;;4794:22;4781:36;;-1:-1:-1;3739:1345:46:o;:::-;1728:11655:41;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@MINTER_ROLE_4215":{"entryPoint":null,"id":4215,"parameterSlots":0,"returnSlots":0},"@OPERATOR_ROLE_4218":{"entryPoint":null,"id":4218,"parameterSlots":0,"returnSlots":0},"@_msgSender_3841":{"entryPoint":null,"id":3841,"parameterSlots":0,"returnSlots":1},"@_tokenExists_3219":{"entryPoint":null,"id":3219,"parameterSlots":1,"returnSlots":1},"@_tokenOwner_3204":{"entryPoint":null,"id":3204,"parameterSlots":1,"returnSlots":1},"@allowTransfer_4481":{"entryPoint":1294,"id":4481,"parameterSlots":2,"returnSlots":0},"@allowedTransfers_4227":{"entryPoint":null,"id":4227,"parameterSlots":0,"returnSlots":0},"@approve_4602":{"entryPoint":1244,"id":4602,"parameterSlots":2,"returnSlots":0},"@balanceOf_3002":{"entryPoint":6466,"id":3002,"parameterSlots":2,"returnSlots":1},"@balanceOf_4562":{"entryPoint":4452,"id":4562,"parameterSlots":1,"returnSlots":1},"@burn_4411":{"entryPoint":3441,"id":4411,"parameterSlots":1,"returnSlots":0},"@enforceHasRole_557":{"entryPoint":5531,"id":557,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_819":{"entryPoint":5862,"id":819,"parameterSlots":2,"returnSlots":0},"@getApproved_4590":{"entryPoint":1192,"id":4590,"parameterSlots":1,"returnSlots":1},"@grantRole_110":{"entryPoint":2499,"id":110,"parameterSlots":2,"returnSlots":0},"@grantRole_410":{"entryPoint":5969,"id":410,"parameterSlots":4,"returnSlots":0},"@hasRole_178":{"entryPoint":4534,"id":178,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@isApprovedForAll_4801":{"entryPoint":null,"id":4801,"parameterSlots":2,"returnSlots":1},"@isContract_3517":{"entryPoint":null,"id":3517,"parameterSlots":1,"returnSlots":1},"@layout_3130":{"entryPoint":5665,"id":3130,"parameterSlots":0,"returnSlots":1},"@layout_3498":{"entryPoint":6772,"id":3498,"parameterSlots":0,"returnSlots":1},"@layout_593":{"entryPoint":5485,"id":593,"parameterSlots":0,"returnSlots":1},"@layout_851":{"entryPoint":5816,"id":851,"parameterSlots":0,"returnSlots":1},"@layout_999":{"entryPoint":5203,"id":999,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3297":{"entryPoint":4702,"id":3297,"parameterSlots":0,"returnSlots":1},"@metadataResolver_3465":{"entryPoint":null,"id":3465,"parameterSlots":1,"returnSlots":1},"@mint_2256":{"entryPoint":6184,"id":2256,"parameterSlots":3,"returnSlots":0},"@mint_4343":{"entryPoint":4340,"id":4343,"parameterSlots":3,"returnSlots":0},"@name_1138":{"entryPoint":1177,"id":1138,"parameterSlots":0,"returnSlots":1},"@name_3270":{"entryPoint":5467,"id":3270,"parameterSlots":0,"returnSlots":1},"@name_3438":{"entryPoint":7488,"id":3438,"parameterSlots":1,"returnSlots":1},"@ownerOf_3034":{"entryPoint":5711,"id":3034,"parameterSlots":2,"returnSlots":1},"@ownerOf_4578":{"entryPoint":4438,"id":4578,"parameterSlots":1,"returnSlots":1},"@owner_209":{"entryPoint":4495,"id":209,"parameterSlots":0,"returnSlots":1},"@owner_772":{"entryPoint":null,"id":772,"parameterSlots":1,"returnSlots":1},"@removeAllowedTransfer_4546":{"entryPoint":2545,"id":4546,"parameterSlots":1,"returnSlots":0},"@renounceRole_159":{"entryPoint":4472,"id":159,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":6590,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_142":{"entryPoint":5148,"id":142,"parameterSlots":2,"returnSlots":0},"@revokeRole_447":{"entryPoint":7010,"id":447,"parameterSlots":4,"returnSlots":0},"@safeTransferFrom_4745":{"entryPoint":3104,"id":4745,"parameterSlots":3,"returnSlots":0},"@safeTransferFrom_4787":{"entryPoint":4794,"id":4787,"parameterSlots":5,"returnSlots":0},"@setApprovalForAll_4614":{"entryPoint":4744,"id":4614,"parameterSlots":2,"returnSlots":0},"@setRevocationRegistry_4306":{"entryPoint":4619,"id":4306,"parameterSlots":1,"returnSlots":0},"@supportsInterface_881":{"entryPoint":1151,"id":881,"parameterSlots":1,"returnSlots":1},"@supportsInterface_987":{"entryPoint":5249,"id":987,"parameterSlots":2,"returnSlots":1},"@symbol_1152":{"entryPoint":4609,"id":1152,"parameterSlots":0,"returnSlots":1},"@symbol_3283":{"entryPoint":6754,"id":3283,"parameterSlots":0,"returnSlots":1},"@symbol_3451":{"entryPoint":7638,"id":3451,"parameterSlots":1,"returnSlots":1},"@tokenMetadataURI_3486":{"entryPoint":6818,"id":3486,"parameterSlots":3,"returnSlots":1},"@tokenURI_1180":{"entryPoint":5113,"id":1180,"parameterSlots":1,"returnSlots":1},"@transferFrom_4705":{"entryPoint":1911,"id":4705,"parameterSlots":3,"returnSlots":0},"@transferOwnership_226":{"entryPoint":5183,"id":226,"parameterSlots":1,"returnSlots":0},"@transferOwnership_759":{"entryPoint":7212,"id":759,"parameterSlots":3,"returnSlots":0},"@vcData_4223":{"entryPoint":3949,"id":4223,"parameterSlots":0,"returnSlots":0},"abi_decode_tuple_t_address":{"entryPoint":8274,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_address":{"entryPoint":8522,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_addresst_uint256":{"entryPoint":7962,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":8363,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_bool":{"entryPoint":8317,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":7918,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptr":{"entryPoint":8178,"id":null,"parameterSlots":2,"returnSlots":3},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":8799,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":8027,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":7701,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes4_fromMemory":{"entryPoint":8828,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IRevocationRegistry_$4884":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_string_memory_ptr_fromMemory":{"entryPoint":10027,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":7859,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_string":{"entryPoint":7766,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":8651,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9842,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3312__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":7840,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed":{"entryPoint":8075,"id":null,"parameterSlots":8,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"access_calldata_tail_string_calldata":{"entryPoint":8903,"id":null,"parameterSlots":2,"returnSlots":2},"array_dataslot_string_storage":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9969,"id":null,"parameterSlots":2,"returnSlots":1},"clean_up_bytearray_end_slots_string_storage":{"entryPoint":9058,"id":null,"parameterSlots":3,"returnSlots":0},"copy_byte_array_to_storage_from_string_calldata_to_string":{"entryPoint":9138,"id":null,"parameterSlots":3,"returnSlots":0},"copy_memory_to_memory_with_cleanup":{"entryPoint":7730,"id":null,"parameterSlots":3,"returnSlots":0},"extract_byte_array_length":{"entryPoint":8568,"id":null,"parameterSlots":1,"returnSlots":1},"extract_used_part_and_set_length_of_short_byte_array":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x41":{"entryPoint":9011,"id":null,"parameterSlots":0,"returnSlots":0},"read_from_calldatat_uint16":{"entryPoint":8857,"id":null,"parameterSlots":1,"returnSlots":1},"read_from_calldatat_uint64":{"entryPoint":8877,"id":null,"parameterSlots":1,"returnSlots":1},"update_storage_value_offset_0t_struct$_MetaData_$4901_calldata_ptr_to_t_struct$_MetaData_$4901_storage":{"entryPoint":9420,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_t_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"update_storage_value_offsett_uint64_to_uint64":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":0},"validator_revert_address":{"entryPoint":7884,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":8303,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bytes4":{"entryPoint":7655,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:19226:46","nodeType":"YulBlock","src":"0:19226:46","statements":[{"nativeSrc":"6:3:46","nodeType":"YulBlock","src":"6:3:46","statements":[]},{"body":{"nativeSrc":"58:133:46","nodeType":"YulBlock","src":"58:133:46","statements":[{"body":{"nativeSrc":"169:16:46","nodeType":"YulBlock","src":"169:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:46","nodeType":"YulLiteral","src":"178:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:46","nodeType":"YulLiteral","src":"181:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:46","nodeType":"YulIdentifier","src":"171:6:46"},"nativeSrc":"171:12:46","nodeType":"YulFunctionCall","src":"171:12:46"},"nativeSrc":"171:12:46","nodeType":"YulExpressionStatement","src":"171:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"81:5:46","nodeType":"YulIdentifier","src":"81:5:46"},{"arguments":[{"name":"value","nativeSrc":"92:5:46","nodeType":"YulIdentifier","src":"92:5:46"},{"kind":"number","nativeSrc":"99:66:46","nodeType":"YulLiteral","src":"99:66:46","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"88:3:46","nodeType":"YulIdentifier","src":"88:3:46"},"nativeSrc":"88:78:46","nodeType":"YulFunctionCall","src":"88:78:46"}],"functionName":{"name":"eq","nativeSrc":"78:2:46","nodeType":"YulIdentifier","src":"78:2:46"},"nativeSrc":"78:89:46","nodeType":"YulFunctionCall","src":"78:89:46"}],"functionName":{"name":"iszero","nativeSrc":"71:6:46","nodeType":"YulIdentifier","src":"71:6:46"},"nativeSrc":"71:97:46","nodeType":"YulFunctionCall","src":"71:97:46"},"nativeSrc":"68:117:46","nodeType":"YulIf","src":"68:117:46"}]},"name":"validator_revert_bytes4","nativeSrc":"14:177:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"47:5:46","nodeType":"YulTypedName","src":"47:5:46","type":""}],"src":"14:177:46"},{"body":{"nativeSrc":"265:176:46","nodeType":"YulBlock","src":"265:176:46","statements":[{"body":{"nativeSrc":"311:16:46","nodeType":"YulBlock","src":"311:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"320:1:46","nodeType":"YulLiteral","src":"320:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"323:1:46","nodeType":"YulLiteral","src":"323:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"313:6:46","nodeType":"YulIdentifier","src":"313:6:46"},"nativeSrc":"313:12:46","nodeType":"YulFunctionCall","src":"313:12:46"},"nativeSrc":"313:12:46","nodeType":"YulExpressionStatement","src":"313:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"286:7:46","nodeType":"YulIdentifier","src":"286:7:46"},{"name":"headStart","nativeSrc":"295:9:46","nodeType":"YulIdentifier","src":"295:9:46"}],"functionName":{"name":"sub","nativeSrc":"282:3:46","nodeType":"YulIdentifier","src":"282:3:46"},"nativeSrc":"282:23:46","nodeType":"YulFunctionCall","src":"282:23:46"},{"kind":"number","nativeSrc":"307:2:46","nodeType":"YulLiteral","src":"307:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"278:3:46","nodeType":"YulIdentifier","src":"278:3:46"},"nativeSrc":"278:32:46","nodeType":"YulFunctionCall","src":"278:32:46"},"nativeSrc":"275:52:46","nodeType":"YulIf","src":"275:52:46"},{"nativeSrc":"336:36:46","nodeType":"YulVariableDeclaration","src":"336:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"362:9:46","nodeType":"YulIdentifier","src":"362:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"349:12:46","nodeType":"YulIdentifier","src":"349:12:46"},"nativeSrc":"349:23:46","nodeType":"YulFunctionCall","src":"349:23:46"},"variables":[{"name":"value","nativeSrc":"340:5:46","nodeType":"YulTypedName","src":"340:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"405:5:46","nodeType":"YulIdentifier","src":"405:5:46"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"381:23:46","nodeType":"YulIdentifier","src":"381:23:46"},"nativeSrc":"381:30:46","nodeType":"YulFunctionCall","src":"381:30:46"},"nativeSrc":"381:30:46","nodeType":"YulExpressionStatement","src":"381:30:46"},{"nativeSrc":"420:15:46","nodeType":"YulAssignment","src":"420:15:46","value":{"name":"value","nativeSrc":"430:5:46","nodeType":"YulIdentifier","src":"430:5:46"},"variableNames":[{"name":"value0","nativeSrc":"420:6:46","nodeType":"YulIdentifier","src":"420:6:46"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"196:245:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"231:9:46","nodeType":"YulTypedName","src":"231:9:46","type":""},{"name":"dataEnd","nativeSrc":"242:7:46","nodeType":"YulTypedName","src":"242:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"254:6:46","nodeType":"YulTypedName","src":"254:6:46","type":""}],"src":"196:245:46"},{"body":{"nativeSrc":"541:92:46","nodeType":"YulBlock","src":"541:92:46","statements":[{"nativeSrc":"551:26:46","nodeType":"YulAssignment","src":"551:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"563:9:46","nodeType":"YulIdentifier","src":"563:9:46"},{"kind":"number","nativeSrc":"574:2:46","nodeType":"YulLiteral","src":"574:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"559:3:46","nodeType":"YulIdentifier","src":"559:3:46"},"nativeSrc":"559:18:46","nodeType":"YulFunctionCall","src":"559:18:46"},"variableNames":[{"name":"tail","nativeSrc":"551:4:46","nodeType":"YulIdentifier","src":"551:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"593:9:46","nodeType":"YulIdentifier","src":"593:9:46"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"618:6:46","nodeType":"YulIdentifier","src":"618:6:46"}],"functionName":{"name":"iszero","nativeSrc":"611:6:46","nodeType":"YulIdentifier","src":"611:6:46"},"nativeSrc":"611:14:46","nodeType":"YulFunctionCall","src":"611:14:46"}],"functionName":{"name":"iszero","nativeSrc":"604:6:46","nodeType":"YulIdentifier","src":"604:6:46"},"nativeSrc":"604:22:46","nodeType":"YulFunctionCall","src":"604:22:46"}],"functionName":{"name":"mstore","nativeSrc":"586:6:46","nodeType":"YulIdentifier","src":"586:6:46"},"nativeSrc":"586:41:46","nodeType":"YulFunctionCall","src":"586:41:46"},"nativeSrc":"586:41:46","nodeType":"YulExpressionStatement","src":"586:41:46"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"446:187:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"510:9:46","nodeType":"YulTypedName","src":"510:9:46","type":""},{"name":"value0","nativeSrc":"521:6:46","nodeType":"YulTypedName","src":"521:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"532:4:46","nodeType":"YulTypedName","src":"532:4:46","type":""}],"src":"446:187:46"},{"body":{"nativeSrc":"704:184:46","nodeType":"YulBlock","src":"704:184:46","statements":[{"nativeSrc":"714:10:46","nodeType":"YulVariableDeclaration","src":"714:10:46","value":{"kind":"number","nativeSrc":"723:1:46","nodeType":"YulLiteral","src":"723:1:46","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"718:1:46","nodeType":"YulTypedName","src":"718:1:46","type":""}]},{"body":{"nativeSrc":"783:63:46","nodeType":"YulBlock","src":"783:63:46","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"808:3:46","nodeType":"YulIdentifier","src":"808:3:46"},{"name":"i","nativeSrc":"813:1:46","nodeType":"YulIdentifier","src":"813:1:46"}],"functionName":{"name":"add","nativeSrc":"804:3:46","nodeType":"YulIdentifier","src":"804:3:46"},"nativeSrc":"804:11:46","nodeType":"YulFunctionCall","src":"804:11:46"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"827:3:46","nodeType":"YulIdentifier","src":"827:3:46"},{"name":"i","nativeSrc":"832:1:46","nodeType":"YulIdentifier","src":"832:1:46"}],"functionName":{"name":"add","nativeSrc":"823:3:46","nodeType":"YulIdentifier","src":"823:3:46"},"nativeSrc":"823:11:46","nodeType":"YulFunctionCall","src":"823:11:46"}],"functionName":{"name":"mload","nativeSrc":"817:5:46","nodeType":"YulIdentifier","src":"817:5:46"},"nativeSrc":"817:18:46","nodeType":"YulFunctionCall","src":"817:18:46"}],"functionName":{"name":"mstore","nativeSrc":"797:6:46","nodeType":"YulIdentifier","src":"797:6:46"},"nativeSrc":"797:39:46","nodeType":"YulFunctionCall","src":"797:39:46"},"nativeSrc":"797:39:46","nodeType":"YulExpressionStatement","src":"797:39:46"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"744:1:46","nodeType":"YulIdentifier","src":"744:1:46"},{"name":"length","nativeSrc":"747:6:46","nodeType":"YulIdentifier","src":"747:6:46"}],"functionName":{"name":"lt","nativeSrc":"741:2:46","nodeType":"YulIdentifier","src":"741:2:46"},"nativeSrc":"741:13:46","nodeType":"YulFunctionCall","src":"741:13:46"},"nativeSrc":"733:113:46","nodeType":"YulForLoop","post":{"nativeSrc":"755:19:46","nodeType":"YulBlock","src":"755:19:46","statements":[{"nativeSrc":"757:15:46","nodeType":"YulAssignment","src":"757:15:46","value":{"arguments":[{"name":"i","nativeSrc":"766:1:46","nodeType":"YulIdentifier","src":"766:1:46"},{"kind":"number","nativeSrc":"769:2:46","nodeType":"YulLiteral","src":"769:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"762:3:46","nodeType":"YulIdentifier","src":"762:3:46"},"nativeSrc":"762:10:46","nodeType":"YulFunctionCall","src":"762:10:46"},"variableNames":[{"name":"i","nativeSrc":"757:1:46","nodeType":"YulIdentifier","src":"757:1:46"}]}]},"pre":{"nativeSrc":"737:3:46","nodeType":"YulBlock","src":"737:3:46","statements":[]},"src":"733:113:46"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"866:3:46","nodeType":"YulIdentifier","src":"866:3:46"},{"name":"length","nativeSrc":"871:6:46","nodeType":"YulIdentifier","src":"871:6:46"}],"functionName":{"name":"add","nativeSrc":"862:3:46","nodeType":"YulIdentifier","src":"862:3:46"},"nativeSrc":"862:16:46","nodeType":"YulFunctionCall","src":"862:16:46"},{"kind":"number","nativeSrc":"880:1:46","nodeType":"YulLiteral","src":"880:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"855:6:46","nodeType":"YulIdentifier","src":"855:6:46"},"nativeSrc":"855:27:46","nodeType":"YulFunctionCall","src":"855:27:46"},"nativeSrc":"855:27:46","nodeType":"YulExpressionStatement","src":"855:27:46"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"638:250:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"682:3:46","nodeType":"YulTypedName","src":"682:3:46","type":""},{"name":"dst","nativeSrc":"687:3:46","nodeType":"YulTypedName","src":"687:3:46","type":""},{"name":"length","nativeSrc":"692:6:46","nodeType":"YulTypedName","src":"692:6:46","type":""}],"src":"638:250:46"},{"body":{"nativeSrc":"943:280:46","nodeType":"YulBlock","src":"943:280:46","statements":[{"nativeSrc":"953:26:46","nodeType":"YulVariableDeclaration","src":"953:26:46","value":{"arguments":[{"name":"value","nativeSrc":"973:5:46","nodeType":"YulIdentifier","src":"973:5:46"}],"functionName":{"name":"mload","nativeSrc":"967:5:46","nodeType":"YulIdentifier","src":"967:5:46"},"nativeSrc":"967:12:46","nodeType":"YulFunctionCall","src":"967:12:46"},"variables":[{"name":"length","nativeSrc":"957:6:46","nodeType":"YulTypedName","src":"957:6:46","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"995:3:46","nodeType":"YulIdentifier","src":"995:3:46"},{"name":"length","nativeSrc":"1000:6:46","nodeType":"YulIdentifier","src":"1000:6:46"}],"functionName":{"name":"mstore","nativeSrc":"988:6:46","nodeType":"YulIdentifier","src":"988:6:46"},"nativeSrc":"988:19:46","nodeType":"YulFunctionCall","src":"988:19:46"},"nativeSrc":"988:19:46","nodeType":"YulExpressionStatement","src":"988:19:46"},{"expression":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1055:5:46","nodeType":"YulIdentifier","src":"1055:5:46"},{"kind":"number","nativeSrc":"1062:4:46","nodeType":"YulLiteral","src":"1062:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1051:3:46","nodeType":"YulIdentifier","src":"1051:3:46"},"nativeSrc":"1051:16:46","nodeType":"YulFunctionCall","src":"1051:16:46"},{"arguments":[{"name":"pos","nativeSrc":"1073:3:46","nodeType":"YulIdentifier","src":"1073:3:46"},{"kind":"number","nativeSrc":"1078:4:46","nodeType":"YulLiteral","src":"1078:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1069:3:46","nodeType":"YulIdentifier","src":"1069:3:46"},"nativeSrc":"1069:14:46","nodeType":"YulFunctionCall","src":"1069:14:46"},{"name":"length","nativeSrc":"1085:6:46","nodeType":"YulIdentifier","src":"1085:6:46"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"1016:34:46","nodeType":"YulIdentifier","src":"1016:34:46"},"nativeSrc":"1016:76:46","nodeType":"YulFunctionCall","src":"1016:76:46"},"nativeSrc":"1016:76:46","nodeType":"YulExpressionStatement","src":"1016:76:46"},{"nativeSrc":"1101:116:46","nodeType":"YulAssignment","src":"1101:116:46","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"1116:3:46","nodeType":"YulIdentifier","src":"1116:3:46"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"1129:6:46","nodeType":"YulIdentifier","src":"1129:6:46"},{"kind":"number","nativeSrc":"1137:2:46","nodeType":"YulLiteral","src":"1137:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"1125:3:46","nodeType":"YulIdentifier","src":"1125:3:46"},"nativeSrc":"1125:15:46","nodeType":"YulFunctionCall","src":"1125:15:46"},{"kind":"number","nativeSrc":"1142:66:46","nodeType":"YulLiteral","src":"1142:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"1121:3:46","nodeType":"YulIdentifier","src":"1121:3:46"},"nativeSrc":"1121:88:46","nodeType":"YulFunctionCall","src":"1121:88:46"}],"functionName":{"name":"add","nativeSrc":"1112:3:46","nodeType":"YulIdentifier","src":"1112:3:46"},"nativeSrc":"1112:98:46","nodeType":"YulFunctionCall","src":"1112:98:46"},{"kind":"number","nativeSrc":"1212:4:46","nodeType":"YulLiteral","src":"1212:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1108:3:46","nodeType":"YulIdentifier","src":"1108:3:46"},"nativeSrc":"1108:109:46","nodeType":"YulFunctionCall","src":"1108:109:46"},"variableNames":[{"name":"end","nativeSrc":"1101:3:46","nodeType":"YulIdentifier","src":"1101:3:46"}]}]},"name":"abi_encode_string","nativeSrc":"893:330:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"920:5:46","nodeType":"YulTypedName","src":"920:5:46","type":""},{"name":"pos","nativeSrc":"927:3:46","nodeType":"YulTypedName","src":"927:3:46","type":""}],"returnVariables":[{"name":"end","nativeSrc":"935:3:46","nodeType":"YulTypedName","src":"935:3:46","type":""}],"src":"893:330:46"},{"body":{"nativeSrc":"1349:99:46","nodeType":"YulBlock","src":"1349:99:46","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1366:9:46","nodeType":"YulIdentifier","src":"1366:9:46"},{"kind":"number","nativeSrc":"1377:2:46","nodeType":"YulLiteral","src":"1377:2:46","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"1359:6:46","nodeType":"YulIdentifier","src":"1359:6:46"},"nativeSrc":"1359:21:46","nodeType":"YulFunctionCall","src":"1359:21:46"},"nativeSrc":"1359:21:46","nodeType":"YulExpressionStatement","src":"1359:21:46"},{"nativeSrc":"1389:53:46","nodeType":"YulAssignment","src":"1389:53:46","value":{"arguments":[{"name":"value0","nativeSrc":"1415:6:46","nodeType":"YulIdentifier","src":"1415:6:46"},{"arguments":[{"name":"headStart","nativeSrc":"1427:9:46","nodeType":"YulIdentifier","src":"1427:9:46"},{"kind":"number","nativeSrc":"1438:2:46","nodeType":"YulLiteral","src":"1438:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1423:3:46","nodeType":"YulIdentifier","src":"1423:3:46"},"nativeSrc":"1423:18:46","nodeType":"YulFunctionCall","src":"1423:18:46"}],"functionName":{"name":"abi_encode_string","nativeSrc":"1397:17:46","nodeType":"YulIdentifier","src":"1397:17:46"},"nativeSrc":"1397:45:46","nodeType":"YulFunctionCall","src":"1397:45:46"},"variableNames":[{"name":"tail","nativeSrc":"1389:4:46","nodeType":"YulIdentifier","src":"1389:4:46"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"1228:220:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1318:9:46","nodeType":"YulTypedName","src":"1318:9:46","type":""},{"name":"value0","nativeSrc":"1329:6:46","nodeType":"YulTypedName","src":"1329:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1340:4:46","nodeType":"YulTypedName","src":"1340:4:46","type":""}],"src":"1228:220:46"},{"body":{"nativeSrc":"1523:110:46","nodeType":"YulBlock","src":"1523:110:46","statements":[{"body":{"nativeSrc":"1569:16:46","nodeType":"YulBlock","src":"1569:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1578:1:46","nodeType":"YulLiteral","src":"1578:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"1581:1:46","nodeType":"YulLiteral","src":"1581:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1571:6:46","nodeType":"YulIdentifier","src":"1571:6:46"},"nativeSrc":"1571:12:46","nodeType":"YulFunctionCall","src":"1571:12:46"},"nativeSrc":"1571:12:46","nodeType":"YulExpressionStatement","src":"1571:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1544:7:46","nodeType":"YulIdentifier","src":"1544:7:46"},{"name":"headStart","nativeSrc":"1553:9:46","nodeType":"YulIdentifier","src":"1553:9:46"}],"functionName":{"name":"sub","nativeSrc":"1540:3:46","nodeType":"YulIdentifier","src":"1540:3:46"},"nativeSrc":"1540:23:46","nodeType":"YulFunctionCall","src":"1540:23:46"},{"kind":"number","nativeSrc":"1565:2:46","nodeType":"YulLiteral","src":"1565:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1536:3:46","nodeType":"YulIdentifier","src":"1536:3:46"},"nativeSrc":"1536:32:46","nodeType":"YulFunctionCall","src":"1536:32:46"},"nativeSrc":"1533:52:46","nodeType":"YulIf","src":"1533:52:46"},{"nativeSrc":"1594:33:46","nodeType":"YulAssignment","src":"1594:33:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1617:9:46","nodeType":"YulIdentifier","src":"1617:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"1604:12:46","nodeType":"YulIdentifier","src":"1604:12:46"},"nativeSrc":"1604:23:46","nodeType":"YulFunctionCall","src":"1604:23:46"},"variableNames":[{"name":"value0","nativeSrc":"1594:6:46","nodeType":"YulIdentifier","src":"1594:6:46"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1453:180:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1489:9:46","nodeType":"YulTypedName","src":"1489:9:46","type":""},{"name":"dataEnd","nativeSrc":"1500:7:46","nodeType":"YulTypedName","src":"1500:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1512:6:46","nodeType":"YulTypedName","src":"1512:6:46","type":""}],"src":"1453:180:46"},{"body":{"nativeSrc":"1739:125:46","nodeType":"YulBlock","src":"1739:125:46","statements":[{"nativeSrc":"1749:26:46","nodeType":"YulAssignment","src":"1749:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"1761:9:46","nodeType":"YulIdentifier","src":"1761:9:46"},{"kind":"number","nativeSrc":"1772:2:46","nodeType":"YulLiteral","src":"1772:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1757:3:46","nodeType":"YulIdentifier","src":"1757:3:46"},"nativeSrc":"1757:18:46","nodeType":"YulFunctionCall","src":"1757:18:46"},"variableNames":[{"name":"tail","nativeSrc":"1749:4:46","nodeType":"YulIdentifier","src":"1749:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1791:9:46","nodeType":"YulIdentifier","src":"1791:9:46"},{"arguments":[{"name":"value0","nativeSrc":"1806:6:46","nodeType":"YulIdentifier","src":"1806:6:46"},{"kind":"number","nativeSrc":"1814:42:46","nodeType":"YulLiteral","src":"1814:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1802:3:46","nodeType":"YulIdentifier","src":"1802:3:46"},"nativeSrc":"1802:55:46","nodeType":"YulFunctionCall","src":"1802:55:46"}],"functionName":{"name":"mstore","nativeSrc":"1784:6:46","nodeType":"YulIdentifier","src":"1784:6:46"},"nativeSrc":"1784:74:46","nodeType":"YulFunctionCall","src":"1784:74:46"},"nativeSrc":"1784:74:46","nodeType":"YulExpressionStatement","src":"1784:74:46"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"1638:226:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1708:9:46","nodeType":"YulTypedName","src":"1708:9:46","type":""},{"name":"value0","nativeSrc":"1719:6:46","nodeType":"YulTypedName","src":"1719:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1730:4:46","nodeType":"YulTypedName","src":"1730:4:46","type":""}],"src":"1638:226:46"},{"body":{"nativeSrc":"1914:109:46","nodeType":"YulBlock","src":"1914:109:46","statements":[{"body":{"nativeSrc":"2001:16:46","nodeType":"YulBlock","src":"2001:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2010:1:46","nodeType":"YulLiteral","src":"2010:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2013:1:46","nodeType":"YulLiteral","src":"2013:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2003:6:46","nodeType":"YulIdentifier","src":"2003:6:46"},"nativeSrc":"2003:12:46","nodeType":"YulFunctionCall","src":"2003:12:46"},"nativeSrc":"2003:12:46","nodeType":"YulExpressionStatement","src":"2003:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"1937:5:46","nodeType":"YulIdentifier","src":"1937:5:46"},{"arguments":[{"name":"value","nativeSrc":"1948:5:46","nodeType":"YulIdentifier","src":"1948:5:46"},{"kind":"number","nativeSrc":"1955:42:46","nodeType":"YulLiteral","src":"1955:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1944:3:46","nodeType":"YulIdentifier","src":"1944:3:46"},"nativeSrc":"1944:54:46","nodeType":"YulFunctionCall","src":"1944:54:46"}],"functionName":{"name":"eq","nativeSrc":"1934:2:46","nodeType":"YulIdentifier","src":"1934:2:46"},"nativeSrc":"1934:65:46","nodeType":"YulFunctionCall","src":"1934:65:46"}],"functionName":{"name":"iszero","nativeSrc":"1927:6:46","nodeType":"YulIdentifier","src":"1927:6:46"},"nativeSrc":"1927:73:46","nodeType":"YulFunctionCall","src":"1927:73:46"},"nativeSrc":"1924:93:46","nodeType":"YulIf","src":"1924:93:46"}]},"name":"validator_revert_address","nativeSrc":"1869:154:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"1903:5:46","nodeType":"YulTypedName","src":"1903:5:46","type":""}],"src":"1869:154:46"},{"body":{"nativeSrc":"2115:228:46","nodeType":"YulBlock","src":"2115:228:46","statements":[{"body":{"nativeSrc":"2161:16:46","nodeType":"YulBlock","src":"2161:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2170:1:46","nodeType":"YulLiteral","src":"2170:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2173:1:46","nodeType":"YulLiteral","src":"2173:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2163:6:46","nodeType":"YulIdentifier","src":"2163:6:46"},"nativeSrc":"2163:12:46","nodeType":"YulFunctionCall","src":"2163:12:46"},"nativeSrc":"2163:12:46","nodeType":"YulExpressionStatement","src":"2163:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2136:7:46","nodeType":"YulIdentifier","src":"2136:7:46"},{"name":"headStart","nativeSrc":"2145:9:46","nodeType":"YulIdentifier","src":"2145:9:46"}],"functionName":{"name":"sub","nativeSrc":"2132:3:46","nodeType":"YulIdentifier","src":"2132:3:46"},"nativeSrc":"2132:23:46","nodeType":"YulFunctionCall","src":"2132:23:46"},{"kind":"number","nativeSrc":"2157:2:46","nodeType":"YulLiteral","src":"2157:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2128:3:46","nodeType":"YulIdentifier","src":"2128:3:46"},"nativeSrc":"2128:32:46","nodeType":"YulFunctionCall","src":"2128:32:46"},"nativeSrc":"2125:52:46","nodeType":"YulIf","src":"2125:52:46"},{"nativeSrc":"2186:36:46","nodeType":"YulVariableDeclaration","src":"2186:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2212:9:46","nodeType":"YulIdentifier","src":"2212:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2199:12:46","nodeType":"YulIdentifier","src":"2199:12:46"},"nativeSrc":"2199:23:46","nodeType":"YulFunctionCall","src":"2199:23:46"},"variables":[{"name":"value","nativeSrc":"2190:5:46","nodeType":"YulTypedName","src":"2190:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2256:5:46","nodeType":"YulIdentifier","src":"2256:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2231:24:46","nodeType":"YulIdentifier","src":"2231:24:46"},"nativeSrc":"2231:31:46","nodeType":"YulFunctionCall","src":"2231:31:46"},"nativeSrc":"2231:31:46","nodeType":"YulExpressionStatement","src":"2231:31:46"},{"nativeSrc":"2271:15:46","nodeType":"YulAssignment","src":"2271:15:46","value":{"name":"value","nativeSrc":"2281:5:46","nodeType":"YulIdentifier","src":"2281:5:46"},"variableNames":[{"name":"value0","nativeSrc":"2271:6:46","nodeType":"YulIdentifier","src":"2271:6:46"}]},{"nativeSrc":"2295:42:46","nodeType":"YulAssignment","src":"2295:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2322:9:46","nodeType":"YulIdentifier","src":"2322:9:46"},{"kind":"number","nativeSrc":"2333:2:46","nodeType":"YulLiteral","src":"2333:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2318:3:46","nodeType":"YulIdentifier","src":"2318:3:46"},"nativeSrc":"2318:18:46","nodeType":"YulFunctionCall","src":"2318:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"2305:12:46","nodeType":"YulIdentifier","src":"2305:12:46"},"nativeSrc":"2305:32:46","nodeType":"YulFunctionCall","src":"2305:32:46"},"variableNames":[{"name":"value1","nativeSrc":"2295:6:46","nodeType":"YulIdentifier","src":"2295:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"2028:315:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2073:9:46","nodeType":"YulTypedName","src":"2073:9:46","type":""},{"name":"dataEnd","nativeSrc":"2084:7:46","nodeType":"YulTypedName","src":"2084:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2096:6:46","nodeType":"YulTypedName","src":"2096:6:46","type":""},{"name":"value1","nativeSrc":"2104:6:46","nodeType":"YulTypedName","src":"2104:6:46","type":""}],"src":"2028:315:46"},{"body":{"nativeSrc":"2452:352:46","nodeType":"YulBlock","src":"2452:352:46","statements":[{"body":{"nativeSrc":"2498:16:46","nodeType":"YulBlock","src":"2498:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2507:1:46","nodeType":"YulLiteral","src":"2507:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2510:1:46","nodeType":"YulLiteral","src":"2510:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2500:6:46","nodeType":"YulIdentifier","src":"2500:6:46"},"nativeSrc":"2500:12:46","nodeType":"YulFunctionCall","src":"2500:12:46"},"nativeSrc":"2500:12:46","nodeType":"YulExpressionStatement","src":"2500:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2473:7:46","nodeType":"YulIdentifier","src":"2473:7:46"},{"name":"headStart","nativeSrc":"2482:9:46","nodeType":"YulIdentifier","src":"2482:9:46"}],"functionName":{"name":"sub","nativeSrc":"2469:3:46","nodeType":"YulIdentifier","src":"2469:3:46"},"nativeSrc":"2469:23:46","nodeType":"YulFunctionCall","src":"2469:23:46"},{"kind":"number","nativeSrc":"2494:2:46","nodeType":"YulLiteral","src":"2494:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2465:3:46","nodeType":"YulIdentifier","src":"2465:3:46"},"nativeSrc":"2465:32:46","nodeType":"YulFunctionCall","src":"2465:32:46"},"nativeSrc":"2462:52:46","nodeType":"YulIf","src":"2462:52:46"},{"nativeSrc":"2523:36:46","nodeType":"YulVariableDeclaration","src":"2523:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2549:9:46","nodeType":"YulIdentifier","src":"2549:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2536:12:46","nodeType":"YulIdentifier","src":"2536:12:46"},"nativeSrc":"2536:23:46","nodeType":"YulFunctionCall","src":"2536:23:46"},"variables":[{"name":"value","nativeSrc":"2527:5:46","nodeType":"YulTypedName","src":"2527:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2593:5:46","nodeType":"YulIdentifier","src":"2593:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2568:24:46","nodeType":"YulIdentifier","src":"2568:24:46"},"nativeSrc":"2568:31:46","nodeType":"YulFunctionCall","src":"2568:31:46"},"nativeSrc":"2568:31:46","nodeType":"YulExpressionStatement","src":"2568:31:46"},{"nativeSrc":"2608:15:46","nodeType":"YulAssignment","src":"2608:15:46","value":{"name":"value","nativeSrc":"2618:5:46","nodeType":"YulIdentifier","src":"2618:5:46"},"variableNames":[{"name":"value0","nativeSrc":"2608:6:46","nodeType":"YulIdentifier","src":"2608:6:46"}]},{"nativeSrc":"2632:47:46","nodeType":"YulVariableDeclaration","src":"2632:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2664:9:46","nodeType":"YulIdentifier","src":"2664:9:46"},{"kind":"number","nativeSrc":"2675:2:46","nodeType":"YulLiteral","src":"2675:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2660:3:46","nodeType":"YulIdentifier","src":"2660:3:46"},"nativeSrc":"2660:18:46","nodeType":"YulFunctionCall","src":"2660:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"2647:12:46","nodeType":"YulIdentifier","src":"2647:12:46"},"nativeSrc":"2647:32:46","nodeType":"YulFunctionCall","src":"2647:32:46"},"variables":[{"name":"value_1","nativeSrc":"2636:7:46","nodeType":"YulTypedName","src":"2636:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2713:7:46","nodeType":"YulIdentifier","src":"2713:7:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2688:24:46","nodeType":"YulIdentifier","src":"2688:24:46"},"nativeSrc":"2688:33:46","nodeType":"YulFunctionCall","src":"2688:33:46"},"nativeSrc":"2688:33:46","nodeType":"YulExpressionStatement","src":"2688:33:46"},{"nativeSrc":"2730:17:46","nodeType":"YulAssignment","src":"2730:17:46","value":{"name":"value_1","nativeSrc":"2740:7:46","nodeType":"YulIdentifier","src":"2740:7:46"},"variableNames":[{"name":"value1","nativeSrc":"2730:6:46","nodeType":"YulIdentifier","src":"2730:6:46"}]},{"nativeSrc":"2756:42:46","nodeType":"YulAssignment","src":"2756:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2783:9:46","nodeType":"YulIdentifier","src":"2783:9:46"},{"kind":"number","nativeSrc":"2794:2:46","nodeType":"YulLiteral","src":"2794:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2779:3:46","nodeType":"YulIdentifier","src":"2779:3:46"},"nativeSrc":"2779:18:46","nodeType":"YulFunctionCall","src":"2779:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"2766:12:46","nodeType":"YulIdentifier","src":"2766:12:46"},"nativeSrc":"2766:32:46","nodeType":"YulFunctionCall","src":"2766:32:46"},"variableNames":[{"name":"value2","nativeSrc":"2756:6:46","nodeType":"YulIdentifier","src":"2756:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256","nativeSrc":"2348:456:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2402:9:46","nodeType":"YulTypedName","src":"2402:9:46","type":""},{"name":"dataEnd","nativeSrc":"2413:7:46","nodeType":"YulTypedName","src":"2413:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2425:6:46","nodeType":"YulTypedName","src":"2425:6:46","type":""},{"name":"value1","nativeSrc":"2433:6:46","nodeType":"YulTypedName","src":"2433:6:46","type":""},{"name":"value2","nativeSrc":"2441:6:46","nodeType":"YulTypedName","src":"2441:6:46","type":""}],"src":"2348:456:46"},{"body":{"nativeSrc":"2896:228:46","nodeType":"YulBlock","src":"2896:228:46","statements":[{"body":{"nativeSrc":"2942:16:46","nodeType":"YulBlock","src":"2942:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2951:1:46","nodeType":"YulLiteral","src":"2951:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"2954:1:46","nodeType":"YulLiteral","src":"2954:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2944:6:46","nodeType":"YulIdentifier","src":"2944:6:46"},"nativeSrc":"2944:12:46","nodeType":"YulFunctionCall","src":"2944:12:46"},"nativeSrc":"2944:12:46","nodeType":"YulExpressionStatement","src":"2944:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2917:7:46","nodeType":"YulIdentifier","src":"2917:7:46"},{"name":"headStart","nativeSrc":"2926:9:46","nodeType":"YulIdentifier","src":"2926:9:46"}],"functionName":{"name":"sub","nativeSrc":"2913:3:46","nodeType":"YulIdentifier","src":"2913:3:46"},"nativeSrc":"2913:23:46","nodeType":"YulFunctionCall","src":"2913:23:46"},{"kind":"number","nativeSrc":"2938:2:46","nodeType":"YulLiteral","src":"2938:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2909:3:46","nodeType":"YulIdentifier","src":"2909:3:46"},"nativeSrc":"2909:32:46","nodeType":"YulFunctionCall","src":"2909:32:46"},"nativeSrc":"2906:52:46","nodeType":"YulIf","src":"2906:52:46"},{"nativeSrc":"2967:33:46","nodeType":"YulAssignment","src":"2967:33:46","value":{"arguments":[{"name":"headStart","nativeSrc":"2990:9:46","nodeType":"YulIdentifier","src":"2990:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"2977:12:46","nodeType":"YulIdentifier","src":"2977:12:46"},"nativeSrc":"2977:23:46","nodeType":"YulFunctionCall","src":"2977:23:46"},"variableNames":[{"name":"value0","nativeSrc":"2967:6:46","nodeType":"YulIdentifier","src":"2967:6:46"}]},{"nativeSrc":"3009:45:46","nodeType":"YulVariableDeclaration","src":"3009:45:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3039:9:46","nodeType":"YulIdentifier","src":"3039:9:46"},{"kind":"number","nativeSrc":"3050:2:46","nodeType":"YulLiteral","src":"3050:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3035:3:46","nodeType":"YulIdentifier","src":"3035:3:46"},"nativeSrc":"3035:18:46","nodeType":"YulFunctionCall","src":"3035:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"3022:12:46","nodeType":"YulIdentifier","src":"3022:12:46"},"nativeSrc":"3022:32:46","nodeType":"YulFunctionCall","src":"3022:32:46"},"variables":[{"name":"value","nativeSrc":"3013:5:46","nodeType":"YulTypedName","src":"3013:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3088:5:46","nodeType":"YulIdentifier","src":"3088:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3063:24:46","nodeType":"YulIdentifier","src":"3063:24:46"},"nativeSrc":"3063:31:46","nodeType":"YulFunctionCall","src":"3063:31:46"},"nativeSrc":"3063:31:46","nodeType":"YulExpressionStatement","src":"3063:31:46"},{"nativeSrc":"3103:15:46","nodeType":"YulAssignment","src":"3103:15:46","value":{"name":"value","nativeSrc":"3113:5:46","nodeType":"YulIdentifier","src":"3113:5:46"},"variableNames":[{"name":"value1","nativeSrc":"3103:6:46","nodeType":"YulIdentifier","src":"3103:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"2809:315:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2854:9:46","nodeType":"YulTypedName","src":"2854:9:46","type":""},{"name":"dataEnd","nativeSrc":"2865:7:46","nodeType":"YulTypedName","src":"2865:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2877:6:46","nodeType":"YulTypedName","src":"2877:6:46","type":""},{"name":"value1","nativeSrc":"2885:6:46","nodeType":"YulTypedName","src":"2885:6:46","type":""}],"src":"2809:315:46"},{"body":{"nativeSrc":"3428:541:46","nodeType":"YulBlock","src":"3428:541:46","statements":[{"nativeSrc":"3438:16:46","nodeType":"YulVariableDeclaration","src":"3438:16:46","value":{"kind":"number","nativeSrc":"3448:6:46","nodeType":"YulLiteral","src":"3448:6:46","type":"","value":"0xffff"},"variables":[{"name":"_1","nativeSrc":"3442:2:46","nodeType":"YulTypedName","src":"3442:2:46","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3470:9:46","nodeType":"YulIdentifier","src":"3470:9:46"},{"arguments":[{"name":"value0","nativeSrc":"3485:6:46","nodeType":"YulIdentifier","src":"3485:6:46"},{"name":"_1","nativeSrc":"3493:2:46","nodeType":"YulIdentifier","src":"3493:2:46"}],"functionName":{"name":"and","nativeSrc":"3481:3:46","nodeType":"YulIdentifier","src":"3481:3:46"},"nativeSrc":"3481:15:46","nodeType":"YulFunctionCall","src":"3481:15:46"}],"functionName":{"name":"mstore","nativeSrc":"3463:6:46","nodeType":"YulIdentifier","src":"3463:6:46"},"nativeSrc":"3463:34:46","nodeType":"YulFunctionCall","src":"3463:34:46"},"nativeSrc":"3463:34:46","nodeType":"YulExpressionStatement","src":"3463:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3517:9:46","nodeType":"YulIdentifier","src":"3517:9:46"},{"kind":"number","nativeSrc":"3528:2:46","nodeType":"YulLiteral","src":"3528:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3513:3:46","nodeType":"YulIdentifier","src":"3513:3:46"},"nativeSrc":"3513:18:46","nodeType":"YulFunctionCall","src":"3513:18:46"},{"arguments":[{"name":"value1","nativeSrc":"3537:6:46","nodeType":"YulIdentifier","src":"3537:6:46"},{"name":"_1","nativeSrc":"3545:2:46","nodeType":"YulIdentifier","src":"3545:2:46"}],"functionName":{"name":"and","nativeSrc":"3533:3:46","nodeType":"YulIdentifier","src":"3533:3:46"},"nativeSrc":"3533:15:46","nodeType":"YulFunctionCall","src":"3533:15:46"}],"functionName":{"name":"mstore","nativeSrc":"3506:6:46","nodeType":"YulIdentifier","src":"3506:6:46"},"nativeSrc":"3506:43:46","nodeType":"YulFunctionCall","src":"3506:43:46"},"nativeSrc":"3506:43:46","nodeType":"YulExpressionStatement","src":"3506:43:46"},{"nativeSrc":"3558:28:46","nodeType":"YulVariableDeclaration","src":"3558:28:46","value":{"kind":"number","nativeSrc":"3568:18:46","nodeType":"YulLiteral","src":"3568:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_2","nativeSrc":"3562:2:46","nodeType":"YulTypedName","src":"3562:2:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3606:9:46","nodeType":"YulIdentifier","src":"3606:9:46"},{"kind":"number","nativeSrc":"3617:2:46","nodeType":"YulLiteral","src":"3617:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3602:3:46","nodeType":"YulIdentifier","src":"3602:3:46"},"nativeSrc":"3602:18:46","nodeType":"YulFunctionCall","src":"3602:18:46"},{"arguments":[{"name":"value2","nativeSrc":"3626:6:46","nodeType":"YulIdentifier","src":"3626:6:46"},{"name":"_2","nativeSrc":"3634:2:46","nodeType":"YulIdentifier","src":"3634:2:46"}],"functionName":{"name":"and","nativeSrc":"3622:3:46","nodeType":"YulIdentifier","src":"3622:3:46"},"nativeSrc":"3622:15:46","nodeType":"YulFunctionCall","src":"3622:15:46"}],"functionName":{"name":"mstore","nativeSrc":"3595:6:46","nodeType":"YulIdentifier","src":"3595:6:46"},"nativeSrc":"3595:43:46","nodeType":"YulFunctionCall","src":"3595:43:46"},"nativeSrc":"3595:43:46","nodeType":"YulExpressionStatement","src":"3595:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3658:9:46","nodeType":"YulIdentifier","src":"3658:9:46"},{"kind":"number","nativeSrc":"3669:2:46","nodeType":"YulLiteral","src":"3669:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3654:3:46","nodeType":"YulIdentifier","src":"3654:3:46"},"nativeSrc":"3654:18:46","nodeType":"YulFunctionCall","src":"3654:18:46"},{"arguments":[{"name":"value3","nativeSrc":"3678:6:46","nodeType":"YulIdentifier","src":"3678:6:46"},{"name":"_2","nativeSrc":"3686:2:46","nodeType":"YulIdentifier","src":"3686:2:46"}],"functionName":{"name":"and","nativeSrc":"3674:3:46","nodeType":"YulIdentifier","src":"3674:3:46"},"nativeSrc":"3674:15:46","nodeType":"YulFunctionCall","src":"3674:15:46"}],"functionName":{"name":"mstore","nativeSrc":"3647:6:46","nodeType":"YulIdentifier","src":"3647:6:46"},"nativeSrc":"3647:43:46","nodeType":"YulFunctionCall","src":"3647:43:46"},"nativeSrc":"3647:43:46","nodeType":"YulExpressionStatement","src":"3647:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3710:9:46","nodeType":"YulIdentifier","src":"3710:9:46"},{"kind":"number","nativeSrc":"3721:3:46","nodeType":"YulLiteral","src":"3721:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"3706:3:46","nodeType":"YulIdentifier","src":"3706:3:46"},"nativeSrc":"3706:19:46","nodeType":"YulFunctionCall","src":"3706:19:46"},{"arguments":[{"name":"value4","nativeSrc":"3731:6:46","nodeType":"YulIdentifier","src":"3731:6:46"},{"name":"_2","nativeSrc":"3739:2:46","nodeType":"YulIdentifier","src":"3739:2:46"}],"functionName":{"name":"and","nativeSrc":"3727:3:46","nodeType":"YulIdentifier","src":"3727:3:46"},"nativeSrc":"3727:15:46","nodeType":"YulFunctionCall","src":"3727:15:46"}],"functionName":{"name":"mstore","nativeSrc":"3699:6:46","nodeType":"YulIdentifier","src":"3699:6:46"},"nativeSrc":"3699:44:46","nodeType":"YulFunctionCall","src":"3699:44:46"},"nativeSrc":"3699:44:46","nodeType":"YulExpressionStatement","src":"3699:44:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3763:9:46","nodeType":"YulIdentifier","src":"3763:9:46"},{"kind":"number","nativeSrc":"3774:3:46","nodeType":"YulLiteral","src":"3774:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"3759:3:46","nodeType":"YulIdentifier","src":"3759:3:46"},"nativeSrc":"3759:19:46","nodeType":"YulFunctionCall","src":"3759:19:46"},{"kind":"number","nativeSrc":"3780:3:46","nodeType":"YulLiteral","src":"3780:3:46","type":"","value":"224"}],"functionName":{"name":"mstore","nativeSrc":"3752:6:46","nodeType":"YulIdentifier","src":"3752:6:46"},"nativeSrc":"3752:32:46","nodeType":"YulFunctionCall","src":"3752:32:46"},"nativeSrc":"3752:32:46","nodeType":"YulExpressionStatement","src":"3752:32:46"},{"nativeSrc":"3793:60:46","nodeType":"YulVariableDeclaration","src":"3793:60:46","value":{"arguments":[{"name":"value5","nativeSrc":"3825:6:46","nodeType":"YulIdentifier","src":"3825:6:46"},{"arguments":[{"name":"headStart","nativeSrc":"3837:9:46","nodeType":"YulIdentifier","src":"3837:9:46"},{"kind":"number","nativeSrc":"3848:3:46","nodeType":"YulLiteral","src":"3848:3:46","type":"","value":"224"}],"functionName":{"name":"add","nativeSrc":"3833:3:46","nodeType":"YulIdentifier","src":"3833:3:46"},"nativeSrc":"3833:19:46","nodeType":"YulFunctionCall","src":"3833:19:46"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3807:17:46","nodeType":"YulIdentifier","src":"3807:17:46"},"nativeSrc":"3807:46:46","nodeType":"YulFunctionCall","src":"3807:46:46"},"variables":[{"name":"tail_1","nativeSrc":"3797:6:46","nodeType":"YulTypedName","src":"3797:6:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3873:9:46","nodeType":"YulIdentifier","src":"3873:9:46"},{"kind":"number","nativeSrc":"3884:3:46","nodeType":"YulLiteral","src":"3884:3:46","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"3869:3:46","nodeType":"YulIdentifier","src":"3869:3:46"},"nativeSrc":"3869:19:46","nodeType":"YulFunctionCall","src":"3869:19:46"},{"arguments":[{"name":"tail_1","nativeSrc":"3894:6:46","nodeType":"YulIdentifier","src":"3894:6:46"},{"name":"headStart","nativeSrc":"3902:9:46","nodeType":"YulIdentifier","src":"3902:9:46"}],"functionName":{"name":"sub","nativeSrc":"3890:3:46","nodeType":"YulIdentifier","src":"3890:3:46"},"nativeSrc":"3890:22:46","nodeType":"YulFunctionCall","src":"3890:22:46"}],"functionName":{"name":"mstore","nativeSrc":"3862:6:46","nodeType":"YulIdentifier","src":"3862:6:46"},"nativeSrc":"3862:51:46","nodeType":"YulFunctionCall","src":"3862:51:46"},"nativeSrc":"3862:51:46","nodeType":"YulExpressionStatement","src":"3862:51:46"},{"nativeSrc":"3922:41:46","nodeType":"YulAssignment","src":"3922:41:46","value":{"arguments":[{"name":"value6","nativeSrc":"3948:6:46","nodeType":"YulIdentifier","src":"3948:6:46"},{"name":"tail_1","nativeSrc":"3956:6:46","nodeType":"YulIdentifier","src":"3956:6:46"}],"functionName":{"name":"abi_encode_string","nativeSrc":"3930:17:46","nodeType":"YulIdentifier","src":"3930:17:46"},"nativeSrc":"3930:33:46","nodeType":"YulFunctionCall","src":"3930:33:46"},"variableNames":[{"name":"tail","nativeSrc":"3922:4:46","nodeType":"YulIdentifier","src":"3922:4:46"}]}]},"name":"abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed","nativeSrc":"3129:840:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3349:9:46","nodeType":"YulTypedName","src":"3349:9:46","type":""},{"name":"value6","nativeSrc":"3360:6:46","nodeType":"YulTypedName","src":"3360:6:46","type":""},{"name":"value5","nativeSrc":"3368:6:46","nodeType":"YulTypedName","src":"3368:6:46","type":""},{"name":"value4","nativeSrc":"3376:6:46","nodeType":"YulTypedName","src":"3376:6:46","type":""},{"name":"value3","nativeSrc":"3384:6:46","nodeType":"YulTypedName","src":"3384:6:46","type":""},{"name":"value2","nativeSrc":"3392:6:46","nodeType":"YulTypedName","src":"3392:6:46","type":""},{"name":"value1","nativeSrc":"3400:6:46","nodeType":"YulTypedName","src":"3400:6:46","type":""},{"name":"value0","nativeSrc":"3408:6:46","nodeType":"YulTypedName","src":"3408:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3419:4:46","nodeType":"YulTypedName","src":"3419:4:46","type":""}],"src":"3129:840:46"},{"body":{"nativeSrc":"4106:459:46","nodeType":"YulBlock","src":"4106:459:46","statements":[{"body":{"nativeSrc":"4152:16:46","nodeType":"YulBlock","src":"4152:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4161:1:46","nodeType":"YulLiteral","src":"4161:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"4164:1:46","nodeType":"YulLiteral","src":"4164:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4154:6:46","nodeType":"YulIdentifier","src":"4154:6:46"},"nativeSrc":"4154:12:46","nodeType":"YulFunctionCall","src":"4154:12:46"},"nativeSrc":"4154:12:46","nodeType":"YulExpressionStatement","src":"4154:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4127:7:46","nodeType":"YulIdentifier","src":"4127:7:46"},{"name":"headStart","nativeSrc":"4136:9:46","nodeType":"YulIdentifier","src":"4136:9:46"}],"functionName":{"name":"sub","nativeSrc":"4123:3:46","nodeType":"YulIdentifier","src":"4123:3:46"},"nativeSrc":"4123:23:46","nodeType":"YulFunctionCall","src":"4123:23:46"},{"kind":"number","nativeSrc":"4148:2:46","nodeType":"YulLiteral","src":"4148:2:46","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"4119:3:46","nodeType":"YulIdentifier","src":"4119:3:46"},"nativeSrc":"4119:32:46","nodeType":"YulFunctionCall","src":"4119:32:46"},"nativeSrc":"4116:52:46","nodeType":"YulIf","src":"4116:52:46"},{"nativeSrc":"4177:36:46","nodeType":"YulVariableDeclaration","src":"4177:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"4203:9:46","nodeType":"YulIdentifier","src":"4203:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"4190:12:46","nodeType":"YulIdentifier","src":"4190:12:46"},"nativeSrc":"4190:23:46","nodeType":"YulFunctionCall","src":"4190:23:46"},"variables":[{"name":"value","nativeSrc":"4181:5:46","nodeType":"YulTypedName","src":"4181:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4247:5:46","nodeType":"YulIdentifier","src":"4247:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4222:24:46","nodeType":"YulIdentifier","src":"4222:24:46"},"nativeSrc":"4222:31:46","nodeType":"YulFunctionCall","src":"4222:31:46"},"nativeSrc":"4222:31:46","nodeType":"YulExpressionStatement","src":"4222:31:46"},{"nativeSrc":"4262:15:46","nodeType":"YulAssignment","src":"4262:15:46","value":{"name":"value","nativeSrc":"4272:5:46","nodeType":"YulIdentifier","src":"4272:5:46"},"variableNames":[{"name":"value0","nativeSrc":"4262:6:46","nodeType":"YulIdentifier","src":"4262:6:46"}]},{"nativeSrc":"4286:42:46","nodeType":"YulAssignment","src":"4286:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4313:9:46","nodeType":"YulIdentifier","src":"4313:9:46"},{"kind":"number","nativeSrc":"4324:2:46","nodeType":"YulLiteral","src":"4324:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4309:3:46","nodeType":"YulIdentifier","src":"4309:3:46"},"nativeSrc":"4309:18:46","nodeType":"YulFunctionCall","src":"4309:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"4296:12:46","nodeType":"YulIdentifier","src":"4296:12:46"},"nativeSrc":"4296:32:46","nodeType":"YulFunctionCall","src":"4296:32:46"},"variableNames":[{"name":"value1","nativeSrc":"4286:6:46","nodeType":"YulIdentifier","src":"4286:6:46"}]},{"nativeSrc":"4337:46:46","nodeType":"YulVariableDeclaration","src":"4337:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4368:9:46","nodeType":"YulIdentifier","src":"4368:9:46"},{"kind":"number","nativeSrc":"4379:2:46","nodeType":"YulLiteral","src":"4379:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4364:3:46","nodeType":"YulIdentifier","src":"4364:3:46"},"nativeSrc":"4364:18:46","nodeType":"YulFunctionCall","src":"4364:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"4351:12:46","nodeType":"YulIdentifier","src":"4351:12:46"},"nativeSrc":"4351:32:46","nodeType":"YulFunctionCall","src":"4351:32:46"},"variables":[{"name":"offset","nativeSrc":"4341:6:46","nodeType":"YulTypedName","src":"4341:6:46","type":""}]},{"body":{"nativeSrc":"4426:16:46","nodeType":"YulBlock","src":"4426:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4435:1:46","nodeType":"YulLiteral","src":"4435:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"4438:1:46","nodeType":"YulLiteral","src":"4438:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4428:6:46","nodeType":"YulIdentifier","src":"4428:6:46"},"nativeSrc":"4428:12:46","nodeType":"YulFunctionCall","src":"4428:12:46"},"nativeSrc":"4428:12:46","nodeType":"YulExpressionStatement","src":"4428:12:46"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4398:6:46","nodeType":"YulIdentifier","src":"4398:6:46"},{"kind":"number","nativeSrc":"4406:18:46","nodeType":"YulLiteral","src":"4406:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4395:2:46","nodeType":"YulIdentifier","src":"4395:2:46"},"nativeSrc":"4395:30:46","nodeType":"YulFunctionCall","src":"4395:30:46"},"nativeSrc":"4392:50:46","nodeType":"YulIf","src":"4392:50:46"},{"nativeSrc":"4451:32:46","nodeType":"YulVariableDeclaration","src":"4451:32:46","value":{"arguments":[{"name":"headStart","nativeSrc":"4465:9:46","nodeType":"YulIdentifier","src":"4465:9:46"},{"name":"offset","nativeSrc":"4476:6:46","nodeType":"YulIdentifier","src":"4476:6:46"}],"functionName":{"name":"add","nativeSrc":"4461:3:46","nodeType":"YulIdentifier","src":"4461:3:46"},"nativeSrc":"4461:22:46","nodeType":"YulFunctionCall","src":"4461:22:46"},"variables":[{"name":"_1","nativeSrc":"4455:2:46","nodeType":"YulTypedName","src":"4455:2:46","type":""}]},{"body":{"nativeSrc":"4522:16:46","nodeType":"YulBlock","src":"4522:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4531:1:46","nodeType":"YulLiteral","src":"4531:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"4534:1:46","nodeType":"YulLiteral","src":"4534:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4524:6:46","nodeType":"YulIdentifier","src":"4524:6:46"},"nativeSrc":"4524:12:46","nodeType":"YulFunctionCall","src":"4524:12:46"},"nativeSrc":"4524:12:46","nodeType":"YulExpressionStatement","src":"4524:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4503:7:46","nodeType":"YulIdentifier","src":"4503:7:46"},{"name":"_1","nativeSrc":"4512:2:46","nodeType":"YulIdentifier","src":"4512:2:46"}],"functionName":{"name":"sub","nativeSrc":"4499:3:46","nodeType":"YulIdentifier","src":"4499:3:46"},"nativeSrc":"4499:16:46","nodeType":"YulFunctionCall","src":"4499:16:46"},{"kind":"number","nativeSrc":"4517:3:46","nodeType":"YulLiteral","src":"4517:3:46","type":"","value":"224"}],"functionName":{"name":"slt","nativeSrc":"4495:3:46","nodeType":"YulIdentifier","src":"4495:3:46"},"nativeSrc":"4495:26:46","nodeType":"YulFunctionCall","src":"4495:26:46"},"nativeSrc":"4492:46:46","nodeType":"YulIf","src":"4492:46:46"},{"nativeSrc":"4547:12:46","nodeType":"YulAssignment","src":"4547:12:46","value":{"name":"_1","nativeSrc":"4557:2:46","nodeType":"YulIdentifier","src":"4557:2:46"},"variableNames":[{"name":"value2","nativeSrc":"4547:6:46","nodeType":"YulIdentifier","src":"4547:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptr","nativeSrc":"3974:591:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4056:9:46","nodeType":"YulTypedName","src":"4056:9:46","type":""},{"name":"dataEnd","nativeSrc":"4067:7:46","nodeType":"YulTypedName","src":"4067:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4079:6:46","nodeType":"YulTypedName","src":"4079:6:46","type":""},{"name":"value1","nativeSrc":"4087:6:46","nodeType":"YulTypedName","src":"4087:6:46","type":""},{"name":"value2","nativeSrc":"4095:6:46","nodeType":"YulTypedName","src":"4095:6:46","type":""}],"src":"3974:591:46"},{"body":{"nativeSrc":"4640:177:46","nodeType":"YulBlock","src":"4640:177:46","statements":[{"body":{"nativeSrc":"4686:16:46","nodeType":"YulBlock","src":"4686:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4695:1:46","nodeType":"YulLiteral","src":"4695:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"4698:1:46","nodeType":"YulLiteral","src":"4698:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4688:6:46","nodeType":"YulIdentifier","src":"4688:6:46"},"nativeSrc":"4688:12:46","nodeType":"YulFunctionCall","src":"4688:12:46"},"nativeSrc":"4688:12:46","nodeType":"YulExpressionStatement","src":"4688:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4661:7:46","nodeType":"YulIdentifier","src":"4661:7:46"},{"name":"headStart","nativeSrc":"4670:9:46","nodeType":"YulIdentifier","src":"4670:9:46"}],"functionName":{"name":"sub","nativeSrc":"4657:3:46","nodeType":"YulIdentifier","src":"4657:3:46"},"nativeSrc":"4657:23:46","nodeType":"YulFunctionCall","src":"4657:23:46"},{"kind":"number","nativeSrc":"4682:2:46","nodeType":"YulLiteral","src":"4682:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4653:3:46","nodeType":"YulIdentifier","src":"4653:3:46"},"nativeSrc":"4653:32:46","nodeType":"YulFunctionCall","src":"4653:32:46"},"nativeSrc":"4650:52:46","nodeType":"YulIf","src":"4650:52:46"},{"nativeSrc":"4711:36:46","nodeType":"YulVariableDeclaration","src":"4711:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"4737:9:46","nodeType":"YulIdentifier","src":"4737:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"4724:12:46","nodeType":"YulIdentifier","src":"4724:12:46"},"nativeSrc":"4724:23:46","nodeType":"YulFunctionCall","src":"4724:23:46"},"variables":[{"name":"value","nativeSrc":"4715:5:46","nodeType":"YulTypedName","src":"4715:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"4781:5:46","nodeType":"YulIdentifier","src":"4781:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"4756:24:46","nodeType":"YulIdentifier","src":"4756:24:46"},"nativeSrc":"4756:31:46","nodeType":"YulFunctionCall","src":"4756:31:46"},"nativeSrc":"4756:31:46","nodeType":"YulExpressionStatement","src":"4756:31:46"},{"nativeSrc":"4796:15:46","nodeType":"YulAssignment","src":"4796:15:46","value":{"name":"value","nativeSrc":"4806:5:46","nodeType":"YulIdentifier","src":"4806:5:46"},"variableNames":[{"name":"value0","nativeSrc":"4796:6:46","nodeType":"YulIdentifier","src":"4796:6:46"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"4570:247:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4606:9:46","nodeType":"YulTypedName","src":"4606:9:46","type":""},{"name":"dataEnd","nativeSrc":"4617:7:46","nodeType":"YulTypedName","src":"4617:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4629:6:46","nodeType":"YulTypedName","src":"4629:6:46","type":""}],"src":"4570:247:46"},{"body":{"nativeSrc":"4923:76:46","nodeType":"YulBlock","src":"4923:76:46","statements":[{"nativeSrc":"4933:26:46","nodeType":"YulAssignment","src":"4933:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"4945:9:46","nodeType":"YulIdentifier","src":"4945:9:46"},{"kind":"number","nativeSrc":"4956:2:46","nodeType":"YulLiteral","src":"4956:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4941:3:46","nodeType":"YulIdentifier","src":"4941:3:46"},"nativeSrc":"4941:18:46","nodeType":"YulFunctionCall","src":"4941:18:46"},"variableNames":[{"name":"tail","nativeSrc":"4933:4:46","nodeType":"YulIdentifier","src":"4933:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4975:9:46","nodeType":"YulIdentifier","src":"4975:9:46"},{"name":"value0","nativeSrc":"4986:6:46","nodeType":"YulIdentifier","src":"4986:6:46"}],"functionName":{"name":"mstore","nativeSrc":"4968:6:46","nodeType":"YulIdentifier","src":"4968:6:46"},"nativeSrc":"4968:25:46","nodeType":"YulFunctionCall","src":"4968:25:46"},"nativeSrc":"4968:25:46","nodeType":"YulExpressionStatement","src":"4968:25:46"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"4822:177:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4892:9:46","nodeType":"YulTypedName","src":"4892:9:46","type":""},{"name":"value0","nativeSrc":"4903:6:46","nodeType":"YulTypedName","src":"4903:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4914:4:46","nodeType":"YulTypedName","src":"4914:4:46","type":""}],"src":"4822:177:46"},{"body":{"nativeSrc":"5074:110:46","nodeType":"YulBlock","src":"5074:110:46","statements":[{"body":{"nativeSrc":"5120:16:46","nodeType":"YulBlock","src":"5120:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5129:1:46","nodeType":"YulLiteral","src":"5129:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"5132:1:46","nodeType":"YulLiteral","src":"5132:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5122:6:46","nodeType":"YulIdentifier","src":"5122:6:46"},"nativeSrc":"5122:12:46","nodeType":"YulFunctionCall","src":"5122:12:46"},"nativeSrc":"5122:12:46","nodeType":"YulExpressionStatement","src":"5122:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5095:7:46","nodeType":"YulIdentifier","src":"5095:7:46"},{"name":"headStart","nativeSrc":"5104:9:46","nodeType":"YulIdentifier","src":"5104:9:46"}],"functionName":{"name":"sub","nativeSrc":"5091:3:46","nodeType":"YulIdentifier","src":"5091:3:46"},"nativeSrc":"5091:23:46","nodeType":"YulFunctionCall","src":"5091:23:46"},{"kind":"number","nativeSrc":"5116:2:46","nodeType":"YulLiteral","src":"5116:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5087:3:46","nodeType":"YulIdentifier","src":"5087:3:46"},"nativeSrc":"5087:32:46","nodeType":"YulFunctionCall","src":"5087:32:46"},"nativeSrc":"5084:52:46","nodeType":"YulIf","src":"5084:52:46"},{"nativeSrc":"5145:33:46","nodeType":"YulAssignment","src":"5145:33:46","value":{"arguments":[{"name":"headStart","nativeSrc":"5168:9:46","nodeType":"YulIdentifier","src":"5168:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"5155:12:46","nodeType":"YulIdentifier","src":"5155:12:46"},"nativeSrc":"5155:23:46","nodeType":"YulFunctionCall","src":"5155:23:46"},"variableNames":[{"name":"value0","nativeSrc":"5145:6:46","nodeType":"YulIdentifier","src":"5145:6:46"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"5004:180:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5040:9:46","nodeType":"YulTypedName","src":"5040:9:46","type":""},{"name":"dataEnd","nativeSrc":"5051:7:46","nodeType":"YulTypedName","src":"5051:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5063:6:46","nodeType":"YulTypedName","src":"5063:6:46","type":""}],"src":"5004:180:46"},{"body":{"nativeSrc":"5287:177:46","nodeType":"YulBlock","src":"5287:177:46","statements":[{"body":{"nativeSrc":"5333:16:46","nodeType":"YulBlock","src":"5333:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5342:1:46","nodeType":"YulLiteral","src":"5342:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"5345:1:46","nodeType":"YulLiteral","src":"5345:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5335:6:46","nodeType":"YulIdentifier","src":"5335:6:46"},"nativeSrc":"5335:12:46","nodeType":"YulFunctionCall","src":"5335:12:46"},"nativeSrc":"5335:12:46","nodeType":"YulExpressionStatement","src":"5335:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5308:7:46","nodeType":"YulIdentifier","src":"5308:7:46"},{"name":"headStart","nativeSrc":"5317:9:46","nodeType":"YulIdentifier","src":"5317:9:46"}],"functionName":{"name":"sub","nativeSrc":"5304:3:46","nodeType":"YulIdentifier","src":"5304:3:46"},"nativeSrc":"5304:23:46","nodeType":"YulFunctionCall","src":"5304:23:46"},{"kind":"number","nativeSrc":"5329:2:46","nodeType":"YulLiteral","src":"5329:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5300:3:46","nodeType":"YulIdentifier","src":"5300:3:46"},"nativeSrc":"5300:32:46","nodeType":"YulFunctionCall","src":"5300:32:46"},"nativeSrc":"5297:52:46","nodeType":"YulIf","src":"5297:52:46"},{"nativeSrc":"5358:36:46","nodeType":"YulVariableDeclaration","src":"5358:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"5384:9:46","nodeType":"YulIdentifier","src":"5384:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"5371:12:46","nodeType":"YulIdentifier","src":"5371:12:46"},"nativeSrc":"5371:23:46","nodeType":"YulFunctionCall","src":"5371:23:46"},"variables":[{"name":"value","nativeSrc":"5362:5:46","nodeType":"YulTypedName","src":"5362:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5428:5:46","nodeType":"YulIdentifier","src":"5428:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5403:24:46","nodeType":"YulIdentifier","src":"5403:24:46"},"nativeSrc":"5403:31:46","nodeType":"YulFunctionCall","src":"5403:31:46"},"nativeSrc":"5403:31:46","nodeType":"YulExpressionStatement","src":"5403:31:46"},{"nativeSrc":"5443:15:46","nodeType":"YulAssignment","src":"5443:15:46","value":{"name":"value","nativeSrc":"5453:5:46","nodeType":"YulIdentifier","src":"5453:5:46"},"variableNames":[{"name":"value0","nativeSrc":"5443:6:46","nodeType":"YulIdentifier","src":"5443:6:46"}]}]},"name":"abi_decode_tuple_t_contract$_IRevocationRegistry_$4884","nativeSrc":"5189:275:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5253:9:46","nodeType":"YulTypedName","src":"5253:9:46","type":""},{"name":"dataEnd","nativeSrc":"5264:7:46","nodeType":"YulTypedName","src":"5264:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5276:6:46","nodeType":"YulTypedName","src":"5276:6:46","type":""}],"src":"5189:275:46"},{"body":{"nativeSrc":"5601:125:46","nodeType":"YulBlock","src":"5601:125:46","statements":[{"nativeSrc":"5611:26:46","nodeType":"YulAssignment","src":"5611:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"5623:9:46","nodeType":"YulIdentifier","src":"5623:9:46"},{"kind":"number","nativeSrc":"5634:2:46","nodeType":"YulLiteral","src":"5634:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5619:3:46","nodeType":"YulIdentifier","src":"5619:3:46"},"nativeSrc":"5619:18:46","nodeType":"YulFunctionCall","src":"5619:18:46"},"variableNames":[{"name":"tail","nativeSrc":"5611:4:46","nodeType":"YulIdentifier","src":"5611:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5653:9:46","nodeType":"YulIdentifier","src":"5653:9:46"},{"arguments":[{"name":"value0","nativeSrc":"5668:6:46","nodeType":"YulIdentifier","src":"5668:6:46"},{"kind":"number","nativeSrc":"5676:42:46","nodeType":"YulLiteral","src":"5676:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"5664:3:46","nodeType":"YulIdentifier","src":"5664:3:46"},"nativeSrc":"5664:55:46","nodeType":"YulFunctionCall","src":"5664:55:46"}],"functionName":{"name":"mstore","nativeSrc":"5646:6:46","nodeType":"YulIdentifier","src":"5646:6:46"},"nativeSrc":"5646:74:46","nodeType":"YulFunctionCall","src":"5646:74:46"},"nativeSrc":"5646:74:46","nodeType":"YulExpressionStatement","src":"5646:74:46"}]},"name":"abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3312__to_t_address__fromStack_reversed","nativeSrc":"5469:257:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5570:9:46","nodeType":"YulTypedName","src":"5570:9:46","type":""},{"name":"value0","nativeSrc":"5581:6:46","nodeType":"YulTypedName","src":"5581:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5592:4:46","nodeType":"YulTypedName","src":"5592:4:46","type":""}],"src":"5469:257:46"},{"body":{"nativeSrc":"5773:76:46","nodeType":"YulBlock","src":"5773:76:46","statements":[{"body":{"nativeSrc":"5827:16:46","nodeType":"YulBlock","src":"5827:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5836:1:46","nodeType":"YulLiteral","src":"5836:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"5839:1:46","nodeType":"YulLiteral","src":"5839:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5829:6:46","nodeType":"YulIdentifier","src":"5829:6:46"},"nativeSrc":"5829:12:46","nodeType":"YulFunctionCall","src":"5829:12:46"},"nativeSrc":"5829:12:46","nodeType":"YulExpressionStatement","src":"5829:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5796:5:46","nodeType":"YulIdentifier","src":"5796:5:46"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"5817:5:46","nodeType":"YulIdentifier","src":"5817:5:46"}],"functionName":{"name":"iszero","nativeSrc":"5810:6:46","nodeType":"YulIdentifier","src":"5810:6:46"},"nativeSrc":"5810:13:46","nodeType":"YulFunctionCall","src":"5810:13:46"}],"functionName":{"name":"iszero","nativeSrc":"5803:6:46","nodeType":"YulIdentifier","src":"5803:6:46"},"nativeSrc":"5803:21:46","nodeType":"YulFunctionCall","src":"5803:21:46"}],"functionName":{"name":"eq","nativeSrc":"5793:2:46","nodeType":"YulIdentifier","src":"5793:2:46"},"nativeSrc":"5793:32:46","nodeType":"YulFunctionCall","src":"5793:32:46"}],"functionName":{"name":"iszero","nativeSrc":"5786:6:46","nodeType":"YulIdentifier","src":"5786:6:46"},"nativeSrc":"5786:40:46","nodeType":"YulFunctionCall","src":"5786:40:46"},"nativeSrc":"5783:60:46","nodeType":"YulIf","src":"5783:60:46"}]},"name":"validator_revert_bool","nativeSrc":"5731:118:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5762:5:46","nodeType":"YulTypedName","src":"5762:5:46","type":""}],"src":"5731:118:46"},{"body":{"nativeSrc":"5938:298:46","nodeType":"YulBlock","src":"5938:298:46","statements":[{"body":{"nativeSrc":"5984:16:46","nodeType":"YulBlock","src":"5984:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5993:1:46","nodeType":"YulLiteral","src":"5993:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"5996:1:46","nodeType":"YulLiteral","src":"5996:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5986:6:46","nodeType":"YulIdentifier","src":"5986:6:46"},"nativeSrc":"5986:12:46","nodeType":"YulFunctionCall","src":"5986:12:46"},"nativeSrc":"5986:12:46","nodeType":"YulExpressionStatement","src":"5986:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5959:7:46","nodeType":"YulIdentifier","src":"5959:7:46"},{"name":"headStart","nativeSrc":"5968:9:46","nodeType":"YulIdentifier","src":"5968:9:46"}],"functionName":{"name":"sub","nativeSrc":"5955:3:46","nodeType":"YulIdentifier","src":"5955:3:46"},"nativeSrc":"5955:23:46","nodeType":"YulFunctionCall","src":"5955:23:46"},{"kind":"number","nativeSrc":"5980:2:46","nodeType":"YulLiteral","src":"5980:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"5951:3:46","nodeType":"YulIdentifier","src":"5951:3:46"},"nativeSrc":"5951:32:46","nodeType":"YulFunctionCall","src":"5951:32:46"},"nativeSrc":"5948:52:46","nodeType":"YulIf","src":"5948:52:46"},{"nativeSrc":"6009:36:46","nodeType":"YulVariableDeclaration","src":"6009:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"6035:9:46","nodeType":"YulIdentifier","src":"6035:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"6022:12:46","nodeType":"YulIdentifier","src":"6022:12:46"},"nativeSrc":"6022:23:46","nodeType":"YulFunctionCall","src":"6022:23:46"},"variables":[{"name":"value","nativeSrc":"6013:5:46","nodeType":"YulTypedName","src":"6013:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6079:5:46","nodeType":"YulIdentifier","src":"6079:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6054:24:46","nodeType":"YulIdentifier","src":"6054:24:46"},"nativeSrc":"6054:31:46","nodeType":"YulFunctionCall","src":"6054:31:46"},"nativeSrc":"6054:31:46","nodeType":"YulExpressionStatement","src":"6054:31:46"},{"nativeSrc":"6094:15:46","nodeType":"YulAssignment","src":"6094:15:46","value":{"name":"value","nativeSrc":"6104:5:46","nodeType":"YulIdentifier","src":"6104:5:46"},"variableNames":[{"name":"value0","nativeSrc":"6094:6:46","nodeType":"YulIdentifier","src":"6094:6:46"}]},{"nativeSrc":"6118:47:46","nodeType":"YulVariableDeclaration","src":"6118:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6150:9:46","nodeType":"YulIdentifier","src":"6150:9:46"},{"kind":"number","nativeSrc":"6161:2:46","nodeType":"YulLiteral","src":"6161:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6146:3:46","nodeType":"YulIdentifier","src":"6146:3:46"},"nativeSrc":"6146:18:46","nodeType":"YulFunctionCall","src":"6146:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"6133:12:46","nodeType":"YulIdentifier","src":"6133:12:46"},"nativeSrc":"6133:32:46","nodeType":"YulFunctionCall","src":"6133:32:46"},"variables":[{"name":"value_1","nativeSrc":"6122:7:46","nodeType":"YulTypedName","src":"6122:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"6196:7:46","nodeType":"YulIdentifier","src":"6196:7:46"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"6174:21:46","nodeType":"YulIdentifier","src":"6174:21:46"},"nativeSrc":"6174:30:46","nodeType":"YulFunctionCall","src":"6174:30:46"},"nativeSrc":"6174:30:46","nodeType":"YulExpressionStatement","src":"6174:30:46"},{"nativeSrc":"6213:17:46","nodeType":"YulAssignment","src":"6213:17:46","value":{"name":"value_1","nativeSrc":"6223:7:46","nodeType":"YulIdentifier","src":"6223:7:46"},"variableNames":[{"name":"value1","nativeSrc":"6213:6:46","nodeType":"YulIdentifier","src":"6213:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_bool","nativeSrc":"5854:382:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5896:9:46","nodeType":"YulTypedName","src":"5896:9:46","type":""},{"name":"dataEnd","nativeSrc":"5907:7:46","nodeType":"YulTypedName","src":"5907:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5919:6:46","nodeType":"YulTypedName","src":"5919:6:46","type":""},{"name":"value1","nativeSrc":"5927:6:46","nodeType":"YulTypedName","src":"5927:6:46","type":""}],"src":"5854:382:46"},{"body":{"nativeSrc":"6381:796:46","nodeType":"YulBlock","src":"6381:796:46","statements":[{"body":{"nativeSrc":"6428:16:46","nodeType":"YulBlock","src":"6428:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6437:1:46","nodeType":"YulLiteral","src":"6437:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6440:1:46","nodeType":"YulLiteral","src":"6440:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6430:6:46","nodeType":"YulIdentifier","src":"6430:6:46"},"nativeSrc":"6430:12:46","nodeType":"YulFunctionCall","src":"6430:12:46"},"nativeSrc":"6430:12:46","nodeType":"YulExpressionStatement","src":"6430:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6402:7:46","nodeType":"YulIdentifier","src":"6402:7:46"},{"name":"headStart","nativeSrc":"6411:9:46","nodeType":"YulIdentifier","src":"6411:9:46"}],"functionName":{"name":"sub","nativeSrc":"6398:3:46","nodeType":"YulIdentifier","src":"6398:3:46"},"nativeSrc":"6398:23:46","nodeType":"YulFunctionCall","src":"6398:23:46"},{"kind":"number","nativeSrc":"6423:3:46","nodeType":"YulLiteral","src":"6423:3:46","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"6394:3:46","nodeType":"YulIdentifier","src":"6394:3:46"},"nativeSrc":"6394:33:46","nodeType":"YulFunctionCall","src":"6394:33:46"},"nativeSrc":"6391:53:46","nodeType":"YulIf","src":"6391:53:46"},{"nativeSrc":"6453:36:46","nodeType":"YulVariableDeclaration","src":"6453:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"6479:9:46","nodeType":"YulIdentifier","src":"6479:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"6466:12:46","nodeType":"YulIdentifier","src":"6466:12:46"},"nativeSrc":"6466:23:46","nodeType":"YulFunctionCall","src":"6466:23:46"},"variables":[{"name":"value","nativeSrc":"6457:5:46","nodeType":"YulTypedName","src":"6457:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6523:5:46","nodeType":"YulIdentifier","src":"6523:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6498:24:46","nodeType":"YulIdentifier","src":"6498:24:46"},"nativeSrc":"6498:31:46","nodeType":"YulFunctionCall","src":"6498:31:46"},"nativeSrc":"6498:31:46","nodeType":"YulExpressionStatement","src":"6498:31:46"},{"nativeSrc":"6538:15:46","nodeType":"YulAssignment","src":"6538:15:46","value":{"name":"value","nativeSrc":"6548:5:46","nodeType":"YulIdentifier","src":"6548:5:46"},"variableNames":[{"name":"value0","nativeSrc":"6538:6:46","nodeType":"YulIdentifier","src":"6538:6:46"}]},{"nativeSrc":"6562:47:46","nodeType":"YulVariableDeclaration","src":"6562:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6594:9:46","nodeType":"YulIdentifier","src":"6594:9:46"},{"kind":"number","nativeSrc":"6605:2:46","nodeType":"YulLiteral","src":"6605:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6590:3:46","nodeType":"YulIdentifier","src":"6590:3:46"},"nativeSrc":"6590:18:46","nodeType":"YulFunctionCall","src":"6590:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"6577:12:46","nodeType":"YulIdentifier","src":"6577:12:46"},"nativeSrc":"6577:32:46","nodeType":"YulFunctionCall","src":"6577:32:46"},"variables":[{"name":"value_1","nativeSrc":"6566:7:46","nodeType":"YulTypedName","src":"6566:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"6643:7:46","nodeType":"YulIdentifier","src":"6643:7:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6618:24:46","nodeType":"YulIdentifier","src":"6618:24:46"},"nativeSrc":"6618:33:46","nodeType":"YulFunctionCall","src":"6618:33:46"},"nativeSrc":"6618:33:46","nodeType":"YulExpressionStatement","src":"6618:33:46"},{"nativeSrc":"6660:17:46","nodeType":"YulAssignment","src":"6660:17:46","value":{"name":"value_1","nativeSrc":"6670:7:46","nodeType":"YulIdentifier","src":"6670:7:46"},"variableNames":[{"name":"value1","nativeSrc":"6660:6:46","nodeType":"YulIdentifier","src":"6660:6:46"}]},{"nativeSrc":"6686:42:46","nodeType":"YulAssignment","src":"6686:42:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6713:9:46","nodeType":"YulIdentifier","src":"6713:9:46"},{"kind":"number","nativeSrc":"6724:2:46","nodeType":"YulLiteral","src":"6724:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6709:3:46","nodeType":"YulIdentifier","src":"6709:3:46"},"nativeSrc":"6709:18:46","nodeType":"YulFunctionCall","src":"6709:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"6696:12:46","nodeType":"YulIdentifier","src":"6696:12:46"},"nativeSrc":"6696:32:46","nodeType":"YulFunctionCall","src":"6696:32:46"},"variableNames":[{"name":"value2","nativeSrc":"6686:6:46","nodeType":"YulIdentifier","src":"6686:6:46"}]},{"nativeSrc":"6737:46:46","nodeType":"YulVariableDeclaration","src":"6737:46:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6768:9:46","nodeType":"YulIdentifier","src":"6768:9:46"},{"kind":"number","nativeSrc":"6779:2:46","nodeType":"YulLiteral","src":"6779:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6764:3:46","nodeType":"YulIdentifier","src":"6764:3:46"},"nativeSrc":"6764:18:46","nodeType":"YulFunctionCall","src":"6764:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"6751:12:46","nodeType":"YulIdentifier","src":"6751:12:46"},"nativeSrc":"6751:32:46","nodeType":"YulFunctionCall","src":"6751:32:46"},"variables":[{"name":"offset","nativeSrc":"6741:6:46","nodeType":"YulTypedName","src":"6741:6:46","type":""}]},{"nativeSrc":"6792:28:46","nodeType":"YulVariableDeclaration","src":"6792:28:46","value":{"kind":"number","nativeSrc":"6802:18:46","nodeType":"YulLiteral","src":"6802:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6796:2:46","nodeType":"YulTypedName","src":"6796:2:46","type":""}]},{"body":{"nativeSrc":"6847:16:46","nodeType":"YulBlock","src":"6847:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6856:1:46","nodeType":"YulLiteral","src":"6856:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6859:1:46","nodeType":"YulLiteral","src":"6859:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6849:6:46","nodeType":"YulIdentifier","src":"6849:6:46"},"nativeSrc":"6849:12:46","nodeType":"YulFunctionCall","src":"6849:12:46"},"nativeSrc":"6849:12:46","nodeType":"YulExpressionStatement","src":"6849:12:46"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6835:6:46","nodeType":"YulIdentifier","src":"6835:6:46"},{"name":"_1","nativeSrc":"6843:2:46","nodeType":"YulIdentifier","src":"6843:2:46"}],"functionName":{"name":"gt","nativeSrc":"6832:2:46","nodeType":"YulIdentifier","src":"6832:2:46"},"nativeSrc":"6832:14:46","nodeType":"YulFunctionCall","src":"6832:14:46"},"nativeSrc":"6829:34:46","nodeType":"YulIf","src":"6829:34:46"},{"nativeSrc":"6872:32:46","nodeType":"YulVariableDeclaration","src":"6872:32:46","value":{"arguments":[{"name":"headStart","nativeSrc":"6886:9:46","nodeType":"YulIdentifier","src":"6886:9:46"},{"name":"offset","nativeSrc":"6897:6:46","nodeType":"YulIdentifier","src":"6897:6:46"}],"functionName":{"name":"add","nativeSrc":"6882:3:46","nodeType":"YulIdentifier","src":"6882:3:46"},"nativeSrc":"6882:22:46","nodeType":"YulFunctionCall","src":"6882:22:46"},"variables":[{"name":"_2","nativeSrc":"6876:2:46","nodeType":"YulTypedName","src":"6876:2:46","type":""}]},{"body":{"nativeSrc":"6952:16:46","nodeType":"YulBlock","src":"6952:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6961:1:46","nodeType":"YulLiteral","src":"6961:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"6964:1:46","nodeType":"YulLiteral","src":"6964:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6954:6:46","nodeType":"YulIdentifier","src":"6954:6:46"},"nativeSrc":"6954:12:46","nodeType":"YulFunctionCall","src":"6954:12:46"},"nativeSrc":"6954:12:46","nodeType":"YulExpressionStatement","src":"6954:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"6931:2:46","nodeType":"YulIdentifier","src":"6931:2:46"},{"kind":"number","nativeSrc":"6935:4:46","nodeType":"YulLiteral","src":"6935:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"6927:3:46","nodeType":"YulIdentifier","src":"6927:3:46"},"nativeSrc":"6927:13:46","nodeType":"YulFunctionCall","src":"6927:13:46"},{"name":"dataEnd","nativeSrc":"6942:7:46","nodeType":"YulIdentifier","src":"6942:7:46"}],"functionName":{"name":"slt","nativeSrc":"6923:3:46","nodeType":"YulIdentifier","src":"6923:3:46"},"nativeSrc":"6923:27:46","nodeType":"YulFunctionCall","src":"6923:27:46"}],"functionName":{"name":"iszero","nativeSrc":"6916:6:46","nodeType":"YulIdentifier","src":"6916:6:46"},"nativeSrc":"6916:35:46","nodeType":"YulFunctionCall","src":"6916:35:46"},"nativeSrc":"6913:55:46","nodeType":"YulIf","src":"6913:55:46"},{"nativeSrc":"6977:30:46","nodeType":"YulVariableDeclaration","src":"6977:30:46","value":{"arguments":[{"name":"_2","nativeSrc":"7004:2:46","nodeType":"YulIdentifier","src":"7004:2:46"}],"functionName":{"name":"calldataload","nativeSrc":"6991:12:46","nodeType":"YulIdentifier","src":"6991:12:46"},"nativeSrc":"6991:16:46","nodeType":"YulFunctionCall","src":"6991:16:46"},"variables":[{"name":"length","nativeSrc":"6981:6:46","nodeType":"YulTypedName","src":"6981:6:46","type":""}]},{"body":{"nativeSrc":"7034:16:46","nodeType":"YulBlock","src":"7034:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7043:1:46","nodeType":"YulLiteral","src":"7043:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7046:1:46","nodeType":"YulLiteral","src":"7046:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7036:6:46","nodeType":"YulIdentifier","src":"7036:6:46"},"nativeSrc":"7036:12:46","nodeType":"YulFunctionCall","src":"7036:12:46"},"nativeSrc":"7036:12:46","nodeType":"YulExpressionStatement","src":"7036:12:46"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"7022:6:46","nodeType":"YulIdentifier","src":"7022:6:46"},{"name":"_1","nativeSrc":"7030:2:46","nodeType":"YulIdentifier","src":"7030:2:46"}],"functionName":{"name":"gt","nativeSrc":"7019:2:46","nodeType":"YulIdentifier","src":"7019:2:46"},"nativeSrc":"7019:14:46","nodeType":"YulFunctionCall","src":"7019:14:46"},"nativeSrc":"7016:34:46","nodeType":"YulIf","src":"7016:34:46"},{"body":{"nativeSrc":"7100:16:46","nodeType":"YulBlock","src":"7100:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7109:1:46","nodeType":"YulLiteral","src":"7109:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7112:1:46","nodeType":"YulLiteral","src":"7112:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7102:6:46","nodeType":"YulIdentifier","src":"7102:6:46"},"nativeSrc":"7102:12:46","nodeType":"YulFunctionCall","src":"7102:12:46"},"nativeSrc":"7102:12:46","nodeType":"YulExpressionStatement","src":"7102:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"7073:2:46","nodeType":"YulIdentifier","src":"7073:2:46"},{"name":"length","nativeSrc":"7077:6:46","nodeType":"YulIdentifier","src":"7077:6:46"}],"functionName":{"name":"add","nativeSrc":"7069:3:46","nodeType":"YulIdentifier","src":"7069:3:46"},"nativeSrc":"7069:15:46","nodeType":"YulFunctionCall","src":"7069:15:46"},{"kind":"number","nativeSrc":"7086:2:46","nodeType":"YulLiteral","src":"7086:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7065:3:46","nodeType":"YulIdentifier","src":"7065:3:46"},"nativeSrc":"7065:24:46","nodeType":"YulFunctionCall","src":"7065:24:46"},{"name":"dataEnd","nativeSrc":"7091:7:46","nodeType":"YulIdentifier","src":"7091:7:46"}],"functionName":{"name":"gt","nativeSrc":"7062:2:46","nodeType":"YulIdentifier","src":"7062:2:46"},"nativeSrc":"7062:37:46","nodeType":"YulFunctionCall","src":"7062:37:46"},"nativeSrc":"7059:57:46","nodeType":"YulIf","src":"7059:57:46"},{"nativeSrc":"7125:21:46","nodeType":"YulAssignment","src":"7125:21:46","value":{"arguments":[{"name":"_2","nativeSrc":"7139:2:46","nodeType":"YulIdentifier","src":"7139:2:46"},{"kind":"number","nativeSrc":"7143:2:46","nodeType":"YulLiteral","src":"7143:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7135:3:46","nodeType":"YulIdentifier","src":"7135:3:46"},"nativeSrc":"7135:11:46","nodeType":"YulFunctionCall","src":"7135:11:46"},"variableNames":[{"name":"value3","nativeSrc":"7125:6:46","nodeType":"YulIdentifier","src":"7125:6:46"}]},{"nativeSrc":"7155:16:46","nodeType":"YulAssignment","src":"7155:16:46","value":{"name":"length","nativeSrc":"7165:6:46","nodeType":"YulIdentifier","src":"7165:6:46"},"variableNames":[{"name":"value4","nativeSrc":"7155:6:46","nodeType":"YulIdentifier","src":"7155:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"6241:936:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6315:9:46","nodeType":"YulTypedName","src":"6315:9:46","type":""},{"name":"dataEnd","nativeSrc":"6326:7:46","nodeType":"YulTypedName","src":"6326:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6338:6:46","nodeType":"YulTypedName","src":"6338:6:46","type":""},{"name":"value1","nativeSrc":"6346:6:46","nodeType":"YulTypedName","src":"6346:6:46","type":""},{"name":"value2","nativeSrc":"6354:6:46","nodeType":"YulTypedName","src":"6354:6:46","type":""},{"name":"value3","nativeSrc":"6362:6:46","nodeType":"YulTypedName","src":"6362:6:46","type":""},{"name":"value4","nativeSrc":"6370:6:46","nodeType":"YulTypedName","src":"6370:6:46","type":""}],"src":"6241:936:46"},{"body":{"nativeSrc":"7283:76:46","nodeType":"YulBlock","src":"7283:76:46","statements":[{"nativeSrc":"7293:26:46","nodeType":"YulAssignment","src":"7293:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"7305:9:46","nodeType":"YulIdentifier","src":"7305:9:46"},{"kind":"number","nativeSrc":"7316:2:46","nodeType":"YulLiteral","src":"7316:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7301:3:46","nodeType":"YulIdentifier","src":"7301:3:46"},"nativeSrc":"7301:18:46","nodeType":"YulFunctionCall","src":"7301:18:46"},"variableNames":[{"name":"tail","nativeSrc":"7293:4:46","nodeType":"YulIdentifier","src":"7293:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7335:9:46","nodeType":"YulIdentifier","src":"7335:9:46"},{"name":"value0","nativeSrc":"7346:6:46","nodeType":"YulIdentifier","src":"7346:6:46"}],"functionName":{"name":"mstore","nativeSrc":"7328:6:46","nodeType":"YulIdentifier","src":"7328:6:46"},"nativeSrc":"7328:25:46","nodeType":"YulFunctionCall","src":"7328:25:46"},"nativeSrc":"7328:25:46","nodeType":"YulExpressionStatement","src":"7328:25:46"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"7182:177:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7252:9:46","nodeType":"YulTypedName","src":"7252:9:46","type":""},{"name":"value0","nativeSrc":"7263:6:46","nodeType":"YulTypedName","src":"7263:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7274:4:46","nodeType":"YulTypedName","src":"7274:4:46","type":""}],"src":"7182:177:46"},{"body":{"nativeSrc":"7451:301:46","nodeType":"YulBlock","src":"7451:301:46","statements":[{"body":{"nativeSrc":"7497:16:46","nodeType":"YulBlock","src":"7497:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7506:1:46","nodeType":"YulLiteral","src":"7506:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"7509:1:46","nodeType":"YulLiteral","src":"7509:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7499:6:46","nodeType":"YulIdentifier","src":"7499:6:46"},"nativeSrc":"7499:12:46","nodeType":"YulFunctionCall","src":"7499:12:46"},"nativeSrc":"7499:12:46","nodeType":"YulExpressionStatement","src":"7499:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7472:7:46","nodeType":"YulIdentifier","src":"7472:7:46"},{"name":"headStart","nativeSrc":"7481:9:46","nodeType":"YulIdentifier","src":"7481:9:46"}],"functionName":{"name":"sub","nativeSrc":"7468:3:46","nodeType":"YulIdentifier","src":"7468:3:46"},"nativeSrc":"7468:23:46","nodeType":"YulFunctionCall","src":"7468:23:46"},{"kind":"number","nativeSrc":"7493:2:46","nodeType":"YulLiteral","src":"7493:2:46","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7464:3:46","nodeType":"YulIdentifier","src":"7464:3:46"},"nativeSrc":"7464:32:46","nodeType":"YulFunctionCall","src":"7464:32:46"},"nativeSrc":"7461:52:46","nodeType":"YulIf","src":"7461:52:46"},{"nativeSrc":"7522:36:46","nodeType":"YulVariableDeclaration","src":"7522:36:46","value":{"arguments":[{"name":"headStart","nativeSrc":"7548:9:46","nodeType":"YulIdentifier","src":"7548:9:46"}],"functionName":{"name":"calldataload","nativeSrc":"7535:12:46","nodeType":"YulIdentifier","src":"7535:12:46"},"nativeSrc":"7535:23:46","nodeType":"YulFunctionCall","src":"7535:23:46"},"variables":[{"name":"value","nativeSrc":"7526:5:46","nodeType":"YulTypedName","src":"7526:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7592:5:46","nodeType":"YulIdentifier","src":"7592:5:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7567:24:46","nodeType":"YulIdentifier","src":"7567:24:46"},"nativeSrc":"7567:31:46","nodeType":"YulFunctionCall","src":"7567:31:46"},"nativeSrc":"7567:31:46","nodeType":"YulExpressionStatement","src":"7567:31:46"},{"nativeSrc":"7607:15:46","nodeType":"YulAssignment","src":"7607:15:46","value":{"name":"value","nativeSrc":"7617:5:46","nodeType":"YulIdentifier","src":"7617:5:46"},"variableNames":[{"name":"value0","nativeSrc":"7607:6:46","nodeType":"YulIdentifier","src":"7607:6:46"}]},{"nativeSrc":"7631:47:46","nodeType":"YulVariableDeclaration","src":"7631:47:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7663:9:46","nodeType":"YulIdentifier","src":"7663:9:46"},{"kind":"number","nativeSrc":"7674:2:46","nodeType":"YulLiteral","src":"7674:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7659:3:46","nodeType":"YulIdentifier","src":"7659:3:46"},"nativeSrc":"7659:18:46","nodeType":"YulFunctionCall","src":"7659:18:46"}],"functionName":{"name":"calldataload","nativeSrc":"7646:12:46","nodeType":"YulIdentifier","src":"7646:12:46"},"nativeSrc":"7646:32:46","nodeType":"YulFunctionCall","src":"7646:32:46"},"variables":[{"name":"value_1","nativeSrc":"7635:7:46","nodeType":"YulTypedName","src":"7635:7:46","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"7712:7:46","nodeType":"YulIdentifier","src":"7712:7:46"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7687:24:46","nodeType":"YulIdentifier","src":"7687:24:46"},"nativeSrc":"7687:33:46","nodeType":"YulFunctionCall","src":"7687:33:46"},"nativeSrc":"7687:33:46","nodeType":"YulExpressionStatement","src":"7687:33:46"},{"nativeSrc":"7729:17:46","nodeType":"YulAssignment","src":"7729:17:46","value":{"name":"value_1","nativeSrc":"7739:7:46","nodeType":"YulIdentifier","src":"7739:7:46"},"variableNames":[{"name":"value1","nativeSrc":"7729:6:46","nodeType":"YulIdentifier","src":"7729:6:46"}]}]},"name":"abi_decode_tuple_t_addresst_address","nativeSrc":"7364:388:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7409:9:46","nodeType":"YulTypedName","src":"7409:9:46","type":""},{"name":"dataEnd","nativeSrc":"7420:7:46","nodeType":"YulTypedName","src":"7420:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7432:6:46","nodeType":"YulTypedName","src":"7432:6:46","type":""},{"name":"value1","nativeSrc":"7440:6:46","nodeType":"YulTypedName","src":"7440:6:46","type":""}],"src":"7364:388:46"},{"body":{"nativeSrc":"7812:382:46","nodeType":"YulBlock","src":"7812:382:46","statements":[{"nativeSrc":"7822:22:46","nodeType":"YulAssignment","src":"7822:22:46","value":{"arguments":[{"kind":"number","nativeSrc":"7836:1:46","nodeType":"YulLiteral","src":"7836:1:46","type":"","value":"1"},{"name":"data","nativeSrc":"7839:4:46","nodeType":"YulIdentifier","src":"7839:4:46"}],"functionName":{"name":"shr","nativeSrc":"7832:3:46","nodeType":"YulIdentifier","src":"7832:3:46"},"nativeSrc":"7832:12:46","nodeType":"YulFunctionCall","src":"7832:12:46"},"variableNames":[{"name":"length","nativeSrc":"7822:6:46","nodeType":"YulIdentifier","src":"7822:6:46"}]},{"nativeSrc":"7853:38:46","nodeType":"YulVariableDeclaration","src":"7853:38:46","value":{"arguments":[{"name":"data","nativeSrc":"7883:4:46","nodeType":"YulIdentifier","src":"7883:4:46"},{"kind":"number","nativeSrc":"7889:1:46","nodeType":"YulLiteral","src":"7889:1:46","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"7879:3:46","nodeType":"YulIdentifier","src":"7879:3:46"},"nativeSrc":"7879:12:46","nodeType":"YulFunctionCall","src":"7879:12:46"},"variables":[{"name":"outOfPlaceEncoding","nativeSrc":"7857:18:46","nodeType":"YulTypedName","src":"7857:18:46","type":""}]},{"body":{"nativeSrc":"7930:31:46","nodeType":"YulBlock","src":"7930:31:46","statements":[{"nativeSrc":"7932:27:46","nodeType":"YulAssignment","src":"7932:27:46","value":{"arguments":[{"name":"length","nativeSrc":"7946:6:46","nodeType":"YulIdentifier","src":"7946:6:46"},{"kind":"number","nativeSrc":"7954:4:46","nodeType":"YulLiteral","src":"7954:4:46","type":"","value":"0x7f"}],"functionName":{"name":"and","nativeSrc":"7942:3:46","nodeType":"YulIdentifier","src":"7942:3:46"},"nativeSrc":"7942:17:46","nodeType":"YulFunctionCall","src":"7942:17:46"},"variableNames":[{"name":"length","nativeSrc":"7932:6:46","nodeType":"YulIdentifier","src":"7932:6:46"}]}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"7910:18:46","nodeType":"YulIdentifier","src":"7910:18:46"}],"functionName":{"name":"iszero","nativeSrc":"7903:6:46","nodeType":"YulIdentifier","src":"7903:6:46"},"nativeSrc":"7903:26:46","nodeType":"YulFunctionCall","src":"7903:26:46"},"nativeSrc":"7900:61:46","nodeType":"YulIf","src":"7900:61:46"},{"body":{"nativeSrc":"8020:168:46","nodeType":"YulBlock","src":"8020:168:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8041:1:46","nodeType":"YulLiteral","src":"8041:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8044:77:46","nodeType":"YulLiteral","src":"8044:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"8034:6:46","nodeType":"YulIdentifier","src":"8034:6:46"},"nativeSrc":"8034:88:46","nodeType":"YulFunctionCall","src":"8034:88:46"},"nativeSrc":"8034:88:46","nodeType":"YulExpressionStatement","src":"8034:88:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8142:1:46","nodeType":"YulLiteral","src":"8142:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"8145:4:46","nodeType":"YulLiteral","src":"8145:4:46","type":"","value":"0x22"}],"functionName":{"name":"mstore","nativeSrc":"8135:6:46","nodeType":"YulIdentifier","src":"8135:6:46"},"nativeSrc":"8135:15:46","nodeType":"YulFunctionCall","src":"8135:15:46"},"nativeSrc":"8135:15:46","nodeType":"YulExpressionStatement","src":"8135:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"8170:1:46","nodeType":"YulLiteral","src":"8170:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8173:4:46","nodeType":"YulLiteral","src":"8173:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"8163:6:46","nodeType":"YulIdentifier","src":"8163:6:46"},"nativeSrc":"8163:15:46","nodeType":"YulFunctionCall","src":"8163:15:46"},"nativeSrc":"8163:15:46","nodeType":"YulExpressionStatement","src":"8163:15:46"}]},"condition":{"arguments":[{"name":"outOfPlaceEncoding","nativeSrc":"7976:18:46","nodeType":"YulIdentifier","src":"7976:18:46"},{"arguments":[{"name":"length","nativeSrc":"7999:6:46","nodeType":"YulIdentifier","src":"7999:6:46"},{"kind":"number","nativeSrc":"8007:2:46","nodeType":"YulLiteral","src":"8007:2:46","type":"","value":"32"}],"functionName":{"name":"lt","nativeSrc":"7996:2:46","nodeType":"YulIdentifier","src":"7996:2:46"},"nativeSrc":"7996:14:46","nodeType":"YulFunctionCall","src":"7996:14:46"}],"functionName":{"name":"eq","nativeSrc":"7973:2:46","nodeType":"YulIdentifier","src":"7973:2:46"},"nativeSrc":"7973:38:46","nodeType":"YulFunctionCall","src":"7973:38:46"},"nativeSrc":"7970:218:46","nodeType":"YulIf","src":"7970:218:46"}]},"name":"extract_byte_array_length","nativeSrc":"7757:437:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"7792:4:46","nodeType":"YulTypedName","src":"7792:4:46","type":""}],"returnVariables":[{"name":"length","nativeSrc":"7801:6:46","nodeType":"YulTypedName","src":"7801:6:46","type":""}],"src":"7757:437:46"},{"body":{"nativeSrc":"8255:65:46","nodeType":"YulBlock","src":"8255:65:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8272:1:46","nodeType":"YulLiteral","src":"8272:1:46","type":"","value":"0"},{"name":"ptr","nativeSrc":"8275:3:46","nodeType":"YulIdentifier","src":"8275:3:46"}],"functionName":{"name":"mstore","nativeSrc":"8265:6:46","nodeType":"YulIdentifier","src":"8265:6:46"},"nativeSrc":"8265:14:46","nodeType":"YulFunctionCall","src":"8265:14:46"},"nativeSrc":"8265:14:46","nodeType":"YulExpressionStatement","src":"8265:14:46"},{"nativeSrc":"8288:26:46","nodeType":"YulAssignment","src":"8288:26:46","value":{"arguments":[{"kind":"number","nativeSrc":"8306:1:46","nodeType":"YulLiteral","src":"8306:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8309:4:46","nodeType":"YulLiteral","src":"8309:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"8296:9:46","nodeType":"YulIdentifier","src":"8296:9:46"},"nativeSrc":"8296:18:46","nodeType":"YulFunctionCall","src":"8296:18:46"},"variableNames":[{"name":"data","nativeSrc":"8288:4:46","nodeType":"YulIdentifier","src":"8288:4:46"}]}]},"name":"array_dataslot_string_storage","nativeSrc":"8199:121:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"8238:3:46","nodeType":"YulTypedName","src":"8238:3:46","type":""}],"returnVariables":[{"name":"data","nativeSrc":"8246:4:46","nodeType":"YulTypedName","src":"8246:4:46","type":""}],"src":"8199:121:46"},{"body":{"nativeSrc":"8461:765:46","nodeType":"YulBlock","src":"8461:765:46","statements":[{"nativeSrc":"8471:12:46","nodeType":"YulVariableDeclaration","src":"8471:12:46","value":{"kind":"number","nativeSrc":"8482:1:46","nodeType":"YulLiteral","src":"8482:1:46","type":"","value":"0"},"variables":[{"name":"ret","nativeSrc":"8475:3:46","nodeType":"YulTypedName","src":"8475:3:46","type":""}]},{"nativeSrc":"8492:30:46","nodeType":"YulVariableDeclaration","src":"8492:30:46","value":{"arguments":[{"name":"value0","nativeSrc":"8515:6:46","nodeType":"YulIdentifier","src":"8515:6:46"}],"functionName":{"name":"sload","nativeSrc":"8509:5:46","nodeType":"YulIdentifier","src":"8509:5:46"},"nativeSrc":"8509:13:46","nodeType":"YulFunctionCall","src":"8509:13:46"},"variables":[{"name":"slotValue","nativeSrc":"8496:9:46","nodeType":"YulTypedName","src":"8496:9:46","type":""}]},{"nativeSrc":"8531:50:46","nodeType":"YulVariableDeclaration","src":"8531:50:46","value":{"arguments":[{"name":"slotValue","nativeSrc":"8571:9:46","nodeType":"YulIdentifier","src":"8571:9:46"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"8545:25:46","nodeType":"YulIdentifier","src":"8545:25:46"},"nativeSrc":"8545:36:46","nodeType":"YulFunctionCall","src":"8545:36:46"},"variables":[{"name":"length","nativeSrc":"8535:6:46","nodeType":"YulTypedName","src":"8535:6:46","type":""}]},{"nativeSrc":"8590:11:46","nodeType":"YulVariableDeclaration","src":"8590:11:46","value":{"kind":"number","nativeSrc":"8600:1:46","nodeType":"YulLiteral","src":"8600:1:46","type":"","value":"1"},"variables":[{"name":"_1","nativeSrc":"8594:2:46","nodeType":"YulTypedName","src":"8594:2:46","type":""}]},{"cases":[{"body":{"nativeSrc":"8650:184:46","nodeType":"YulBlock","src":"8650:184:46","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"8671:3:46","nodeType":"YulIdentifier","src":"8671:3:46"},{"arguments":[{"name":"slotValue","nativeSrc":"8680:9:46","nodeType":"YulIdentifier","src":"8680:9:46"},{"kind":"number","nativeSrc":"8691:66:46","nodeType":"YulLiteral","src":"8691:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00"}],"functionName":{"name":"and","nativeSrc":"8676:3:46","nodeType":"YulIdentifier","src":"8676:3:46"},"nativeSrc":"8676:82:46","nodeType":"YulFunctionCall","src":"8676:82:46"}],"functionName":{"name":"mstore","nativeSrc":"8664:6:46","nodeType":"YulIdentifier","src":"8664:6:46"},"nativeSrc":"8664:95:46","nodeType":"YulFunctionCall","src":"8664:95:46"},"nativeSrc":"8664:95:46","nodeType":"YulExpressionStatement","src":"8664:95:46"},{"nativeSrc":"8772:52:46","nodeType":"YulAssignment","src":"8772:52:46","value":{"arguments":[{"name":"pos","nativeSrc":"8783:3:46","nodeType":"YulIdentifier","src":"8783:3:46"},{"arguments":[{"name":"length","nativeSrc":"8792:6:46","nodeType":"YulIdentifier","src":"8792:6:46"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"8814:6:46","nodeType":"YulIdentifier","src":"8814:6:46"}],"functionName":{"name":"iszero","nativeSrc":"8807:6:46","nodeType":"YulIdentifier","src":"8807:6:46"},"nativeSrc":"8807:14:46","nodeType":"YulFunctionCall","src":"8807:14:46"}],"functionName":{"name":"iszero","nativeSrc":"8800:6:46","nodeType":"YulIdentifier","src":"8800:6:46"},"nativeSrc":"8800:22:46","nodeType":"YulFunctionCall","src":"8800:22:46"}],"functionName":{"name":"mul","nativeSrc":"8788:3:46","nodeType":"YulIdentifier","src":"8788:3:46"},"nativeSrc":"8788:35:46","nodeType":"YulFunctionCall","src":"8788:35:46"}],"functionName":{"name":"add","nativeSrc":"8779:3:46","nodeType":"YulIdentifier","src":"8779:3:46"},"nativeSrc":"8779:45:46","nodeType":"YulFunctionCall","src":"8779:45:46"},"variableNames":[{"name":"ret","nativeSrc":"8772:3:46","nodeType":"YulIdentifier","src":"8772:3:46"}]}]},"nativeSrc":"8643:191:46","nodeType":"YulCase","src":"8643:191:46","value":{"kind":"number","nativeSrc":"8648:1:46","nodeType":"YulLiteral","src":"8648:1:46","type":"","value":"0"}},{"body":{"nativeSrc":"8850:351:46","nodeType":"YulBlock","src":"8850:351:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8871:1:46","nodeType":"YulLiteral","src":"8871:1:46","type":"","value":"0"},{"name":"value0","nativeSrc":"8874:6:46","nodeType":"YulIdentifier","src":"8874:6:46"}],"functionName":{"name":"mstore","nativeSrc":"8864:6:46","nodeType":"YulIdentifier","src":"8864:6:46"},"nativeSrc":"8864:17:46","nodeType":"YulFunctionCall","src":"8864:17:46"},"nativeSrc":"8864:17:46","nodeType":"YulExpressionStatement","src":"8864:17:46"},{"nativeSrc":"8894:14:46","nodeType":"YulVariableDeclaration","src":"8894:14:46","value":{"kind":"number","nativeSrc":"8904:4:46","nodeType":"YulLiteral","src":"8904:4:46","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"8898:2:46","nodeType":"YulTypedName","src":"8898:2:46","type":""}]},{"nativeSrc":"8921:33:46","nodeType":"YulVariableDeclaration","src":"8921:33:46","value":{"arguments":[{"kind":"number","nativeSrc":"8946:1:46","nodeType":"YulLiteral","src":"8946:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"8949:4:46","nodeType":"YulLiteral","src":"8949:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"8936:9:46","nodeType":"YulIdentifier","src":"8936:9:46"},"nativeSrc":"8936:18:46","nodeType":"YulFunctionCall","src":"8936:18:46"},"variables":[{"name":"dataPos","nativeSrc":"8925:7:46","nodeType":"YulTypedName","src":"8925:7:46","type":""}]},{"nativeSrc":"8967:10:46","nodeType":"YulVariableDeclaration","src":"8967:10:46","value":{"kind":"number","nativeSrc":"8976:1:46","nodeType":"YulLiteral","src":"8976:1:46","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"8971:1:46","nodeType":"YulTypedName","src":"8971:1:46","type":""}]},{"body":{"nativeSrc":"9044:111:46","nodeType":"YulBlock","src":"9044:111:46","statements":[{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"9073:3:46","nodeType":"YulIdentifier","src":"9073:3:46"},{"name":"i","nativeSrc":"9078:1:46","nodeType":"YulIdentifier","src":"9078:1:46"}],"functionName":{"name":"add","nativeSrc":"9069:3:46","nodeType":"YulIdentifier","src":"9069:3:46"},"nativeSrc":"9069:11:46","nodeType":"YulFunctionCall","src":"9069:11:46"},{"arguments":[{"name":"dataPos","nativeSrc":"9088:7:46","nodeType":"YulIdentifier","src":"9088:7:46"}],"functionName":{"name":"sload","nativeSrc":"9082:5:46","nodeType":"YulIdentifier","src":"9082:5:46"},"nativeSrc":"9082:14:46","nodeType":"YulFunctionCall","src":"9082:14:46"}],"functionName":{"name":"mstore","nativeSrc":"9062:6:46","nodeType":"YulIdentifier","src":"9062:6:46"},"nativeSrc":"9062:35:46","nodeType":"YulFunctionCall","src":"9062:35:46"},"nativeSrc":"9062:35:46","nodeType":"YulExpressionStatement","src":"9062:35:46"},{"nativeSrc":"9114:27:46","nodeType":"YulAssignment","src":"9114:27:46","value":{"arguments":[{"name":"dataPos","nativeSrc":"9129:7:46","nodeType":"YulIdentifier","src":"9129:7:46"},{"name":"_1","nativeSrc":"9138:2:46","nodeType":"YulIdentifier","src":"9138:2:46"}],"functionName":{"name":"add","nativeSrc":"9125:3:46","nodeType":"YulIdentifier","src":"9125:3:46"},"nativeSrc":"9125:16:46","nodeType":"YulFunctionCall","src":"9125:16:46"},"variableNames":[{"name":"dataPos","nativeSrc":"9114:7:46","nodeType":"YulIdentifier","src":"9114:7:46"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"9001:1:46","nodeType":"YulIdentifier","src":"9001:1:46"},{"name":"length","nativeSrc":"9004:6:46","nodeType":"YulIdentifier","src":"9004:6:46"}],"functionName":{"name":"lt","nativeSrc":"8998:2:46","nodeType":"YulIdentifier","src":"8998:2:46"},"nativeSrc":"8998:13:46","nodeType":"YulFunctionCall","src":"8998:13:46"},"nativeSrc":"8990:165:46","nodeType":"YulForLoop","post":{"nativeSrc":"9012:19:46","nodeType":"YulBlock","src":"9012:19:46","statements":[{"nativeSrc":"9014:15:46","nodeType":"YulAssignment","src":"9014:15:46","value":{"arguments":[{"name":"i","nativeSrc":"9023:1:46","nodeType":"YulIdentifier","src":"9023:1:46"},{"name":"_2","nativeSrc":"9026:2:46","nodeType":"YulIdentifier","src":"9026:2:46"}],"functionName":{"name":"add","nativeSrc":"9019:3:46","nodeType":"YulIdentifier","src":"9019:3:46"},"nativeSrc":"9019:10:46","nodeType":"YulFunctionCall","src":"9019:10:46"},"variableNames":[{"name":"i","nativeSrc":"9014:1:46","nodeType":"YulIdentifier","src":"9014:1:46"}]}]},"pre":{"nativeSrc":"8994:3:46","nodeType":"YulBlock","src":"8994:3:46","statements":[]},"src":"8990:165:46"},{"nativeSrc":"9168:23:46","nodeType":"YulAssignment","src":"9168:23:46","value":{"arguments":[{"name":"pos","nativeSrc":"9179:3:46","nodeType":"YulIdentifier","src":"9179:3:46"},{"name":"length","nativeSrc":"9184:6:46","nodeType":"YulIdentifier","src":"9184:6:46"}],"functionName":{"name":"add","nativeSrc":"9175:3:46","nodeType":"YulIdentifier","src":"9175:3:46"},"nativeSrc":"9175:16:46","nodeType":"YulFunctionCall","src":"9175:16:46"},"variableNames":[{"name":"ret","nativeSrc":"9168:3:46","nodeType":"YulIdentifier","src":"9168:3:46"}]}]},"nativeSrc":"8843:358:46","nodeType":"YulCase","src":"8843:358:46","value":{"kind":"number","nativeSrc":"8848:1:46","nodeType":"YulLiteral","src":"8848:1:46","type":"","value":"1"}}],"expression":{"arguments":[{"name":"slotValue","nativeSrc":"8621:9:46","nodeType":"YulIdentifier","src":"8621:9:46"},{"kind":"number","nativeSrc":"8632:1:46","nodeType":"YulLiteral","src":"8632:1:46","type":"","value":"1"}],"functionName":{"name":"and","nativeSrc":"8617:3:46","nodeType":"YulIdentifier","src":"8617:3:46"},"nativeSrc":"8617:17:46","nodeType":"YulFunctionCall","src":"8617:17:46"},"nativeSrc":"8610:591:46","nodeType":"YulSwitch","src":"8610:591:46"},{"nativeSrc":"9210:10:46","nodeType":"YulAssignment","src":"9210:10:46","value":{"name":"ret","nativeSrc":"9217:3:46","nodeType":"YulIdentifier","src":"9217:3:46"},"variableNames":[{"name":"end","nativeSrc":"9210:3:46","nodeType":"YulIdentifier","src":"9210:3:46"}]}]},"name":"abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"8325:901:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"8437:3:46","nodeType":"YulTypedName","src":"8437:3:46","type":""},{"name":"value0","nativeSrc":"8442:6:46","nodeType":"YulTypedName","src":"8442:6:46","type":""}],"returnVariables":[{"name":"end","nativeSrc":"8453:3:46","nodeType":"YulTypedName","src":"8453:3:46","type":""}],"src":"8325:901:46"},{"body":{"nativeSrc":"9360:168:46","nodeType":"YulBlock","src":"9360:168:46","statements":[{"nativeSrc":"9370:26:46","nodeType":"YulAssignment","src":"9370:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"9382:9:46","nodeType":"YulIdentifier","src":"9382:9:46"},{"kind":"number","nativeSrc":"9393:2:46","nodeType":"YulLiteral","src":"9393:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9378:3:46","nodeType":"YulIdentifier","src":"9378:3:46"},"nativeSrc":"9378:18:46","nodeType":"YulFunctionCall","src":"9378:18:46"},"variableNames":[{"name":"tail","nativeSrc":"9370:4:46","nodeType":"YulIdentifier","src":"9370:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9412:9:46","nodeType":"YulIdentifier","src":"9412:9:46"},{"name":"value0","nativeSrc":"9423:6:46","nodeType":"YulIdentifier","src":"9423:6:46"}],"functionName":{"name":"mstore","nativeSrc":"9405:6:46","nodeType":"YulIdentifier","src":"9405:6:46"},"nativeSrc":"9405:25:46","nodeType":"YulFunctionCall","src":"9405:25:46"},"nativeSrc":"9405:25:46","nodeType":"YulExpressionStatement","src":"9405:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9450:9:46","nodeType":"YulIdentifier","src":"9450:9:46"},{"kind":"number","nativeSrc":"9461:2:46","nodeType":"YulLiteral","src":"9461:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9446:3:46","nodeType":"YulIdentifier","src":"9446:3:46"},"nativeSrc":"9446:18:46","nodeType":"YulFunctionCall","src":"9446:18:46"},{"arguments":[{"name":"value1","nativeSrc":"9470:6:46","nodeType":"YulIdentifier","src":"9470:6:46"},{"kind":"number","nativeSrc":"9478:42:46","nodeType":"YulLiteral","src":"9478:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9466:3:46","nodeType":"YulIdentifier","src":"9466:3:46"},"nativeSrc":"9466:55:46","nodeType":"YulFunctionCall","src":"9466:55:46"}],"functionName":{"name":"mstore","nativeSrc":"9439:6:46","nodeType":"YulIdentifier","src":"9439:6:46"},"nativeSrc":"9439:83:46","nodeType":"YulFunctionCall","src":"9439:83:46"},"nativeSrc":"9439:83:46","nodeType":"YulExpressionStatement","src":"9439:83:46"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"9231:297:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9321:9:46","nodeType":"YulTypedName","src":"9321:9:46","type":""},{"name":"value1","nativeSrc":"9332:6:46","nodeType":"YulTypedName","src":"9332:6:46","type":""},{"name":"value0","nativeSrc":"9340:6:46","nodeType":"YulTypedName","src":"9340:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9351:4:46","nodeType":"YulTypedName","src":"9351:4:46","type":""}],"src":"9231:297:46"},{"body":{"nativeSrc":"9611:167:46","nodeType":"YulBlock","src":"9611:167:46","statements":[{"body":{"nativeSrc":"9657:16:46","nodeType":"YulBlock","src":"9657:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9666:1:46","nodeType":"YulLiteral","src":"9666:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"9669:1:46","nodeType":"YulLiteral","src":"9669:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9659:6:46","nodeType":"YulIdentifier","src":"9659:6:46"},"nativeSrc":"9659:12:46","nodeType":"YulFunctionCall","src":"9659:12:46"},"nativeSrc":"9659:12:46","nodeType":"YulExpressionStatement","src":"9659:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9632:7:46","nodeType":"YulIdentifier","src":"9632:7:46"},{"name":"headStart","nativeSrc":"9641:9:46","nodeType":"YulIdentifier","src":"9641:9:46"}],"functionName":{"name":"sub","nativeSrc":"9628:3:46","nodeType":"YulIdentifier","src":"9628:3:46"},"nativeSrc":"9628:23:46","nodeType":"YulFunctionCall","src":"9628:23:46"},{"kind":"number","nativeSrc":"9653:2:46","nodeType":"YulLiteral","src":"9653:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"9624:3:46","nodeType":"YulIdentifier","src":"9624:3:46"},"nativeSrc":"9624:32:46","nodeType":"YulFunctionCall","src":"9624:32:46"},"nativeSrc":"9621:52:46","nodeType":"YulIf","src":"9621:52:46"},{"nativeSrc":"9682:29:46","nodeType":"YulVariableDeclaration","src":"9682:29:46","value":{"arguments":[{"name":"headStart","nativeSrc":"9701:9:46","nodeType":"YulIdentifier","src":"9701:9:46"}],"functionName":{"name":"mload","nativeSrc":"9695:5:46","nodeType":"YulIdentifier","src":"9695:5:46"},"nativeSrc":"9695:16:46","nodeType":"YulFunctionCall","src":"9695:16:46"},"variables":[{"name":"value","nativeSrc":"9686:5:46","nodeType":"YulTypedName","src":"9686:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"9742:5:46","nodeType":"YulIdentifier","src":"9742:5:46"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"9720:21:46","nodeType":"YulIdentifier","src":"9720:21:46"},"nativeSrc":"9720:28:46","nodeType":"YulFunctionCall","src":"9720:28:46"},"nativeSrc":"9720:28:46","nodeType":"YulExpressionStatement","src":"9720:28:46"},{"nativeSrc":"9757:15:46","nodeType":"YulAssignment","src":"9757:15:46","value":{"name":"value","nativeSrc":"9767:5:46","nodeType":"YulIdentifier","src":"9767:5:46"},"variableNames":[{"name":"value0","nativeSrc":"9757:6:46","nodeType":"YulIdentifier","src":"9757:6:46"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"9533:245:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9577:9:46","nodeType":"YulTypedName","src":"9577:9:46","type":""},{"name":"dataEnd","nativeSrc":"9588:7:46","nodeType":"YulTypedName","src":"9588:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9600:6:46","nodeType":"YulTypedName","src":"9600:6:46","type":""}],"src":"9533:245:46"},{"body":{"nativeSrc":"9912:168:46","nodeType":"YulBlock","src":"9912:168:46","statements":[{"nativeSrc":"9922:26:46","nodeType":"YulAssignment","src":"9922:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"9934:9:46","nodeType":"YulIdentifier","src":"9934:9:46"},{"kind":"number","nativeSrc":"9945:2:46","nodeType":"YulLiteral","src":"9945:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9930:3:46","nodeType":"YulIdentifier","src":"9930:3:46"},"nativeSrc":"9930:18:46","nodeType":"YulFunctionCall","src":"9930:18:46"},"variableNames":[{"name":"tail","nativeSrc":"9922:4:46","nodeType":"YulIdentifier","src":"9922:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"9964:9:46","nodeType":"YulIdentifier","src":"9964:9:46"},{"arguments":[{"name":"value0","nativeSrc":"9979:6:46","nodeType":"YulIdentifier","src":"9979:6:46"},{"kind":"number","nativeSrc":"9987:42:46","nodeType":"YulLiteral","src":"9987:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"9975:3:46","nodeType":"YulIdentifier","src":"9975:3:46"},"nativeSrc":"9975:55:46","nodeType":"YulFunctionCall","src":"9975:55:46"}],"functionName":{"name":"mstore","nativeSrc":"9957:6:46","nodeType":"YulIdentifier","src":"9957:6:46"},"nativeSrc":"9957:74:46","nodeType":"YulFunctionCall","src":"9957:74:46"},"nativeSrc":"9957:74:46","nodeType":"YulExpressionStatement","src":"9957:74:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10051:9:46","nodeType":"YulIdentifier","src":"10051:9:46"},{"kind":"number","nativeSrc":"10062:2:46","nodeType":"YulLiteral","src":"10062:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10047:3:46","nodeType":"YulIdentifier","src":"10047:3:46"},"nativeSrc":"10047:18:46","nodeType":"YulFunctionCall","src":"10047:18:46"},{"name":"value1","nativeSrc":"10067:6:46","nodeType":"YulIdentifier","src":"10067:6:46"}],"functionName":{"name":"mstore","nativeSrc":"10040:6:46","nodeType":"YulIdentifier","src":"10040:6:46"},"nativeSrc":"10040:34:46","nodeType":"YulFunctionCall","src":"10040:34:46"},"nativeSrc":"10040:34:46","nodeType":"YulExpressionStatement","src":"10040:34:46"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"9783:297:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9873:9:46","nodeType":"YulTypedName","src":"9873:9:46","type":""},{"name":"value1","nativeSrc":"9884:6:46","nodeType":"YulTypedName","src":"9884:6:46","type":""},{"name":"value0","nativeSrc":"9892:6:46","nodeType":"YulTypedName","src":"9892:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"9903:4:46","nodeType":"YulTypedName","src":"9903:4:46","type":""}],"src":"9783:297:46"},{"body":{"nativeSrc":"10242:241:46","nodeType":"YulBlock","src":"10242:241:46","statements":[{"nativeSrc":"10252:26:46","nodeType":"YulAssignment","src":"10252:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"10264:9:46","nodeType":"YulIdentifier","src":"10264:9:46"},{"kind":"number","nativeSrc":"10275:2:46","nodeType":"YulLiteral","src":"10275:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10260:3:46","nodeType":"YulIdentifier","src":"10260:3:46"},"nativeSrc":"10260:18:46","nodeType":"YulFunctionCall","src":"10260:18:46"},"variableNames":[{"name":"tail","nativeSrc":"10252:4:46","nodeType":"YulIdentifier","src":"10252:4:46"}]},{"nativeSrc":"10287:52:46","nodeType":"YulVariableDeclaration","src":"10287:52:46","value":{"kind":"number","nativeSrc":"10297:42:46","nodeType":"YulLiteral","src":"10297:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"10291:2:46","nodeType":"YulTypedName","src":"10291:2:46","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10355:9:46","nodeType":"YulIdentifier","src":"10355:9:46"},{"arguments":[{"name":"value0","nativeSrc":"10370:6:46","nodeType":"YulIdentifier","src":"10370:6:46"},{"name":"_1","nativeSrc":"10378:2:46","nodeType":"YulIdentifier","src":"10378:2:46"}],"functionName":{"name":"and","nativeSrc":"10366:3:46","nodeType":"YulIdentifier","src":"10366:3:46"},"nativeSrc":"10366:15:46","nodeType":"YulFunctionCall","src":"10366:15:46"}],"functionName":{"name":"mstore","nativeSrc":"10348:6:46","nodeType":"YulIdentifier","src":"10348:6:46"},"nativeSrc":"10348:34:46","nodeType":"YulFunctionCall","src":"10348:34:46"},"nativeSrc":"10348:34:46","nodeType":"YulExpressionStatement","src":"10348:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10402:9:46","nodeType":"YulIdentifier","src":"10402:9:46"},{"kind":"number","nativeSrc":"10413:2:46","nodeType":"YulLiteral","src":"10413:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10398:3:46","nodeType":"YulIdentifier","src":"10398:3:46"},"nativeSrc":"10398:18:46","nodeType":"YulFunctionCall","src":"10398:18:46"},{"arguments":[{"name":"value1","nativeSrc":"10422:6:46","nodeType":"YulIdentifier","src":"10422:6:46"},{"name":"_1","nativeSrc":"10430:2:46","nodeType":"YulIdentifier","src":"10430:2:46"}],"functionName":{"name":"and","nativeSrc":"10418:3:46","nodeType":"YulIdentifier","src":"10418:3:46"},"nativeSrc":"10418:15:46","nodeType":"YulFunctionCall","src":"10418:15:46"}],"functionName":{"name":"mstore","nativeSrc":"10391:6:46","nodeType":"YulIdentifier","src":"10391:6:46"},"nativeSrc":"10391:43:46","nodeType":"YulFunctionCall","src":"10391:43:46"},"nativeSrc":"10391:43:46","nodeType":"YulExpressionStatement","src":"10391:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10454:9:46","nodeType":"YulIdentifier","src":"10454:9:46"},{"kind":"number","nativeSrc":"10465:2:46","nodeType":"YulLiteral","src":"10465:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10450:3:46","nodeType":"YulIdentifier","src":"10450:3:46"},"nativeSrc":"10450:18:46","nodeType":"YulFunctionCall","src":"10450:18:46"},{"name":"value2","nativeSrc":"10470:6:46","nodeType":"YulIdentifier","src":"10470:6:46"}],"functionName":{"name":"mstore","nativeSrc":"10443:6:46","nodeType":"YulIdentifier","src":"10443:6:46"},"nativeSrc":"10443:34:46","nodeType":"YulFunctionCall","src":"10443:34:46"},"nativeSrc":"10443:34:46","nodeType":"YulExpressionStatement","src":"10443:34:46"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"10085:398:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10195:9:46","nodeType":"YulTypedName","src":"10195:9:46","type":""},{"name":"value2","nativeSrc":"10206:6:46","nodeType":"YulTypedName","src":"10206:6:46","type":""},{"name":"value1","nativeSrc":"10214:6:46","nodeType":"YulTypedName","src":"10214:6:46","type":""},{"name":"value0","nativeSrc":"10222:6:46","nodeType":"YulTypedName","src":"10222:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10233:4:46","nodeType":"YulTypedName","src":"10233:4:46","type":""}],"src":"10085:398:46"},{"body":{"nativeSrc":"10745:321:46","nodeType":"YulBlock","src":"10745:321:46","statements":[{"nativeSrc":"10755:52:46","nodeType":"YulVariableDeclaration","src":"10755:52:46","value":{"kind":"number","nativeSrc":"10765:42:46","nodeType":"YulLiteral","src":"10765:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"10759:2:46","nodeType":"YulTypedName","src":"10759:2:46","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10823:9:46","nodeType":"YulIdentifier","src":"10823:9:46"},{"arguments":[{"name":"value0","nativeSrc":"10838:6:46","nodeType":"YulIdentifier","src":"10838:6:46"},{"name":"_1","nativeSrc":"10846:2:46","nodeType":"YulIdentifier","src":"10846:2:46"}],"functionName":{"name":"and","nativeSrc":"10834:3:46","nodeType":"YulIdentifier","src":"10834:3:46"},"nativeSrc":"10834:15:46","nodeType":"YulFunctionCall","src":"10834:15:46"}],"functionName":{"name":"mstore","nativeSrc":"10816:6:46","nodeType":"YulIdentifier","src":"10816:6:46"},"nativeSrc":"10816:34:46","nodeType":"YulFunctionCall","src":"10816:34:46"},"nativeSrc":"10816:34:46","nodeType":"YulExpressionStatement","src":"10816:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10870:9:46","nodeType":"YulIdentifier","src":"10870:9:46"},{"kind":"number","nativeSrc":"10881:2:46","nodeType":"YulLiteral","src":"10881:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10866:3:46","nodeType":"YulIdentifier","src":"10866:3:46"},"nativeSrc":"10866:18:46","nodeType":"YulFunctionCall","src":"10866:18:46"},{"arguments":[{"name":"value1","nativeSrc":"10890:6:46","nodeType":"YulIdentifier","src":"10890:6:46"},{"name":"_1","nativeSrc":"10898:2:46","nodeType":"YulIdentifier","src":"10898:2:46"}],"functionName":{"name":"and","nativeSrc":"10886:3:46","nodeType":"YulIdentifier","src":"10886:3:46"},"nativeSrc":"10886:15:46","nodeType":"YulFunctionCall","src":"10886:15:46"}],"functionName":{"name":"mstore","nativeSrc":"10859:6:46","nodeType":"YulIdentifier","src":"10859:6:46"},"nativeSrc":"10859:43:46","nodeType":"YulFunctionCall","src":"10859:43:46"},"nativeSrc":"10859:43:46","nodeType":"YulExpressionStatement","src":"10859:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10922:9:46","nodeType":"YulIdentifier","src":"10922:9:46"},{"kind":"number","nativeSrc":"10933:2:46","nodeType":"YulLiteral","src":"10933:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10918:3:46","nodeType":"YulIdentifier","src":"10918:3:46"},"nativeSrc":"10918:18:46","nodeType":"YulFunctionCall","src":"10918:18:46"},{"name":"value2","nativeSrc":"10938:6:46","nodeType":"YulIdentifier","src":"10938:6:46"}],"functionName":{"name":"mstore","nativeSrc":"10911:6:46","nodeType":"YulIdentifier","src":"10911:6:46"},"nativeSrc":"10911:34:46","nodeType":"YulFunctionCall","src":"10911:34:46"},"nativeSrc":"10911:34:46","nodeType":"YulExpressionStatement","src":"10911:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10965:9:46","nodeType":"YulIdentifier","src":"10965:9:46"},{"kind":"number","nativeSrc":"10976:2:46","nodeType":"YulLiteral","src":"10976:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10961:3:46","nodeType":"YulIdentifier","src":"10961:3:46"},"nativeSrc":"10961:18:46","nodeType":"YulFunctionCall","src":"10961:18:46"},{"kind":"number","nativeSrc":"10981:3:46","nodeType":"YulLiteral","src":"10981:3:46","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"10954:6:46","nodeType":"YulIdentifier","src":"10954:6:46"},"nativeSrc":"10954:31:46","nodeType":"YulFunctionCall","src":"10954:31:46"},"nativeSrc":"10954:31:46","nodeType":"YulExpressionStatement","src":"10954:31:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11005:9:46","nodeType":"YulIdentifier","src":"11005:9:46"},{"kind":"number","nativeSrc":"11016:3:46","nodeType":"YulLiteral","src":"11016:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"11001:3:46","nodeType":"YulIdentifier","src":"11001:3:46"},"nativeSrc":"11001:19:46","nodeType":"YulFunctionCall","src":"11001:19:46"},{"kind":"number","nativeSrc":"11022:1:46","nodeType":"YulLiteral","src":"11022:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"10994:6:46","nodeType":"YulIdentifier","src":"10994:6:46"},"nativeSrc":"10994:30:46","nodeType":"YulFunctionCall","src":"10994:30:46"},"nativeSrc":"10994:30:46","nodeType":"YulExpressionStatement","src":"10994:30:46"},{"nativeSrc":"11033:27:46","nodeType":"YulAssignment","src":"11033:27:46","value":{"arguments":[{"name":"headStart","nativeSrc":"11045:9:46","nodeType":"YulIdentifier","src":"11045:9:46"},{"kind":"number","nativeSrc":"11056:3:46","nodeType":"YulLiteral","src":"11056:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"11041:3:46","nodeType":"YulIdentifier","src":"11041:3:46"},"nativeSrc":"11041:19:46","nodeType":"YulFunctionCall","src":"11041:19:46"},"variableNames":[{"name":"tail","nativeSrc":"11033:4:46","nodeType":"YulIdentifier","src":"11033:4:46"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"10488:578:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10698:9:46","nodeType":"YulTypedName","src":"10698:9:46","type":""},{"name":"value2","nativeSrc":"10709:6:46","nodeType":"YulTypedName","src":"10709:6:46","type":""},{"name":"value1","nativeSrc":"10717:6:46","nodeType":"YulTypedName","src":"10717:6:46","type":""},{"name":"value0","nativeSrc":"10725:6:46","nodeType":"YulTypedName","src":"10725:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10736:4:46","nodeType":"YulTypedName","src":"10736:4:46","type":""}],"src":"10488:578:46"},{"body":{"nativeSrc":"11151:169:46","nodeType":"YulBlock","src":"11151:169:46","statements":[{"body":{"nativeSrc":"11197:16:46","nodeType":"YulBlock","src":"11197:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11206:1:46","nodeType":"YulLiteral","src":"11206:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"11209:1:46","nodeType":"YulLiteral","src":"11209:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11199:6:46","nodeType":"YulIdentifier","src":"11199:6:46"},"nativeSrc":"11199:12:46","nodeType":"YulFunctionCall","src":"11199:12:46"},"nativeSrc":"11199:12:46","nodeType":"YulExpressionStatement","src":"11199:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11172:7:46","nodeType":"YulIdentifier","src":"11172:7:46"},{"name":"headStart","nativeSrc":"11181:9:46","nodeType":"YulIdentifier","src":"11181:9:46"}],"functionName":{"name":"sub","nativeSrc":"11168:3:46","nodeType":"YulIdentifier","src":"11168:3:46"},"nativeSrc":"11168:23:46","nodeType":"YulFunctionCall","src":"11168:23:46"},{"kind":"number","nativeSrc":"11193:2:46","nodeType":"YulLiteral","src":"11193:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11164:3:46","nodeType":"YulIdentifier","src":"11164:3:46"},"nativeSrc":"11164:32:46","nodeType":"YulFunctionCall","src":"11164:32:46"},"nativeSrc":"11161:52:46","nodeType":"YulIf","src":"11161:52:46"},{"nativeSrc":"11222:29:46","nodeType":"YulVariableDeclaration","src":"11222:29:46","value":{"arguments":[{"name":"headStart","nativeSrc":"11241:9:46","nodeType":"YulIdentifier","src":"11241:9:46"}],"functionName":{"name":"mload","nativeSrc":"11235:5:46","nodeType":"YulIdentifier","src":"11235:5:46"},"nativeSrc":"11235:16:46","nodeType":"YulFunctionCall","src":"11235:16:46"},"variables":[{"name":"value","nativeSrc":"11226:5:46","nodeType":"YulTypedName","src":"11226:5:46","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11284:5:46","nodeType":"YulIdentifier","src":"11284:5:46"}],"functionName":{"name":"validator_revert_bytes4","nativeSrc":"11260:23:46","nodeType":"YulIdentifier","src":"11260:23:46"},"nativeSrc":"11260:30:46","nodeType":"YulFunctionCall","src":"11260:30:46"},"nativeSrc":"11260:30:46","nodeType":"YulExpressionStatement","src":"11260:30:46"},{"nativeSrc":"11299:15:46","nodeType":"YulAssignment","src":"11299:15:46","value":{"name":"value","nativeSrc":"11309:5:46","nodeType":"YulIdentifier","src":"11309:5:46"},"variableNames":[{"name":"value0","nativeSrc":"11299:6:46","nodeType":"YulIdentifier","src":"11299:6:46"}]}]},"name":"abi_decode_tuple_t_bytes4_fromMemory","nativeSrc":"11071:249:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11117:9:46","nodeType":"YulTypedName","src":"11117:9:46","type":""},{"name":"dataEnd","nativeSrc":"11128:7:46","nodeType":"YulTypedName","src":"11128:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11140:6:46","nodeType":"YulTypedName","src":"11140:6:46","type":""}],"src":"11071:249:46"},{"body":{"nativeSrc":"11454:119:46","nodeType":"YulBlock","src":"11454:119:46","statements":[{"nativeSrc":"11464:26:46","nodeType":"YulAssignment","src":"11464:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"11476:9:46","nodeType":"YulIdentifier","src":"11476:9:46"},{"kind":"number","nativeSrc":"11487:2:46","nodeType":"YulLiteral","src":"11487:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11472:3:46","nodeType":"YulIdentifier","src":"11472:3:46"},"nativeSrc":"11472:18:46","nodeType":"YulFunctionCall","src":"11472:18:46"},"variableNames":[{"name":"tail","nativeSrc":"11464:4:46","nodeType":"YulIdentifier","src":"11464:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11506:9:46","nodeType":"YulIdentifier","src":"11506:9:46"},{"name":"value0","nativeSrc":"11517:6:46","nodeType":"YulIdentifier","src":"11517:6:46"}],"functionName":{"name":"mstore","nativeSrc":"11499:6:46","nodeType":"YulIdentifier","src":"11499:6:46"},"nativeSrc":"11499:25:46","nodeType":"YulFunctionCall","src":"11499:25:46"},"nativeSrc":"11499:25:46","nodeType":"YulExpressionStatement","src":"11499:25:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11544:9:46","nodeType":"YulIdentifier","src":"11544:9:46"},{"kind":"number","nativeSrc":"11555:2:46","nodeType":"YulLiteral","src":"11555:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11540:3:46","nodeType":"YulIdentifier","src":"11540:3:46"},"nativeSrc":"11540:18:46","nodeType":"YulFunctionCall","src":"11540:18:46"},{"name":"value1","nativeSrc":"11560:6:46","nodeType":"YulIdentifier","src":"11560:6:46"}],"functionName":{"name":"mstore","nativeSrc":"11533:6:46","nodeType":"YulIdentifier","src":"11533:6:46"},"nativeSrc":"11533:34:46","nodeType":"YulFunctionCall","src":"11533:34:46"},"nativeSrc":"11533:34:46","nodeType":"YulExpressionStatement","src":"11533:34:46"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"11325:248:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11415:9:46","nodeType":"YulTypedName","src":"11415:9:46","type":""},{"name":"value1","nativeSrc":"11426:6:46","nodeType":"YulTypedName","src":"11426:6:46","type":""},{"name":"value0","nativeSrc":"11434:6:46","nodeType":"YulTypedName","src":"11434:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11445:4:46","nodeType":"YulTypedName","src":"11445:4:46","type":""}],"src":"11325:248:46"},{"body":{"nativeSrc":"11638:141:46","nodeType":"YulBlock","src":"11638:141:46","statements":[{"nativeSrc":"11648:30:46","nodeType":"YulVariableDeclaration","src":"11648:30:46","value":{"arguments":[{"name":"ptr","nativeSrc":"11674:3:46","nodeType":"YulIdentifier","src":"11674:3:46"}],"functionName":{"name":"calldataload","nativeSrc":"11661:12:46","nodeType":"YulIdentifier","src":"11661:12:46"},"nativeSrc":"11661:17:46","nodeType":"YulFunctionCall","src":"11661:17:46"},"variables":[{"name":"value","nativeSrc":"11652:5:46","nodeType":"YulTypedName","src":"11652:5:46","type":""}]},{"body":{"nativeSrc":"11728:16:46","nodeType":"YulBlock","src":"11728:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11737:1:46","nodeType":"YulLiteral","src":"11737:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"11740:1:46","nodeType":"YulLiteral","src":"11740:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11730:6:46","nodeType":"YulIdentifier","src":"11730:6:46"},"nativeSrc":"11730:12:46","nodeType":"YulFunctionCall","src":"11730:12:46"},"nativeSrc":"11730:12:46","nodeType":"YulExpressionStatement","src":"11730:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11700:5:46","nodeType":"YulIdentifier","src":"11700:5:46"},{"arguments":[{"name":"value","nativeSrc":"11711:5:46","nodeType":"YulIdentifier","src":"11711:5:46"},{"kind":"number","nativeSrc":"11718:6:46","nodeType":"YulLiteral","src":"11718:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"11707:3:46","nodeType":"YulIdentifier","src":"11707:3:46"},"nativeSrc":"11707:18:46","nodeType":"YulFunctionCall","src":"11707:18:46"}],"functionName":{"name":"eq","nativeSrc":"11697:2:46","nodeType":"YulIdentifier","src":"11697:2:46"},"nativeSrc":"11697:29:46","nodeType":"YulFunctionCall","src":"11697:29:46"}],"functionName":{"name":"iszero","nativeSrc":"11690:6:46","nodeType":"YulIdentifier","src":"11690:6:46"},"nativeSrc":"11690:37:46","nodeType":"YulFunctionCall","src":"11690:37:46"},"nativeSrc":"11687:57:46","nodeType":"YulIf","src":"11687:57:46"},{"nativeSrc":"11753:20:46","nodeType":"YulAssignment","src":"11753:20:46","value":{"name":"value","nativeSrc":"11768:5:46","nodeType":"YulIdentifier","src":"11768:5:46"},"variableNames":[{"name":"returnValue","nativeSrc":"11753:11:46","nodeType":"YulIdentifier","src":"11753:11:46"}]}]},"name":"read_from_calldatat_uint16","nativeSrc":"11578:201:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"11614:3:46","nodeType":"YulTypedName","src":"11614:3:46","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"11622:11:46","nodeType":"YulTypedName","src":"11622:11:46","type":""}],"src":"11578:201:46"},{"body":{"nativeSrc":"11844:153:46","nodeType":"YulBlock","src":"11844:153:46","statements":[{"nativeSrc":"11854:30:46","nodeType":"YulVariableDeclaration","src":"11854:30:46","value":{"arguments":[{"name":"ptr","nativeSrc":"11880:3:46","nodeType":"YulIdentifier","src":"11880:3:46"}],"functionName":{"name":"calldataload","nativeSrc":"11867:12:46","nodeType":"YulIdentifier","src":"11867:12:46"},"nativeSrc":"11867:17:46","nodeType":"YulFunctionCall","src":"11867:17:46"},"variables":[{"name":"value","nativeSrc":"11858:5:46","nodeType":"YulTypedName","src":"11858:5:46","type":""}]},{"body":{"nativeSrc":"11946:16:46","nodeType":"YulBlock","src":"11946:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11955:1:46","nodeType":"YulLiteral","src":"11955:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"11958:1:46","nodeType":"YulLiteral","src":"11958:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11948:6:46","nodeType":"YulIdentifier","src":"11948:6:46"},"nativeSrc":"11948:12:46","nodeType":"YulFunctionCall","src":"11948:12:46"},"nativeSrc":"11948:12:46","nodeType":"YulExpressionStatement","src":"11948:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11906:5:46","nodeType":"YulIdentifier","src":"11906:5:46"},{"arguments":[{"name":"value","nativeSrc":"11917:5:46","nodeType":"YulIdentifier","src":"11917:5:46"},{"kind":"number","nativeSrc":"11924:18:46","nodeType":"YulLiteral","src":"11924:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11913:3:46","nodeType":"YulIdentifier","src":"11913:3:46"},"nativeSrc":"11913:30:46","nodeType":"YulFunctionCall","src":"11913:30:46"}],"functionName":{"name":"eq","nativeSrc":"11903:2:46","nodeType":"YulIdentifier","src":"11903:2:46"},"nativeSrc":"11903:41:46","nodeType":"YulFunctionCall","src":"11903:41:46"}],"functionName":{"name":"iszero","nativeSrc":"11896:6:46","nodeType":"YulIdentifier","src":"11896:6:46"},"nativeSrc":"11896:49:46","nodeType":"YulFunctionCall","src":"11896:49:46"},"nativeSrc":"11893:69:46","nodeType":"YulIf","src":"11893:69:46"},{"nativeSrc":"11971:20:46","nodeType":"YulAssignment","src":"11971:20:46","value":{"name":"value","nativeSrc":"11986:5:46","nodeType":"YulIdentifier","src":"11986:5:46"},"variableNames":[{"name":"returnValue","nativeSrc":"11971:11:46","nodeType":"YulIdentifier","src":"11971:11:46"}]}]},"name":"read_from_calldatat_uint64","nativeSrc":"11784:213:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"ptr","nativeSrc":"11820:3:46","nodeType":"YulTypedName","src":"11820:3:46","type":""}],"returnVariables":[{"name":"returnValue","nativeSrc":"11828:11:46","nodeType":"YulTypedName","src":"11828:11:46","type":""}],"src":"11784:213:46"},{"body":{"nativeSrc":"12074:204:46","nodeType":"YulBlock","src":"12074:204:46","statements":[{"nativeSrc":"12084:21:46","nodeType":"YulVariableDeclaration","src":"12084:21:46","value":{"arguments":[{"name":"slot","nativeSrc":"12100:4:46","nodeType":"YulIdentifier","src":"12100:4:46"}],"functionName":{"name":"sload","nativeSrc":"12094:5:46","nodeType":"YulIdentifier","src":"12094:5:46"},"nativeSrc":"12094:11:46","nodeType":"YulFunctionCall","src":"12094:11:46"},"variables":[{"name":"_1","nativeSrc":"12088:2:46","nodeType":"YulTypedName","src":"12088:2:46","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"12121:4:46","nodeType":"YulIdentifier","src":"12121:4:46"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"12134:2:46","nodeType":"YulIdentifier","src":"12134:2:46"},{"kind":"number","nativeSrc":"12138:66:46","nodeType":"YulLiteral","src":"12138:66:46","type":"","value":"0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12130:3:46","nodeType":"YulIdentifier","src":"12130:3:46"},"nativeSrc":"12130:75:46","nodeType":"YulFunctionCall","src":"12130:75:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"12215:2:46","nodeType":"YulLiteral","src":"12215:2:46","type":"","value":"96"},{"name":"value","nativeSrc":"12219:5:46","nodeType":"YulIdentifier","src":"12219:5:46"}],"functionName":{"name":"shl","nativeSrc":"12211:3:46","nodeType":"YulIdentifier","src":"12211:3:46"},"nativeSrc":"12211:14:46","nodeType":"YulFunctionCall","src":"12211:14:46"},{"kind":"number","nativeSrc":"12227:42:46","nodeType":"YulLiteral","src":"12227:42:46","type":"","value":"0xffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"12207:3:46","nodeType":"YulIdentifier","src":"12207:3:46"},"nativeSrc":"12207:63:46","nodeType":"YulFunctionCall","src":"12207:63:46"}],"functionName":{"name":"or","nativeSrc":"12127:2:46","nodeType":"YulIdentifier","src":"12127:2:46"},"nativeSrc":"12127:144:46","nodeType":"YulFunctionCall","src":"12127:144:46"}],"functionName":{"name":"sstore","nativeSrc":"12114:6:46","nodeType":"YulIdentifier","src":"12114:6:46"},"nativeSrc":"12114:158:46","nodeType":"YulFunctionCall","src":"12114:158:46"},"nativeSrc":"12114:158:46","nodeType":"YulExpressionStatement","src":"12114:158:46"}]},"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"12002:276:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"12057:4:46","nodeType":"YulTypedName","src":"12057:4:46","type":""},{"name":"value","nativeSrc":"12063:5:46","nodeType":"YulTypedName","src":"12063:5:46","type":""}],"src":"12002:276:46"},{"body":{"nativeSrc":"12357:221:46","nodeType":"YulBlock","src":"12357:221:46","statements":[{"nativeSrc":"12367:21:46","nodeType":"YulVariableDeclaration","src":"12367:21:46","value":{"arguments":[{"name":"slot","nativeSrc":"12383:4:46","nodeType":"YulIdentifier","src":"12383:4:46"}],"functionName":{"name":"sload","nativeSrc":"12377:5:46","nodeType":"YulIdentifier","src":"12377:5:46"},"nativeSrc":"12377:11:46","nodeType":"YulFunctionCall","src":"12377:11:46"},"variables":[{"name":"_1","nativeSrc":"12371:2:46","nodeType":"YulTypedName","src":"12371:2:46","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"12404:4:46","nodeType":"YulIdentifier","src":"12404:4:46"},{"arguments":[{"arguments":[{"name":"_1","nativeSrc":"12417:2:46","nodeType":"YulIdentifier","src":"12417:2:46"},{"kind":"number","nativeSrc":"12421:66:46","nodeType":"YulLiteral","src":"12421:66:46","type":"","value":"0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"12413:3:46","nodeType":"YulIdentifier","src":"12413:3:46"},"nativeSrc":"12413:75:46","nodeType":"YulFunctionCall","src":"12413:75:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"12498:3:46","nodeType":"YulLiteral","src":"12498:3:46","type":"","value":"160"},{"name":"value","nativeSrc":"12503:5:46","nodeType":"YulIdentifier","src":"12503:5:46"}],"functionName":{"name":"shl","nativeSrc":"12494:3:46","nodeType":"YulIdentifier","src":"12494:3:46"},"nativeSrc":"12494:15:46","nodeType":"YulFunctionCall","src":"12494:15:46"},{"kind":"number","nativeSrc":"12511:58:46","nodeType":"YulLiteral","src":"12511:58:46","type":"","value":"0xffffffffffffffff0000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"12490:3:46","nodeType":"YulIdentifier","src":"12490:3:46"},"nativeSrc":"12490:80:46","nodeType":"YulFunctionCall","src":"12490:80:46"}],"functionName":{"name":"or","nativeSrc":"12410:2:46","nodeType":"YulIdentifier","src":"12410:2:46"},"nativeSrc":"12410:161:46","nodeType":"YulFunctionCall","src":"12410:161:46"}],"functionName":{"name":"sstore","nativeSrc":"12397:6:46","nodeType":"YulIdentifier","src":"12397:6:46"},"nativeSrc":"12397:175:46","nodeType":"YulFunctionCall","src":"12397:175:46"},"nativeSrc":"12397:175:46","nodeType":"YulExpressionStatement","src":"12397:175:46"}]},"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"12283:295:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"12340:4:46","nodeType":"YulTypedName","src":"12340:4:46","type":""},{"name":"value","nativeSrc":"12346:5:46","nodeType":"YulTypedName","src":"12346:5:46","type":""}],"src":"12283:295:46"},{"body":{"nativeSrc":"12672:486:46","nodeType":"YulBlock","src":"12672:486:46","statements":[{"nativeSrc":"12682:51:46","nodeType":"YulVariableDeclaration","src":"12682:51:46","value":{"arguments":[{"name":"ptr_to_tail","nativeSrc":"12721:11:46","nodeType":"YulIdentifier","src":"12721:11:46"}],"functionName":{"name":"calldataload","nativeSrc":"12708:12:46","nodeType":"YulIdentifier","src":"12708:12:46"},"nativeSrc":"12708:25:46","nodeType":"YulFunctionCall","src":"12708:25:46"},"variables":[{"name":"rel_offset_of_tail","nativeSrc":"12686:18:46","nodeType":"YulTypedName","src":"12686:18:46","type":""}]},{"body":{"nativeSrc":"12881:16:46","nodeType":"YulBlock","src":"12881:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12890:1:46","nodeType":"YulLiteral","src":"12890:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"12893:1:46","nodeType":"YulLiteral","src":"12893:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12883:6:46","nodeType":"YulIdentifier","src":"12883:6:46"},"nativeSrc":"12883:12:46","nodeType":"YulFunctionCall","src":"12883:12:46"},"nativeSrc":"12883:12:46","nodeType":"YulExpressionStatement","src":"12883:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"rel_offset_of_tail","nativeSrc":"12756:18:46","nodeType":"YulIdentifier","src":"12756:18:46"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"12784:12:46","nodeType":"YulIdentifier","src":"12784:12:46"},"nativeSrc":"12784:14:46","nodeType":"YulFunctionCall","src":"12784:14:46"},{"name":"base_ref","nativeSrc":"12800:8:46","nodeType":"YulIdentifier","src":"12800:8:46"}],"functionName":{"name":"sub","nativeSrc":"12780:3:46","nodeType":"YulIdentifier","src":"12780:3:46"},"nativeSrc":"12780:29:46","nodeType":"YulFunctionCall","src":"12780:29:46"},{"kind":"number","nativeSrc":"12811:66:46","nodeType":"YulLiteral","src":"12811:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1"}],"functionName":{"name":"add","nativeSrc":"12776:3:46","nodeType":"YulIdentifier","src":"12776:3:46"},"nativeSrc":"12776:102:46","nodeType":"YulFunctionCall","src":"12776:102:46"}],"functionName":{"name":"slt","nativeSrc":"12752:3:46","nodeType":"YulIdentifier","src":"12752:3:46"},"nativeSrc":"12752:127:46","nodeType":"YulFunctionCall","src":"12752:127:46"}],"functionName":{"name":"iszero","nativeSrc":"12745:6:46","nodeType":"YulIdentifier","src":"12745:6:46"},"nativeSrc":"12745:135:46","nodeType":"YulFunctionCall","src":"12745:135:46"},"nativeSrc":"12742:155:46","nodeType":"YulIf","src":"12742:155:46"},{"nativeSrc":"12906:47:46","nodeType":"YulVariableDeclaration","src":"12906:47:46","value":{"arguments":[{"name":"base_ref","nativeSrc":"12924:8:46","nodeType":"YulIdentifier","src":"12924:8:46"},{"name":"rel_offset_of_tail","nativeSrc":"12934:18:46","nodeType":"YulIdentifier","src":"12934:18:46"}],"functionName":{"name":"add","nativeSrc":"12920:3:46","nodeType":"YulIdentifier","src":"12920:3:46"},"nativeSrc":"12920:33:46","nodeType":"YulFunctionCall","src":"12920:33:46"},"variables":[{"name":"addr_1","nativeSrc":"12910:6:46","nodeType":"YulTypedName","src":"12910:6:46","type":""}]},{"nativeSrc":"12962:30:46","nodeType":"YulAssignment","src":"12962:30:46","value":{"arguments":[{"name":"addr_1","nativeSrc":"12985:6:46","nodeType":"YulIdentifier","src":"12985:6:46"}],"functionName":{"name":"calldataload","nativeSrc":"12972:12:46","nodeType":"YulIdentifier","src":"12972:12:46"},"nativeSrc":"12972:20:46","nodeType":"YulFunctionCall","src":"12972:20:46"},"variableNames":[{"name":"length","nativeSrc":"12962:6:46","nodeType":"YulIdentifier","src":"12962:6:46"}]},{"body":{"nativeSrc":"13035:16:46","nodeType":"YulBlock","src":"13035:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13044:1:46","nodeType":"YulLiteral","src":"13044:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"13047:1:46","nodeType":"YulLiteral","src":"13047:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13037:6:46","nodeType":"YulIdentifier","src":"13037:6:46"},"nativeSrc":"13037:12:46","nodeType":"YulFunctionCall","src":"13037:12:46"},"nativeSrc":"13037:12:46","nodeType":"YulExpressionStatement","src":"13037:12:46"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"13007:6:46","nodeType":"YulIdentifier","src":"13007:6:46"},{"kind":"number","nativeSrc":"13015:18:46","nodeType":"YulLiteral","src":"13015:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"13004:2:46","nodeType":"YulIdentifier","src":"13004:2:46"},"nativeSrc":"13004:30:46","nodeType":"YulFunctionCall","src":"13004:30:46"},"nativeSrc":"13001:50:46","nodeType":"YulIf","src":"13001:50:46"},{"nativeSrc":"13060:25:46","nodeType":"YulAssignment","src":"13060:25:46","value":{"arguments":[{"name":"addr_1","nativeSrc":"13072:6:46","nodeType":"YulIdentifier","src":"13072:6:46"},{"kind":"number","nativeSrc":"13080:4:46","nodeType":"YulLiteral","src":"13080:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13068:3:46","nodeType":"YulIdentifier","src":"13068:3:46"},"nativeSrc":"13068:17:46","nodeType":"YulFunctionCall","src":"13068:17:46"},"variableNames":[{"name":"addr","nativeSrc":"13060:4:46","nodeType":"YulIdentifier","src":"13060:4:46"}]},{"body":{"nativeSrc":"13136:16:46","nodeType":"YulBlock","src":"13136:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13145:1:46","nodeType":"YulLiteral","src":"13145:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"13148:1:46","nodeType":"YulLiteral","src":"13148:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13138:6:46","nodeType":"YulIdentifier","src":"13138:6:46"},"nativeSrc":"13138:12:46","nodeType":"YulFunctionCall","src":"13138:12:46"},"nativeSrc":"13138:12:46","nodeType":"YulExpressionStatement","src":"13138:12:46"}]},"condition":{"arguments":[{"name":"addr","nativeSrc":"13101:4:46","nodeType":"YulIdentifier","src":"13101:4:46"},{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"13111:12:46","nodeType":"YulIdentifier","src":"13111:12:46"},"nativeSrc":"13111:14:46","nodeType":"YulFunctionCall","src":"13111:14:46"},{"name":"length","nativeSrc":"13127:6:46","nodeType":"YulIdentifier","src":"13127:6:46"}],"functionName":{"name":"sub","nativeSrc":"13107:3:46","nodeType":"YulIdentifier","src":"13107:3:46"},"nativeSrc":"13107:27:46","nodeType":"YulFunctionCall","src":"13107:27:46"}],"functionName":{"name":"sgt","nativeSrc":"13097:3:46","nodeType":"YulIdentifier","src":"13097:3:46"},"nativeSrc":"13097:38:46","nodeType":"YulFunctionCall","src":"13097:38:46"},"nativeSrc":"13094:58:46","nodeType":"YulIf","src":"13094:58:46"}]},"name":"access_calldata_tail_string_calldata","nativeSrc":"12583:575:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"base_ref","nativeSrc":"12629:8:46","nodeType":"YulTypedName","src":"12629:8:46","type":""},{"name":"ptr_to_tail","nativeSrc":"12639:11:46","nodeType":"YulTypedName","src":"12639:11:46","type":""}],"returnVariables":[{"name":"addr","nativeSrc":"12655:4:46","nodeType":"YulTypedName","src":"12655:4:46","type":""},{"name":"length","nativeSrc":"12661:6:46","nodeType":"YulTypedName","src":"12661:6:46","type":""}],"src":"12583:575:46"},{"body":{"nativeSrc":"13195:152:46","nodeType":"YulBlock","src":"13195:152:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13212:1:46","nodeType":"YulLiteral","src":"13212:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"13215:77:46","nodeType":"YulLiteral","src":"13215:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"13205:6:46","nodeType":"YulIdentifier","src":"13205:6:46"},"nativeSrc":"13205:88:46","nodeType":"YulFunctionCall","src":"13205:88:46"},"nativeSrc":"13205:88:46","nodeType":"YulExpressionStatement","src":"13205:88:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13309:1:46","nodeType":"YulLiteral","src":"13309:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"13312:4:46","nodeType":"YulLiteral","src":"13312:4:46","type":"","value":"0x41"}],"functionName":{"name":"mstore","nativeSrc":"13302:6:46","nodeType":"YulIdentifier","src":"13302:6:46"},"nativeSrc":"13302:15:46","nodeType":"YulFunctionCall","src":"13302:15:46"},"nativeSrc":"13302:15:46","nodeType":"YulExpressionStatement","src":"13302:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13333:1:46","nodeType":"YulLiteral","src":"13333:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"13336:4:46","nodeType":"YulLiteral","src":"13336:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"13326:6:46","nodeType":"YulIdentifier","src":"13326:6:46"},"nativeSrc":"13326:15:46","nodeType":"YulFunctionCall","src":"13326:15:46"},"nativeSrc":"13326:15:46","nodeType":"YulExpressionStatement","src":"13326:15:46"}]},"name":"panic_error_0x41","nativeSrc":"13163:184:46","nodeType":"YulFunctionDefinition","src":"13163:184:46"},{"body":{"nativeSrc":"13433:462:46","nodeType":"YulBlock","src":"13433:462:46","statements":[{"body":{"nativeSrc":"13466:423:46","nodeType":"YulBlock","src":"13466:423:46","statements":[{"nativeSrc":"13480:11:46","nodeType":"YulVariableDeclaration","src":"13480:11:46","value":{"kind":"number","nativeSrc":"13490:1:46","nodeType":"YulLiteral","src":"13490:1:46","type":"","value":"0"},"variables":[{"name":"_1","nativeSrc":"13484:2:46","nodeType":"YulTypedName","src":"13484:2:46","type":""}]},{"expression":{"arguments":[{"kind":"number","nativeSrc":"13511:1:46","nodeType":"YulLiteral","src":"13511:1:46","type":"","value":"0"},{"name":"array","nativeSrc":"13514:5:46","nodeType":"YulIdentifier","src":"13514:5:46"}],"functionName":{"name":"mstore","nativeSrc":"13504:6:46","nodeType":"YulIdentifier","src":"13504:6:46"},"nativeSrc":"13504:16:46","nodeType":"YulFunctionCall","src":"13504:16:46"},"nativeSrc":"13504:16:46","nodeType":"YulExpressionStatement","src":"13504:16:46"},{"nativeSrc":"13533:30:46","nodeType":"YulVariableDeclaration","src":"13533:30:46","value":{"arguments":[{"kind":"number","nativeSrc":"13555:1:46","nodeType":"YulLiteral","src":"13555:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"13558:4:46","nodeType":"YulLiteral","src":"13558:4:46","type":"","value":"0x20"}],"functionName":{"name":"keccak256","nativeSrc":"13545:9:46","nodeType":"YulIdentifier","src":"13545:9:46"},"nativeSrc":"13545:18:46","nodeType":"YulFunctionCall","src":"13545:18:46"},"variables":[{"name":"data","nativeSrc":"13537:4:46","nodeType":"YulTypedName","src":"13537:4:46","type":""}]},{"nativeSrc":"13576:57:46","nodeType":"YulVariableDeclaration","src":"13576:57:46","value":{"arguments":[{"name":"data","nativeSrc":"13599:4:46","nodeType":"YulIdentifier","src":"13599:4:46"},{"arguments":[{"kind":"number","nativeSrc":"13609:1:46","nodeType":"YulLiteral","src":"13609:1:46","type":"","value":"5"},{"arguments":[{"name":"startIndex","nativeSrc":"13616:10:46","nodeType":"YulIdentifier","src":"13616:10:46"},{"kind":"number","nativeSrc":"13628:2:46","nodeType":"YulLiteral","src":"13628:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"13612:3:46","nodeType":"YulIdentifier","src":"13612:3:46"},"nativeSrc":"13612:19:46","nodeType":"YulFunctionCall","src":"13612:19:46"}],"functionName":{"name":"shr","nativeSrc":"13605:3:46","nodeType":"YulIdentifier","src":"13605:3:46"},"nativeSrc":"13605:27:46","nodeType":"YulFunctionCall","src":"13605:27:46"}],"functionName":{"name":"add","nativeSrc":"13595:3:46","nodeType":"YulIdentifier","src":"13595:3:46"},"nativeSrc":"13595:38:46","nodeType":"YulFunctionCall","src":"13595:38:46"},"variables":[{"name":"deleteStart","nativeSrc":"13580:11:46","nodeType":"YulTypedName","src":"13580:11:46","type":""}]},{"body":{"nativeSrc":"13670:23:46","nodeType":"YulBlock","src":"13670:23:46","statements":[{"nativeSrc":"13672:19:46","nodeType":"YulAssignment","src":"13672:19:46","value":{"name":"data","nativeSrc":"13687:4:46","nodeType":"YulIdentifier","src":"13687:4:46"},"variableNames":[{"name":"deleteStart","nativeSrc":"13672:11:46","nodeType":"YulIdentifier","src":"13672:11:46"}]}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"13652:10:46","nodeType":"YulIdentifier","src":"13652:10:46"},{"kind":"number","nativeSrc":"13664:4:46","nodeType":"YulLiteral","src":"13664:4:46","type":"","value":"0x20"}],"functionName":{"name":"lt","nativeSrc":"13649:2:46","nodeType":"YulIdentifier","src":"13649:2:46"},"nativeSrc":"13649:20:46","nodeType":"YulFunctionCall","src":"13649:20:46"},"nativeSrc":"13646:47:46","nodeType":"YulIf","src":"13646:47:46"},{"nativeSrc":"13706:41:46","nodeType":"YulVariableDeclaration","src":"13706:41:46","value":{"arguments":[{"name":"data","nativeSrc":"13720:4:46","nodeType":"YulIdentifier","src":"13720:4:46"},{"arguments":[{"kind":"number","nativeSrc":"13730:1:46","nodeType":"YulLiteral","src":"13730:1:46","type":"","value":"5"},{"arguments":[{"name":"len","nativeSrc":"13737:3:46","nodeType":"YulIdentifier","src":"13737:3:46"},{"kind":"number","nativeSrc":"13742:2:46","nodeType":"YulLiteral","src":"13742:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"13733:3:46","nodeType":"YulIdentifier","src":"13733:3:46"},"nativeSrc":"13733:12:46","nodeType":"YulFunctionCall","src":"13733:12:46"}],"functionName":{"name":"shr","nativeSrc":"13726:3:46","nodeType":"YulIdentifier","src":"13726:3:46"},"nativeSrc":"13726:20:46","nodeType":"YulFunctionCall","src":"13726:20:46"}],"functionName":{"name":"add","nativeSrc":"13716:3:46","nodeType":"YulIdentifier","src":"13716:3:46"},"nativeSrc":"13716:31:46","nodeType":"YulFunctionCall","src":"13716:31:46"},"variables":[{"name":"_2","nativeSrc":"13710:2:46","nodeType":"YulTypedName","src":"13710:2:46","type":""}]},{"nativeSrc":"13760:24:46","nodeType":"YulVariableDeclaration","src":"13760:24:46","value":{"name":"deleteStart","nativeSrc":"13773:11:46","nodeType":"YulIdentifier","src":"13773:11:46"},"variables":[{"name":"start","nativeSrc":"13764:5:46","nodeType":"YulTypedName","src":"13764:5:46","type":""}]},{"body":{"nativeSrc":"13858:21:46","nodeType":"YulBlock","src":"13858:21:46","statements":[{"expression":{"arguments":[{"name":"start","nativeSrc":"13867:5:46","nodeType":"YulIdentifier","src":"13867:5:46"},{"name":"_1","nativeSrc":"13874:2:46","nodeType":"YulIdentifier","src":"13874:2:46"}],"functionName":{"name":"sstore","nativeSrc":"13860:6:46","nodeType":"YulIdentifier","src":"13860:6:46"},"nativeSrc":"13860:17:46","nodeType":"YulFunctionCall","src":"13860:17:46"},"nativeSrc":"13860:17:46","nodeType":"YulExpressionStatement","src":"13860:17:46"}]},"condition":{"arguments":[{"name":"start","nativeSrc":"13808:5:46","nodeType":"YulIdentifier","src":"13808:5:46"},{"name":"_2","nativeSrc":"13815:2:46","nodeType":"YulIdentifier","src":"13815:2:46"}],"functionName":{"name":"lt","nativeSrc":"13805:2:46","nodeType":"YulIdentifier","src":"13805:2:46"},"nativeSrc":"13805:13:46","nodeType":"YulFunctionCall","src":"13805:13:46"},"nativeSrc":"13797:82:46","nodeType":"YulForLoop","post":{"nativeSrc":"13819:26:46","nodeType":"YulBlock","src":"13819:26:46","statements":[{"nativeSrc":"13821:22:46","nodeType":"YulAssignment","src":"13821:22:46","value":{"arguments":[{"name":"start","nativeSrc":"13834:5:46","nodeType":"YulIdentifier","src":"13834:5:46"},{"kind":"number","nativeSrc":"13841:1:46","nodeType":"YulLiteral","src":"13841:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13830:3:46","nodeType":"YulIdentifier","src":"13830:3:46"},"nativeSrc":"13830:13:46","nodeType":"YulFunctionCall","src":"13830:13:46"},"variableNames":[{"name":"start","nativeSrc":"13821:5:46","nodeType":"YulIdentifier","src":"13821:5:46"}]}]},"pre":{"nativeSrc":"13801:3:46","nodeType":"YulBlock","src":"13801:3:46","statements":[]},"src":"13797:82:46"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"13449:3:46","nodeType":"YulIdentifier","src":"13449:3:46"},{"kind":"number","nativeSrc":"13454:2:46","nodeType":"YulLiteral","src":"13454:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"13446:2:46","nodeType":"YulIdentifier","src":"13446:2:46"},"nativeSrc":"13446:11:46","nodeType":"YulFunctionCall","src":"13446:11:46"},"nativeSrc":"13443:446:46","nodeType":"YulIf","src":"13443:446:46"}]},"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"13352:543:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"array","nativeSrc":"13405:5:46","nodeType":"YulTypedName","src":"13405:5:46","type":""},{"name":"len","nativeSrc":"13412:3:46","nodeType":"YulTypedName","src":"13412:3:46","type":""},{"name":"startIndex","nativeSrc":"13417:10:46","nodeType":"YulTypedName","src":"13417:10:46","type":""}],"src":"13352:543:46"},{"body":{"nativeSrc":"13985:141:46","nodeType":"YulBlock","src":"13985:141:46","statements":[{"nativeSrc":"13995:125:46","nodeType":"YulAssignment","src":"13995:125:46","value":{"arguments":[{"arguments":[{"name":"data","nativeSrc":"14010:4:46","nodeType":"YulIdentifier","src":"14010:4:46"},{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"14028:1:46","nodeType":"YulLiteral","src":"14028:1:46","type":"","value":"3"},{"name":"len","nativeSrc":"14031:3:46","nodeType":"YulIdentifier","src":"14031:3:46"}],"functionName":{"name":"shl","nativeSrc":"14024:3:46","nodeType":"YulIdentifier","src":"14024:3:46"},"nativeSrc":"14024:11:46","nodeType":"YulFunctionCall","src":"14024:11:46"},{"kind":"number","nativeSrc":"14037:66:46","nodeType":"YulLiteral","src":"14037:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"14020:3:46","nodeType":"YulIdentifier","src":"14020:3:46"},"nativeSrc":"14020:84:46","nodeType":"YulFunctionCall","src":"14020:84:46"}],"functionName":{"name":"not","nativeSrc":"14016:3:46","nodeType":"YulIdentifier","src":"14016:3:46"},"nativeSrc":"14016:89:46","nodeType":"YulFunctionCall","src":"14016:89:46"}],"functionName":{"name":"and","nativeSrc":"14006:3:46","nodeType":"YulIdentifier","src":"14006:3:46"},"nativeSrc":"14006:100:46","nodeType":"YulFunctionCall","src":"14006:100:46"},{"arguments":[{"kind":"number","nativeSrc":"14112:1:46","nodeType":"YulLiteral","src":"14112:1:46","type":"","value":"1"},{"name":"len","nativeSrc":"14115:3:46","nodeType":"YulIdentifier","src":"14115:3:46"}],"functionName":{"name":"shl","nativeSrc":"14108:3:46","nodeType":"YulIdentifier","src":"14108:3:46"},"nativeSrc":"14108:11:46","nodeType":"YulFunctionCall","src":"14108:11:46"}],"functionName":{"name":"or","nativeSrc":"14003:2:46","nodeType":"YulIdentifier","src":"14003:2:46"},"nativeSrc":"14003:117:46","nodeType":"YulFunctionCall","src":"14003:117:46"},"variableNames":[{"name":"used","nativeSrc":"13995:4:46","nodeType":"YulIdentifier","src":"13995:4:46"}]}]},"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"13900:226:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"data","nativeSrc":"13962:4:46","nodeType":"YulTypedName","src":"13962:4:46","type":""},{"name":"len","nativeSrc":"13968:3:46","nodeType":"YulTypedName","src":"13968:3:46","type":""}],"returnVariables":[{"name":"used","nativeSrc":"13976:4:46","nodeType":"YulTypedName","src":"13976:4:46","type":""}],"src":"13900:226:46"},{"body":{"nativeSrc":"14218:1222:46","nodeType":"YulBlock","src":"14218:1222:46","statements":[{"body":{"nativeSrc":"14259:22:46","nodeType":"YulBlock","src":"14259:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"14261:16:46","nodeType":"YulIdentifier","src":"14261:16:46"},"nativeSrc":"14261:18:46","nodeType":"YulFunctionCall","src":"14261:18:46"},"nativeSrc":"14261:18:46","nodeType":"YulExpressionStatement","src":"14261:18:46"}]},"condition":{"arguments":[{"name":"len","nativeSrc":"14234:3:46","nodeType":"YulIdentifier","src":"14234:3:46"},{"kind":"number","nativeSrc":"14239:18:46","nodeType":"YulLiteral","src":"14239:18:46","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"14231:2:46","nodeType":"YulIdentifier","src":"14231:2:46"},"nativeSrc":"14231:27:46","nodeType":"YulFunctionCall","src":"14231:27:46"},"nativeSrc":"14228:53:46","nodeType":"YulIf","src":"14228:53:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"14334:4:46","nodeType":"YulIdentifier","src":"14334:4:46"},{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"14372:4:46","nodeType":"YulIdentifier","src":"14372:4:46"}],"functionName":{"name":"sload","nativeSrc":"14366:5:46","nodeType":"YulIdentifier","src":"14366:5:46"},"nativeSrc":"14366:11:46","nodeType":"YulFunctionCall","src":"14366:11:46"}],"functionName":{"name":"extract_byte_array_length","nativeSrc":"14340:25:46","nodeType":"YulIdentifier","src":"14340:25:46"},"nativeSrc":"14340:38:46","nodeType":"YulFunctionCall","src":"14340:38:46"},{"name":"len","nativeSrc":"14380:3:46","nodeType":"YulIdentifier","src":"14380:3:46"}],"functionName":{"name":"clean_up_bytearray_end_slots_string_storage","nativeSrc":"14290:43:46","nodeType":"YulIdentifier","src":"14290:43:46"},"nativeSrc":"14290:94:46","nodeType":"YulFunctionCall","src":"14290:94:46"},"nativeSrc":"14290:94:46","nodeType":"YulExpressionStatement","src":"14290:94:46"},{"nativeSrc":"14393:18:46","nodeType":"YulVariableDeclaration","src":"14393:18:46","value":{"kind":"number","nativeSrc":"14410:1:46","nodeType":"YulLiteral","src":"14410:1:46","type":"","value":"0"},"variables":[{"name":"srcOffset","nativeSrc":"14397:9:46","nodeType":"YulTypedName","src":"14397:9:46","type":""}]},{"cases":[{"body":{"nativeSrc":"14454:728:46","nodeType":"YulBlock","src":"14454:728:46","statements":[{"nativeSrc":"14468:91:46","nodeType":"YulVariableDeclaration","src":"14468:91:46","value":{"arguments":[{"name":"len","nativeSrc":"14487:3:46","nodeType":"YulIdentifier","src":"14487:3:46"},{"kind":"number","nativeSrc":"14492:66:46","nodeType":"YulLiteral","src":"14492:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"14483:3:46","nodeType":"YulIdentifier","src":"14483:3:46"},"nativeSrc":"14483:76:46","nodeType":"YulFunctionCall","src":"14483:76:46"},"variables":[{"name":"loopEnd","nativeSrc":"14472:7:46","nodeType":"YulTypedName","src":"14472:7:46","type":""}]},{"nativeSrc":"14572:49:46","nodeType":"YulVariableDeclaration","src":"14572:49:46","value":{"arguments":[{"name":"slot","nativeSrc":"14616:4:46","nodeType":"YulIdentifier","src":"14616:4:46"}],"functionName":{"name":"array_dataslot_string_storage","nativeSrc":"14586:29:46","nodeType":"YulIdentifier","src":"14586:29:46"},"nativeSrc":"14586:35:46","nodeType":"YulFunctionCall","src":"14586:35:46"},"variables":[{"name":"dstPtr","nativeSrc":"14576:6:46","nodeType":"YulTypedName","src":"14576:6:46","type":""}]},{"nativeSrc":"14634:18:46","nodeType":"YulVariableDeclaration","src":"14634:18:46","value":{"name":"srcOffset","nativeSrc":"14643:9:46","nodeType":"YulIdentifier","src":"14643:9:46"},"variables":[{"name":"i","nativeSrc":"14638:1:46","nodeType":"YulTypedName","src":"14638:1:46","type":""}]},{"body":{"nativeSrc":"14722:172:46","nodeType":"YulBlock","src":"14722:172:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"14747:6:46","nodeType":"YulIdentifier","src":"14747:6:46"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"14772:3:46","nodeType":"YulIdentifier","src":"14772:3:46"},{"name":"srcOffset","nativeSrc":"14777:9:46","nodeType":"YulIdentifier","src":"14777:9:46"}],"functionName":{"name":"add","nativeSrc":"14768:3:46","nodeType":"YulIdentifier","src":"14768:3:46"},"nativeSrc":"14768:19:46","nodeType":"YulFunctionCall","src":"14768:19:46"}],"functionName":{"name":"calldataload","nativeSrc":"14755:12:46","nodeType":"YulIdentifier","src":"14755:12:46"},"nativeSrc":"14755:33:46","nodeType":"YulFunctionCall","src":"14755:33:46"}],"functionName":{"name":"sstore","nativeSrc":"14740:6:46","nodeType":"YulIdentifier","src":"14740:6:46"},"nativeSrc":"14740:49:46","nodeType":"YulFunctionCall","src":"14740:49:46"},"nativeSrc":"14740:49:46","nodeType":"YulExpressionStatement","src":"14740:49:46"},{"nativeSrc":"14806:24:46","nodeType":"YulAssignment","src":"14806:24:46","value":{"arguments":[{"name":"dstPtr","nativeSrc":"14820:6:46","nodeType":"YulIdentifier","src":"14820:6:46"},{"kind":"number","nativeSrc":"14828:1:46","nodeType":"YulLiteral","src":"14828:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14816:3:46","nodeType":"YulIdentifier","src":"14816:3:46"},"nativeSrc":"14816:14:46","nodeType":"YulFunctionCall","src":"14816:14:46"},"variableNames":[{"name":"dstPtr","nativeSrc":"14806:6:46","nodeType":"YulIdentifier","src":"14806:6:46"}]},{"nativeSrc":"14847:33:46","nodeType":"YulAssignment","src":"14847:33:46","value":{"arguments":[{"name":"srcOffset","nativeSrc":"14864:9:46","nodeType":"YulIdentifier","src":"14864:9:46"},{"kind":"number","nativeSrc":"14875:4:46","nodeType":"YulLiteral","src":"14875:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14860:3:46","nodeType":"YulIdentifier","src":"14860:3:46"},"nativeSrc":"14860:20:46","nodeType":"YulFunctionCall","src":"14860:20:46"},"variableNames":[{"name":"srcOffset","nativeSrc":"14847:9:46","nodeType":"YulIdentifier","src":"14847:9:46"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"14676:1:46","nodeType":"YulIdentifier","src":"14676:1:46"},{"name":"loopEnd","nativeSrc":"14679:7:46","nodeType":"YulIdentifier","src":"14679:7:46"}],"functionName":{"name":"lt","nativeSrc":"14673:2:46","nodeType":"YulIdentifier","src":"14673:2:46"},"nativeSrc":"14673:14:46","nodeType":"YulFunctionCall","src":"14673:14:46"},"nativeSrc":"14665:229:46","nodeType":"YulForLoop","post":{"nativeSrc":"14688:21:46","nodeType":"YulBlock","src":"14688:21:46","statements":[{"nativeSrc":"14690:17:46","nodeType":"YulAssignment","src":"14690:17:46","value":{"arguments":[{"name":"i","nativeSrc":"14699:1:46","nodeType":"YulIdentifier","src":"14699:1:46"},{"kind":"number","nativeSrc":"14702:4:46","nodeType":"YulLiteral","src":"14702:4:46","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"14695:3:46","nodeType":"YulIdentifier","src":"14695:3:46"},"nativeSrc":"14695:12:46","nodeType":"YulFunctionCall","src":"14695:12:46"},"variableNames":[{"name":"i","nativeSrc":"14690:1:46","nodeType":"YulIdentifier","src":"14690:1:46"}]}]},"pre":{"nativeSrc":"14669:3:46","nodeType":"YulBlock","src":"14669:3:46","statements":[]},"src":"14665:229:46"},{"body":{"nativeSrc":"14939:187:46","nodeType":"YulBlock","src":"14939:187:46","statements":[{"expression":{"arguments":[{"name":"dstPtr","nativeSrc":"14964:6:46","nodeType":"YulIdentifier","src":"14964:6:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"src","nativeSrc":"14993:3:46","nodeType":"YulIdentifier","src":"14993:3:46"},{"name":"srcOffset","nativeSrc":"14998:9:46","nodeType":"YulIdentifier","src":"14998:9:46"}],"functionName":{"name":"add","nativeSrc":"14989:3:46","nodeType":"YulIdentifier","src":"14989:3:46"},"nativeSrc":"14989:19:46","nodeType":"YulFunctionCall","src":"14989:19:46"}],"functionName":{"name":"calldataload","nativeSrc":"14976:12:46","nodeType":"YulIdentifier","src":"14976:12:46"},"nativeSrc":"14976:33:46","nodeType":"YulFunctionCall","src":"14976:33:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15027:1:46","nodeType":"YulLiteral","src":"15027:1:46","type":"","value":"3"},{"name":"len","nativeSrc":"15030:3:46","nodeType":"YulIdentifier","src":"15030:3:46"}],"functionName":{"name":"shl","nativeSrc":"15023:3:46","nodeType":"YulIdentifier","src":"15023:3:46"},"nativeSrc":"15023:11:46","nodeType":"YulFunctionCall","src":"15023:11:46"},{"kind":"number","nativeSrc":"15036:3:46","nodeType":"YulLiteral","src":"15036:3:46","type":"","value":"248"}],"functionName":{"name":"and","nativeSrc":"15019:3:46","nodeType":"YulIdentifier","src":"15019:3:46"},"nativeSrc":"15019:21:46","nodeType":"YulFunctionCall","src":"15019:21:46"},{"kind":"number","nativeSrc":"15042:66:46","nodeType":"YulLiteral","src":"15042:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"shr","nativeSrc":"15015:3:46","nodeType":"YulIdentifier","src":"15015:3:46"},"nativeSrc":"15015:94:46","nodeType":"YulFunctionCall","src":"15015:94:46"}],"functionName":{"name":"not","nativeSrc":"15011:3:46","nodeType":"YulIdentifier","src":"15011:3:46"},"nativeSrc":"15011:99:46","nodeType":"YulFunctionCall","src":"15011:99:46"}],"functionName":{"name":"and","nativeSrc":"14972:3:46","nodeType":"YulIdentifier","src":"14972:3:46"},"nativeSrc":"14972:139:46","nodeType":"YulFunctionCall","src":"14972:139:46"}],"functionName":{"name":"sstore","nativeSrc":"14957:6:46","nodeType":"YulIdentifier","src":"14957:6:46"},"nativeSrc":"14957:155:46","nodeType":"YulFunctionCall","src":"14957:155:46"},"nativeSrc":"14957:155:46","nodeType":"YulExpressionStatement","src":"14957:155:46"}]},"condition":{"arguments":[{"name":"loopEnd","nativeSrc":"14913:7:46","nodeType":"YulIdentifier","src":"14913:7:46"},{"name":"len","nativeSrc":"14922:3:46","nodeType":"YulIdentifier","src":"14922:3:46"}],"functionName":{"name":"lt","nativeSrc":"14910:2:46","nodeType":"YulIdentifier","src":"14910:2:46"},"nativeSrc":"14910:16:46","nodeType":"YulFunctionCall","src":"14910:16:46"},"nativeSrc":"14907:219:46","nodeType":"YulIf","src":"14907:219:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15146:4:46","nodeType":"YulIdentifier","src":"15146:4:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15160:1:46","nodeType":"YulLiteral","src":"15160:1:46","type":"","value":"1"},{"name":"len","nativeSrc":"15163:3:46","nodeType":"YulIdentifier","src":"15163:3:46"}],"functionName":{"name":"shl","nativeSrc":"15156:3:46","nodeType":"YulIdentifier","src":"15156:3:46"},"nativeSrc":"15156:11:46","nodeType":"YulFunctionCall","src":"15156:11:46"},{"kind":"number","nativeSrc":"15169:1:46","nodeType":"YulLiteral","src":"15169:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"15152:3:46","nodeType":"YulIdentifier","src":"15152:3:46"},"nativeSrc":"15152:19:46","nodeType":"YulFunctionCall","src":"15152:19:46"}],"functionName":{"name":"sstore","nativeSrc":"15139:6:46","nodeType":"YulIdentifier","src":"15139:6:46"},"nativeSrc":"15139:33:46","nodeType":"YulFunctionCall","src":"15139:33:46"},"nativeSrc":"15139:33:46","nodeType":"YulExpressionStatement","src":"15139:33:46"}]},"nativeSrc":"14447:735:46","nodeType":"YulCase","src":"14447:735:46","value":{"kind":"number","nativeSrc":"14452:1:46","nodeType":"YulLiteral","src":"14452:1:46","type":"","value":"1"}},{"body":{"nativeSrc":"15199:235:46","nodeType":"YulBlock","src":"15199:235:46","statements":[{"nativeSrc":"15213:14:46","nodeType":"YulVariableDeclaration","src":"15213:14:46","value":{"kind":"number","nativeSrc":"15226:1:46","nodeType":"YulLiteral","src":"15226:1:46","type":"","value":"0"},"variables":[{"name":"value","nativeSrc":"15217:5:46","nodeType":"YulTypedName","src":"15217:5:46","type":""}]},{"body":{"nativeSrc":"15259:74:46","nodeType":"YulBlock","src":"15259:74:46","statements":[{"nativeSrc":"15277:42:46","nodeType":"YulAssignment","src":"15277:42:46","value":{"arguments":[{"arguments":[{"name":"src","nativeSrc":"15303:3:46","nodeType":"YulIdentifier","src":"15303:3:46"},{"name":"srcOffset","nativeSrc":"15308:9:46","nodeType":"YulIdentifier","src":"15308:9:46"}],"functionName":{"name":"add","nativeSrc":"15299:3:46","nodeType":"YulIdentifier","src":"15299:3:46"},"nativeSrc":"15299:19:46","nodeType":"YulFunctionCall","src":"15299:19:46"}],"functionName":{"name":"calldataload","nativeSrc":"15286:12:46","nodeType":"YulIdentifier","src":"15286:12:46"},"nativeSrc":"15286:33:46","nodeType":"YulFunctionCall","src":"15286:33:46"},"variableNames":[{"name":"value","nativeSrc":"15277:5:46","nodeType":"YulIdentifier","src":"15277:5:46"}]}]},"condition":{"name":"len","nativeSrc":"15243:3:46","nodeType":"YulIdentifier","src":"15243:3:46"},"nativeSrc":"15240:93:46","nodeType":"YulIf","src":"15240:93:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15353:4:46","nodeType":"YulIdentifier","src":"15353:4:46"},{"arguments":[{"name":"value","nativeSrc":"15412:5:46","nodeType":"YulIdentifier","src":"15412:5:46"},{"name":"len","nativeSrc":"15419:3:46","nodeType":"YulIdentifier","src":"15419:3:46"}],"functionName":{"name":"extract_used_part_and_set_length_of_short_byte_array","nativeSrc":"15359:52:46","nodeType":"YulIdentifier","src":"15359:52:46"},"nativeSrc":"15359:64:46","nodeType":"YulFunctionCall","src":"15359:64:46"}],"functionName":{"name":"sstore","nativeSrc":"15346:6:46","nodeType":"YulIdentifier","src":"15346:6:46"},"nativeSrc":"15346:78:46","nodeType":"YulFunctionCall","src":"15346:78:46"},"nativeSrc":"15346:78:46","nodeType":"YulExpressionStatement","src":"15346:78:46"}]},"nativeSrc":"15191:243:46","nodeType":"YulCase","src":"15191:243:46","value":"default"}],"expression":{"arguments":[{"name":"len","nativeSrc":"14430:3:46","nodeType":"YulIdentifier","src":"14430:3:46"},{"kind":"number","nativeSrc":"14435:2:46","nodeType":"YulLiteral","src":"14435:2:46","type":"","value":"31"}],"functionName":{"name":"gt","nativeSrc":"14427:2:46","nodeType":"YulIdentifier","src":"14427:2:46"},"nativeSrc":"14427:11:46","nodeType":"YulFunctionCall","src":"14427:11:46"},"nativeSrc":"14420:1014:46","nodeType":"YulSwitch","src":"14420:1014:46"}]},"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"14131:1309:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"14198:4:46","nodeType":"YulTypedName","src":"14198:4:46","type":""},{"name":"src","nativeSrc":"14204:3:46","nodeType":"YulTypedName","src":"14204:3:46","type":""},{"name":"len","nativeSrc":"14209:3:46","nodeType":"YulTypedName","src":"14209:3:46","type":""}],"src":"14131:1309:46"},{"body":{"nativeSrc":"15574:1250:46","nodeType":"YulBlock","src":"15574:1250:46","statements":[{"nativeSrc":"15584:56:46","nodeType":"YulVariableDeclaration","src":"15584:56:46","value":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15625:5:46","nodeType":"YulIdentifier","src":"15625:5:46"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"15598:26:46","nodeType":"YulIdentifier","src":"15598:26:46"},"nativeSrc":"15598:33:46","nodeType":"YulFunctionCall","src":"15598:33:46"},{"kind":"number","nativeSrc":"15633:6:46","nodeType":"YulLiteral","src":"15633:6:46","type":"","value":"0xffff"}],"functionName":{"name":"and","nativeSrc":"15594:3:46","nodeType":"YulIdentifier","src":"15594:3:46"},"nativeSrc":"15594:46:46","nodeType":"YulFunctionCall","src":"15594:46:46"},"variables":[{"name":"_1","nativeSrc":"15588:2:46","nodeType":"YulTypedName","src":"15588:2:46","type":""}]},{"nativeSrc":"15649:21:46","nodeType":"YulVariableDeclaration","src":"15649:21:46","value":{"arguments":[{"name":"slot","nativeSrc":"15665:4:46","nodeType":"YulIdentifier","src":"15665:4:46"}],"functionName":{"name":"sload","nativeSrc":"15659:5:46","nodeType":"YulIdentifier","src":"15659:5:46"},"nativeSrc":"15659:11:46","nodeType":"YulFunctionCall","src":"15659:11:46"},"variables":[{"name":"_2","nativeSrc":"15653:2:46","nodeType":"YulTypedName","src":"15653:2:46","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15686:4:46","nodeType":"YulIdentifier","src":"15686:4:46"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15699:2:46","nodeType":"YulIdentifier","src":"15699:2:46"},{"kind":"number","nativeSrc":"15703:66:46","nodeType":"YulLiteral","src":"15703:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000"}],"functionName":{"name":"and","nativeSrc":"15695:3:46","nodeType":"YulIdentifier","src":"15695:3:46"},"nativeSrc":"15695:75:46","nodeType":"YulFunctionCall","src":"15695:75:46"},{"name":"_1","nativeSrc":"15772:2:46","nodeType":"YulIdentifier","src":"15772:2:46"}],"functionName":{"name":"or","nativeSrc":"15692:2:46","nodeType":"YulIdentifier","src":"15692:2:46"},"nativeSrc":"15692:83:46","nodeType":"YulFunctionCall","src":"15692:83:46"}],"functionName":{"name":"sstore","nativeSrc":"15679:6:46","nodeType":"YulIdentifier","src":"15679:6:46"},"nativeSrc":"15679:97:46","nodeType":"YulFunctionCall","src":"15679:97:46"},"nativeSrc":"15679:97:46","nodeType":"YulExpressionStatement","src":"15679:97:46"},{"nativeSrc":"15785:78:46","nodeType":"YulVariableDeclaration","src":"15785:78:46","value":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"15803:2:46","nodeType":"YulLiteral","src":"15803:2:46","type":"","value":"16"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"15838:5:46","nodeType":"YulIdentifier","src":"15838:5:46"},{"kind":"number","nativeSrc":"15845:2:46","nodeType":"YulLiteral","src":"15845:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15834:3:46","nodeType":"YulIdentifier","src":"15834:3:46"},"nativeSrc":"15834:14:46","nodeType":"YulFunctionCall","src":"15834:14:46"}],"functionName":{"name":"read_from_calldatat_uint16","nativeSrc":"15807:26:46","nodeType":"YulIdentifier","src":"15807:26:46"},"nativeSrc":"15807:42:46","nodeType":"YulFunctionCall","src":"15807:42:46"}],"functionName":{"name":"shl","nativeSrc":"15799:3:46","nodeType":"YulIdentifier","src":"15799:3:46"},"nativeSrc":"15799:51:46","nodeType":"YulFunctionCall","src":"15799:51:46"},{"kind":"number","nativeSrc":"15852:10:46","nodeType":"YulLiteral","src":"15852:10:46","type":"","value":"0xffff0000"}],"functionName":{"name":"and","nativeSrc":"15795:3:46","nodeType":"YulIdentifier","src":"15795:3:46"},"nativeSrc":"15795:68:46","nodeType":"YulFunctionCall","src":"15795:68:46"},"variables":[{"name":"_3","nativeSrc":"15789:2:46","nodeType":"YulTypedName","src":"15789:2:46","type":""}]},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15879:4:46","nodeType":"YulIdentifier","src":"15879:4:46"},{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"15895:2:46","nodeType":"YulIdentifier","src":"15895:2:46"},{"kind":"number","nativeSrc":"15899:66:46","nodeType":"YulLiteral","src":"15899:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"15891:3:46","nodeType":"YulIdentifier","src":"15891:3:46"},"nativeSrc":"15891:75:46","nodeType":"YulFunctionCall","src":"15891:75:46"},{"name":"_1","nativeSrc":"15968:2:46","nodeType":"YulIdentifier","src":"15968:2:46"}],"functionName":{"name":"or","nativeSrc":"15888:2:46","nodeType":"YulIdentifier","src":"15888:2:46"},"nativeSrc":"15888:83:46","nodeType":"YulFunctionCall","src":"15888:83:46"},{"name":"_3","nativeSrc":"15973:2:46","nodeType":"YulIdentifier","src":"15973:2:46"}],"functionName":{"name":"or","nativeSrc":"15885:2:46","nodeType":"YulIdentifier","src":"15885:2:46"},"nativeSrc":"15885:91:46","nodeType":"YulFunctionCall","src":"15885:91:46"}],"functionName":{"name":"sstore","nativeSrc":"15872:6:46","nodeType":"YulIdentifier","src":"15872:6:46"},"nativeSrc":"15872:105:46","nodeType":"YulFunctionCall","src":"15872:105:46"},"nativeSrc":"15872:105:46","nodeType":"YulExpressionStatement","src":"15872:105:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"15993:4:46","nodeType":"YulIdentifier","src":"15993:4:46"},{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"16005:2:46","nodeType":"YulIdentifier","src":"16005:2:46"},{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"16016:2:46","nodeType":"YulIdentifier","src":"16016:2:46"},{"kind":"number","nativeSrc":"16020:66:46","nodeType":"YulLiteral","src":"16020:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"16012:3:46","nodeType":"YulIdentifier","src":"16012:3:46"},"nativeSrc":"16012:75:46","nodeType":"YulFunctionCall","src":"16012:75:46"},{"name":"_1","nativeSrc":"16089:2:46","nodeType":"YulIdentifier","src":"16089:2:46"}],"functionName":{"name":"or","nativeSrc":"16009:2:46","nodeType":"YulIdentifier","src":"16009:2:46"},"nativeSrc":"16009:83:46","nodeType":"YulFunctionCall","src":"16009:83:46"}],"functionName":{"name":"or","nativeSrc":"16002:2:46","nodeType":"YulIdentifier","src":"16002:2:46"},"nativeSrc":"16002:91:46","nodeType":"YulFunctionCall","src":"16002:91:46"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"16103:2:46","nodeType":"YulLiteral","src":"16103:2:46","type":"","value":"32"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16138:5:46","nodeType":"YulIdentifier","src":"16138:5:46"},{"kind":"number","nativeSrc":"16145:2:46","nodeType":"YulLiteral","src":"16145:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16134:3:46","nodeType":"YulIdentifier","src":"16134:3:46"},"nativeSrc":"16134:14:46","nodeType":"YulFunctionCall","src":"16134:14:46"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"16107:26:46","nodeType":"YulIdentifier","src":"16107:26:46"},"nativeSrc":"16107:42:46","nodeType":"YulFunctionCall","src":"16107:42:46"}],"functionName":{"name":"shl","nativeSrc":"16099:3:46","nodeType":"YulIdentifier","src":"16099:3:46"},"nativeSrc":"16099:51:46","nodeType":"YulFunctionCall","src":"16099:51:46"},{"kind":"number","nativeSrc":"16152:26:46","nodeType":"YulLiteral","src":"16152:26:46","type":"","value":"0xffffffffffffffff00000000"}],"functionName":{"name":"and","nativeSrc":"16095:3:46","nodeType":"YulIdentifier","src":"16095:3:46"},"nativeSrc":"16095:84:46","nodeType":"YulFunctionCall","src":"16095:84:46"}],"functionName":{"name":"or","nativeSrc":"15999:2:46","nodeType":"YulIdentifier","src":"15999:2:46"},"nativeSrc":"15999:181:46","nodeType":"YulFunctionCall","src":"15999:181:46"}],"functionName":{"name":"sstore","nativeSrc":"15986:6:46","nodeType":"YulIdentifier","src":"15986:6:46"},"nativeSrc":"15986:195:46","nodeType":"YulFunctionCall","src":"15986:195:46"},"nativeSrc":"15986:195:46","nodeType":"YulExpressionStatement","src":"15986:195:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"16236:4:46","nodeType":"YulIdentifier","src":"16236:4:46"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16273:5:46","nodeType":"YulIdentifier","src":"16273:5:46"},{"kind":"number","nativeSrc":"16280:2:46","nodeType":"YulLiteral","src":"16280:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16269:3:46","nodeType":"YulIdentifier","src":"16269:3:46"},"nativeSrc":"16269:14:46","nodeType":"YulFunctionCall","src":"16269:14:46"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"16242:26:46","nodeType":"YulIdentifier","src":"16242:26:46"},"nativeSrc":"16242:42:46","nodeType":"YulFunctionCall","src":"16242:42:46"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_uint64","nativeSrc":"16190:45:46","nodeType":"YulIdentifier","src":"16190:45:46"},"nativeSrc":"16190:95:46","nodeType":"YulFunctionCall","src":"16190:95:46"},"nativeSrc":"16190:95:46","nodeType":"YulExpressionStatement","src":"16190:95:46"},{"expression":{"arguments":[{"name":"slot","nativeSrc":"16342:4:46","nodeType":"YulIdentifier","src":"16342:4:46"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"16379:5:46","nodeType":"YulIdentifier","src":"16379:5:46"},{"kind":"number","nativeSrc":"16386:3:46","nodeType":"YulLiteral","src":"16386:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16375:3:46","nodeType":"YulIdentifier","src":"16375:3:46"},"nativeSrc":"16375:15:46","nodeType":"YulFunctionCall","src":"16375:15:46"}],"functionName":{"name":"read_from_calldatat_uint64","nativeSrc":"16348:26:46","nodeType":"YulIdentifier","src":"16348:26:46"},"nativeSrc":"16348:43:46","nodeType":"YulFunctionCall","src":"16348:43:46"}],"functionName":{"name":"update_storage_value_offsett_uint64_to_t_uint64","nativeSrc":"16294:47:46","nodeType":"YulIdentifier","src":"16294:47:46"},"nativeSrc":"16294:98:46","nodeType":"YulFunctionCall","src":"16294:98:46"},"nativeSrc":"16294:98:46","nodeType":"YulExpressionStatement","src":"16294:98:46"},{"nativeSrc":"16401:94:46","nodeType":"YulVariableDeclaration","src":"16401:94:46","value":{"arguments":[{"name":"value","nativeSrc":"16472:5:46","nodeType":"YulIdentifier","src":"16472:5:46"},{"arguments":[{"name":"value","nativeSrc":"16483:5:46","nodeType":"YulIdentifier","src":"16483:5:46"},{"kind":"number","nativeSrc":"16490:3:46","nodeType":"YulLiteral","src":"16490:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16479:3:46","nodeType":"YulIdentifier","src":"16479:3:46"},"nativeSrc":"16479:15:46","nodeType":"YulFunctionCall","src":"16479:15:46"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"16435:36:46","nodeType":"YulIdentifier","src":"16435:36:46"},"nativeSrc":"16435:60:46","nodeType":"YulFunctionCall","src":"16435:60:46"},"variables":[{"name":"memberValue","nativeSrc":"16405:11:46","nodeType":"YulTypedName","src":"16405:11:46","type":""},{"name":"memberValue_1","nativeSrc":"16418:13:46","nodeType":"YulTypedName","src":"16418:13:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"16566:4:46","nodeType":"YulIdentifier","src":"16566:4:46"},{"kind":"number","nativeSrc":"16572:1:46","nodeType":"YulLiteral","src":"16572:1:46","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"16562:3:46","nodeType":"YulIdentifier","src":"16562:3:46"},"nativeSrc":"16562:12:46","nodeType":"YulFunctionCall","src":"16562:12:46"},{"name":"memberValue","nativeSrc":"16576:11:46","nodeType":"YulIdentifier","src":"16576:11:46"},{"name":"memberValue_1","nativeSrc":"16589:13:46","nodeType":"YulIdentifier","src":"16589:13:46"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"16504:57:46","nodeType":"YulIdentifier","src":"16504:57:46"},"nativeSrc":"16504:99:46","nodeType":"YulFunctionCall","src":"16504:99:46"},"nativeSrc":"16504:99:46","nodeType":"YulExpressionStatement","src":"16504:99:46"},{"nativeSrc":"16612:96:46","nodeType":"YulVariableDeclaration","src":"16612:96:46","value":{"arguments":[{"name":"value","nativeSrc":"16685:5:46","nodeType":"YulIdentifier","src":"16685:5:46"},{"arguments":[{"name":"value","nativeSrc":"16696:5:46","nodeType":"YulIdentifier","src":"16696:5:46"},{"kind":"number","nativeSrc":"16703:3:46","nodeType":"YulLiteral","src":"16703:3:46","type":"","value":"192"}],"functionName":{"name":"add","nativeSrc":"16692:3:46","nodeType":"YulIdentifier","src":"16692:3:46"},"nativeSrc":"16692:15:46","nodeType":"YulFunctionCall","src":"16692:15:46"}],"functionName":{"name":"access_calldata_tail_string_calldata","nativeSrc":"16648:36:46","nodeType":"YulIdentifier","src":"16648:36:46"},"nativeSrc":"16648:60:46","nodeType":"YulFunctionCall","src":"16648:60:46"},"variables":[{"name":"memberValue_2","nativeSrc":"16616:13:46","nodeType":"YulTypedName","src":"16616:13:46","type":""},{"name":"memberValue_3","nativeSrc":"16631:13:46","nodeType":"YulTypedName","src":"16631:13:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"slot","nativeSrc":"16779:4:46","nodeType":"YulIdentifier","src":"16779:4:46"},{"kind":"number","nativeSrc":"16785:1:46","nodeType":"YulLiteral","src":"16785:1:46","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"16775:3:46","nodeType":"YulIdentifier","src":"16775:3:46"},"nativeSrc":"16775:12:46","nodeType":"YulFunctionCall","src":"16775:12:46"},{"name":"memberValue_2","nativeSrc":"16789:13:46","nodeType":"YulIdentifier","src":"16789:13:46"},{"name":"memberValue_3","nativeSrc":"16804:13:46","nodeType":"YulIdentifier","src":"16804:13:46"}],"functionName":{"name":"copy_byte_array_to_storage_from_string_calldata_to_string","nativeSrc":"16717:57:46","nodeType":"YulIdentifier","src":"16717:57:46"},"nativeSrc":"16717:101:46","nodeType":"YulFunctionCall","src":"16717:101:46"},"nativeSrc":"16717:101:46","nodeType":"YulExpressionStatement","src":"16717:101:46"}]},"name":"update_storage_value_offset_0t_struct$_MetaData_$4901_calldata_ptr_to_t_struct$_MetaData_$4901_storage","nativeSrc":"15445:1379:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"slot","nativeSrc":"15557:4:46","nodeType":"YulTypedName","src":"15557:4:46","type":""},{"name":"value","nativeSrc":"15563:5:46","nodeType":"YulTypedName","src":"15563:5:46","type":""}],"src":"15445:1379:46"},{"body":{"nativeSrc":"17042:531:46","nodeType":"YulBlock","src":"17042:531:46","statements":[{"nativeSrc":"17052:52:46","nodeType":"YulVariableDeclaration","src":"17052:52:46","value":{"kind":"number","nativeSrc":"17062:42:46","nodeType":"YulLiteral","src":"17062:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17056:2:46","nodeType":"YulTypedName","src":"17056:2:46","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17120:9:46","nodeType":"YulIdentifier","src":"17120:9:46"},{"arguments":[{"name":"value0","nativeSrc":"17135:6:46","nodeType":"YulIdentifier","src":"17135:6:46"},{"name":"_1","nativeSrc":"17143:2:46","nodeType":"YulIdentifier","src":"17143:2:46"}],"functionName":{"name":"and","nativeSrc":"17131:3:46","nodeType":"YulIdentifier","src":"17131:3:46"},"nativeSrc":"17131:15:46","nodeType":"YulFunctionCall","src":"17131:15:46"}],"functionName":{"name":"mstore","nativeSrc":"17113:6:46","nodeType":"YulIdentifier","src":"17113:6:46"},"nativeSrc":"17113:34:46","nodeType":"YulFunctionCall","src":"17113:34:46"},"nativeSrc":"17113:34:46","nodeType":"YulExpressionStatement","src":"17113:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17167:9:46","nodeType":"YulIdentifier","src":"17167:9:46"},{"kind":"number","nativeSrc":"17178:2:46","nodeType":"YulLiteral","src":"17178:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17163:3:46","nodeType":"YulIdentifier","src":"17163:3:46"},"nativeSrc":"17163:18:46","nodeType":"YulFunctionCall","src":"17163:18:46"},{"arguments":[{"name":"value1","nativeSrc":"17187:6:46","nodeType":"YulIdentifier","src":"17187:6:46"},{"name":"_1","nativeSrc":"17195:2:46","nodeType":"YulIdentifier","src":"17195:2:46"}],"functionName":{"name":"and","nativeSrc":"17183:3:46","nodeType":"YulIdentifier","src":"17183:3:46"},"nativeSrc":"17183:15:46","nodeType":"YulFunctionCall","src":"17183:15:46"}],"functionName":{"name":"mstore","nativeSrc":"17156:6:46","nodeType":"YulIdentifier","src":"17156:6:46"},"nativeSrc":"17156:43:46","nodeType":"YulFunctionCall","src":"17156:43:46"},"nativeSrc":"17156:43:46","nodeType":"YulExpressionStatement","src":"17156:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17219:9:46","nodeType":"YulIdentifier","src":"17219:9:46"},{"kind":"number","nativeSrc":"17230:2:46","nodeType":"YulLiteral","src":"17230:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17215:3:46","nodeType":"YulIdentifier","src":"17215:3:46"},"nativeSrc":"17215:18:46","nodeType":"YulFunctionCall","src":"17215:18:46"},{"name":"value2","nativeSrc":"17235:6:46","nodeType":"YulIdentifier","src":"17235:6:46"}],"functionName":{"name":"mstore","nativeSrc":"17208:6:46","nodeType":"YulIdentifier","src":"17208:6:46"},"nativeSrc":"17208:34:46","nodeType":"YulFunctionCall","src":"17208:34:46"},"nativeSrc":"17208:34:46","nodeType":"YulExpressionStatement","src":"17208:34:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17262:9:46","nodeType":"YulIdentifier","src":"17262:9:46"},{"kind":"number","nativeSrc":"17273:2:46","nodeType":"YulLiteral","src":"17273:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17258:3:46","nodeType":"YulIdentifier","src":"17258:3:46"},"nativeSrc":"17258:18:46","nodeType":"YulFunctionCall","src":"17258:18:46"},{"kind":"number","nativeSrc":"17278:3:46","nodeType":"YulLiteral","src":"17278:3:46","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"17251:6:46","nodeType":"YulIdentifier","src":"17251:6:46"},"nativeSrc":"17251:31:46","nodeType":"YulFunctionCall","src":"17251:31:46"},"nativeSrc":"17251:31:46","nodeType":"YulExpressionStatement","src":"17251:31:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17302:9:46","nodeType":"YulIdentifier","src":"17302:9:46"},{"kind":"number","nativeSrc":"17313:3:46","nodeType":"YulLiteral","src":"17313:3:46","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17298:3:46","nodeType":"YulIdentifier","src":"17298:3:46"},"nativeSrc":"17298:19:46","nodeType":"YulFunctionCall","src":"17298:19:46"},{"name":"value4","nativeSrc":"17319:6:46","nodeType":"YulIdentifier","src":"17319:6:46"}],"functionName":{"name":"mstore","nativeSrc":"17291:6:46","nodeType":"YulIdentifier","src":"17291:6:46"},"nativeSrc":"17291:35:46","nodeType":"YulFunctionCall","src":"17291:35:46"},"nativeSrc":"17291:35:46","nodeType":"YulExpressionStatement","src":"17291:35:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17352:9:46","nodeType":"YulIdentifier","src":"17352:9:46"},{"kind":"number","nativeSrc":"17363:3:46","nodeType":"YulLiteral","src":"17363:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17348:3:46","nodeType":"YulIdentifier","src":"17348:3:46"},"nativeSrc":"17348:19:46","nodeType":"YulFunctionCall","src":"17348:19:46"},{"name":"value3","nativeSrc":"17369:6:46","nodeType":"YulIdentifier","src":"17369:6:46"},{"name":"value4","nativeSrc":"17377:6:46","nodeType":"YulIdentifier","src":"17377:6:46"}],"functionName":{"name":"calldatacopy","nativeSrc":"17335:12:46","nodeType":"YulIdentifier","src":"17335:12:46"},"nativeSrc":"17335:49:46","nodeType":"YulFunctionCall","src":"17335:49:46"},"nativeSrc":"17335:49:46","nodeType":"YulExpressionStatement","src":"17335:49:46"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17408:9:46","nodeType":"YulIdentifier","src":"17408:9:46"},{"name":"value4","nativeSrc":"17419:6:46","nodeType":"YulIdentifier","src":"17419:6:46"}],"functionName":{"name":"add","nativeSrc":"17404:3:46","nodeType":"YulIdentifier","src":"17404:3:46"},"nativeSrc":"17404:22:46","nodeType":"YulFunctionCall","src":"17404:22:46"},{"kind":"number","nativeSrc":"17428:3:46","nodeType":"YulLiteral","src":"17428:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17400:3:46","nodeType":"YulIdentifier","src":"17400:3:46"},"nativeSrc":"17400:32:46","nodeType":"YulFunctionCall","src":"17400:32:46"},{"kind":"number","nativeSrc":"17434:1:46","nodeType":"YulLiteral","src":"17434:1:46","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"17393:6:46","nodeType":"YulIdentifier","src":"17393:6:46"},"nativeSrc":"17393:43:46","nodeType":"YulFunctionCall","src":"17393:43:46"},"nativeSrc":"17393:43:46","nodeType":"YulExpressionStatement","src":"17393:43:46"},{"nativeSrc":"17445:122:46","nodeType":"YulAssignment","src":"17445:122:46","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17461:9:46","nodeType":"YulIdentifier","src":"17461:9:46"},{"arguments":[{"arguments":[{"name":"value4","nativeSrc":"17480:6:46","nodeType":"YulIdentifier","src":"17480:6:46"},{"kind":"number","nativeSrc":"17488:2:46","nodeType":"YulLiteral","src":"17488:2:46","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"17476:3:46","nodeType":"YulIdentifier","src":"17476:3:46"},"nativeSrc":"17476:15:46","nodeType":"YulFunctionCall","src":"17476:15:46"},{"kind":"number","nativeSrc":"17493:66:46","nodeType":"YulLiteral","src":"17493:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"17472:3:46","nodeType":"YulIdentifier","src":"17472:3:46"},"nativeSrc":"17472:88:46","nodeType":"YulFunctionCall","src":"17472:88:46"}],"functionName":{"name":"add","nativeSrc":"17457:3:46","nodeType":"YulIdentifier","src":"17457:3:46"},"nativeSrc":"17457:104:46","nodeType":"YulFunctionCall","src":"17457:104:46"},{"kind":"number","nativeSrc":"17563:3:46","nodeType":"YulLiteral","src":"17563:3:46","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17453:3:46","nodeType":"YulIdentifier","src":"17453:3:46"},"nativeSrc":"17453:114:46","nodeType":"YulFunctionCall","src":"17453:114:46"},"variableNames":[{"name":"tail","nativeSrc":"17445:4:46","nodeType":"YulIdentifier","src":"17445:4:46"}]}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"16829:744:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16979:9:46","nodeType":"YulTypedName","src":"16979:9:46","type":""},{"name":"value4","nativeSrc":"16990:6:46","nodeType":"YulTypedName","src":"16990:6:46","type":""},{"name":"value3","nativeSrc":"16998:6:46","nodeType":"YulTypedName","src":"16998:6:46","type":""},{"name":"value2","nativeSrc":"17006:6:46","nodeType":"YulTypedName","src":"17006:6:46","type":""},{"name":"value1","nativeSrc":"17014:6:46","nodeType":"YulTypedName","src":"17014:6:46","type":""},{"name":"value0","nativeSrc":"17022:6:46","nodeType":"YulTypedName","src":"17022:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17033:4:46","nodeType":"YulTypedName","src":"17033:4:46","type":""}],"src":"16829:744:46"},{"body":{"nativeSrc":"17627:233:46","nodeType":"YulBlock","src":"17627:233:46","statements":[{"nativeSrc":"17637:17:46","nodeType":"YulAssignment","src":"17637:17:46","value":{"arguments":[{"name":"x","nativeSrc":"17649:1:46","nodeType":"YulIdentifier","src":"17649:1:46"},{"name":"y","nativeSrc":"17652:1:46","nodeType":"YulIdentifier","src":"17652:1:46"}],"functionName":{"name":"sub","nativeSrc":"17645:3:46","nodeType":"YulIdentifier","src":"17645:3:46"},"nativeSrc":"17645:9:46","nodeType":"YulFunctionCall","src":"17645:9:46"},"variableNames":[{"name":"diff","nativeSrc":"17637:4:46","nodeType":"YulIdentifier","src":"17637:4:46"}]},{"body":{"nativeSrc":"17686:168:46","nodeType":"YulBlock","src":"17686:168:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17707:1:46","nodeType":"YulLiteral","src":"17707:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"17710:77:46","nodeType":"YulLiteral","src":"17710:77:46","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"17700:6:46","nodeType":"YulIdentifier","src":"17700:6:46"},"nativeSrc":"17700:88:46","nodeType":"YulFunctionCall","src":"17700:88:46"},"nativeSrc":"17700:88:46","nodeType":"YulExpressionStatement","src":"17700:88:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17808:1:46","nodeType":"YulLiteral","src":"17808:1:46","type":"","value":"4"},{"kind":"number","nativeSrc":"17811:4:46","nodeType":"YulLiteral","src":"17811:4:46","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"17801:6:46","nodeType":"YulIdentifier","src":"17801:6:46"},"nativeSrc":"17801:15:46","nodeType":"YulFunctionCall","src":"17801:15:46"},"nativeSrc":"17801:15:46","nodeType":"YulExpressionStatement","src":"17801:15:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"17836:1:46","nodeType":"YulLiteral","src":"17836:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"17839:4:46","nodeType":"YulLiteral","src":"17839:4:46","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"17829:6:46","nodeType":"YulIdentifier","src":"17829:6:46"},"nativeSrc":"17829:15:46","nodeType":"YulFunctionCall","src":"17829:15:46"},"nativeSrc":"17829:15:46","nodeType":"YulExpressionStatement","src":"17829:15:46"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"17669:4:46","nodeType":"YulIdentifier","src":"17669:4:46"},{"name":"x","nativeSrc":"17675:1:46","nodeType":"YulIdentifier","src":"17675:1:46"}],"functionName":{"name":"gt","nativeSrc":"17666:2:46","nodeType":"YulIdentifier","src":"17666:2:46"},"nativeSrc":"17666:11:46","nodeType":"YulFunctionCall","src":"17666:11:46"},"nativeSrc":"17663:191:46","nodeType":"YulIf","src":"17663:191:46"}]},"name":"checked_sub_t_uint256","nativeSrc":"17578:282:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"17609:1:46","nodeType":"YulTypedName","src":"17609:1:46","type":""},{"name":"y","nativeSrc":"17612:1:46","nodeType":"YulTypedName","src":"17612:1:46","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"17618:4:46","nodeType":"YulTypedName","src":"17618:4:46","type":""}],"src":"17578:282:46"},{"body":{"nativeSrc":"18022:241:46","nodeType":"YulBlock","src":"18022:241:46","statements":[{"nativeSrc":"18032:26:46","nodeType":"YulAssignment","src":"18032:26:46","value":{"arguments":[{"name":"headStart","nativeSrc":"18044:9:46","nodeType":"YulIdentifier","src":"18044:9:46"},{"kind":"number","nativeSrc":"18055:2:46","nodeType":"YulLiteral","src":"18055:2:46","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18040:3:46","nodeType":"YulIdentifier","src":"18040:3:46"},"nativeSrc":"18040:18:46","nodeType":"YulFunctionCall","src":"18040:18:46"},"variableNames":[{"name":"tail","nativeSrc":"18032:4:46","nodeType":"YulIdentifier","src":"18032:4:46"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18074:9:46","nodeType":"YulIdentifier","src":"18074:9:46"},{"name":"value0","nativeSrc":"18085:6:46","nodeType":"YulIdentifier","src":"18085:6:46"}],"functionName":{"name":"mstore","nativeSrc":"18067:6:46","nodeType":"YulIdentifier","src":"18067:6:46"},"nativeSrc":"18067:25:46","nodeType":"YulFunctionCall","src":"18067:25:46"},"nativeSrc":"18067:25:46","nodeType":"YulExpressionStatement","src":"18067:25:46"},{"nativeSrc":"18101:52:46","nodeType":"YulVariableDeclaration","src":"18101:52:46","value":{"kind":"number","nativeSrc":"18111:42:46","nodeType":"YulLiteral","src":"18111:42:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18105:2:46","nodeType":"YulTypedName","src":"18105:2:46","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18173:9:46","nodeType":"YulIdentifier","src":"18173:9:46"},{"kind":"number","nativeSrc":"18184:2:46","nodeType":"YulLiteral","src":"18184:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18169:3:46","nodeType":"YulIdentifier","src":"18169:3:46"},"nativeSrc":"18169:18:46","nodeType":"YulFunctionCall","src":"18169:18:46"},{"arguments":[{"name":"value1","nativeSrc":"18193:6:46","nodeType":"YulIdentifier","src":"18193:6:46"},{"name":"_1","nativeSrc":"18201:2:46","nodeType":"YulIdentifier","src":"18201:2:46"}],"functionName":{"name":"and","nativeSrc":"18189:3:46","nodeType":"YulIdentifier","src":"18189:3:46"},"nativeSrc":"18189:15:46","nodeType":"YulFunctionCall","src":"18189:15:46"}],"functionName":{"name":"mstore","nativeSrc":"18162:6:46","nodeType":"YulIdentifier","src":"18162:6:46"},"nativeSrc":"18162:43:46","nodeType":"YulFunctionCall","src":"18162:43:46"},"nativeSrc":"18162:43:46","nodeType":"YulExpressionStatement","src":"18162:43:46"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18225:9:46","nodeType":"YulIdentifier","src":"18225:9:46"},{"kind":"number","nativeSrc":"18236:2:46","nodeType":"YulLiteral","src":"18236:2:46","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18221:3:46","nodeType":"YulIdentifier","src":"18221:3:46"},"nativeSrc":"18221:18:46","nodeType":"YulFunctionCall","src":"18221:18:46"},{"arguments":[{"name":"value2","nativeSrc":"18245:6:46","nodeType":"YulIdentifier","src":"18245:6:46"},{"name":"_1","nativeSrc":"18253:2:46","nodeType":"YulIdentifier","src":"18253:2:46"}],"functionName":{"name":"and","nativeSrc":"18241:3:46","nodeType":"YulIdentifier","src":"18241:3:46"},"nativeSrc":"18241:15:46","nodeType":"YulFunctionCall","src":"18241:15:46"}],"functionName":{"name":"mstore","nativeSrc":"18214:6:46","nodeType":"YulIdentifier","src":"18214:6:46"},"nativeSrc":"18214:43:46","nodeType":"YulFunctionCall","src":"18214:43:46"},"nativeSrc":"18214:43:46","nodeType":"YulExpressionStatement","src":"18214:43:46"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"17865:398:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17975:9:46","nodeType":"YulTypedName","src":"17975:9:46","type":""},{"name":"value2","nativeSrc":"17986:6:46","nodeType":"YulTypedName","src":"17986:6:46","type":""},{"name":"value1","nativeSrc":"17994:6:46","nodeType":"YulTypedName","src":"17994:6:46","type":""},{"name":"value0","nativeSrc":"18002:6:46","nodeType":"YulTypedName","src":"18002:6:46","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18013:4:46","nodeType":"YulTypedName","src":"18013:4:46","type":""}],"src":"17865:398:46"},{"body":{"nativeSrc":"18359:865:46","nodeType":"YulBlock","src":"18359:865:46","statements":[{"body":{"nativeSrc":"18405:16:46","nodeType":"YulBlock","src":"18405:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18414:1:46","nodeType":"YulLiteral","src":"18414:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"18417:1:46","nodeType":"YulLiteral","src":"18417:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18407:6:46","nodeType":"YulIdentifier","src":"18407:6:46"},"nativeSrc":"18407:12:46","nodeType":"YulFunctionCall","src":"18407:12:46"},"nativeSrc":"18407:12:46","nodeType":"YulExpressionStatement","src":"18407:12:46"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"18380:7:46","nodeType":"YulIdentifier","src":"18380:7:46"},{"name":"headStart","nativeSrc":"18389:9:46","nodeType":"YulIdentifier","src":"18389:9:46"}],"functionName":{"name":"sub","nativeSrc":"18376:3:46","nodeType":"YulIdentifier","src":"18376:3:46"},"nativeSrc":"18376:23:46","nodeType":"YulFunctionCall","src":"18376:23:46"},{"kind":"number","nativeSrc":"18401:2:46","nodeType":"YulLiteral","src":"18401:2:46","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"18372:3:46","nodeType":"YulIdentifier","src":"18372:3:46"},"nativeSrc":"18372:32:46","nodeType":"YulFunctionCall","src":"18372:32:46"},"nativeSrc":"18369:52:46","nodeType":"YulIf","src":"18369:52:46"},{"nativeSrc":"18430:30:46","nodeType":"YulVariableDeclaration","src":"18430:30:46","value":{"arguments":[{"name":"headStart","nativeSrc":"18450:9:46","nodeType":"YulIdentifier","src":"18450:9:46"}],"functionName":{"name":"mload","nativeSrc":"18444:5:46","nodeType":"YulIdentifier","src":"18444:5:46"},"nativeSrc":"18444:16:46","nodeType":"YulFunctionCall","src":"18444:16:46"},"variables":[{"name":"offset","nativeSrc":"18434:6:46","nodeType":"YulTypedName","src":"18434:6:46","type":""}]},{"nativeSrc":"18469:28:46","nodeType":"YulVariableDeclaration","src":"18469:28:46","value":{"kind":"number","nativeSrc":"18479:18:46","nodeType":"YulLiteral","src":"18479:18:46","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18473:2:46","nodeType":"YulTypedName","src":"18473:2:46","type":""}]},{"body":{"nativeSrc":"18524:16:46","nodeType":"YulBlock","src":"18524:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18533:1:46","nodeType":"YulLiteral","src":"18533:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"18536:1:46","nodeType":"YulLiteral","src":"18536:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18526:6:46","nodeType":"YulIdentifier","src":"18526:6:46"},"nativeSrc":"18526:12:46","nodeType":"YulFunctionCall","src":"18526:12:46"},"nativeSrc":"18526:12:46","nodeType":"YulExpressionStatement","src":"18526:12:46"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"18512:6:46","nodeType":"YulIdentifier","src":"18512:6:46"},{"name":"_1","nativeSrc":"18520:2:46","nodeType":"YulIdentifier","src":"18520:2:46"}],"functionName":{"name":"gt","nativeSrc":"18509:2:46","nodeType":"YulIdentifier","src":"18509:2:46"},"nativeSrc":"18509:14:46","nodeType":"YulFunctionCall","src":"18509:14:46"},"nativeSrc":"18506:34:46","nodeType":"YulIf","src":"18506:34:46"},{"nativeSrc":"18549:32:46","nodeType":"YulVariableDeclaration","src":"18549:32:46","value":{"arguments":[{"name":"headStart","nativeSrc":"18563:9:46","nodeType":"YulIdentifier","src":"18563:9:46"},{"name":"offset","nativeSrc":"18574:6:46","nodeType":"YulIdentifier","src":"18574:6:46"}],"functionName":{"name":"add","nativeSrc":"18559:3:46","nodeType":"YulIdentifier","src":"18559:3:46"},"nativeSrc":"18559:22:46","nodeType":"YulFunctionCall","src":"18559:22:46"},"variables":[{"name":"_2","nativeSrc":"18553:2:46","nodeType":"YulTypedName","src":"18553:2:46","type":""}]},{"body":{"nativeSrc":"18629:16:46","nodeType":"YulBlock","src":"18629:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"18638:1:46","nodeType":"YulLiteral","src":"18638:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"18641:1:46","nodeType":"YulLiteral","src":"18641:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"18631:6:46","nodeType":"YulIdentifier","src":"18631:6:46"},"nativeSrc":"18631:12:46","nodeType":"YulFunctionCall","src":"18631:12:46"},"nativeSrc":"18631:12:46","nodeType":"YulExpressionStatement","src":"18631:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"18608:2:46","nodeType":"YulIdentifier","src":"18608:2:46"},{"kind":"number","nativeSrc":"18612:4:46","nodeType":"YulLiteral","src":"18612:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"18604:3:46","nodeType":"YulIdentifier","src":"18604:3:46"},"nativeSrc":"18604:13:46","nodeType":"YulFunctionCall","src":"18604:13:46"},{"name":"dataEnd","nativeSrc":"18619:7:46","nodeType":"YulIdentifier","src":"18619:7:46"}],"functionName":{"name":"slt","nativeSrc":"18600:3:46","nodeType":"YulIdentifier","src":"18600:3:46"},"nativeSrc":"18600:27:46","nodeType":"YulFunctionCall","src":"18600:27:46"}],"functionName":{"name":"iszero","nativeSrc":"18593:6:46","nodeType":"YulIdentifier","src":"18593:6:46"},"nativeSrc":"18593:35:46","nodeType":"YulFunctionCall","src":"18593:35:46"},"nativeSrc":"18590:55:46","nodeType":"YulIf","src":"18590:55:46"},{"nativeSrc":"18654:19:46","nodeType":"YulVariableDeclaration","src":"18654:19:46","value":{"arguments":[{"name":"_2","nativeSrc":"18670:2:46","nodeType":"YulIdentifier","src":"18670:2:46"}],"functionName":{"name":"mload","nativeSrc":"18664:5:46","nodeType":"YulIdentifier","src":"18664:5:46"},"nativeSrc":"18664:9:46","nodeType":"YulFunctionCall","src":"18664:9:46"},"variables":[{"name":"_3","nativeSrc":"18658:2:46","nodeType":"YulTypedName","src":"18658:2:46","type":""}]},{"body":{"nativeSrc":"18696:22:46","nodeType":"YulBlock","src":"18696:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"18698:16:46","nodeType":"YulIdentifier","src":"18698:16:46"},"nativeSrc":"18698:18:46","nodeType":"YulFunctionCall","src":"18698:18:46"},"nativeSrc":"18698:18:46","nodeType":"YulExpressionStatement","src":"18698:18:46"}]},"condition":{"arguments":[{"name":"_3","nativeSrc":"18688:2:46","nodeType":"YulIdentifier","src":"18688:2:46"},{"name":"_1","nativeSrc":"18692:2:46","nodeType":"YulIdentifier","src":"18692:2:46"}],"functionName":{"name":"gt","nativeSrc":"18685:2:46","nodeType":"YulIdentifier","src":"18685:2:46"},"nativeSrc":"18685:10:46","nodeType":"YulFunctionCall","src":"18685:10:46"},"nativeSrc":"18682:36:46","nodeType":"YulIf","src":"18682:36:46"},{"nativeSrc":"18727:76:46","nodeType":"YulVariableDeclaration","src":"18727:76:46","value":{"kind":"number","nativeSrc":"18737:66:46","nodeType":"YulLiteral","src":"18737:66:46","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"},"variables":[{"name":"_4","nativeSrc":"18731:2:46","nodeType":"YulTypedName","src":"18731:2:46","type":""}]},{"nativeSrc":"18812:23:46","nodeType":"YulVariableDeclaration","src":"18812:23:46","value":{"arguments":[{"kind":"number","nativeSrc":"18832:2:46","nodeType":"YulLiteral","src":"18832:2:46","type":"","value":"64"}],"functionName":{"name":"mload","nativeSrc":"18826:5:46","nodeType":"YulIdentifier","src":"18826:5:46"},"nativeSrc":"18826:9:46","nodeType":"YulFunctionCall","src":"18826:9:46"},"variables":[{"name":"memPtr","nativeSrc":"18816:6:46","nodeType":"YulTypedName","src":"18816:6:46","type":""}]},{"nativeSrc":"18844:71:46","nodeType":"YulVariableDeclaration","src":"18844:71:46","value":{"arguments":[{"name":"memPtr","nativeSrc":"18866:6:46","nodeType":"YulIdentifier","src":"18866:6:46"},{"arguments":[{"arguments":[{"arguments":[{"arguments":[{"name":"_3","nativeSrc":"18890:2:46","nodeType":"YulIdentifier","src":"18890:2:46"},{"kind":"number","nativeSrc":"18894:4:46","nodeType":"YulLiteral","src":"18894:4:46","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"18886:3:46","nodeType":"YulIdentifier","src":"18886:3:46"},"nativeSrc":"18886:13:46","nodeType":"YulFunctionCall","src":"18886:13:46"},{"name":"_4","nativeSrc":"18901:2:46","nodeType":"YulIdentifier","src":"18901:2:46"}],"functionName":{"name":"and","nativeSrc":"18882:3:46","nodeType":"YulIdentifier","src":"18882:3:46"},"nativeSrc":"18882:22:46","nodeType":"YulFunctionCall","src":"18882:22:46"},{"kind":"number","nativeSrc":"18906:2:46","nodeType":"YulLiteral","src":"18906:2:46","type":"","value":"63"}],"functionName":{"name":"add","nativeSrc":"18878:3:46","nodeType":"YulIdentifier","src":"18878:3:46"},"nativeSrc":"18878:31:46","nodeType":"YulFunctionCall","src":"18878:31:46"},{"name":"_4","nativeSrc":"18911:2:46","nodeType":"YulIdentifier","src":"18911:2:46"}],"functionName":{"name":"and","nativeSrc":"18874:3:46","nodeType":"YulIdentifier","src":"18874:3:46"},"nativeSrc":"18874:40:46","nodeType":"YulFunctionCall","src":"18874:40:46"}],"functionName":{"name":"add","nativeSrc":"18862:3:46","nodeType":"YulIdentifier","src":"18862:3:46"},"nativeSrc":"18862:53:46","nodeType":"YulFunctionCall","src":"18862:53:46"},"variables":[{"name":"newFreePtr","nativeSrc":"18848:10:46","nodeType":"YulTypedName","src":"18848:10:46","type":""}]},{"body":{"nativeSrc":"18974:22:46","nodeType":"YulBlock","src":"18974:22:46","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x41","nativeSrc":"18976:16:46","nodeType":"YulIdentifier","src":"18976:16:46"},"nativeSrc":"18976:18:46","nodeType":"YulFunctionCall","src":"18976:18:46"},"nativeSrc":"18976:18:46","nodeType":"YulExpressionStatement","src":"18976:18:46"}]},"condition":{"arguments":[{"arguments":[{"name":"newFreePtr","nativeSrc":"18933:10:46","nodeType":"YulIdentifier","src":"18933:10:46"},{"name":"_1","nativeSrc":"18945:2:46","nodeType":"YulIdentifier","src":"18945:2:46"}],"functionName":{"name":"gt","nativeSrc":"18930:2:46","nodeType":"YulIdentifier","src":"18930:2:46"},"nativeSrc":"18930:18:46","nodeType":"YulFunctionCall","src":"18930:18:46"},{"arguments":[{"name":"newFreePtr","nativeSrc":"18953:10:46","nodeType":"YulIdentifier","src":"18953:10:46"},{"name":"memPtr","nativeSrc":"18965:6:46","nodeType":"YulIdentifier","src":"18965:6:46"}],"functionName":{"name":"lt","nativeSrc":"18950:2:46","nodeType":"YulIdentifier","src":"18950:2:46"},"nativeSrc":"18950:22:46","nodeType":"YulFunctionCall","src":"18950:22:46"}],"functionName":{"name":"or","nativeSrc":"18927:2:46","nodeType":"YulIdentifier","src":"18927:2:46"},"nativeSrc":"18927:46:46","nodeType":"YulFunctionCall","src":"18927:46:46"},"nativeSrc":"18924:72:46","nodeType":"YulIf","src":"18924:72:46"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"19012:2:46","nodeType":"YulLiteral","src":"19012:2:46","type":"","value":"64"},{"name":"newFreePtr","nativeSrc":"19016:10:46","nodeType":"YulIdentifier","src":"19016:10:46"}],"functionName":{"name":"mstore","nativeSrc":"19005:6:46","nodeType":"YulIdentifier","src":"19005:6:46"},"nativeSrc":"19005:22:46","nodeType":"YulFunctionCall","src":"19005:22:46"},"nativeSrc":"19005:22:46","nodeType":"YulExpressionStatement","src":"19005:22:46"},{"expression":{"arguments":[{"name":"memPtr","nativeSrc":"19043:6:46","nodeType":"YulIdentifier","src":"19043:6:46"},{"name":"_3","nativeSrc":"19051:2:46","nodeType":"YulIdentifier","src":"19051:2:46"}],"functionName":{"name":"mstore","nativeSrc":"19036:6:46","nodeType":"YulIdentifier","src":"19036:6:46"},"nativeSrc":"19036:18:46","nodeType":"YulFunctionCall","src":"19036:18:46"},"nativeSrc":"19036:18:46","nodeType":"YulExpressionStatement","src":"19036:18:46"},{"body":{"nativeSrc":"19100:16:46","nodeType":"YulBlock","src":"19100:16:46","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"19109:1:46","nodeType":"YulLiteral","src":"19109:1:46","type":"","value":"0"},{"kind":"number","nativeSrc":"19112:1:46","nodeType":"YulLiteral","src":"19112:1:46","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"19102:6:46","nodeType":"YulIdentifier","src":"19102:6:46"},"nativeSrc":"19102:12:46","nodeType":"YulFunctionCall","src":"19102:12:46"},"nativeSrc":"19102:12:46","nodeType":"YulExpressionStatement","src":"19102:12:46"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"19077:2:46","nodeType":"YulIdentifier","src":"19077:2:46"},{"name":"_3","nativeSrc":"19081:2:46","nodeType":"YulIdentifier","src":"19081:2:46"}],"functionName":{"name":"add","nativeSrc":"19073:3:46","nodeType":"YulIdentifier","src":"19073:3:46"},"nativeSrc":"19073:11:46","nodeType":"YulFunctionCall","src":"19073:11:46"},{"kind":"number","nativeSrc":"19086:2:46","nodeType":"YulLiteral","src":"19086:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19069:3:46","nodeType":"YulIdentifier","src":"19069:3:46"},"nativeSrc":"19069:20:46","nodeType":"YulFunctionCall","src":"19069:20:46"},{"name":"dataEnd","nativeSrc":"19091:7:46","nodeType":"YulIdentifier","src":"19091:7:46"}],"functionName":{"name":"gt","nativeSrc":"19066:2:46","nodeType":"YulIdentifier","src":"19066:2:46"},"nativeSrc":"19066:33:46","nodeType":"YulFunctionCall","src":"19066:33:46"},"nativeSrc":"19063:53:46","nodeType":"YulIf","src":"19063:53:46"},{"expression":{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"19164:2:46","nodeType":"YulIdentifier","src":"19164:2:46"},{"kind":"number","nativeSrc":"19168:2:46","nodeType":"YulLiteral","src":"19168:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19160:3:46","nodeType":"YulIdentifier","src":"19160:3:46"},"nativeSrc":"19160:11:46","nodeType":"YulFunctionCall","src":"19160:11:46"},{"arguments":[{"name":"memPtr","nativeSrc":"19177:6:46","nodeType":"YulIdentifier","src":"19177:6:46"},{"kind":"number","nativeSrc":"19185:2:46","nodeType":"YulLiteral","src":"19185:2:46","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19173:3:46","nodeType":"YulIdentifier","src":"19173:3:46"},"nativeSrc":"19173:15:46","nodeType":"YulFunctionCall","src":"19173:15:46"},{"name":"_3","nativeSrc":"19190:2:46","nodeType":"YulIdentifier","src":"19190:2:46"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"19125:34:46","nodeType":"YulIdentifier","src":"19125:34:46"},"nativeSrc":"19125:68:46","nodeType":"YulFunctionCall","src":"19125:68:46"},"nativeSrc":"19125:68:46","nodeType":"YulExpressionStatement","src":"19125:68:46"},{"nativeSrc":"19202:16:46","nodeType":"YulAssignment","src":"19202:16:46","value":{"name":"memPtr","nativeSrc":"19212:6:46","nodeType":"YulIdentifier","src":"19212:6:46"},"variableNames":[{"name":"value0","nativeSrc":"19202:6:46","nodeType":"YulIdentifier","src":"19202:6:46"}]}]},"name":"abi_decode_tuple_t_string_memory_ptr_fromMemory","nativeSrc":"18268:956:46","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18325:9:46","nodeType":"YulTypedName","src":"18325:9:46","type":""},{"name":"dataEnd","nativeSrc":"18336:7:46","nodeType":"YulTypedName","src":"18336:7:46","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"18348:6:46","nodeType":"YulTypedName","src":"18348:6:46","type":""}],"src":"18268:956:46"}]},"contents":"{\n    { }\n    function validator_revert_bytes4(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_string(value, pos) -> end\n    {\n        let length := mload(value)\n        mstore(pos, length)\n        copy_memory_to_memory_with_cleanup(add(value, 0x20), add(pos, 0x20), length)\n        end := add(add(pos, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 0x20)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        tail := abi_encode_string(value0, add(headStart, 32))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__to_t_uint16_t_uint16_t_uint64_t_uint64_t_uint64_t_string_memory_ptr_t_string_memory_ptr__fromStack_reversed(headStart, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        let _2 := 0xffffffffffffffff\n        mstore(add(headStart, 64), and(value2, _2))\n        mstore(add(headStart, 96), and(value3, _2))\n        mstore(add(headStart, 128), and(value4, _2))\n        mstore(add(headStart, 160), 224)\n        let tail_1 := abi_encode_string(value5, add(headStart, 224))\n        mstore(add(headStart, 192), sub(tail_1, headStart))\n        tail := abi_encode_string(value6, tail_1)\n    }\n    function abi_decode_tuple_t_addresst_uint256t_struct$_MetaData_$4901_calldata_ptr(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let _1 := add(headStart, offset)\n        if slt(sub(dataEnd, _1), 224) { revert(0, 0) }\n        value2 := _1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IRevocationRegistry_$4884(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_contract$_ITokenMetadataResolver_$3312__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_bool(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_bool(value_1)\n        value1 := value_1\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_addresst_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n    }\n    function extract_byte_array_length(data) -> length\n    {\n        length := shr(1, data)\n        let outOfPlaceEncoding := and(data, 1)\n        if iszero(outOfPlaceEncoding) { length := and(length, 0x7f) }\n        if eq(outOfPlaceEncoding, lt(length, 32))\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x22)\n            revert(0, 0x24)\n        }\n    }\n    function array_dataslot_string_storage(ptr) -> data\n    {\n        mstore(0, ptr)\n        data := keccak256(0, 0x20)\n    }\n    function abi_encode_tuple_packed_t_string_storage__to_t_string_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let ret := 0\n        let slotValue := sload(value0)\n        let length := extract_byte_array_length(slotValue)\n        let _1 := 1\n        switch and(slotValue, 1)\n        case 0 {\n            mstore(pos, and(slotValue, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00))\n            ret := add(pos, mul(length, iszero(iszero(length))))\n        }\n        case 1 {\n            mstore(0, value0)\n            let _2 := 0x20\n            let dataPos := keccak256(0, 0x20)\n            let i := 0\n            for { } lt(i, length) { i := add(i, _2) }\n            {\n                mstore(add(pos, i), sload(dataPos))\n                dataPos := add(dataPos, _1)\n            }\n            ret := add(pos, length)\n        }\n        end := ret\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), 0)\n        tail := add(headStart, 160)\n    }\n    function abi_decode_tuple_t_bytes4_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bytes4(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256__to_t_bytes32_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function read_from_calldatat_uint16(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function read_from_calldatat_uint64(ptr) -> returnValue\n    {\n        let value := calldataload(ptr)\n        if iszero(eq(value, and(value, 0xffffffffffffffff))) { revert(0, 0) }\n        returnValue := value\n    }\n    function update_storage_value_offsett_uint64_to_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff), and(shl(96, value), 0xffffffffffffffff000000000000000000000000)))\n    }\n    function update_storage_value_offsett_uint64_to_t_uint64(slot, value)\n    {\n        let _1 := sload(slot)\n        sstore(slot, or(and(_1, 0xffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff), and(shl(160, value), 0xffffffffffffffff0000000000000000000000000000000000000000)))\n    }\n    function access_calldata_tail_string_calldata(base_ref, ptr_to_tail) -> addr, length\n    {\n        let rel_offset_of_tail := calldataload(ptr_to_tail)\n        if iszero(slt(rel_offset_of_tail, add(sub(calldatasize(), base_ref), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1))) { revert(0, 0) }\n        let addr_1 := add(base_ref, rel_offset_of_tail)\n        length := calldataload(addr_1)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        addr := add(addr_1, 0x20)\n        if sgt(addr, sub(calldatasize(), length)) { revert(0, 0) }\n    }\n    function panic_error_0x41()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x41)\n        revert(0, 0x24)\n    }\n    function clean_up_bytearray_end_slots_string_storage(array, len, startIndex)\n    {\n        if gt(len, 31)\n        {\n            let _1 := 0\n            mstore(0, array)\n            let data := keccak256(0, 0x20)\n            let deleteStart := add(data, shr(5, add(startIndex, 31)))\n            if lt(startIndex, 0x20) { deleteStart := data }\n            let _2 := add(data, shr(5, add(len, 31)))\n            let start := deleteStart\n            for { } lt(start, _2) { start := add(start, 1) }\n            { sstore(start, _1) }\n        }\n    }\n    function extract_used_part_and_set_length_of_short_byte_array(data, len) -> used\n    {\n        used := or(and(data, not(shr(shl(3, len), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))), shl(1, len))\n    }\n    function copy_byte_array_to_storage_from_string_calldata_to_string(slot, src, len)\n    {\n        if gt(len, 0xffffffffffffffff) { panic_error_0x41() }\n        clean_up_bytearray_end_slots_string_storage(slot, extract_byte_array_length(sload(slot)), len)\n        let srcOffset := 0\n        switch gt(len, 31)\n        case 1 {\n            let loopEnd := and(len, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)\n            let dstPtr := array_dataslot_string_storage(slot)\n            let i := srcOffset\n            for { } lt(i, loopEnd) { i := add(i, 0x20) }\n            {\n                sstore(dstPtr, calldataload(add(src, srcOffset)))\n                dstPtr := add(dstPtr, 1)\n                srcOffset := add(srcOffset, 0x20)\n            }\n            if lt(loopEnd, len)\n            {\n                sstore(dstPtr, and(calldataload(add(src, srcOffset)), not(shr(and(shl(3, len), 248), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff))))\n            }\n            sstore(slot, add(shl(1, len), 1))\n        }\n        default {\n            let value := 0\n            if len\n            {\n                value := calldataload(add(src, srcOffset))\n            }\n            sstore(slot, extract_used_part_and_set_length_of_short_byte_array(value, len))\n        }\n    }\n    function update_storage_value_offset_0t_struct$_MetaData_$4901_calldata_ptr_to_t_struct$_MetaData_$4901_storage(slot, value)\n    {\n        let _1 := and(read_from_calldatat_uint16(value), 0xffff)\n        let _2 := sload(slot)\n        sstore(slot, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000), _1))\n        let _3 := and(shl(16, read_from_calldatat_uint16(add(value, 32))), 0xffff0000)\n        sstore(slot, or(or(and(_2, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000), _1), _3))\n        sstore(slot, or(or(_3, or(and(_2, 0xffffffffffffffffffffffffffffffffffffffff000000000000000000000000), _1)), and(shl(32, read_from_calldatat_uint64(add(value, 64))), 0xffffffffffffffff00000000)))\n        update_storage_value_offsett_uint64_to_uint64(slot, read_from_calldatat_uint64(add(value, 96)))\n        update_storage_value_offsett_uint64_to_t_uint64(slot, read_from_calldatat_uint64(add(value, 128)))\n        let memberValue, memberValue_1 := access_calldata_tail_string_calldata(value, add(value, 160))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 1), memberValue, memberValue_1)\n        let memberValue_2, memberValue_3 := access_calldata_tail_string_calldata(value, add(value, 192))\n        copy_byte_array_to_storage_from_string_calldata_to_string(add(slot, 2), memberValue_2, memberValue_3)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_bytes_calldata_ptr__to_t_address_t_address_t_uint256_t_bytes_memory_ptr__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), 128)\n        mstore(add(headStart, 128), value4)\n        calldatacopy(add(headStart, 160), value3, value4)\n        mstore(add(add(headStart, value4), 160), 0)\n        tail := add(add(headStart, and(add(value4, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 160)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_decode_tuple_t_string_memory_ptr_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let offset := mload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let _3 := mload(_2)\n        if gt(_3, _1) { panic_error_0x41() }\n        let _4 := 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0\n        let memPtr := mload(64)\n        let newFreePtr := add(memPtr, and(add(and(add(_3, 0x1f), _4), 63), _4))\n        if or(gt(newFreePtr, _1), lt(newFreePtr, memPtr)) { panic_error_0x41() }\n        mstore(64, newFreePtr)\n        mstore(memPtr, _3)\n        if gt(add(add(_2, _3), 32), dataEnd) { revert(0, 0) }\n        copy_memory_to_memory_with_cleanup(add(_2, 32), add(memPtr, 32), _3)\n        value0 := memPtr\n    }\n}","id":46,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"4204":[{"length":32,"start":1435},{"length":32,"start":2686}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106101cf5760003560e01c806370a0823111610104578063a22cb465116100a2578063d547741f11610071578063d547741f14610424578063e985e9c514610437578063f2fde38b14610445578063f5b541a61461045857600080fd5b8063a22cb465146103c4578063b88d4fde146103d7578063c87b56dd146103ea578063d5391393146103fd57600080fd5b806391d14854116100de57806391d148541461038e57806395d89b41146103a157806395f94bc4146103a9578063a0c76f62146103bc57600080fd5b806370a08231146103525780638bb9c5bf146103735780638da5cb5b1461038657600080fd5b80633886d5121161017157806342966c681161014b57806342966c68146102f35780634bae2be81461030657806354c7be061461032c5780636352211e1461033f57600080fd5b80633886d5121461029757806342532616146102cd57806342842e0e146102e057600080fd5b8063095ea7b3116101ad578063095ea7b31461024957806319c02b271461025e57806323b872dd146102715780632f2ff15d1461028457600080fd5b806301ffc9a7146101d457806306fdde03146101fc578063081812fc14610211575b600080fd5b6101e76101e2366004611e15565b61047f565b60405190151581526020015b60405180910390f35b610204610499565b6040516101f39190611ea0565b61022461021f366004611eb3565b6104a8565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f3565b61025c610257366004611eee565b6104dc565b005b61025c61026c366004611eee565b61050e565b61025c61027f366004611f1a565b610777565b61025c610292366004611f5b565b6109c3565b6102246102a5366004611eb3565b60026020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61025c6102db366004611eb3565b6109f1565b61025c6102ee366004611f1a565b610c20565b61025c610301366004611eb3565b610d71565b610319610314366004611eb3565b610f6d565b6040516101f39796959493929190611f8b565b61025c61033a366004611ff2565b6110f4565b61022461034d366004611eb3565b611156565b610365610360366004612052565b611164565b6040519081526020016101f3565b61025c610381366004611eb3565b611178565b61022461118f565b6101e761039c366004611f5b565b6111b6565b610204611201565b61025c6103b7366004612052565b61120b565b61022461125e565b61025c6103d236600461207d565b611288565b61025c6103e53660046120ab565b6112ba565b6102046103f8366004611eb3565b6113f9565b6103657f6d696e746572000000000000000000000000000000000000000000000000000081565b61025c610432366004611f5b565b61141c565b6101e761021f36600461214a565b61025c610453366004612052565b61143f565b6103657f6f70657261746f7200000000000000000000000000000000000000000000000081565b60006104938261048d611453565b90611481565b92915050565b60606104a361155b565b905090565b60006040517f5211920d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8cd22d1900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526001602081815260408084209051610530939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905233602483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f9236a3990604401602060405180830381865afa1580156105f7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061061b919061225f565b610653576106537f6f70657261746f720000000000000000000000000000000000000000000000003361064c61156d565b919061159b565b600061066783610661611621565b9061164f565b90508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036106eb576040517f4c349c0000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff851660048201526024015b60405180910390fd5b60008381526002602090815260409182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff881690811790915591513381528592917f1617c30910ed9def77a5583fb42361192fa9e1a3ae60209c6281a276f88f9624910160405180910390a350505050565b600061078582610661611621565b905073ffffffffffffffffffffffffffffffffffffffff811633146107df576040517f14dbb536000000000000000000000000000000000000000000000000000000008152336004820152602481018390526044016106e2565b8073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141580610841575060008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff848116911614155b1561089f576040517fa4a3018b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808616600483015282166024820152604481018390526064016106e2565b8273ffffffffffffffffffffffffffffffffffffffff166108be611621565b600084815260209190915260409020556108d6611621565b73ffffffffffffffffffffffffffffffffffffffff821660009081526001919091016020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905561092d611621565b73ffffffffffffffffffffffffffffffffffffffff808516600081815260019384016020908152604080832080549096019095558682526002905283812080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690559251859391928516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a450505050565b336109d6816109d06116b8565b906116e6565b6109ec8383836109e461156d565b929190611751565b505050565b60008181526001602081815260408084209051610a13939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101207ff9236a390000000000000000000000000000000000000000000000000000000082526004820181905233602483015291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063f9236a3990604401602060405180830381865afa158015610ada573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610afe919061225f565b610b2f57610b2f7f6f70657261746f720000000000000000000000000000000000000000000000003361064c61156d565b60008281526002602052604090205473ffffffffffffffffffffffffffffffffffffffff16610b8d576040517fd43553b5000000000000000000000000000000000000000000000000000000008152600481018390526024016106e2565b600082815260026020908152604091829020549151338152849273ffffffffffffffffffffffffffffffffffffffff16917f648e1fca65e8b59490cc7c26438ac6ed40ea5c54de21e85e2ef44a52b8f2ebab910160405180910390a350600090815260026020526040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610c2b838383610777565b73ffffffffffffffffffffffffffffffffffffffff82163b156109ec576040517f150b7a020000000000000000000000000000000000000000000000000000000080825233600483015273ffffffffffffffffffffffffffffffffffffffff858116602484015260448301849052608060648401526000608484015290919084169063150b7a029060a4016020604051808303816000875af1158015610cd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf9919061227c565b7fffffffff0000000000000000000000000000000000000000000000000000000016146109ec576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602481018290526044016106e2565b60008181526001602081815260408084209051610d93939190910191016121cb565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe00181529082905280516020909101206000547fa3a2656a000000000000000000000000000000000000000000000000000000008352600483018290526024830185905290925073ffffffffffffffffffffffffffffffffffffffff169063a3a2656a90604401602060405180830381865afa158015610e3e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e62919061225f565b15610f37576000610e7583610661611621565b90507fdead000000000000000000000000000000000000000000000000000000000000610ea0611621565b60008581526020919091526040902055610eb8611621565b73ffffffffffffffffffffffffffffffffffffffff82166000818152600192909201602052604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff01905551859291907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a4505050565b6040517feeddf6ab00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b60016020819052600091825260409091208054918101805461ffff808516946201000081049091169367ffffffffffffffff64010000000083048116946c0100000000000000000000000084048216947401000000000000000000000000000000000000000090940490911692610fe390612178565b80601f016020809104026020016040519081016040528092919081815260200182805461100f90612178565b801561105c5780601f106110315761010080835404028352916020019161105c565b820191906000526020600020905b81548152906001019060200180831161103f57829003601f168201915b50505050509080600201805461107190612178565b80601f016020809104026020016040519081016040528092919081815260200182805461109d90612178565b80156110ea5780601f106110bf576101008083540402835291602001916110ea565b820191906000526020600020905b8154815290600101906020018083116110cd57829003601f168201915b5050505050905087565b6111217f6d696e74657200000000000000000000000000000000000000000000000000003361064c61156d565b611135838361112e611621565b9190611828565b6000828152600160205260409020819061114f82826124cc565b5050505050565b600061049382610661611621565b600061049382611172611621565b90611942565b61118c338261118561156d565b91906119be565b50565b60006104a361119c6116b8565b5473ffffffffffffffffffffffffffffffffffffffff1690565b60006111fa83836111c561156d565b60009283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b60606104a3611a62565b611217336109d06116b8565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60006104a361126b611a74565b6002015473ffffffffffffffffffffffffffffffffffffffff1690565b6040517f5211920d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6112c5858585610777565b73ffffffffffffffffffffffffffffffffffffffff84163b1561114f576040517f150b7a02000000000000000000000000000000000000000000000000000000008082529073ffffffffffffffffffffffffffffffffffffffff86169063150b7a029061133e9033908a90899089908990600401612672565b6020604051808303816000875af115801561135d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611381919061227c565b7fffffffff00000000000000000000000000000000000000000000000000000000161461114f576040517fc215a7a100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff85166004820152602481018490526044016106e2565b606061140782610661611621565b506104933083611415611a74565b9190611aa2565b33611429816109d06116b8565b6109ec83838361143761156d565b929190611b62565b61118c338261144c6116b8565b9190611c2c565b60008061049360017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6126f1565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016114d157506000610493565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161152257506001610493565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60606104a3611568611a74565b611d40565b60008061049360017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236126f1565b60008281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166109ec576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff821660248201526044016106e2565b60008061049360017fddf3ee18ae6d688373c219468f8be446e7ae82215f4779d821c7ea5e8c13c0c16126f1565b60008181526020839052604081205473ffffffffffffffffffffffffffffffffffffffff81166116ae576040517fdd560475000000000000000000000000000000000000000000000000000000008152600481018490526024016106e2565b805b949350505050565b60008061049360017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6126f1565b815473ffffffffffffffffffffffffffffffffffffffff828116911614610f69576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff821660048201526024016106e2565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff166118225760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a15b50505050565b73ffffffffffffffffffffffffffffffffffffffff8216611875576040517f7851b9cd00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526020849052604090205473ffffffffffffffffffffffffffffffffffffffff16156118d4576040517f753eceac000000000000000000000000000000000000000000000000000000008152600481018290526024016106e2565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86169081905580845260018088019093528184208054909301909255518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a4505050565b600073ffffffffffffffffffffffffffffffffffffffff8216611991576040517faefbce4e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5073ffffffffffffffffffffffffffffffffffffffff166000908152600191909101602052604090205490565b6119c983828461159b565b60008181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b60606104a3611a6f611a74565b611dd6565b60008061049360017f7ea68fd2dcf1c056b94db6a0a537aa80d26fa9ab1eacd85da1ba0b61b7e7a8a56126f1565b60028301546040517ff724dad700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052606092169063f724dad790604401600060405180830381865afa158015611b1c573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526116b0919081019061272b565b60008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16156118225760008381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b90606001611819565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c99576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024016106e2565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146118225783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350505050565b6060816000018054611d5190612178565b80601f0160208091040260200160405190810160405280929190818152602001828054611d7d90612178565b8015611dca5780601f10611d9f57610100808354040283529160200191611dca565b820191906000526020600020905b815481529060010190602001808311611dad57829003601f168201915b50505050509050919050565b6060816001018054611d5190612178565b7fffffffff000000000000000000000000000000000000000000000000000000008116811461118c57600080fd5b600060208284031215611e2757600080fd5b81356111fa81611de7565b60005b83811015611e4d578181015183820152602001611e35565b50506000910152565b60008151808452611e6e816020860160208601611e32565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006111fa6020830184611e56565b600060208284031215611ec557600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff8116811461118c57600080fd5b60008060408385031215611f0157600080fd5b8235611f0c81611ecc565b946020939093013593505050565b600080600060608486031215611f2f57600080fd5b8335611f3a81611ecc565b92506020840135611f4a81611ecc565b929592945050506040919091013590565b60008060408385031215611f6e57600080fd5b823591506020830135611f8081611ecc565b809150509250929050565b61ffff88811682528716602082015267ffffffffffffffff868116604083015285811660608301528416608082015260e060a08201819052600090611fd290830185611e56565b82810360c0840152611fe48185611e56565b9a9950505050505050505050565b60008060006060848603121561200757600080fd5b833561201281611ecc565b925060208401359150604084013567ffffffffffffffff81111561203557600080fd5b840160e0818703121561204757600080fd5b809150509250925092565b60006020828403121561206457600080fd5b81356111fa81611ecc565b801515811461118c57600080fd5b6000806040838503121561209057600080fd5b823561209b81611ecc565b91506020830135611f808161206f565b6000806000806000608086880312156120c357600080fd5b85356120ce81611ecc565b945060208601356120de81611ecc565b935060408601359250606086013567ffffffffffffffff8082111561210257600080fd5b818801915088601f83011261211657600080fd5b81358181111561212557600080fd5b89602082850101111561213757600080fd5b9699959850939650602001949392505050565b6000806040838503121561215d57600080fd5b823561216881611ecc565b91506020830135611f8081611ecc565b600181811c9082168061218c57607f821691505b6020821081036121c5577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b60008083546121d981612178565b600182811680156121f1576001811461222457612253565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0084168752821515830287019450612253565b8760005260208060002060005b8581101561224a5781548a820152908401908201612231565b50505082870194505b50929695505050505050565b60006020828403121561227157600080fd5b81516111fa8161206f565b60006020828403121561228e57600080fd5b81516111fa81611de7565b6000813561ffff8116811461049357600080fd5b6000813567ffffffffffffffff8116811461049357600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126122fc57600080fd5b83018035915067ffffffffffffffff82111561231757600080fd5b60200191503681900382131561232c57600080fd5b9250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b601f8211156109ec576000816000526020600020601f850160051c8101602086101561238b5750805b601f850160051c820191505b818110156123aa57828155600101612397565b505050505050565b67ffffffffffffffff8311156123ca576123ca612333565b6123de836123d88354612178565b83612362565b6000601f84116001811461243057600085156123fa5750838201355b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600387901b1c1916600186901b17835561114f565b6000838152602090207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0861690835b8281101561247f578685013582556020948501946001909201910161245f565b50868210156124ba577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60f88860031b161c19848701351681555b505060018560011b0183555050505050565b61ffff6124d883612299565b168154817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000821617835563ffff000061251360208601612299565b60101b1680837fffffffffffffffffffffffffffffffffffffffffffffffffffffffff000000008416171784556bffffffffffffffff00000000612559604087016122ad565b60201b16837fffffffffffffffffffffffffffffffffffffffff00000000000000000000000084161782171784555050506125de612599606084016122ad565b82547fffffffffffffffffffffffff0000000000000000ffffffffffffffffffffffff1660609190911b73ffffffffffffffff00000000000000000000000016178255565b61263a6125ed608084016122ad565b82547fffffffff0000000000000000ffffffffffffffffffffffffffffffffffffffff1660a09190911b7bffffffffffffffff000000000000000000000000000000000000000016178255565b61264760a08301836122c7565b6126558183600186016123b2565b505061266460c08301836122c7565b6118228183600286016123b2565b600073ffffffffffffffffffffffffffffffffffffffff808816835280871660208401525084604083015260806060830152826080830152828460a0840137600060a0848401015260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011683010190509695505050505050565b81810381811115610493577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006020828403121561273d57600080fd5b815167ffffffffffffffff8082111561275557600080fd5b818401915084601f83011261276957600080fd5b81518181111561277b5761277b612333565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156127c1576127c1612333565b816040528281528760208487010111156127da57600080fd5b6127eb836020830160208801611e32565b97965050505050505056fea264697066735822122087a9f5cbaf4f8aae8726258c952e68064d610dd28c157f7c2acdd4767ecc5b8364736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1CF JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x70A08231 GT PUSH2 0x104 JUMPI DUP1 PUSH4 0xA22CB465 GT PUSH2 0xA2 JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x424 JUMPI DUP1 PUSH4 0xE985E9C5 EQ PUSH2 0x437 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x445 JUMPI DUP1 PUSH4 0xF5B541A6 EQ PUSH2 0x458 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xA22CB465 EQ PUSH2 0x3C4 JUMPI DUP1 PUSH4 0xB88D4FDE EQ PUSH2 0x3D7 JUMPI DUP1 PUSH4 0xC87B56DD EQ PUSH2 0x3EA JUMPI DUP1 PUSH4 0xD5391393 EQ PUSH2 0x3FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x91D14854 GT PUSH2 0xDE JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x38E JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x3A1 JUMPI DUP1 PUSH4 0x95F94BC4 EQ PUSH2 0x3A9 JUMPI DUP1 PUSH4 0xA0C76F62 EQ PUSH2 0x3BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x70A08231 EQ PUSH2 0x352 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x373 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x386 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3886D512 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x42966C68 GT PUSH2 0x14B JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x4BAE2BE8 EQ PUSH2 0x306 JUMPI DUP1 PUSH4 0x54C7BE06 EQ PUSH2 0x32C JUMPI DUP1 PUSH4 0x6352211E EQ PUSH2 0x33F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3886D512 EQ PUSH2 0x297 JUMPI DUP1 PUSH4 0x42532616 EQ PUSH2 0x2CD JUMPI DUP1 PUSH4 0x42842E0E EQ PUSH2 0x2E0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x95EA7B3 GT PUSH2 0x1AD JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x249 JUMPI DUP1 PUSH4 0x19C02B27 EQ PUSH2 0x25E JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x284 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D4 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1FC JUMPI DUP1 PUSH4 0x81812FC EQ PUSH2 0x211 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1E7 PUSH2 0x1E2 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E15 JUMP JUMPDEST PUSH2 0x47F JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x204 PUSH2 0x499 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP2 SWAP1 PUSH2 0x1EA0 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x4A8 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x257 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0x4DC JUMP JUMPDEST STOP JUMPDEST PUSH2 0x25C PUSH2 0x26C CALLDATASIZE PUSH1 0x4 PUSH2 0x1EEE JUMP JUMPDEST PUSH2 0x50E JUMP JUMPDEST PUSH2 0x25C PUSH2 0x27F CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0x777 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x292 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x9C3 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x2A5 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2DB CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x9F1 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x2EE CALLDATASIZE PUSH1 0x4 PUSH2 0x1F1A JUMP JUMPDEST PUSH2 0xC20 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0xD71 JUMP JUMPDEST PUSH2 0x319 PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0xF6D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1F3 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x1F8B JUMP JUMPDEST PUSH2 0x25C PUSH2 0x33A CALLDATASIZE PUSH1 0x4 PUSH2 0x1FF2 JUMP JUMPDEST PUSH2 0x10F4 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x34D CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x1156 JUMP JUMPDEST PUSH2 0x365 PUSH2 0x360 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x1164 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F3 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x381 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x1178 JUMP JUMPDEST PUSH2 0x224 PUSH2 0x118F JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x39C CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x11B6 JUMP JUMPDEST PUSH2 0x204 PUSH2 0x1201 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3B7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x120B JUMP JUMPDEST PUSH2 0x224 PUSH2 0x125E JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3D2 CALLDATASIZE PUSH1 0x4 PUSH2 0x207D JUMP JUMPDEST PUSH2 0x1288 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x3E5 CALLDATASIZE PUSH1 0x4 PUSH2 0x20AB JUMP JUMPDEST PUSH2 0x12BA JUMP JUMPDEST PUSH2 0x204 PUSH2 0x3F8 CALLDATASIZE PUSH1 0x4 PUSH2 0x1EB3 JUMP JUMPDEST PUSH2 0x13F9 JUMP JUMPDEST PUSH2 0x365 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x25C PUSH2 0x432 CALLDATASIZE PUSH1 0x4 PUSH2 0x1F5B JUMP JUMPDEST PUSH2 0x141C JUMP JUMPDEST PUSH2 0x1E7 PUSH2 0x21F CALLDATASIZE PUSH1 0x4 PUSH2 0x214A JUMP JUMPDEST PUSH2 0x25C PUSH2 0x453 CALLDATASIZE PUSH1 0x4 PUSH2 0x2052 JUMP JUMPDEST PUSH2 0x143F JUMP JUMPDEST PUSH2 0x365 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x48D PUSH2 0x1453 JUMP JUMPDEST SWAP1 PUSH2 0x1481 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x155B JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD PUSH32 0x5211920D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x8CD22D1900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0x530 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE SWAP2 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5F7 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x61B SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH2 0x653 JUMPI PUSH2 0x653 PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x159B JUMP JUMPDEST PUSH1 0x0 PUSH2 0x667 DUP4 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 PUSH2 0x164F JUMP JUMPDEST SWAP1 POP DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0x6EB JUMPI PUSH1 0x40 MLOAD PUSH32 0x4C349C0000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP9 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD CALLER DUP2 MSTORE DUP6 SWAP3 SWAP2 PUSH32 0x1617C30910ED9DEF77A5583FB42361192FA9E1A3AE60209C6281A276F88F9624 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x785 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND CALLER EQ PUSH2 0x7DF JUMPI PUSH1 0x40 MLOAD PUSH32 0x14DBB53600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP5 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ ISZERO DUP1 PUSH2 0x841 JUMPI POP PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND SWAP2 AND EQ ISZERO JUMPDEST ISZERO PUSH2 0x89F JUMPI PUSH1 0x40 MLOAD PUSH32 0xA4A3018B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP7 AND PUSH1 0x4 DUP4 ADD MSTORE DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x8BE PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 DUP5 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x8D6 PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE PUSH2 0x92D PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP4 DUP5 ADD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD SWAP1 SWAP7 ADD SWAP1 SWAP6 SSTORE DUP7 DUP3 MSTORE PUSH1 0x2 SWAP1 MSTORE DUP4 DUP2 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE SWAP3 MLOAD DUP6 SWAP4 SWAP2 SWAP3 DUP6 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 LOG4 POP POP POP POP JUMP JUMPDEST CALLER PUSH2 0x9D6 DUP2 PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST SWAP1 PUSH2 0x16E6 JUMP JUMPDEST PUSH2 0x9EC DUP4 DUP4 DUP4 PUSH2 0x9E4 PUSH2 0x156D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1751 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0xA13 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE SWAP2 POP PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xADA JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xAFE SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST PUSH2 0xB2F JUMPI PUSH2 0xB2F PUSH32 0x6F70657261746F72000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0xB8D JUMPI PUSH1 0x40 MLOAD PUSH32 0xD43553B500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SLOAD SWAP2 MLOAD CALLER DUP2 MSTORE DUP5 SWAP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 PUSH32 0x648E1FCA65E8B59490CC7C26438AC6ED40EA5C54DE21E85E2EF44A52B8F2EBAB SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH2 0xC2B DUP4 DUP4 DUP4 PUSH2 0x777 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND EXTCODESIZE ISZERO PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE CALLER PUSH1 0x4 DUP4 ADD MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x24 DUP5 ADD MSTORE PUSH1 0x44 DUP4 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 PUSH1 0x64 DUP5 ADD MSTORE PUSH1 0x0 PUSH1 0x84 DUP5 ADD MSTORE SWAP1 SWAP2 SWAP1 DUP5 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH1 0xA4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0xCD5 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCF9 SWAP2 SWAP1 PUSH2 0x227C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 MLOAD PUSH2 0xD93 SWAP4 SWAP2 SWAP1 SWAP2 ADD SWAP2 ADD PUSH2 0x21CB JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD DUP1 DUP4 SUB PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD DUP2 MSTORE SWAP1 DUP3 SWAP1 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP1 SWAP2 ADD KECCAK256 PUSH1 0x0 SLOAD PUSH32 0xA3A2656A00000000000000000000000000000000000000000000000000000000 DUP4 MSTORE PUSH1 0x4 DUP4 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 DUP4 ADD DUP6 SWAP1 MSTORE SWAP1 SWAP3 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH4 0xA3A2656A SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE3E JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE62 SWAP2 SWAP1 PUSH2 0x225F JUMP JUMPDEST ISZERO PUSH2 0xF37 JUMPI PUSH1 0x0 PUSH2 0xE75 DUP4 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST SWAP1 POP PUSH32 0xDEAD000000000000000000000000000000000000000000000000000000000000 PUSH2 0xEA0 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 DUP6 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0xEB8 PUSH2 0x1621 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF ADD SWAP1 SSTORE MLOAD DUP6 SWAP3 SWAP2 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP4 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xEEDDF6AB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD DUP1 SLOAD PUSH2 0xFFFF DUP1 DUP6 AND SWAP5 PUSH3 0x10000 DUP2 DIV SWAP1 SWAP2 AND SWAP4 PUSH8 0xFFFFFFFFFFFFFFFF PUSH5 0x100000000 DUP4 DIV DUP2 AND SWAP5 PUSH13 0x1000000000000000000000000 DUP5 DIV DUP3 AND SWAP5 PUSH21 0x10000000000000000000000000000000000000000 SWAP1 SWAP5 DIV SWAP1 SWAP2 AND SWAP3 PUSH2 0xFE3 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x100F SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x105C JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1031 JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x105C JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x103F JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 DUP1 PUSH1 0x2 ADD DUP1 SLOAD PUSH2 0x1071 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x109D SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x10EA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x10BF JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x10EA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x10CD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP DUP8 JUMP JUMPDEST PUSH2 0x1121 PUSH32 0x6D696E7465720000000000000000000000000000000000000000000000000000 CALLER PUSH2 0x64C PUSH2 0x156D JUMP JUMPDEST PUSH2 0x1135 DUP4 DUP4 PUSH2 0x112E PUSH2 0x1621 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1828 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP2 SWAP1 PUSH2 0x114F DUP3 DUP3 PUSH2 0x24CC JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x493 DUP3 PUSH2 0x1172 PUSH2 0x1621 JUMP JUMPDEST SWAP1 PUSH2 0x1942 JUMP JUMPDEST PUSH2 0x118C CALLER DUP3 PUSH2 0x1185 PUSH2 0x156D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19BE JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3 PUSH2 0x119C PUSH2 0x16B8 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x11FA DUP4 DUP4 PUSH2 0x11C5 PUSH2 0x156D JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1A62 JUMP JUMPDEST PUSH2 0x1217 CALLER PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4A3 PUSH2 0x126B PUSH2 0x1A74 JUMP JUMPDEST PUSH1 0x2 ADD SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0x5211920D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x12C5 DUP6 DUP6 DUP6 PUSH2 0x777 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND EXTCODESIZE ISZERO PUSH2 0x114F JUMPI PUSH1 0x40 MLOAD PUSH32 0x150B7A0200000000000000000000000000000000000000000000000000000000 DUP1 DUP3 MSTORE SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 PUSH4 0x150B7A02 SWAP1 PUSH2 0x133E SWAP1 CALLER SWAP1 DUP11 SWAP1 DUP10 SWAP1 DUP10 SWAP1 DUP10 SWAP1 PUSH1 0x4 ADD PUSH2 0x2672 JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x135D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1381 SWAP2 SWAP1 PUSH2 0x227C JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND EQ PUSH2 0x114F JUMPI PUSH1 0x40 MLOAD PUSH32 0xC215A7A100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1407 DUP3 PUSH2 0x661 PUSH2 0x1621 JUMP JUMPDEST POP PUSH2 0x493 ADDRESS DUP4 PUSH2 0x1415 PUSH2 0x1A74 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1AA2 JUMP JUMPDEST CALLER PUSH2 0x1429 DUP2 PUSH2 0x9D0 PUSH2 0x16B8 JUMP JUMPDEST PUSH2 0x9EC DUP4 DUP4 DUP4 PUSH2 0x1437 PUSH2 0x156D JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1B62 JUMP JUMPDEST PUSH2 0x118C CALLER DUP3 PUSH2 0x144C PUSH2 0x16B8 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C2C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x14D1 JUMPI POP PUSH1 0x0 PUSH2 0x493 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x1522 JUMPI POP PUSH1 0x1 PUSH2 0x493 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1568 PUSH2 0x1A74 JUMP JUMPDEST PUSH2 0x1D40 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x9EC JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xDDF3EE18AE6D688373C219468F8BE446E7AE82215F4779D821C7EA5E8C13C0C1 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP4 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x16AE JUMPI PUSH1 0x40 MLOAD PUSH32 0xDD56047500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP1 JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x26F1 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0xF69 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x1822 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1875 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7851B9CD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND ISZERO PUSH2 0x18D4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x753ECEAC00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND SWAP1 DUP2 SWAP1 SSTORE DUP1 DUP5 MSTORE PUSH1 0x1 DUP1 DUP9 ADD SWAP1 SWAP4 MSTORE DUP2 DUP5 KECCAK256 DUP1 SLOAD SWAP1 SWAP4 ADD SWAP1 SWAP3 SSTORE MLOAD DUP4 SWAP3 SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP3 SWAP1 LOG4 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH2 0x1991 JUMPI PUSH1 0x40 MLOAD PUSH32 0xAEFBCE4E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 SWAP2 SWAP1 SWAP2 ADD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH2 0x19C9 DUP4 DUP3 DUP5 PUSH2 0x159B JUMP JUMPDEST PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x60 PUSH2 0x4A3 PUSH2 0x1A6F PUSH2 0x1A74 JUMP JUMPDEST PUSH2 0x1DD6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x493 PUSH1 0x1 PUSH32 0x7EA68FD2DCF1C056B94DB6A0A537AA80D26FA9AB1EACD85DA1BA0B61B7E7A8A5 PUSH2 0x26F1 JUMP JUMPDEST PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x40 MLOAD PUSH32 0xF724DAD700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP5 SWAP1 MSTORE PUSH1 0x60 SWAP3 AND SWAP1 PUSH4 0xF724DAD7 SWAP1 PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1B1C JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x0 DUP3 RETURNDATACOPY PUSH1 0x1F RETURNDATASIZE SWAP1 DUP2 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND DUP3 ADD PUSH1 0x40 MSTORE PUSH2 0x16B0 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH2 0x272B JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x1822 JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x1819 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C99 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x6E2 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x1822 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x0 ADD DUP1 SLOAD PUSH2 0x1D51 SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH2 0x1D7D SWAP1 PUSH2 0x2178 JUMP JUMPDEST DUP1 ISZERO PUSH2 0x1DCA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x1D9F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x1DCA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x1DAD JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP SWAP1 POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x60 DUP2 PUSH1 0x1 ADD DUP1 SLOAD PUSH2 0x1D51 SWAP1 PUSH2 0x2178 JUMP JUMPDEST PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E27 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11FA DUP2 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1E4D JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1E35 JUMP JUMPDEST POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 MLOAD DUP1 DUP5 MSTORE PUSH2 0x1E6E DUP2 PUSH1 0x20 DUP7 ADD PUSH1 0x20 DUP7 ADD PUSH2 0x1E32 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP3 SWAP1 SWAP3 ADD PUSH1 0x20 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH1 0x0 PUSH2 0x11FA PUSH1 0x20 DUP4 ADD DUP5 PUSH2 0x1E56 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1EC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F01 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x1F0C DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x1F2F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x1F3A DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD PUSH2 0x1F4A DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 SWAP6 SWAP3 SWAP5 POP POP POP PUSH1 0x40 SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1F6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x1ECC JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH2 0xFFFF DUP9 DUP2 AND DUP3 MSTORE DUP8 AND PUSH1 0x20 DUP3 ADD MSTORE PUSH8 0xFFFFFFFFFFFFFFFF DUP7 DUP2 AND PUSH1 0x40 DUP4 ADD MSTORE DUP6 DUP2 AND PUSH1 0x60 DUP4 ADD MSTORE DUP5 AND PUSH1 0x80 DUP3 ADD MSTORE PUSH1 0xE0 PUSH1 0xA0 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP1 PUSH2 0x1FD2 SWAP1 DUP4 ADD DUP6 PUSH2 0x1E56 JUMP JUMPDEST DUP3 DUP2 SUB PUSH1 0xC0 DUP5 ADD MSTORE PUSH2 0x1FE4 DUP2 DUP6 PUSH2 0x1E56 JUMP JUMPDEST SWAP11 SWAP10 POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH2 0x2007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 CALLDATALOAD PUSH2 0x2012 DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP3 POP PUSH1 0x20 DUP5 ADD CALLDATALOAD SWAP2 POP PUSH1 0x40 DUP5 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x2035 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 ADD PUSH1 0xE0 DUP2 DUP8 SUB SLT ISZERO PUSH2 0x2047 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2064 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x11FA DUP2 PUSH2 0x1ECC JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x118C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2090 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x209B DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x20C3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x20CE DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x20DE DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2102 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2116 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2125 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2137 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x215D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x2168 DUP2 PUSH2 0x1ECC JUMP JUMPDEST SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x1F80 DUP2 PUSH2 0x1ECC JUMP JUMPDEST PUSH1 0x1 DUP2 DUP2 SHR SWAP1 DUP3 AND DUP1 PUSH2 0x218C JUMPI PUSH1 0x7F DUP3 AND SWAP2 POP JUMPDEST PUSH1 0x20 DUP3 LT DUP2 SUB PUSH2 0x21C5 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x22 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 SLOAD PUSH2 0x21D9 DUP2 PUSH2 0x2178 JUMP JUMPDEST PUSH1 0x1 DUP3 DUP2 AND DUP1 ISZERO PUSH2 0x21F1 JUMPI PUSH1 0x1 DUP2 EQ PUSH2 0x2224 JUMPI PUSH2 0x2253 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 DUP5 AND DUP8 MSTORE DUP3 ISZERO ISZERO DUP4 MUL DUP8 ADD SWAP5 POP PUSH2 0x2253 JUMP JUMPDEST DUP8 PUSH1 0x0 MSTORE PUSH1 0x20 DUP1 PUSH1 0x0 KECCAK256 PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x224A JUMPI DUP2 SLOAD DUP11 DUP3 ADD MSTORE SWAP1 DUP5 ADD SWAP1 DUP3 ADD PUSH2 0x2231 JUMP JUMPDEST POP POP POP DUP3 DUP8 ADD SWAP5 POP JUMPDEST POP SWAP3 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2271 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11FA DUP2 PUSH2 0x206F JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x228E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0x11FA DUP2 PUSH2 0x1DE7 JUMP JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH2 0xFFFF DUP2 AND DUP2 EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 DUP4 CALLDATALOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE1 DUP5 CALLDATASIZE SUB ADD DUP2 SLT PUSH2 0x22FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 ADD DUP1 CALLDATALOAD SWAP2 POP PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0x2317 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 ADD SWAP2 POP CALLDATASIZE DUP2 SWAP1 SUB DUP3 SGT ISZERO PUSH2 0x232C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x41 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x1F DUP3 GT ISZERO PUSH2 0x9EC JUMPI PUSH1 0x0 DUP2 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP2 ADD PUSH1 0x20 DUP7 LT ISZERO PUSH2 0x238B JUMPI POP DUP1 JUMPDEST PUSH1 0x1F DUP6 ADD PUSH1 0x5 SHR DUP3 ADD SWAP2 POP JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x23AA JUMPI DUP3 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x2397 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH8 0xFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x23CA JUMPI PUSH2 0x23CA PUSH2 0x2333 JUMP JUMPDEST PUSH2 0x23DE DUP4 PUSH2 0x23D8 DUP4 SLOAD PUSH2 0x2178 JUMP JUMPDEST DUP4 PUSH2 0x2362 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP5 GT PUSH1 0x1 DUP2 EQ PUSH2 0x2430 JUMPI PUSH1 0x0 DUP6 ISZERO PUSH2 0x23FA JUMPI POP DUP4 DUP3 ADD CALLDATALOAD JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x3 DUP8 SWAP1 SHL SHR NOT AND PUSH1 0x1 DUP7 SWAP1 SHL OR DUP4 SSTORE PUSH2 0x114F JUMP JUMPDEST PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP7 AND SWAP1 DUP4 JUMPDEST DUP3 DUP2 LT ISZERO PUSH2 0x247F JUMPI DUP7 DUP6 ADD CALLDATALOAD DUP3 SSTORE PUSH1 0x20 SWAP5 DUP6 ADD SWAP5 PUSH1 0x1 SWAP1 SWAP3 ADD SWAP2 ADD PUSH2 0x245F JUMP JUMPDEST POP DUP7 DUP3 LT ISZERO PUSH2 0x24BA JUMPI PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0xF8 DUP9 PUSH1 0x3 SHL AND SHR NOT DUP5 DUP8 ADD CALLDATALOAD AND DUP2 SSTORE JUMPDEST POP POP PUSH1 0x1 DUP6 PUSH1 0x1 SHL ADD DUP4 SSTORE POP POP POP POP POP JUMP JUMPDEST PUSH2 0xFFFF PUSH2 0x24D8 DUP4 PUSH2 0x2299 JUMP JUMPDEST AND DUP2 SLOAD DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF0000 DUP3 AND OR DUP4 SSTORE PUSH4 0xFFFF0000 PUSH2 0x2513 PUSH1 0x20 DUP7 ADD PUSH2 0x2299 JUMP JUMPDEST PUSH1 0x10 SHL AND DUP1 DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 DUP5 AND OR OR DUP5 SSTORE PUSH12 0xFFFFFFFFFFFFFFFF00000000 PUSH2 0x2559 PUSH1 0x40 DUP8 ADD PUSH2 0x22AD JUMP JUMPDEST PUSH1 0x20 SHL AND DUP4 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF000000000000000000000000 DUP5 AND OR DUP3 OR OR DUP5 SSTORE POP POP POP PUSH2 0x25DE PUSH2 0x2599 PUSH1 0x60 DUP5 ADD PUSH2 0x22AD JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x60 SWAP2 SWAP1 SWAP2 SHL PUSH20 0xFFFFFFFFFFFFFFFF000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x263A PUSH2 0x25ED PUSH1 0x80 DUP5 ADD PUSH2 0x22AD JUMP JUMPDEST DUP3 SLOAD PUSH32 0xFFFFFFFF0000000000000000FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0xA0 SWAP2 SWAP1 SWAP2 SHL PUSH28 0xFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND OR DUP3 SSTORE JUMP JUMPDEST PUSH2 0x2647 PUSH1 0xA0 DUP4 ADD DUP4 PUSH2 0x22C7 JUMP JUMPDEST PUSH2 0x2655 DUP2 DUP4 PUSH1 0x1 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST POP POP PUSH2 0x2664 PUSH1 0xC0 DUP4 ADD DUP4 PUSH2 0x22C7 JUMP JUMPDEST PUSH2 0x1822 DUP2 DUP4 PUSH1 0x2 DUP7 ADD PUSH2 0x23B2 JUMP JUMPDEST PUSH1 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP9 AND DUP4 MSTORE DUP1 DUP8 AND PUSH1 0x20 DUP5 ADD MSTORE POP DUP5 PUSH1 0x40 DUP4 ADD MSTORE PUSH1 0x80 PUSH1 0x60 DUP4 ADD MSTORE DUP3 PUSH1 0x80 DUP4 ADD MSTORE DUP3 DUP5 PUSH1 0xA0 DUP5 ADD CALLDATACOPY PUSH1 0x0 PUSH1 0xA0 DUP5 DUP5 ADD ADD MSTORE PUSH1 0xA0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 PUSH1 0x1F DUP6 ADD AND DUP4 ADD ADD SWAP1 POP SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x493 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x273D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2755 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP5 ADD SWAP2 POP DUP5 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2769 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP2 DUP2 GT ISZERO PUSH2 0x277B JUMPI PUSH2 0x277B PUSH2 0x2333 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1F DUP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 SWAP1 DUP2 AND PUSH1 0x3F ADD AND DUP2 ADD SWAP1 DUP4 DUP3 GT DUP2 DUP4 LT OR ISZERO PUSH2 0x27C1 JUMPI PUSH2 0x27C1 PUSH2 0x2333 JUMP JUMPDEST DUP2 PUSH1 0x40 MSTORE DUP3 DUP2 MSTORE DUP8 PUSH1 0x20 DUP5 DUP8 ADD ADD GT ISZERO PUSH2 0x27DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x27EB DUP4 PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP9 ADD PUSH2 0x1E32 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 DUP8 0xA9 CREATE2 0xCB 0xAF 0x4F DUP11 0xAE DUP8 0x26 0x25 DUP13 SWAP6 0x2E PUSH9 0x64D610DD28C157F7C 0x2A 0xCD 0xD4 PUSH23 0x7ECC5B8364736F6C634300081600330000000000000000 ","sourceMap":"1728:11655:41:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:14;;;;;;:::i;:::-;;:::i;:::-;;;611:14:46;;604:22;586:41;;574:2;559:18;542:165:14;;;;;;;;942:163:21;;;:::i;:::-;;;;;;;:::i;8069:122:41:-;;;;;;:::i;:::-;;:::i;:::-;;;1814:42:46;1802:55;;;1784:74;;1772:2;1757:18;8069:122:41;1638:226:46;8225:107:41;;;;;;:::i;:::-;;:::i;:::-;;5787:693;;;;;;:::i;:::-;;:::i;9313:851::-;;;;;;:::i;:::-;;:::i;1116:257:3:-;;;;;;:::i;:::-;;:::i;2487:51:41:-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;7035:655;;;;;;:::i;:::-;;:::i;11292:343::-;;;;;;:::i;:::-;;:::i;4548:653::-;;;;;;:::i;:::-;;:::i;2414:67::-;;;;;;:::i;:::-;;:::i;:::-;;;;;;;;;;;;;:::i;3962:278::-;;;;;;:::i;:::-;;:::i;7895:140::-;;;;;;:::i;:::-;;:::i;7724:137::-;;;;;;:::i;:::-;;:::i;:::-;;;4968:25:46;;;4956:2;4941:18;7724:137:41;4822:177:46;1994:124:3;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;2159:162:3:-;;;;;;:::i;:::-;;:::i;1147:169:21:-;;;:::i;3650:217:41:-;;;;;;:::i;:::-;;:::i;1214:177:34:-;;;:::i;8366:120:41:-;;;;;;:::i;:::-;;:::i;12835:366::-;;;;;;:::i;:::-;;:::i;1358:267:21:-;;;;;;:::i;:::-;;:::i;2306:46:41:-;;;;;1694:259:3;;;;;;:::i;:::-;;:::i;13235:146:41:-;;;;;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;2358:50:41:-;;;;;542:165:14;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:14:o;942:163:21:-;1032:23;1074:24;:22;:24::i;:::-;1067:31;;942:163;:::o;8069:122:41:-;8130:16;8165:19;;;;;;;;;;;;;;8225:107;8305:20;;;;;;;;;;;;;;5787:693;5865:17;5912:15;;;:6;:15;;;;;;;;5895:43;;;;5912:25;;;;;5895:43;;:::i;:::-;;;;;;;;;;;;;;;5885:54;;5895:43;5885:54;;;;6081:43;;;;;;9405:25:46;;;6113:10:41;9446:18:46;;;9439:83;5885:54:41;-1:-1:-1;6081:12:41;:20;;;;;9378:18:46;;6081:43:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6076:146;;6140:71;6185:13;6200:10;6140:29;:27;:29::i;:::-;:44;:71;:44;:71::i;:::-;6232:13;6248:39;6279:7;6248:22;:20;:22::i;:::-;:30;;:39::i;:::-;6232:55;;6310:9;6301:18;;:5;:18;;;6297:66;;6328:35;;;;;1814:42:46;1802:55;;6328:35:41;;;1784:74:46;1757:18;;6328:35:41;;;;;;;;6297:66;6374:25;;;;:16;:25;;;;;;;;;:37;;;;;;;;;;;;;6426:47;;6462:10;1784:74:46;;6374:25:41;;:37;6426:47;;1757:18:46;6426:47:41;;;;;;;5855:625;;5787:693;;:::o;9313:851::-;9395:13;9411:39;9442:7;9411:22;:20;:22::i;:39::-;9395:55;-1:-1:-1;9464:19:41;;;9473:10;9464:19;9460:72;;9492:40;;;;;9512:10;9492:40;;;9957:74:46;10047:18;;;10040:34;;;9930:18;;9492:40:41;9783:297:46;9460:72:41;9554:5;9546:13;;:4;:13;;;;:48;;;-1:-1:-1;9563:25:41;;;;:16;:25;;;;;;:31;;;;:25;;:31;;9546:48;9542:111;;;9603:50;;;;;10297:42:46;10366:15;;;9603:50:41;;;10348:34:46;10418:15;;10398:18;;;10391:43;10450:18;;;10443:34;;;10260:18;;9603:50:41;10085:398:46;9542:111:41;9721:2;9705:20;;9664:22;:20;:22::i;:::-;:29;:38;;;;;;;;;;;:61;9914:22;:20;:22::i;:::-;:38;;;;;;;:31;;;;;:38;;;;;9912:40;;;;;;10026:22;:20;:22::i;:::-;:35;;;;;;;;:31;;;;:35;;;;;;;;10024:37;;;;;;;;10089:25;;;:16;:25;;;;;10082:32;;;;;;10129:28;;10106:7;;10026:35;;10129:28;;;;;;9385:779;9313:851;;;:::o;1116:257:3:-;719:10:38;1226:66:3;719:10:38;1226:33:3;:31;:33::i;:::-;:56;;:66::i;:::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;7035:655:41:-;7102:17;7149:15;;;:6;:15;;;;;;;;7132:43;;;;7149:25;;;;;7132:43;;:::i;:::-;;;;;;;;;;;;;;;7122:54;;7132:43;7122:54;;;;7318:43;;;;;;9405:25:46;;;7350:10:41;9446:18:46;;;9439:83;7122:54:41;-1:-1:-1;7318:12:41;:20;;;;;9378:18:46;;7318:43:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7313:146;;7377:71;7422:13;7437:10;7377:29;:27;:29::i;:71::-;7510:1;7473:25;;;:16;:25;;;;;;:39;:25;7469:87;;7521:35;;;;;;;;4968:25:46;;;4941:18;;7521:35:41;4822:177:46;7469:87:41;7594:25;;;;:16;:25;;;;;;;;;;7571:70;;7630:10;1784:74:46;;7594:25:41;;;;;7571:70;;1757:18:46;7571:70:41;;;;;;;-1:-1:-1;7658:25:41;;;;:16;:25;;;;;7651:32;;;;;;7035:655::o;11292:343::-;11388:31;11401:4;11407:2;11411:7;11388:12;:31::i;:::-;11433:13;;;1702:19:37;:23;11429:200:41;;11468:67;;2259:41;11468:67;;;11505:10;11468:67;;;10816:34:46;11468:36:41;10886:15:46;;;10866:18;;;10859:43;10918:18;;;10911:34;;;10981:3;10961:18;;;10954:31;-1:-1:-1;11001:19:46;;;10994:30;2259:41:41;;11468:36;;;;2259:41;;11041:19:46;;11468:67:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:86;;;11464:154;;11579:39;;;;;9987:42:46;9975:55;;11579:39:41;;;9957:74:46;10047:18;;;10040:34;;;9930:18;;11579:39:41;9783:297:46;4548:653:41;4598:17;4645:15;;;:6;:15;;;;;;;;4628:43;;;;4645:25;;;;;4628:43;;:::i;:::-;;;;;;;;;;;;;;;4618:54;;4628:43;4618:54;;;;4686:19;;:49;;;;;;11499:25:46;;;11540:18;;;11533:34;;;4618:54:41;;-1:-1:-1;4686:19:41;;;:29;;11472:18:46;;4686:49:41;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;4682:513;;;4751:13;4767:39;4798:7;4767:22;:20;:22::i;:39::-;4751:55;;2379:66:33;4820:22:41;:20;:22::i;:::-;:29;:38;;;;;;;;;;;:78;5026:22;:20;:22::i;:::-;:38;;;;;;;:31;;;;;:38;;;;;;5024:40;;;;;;5097:36;5125:7;;5026:38;;5097:36;;5026:38;;5097:36;4737:407;4588:613;4548:653;:::o;4682:513::-;5171:13;;;;;;;;;;;;;;4682:513;4588:613;4548:653;:::o;2414:67::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::o;3962:278::-;4077:69;4122:11;4135:10;4077:29;:27;:29::i;:69::-;4157:40;4185:2;4189:7;4157:22;:20;:22::i;:::-;:27;:40;:27;:40::i;:::-;4207:15;;;;:6;:15;;;;;4225:8;;4207:26;4225:8;4207:15;:26;:::i;:::-;-1:-1:-1;;;;;3962:278:41:o;7895:140::-;7952:18;7989:39;8020:7;7989:22;:20;:22::i;7724:137::-;7781:15;7815:39;7848:5;7815:22;:20;:22::i;:::-;:32;;:39::i;1994:124:3:-;2049:62;719:10:38;2106:4:3;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;:::-;1994:124;:::o;710:120:4:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:13;;;;3556:118;2159:162:3;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2774:13:12;2806;;;;;;;;;;;:22;;;;;;;;;;;;;;;2685:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;1147:169:21:-;1239:25;1283:26;:24;:26::i;3650:217:41:-;3740:70;719:10:38;3740:33:41;:31;:33::i;:70::-;3820:19;:40;;;;;;;;;;;;;;;3650:217::o;1214:177:34:-;1273:44;1336:48;:29;:27;:29::i;:::-;2991:23:36;;;;;;2861:160;8366:120:41;8460:19;;;;;;;;;;;;;;12835:366;12952:31;12965:4;12971:2;12975:7;12952:12;:31::i;:::-;12997:13;;;1702:19:37;:23;12993:202:41;;13032:69;;2259:41;13032:69;;;2259:41;13032:36;;;;2259:41;;13032:69;;13069:10;;13081:4;;13087:7;;13096:4;;;;13032:69;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:88;;;13028:156;;13145:39;;;;;9987:42:46;9975:55;;13145:39:41;;;9957:74:46;10047:18;;;10040:34;;;9930:18;;13145:39:41;9783:297:46;1358:267:21;1424:17;1453:39;1484:7;1453:22;:20;:22::i;:39::-;;1548:70;1603:4;1610:7;1548:29;:27;:29::i;:::-;:46;:70;:46;:70::i;1694:259:3:-;719:10:38;1805:66:3;719:10:38;1805:33:3;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;719:10:38;1000:8:4;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1705:174:17:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:17;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:17;1620:11;;1560:82;-1:-1:-1;1658:34:17;;:21;:34;;;;;;;;;;;;;;;1359:340::o;706:130:34:-;751:23;793:36;:29;:27;:29::i;:::-;:34;:36::i;4381:174:12:-;4422:16;;702:67;768:1;710:54;702:67;:::i;3645:170::-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;3742:66;;3780:28;;;;;;;;9405:25:46;;;9478:42;9466:55;;9446:18;;;9439:83;9378:18;;3780:28:12;9231:297:46;29031:174:33;29072:16;;1836:61;1896:1;1844:48;1836:61;:::i;27104:254::-;27179:18;27225:17;;;;;;;;;;;30661:19;;;27252:64;;27285:31;;;;;;;;4968:25:46;;;4941:18;;27285:31:33;4822:177:46;27252:64:33;27345:5;27333:18;27326:25;27104:254;-1:-1:-1;;;;27104:254:33:o;5065:174:13:-;5106:16;;926:71;996:1;934:58;926:71;:::i;4413:162::-;4519:15;;;4508:26;;;4519:15;;4508:26;4504:64;;4543:25;;;;;1814:42:46;1802:55;;4543:25:13;;;1784:74:46;1757:18;;4543:25:13;1638:226:46;1151:251:12;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1256:140;;1301:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1326:4;1301:29;;;1349:36;;18067:25:46;;;18169:18;;;18162:43;18241:15;;;18221:18;;;18214:43;;;;1349:36:12;;18055:2:46;18040:18;1349:36:12;;;;;;;;1256:140;1151:251;;;;:::o;13998:460:33:-;14082:16;;;14078:54;;14107:25;;;;;;;;;;;;;;14078:54;14159:8;:17;;;;;;;;;;;30661:19;;;14142:72;;14186:28;;;;;;;;4968:25:46;;;4941:18;;14186:28:33;4822:177:46;14142:72:33;14225:8;:17;;;;;;;;;;;14245:20;;;14225:40;;;;14378:14;;;:10;;;;:14;;;;;;14376:16;;;;;;;;14418:33;14234:7;;14225:8;14418:33;;14225:8;;14418:33;13998:460;;;:::o;26583:203::-;26658:15;26689:19;;;26685:60;;26717:28;;;;;;;;;;;;;;26685:60;-1:-1:-1;26762:17:33;;;;;;:10;;;;;:17;;;;;;;26583:203::o;2288:213:12:-;2377:30;:1;2394:4;2400:6;2377:16;:30::i;:::-;2441:5;2417:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2461:33;;18067:25:46;;;18169:18;;;18162:43;;;18221:18;;18214:43;;;;2461:33:12;;18055:2:46;18040:18;2461:33:12;;;;;;;2288:213;;;:::o;939:136:34:-;986:25;1030:38;:29;:27;:29::i;:::-;:36;:38::i;3441:174:36:-;3482:16;;456:70;525:1;464:57;456:70;:::i;3225:210::-;3364:23;;;;:64;;;;;:23;9975:55:46;;;3364:64:36;;;9957:74:46;10047:18;;;10040:34;;;3332:13:36;;3364:23;;:40;;9930:18:46;;3364:64:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;1780:252:12:-;2774:13;2806;;;;;;;;;;;:22;;;;;;;;;;;;;1886:140;;;1955:5;1930:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1979:36;;18067:25:46;;;18169:18;;;18162:43;18241:15;;;18221:18;;;18214:43;;;;1979:36:12;;18055:2:46;18040:18;1979:36:12;17865:398:46;3060:369:13;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;1814:42:46;1802:55;;3243:24:13;;;1784:74:46;1757:18;;3243:24:13;1638:226:46;3207:60:13;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:13;3148:281;3060:369;;;:::o;2358:115:36:-;2413:23;2455:1;:11;;2448:18;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2358:115;;;:::o;2587:121::-;2644:25;2688:1;:13;;2681:20;;;;;:::i;14:177:46:-;99:66;92:5;88:78;81:5;78:89;68:117;;181:1;178;171:12;196:245;254:6;307:2;295:9;286:7;282:23;278:32;275:52;;;323:1;320;313:12;275:52;362:9;349:23;381:30;405:5;381:30;:::i;638:250::-;723:1;733:113;747:6;744:1;741:13;733:113;;;823:11;;;817:18;804:11;;;797:39;769:2;762:10;733:113;;;-1:-1:-1;;880:1:46;862:16;;855:27;638:250::o;893:330::-;935:3;973:5;967:12;1000:6;995:3;988:19;1016:76;1085:6;1078:4;1073:3;1069:14;1062:4;1055:5;1051:16;1016:76;:::i;:::-;1137:2;1125:15;1142:66;1121:88;1112:98;;;;1212:4;1108:109;;893:330;-1:-1:-1;;893:330:46:o;1228:220::-;1377:2;1366:9;1359:21;1340:4;1397:45;1438:2;1427:9;1423:18;1415:6;1397:45;:::i;1453:180::-;1512:6;1565:2;1553:9;1544:7;1540:23;1536:32;1533:52;;;1581:1;1578;1571:12;1533:52;-1:-1:-1;1604:23:46;;1453:180;-1:-1:-1;1453:180:46:o;1869:154::-;1955:42;1948:5;1944:54;1937:5;1934:65;1924:93;;2013:1;2010;2003:12;2028:315;2096:6;2104;2157:2;2145:9;2136:7;2132:23;2128:32;2125:52;;;2173:1;2170;2163:12;2125:52;2212:9;2199:23;2231:31;2256:5;2231:31;:::i;:::-;2281:5;2333:2;2318:18;;;;2305:32;;-1:-1:-1;;;2028:315:46:o;2348:456::-;2425:6;2433;2441;2494:2;2482:9;2473:7;2469:23;2465:32;2462:52;;;2510:1;2507;2500:12;2462:52;2549:9;2536:23;2568:31;2593:5;2568:31;:::i;:::-;2618:5;-1:-1:-1;2675:2:46;2660:18;;2647:32;2688:33;2647:32;2688:33;:::i;:::-;2348:456;;2740:7;;-1:-1:-1;;;2794:2:46;2779:18;;;;2766:32;;2348:456::o;2809:315::-;2877:6;2885;2938:2;2926:9;2917:7;2913:23;2909:32;2906:52;;;2954:1;2951;2944:12;2906:52;2990:9;2977:23;2967:33;;3050:2;3039:9;3035:18;3022:32;3063:31;3088:5;3063:31;:::i;:::-;3113:5;3103:15;;;2809:315;;;;;:::o;3129:840::-;3448:6;3481:15;;;3463:34;;3533:15;;3528:2;3513:18;;3506:43;3568:18;3622:15;;;3617:2;3602:18;;3595:43;3674:15;;;3669:2;3654:18;;3647:43;3727:15;;3721:3;3706:19;;3699:44;3780:3;3774;3759:19;;3752:32;;;3419:4;;3807:46;;3833:19;;3825:6;3807:46;:::i;:::-;3902:9;3894:6;3890:22;3884:3;3873:9;3869:19;3862:51;3930:33;3956:6;3948;3930:33;:::i;:::-;3922:41;3129:840;-1:-1:-1;;;;;;;;;;3129:840:46:o;3974:591::-;4079:6;4087;4095;4148:2;4136:9;4127:7;4123:23;4119:32;4116:52;;;4164:1;4161;4154:12;4116:52;4203:9;4190:23;4222:31;4247:5;4222:31;:::i;:::-;4272:5;-1:-1:-1;4324:2:46;4309:18;;4296:32;;-1:-1:-1;4379:2:46;4364:18;;4351:32;4406:18;4395:30;;4392:50;;;4438:1;4435;4428:12;4392:50;4461:22;;4517:3;4499:16;;;4495:26;4492:46;;;4534:1;4531;4524:12;4492:46;4557:2;4547:12;;;3974:591;;;;;:::o;4570:247::-;4629:6;4682:2;4670:9;4661:7;4657:23;4653:32;4650:52;;;4698:1;4695;4688:12;4650:52;4737:9;4724:23;4756:31;4781:5;4756:31;:::i;5731:118::-;5817:5;5810:13;5803:21;5796:5;5793:32;5783:60;;5839:1;5836;5829:12;5854:382;5919:6;5927;5980:2;5968:9;5959:7;5955:23;5951:32;5948:52;;;5996:1;5993;5986:12;5948:52;6035:9;6022:23;6054:31;6079:5;6054:31;:::i;:::-;6104:5;-1:-1:-1;6161:2:46;6146:18;;6133:32;6174:30;6133:32;6174:30;:::i;6241:936::-;6338:6;6346;6354;6362;6370;6423:3;6411:9;6402:7;6398:23;6394:33;6391:53;;;6440:1;6437;6430:12;6391:53;6479:9;6466:23;6498:31;6523:5;6498:31;:::i;:::-;6548:5;-1:-1:-1;6605:2:46;6590:18;;6577:32;6618:33;6577:32;6618:33;:::i;:::-;6670:7;-1:-1:-1;6724:2:46;6709:18;;6696:32;;-1:-1:-1;6779:2:46;6764:18;;6751:32;6802:18;6832:14;;;6829:34;;;6859:1;6856;6849:12;6829:34;6897:6;6886:9;6882:22;6872:32;;6942:7;6935:4;6931:2;6927:13;6923:27;6913:55;;6964:1;6961;6954:12;6913:55;7004:2;6991:16;7030:2;7022:6;7019:14;7016:34;;;7046:1;7043;7036:12;7016:34;7091:7;7086:2;7077:6;7073:2;7069:15;7065:24;7062:37;7059:57;;;7112:1;7109;7102:12;7059:57;6241:936;;;;-1:-1:-1;6241:936:46;;-1:-1:-1;7143:2:46;7135:11;;7165:6;6241:936;-1:-1:-1;;;6241:936:46:o;7364:388::-;7432:6;7440;7493:2;7481:9;7472:7;7468:23;7464:32;7461:52;;;7509:1;7506;7499:12;7461:52;7548:9;7535:23;7567:31;7592:5;7567:31;:::i;:::-;7617:5;-1:-1:-1;7674:2:46;7659:18;;7646:32;7687:33;7646:32;7687:33;:::i;7757:437::-;7836:1;7832:12;;;;7879;;;7900:61;;7954:4;7946:6;7942:17;7932:27;;7900:61;8007:2;7999:6;7996:14;7976:18;7973:38;7970:218;;8044:77;8041:1;8034:88;8145:4;8142:1;8135:15;8173:4;8170:1;8163:15;7970:218;;7757:437;;;:::o;8325:901::-;8453:3;8482:1;8515:6;8509:13;8545:36;8571:9;8545:36;:::i;:::-;8600:1;8617:17;;;8643:191;;;;8848:1;8843:358;;;;8610:591;;8643:191;8691:66;8680:9;8676:82;8671:3;8664:95;8814:6;8807:14;8800:22;8792:6;8788:35;8783:3;8779:45;8772:52;;8643:191;;8843:358;8874:6;8871:1;8864:17;8904:4;8949;8946:1;8936:18;8976:1;8990:165;9004:6;9001:1;8998:13;8990:165;;;9082:14;;9069:11;;;9062:35;9125:16;;;;9019:10;;8990:165;;;8994:3;;;9184:6;9179:3;9175:16;9168:23;;8610:591;-1:-1:-1;9217:3:46;;8325:901;-1:-1:-1;;;;;;8325:901:46:o;9533:245::-;9600:6;9653:2;9641:9;9632:7;9628:23;9624:32;9621:52;;;9669:1;9666;9659:12;9621:52;9701:9;9695:16;9720:28;9742:5;9720:28;:::i;11071:249::-;11140:6;11193:2;11181:9;11172:7;11168:23;11164:32;11161:52;;;11209:1;11206;11199:12;11161:52;11241:9;11235:16;11260:30;11284:5;11260:30;:::i;11578:201::-;11622:11;11674:3;11661:17;11718:6;11711:5;11707:18;11700:5;11697:29;11687:57;;11740:1;11737;11730:12;11784:213;11828:11;11880:3;11867:17;11924:18;11917:5;11913:30;11906:5;11903:41;11893:69;;11958:1;11955;11948:12;12583:575;12655:4;12661:6;12721:11;12708:25;12811:66;12800:8;12784:14;12780:29;12776:102;12756:18;12752:127;12742:155;;12893:1;12890;12883:12;12742:155;12920:33;;12972:20;;;-1:-1:-1;13015:18:46;13004:30;;13001:50;;;13047:1;13044;13037:12;13001:50;13080:4;13068:17;;-1:-1:-1;13111:14:46;13107:27;;;13097:38;;13094:58;;;13148:1;13145;13138:12;13094:58;12583:575;;;;;:::o;13163:184::-;13215:77;13212:1;13205:88;13312:4;13309:1;13302:15;13336:4;13333:1;13326:15;13352:543;13454:2;13449:3;13446:11;13443:446;;;13490:1;13514:5;13511:1;13504:16;13558:4;13555:1;13545:18;13628:2;13616:10;13612:19;13609:1;13605:27;13599:4;13595:38;13664:4;13652:10;13649:20;13646:47;;;-1:-1:-1;13687:4:46;13646:47;13742:2;13737:3;13733:12;13730:1;13726:20;13720:4;13716:31;13706:41;;13797:82;13815:2;13808:5;13805:13;13797:82;;;13860:17;;;13841:1;13830:13;13797:82;;;13801:3;;;13352:543;;;:::o;14131:1309::-;14239:18;14234:3;14231:27;14228:53;;;14261:18;;:::i;:::-;14290:94;14380:3;14340:38;14372:4;14366:11;14340:38;:::i;:::-;14334:4;14290:94;:::i;:::-;14410:1;14435:2;14430:3;14427:11;14452:1;14447:735;;;;15226:1;15243:3;15240:93;;;-1:-1:-1;15299:19:46;;;15286:33;15240:93;14037:66;14028:1;14024:11;;;14020:84;14016:89;14006:100;14112:1;14108:11;;;14003:117;15346:78;;14420:1014;;14447:735;8272:1;8265:14;;;8309:4;8296:18;;14492:66;14483:76;;;14643:9;14665:229;14679:7;14676:1;14673:14;14665:229;;;14768:19;;;14755:33;14740:49;;14875:4;14860:20;;;;14828:1;14816:14;;;;14695:12;14665:229;;;14669:3;14922;14913:7;14910:16;14907:219;;;15042:66;15036:3;15030;15027:1;15023:11;15019:21;15015:94;15011:99;14998:9;14993:3;14989:19;14976:33;14972:139;14964:6;14957:155;14907:219;;;15169:1;15163:3;15160:1;15156:11;15152:19;15146:4;15139:33;14420:1014;;14131:1309;;;:::o;15445:1379::-;15633:6;15598:33;15625:5;15598:33;:::i;:::-;15594:46;15665:4;15659:11;15772:2;15703:66;15699:2;15695:75;15692:83;15686:4;15679:97;15852:10;15807:42;15845:2;15838:5;15834:14;15807:42;:::i;:::-;15803:2;15799:51;15795:68;15973:2;15968;15899:66;15895:2;15891:75;15888:83;15885:91;15879:4;15872:105;16152:26;16107:42;16145:2;16138:5;16134:14;16107:42;:::i;:::-;16103:2;16099:51;16095:84;16089:2;16020:66;16016:2;16012:75;16009:83;16005:2;16002:91;15999:181;15993:4;15986:195;;;;16190:95;16242:42;16280:2;16273:5;16269:14;16242:42;:::i;:::-;12094:11;;12138:66;12130:75;12215:2;12211:14;;;;12227:42;12207:63;12127:144;12114:158;;12002:276;16190:95;16294:98;16348:43;16386:3;16379:5;16375:15;16348:43;:::i;:::-;12377:11;;12421:66;12413:75;12498:3;12494:15;;;;12511:58;12490:80;12410:161;12397:175;;12283:295;16294:98;16435:60;16490:3;16483:5;16479:15;16472:5;16435:60;:::i;:::-;16504:99;16589:13;16576:11;16572:1;16566:4;16562:12;16504:99;:::i;:::-;;;16648:60;16703:3;16696:5;16692:15;16685:5;16648:60;:::i;:::-;16717:101;16804:13;16789;16785:1;16779:4;16775:12;16717:101;:::i;16829:744::-;17033:4;17062:42;17143:2;17135:6;17131:15;17120:9;17113:34;17195:2;17187:6;17183:15;17178:2;17167:9;17163:18;17156:43;;17235:6;17230:2;17219:9;17215:18;17208:34;17278:3;17273:2;17262:9;17258:18;17251:31;17319:6;17313:3;17302:9;17298:19;17291:35;17377:6;17369;17363:3;17352:9;17348:19;17335:49;17434:1;17428:3;17419:6;17408:9;17404:22;17400:32;17393:43;17563:3;17493:66;17488:2;17480:6;17476:15;17472:88;17461:9;17457:104;17453:114;17445:122;;16829:744;;;;;;;;:::o;17578:282::-;17645:9;;;17666:11;;;17663:191;;;17710:77;17707:1;17700:88;17811:4;17808:1;17801:15;17839:4;17836:1;17829:15;18268:956;18348:6;18401:2;18389:9;18380:7;18376:23;18372:32;18369:52;;;18417:1;18414;18407:12;18369:52;18450:9;18444:16;18479:18;18520:2;18512:6;18509:14;18506:34;;;18536:1;18533;18526:12;18506:34;18574:6;18563:9;18559:22;18549:32;;18619:7;18612:4;18608:2;18604:13;18600:27;18590:55;;18641:1;18638;18631:12;18590:55;18670:2;18664:9;18692:2;18688;18685:10;18682:36;;;18698:18;;:::i;:::-;18832:2;18826:9;18894:4;18886:13;;18737:66;18882:22;;;18906:2;18878:31;18874:40;18862:53;;;18930:18;;;18950:22;;;18927:46;18924:72;;;18976:18;;:::i;:::-;19016:10;19012:2;19005:22;19051:2;19043:6;19036:18;19091:7;19086:2;19081;19077;19073:11;19069:20;19066:33;19063:53;;;19112:1;19109;19102:12;19063:53;19125:68;19190:2;19185;19177:6;19173:15;19168:2;19164;19160:11;19125:68;:::i;:::-;19212:6;18268:956;-1:-1:-1;;;;;;;18268:956:46:o"},"gasEstimates":{"creation":{"codeDepositCost":"2056800","executionCost":"infinite","totalCost":"infinite"},"external":{"MINTER_ROLE()":"306","OPERATOR_ROLE()":"305","allowTransfer(address,uint256)":"infinite","allowedTransfers(uint256)":"2499","approve(address,uint256)":"387","balanceOf(address)":"infinite","burn(uint256)":"infinite","getApproved(uint256)":"351","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isApprovedForAll(address,address)":"infinite","metadataResolver()":"infinite","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"infinite","name()":"infinite","owner()":"infinite","ownerOf(uint256)":"infinite","removeAllowedTransfer(uint256)":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","safeTransferFrom(address,address,uint256)":"infinite","safeTransferFrom(address,address,uint256,bytes)":"infinite","setApprovalForAll(address,bool)":"infinite","setRevocationRegistry(address)":"infinite","supportsInterface(bytes4)":"infinite","symbol()":"infinite","tokenURI(uint256)":"infinite","transferFrom(address,address,uint256)":"infinite","transferOwnership(address)":"infinite","vcData(uint256)":"infinite"}},"methodIdentifiers":{"MINTER_ROLE()":"d5391393","OPERATOR_ROLE()":"f5b541a6","allowTransfer(address,uint256)":"19c02b27","allowedTransfers(uint256)":"3886d512","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","burn(uint256)":"42966c68","getApproved(uint256)":"081812fc","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isApprovedForAll(address,address)":"e985e9c5","metadataResolver()":"a0c76f62","mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))":"54c7be06","name()":"06fdde03","owner()":"8da5cb5b","ownerOf(uint256)":"6352211e","removeAllowedTransfer(uint256)":"42532616","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","setRevocationRegistry(address)":"95f94bc4","supportsInterface(bytes4)":"01ffc9a7","symbol()":"95d89b41","tokenURI(uint256)":"c87b56dd","transferFrom(address,address,uint256)":"23b872dd","transferOwnership(address)":"f2fde38b","vcData(uint256)":"4bae2be8"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"},{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"metadataResolver\",\"type\":\"address\"},{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"},{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC721BalanceOfAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721ExistingToken\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ERC721MintToAddressZero\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonApprovedForTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonExistingToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721NonOwnedToken\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ERC721SafeTransferRejected\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidBurn\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NoOperatorAllowed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"NonExistingAllowedTransfer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"RedundantAllowedTransfer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"AllowedTransferRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"TransferAllowed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MINTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"OPERATOR_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"allowTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allowedTransfers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"metadataResolver\",\"outputs\":[{\"internalType\":\"contract ITokenMetadataResolver\",\"name\":\"tokenMetadataResolver\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"internalType\":\"struct CertificateNFTv1MetaData.MetaData\",\"name\":\"metadata\",\"type\":\"tuple\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"removeAllowedTransfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IRevocationRegistry\",\"name\":\"revocationRegistry\",\"type\":\"address\"}],\"name\":\"setRevocationRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"uri\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vcData\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"schemaVersion\",\"type\":\"uint16\"},{\"internalType\":\"uint16\",\"name\":\"achievementType\",\"type\":\"uint16\"},{\"internalType\":\"uint64\",\"name\":\"awardedDate\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validFrom\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"validUtil\",\"type\":\"uint64\"},{\"internalType\":\"string\",\"name\":\"issuerDid\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"achievementId\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"ERC721ExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that already exists.\"}}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"params\":{\"sender\":\"The message sender.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721NonExistingToken(uint256)\":[{\"params\":{\"tokenId\":\"The identifier of the token that was checked.\"}}],\"ERC721NonOwnedToken(address,uint256)\":[{\"params\":{\"account\":\"The account that was expected to own the token.\",\"tokenId\":\"The identifier of the token.\"}}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"params\":{\"recipient\":\"The recipient contract.\",\"tokenId\":\"The identifier of the token.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"AllowedTransferRemoved(address,uint256,address)\":{\"params\":{\"recipient\":\"The address to which transfer was approved for.\",\"sender\":\"The account that approved the transfer.\",\"tokenId\":\"The tokenId that was approved for transfer.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}},\"TransferAllowed(address,uint256,address)\":{\"params\":{\"recipient\":\"The address to which transfer was approved for.\",\"sender\":\"The account that approved the transfer.\",\"tokenId\":\"The tokenId that was approved for transfer.\"}}},\"kind\":\"dev\",\"methods\":{\"allowTransfer(address,uint256)\":{\"details\":\"emit a `TransferAllowed` event upon successful operation.Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.\",\"params\":{\"recipient\":\"The address to which transfer would be allowed.\",\"tokenId\":\"The tokenId to be allowed for transfer.\"}},\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"burn(uint256)\":{\"details\":\"Reverts with `InvalidBurn` if the tokenId has not been invalidated.Emit a `Transfer` event to address 0 when the token has been burnt.\",\"params\":{\"tokenId\":\"The Token Id to be burnt. Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"metadataResolver()\":{\"returns\":{\"tokenMetadataResolver\":\"The token metadata resolver address.\"}},\"mint(address,uint256,(uint16,uint16,uint64,uint64,uint64,string,string))\":{\"details\":\"Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\"},\"name()\":{\"returns\":{\"tokenName\":\"The name of the token.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"removeAllowedTransfer(uint256)\":{\"details\":\"emit a `AllowedTransferRemoved` event upon successful operation.Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.\",\"params\":{\"tokenId\":\"The tokenId of which allowed transfer would be removed.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"setRevocationRegistry(address)\":{\"params\":{\"revocationRegistry\":\"The address of the Revocation Registry contract.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"symbol()\":{\"returns\":{\"tokenSymbol\":\"The symbol of the token.\"}},\"tokenURI(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier.\"},\"returns\":{\"uri\":\"The metadata URI for the token identifier.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: This function implements {ERC721-transferFrom(address,address,uint256)}.remove the existing approval for `tokenId`.Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"version\":1},\"userdoc\":{\"errors\":{\"ERC721BalanceOfAddressZero()\":[{\"notice\":\"Thrown when querying the balance of the zero address.\"}],\"ERC721ExistingToken(uint256)\":[{\"notice\":\"Thrown when minting a token that already exists.\"}],\"ERC721MintToAddressZero()\":[{\"notice\":\"Thrown when minting a token to the zero address.\"}],\"ERC721NonApprovedForTransfer(address,address,uint256)\":[{\"notice\":\"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\"}],\"ERC721NonExistingToken(uint256)\":[{\"notice\":\"Thrown when a token does not exist but is required to.\"}],\"ERC721NonOwnedToken(address,uint256)\":[{\"notice\":\"Thrown when a token is not owned by the expected account.\"}],\"ERC721SafeTransferRejected(address,uint256)\":[{\"notice\":\"Thrown when a safe transfer is rejected by the recipient contract.\"}],\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidBurn()\":[{\"notice\":\"Thrown when burn operation cannot be executed.\"}],\"NoOperatorAllowed()\":[{\"notice\":\"Thrown when any operator related methods are called.\"}],\"NonExistingAllowedTransfer(uint256)\":[{\"notice\":\"Thrown when there is no allowed transfer for `tokenId`\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"RedundantAllowedTransfer(address)\":[{\"notice\":\"Thrown when allowed transfer is called with receipt same as owner.\"}],\"TransferNotAllowed()\":[{\"notice\":\"Thrown when any transfer functions are called but not allowed.\"}]},\"events\":{\"AllowedTransferRemoved(address,uint256,address)\":{\"notice\":\"Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"},\"TransferAllowed(address,uint256,address)\":{\"notice\":\"Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`.\"}},\"kind\":\"user\",\"methods\":{\"allowTransfer(address,uint256)\":{\"notice\":\"Allow a one time transfer of `tokenId` to `recipient`.\"},\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"metadataResolver()\":{\"notice\":\"Gets the token metadata resolver address.\"},\"name()\":{\"notice\":\"Gets the name of the token. E.g. \\\"My Token\\\".\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"removeAllowedTransfer(uint256)\":{\"notice\":\"Remove the one time transfer that was allowed before for `tokenId`.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"symbol()\":{\"notice\":\"Gets the symbol of the token. E.g. \\\"TOK\\\".\"},\"tokenURI(uint256)\":{\"notice\":\"Gets the metadata URI for a token identifier.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateNFTv1.sol\":\"OpenCampusCertificateNFTv1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\\n/// @notice Thrown when an ETH transfer has failed.\\nerror TransferFailed();\\n\",\"keccak256\":\"0xe1641af73913734b212608859490f9ed908e05b496b93f91394ef68b05149da7\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0xc9af7c4099603d6fc1e055aa8ace87c763ceb0ad98444b11a96c6af9b0896ab6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0xb1ab900d6c9214bf879678a146478078a0dc5e17c45939abe5a446443f8d0278\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0xc079cdcd69d1b6acb3d177b9bf7978f63469088aecb5f5b494bd1607ce41a0f1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/AccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `role` is granted to `account`.\\n/// @param role The role that has been granted.\\n/// @param account The account that has been granted the role.\\n/// @param operator The account that granted the role.\\nevent RoleGranted(bytes32 role, address account, address operator);\\n\\n/// @notice Emitted when `role` is revoked from `account`.\\n/// @param role The role that has been revoked.\\n/// @param account The account that has been revoked the role.\\n/// @param operator The account that revoked the role.\\nevent RoleRevoked(bytes32 role, address account, address operator);\\n\",\"keccak256\":\"0x148f1a275d72a7985c7ac3377d37db2aa594e20388b1941588e1944affd5a5ed\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0x0879bfb12b3114daaee41de9819634e2ce56e601c60383e365ec8656f2de2645\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {RoleGranted, RoleRevoked} from \\\"./../events/AccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using Address for address;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) revert NotTargetContractRoleHolder(targetContract, role, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf081ecfcd8e27e943e1fae5a7a39e3e73a1c08b959f8b9ed18dd0cc1616c42d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {ERC721Storage} from \\\"./libraries/ERC721Storage.sol\\\";\\nimport {ERC721MetadataBase} from \\\"./base/ERC721MetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (immutable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC721Metadata is ERC721MetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interfaces as supported: ERC721Metadata.\\n    /// @param name The name of the token.\\n    /// @param symbol The symbol of the token.\\n    /// @param metadataResolver The address of the metadata resolver contract.\\n    constructor(string memory name, string memory symbol, ITokenMetadataResolver metadataResolver) {\\n        TokenMetadataStorage.layout().constructorInit(name, symbol, metadataResolver);\\n        ERC721Storage.initERC721Metadata();\\n    }\\n}\\n\",\"keccak256\":\"0xac99339291f02854aa42d0f2dec641b2173a1e223def657a1238045abca2e6ac\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/base/ERC721MetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {ERC721Storage} from \\\"./../libraries/ERC721Storage.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../../metadata/libraries/TokenMetadataStorage.sol\\\";\\nimport {TokenMetadataBase} from \\\"./../../metadata/base/TokenMetadataBase.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata (proxiable version).\\n/// @notice This contracts uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC721 (Non-Fungible Token Standard).\\nabstract contract ERC721MetadataBase is TokenMetadataBase, IERC721Metadata {\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @inheritdoc IERC721Metadata\\n    function name() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenName) {\\n        return TokenMetadataBase.name();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function symbol() public view virtual override(IERC721Metadata, TokenMetadataBase) returns (string memory tokenSymbol) {\\n        return TokenMetadataBase.symbol();\\n    }\\n\\n    /// @inheritdoc IERC721Metadata\\n    function tokenURI(uint256 tokenId) external view virtual returns (string memory uri) {\\n        ERC721Storage.layout().ownerOf(tokenId); // reverts if the token does not exist\\n        return TokenMetadataStorage.layout().tokenMetadataURI(address(this), tokenId);\\n    }\\n}\\n\",\"keccak256\":\"0x47800092ccc5f2a00bf3d965fdf07c754994325ff67727f88a7039b5a22af6a5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when trying to approve oneself.\\n/// @param account The account trying to approve itself.\\nerror ERC721SelfApproval(address account);\\n\\n/// @notice Thrown when trying to approveForAll oneself.\\n/// @param account The account trying to approveForAll itself.\\nerror ERC721SelfApprovalForAll(address account);\\n\\n/// @notice Thrown when a sender tries to set a token approval but is neither the owner nor approvedForAll by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForApproval(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when transferring a token to the zero address.\\nerror ERC721TransferToAddressZero();\\n\\n/// @notice Thrown when a token does not exist but is required to.\\n/// @param tokenId The identifier of the token that was checked.\\nerror ERC721NonExistingToken(uint256 tokenId);\\n\\n/// @notice Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner.\\n/// @param sender The message sender.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonApprovedForTransfer(address sender, address owner, uint256 tokenId);\\n\\n/// @notice Thrown when a token is not owned by the expected account.\\n/// @param account The account that was expected to own the token.\\n/// @param tokenId The identifier of the token.\\nerror ERC721NonOwnedToken(address account, uint256 tokenId);\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\n/// @param tokenId The identifier of the token.\\nerror ERC721SafeTransferRejected(address recipient, uint256 tokenId);\\n\\n/// @notice Thrown when querying the balance of the zero address.\\nerror ERC721BalanceOfAddressZero();\\n\",\"keccak256\":\"0x5a7728742c0a36674604bce1fcdde1ed20ea82e24d52230e2402330c7aeb936f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token to the zero address.\\nerror ERC721MintToAddressZero();\\n\\n/// @notice Thrown when minting a token that already exists.\\n/// @param tokenId The identifier of the token that already exists.\\nerror ERC721ExistingToken(uint256 tokenId);\\n\",\"keccak256\":\"0x5c5cb591b462aa02d8a3776435a04e6187a396ec56d1afc05adb10f5674c474a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721MintableOnceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when minting a token which has been burnt before (MintableOnce implementation).\\n/// @param tokenId The identifier of the token that has been burnt before.\\nerror ERC721BurntToken(uint256 tokenId);\\n\",\"keccak256\":\"0xc784bff7eaf50720bfd8a98f0fab63c7726955d273080c5a9a09751ff294a050\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when a token is transferred.\\n/// @param from The previous token owner.\\n/// @param to The new token owner.\\n/// @param tokenId The transferred token identifier.\\nevent Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n/// @notice Emitted when a single token approval is set.\\n/// @param owner The token owner.\\n/// @param approved The approved address.\\n/// @param tokenId The approved token identifier.\\nevent Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n/// @notice Emitted when an approval for all tokens is set or unset.\\n/// @param owner The tokens owner.\\n/// @param operator The approved address.\\n/// @param approved True when then approval is set, false when it is unset.\\nevent ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n\",\"keccak256\":\"0x571ee6d1e5b5719a164e0a37f4ac5c0eec78971237f73ac7d2292ab5ec7304cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0xb3e4a62f3cd743d7bc3b1483cbcf73d3f97b711ed707fcc833dcfb46a3bd883c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721BatchTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Batch Transfer.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0xf3993d11.\\ninterface IERC721BatchTransfer {\\n    /// @notice Unsafely transfers a batch of tokens to a recipient.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event for each of `tokenIds`.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(address from, address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x41cc8c091ecfdf20900ea354516489de4d2cfa8120c79d5245c58909d28cc2e6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8b8b4ef5.\\ninterface IERC721Burnable {\\n    /// @notice Burns a token.\\n    /// @dev Reverts if `tokenId` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(address from, uint256 tokenId) external;\\n\\n    /// @notice Burns a batch of tokens.\\n    /// @dev Reverts if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits an {IERC721-Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(address from, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x2909771d45713ca7de024b3cd455541aefdf07ab06ba6fbad5d4e23e0312b1c1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Deliverable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Deliverable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x9da5e832.\\ninterface IERC721Deliverable {\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Reverts if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(address[] calldata recipients, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0xb5b81a351ea90ca123710e885ce55d27fb47a33799aa36cff6ed54bf888205ad\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Metadata.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x5b5e139f.\\ninterface IERC721Metadata {\\n    /// @notice Gets the name of the token. E.g. \\\"My Token\\\".\\n    /// @return tokenName The name of the token.\\n    function name() external view returns (string memory tokenName);\\n\\n    /// @notice Gets the symbol of the token. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The symbol of the token.\\n    function symbol() external view returns (string memory tokenSymbol);\\n\\n    /// @notice Gets the metadata URI for a token identifier.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier.\\n    /// @return uri The metadata URI for the token identifier.\\n    function tokenURI(uint256 tokenId) external view returns (string memory uri);\\n}\\n\",\"keccak256\":\"0x8a3320229df0f11383b11343e690e1daf4c8f3ead813815780fbfe8594353347\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x8e773e13.\\ninterface IERC721Mintable {\\n    /// @notice Unsafely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(address to, uint256 tokenId) external;\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `tokenId` already exists.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if one of `tokenIds` already exists.\\n    /// @dev Emits an {IERC721-Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(address to, uint256[] calldata tokenIds) external;\\n}\\n\",\"keccak256\":\"0x178dd5fcc93687dbc5c6ecb8bfb0dedb603f65f9b46b61a065adcb108000f0f6\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC721 Non-Fungible Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC721 contracts.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev Note: The ERC-165 identifier for this interface is 0x150b7a02.\\ninterface IERC721Receiver {\\n    /// @notice Handles the receipt of an ERC721 token.\\n    /// @dev Note: This function is called by an ERC721 contract after a safe transfer.\\n    /// @dev Note: The ERC721 contract address is always the message sender.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous token owner.\\n    /// @param tokenId The token identifier.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC721Received(address,address,uint256,bytes)\\\"))` (`0x150b7a02`) to accept, any other value to refuse.\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xae509e05bf8fc7e45b5b8defb0c9d75b70eb40b76c181ae2020ae50b7313f739\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC721SelfApproval, ERC721SelfApprovalForAll, ERC721NonApprovedForApproval, ERC721TransferToAddressZero, ERC721NonExistingToken, ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected, ERC721BalanceOfAddressZero} from \\\"./../errors/ERC721Errors.sol\\\";\\nimport {ERC721MintToAddressZero, ERC721ExistingToken} from \\\"./../errors/ERC721MintableErrors.sol\\\";\\nimport {ERC721BurntToken} from \\\"./../errors/ERC721MintableOnceErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {Transfer, Approval, ApprovalForAll} from \\\"./../events/ERC721Events.sol\\\";\\nimport {IERC721} from \\\"./../interfaces/IERC721.sol\\\";\\nimport {IERC721BatchTransfer} from \\\"./../interfaces/IERC721BatchTransfer.sol\\\";\\nimport {IERC721Metadata} from \\\"./../interfaces/IERC721Metadata.sol\\\";\\nimport {IERC721Mintable} from \\\"./../interfaces/IERC721Mintable.sol\\\";\\nimport {IERC721Deliverable} from \\\"./../interfaces/IERC721Deliverable.sol\\\";\\nimport {IERC721Burnable} from \\\"./../interfaces/IERC721Burnable.sol\\\";\\nimport {IERC721Receiver} from \\\"./../interfaces/IERC721Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC721Storage {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(uint256 => uint256) owners;\\n        mapping(address => uint256) balances;\\n        mapping(uint256 => address) approvals;\\n        mapping(address => mapping(address => bool)) operators;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.ERC721.ERC721.storage\\\")) - 1);\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n\\n    // Single token approval flag\\n    // This bit is set in the owner's value to indicate that there is an approval set for this token\\n    uint256 internal constant TOKEN_APPROVAL_OWNER_FLAG = 1 << 160;\\n\\n    // Burnt token magic value\\n    // This magic number is used as the owner's value to indicate that the token has been burnt\\n    uint256 internal constant BURNT_TOKEN_OWNER_VALUE = 0xdead000000000000000000000000000000000000000000000000000000000000;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721.\\n    function init() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721BatchTransfer.\\n    function initERC721BatchTransfer() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721BatchTransfer).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Metadata.\\n    function initERC721Metadata() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Metadata).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Mintable.\\n    function initERC721Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Deliverable.\\n    function initERC721Deliverable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Deliverable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC721Burnable.\\n    function initERC721Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC721Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: This function implements {ERC721-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721SelfApproval} if `to` is the token owner.\\n    /// @dev Reverts with {ERC721NonApprovedForApproval} if `sender` is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param sender The message sender.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(Layout storage s, address sender, address to, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        address ownerAddress = _tokenOwner(owner);\\n        if (to == ownerAddress) revert ERC721SelfApproval(ownerAddress);\\n        if (!_isOperatable(s, ownerAddress, sender)) revert ERC721NonApprovedForApproval(sender, ownerAddress, tokenId);\\n        if (to == address(0)) {\\n            if (_tokenHasApproval(owner)) {\\n                // remove the approval bit if it is present\\n                s.owners[tokenId] = uint256(uint160(ownerAddress));\\n            }\\n        } else {\\n            uint256 ownerWithApprovalBit = owner | TOKEN_APPROVAL_OWNER_FLAG;\\n            if (owner != ownerWithApprovalBit) {\\n                // add the approval bit if it is not present\\n                s.owners[tokenId] = ownerWithApprovalBit;\\n            }\\n            s.approvals[tokenId] = to;\\n        }\\n        emit Approval(ownerAddress, to, tokenId);\\n    }\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Note: This function implements {ERC721-setApprovalForAll(address,bool)}.\\n    /// @dev Reverts with {ERC721SelfApprovalForAll} if `sender` is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param sender The message sender.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(Layout storage s, address sender, address operator, bool approved) internal {\\n        if (operator == sender) revert ERC721SelfApprovalForAll(sender);\\n        s.operators[sender][operator] = approved;\\n        emit ApprovalForAll(sender, operator, approved);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n        if (from != to) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                --s.balances[from];\\n                //  cannot overflow as supply cannot overflow\\n                ++s.balances[to];\\n            }\\n        }\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, \\\"\\\");\\n        }\\n    }\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 tokenId, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, from, to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers a batch of tokens to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC721BatchTransfer-batchTransferFrom(address,address,uint256[])}.\\n    /// @dev Resets the token approval for each of `tokenIds`.\\n    /// @dev Reverts with {ERC721TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721NonExistingToken} if one of `tokenIds` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if the sender is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from Current tokens owner.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenIds Identifiers of the tokens to transfer.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address to, uint256[] calldata tokenIds) internal {\\n        if (to == address(0)) revert ERC721TransferToAddressZero();\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(from, to, tokenId);\\n        }\\n\\n        if (from != to && length != 0) {\\n            unchecked {\\n                // cannot underflow as balance is verified through ownership\\n                s.balances[from] -= length;\\n                // cannot overflow as supply cannot overflow\\n                s.balances[to] += length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mint(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n        if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMint(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mint(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMint(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            if (_tokenExists(s.owners[tokenId])) revert ERC721ExistingToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliver(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            s.mint(recipients[i], tokenIds[i]);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-mint(address,uint256)}.\\n    /// @dev Note: Either `mint` or `mintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    function mintOnce(Layout storage s, address to, uint256 tokenId) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 owner = s.owners[tokenId];\\n        if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n        if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n        s.owners[tokenId] = uint256(uint160(to));\\n\\n        unchecked {\\n            // cannot overflow due to the cost of minting individual tokens\\n            ++s.balances[to];\\n        }\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /// @notice Safely mints a token once.\\n    /// @dev Note: This function implements {ERC721Mintable-safeMint(address,uint256,bytes)}.\\n    /// @dev Note: Either `safeMint` or `safeMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if `tokenId` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if `tokenId` has been previously burnt.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event from the zero address.\\n    /// @param to Address of the new token owner.\\n    /// @param tokenId Identifier of the token to mint.\\n    /// @param data Optional data to pass along to the receiver call.\\n    function safeMintOnce(Layout storage s, address sender, address to, uint256 tokenId, bytes memory data) internal {\\n        s.mintOnce(to, tokenId);\\n        if (to.isContract()) {\\n            _callOnERC721Received(sender, address(0), to, tokenId, data);\\n        }\\n    }\\n\\n    /// @notice Unsafely mints a batch of tokens once.\\n    /// @dev Note: This function implements {ERC721Mintable-batchMint(address,uint256[])}.\\n    /// @dev Note: Either `batchMint` or `batchMintOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `tokenIds`.\\n    /// @param to Address of the new tokens owner.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function batchMintOnce(Layout storage s, address to, uint256[] memory tokenIds) internal {\\n        if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n\\n        unchecked {\\n            s.balances[to] += length;\\n        }\\n    }\\n\\n    /// @notice Unsafely mints tokens to multiple recipients once.\\n    /// @dev Note: This function implements {ERC721Deliverable-deliver(address[],uint256[])}.\\n    /// @dev Note: Either `deliver` or `deliverOnce` should be used in a given contract, but not both.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `tokenIds` have different lengths.\\n    /// @dev Reverts with {ERC721MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC721ExistingToken} if one of `tokenIds` already exists.\\n    /// @dev Reverts with {ERC721BurntToken} if one of `tokenIds` has been previously burnt.\\n    /// @dev Emits a {Transfer} event from the zero address for each of `recipients` and `tokenIds`.\\n    /// @param recipients Addresses of the new tokens owners.\\n    /// @param tokenIds Identifiers of the tokens to mint.\\n    function deliverOnce(Layout storage s, address[] memory recipients, uint256[] memory tokenIds) internal {\\n        uint256 length = recipients.length;\\n        if (length != tokenIds.length) revert InconsistentArrayLengths();\\n        for (uint256 i; i < length; ++i) {\\n            address to = recipients[i];\\n            if (to == address(0)) revert ERC721MintToAddressZero();\\n\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (_tokenExists(owner)) revert ERC721ExistingToken(tokenId);\\n            if (_tokenWasBurnt(owner)) revert ERC721BurntToken(tokenId);\\n\\n            s.owners[tokenId] = uint256(uint160(to));\\n            unchecked {\\n                ++s.balances[to];\\n            }\\n\\n            emit Transfer(address(0), to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Burns a token by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `tokenId` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param sender The message sender.\\n    /// @param from The current token owner.\\n    /// @param tokenId The identifier of the token to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 tokenId) internal {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n\\n        if (!_isOperatable(s, from, sender)) {\\n            if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n        }\\n\\n        s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n\\n        unchecked {\\n            // cannot underflow as balance is verified through TOKEN ownership\\n            --s.balances[from];\\n        }\\n        emit Transfer(from, address(0), tokenId);\\n    }\\n\\n    /// @notice Burns a batch of tokens by a sender.\\n    /// @dev Note: This function implements {ERC721Burnable-batchBurnFrom(address,uint256[])}.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if one of `tokenIds` is not owned by `from`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `sender` is not `from` and has not been approved by `from` for each of `tokenIds`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address for each of `tokenIds`.\\n    /// @param sender The message sender.\\n    /// @param from The current tokens owner.\\n    /// @param tokenIds The identifiers of the tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address from, uint256[] calldata tokenIds) internal {\\n        bool operatable = _isOperatable(s, from, sender);\\n\\n        uint256 length = tokenIds.length;\\n        for (uint256 i; i < length; ++i) {\\n            uint256 tokenId = tokenIds[i];\\n            uint256 owner = s.owners[tokenId];\\n            if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n            if (_tokenOwner(owner) != from) revert ERC721NonOwnedToken(from, tokenId);\\n            if (!operatable) {\\n                if (!_tokenHasApproval(owner) || sender != s.approvals[tokenId]) revert ERC721NonApprovedForTransfer(sender, from, tokenId);\\n            }\\n            s.owners[tokenId] = BURNT_TOKEN_OWNER_VALUE;\\n            emit Transfer(from, address(0), tokenId);\\n        }\\n\\n        if (length != 0) {\\n            unchecked {\\n                s.balances[from] -= length;\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Note: This function implements {ERC721-balanceOf(address)}.\\n    /// @dev Reverts with {ERC721BalanceOfAddressZero} if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        if (owner == address(0)) revert ERC721BalanceOfAddressZero();\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Note: This function implements {ERC721-ownerOf(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token.\\n    function ownerOf(Layout storage s, uint256 tokenId) internal view returns (address tokenOwner) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        return _tokenOwner(owner);\\n    }\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Note: This function implements {ERC721-getApproved(uint256)}.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(Layout storage s, uint256 tokenId) internal view returns (address approved) {\\n        uint256 owner = s.owners[tokenId];\\n        if (!_tokenExists(owner)) revert ERC721NonExistingToken(tokenId);\\n        if (_tokenHasApproval(owner)) {\\n            return s.approvals[tokenId];\\n        } else {\\n            return address(0);\\n        }\\n    }\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @dev Note: This function implements {ERC721-isApprovedForAll(address,address)}.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(Layout storage s, address owner, address operator) internal view returns (bool approvedForAll) {\\n        return s.operators[owner][operator];\\n    }\\n\\n    /// @notice Gets whether a token was burnt.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenWasBurnt Whether the token was burnt.\\n    function wasBurnt(Layout storage s, uint256 tokenId) internal view returns (bool tokenWasBurnt) {\\n        return _tokenWasBurnt(s.owners[tokenId]);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC721Receiver-onERC721Received} on a target contract.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param tokenId Identifier of the token transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC721Received(address sender, address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (IERC721Receiver(to).onERC721Received(sender, from, tokenId, data) != ERC721_RECEIVED) revert ERC721SafeTransferRejected(to, tokenId);\\n    }\\n\\n    /// @notice Returns whether an account is authorised to make a transfer on behalf of an owner.\\n    /// @param owner The token owner.\\n    /// @param account The account to check the operatability of.\\n    /// @return operatable True if `account` is `owner` or is an operator for `owner`, false otherwise.\\n    function _isOperatable(Layout storage s, address owner, address account) private view returns (bool operatable) {\\n        return (owner == account) || s.operators[owner][account];\\n    }\\n\\n    function _tokenOwner(uint256 owner) private pure returns (address tokenOwner) {\\n        return address(uint160(owner));\\n    }\\n\\n    function _tokenExists(uint256 owner) private pure returns (bool tokenExists) {\\n        return uint160(owner) != 0;\\n    }\\n\\n    function _tokenWasBurnt(uint256 owner) private pure returns (bool tokenWasBurnt) {\\n        return owner == BURNT_TOKEN_OWNER_VALUE;\\n    }\\n\\n    function _tokenHasApproval(uint256 owner) private pure returns (bool tokenHasApproval) {\\n        return owner & TOKEN_APPROVAL_OWNER_FLAG != 0;\\n    }\\n}\\n\",\"keccak256\":\"0x40da2c1c1b3973635cf3e3e38f4eec17609adcbf8473a52be6838bb392f72065\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/base/TokenMetadataBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {TokenMetadataStorage} from \\\"./../libraries/TokenMetadataStorage.sol\\\";\\n\\n/// @title TokenMetadataBase (proxiable version).\\n/// @notice Provides metadata management for token contracts (ERC721/ERC1155) which uses an external resolver for managing individual tokens metadata.\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\nabstract contract TokenMetadataBase {\\n    using TokenMetadataStorage for TokenMetadataStorage.Layout;\\n\\n    /// @notice Gets the token name. E.g. \\\"My Token\\\".\\n    /// @return tokenName The token name.\\n    function name() public view virtual returns (string memory tokenName) {\\n        return TokenMetadataStorage.layout().name();\\n    }\\n\\n    /// @notice Gets the token symbol. E.g. \\\"TOK\\\".\\n    /// @return tokenSymbol The token symbol.\\n    function symbol() public view virtual returns (string memory tokenSymbol) {\\n        return TokenMetadataStorage.layout().symbol();\\n    }\\n\\n    /// @notice Gets the token metadata resolver address.\\n    /// @return tokenMetadataResolver The token metadata resolver address.\\n    function metadataResolver() external view virtual returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return TokenMetadataStorage.layout().metadataResolver();\\n    }\\n}\\n\",\"keccak256\":\"0xe0e94c8ec39fa574fd51f6d6f38f130c6ed1f7c39ee3a69f6e706b28adb361d2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ITokenMetadataResolver\\n/// @notice Interface for Token Metadata Resolvers.\\ninterface ITokenMetadataResolver {\\n    /// @notice Gets the token metadata URI for a token.\\n    /// @param tokenContract The token contract for which to retrieve the token URI.\\n    /// @param tokenId The token identifier.\\n    /// @return tokenURI The token metadata URI.\\n    function tokenMetadataURI(address tokenContract, uint256 tokenId) external view returns (string memory tokenURI);\\n}\\n\",\"keccak256\":\"0x28df7a61077a65ec6286fad9899ddc2a608a6a3e1c215e332eeba3c3367e9427\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/metadata/libraries/TokenMetadataStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ITokenMetadataResolver} from \\\"./../interfaces/ITokenMetadataResolver.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary TokenMetadataStorage {\\n    struct Layout {\\n        string tokenName;\\n        string tokenSymbol;\\n        ITokenMetadataResolver tokenMetadataResolver;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.token.metadata.TokenMetadata.phase\\\")) - 1);\\n\\n    /// @notice Initializes the metadata storage (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function constructorInit(\\n        Layout storage s,\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Initializes the metadata storage (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @param tokenName The token name.\\n    /// @param tokenSymbol The token symbol.\\n    /// @param tokenMetadataResolver The address of the metadata resolver contract.\\n    function proxyInit(\\n        Layout storage s,\\n        string calldata tokenName,\\n        string calldata tokenSymbol,\\n        ITokenMetadataResolver tokenMetadataResolver\\n    ) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.tokenName = tokenName;\\n        s.tokenSymbol = tokenSymbol;\\n        s.tokenMetadataResolver = tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the name of the token.\\n    /// @return tokenName The name of the token contract.\\n    function name(Layout storage s) internal view returns (string memory tokenName) {\\n        return s.tokenName;\\n    }\\n\\n    /// @notice Gets the symbol of the token.\\n    /// @return tokenSymbol The symbol of the token contract.\\n    function symbol(Layout storage s) internal view returns (string memory tokenSymbol) {\\n        return s.tokenSymbol;\\n    }\\n\\n    /// @notice Gets the address of the token metadata resolver.\\n    /// @return tokenMetadataResolver The address of the token metadata resolver.\\n    function metadataResolver(Layout storage s) internal view returns (ITokenMetadataResolver tokenMetadataResolver) {\\n        return s.tokenMetadataResolver;\\n    }\\n\\n    /// @notice Gets the token metadata URI retieved from the metadata resolver contract.\\n    /// @param tokenContract The address of the token contract.\\n    /// @param tokenId The ID of the token.\\n    function tokenMetadataURI(Layout storage s, address tokenContract, uint256 tokenId) internal view returns (string memory) {\\n        return s.tokenMetadataResolver.tokenMetadataURI(tokenContract, tokenId);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc73c0cd8f6fc5df867e9e615a1cd9152bc0e94ee677951bc92d15e1b922bcac0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateNFTv1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ITokenMetadataResolver} from \\\"@animoca/ethereum-contracts/contracts/token/metadata/interfaces/ITokenMetadataResolver.sol\\\";\\nimport {IERC721} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721Receiver.sol\\\";\\nimport {ERC721Metadata} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/ERC721Metadata.sol\\\";\\nimport {ERC721NonApprovedForTransfer, ERC721NonOwnedToken, ERC721SafeTransferRejected} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/errors/ERC721Errors.sol\\\";\\nimport {Transfer} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/events/ERC721Events.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {ERC721Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC721/libraries/ERC721Storage.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {CertificateNFTv1MetaData} from \\\"./libraries/CertificateNFTv1MetaData.sol\\\";\\nimport {TransferAllowed, AllowedTransferRemoved} from \\\"./events/OpenCampusCertificateNFTv1Events.sol\\\";\\n\\ncontract OpenCampusCertificateNFTv1 is IERC721, ERC721Metadata, AccessControl {\\n    using Address for address;\\n    using ERC721Storage for ERC721Storage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using CertificateNFTv1MetaData for CertificateNFTv1MetaData.MetaData;\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n    IRevocationRegistry internal _revocationRegistry;\\n\\n    bytes4 internal constant ERC721_RECEIVED = IERC721Receiver.onERC721Received.selector;\\n    bytes32 public constant MINTER_ROLE = \\\"minter\\\";\\n    bytes32 public constant OPERATOR_ROLE = \\\"operator\\\";\\n    mapping(uint256 => CertificateNFTv1MetaData.MetaData) public vcData;\\n    mapping(uint256 => address) public allowedTransfers;\\n\\n    /// @notice Thrown when any transfer functions are called but not allowed.\\n    error TransferNotAllowed();\\n\\n    /// @notice Thrown when any operator related methods are called.\\n    error NoOperatorAllowed();\\n\\n    /// @notice Thrown when burn operation cannot be executed.\\n    error InvalidBurn();\\n\\n    /// @notice Thrown when allowed transfer is called with receipt same as owner.\\n    error RedundantAllowedTransfer(address recipient);\\n\\n    /// @notice Thrown when there is no allowed transfer for `tokenId`\\n    error NonExistingAllowedTransfer(uint256 tokenId);\\n\\n    constructor(\\n        string memory tokenName,\\n        string memory tokenSymbol,\\n        ITokenMetadataResolver metadataResolver,\\n        IRevocationRegistry revocationRegistry,\\n        IIssuersDIDRegistry didRegistry\\n    ) ContractOwnership(msg.sender) ERC721Metadata(tokenName, tokenSymbol, metadataResolver) {\\n        ERC721Storage.initERC721Mintable();\\n        DID_REGISTRY = didRegistry;\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @param revocationRegistry The address of the Revocation Registry contract.\\n    function setRevocationRegistry(IRevocationRegistry revocationRegistry) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        _revocationRegistry = revocationRegistry;\\n    }\\n\\n    /// @dev Reverts with `NotRoleHolder` if the sender does not have the 'minter' role.\\n    function mint(address to, uint256 tokenId, CertificateNFTv1MetaData.MetaData calldata metadata) external {\\n        AccessControlStorage.layout().enforceHasRole(MINTER_ROLE, msg.sender);\\n\\n        ERC721Storage.layout().mint(to, tokenId);\\n        vcData[tokenId] = metadata;\\n    }\\n\\n    /// @dev Reverts with `InvalidBurn` if the tokenId has not been invalidated.\\n    /// @dev Emit a `Transfer` event to address 0 when the token has been burnt.\\n    /// @param tokenId The Token Id to be burnt.\\n    /// Burn tokenId only if tokenId has been legitimately revoked in Revocation Registry.\\n    function burn(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        if (_revocationRegistry.isRevoked(hashedDid, tokenId)) {\\n            address owner = ERC721Storage.layout().ownerOf(tokenId);\\n            ERC721Storage.layout().owners[tokenId] = ERC721Storage.BURNT_TOKEN_OWNER_VALUE;\\n\\n            unchecked {\\n                // cannot underflow as balance is verified through TOKEN ownership\\n                --ERC721Storage.layout().balances[owner];\\n            }\\n            emit Transfer(owner, address(0), tokenId);\\n        } else {\\n            revert InvalidBurn();\\n        }\\n    }\\n\\n    /// @notice Allow a one time transfer of `tokenId` to `recipient`.\\n    /// @dev emit a `TransferAllowed` event upon successful operation.\\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\\n    /// @dev Reverts with `RedundantApproval` if `recipient` is the same owner of `tokenId`.\\n    /// @param recipient The address to which transfer would be allowed.\\n    /// @param tokenId The tokenId to be allowed for transfer.\\n    function allowTransfer(address recipient, uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\\n        }\\n\\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\\n        if (owner == recipient) revert RedundantAllowedTransfer(recipient);\\n\\n        allowedTransfers[tokenId] = recipient;\\n        emit TransferAllowed(recipient, tokenId, msg.sender);\\n    }\\n\\n    /// @notice Remove the one time transfer that was allowed before for `tokenId`.\\n    /// @dev emit a `AllowedTransferRemoved` event upon successful operation.\\n    /// @dev Reverts with `NotRoleHolder` if msg.senger is neither allowed token issuer nor an operator for this contract.\\n    /// @dev Reverts with `ERC721NonExistingToken` if `tokenId` is not a valid token.\\n    /// @dev Reverts with `NonExistingApproval` if there is not an allowed transfer for `tokenId`.\\n    /// @param tokenId The tokenId of which allowed transfer would be removed.\\n    function removeAllowedTransfer(uint256 tokenId) external {\\n        bytes32 hashedDid = keccak256(abi.encodePacked(vcData[tokenId].issuerDid));\\n        // either the sender is allowed to operate on behalf of the issuer\\n        // or sender has operator role for this NFT\\n        if (!DID_REGISTRY.issuers(hashedDid, msg.sender)) {\\n            AccessControlStorage.layout().enforceHasRole(OPERATOR_ROLE, msg.sender);\\n        }\\n\\n        if (allowedTransfers[tokenId] == address(0)) revert NonExistingAllowedTransfer(tokenId);\\n        emit AllowedTransferRemoved(allowedTransfers[tokenId], tokenId, msg.sender);\\n        delete allowedTransfers[tokenId];\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function balanceOf(address owner) external view returns (uint256 balance) {\\n        return ERC721Storage.layout().balanceOf(owner);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner) {\\n        return ERC721Storage.layout().ownerOf(tokenId);\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function getApproved(uint256 tokenId) external view returns (address approved) {\\n        revert NoOperatorAllowed();\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function approve(address to, uint256 tokenId) external virtual {\\n        revert TransferNotAllowed();\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function setApprovalForAll(address operator, bool approved) external virtual {\\n        revert NoOperatorAllowed();\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-transferFrom(address,address,uint256)}.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) public {\\n        address owner = ERC721Storage.layout().ownerOf(tokenId);\\n        if (owner != msg.sender) revert ERC721NonOwnedToken(msg.sender, tokenId);\\n        if (from != owner || allowedTransfers[tokenId] != to) revert ERC721NonApprovedForTransfer(from, owner, tokenId);\\n\\n        ERC721Storage.layout().owners[tokenId] = uint256(uint160(to));\\n        // already verified during approval that owner cannot be the same as to\\n        unchecked {\\n            // cannot underflow as balance is verified through ownership\\n            --ERC721Storage.layout().balances[owner];\\n            //  cannot overflow as supply cannot overflow\\n            ++ERC721Storage.layout().balances[to];\\n        }\\n\\n        delete allowedTransfers[tokenId];\\n        emit Transfer(owner, to, tokenId);\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external virtual {\\n        transferFrom(from, to, tokenId);\\n        if (to.isContract()) {\\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, \\\"\\\") != ERC721_RECEIVED)\\n                revert ERC721SafeTransferRejected(to, tokenId);\\n        }\\n    }\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously\\n    /// approved by a token's issuer or an operator.\\n    /// @dev Note: This function implements {ERC721-safeTransferFrom(address,address,uint256)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev remove the existing approval for `tokenId`.\\n    /// @dev Reverts with {ERC721NonExistingToken} if `tokenId` does not exist.\\n    /// @dev Reverts with {ERC721NonOwnedToken} if `msg.sender` is not the owner of `tokenId`.\\n    /// @dev Reverts with {ERC721NonApprovedForTransfer} if `to` has not been approved for transfer for `tokenId`.\\n    /// @dev Reverts with {ERC721SafeTransferRejected} if `to` is a contract and the call to\\n    ///  {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external virtual {\\n        transferFrom(from, to, tokenId);\\n        if (to.isContract()) {\\n            if (IERC721Receiver(to).onERC721Received(msg.sender, from, tokenId, data) != ERC721_RECEIVED)\\n                revert ERC721SafeTransferRejected(to, tokenId);\\n        }\\n    }\\n\\n    /// @inheritdoc IERC721\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll) {\\n        revert NoOperatorAllowed();\\n    }\\n}\\n\",\"keccak256\":\"0x05ccd61c0eca08a80b1160b7a839c37e46edb7ed5fd438d444104bb7d5c89cac\",\"license\":\"MIT\"},\"contracts/vc/events/OpenCampusCertificateNFTv1Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`.\\n/// @param recipient The address to which transfer was approved for.\\n/// @param tokenId The tokenId that was approved for transfer.\\n/// @param sender The account that approved the transfer.\\nevent TransferAllowed(address indexed recipient, uint256 indexed tokenId, address sender);\\n\\n/// @notice Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`.\\n/// @param recipient The address to which transfer was approved for.\\n/// @param tokenId The tokenId that was approved for transfer.\\n/// @param sender The account that approved the transfer.\\nevent AllowedTransferRemoved(address indexed recipient, uint256 indexed tokenId, address sender);\\n\\n\",\"keccak256\":\"0xff5220949ff5f6d724dcfbdb5335973ed82345bdcb83e449db1e91d8fa226fc2\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function currentNonce() external view returns (uint256 nonce);\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0xc8d0c75f88a0cc7324a0155ca47eddf4de4f093195df083f55382679098d2585\",\"license\":\"MIT\"},\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4207,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"_revocationRegistry","offset":0,"slot":"0","type":"t_contract(IRevocationRegistry)4884"},{"astId":4223,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"vcData","offset":0,"slot":"1","type":"t_mapping(t_uint256,t_struct(MetaData)4901_storage)"},{"astId":4227,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"allowedTransfers","offset":0,"slot":"2","type":"t_mapping(t_uint256,t_address)"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_contract(IRevocationRegistry)4884":{"encoding":"inplace","label":"contract IRevocationRegistry","numberOfBytes":"20"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_mapping(t_uint256,t_struct(MetaData)4901_storage)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => struct CertificateNFTv1MetaData.MetaData)","numberOfBytes":"32","value":"t_struct(MetaData)4901_storage"},"t_string_storage":{"encoding":"bytes","label":"string","numberOfBytes":"32"},"t_struct(MetaData)4901_storage":{"encoding":"inplace","label":"struct CertificateNFTv1MetaData.MetaData","members":[{"astId":4888,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"schemaVersion","offset":0,"slot":"0","type":"t_uint16"},{"astId":4890,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"achievementType","offset":2,"slot":"0","type":"t_uint16"},{"astId":4892,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"awardedDate","offset":4,"slot":"0","type":"t_uint64"},{"astId":4894,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"validFrom","offset":12,"slot":"0","type":"t_uint64"},{"astId":4896,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"validUtil","offset":20,"slot":"0","type":"t_uint64"},{"astId":4898,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"issuerDid","offset":0,"slot":"1","type":"t_string_storage"},{"astId":4900,"contract":"contracts/vc/OpenCampusCertificateNFTv1.sol:OpenCampusCertificateNFTv1","label":"achievementId","offset":0,"slot":"2","type":"t_string_storage"}],"numberOfBytes":"96"},"t_uint16":{"encoding":"inplace","label":"uint16","numberOfBytes":"2"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"},"t_uint64":{"encoding":"inplace","label":"uint64","numberOfBytes":"8"}}},"userdoc":{"errors":{"ERC721BalanceOfAddressZero()":[{"notice":"Thrown when querying the balance of the zero address."}],"ERC721ExistingToken(uint256)":[{"notice":"Thrown when minting a token that already exists."}],"ERC721MintToAddressZero()":[{"notice":"Thrown when minting a token to the zero address."}],"ERC721NonApprovedForTransfer(address,address,uint256)":[{"notice":"Thrown when a sender tries to transfer a token but is neither the owner nor approved by the owner."}],"ERC721NonExistingToken(uint256)":[{"notice":"Thrown when a token does not exist but is required to."}],"ERC721NonOwnedToken(address,uint256)":[{"notice":"Thrown when a token is not owned by the expected account."}],"ERC721SafeTransferRejected(address,uint256)":[{"notice":"Thrown when a safe transfer is rejected by the recipient contract."}],"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidBurn()":[{"notice":"Thrown when burn operation cannot be executed."}],"NoOperatorAllowed()":[{"notice":"Thrown when any operator related methods are called."}],"NonExistingAllowedTransfer(uint256)":[{"notice":"Thrown when there is no allowed transfer for `tokenId`"}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"RedundantAllowedTransfer(address)":[{"notice":"Thrown when allowed transfer is called with receipt same as owner."}],"TransferNotAllowed()":[{"notice":"Thrown when any transfer functions are called but not allowed."}]},"events":{"AllowedTransferRemoved(address,uint256,address)":{"notice":"Emitted when `tokenId`'s approval to transfer to `destination` is removed by `sender`."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."},"TransferAllowed(address,uint256,address)":{"notice":"Emitted when `tokenId` was granted approval to transfer to `destination` by `sender`."}},"kind":"user","methods":{"allowTransfer(address,uint256)":{"notice":"Allow a one time transfer of `tokenId` to `recipient`."},"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"metadataResolver()":{"notice":"Gets the token metadata resolver address."},"name()":{"notice":"Gets the name of the token. E.g. \"My Token\"."},"owner()":{"notice":"Gets the address of the contract owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"removeAllowedTransfer(uint256)":{"notice":"Remove the one time transfer that was allowed before for `tokenId`."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"safeTransferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"symbol()":{"notice":"Gets the symbol of the token. E.g. \"TOK\"."},"tokenURI(uint256)":{"notice":"Gets the metadata URI for a token identifier."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient by a sender. The transfer has to be previously approved by a token's issuer or an operator."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"IIssuersDIDRegistry":{"abi":[{"inputs":[{"internalType":"string","name":"did","type":"string"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"isIssuerAllowed","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedDid","type":"bytes32"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"issuers","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"IAllowedIssuersRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isIssuerAllowed(string,address)":"6f176f7e","issuers(bytes32,address)":"f9236a39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"isIssuerAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedDid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"issuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"IAllowedIssuersRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for registry to store allowed issuers for VCs to mint NFT VCs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":\"IIssuersDIDRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for registry to store allowed issuers for VCs to mint NFT VCs","version":1}}},"contracts/vc/interfaces/IRevocationRegistry.sol":{"IRevocationRegistry":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchRevokeVCs(bytes32,uint256[],uint256,bytes)":"4c66f71c","currentNonce()":"adb610a3","isRevoked(bytes32,uint256)":"a3a2656a","revokeVC(bytes32,uint256,uint256,bytes)":"12b7ad29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":\"IRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function currentNonce() external view returns (uint256 nonce);\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0xc8d0c75f88a0cc7324a0155ca47eddf4de4f093195df083f55382679098d2585\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/vc/libraries/CertificateNFTv1MetaData.sol":{"CertificateNFTv1MetaData":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201231007eaa5190b8a52803ce79f5b896996161375c29c5354e5291389473069664736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT BALANCE STOP PUSH31 0xAA5190B8A52803CE79F5B896996161375C29C5354E5291389473069664736F PUSH13 0x63430008160033000000000000 ","sourceMap":"58:262:45:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;58:262:45;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212201231007eaa5190b8a52803ce79f5b896996161375c29c5354e5291389473069664736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SLT BALANCE STOP PUSH31 0xAA5190B8A52803CE79F5B896996161375C29C5354E5291389473069664736F PUSH13 0x63430008160033000000000000 ","sourceMap":"58:262:45:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":\"CertificateNFTv1MetaData\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/libraries/CertificateNFTv1MetaData.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nlibrary CertificateNFTv1MetaData {\\n    struct MetaData {\\n        uint16 schemaVersion;\\n        uint16 achievementType;\\n        uint64 awardedDate;\\n        uint64 validFrom;\\n        uint64 validUtil;\\n        string issuerDid;\\n        string achievementId;\\n    }\\n}\\n\",\"keccak256\":\"0x360ecc7efdc982bebad68784d00c9a39ed40c853256e45aeb2d14a358f4c0b7e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}
{"id":"d6c9c9277721ce21febc6533cf2ad1b4","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/vc/events/RevocationRegistryEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when `caller` attempts to revoke `vcId`.\n/// @param hashedIssuerDid the hashed Did for the issuer\n/// @param caller address of caller that invoked the revocation.\n/// @param vcId The Id for the VC revoked.\nevent VcRevoked(bytes32 indexed hashedIssuerDid, address caller, uint256 indexed vcId);\n\n"},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title IAllowedIssuersRegistry\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\ninterface IIssuersDIDRegistry {\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\n\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\n}\n"},"contracts/vc/interfaces/IRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ninterface IRevocationRegistry {\n    function currentNonce() external view returns (uint256 nonce);\n\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\n\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\n\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\n}\n"},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {VcRevoked} from \"./events/RevocationRegistryEvents.sol\";\n\n/// @title OpenCampusCertificateRevocationRegistry.\n/// @notice A registry storing the revocation of VCs.\ncontract OpenCampusCertificateRevocationRegistry is IRevocationRegistry, ContractOwnership {\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n\n    mapping(bytes32 => mapping(uint256 => address)) public revocations;\n    uint256 public currentNonce;\n\n    /// @notice Thrown when the signature is invalid for the NFT payload.\n    error InvalidSignature();\n\n    error InvalidNonce();\n\n    error InvalidIssuer();\n\n    constructor(IIssuersDIDRegistry didRegistry) ContractOwnership(msg.sender) {\n        DID_REGISTRY = didRegistry;\n    }\n\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked) {\n        // Use-Cases\n        // 1. issuer addr/did valid & revoked => revoker valid address, DIDRegistry allowed => returns true\n        // 2. issuer addr/did valid when revoked, invalidated later in DIDRegistry => revoker valid address, DIDRegistry disallowed => returns false\n        // 3. vcId never revoked => revoker address zero => DIDRegistry disallowed => return false\n        address revoker = revocations[hashedIssuerDid][vcId];\n        return DID_REGISTRY.issuers(hashedIssuerDid, revoker);\n    }\n\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external {\n        if (nonce != currentNonce) {\n            revert InvalidNonce();\n        }\n\n        if (signature.length != 65) revert InvalidSignature();\n\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        assembly {\n            r := calldataload(signature.offset)\n            s := calldataload(add(signature.offset, 0x20))\n            v := calldataload(add(signature.offset, 0x21))\n        }\n\n        // Use the native ecrecover provided by the EVM\n        address signer = ecrecover(keccak256(abi.encode(hashedIssuerDid, vcId, nonce)), v, r, s);\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\n            revocations[hashedIssuerDid][vcId] = signer;\n            emit VcRevoked(hashedIssuerDid, signer, vcId);\n            ++currentNonce;\n        } else {\n            revert InvalidIssuer();\n        }\n    }\n\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external {\n        if (nonce != currentNonce) {\n            revert InvalidNonce();\n        }\n\n        if (signature.length != 65) revert InvalidSignature();\n\n        uint8 v;\n        bytes32 r;\n        bytes32 s;\n        assembly {\n            r := calldataload(signature.offset)\n            s := calldataload(add(signature.offset, 0x20))\n            v := calldataload(add(signature.offset, 0x21))\n        }\n\n        // Use the native ecrecover provided by the EVM\n        address signer = ecrecover(keccak256(abi.encode(hashedIssuerDid, vcIds, nonce)), v, r, s);\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\n            for (uint256 i; i < vcIds.length; i++) {\n                revocations[hashedIssuerDid][vcIds[i]] = signer;\n                emit VcRevoked(hashedIssuerDid, signer, vcIds[i]);\n            }\n            ++currentNonce;\n        } else {\n            revert InvalidIssuer();\n        }\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,940,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[940],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":941,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":940,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,940,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[918],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[588],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":919,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":589,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":918,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$588_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":587,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":606,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[541]},"id":542,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"58:179:11","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":541,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:11","nodeType":"ErrorDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:11","nodeType":"VariableDeclaration","scope":541,"src":"277:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":536,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:11","nodeType":"VariableDeclaration","scope":541,"src":"299:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:11"},"src":"237:80:11"}],"src":"32:286:11"},"id":11},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[541],"ProxyInitialization":[588],"StorageSlot":[1050]},"id":589,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":543,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":542,"src":"58:92:12","symbolAliases":[{"foreign":{"id":544,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"66:33:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":1051,"src":"151:74:12","symbolAliases":[{"foreign":{"id":546,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"159:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"227:92:12","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":588,"linearizedBaseContracts":[588],"name":"ProxyInitialization","nameLocation":"327:19:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":586,"nodeType":"Block","src":"735:294:12","statements":[{"assignments":[560],"declarations":[{"constant":false,"id":560,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:12","nodeType":"VariableDeclaration","scope":586,"src":"745:46:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":559,"nodeType":"UserDefinedTypeName","pathNode":{"id":558,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:12","757:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":955,"src":"745:23:12"},"referencedDeclaration":955,"src":"745:23:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":565,"initialValue":{"arguments":[{"id":563,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"821:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":561,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"794:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1050_$","typeString":"type(library StorageSlot)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:12","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1005,"src":"794:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$955_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:12"},{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:12","nodeType":"VariableDeclaration","scope":586,"src":"843:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":570,"initialValue":{"expression":{"id":568,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"866:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":954,"src":"866:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":571,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"900:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":572,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"916:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"896:88:12","trueBody":{"errorCall":{"arguments":[{"id":575,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"964:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":576,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"978:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":574,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"930:33:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":578,"nodeType":"RevertStatement","src":"923:61:12"}},{"expression":{"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":580,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"994:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":954,"src":"994:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":583,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"1017:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":585,"nodeType":"ExpressionStatement","src":"994:28:12"}]},"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"353:314:12","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":587,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:12","nodeType":"FunctionDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:12","nodeType":"VariableDeclaration","scope":587,"src":"690:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":553,"mutability":"mutable","name":"phase","nameLocation":"719:5:12","nodeType":"VariableDeclaration","scope":587,"src":"711:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":552,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:12"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[],"src":"735:0:12"},"scope":588,"src":"672:357:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":589,"src":"319:712:12","usedErrors":[],"usedEvents":[]}],"src":"32:1000:12"},"id":12},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[918]},"id":919,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":590,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"126:67:13","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":918,"linearizedBaseContracts":[918],"name":"Address","nameLocation":"202:7:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":605,"nodeType":"Block","src":"1478:254:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":599,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1702:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:13","memberName":"code","nodeType":"MemberAccess","src":"1702:12:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:13","memberName":"length","nodeType":"MemberAccess","src":"1702:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":598,"id":604,"nodeType":"Return","src":"1695:30:13"}]},"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"216:1191:13","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:13","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"account","nameLocation":"1440:7:13","nodeType":"VariableDeclaration","scope":606,"src":"1432:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:13"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"1472:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":596,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:13"},"scope":918,"src":"1412:320:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":639,"nodeType":"Block","src":"2718:241:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":617,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}],"id":616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:13","typeDescriptions":{}}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:13","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":620,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2761:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":624,"nodeType":"ExpressionStatement","src":"2728:73:13"},{"assignments":[626,null],"declarations":[{"constant":false,"id":626,"mutability":"mutable","name":"success","nameLocation":"2818:7:13","nodeType":"VariableDeclaration","scope":639,"src":"2813:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":625,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":633,"initialValue":{"arguments":[{"hexValue":"","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":627,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2831:9:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:13","memberName":"call","nodeType":"MemberAccess","src":"2831:14:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":629,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2853:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:13"},{"expression":{"arguments":[{"id":635,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"2882:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"ExpressionStatement","src":"2874:78:13"}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"1738:904:13","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":640,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:13","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:13","nodeType":"VariableDeclaration","scope":640,"src":"2666:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"amount","nameLocation":"2701:6:13","nodeType":"VariableDeclaration","scope":640,"src":"2693:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:13"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[],"src":"2718:0:13"},"scope":918,"src":"2647:312:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":657,"nodeType":"Block","src":"3790:96:13","statements":[{"expression":{"arguments":[{"id":651,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3829:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":652,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3837:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":650,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"3807:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":649,"id":656,"nodeType":"Return","src":"3800:79:13"}]},"documentation":{"id":641,"nodeType":"StructuredDocumentation","src":"2965:731:13","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:13","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"target","nameLocation":"3731:6:13","nodeType":"VariableDeclaration","scope":658,"src":"3723:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":645,"mutability":"mutable","name":"data","nameLocation":"3752:4:13","nodeType":"VariableDeclaration","scope":658,"src":"3739:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":644,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:13"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":658,"src":"3776:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":647,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:13"},"scope":918,"src":"3701:185:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":677,"nodeType":"Block","src":"4255:76:13","statements":[{"expression":{"arguments":[{"id":671,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4294:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"4302:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":674,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4311:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":670,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"4272:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":669,"id":676,"nodeType":"Return","src":"4265:59:13"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"3892:211:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":678,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:13","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"target","nameLocation":"4147:6:13","nodeType":"VariableDeclaration","scope":678,"src":"4139:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"data","nameLocation":"4176:4:13","nodeType":"VariableDeclaration","scope":678,"src":"4163:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":662,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:13","nodeType":"VariableDeclaration","scope":678,"src":"4190:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":664,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:13"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":678,"src":"4241:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":667,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:13"},"scope":918,"src":"4108:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"4806:111:13","statements":[{"expression":{"arguments":[{"id":691,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"4845:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":692,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"4853:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4859:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":690,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"4823:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":689,"id":696,"nodeType":"Return","src":"4816:94:13"}]},"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"4337:351:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":698,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:13","nodeType":"FunctionDefinition","parameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"target","nameLocation":"4732:6:13","nodeType":"VariableDeclaration","scope":698,"src":"4724:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"data","nameLocation":"4753:4:13","nodeType":"VariableDeclaration","scope":698,"src":"4740:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":682,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":685,"mutability":"mutable","name":"value","nameLocation":"4767:5:13","nodeType":"VariableDeclaration","scope":698,"src":"4759:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:13"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"4792:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":687,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:13"},"scope":918,"src":"4693:224:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":741,"nodeType":"Block","src":"5344:267:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":715,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}],"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:13","typeDescriptions":{}}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:13","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"5387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":712,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"5354:81:13"},{"assignments":[724,726],"declarations":[{"constant":false,"id":724,"mutability":"mutable","name":"success","nameLocation":"5451:7:13","nodeType":"VariableDeclaration","scope":741,"src":"5446:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:13","nodeType":"VariableDeclaration","scope":741,"src":"5460:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":725,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":733,"initialValue":{"arguments":[{"id":731,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"5513:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":727,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5487:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:13","memberName":"call","nodeType":"MemberAccess","src":"5487:11:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"5506:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:13"},{"expression":{"arguments":[{"id":735,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5562:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":736,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"5570:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":737,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"5579:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":738,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"5591:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":734,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5535:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":711,"id":740,"nodeType":"Return","src":"5528:76:13"}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"4923:237:13","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":742,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"target","nameLocation":"5213:6:13","nodeType":"VariableDeclaration","scope":742,"src":"5205:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"data","nameLocation":"5242:4:13","nodeType":"VariableDeclaration","scope":742,"src":"5229:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":702,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":705,"mutability":"mutable","name":"value","nameLocation":"5264:5:13","nodeType":"VariableDeclaration","scope":742,"src":"5256:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:13","nodeType":"VariableDeclaration","scope":742,"src":"5279:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":706,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":742,"src":"5330:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":709,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:13"},"scope":918,"src":"5165:446:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"5888:97:13","statements":[{"expression":{"arguments":[{"id":753,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"5924:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":754,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"5932:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":752,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[759,788],"referencedDeclaration":788,"src":"5905:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":751,"id":757,"nodeType":"Return","src":"5898:80:13"}]},"documentation":{"id":743,"nodeType":"StructuredDocumentation","src":"5617:166:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:13","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"target","nameLocation":"5824:6:13","nodeType":"VariableDeclaration","scope":759,"src":"5816:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"data","nameLocation":"5845:4:13","nodeType":"VariableDeclaration","scope":759,"src":"5832:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":746,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:13"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":759,"src":"5874:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":749,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:13"},"scope":918,"src":"5788:197:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"6327:168:13","statements":[{"assignments":[772,774],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"success","nameLocation":"6343:7:13","nodeType":"VariableDeclaration","scope":787,"src":"6338:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":771,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:13","nodeType":"VariableDeclaration","scope":787,"src":"6352:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":779,"initialValue":{"arguments":[{"id":777,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6397:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":775,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6379:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:13","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:13","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:13"},{"expression":{"arguments":[{"id":781,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6446:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":782,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6454:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":783,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"6463:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":784,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"6475:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":780,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"6419:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":770,"id":786,"nodeType":"Return","src":"6412:76:13"}]},"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"5991:173:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:13","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"target","nameLocation":"6214:6:13","nodeType":"VariableDeclaration","scope":788,"src":"6206:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"mutability":"mutable","name":"data","nameLocation":"6243:4:13","nodeType":"VariableDeclaration","scope":788,"src":"6230:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":763,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:13","nodeType":"VariableDeclaration","scope":788,"src":"6257:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":765,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:13"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"6313:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":768,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:13"},"scope":918,"src":"6169:326:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":804,"nodeType":"Block","src":"6771:101:13","statements":[{"expression":{"arguments":[{"id":799,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"6809:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":800,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"6817:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":798,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[805,834],"referencedDeclaration":834,"src":"6788:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":797,"id":803,"nodeType":"Return","src":"6781:84:13"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"6501:168:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":805,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:13","nodeType":"FunctionDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"target","nameLocation":"6712:6:13","nodeType":"VariableDeclaration","scope":805,"src":"6704:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":793,"mutability":"mutable","name":"data","nameLocation":"6733:4:13","nodeType":"VariableDeclaration","scope":805,"src":"6720:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":792,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:13"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":805,"src":"6757:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":795,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:13"},"scope":918,"src":"6674:198:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"7213:170:13","statements":[{"assignments":[818,820],"declarations":[{"constant":false,"id":818,"mutability":"mutable","name":"success","nameLocation":"7229:7:13","nodeType":"VariableDeclaration","scope":833,"src":"7224:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":817,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:13","nodeType":"VariableDeclaration","scope":833,"src":"7238:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":825,"initialValue":{"arguments":[{"id":823,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"7285:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":821,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7265:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:13","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:13","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:13"},{"expression":{"arguments":[{"id":827,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7334:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":828,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"7342:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":829,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"7351:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":830,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"7363:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":826,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"7307:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":816,"id":832,"nodeType":"Return","src":"7300:76:13"}]},"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"6878:175:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:13","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"target","nameLocation":"7105:6:13","nodeType":"VariableDeclaration","scope":834,"src":"7097:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"data","nameLocation":"7134:4:13","nodeType":"VariableDeclaration","scope":834,"src":"7121:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":809,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:13","nodeType":"VariableDeclaration","scope":834,"src":"7148:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":811,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:13"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"7199:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":814,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:13"},"scope":918,"src":"7058:325:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":872,"nodeType":"Block","src":"7865:434:13","statements":[{"condition":{"id":848,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"7879:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":870,"nodeType":"Block","src":"8235:58:13","statements":[{"expression":{"arguments":[{"id":866,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8257:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":867,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8269:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":865,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"8249:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"8249:33:13"}]},"id":871,"nodeType":"IfStatement","src":"7875:418:13","trueBody":{"id":864,"nodeType":"Block","src":"7888:341:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":849,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"7906:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:13","memberName":"length","nodeType":"MemberAccess","src":"7906:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":861,"nodeType":"IfStatement","src":"7902:286:13","trueBody":{"id":860,"nodeType":"Block","src":"7930:258:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":855,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"8132:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":854,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"8121:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":859,"nodeType":"ExpressionStatement","src":"8113:60:13"}]}},{"expression":{"id":862,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8208:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":847,"id":863,"nodeType":"Return","src":"8201:17:13"}]}}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"7389:277:13","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":873,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:13","nodeType":"FunctionDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"target","nameLocation":"7724:6:13","nodeType":"VariableDeclaration","scope":873,"src":"7716:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"success","nameLocation":"7745:7:13","nodeType":"VariableDeclaration","scope":873,"src":"7740:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:13","nodeType":"VariableDeclaration","scope":873,"src":"7762:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":840,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:13","nodeType":"VariableDeclaration","scope":873,"src":"7795:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":842,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:13"},"returnParameters":{"id":847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"7851:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":845,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:13"},"scope":918,"src":"7671:628:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":896,"nodeType":"Block","src":"8680:135:13","statements":[{"condition":{"id":885,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"8694:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":894,"nodeType":"Block","src":"8751:58:13","statements":[{"expression":{"arguments":[{"id":890,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"8773:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":891,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"8785:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":889,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"8765:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":893,"nodeType":"ExpressionStatement","src":"8765:33:13"}]},"id":895,"nodeType":"IfStatement","src":"8690:119:13","trueBody":{"id":888,"nodeType":"Block","src":"8703:42:13","statements":[{"expression":{"id":886,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"8724:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":884,"id":887,"nodeType":"Return","src":"8717:17:13"}]}}]},"documentation":{"id":874,"nodeType":"StructuredDocumentation","src":"8305:210:13","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":897,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:13","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":876,"mutability":"mutable","name":"success","nameLocation":"8560:7:13","nodeType":"VariableDeclaration","scope":897,"src":"8555:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":875,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:13","nodeType":"VariableDeclaration","scope":897,"src":"8577:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":877,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:13","nodeType":"VariableDeclaration","scope":897,"src":"8610:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":879,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:13"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":897,"src":"8666:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":882,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:13"},"scope":918,"src":"8520:295:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":916,"nodeType":"Block","src":"8904:457:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":904,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"8980:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:13","memberName":"length","nodeType":"MemberAccess","src":"8980:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":914,"nodeType":"Block","src":"9310:45:13","statements":[{"expression":{"arguments":[{"id":911,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"9331:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":910,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"9324:20:13"}]},"id":915,"nodeType":"IfStatement","src":"8976:379:13","trueBody":{"id":909,"nodeType":"Block","src":"9003:301:13","statements":[{"AST":{"nativeSrc":"9161:133:13","nodeType":"YulBlock","src":"9161:133:13","statements":[{"nativeSrc":"9179:40:13","nodeType":"YulVariableDeclaration","src":"9179:40:13","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:13","nodeType":"YulIdentifier","src":"9208:10:13"}],"functionName":{"name":"mload","nativeSrc":"9202:5:13","nodeType":"YulIdentifier","src":"9202:5:13"},"nativeSrc":"9202:17:13","nodeType":"YulFunctionCall","src":"9202:17:13"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:13","nodeType":"YulTypedName","src":"9183:15:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:13","nodeType":"YulLiteral","src":"9247:2:13","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:13","nodeType":"YulIdentifier","src":"9251:10:13"}],"functionName":{"name":"add","nativeSrc":"9243:3:13","nodeType":"YulIdentifier","src":"9243:3:13"},"nativeSrc":"9243:19:13","nodeType":"YulFunctionCall","src":"9243:19:13"},{"name":"returndata_size","nativeSrc":"9264:15:13","nodeType":"YulIdentifier","src":"9264:15:13"}],"functionName":{"name":"revert","nativeSrc":"9236:6:13","nodeType":"YulIdentifier","src":"9236:6:13"},"nativeSrc":"9236:44:13","nodeType":"YulFunctionCall","src":"9236:44:13"},"nativeSrc":"9236:44:13","nodeType":"YulExpressionStatement","src":"9236:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":899,"isOffset":false,"isSlot":false,"src":"9208:10:13","valueSize":1},{"declaration":899,"isOffset":false,"isSlot":false,"src":"9251:10:13","valueSize":1}],"id":908,"nodeType":"InlineAssembly","src":"9152:142:13"}]}}]},"id":917,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:13","nodeType":"FunctionDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:13","nodeType":"VariableDeclaration","scope":917,"src":"8838:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":898,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:13","nodeType":"VariableDeclaration","scope":917,"src":"8863:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":900,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:13"},"returnParameters":{"id":903,"nodeType":"ParameterList","parameters":[],"src":"8904:0:13"},"scope":918,"src":"8821:540:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":919,"src":"194:9169:13","usedErrors":[],"usedEvents":[]}],"src":"101:9263:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[940]},"id":941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":920,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":940,"linearizedBaseContracts":[940],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":929,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":926,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":925,"id":928,"nodeType":"Return","src":"712:17:14"}]},"id":930,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":930,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":940,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":938,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":935,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":934,"id":937,"nodeType":"Return","src":"819:15:14"}]},"id":939,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":931,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":939,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":932,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":940,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":941,"src":"608:235:14","usedErrors":[],"usedEvents":[]}],"src":"86:758:14"},"id":14},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1050]},"id":1051,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":942,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":943,"nodeType":"StructuredDocumentation","src":"218:1201:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1050,"linearizedBaseContracts":[1050],"name":"StorageSlot","nameLocation":"1428:11:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":946,"members":[{"constant":false,"id":945,"mutability":"mutable","name":"value","nameLocation":"1483:5:15","nodeType":"VariableDeclaration","scope":946,"src":"1475:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:15","nodeType":"StructDefinition","scope":1050,"src":"1446:49:15","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":949,"members":[{"constant":false,"id":948,"mutability":"mutable","name":"value","nameLocation":"1535:5:15","nodeType":"VariableDeclaration","scope":949,"src":"1530:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":947,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:15","nodeType":"StructDefinition","scope":1050,"src":"1501:46:15","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":952,"members":[{"constant":false,"id":951,"mutability":"mutable","name":"value","nameLocation":"1590:5:15","nodeType":"VariableDeclaration","scope":952,"src":"1582:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":950,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:15","nodeType":"StructDefinition","scope":1050,"src":"1553:49:15","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":955,"members":[{"constant":false,"id":954,"mutability":"mutable","name":"value","nameLocation":"1645:5:15","nodeType":"VariableDeclaration","scope":955,"src":"1637:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:15","nodeType":"StructDefinition","scope":1050,"src":"1608:49:15","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":958,"members":[{"constant":false,"id":957,"mutability":"mutable","name":"value","nameLocation":"1698:5:15","nodeType":"VariableDeclaration","scope":958,"src":"1691:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":956,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:15","nodeType":"StructDefinition","scope":1050,"src":"1663:47:15","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":961,"members":[{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1749:5:15","nodeType":"VariableDeclaration","scope":961,"src":"1743:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":959,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:15","nodeType":"StructDefinition","scope":1050,"src":"1716:45:15","visibility":"public"},{"body":{"id":971,"nodeType":"Block","src":"1943:106:15","statements":[{"AST":{"nativeSrc":"2005:38:15","nodeType":"YulBlock","src":"2005:38:15","statements":[{"nativeSrc":"2019:14:15","nodeType":"YulAssignment","src":"2019:14:15","value":{"name":"slot","nativeSrc":"2029:4:15","nodeType":"YulIdentifier","src":"2029:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:15","nodeType":"YulIdentifier","src":"2019:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":968,"isOffset":false,"isSlot":true,"src":"2019:6:15","suffix":"slot","valueSize":1},{"declaration":964,"isOffset":false,"isSlot":false,"src":"2029:4:15","valueSize":1}],"id":970,"nodeType":"InlineAssembly","src":"1996:47:15"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"1767:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":972,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:15","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"slot","nameLocation":"1891:4:15","nodeType":"VariableDeclaration","scope":972,"src":"1883:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:15"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"r","nameLocation":"1940:1:15","nodeType":"VariableDeclaration","scope":972,"src":"1920:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$946_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":967,"nodeType":"UserDefinedTypeName","pathNode":{"id":966,"name":"AddressSlot","nameLocations":["1920:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":946,"src":"1920:11:15"},"referencedDeclaration":946,"src":"1920:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$946_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:15"},"scope":1050,"src":"1859:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":982,"nodeType":"Block","src":"2231:106:15","statements":[{"AST":{"nativeSrc":"2293:38:15","nodeType":"YulBlock","src":"2293:38:15","statements":[{"nativeSrc":"2307:14:15","nodeType":"YulAssignment","src":"2307:14:15","value":{"name":"slot","nativeSrc":"2317:4:15","nodeType":"YulIdentifier","src":"2317:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:15","nodeType":"YulIdentifier","src":"2307:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":979,"isOffset":false,"isSlot":true,"src":"2307:6:15","suffix":"slot","valueSize":1},{"declaration":975,"isOffset":false,"isSlot":false,"src":"2317:4:15","valueSize":1}],"id":981,"nodeType":"InlineAssembly","src":"2284:47:15"}]},"documentation":{"id":973,"nodeType":"StructuredDocumentation","src":"2055:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":983,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:15","nodeType":"FunctionDefinition","parameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"slot","nameLocation":"2179:4:15","nodeType":"VariableDeclaration","scope":983,"src":"2171:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:15"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"r","nameLocation":"2228:1:15","nodeType":"VariableDeclaration","scope":983,"src":"2208:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$949_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":978,"nodeType":"UserDefinedTypeName","pathNode":{"id":977,"name":"BooleanSlot","nameLocations":["2208:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2208:11:15"},"referencedDeclaration":949,"src":"2208:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$949_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:15"},"scope":1050,"src":"2147:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":993,"nodeType":"Block","src":"2519:106:15","statements":[{"AST":{"nativeSrc":"2581:38:15","nodeType":"YulBlock","src":"2581:38:15","statements":[{"nativeSrc":"2595:14:15","nodeType":"YulAssignment","src":"2595:14:15","value":{"name":"slot","nativeSrc":"2605:4:15","nodeType":"YulIdentifier","src":"2605:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:15","nodeType":"YulIdentifier","src":"2595:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":990,"isOffset":false,"isSlot":true,"src":"2595:6:15","suffix":"slot","valueSize":1},{"declaration":986,"isOffset":false,"isSlot":false,"src":"2605:4:15","valueSize":1}],"id":992,"nodeType":"InlineAssembly","src":"2572:47:15"}]},"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"2343:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":994,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:15","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"slot","nameLocation":"2467:4:15","nodeType":"VariableDeclaration","scope":994,"src":"2459:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:15"},"returnParameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"r","nameLocation":"2516:1:15","nodeType":"VariableDeclaration","scope":994,"src":"2496:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$952_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":989,"nodeType":"UserDefinedTypeName","pathNode":{"id":988,"name":"Bytes32Slot","nameLocations":["2496:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":952,"src":"2496:11:15"},"referencedDeclaration":952,"src":"2496:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$952_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:15"},"scope":1050,"src":"2435:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1004,"nodeType":"Block","src":"2807:106:15","statements":[{"AST":{"nativeSrc":"2869:38:15","nodeType":"YulBlock","src":"2869:38:15","statements":[{"nativeSrc":"2883:14:15","nodeType":"YulAssignment","src":"2883:14:15","value":{"name":"slot","nativeSrc":"2893:4:15","nodeType":"YulIdentifier","src":"2893:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:15","nodeType":"YulIdentifier","src":"2883:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1001,"isOffset":false,"isSlot":true,"src":"2883:6:15","suffix":"slot","valueSize":1},{"declaration":997,"isOffset":false,"isSlot":false,"src":"2893:4:15","valueSize":1}],"id":1003,"nodeType":"InlineAssembly","src":"2860:47:15"}]},"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"2631:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1005,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:15","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"slot","nameLocation":"2755:4:15","nodeType":"VariableDeclaration","scope":1005,"src":"2747:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":996,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:15"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"r","nameLocation":"2804:1:15","nodeType":"VariableDeclaration","scope":1005,"src":"2784:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1000,"nodeType":"UserDefinedTypeName","pathNode":{"id":999,"name":"Uint256Slot","nameLocations":["2784:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":955,"src":"2784:11:15"},"referencedDeclaration":955,"src":"2784:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:15"},"scope":1050,"src":"2723:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1015,"nodeType":"Block","src":"3092:106:15","statements":[{"AST":{"nativeSrc":"3154:38:15","nodeType":"YulBlock","src":"3154:38:15","statements":[{"nativeSrc":"3168:14:15","nodeType":"YulAssignment","src":"3168:14:15","value":{"name":"slot","nativeSrc":"3178:4:15","nodeType":"YulIdentifier","src":"3178:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:15","nodeType":"YulIdentifier","src":"3168:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1012,"isOffset":false,"isSlot":true,"src":"3168:6:15","suffix":"slot","valueSize":1},{"declaration":1008,"isOffset":false,"isSlot":false,"src":"3178:4:15","valueSize":1}],"id":1014,"nodeType":"InlineAssembly","src":"3145:47:15"}]},"documentation":{"id":1006,"nodeType":"StructuredDocumentation","src":"2919:86:15","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1016,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:15","nodeType":"FunctionDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"slot","nameLocation":"3041:4:15","nodeType":"VariableDeclaration","scope":1016,"src":"3033:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:15"},"returnParameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"r","nameLocation":"3089:1:15","nodeType":"VariableDeclaration","scope":1016,"src":"3070:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1011,"nodeType":"UserDefinedTypeName","pathNode":{"id":1010,"name":"StringSlot","nameLocations":["3070:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"3070:10:15"},"referencedDeclaration":958,"src":"3070:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:15"},"scope":1050,"src":"3010:188:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1026,"nodeType":"Block","src":"3400:112:15","statements":[{"AST":{"nativeSrc":"3462:44:15","nodeType":"YulBlock","src":"3462:44:15","statements":[{"nativeSrc":"3476:20:15","nodeType":"YulAssignment","src":"3476:20:15","value":{"name":"store.slot","nativeSrc":"3486:10:15","nodeType":"YulIdentifier","src":"3486:10:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:15","nodeType":"YulIdentifier","src":"3476:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1023,"isOffset":false,"isSlot":true,"src":"3476:6:15","suffix":"slot","valueSize":1},{"declaration":1019,"isOffset":false,"isSlot":true,"src":"3486:10:15","suffix":"slot","valueSize":1}],"id":1025,"nodeType":"InlineAssembly","src":"3453:53:15"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"3204:101:15","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1027,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:15","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"store","nameLocation":"3348:5:15","nodeType":"VariableDeclaration","scope":1027,"src":"3333:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1018,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:15"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"r","nameLocation":"3397:1:15","nodeType":"VariableDeclaration","scope":1027,"src":"3378:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1022,"nodeType":"UserDefinedTypeName","pathNode":{"id":1021,"name":"StringSlot","nameLocations":["3378:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"3378:10:15"},"referencedDeclaration":958,"src":"3378:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:15"},"scope":1050,"src":"3310:202:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"3688:106:15","statements":[{"AST":{"nativeSrc":"3750:38:15","nodeType":"YulBlock","src":"3750:38:15","statements":[{"nativeSrc":"3764:14:15","nodeType":"YulAssignment","src":"3764:14:15","value":{"name":"slot","nativeSrc":"3774:4:15","nodeType":"YulIdentifier","src":"3774:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:15","nodeType":"YulIdentifier","src":"3764:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1034,"isOffset":false,"isSlot":true,"src":"3764:6:15","suffix":"slot","valueSize":1},{"declaration":1030,"isOffset":false,"isSlot":false,"src":"3774:4:15","valueSize":1}],"id":1036,"nodeType":"InlineAssembly","src":"3741:47:15"}]},"documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"3518:85:15","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:15","nodeType":"FunctionDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1030,"mutability":"mutable","name":"slot","nameLocation":"3638:4:15","nodeType":"VariableDeclaration","scope":1038,"src":"3630:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1029,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:15"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"r","nameLocation":"3685:1:15","nodeType":"VariableDeclaration","scope":1038,"src":"3667:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1033,"nodeType":"UserDefinedTypeName","pathNode":{"id":1032,"name":"BytesSlot","nameLocations":["3667:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":961,"src":"3667:9:15"},"referencedDeclaration":961,"src":"3667:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:15"},"scope":1050,"src":"3608:186:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1048,"nodeType":"Block","src":"3991:112:15","statements":[{"AST":{"nativeSrc":"4053:44:15","nodeType":"YulBlock","src":"4053:44:15","statements":[{"nativeSrc":"4067:20:15","nodeType":"YulAssignment","src":"4067:20:15","value":{"name":"store.slot","nativeSrc":"4077:10:15","nodeType":"YulIdentifier","src":"4077:10:15"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:15","nodeType":"YulIdentifier","src":"4067:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1045,"isOffset":false,"isSlot":true,"src":"4067:6:15","suffix":"slot","valueSize":1},{"declaration":1041,"isOffset":false,"isSlot":true,"src":"4077:10:15","suffix":"slot","valueSize":1}],"id":1047,"nodeType":"InlineAssembly","src":"4044:53:15"}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"3800:99:15","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1049,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:15","nodeType":"FunctionDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"store","nameLocation":"3940:5:15","nodeType":"VariableDeclaration","scope":1049,"src":"3926:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:15"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"r","nameLocation":"3988:1:15","nodeType":"VariableDeclaration","scope":1049,"src":"3970:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1044,"nodeType":"UserDefinedTypeName","pathNode":{"id":1043,"name":"BytesSlot","nameLocations":["3970:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":961,"src":"3970:9:15"},"referencedDeclaration":961,"src":"3970:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:15"},"scope":1050,"src":"3904:199:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1051,"src":"1420:2685:15","usedErrors":[],"usedEvents":[]}],"src":"193:3913:15"},"id":15},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateRevocationRegistry.sol","exportedSymbols":{"ContractOwnership":[32],"IIssuersDIDRegistry":[1337],"IRevocationRegistry":[1377],"OpenCampusCertificateRevocationRegistry":[1304],"VcRevoked":[1315]},"id":1305,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1052,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":1054,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1305,"sourceUnit":33,"src":"58:101:16","symbolAliases":[{"foreign":{"id":1053,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"66:17:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":1056,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1305,"sourceUnit":1338,"src":"160:73:16","symbolAliases":[{"foreign":{"id":1055,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1337,"src":"168:19:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":1058,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1305,"sourceUnit":1378,"src":"234:73:16","symbolAliases":[{"foreign":{"id":1057,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1377,"src":"242:19:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/events/RevocationRegistryEvents.sol","file":"./events/RevocationRegistryEvents.sol","id":1060,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1305,"sourceUnit":1316,"src":"308:64:16","symbolAliases":[{"foreign":{"id":1059,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"316:9:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1062,"name":"IRevocationRegistry","nameLocations":["532:19:16"],"nodeType":"IdentifierPath","referencedDeclaration":1377,"src":"532:19:16"},"id":1063,"nodeType":"InheritanceSpecifier","src":"532:19:16"},{"baseName":{"id":1064,"name":"ContractOwnership","nameLocations":["553:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"553:17:16"},"id":1065,"nodeType":"InheritanceSpecifier","src":"553:17:16"}],"canonicalName":"OpenCampusCertificateRevocationRegistry","contractDependencies":[],"contractKind":"contract","documentation":{"id":1061,"nodeType":"StructuredDocumentation","src":"374:106:16","text":"@title OpenCampusCertificateRevocationRegistry.\n @notice A registry storing the revocation of VCs."},"fullyImplemented":true,"id":1304,"linearizedBaseContracts":[1304,32,414,431,80,940,126,1377],"name":"OpenCampusCertificateRevocationRegistry","nameLocation":"489:39:16","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1068,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"616:12:16","nodeType":"VariableDeclaration","scope":1304,"src":"577:51:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":1067,"nodeType":"UserDefinedTypeName","pathNode":{"id":1066,"name":"IIssuersDIDRegistry","nameLocations":["577:19:16"],"nodeType":"IdentifierPath","referencedDeclaration":1337,"src":"577:19:16"},"referencedDeclaration":1337,"src":"577:19:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"functionSelector":"d394ab5a","id":1074,"mutability":"mutable","name":"revocations","nameLocation":"690:11:16","nodeType":"VariableDeclaration","scope":1304,"src":"635:66:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"},"typeName":{"id":1073,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1069,"name":"bytes32","nodeType":"ElementaryTypeName","src":"643:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"635:47:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1072,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":1070,"name":"uint256","nodeType":"ElementaryTypeName","src":"662:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"654:27:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":1071,"name":"address","nodeType":"ElementaryTypeName","src":"673:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}}},"visibility":"public"},{"baseFunctions":[1344],"constant":false,"functionSelector":"adb610a3","id":1076,"mutability":"mutable","name":"currentNonce","nameLocation":"722:12:16","nodeType":"VariableDeclaration","scope":1304,"src":"707:27:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1075,"name":"uint256","nodeType":"ElementaryTypeName","src":"707:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"documentation":{"id":1077,"nodeType":"StructuredDocumentation","src":"741:69:16","text":"@notice Thrown when the signature is invalid for the NFT payload."},"errorSelector":"8baa579f","id":1079,"name":"InvalidSignature","nameLocation":"821:16:16","nodeType":"ErrorDefinition","parameters":{"id":1078,"nodeType":"ParameterList","parameters":[],"src":"837:2:16"},"src":"815:25:16"},{"errorSelector":"756688fe","id":1081,"name":"InvalidNonce","nameLocation":"852:12:16","nodeType":"ErrorDefinition","parameters":{"id":1080,"nodeType":"ParameterList","parameters":[],"src":"864:2:16"},"src":"846:21:16"},{"errorSelector":"bdbfe216","id":1083,"name":"InvalidIssuer","nameLocation":"879:13:16","nodeType":"ErrorDefinition","parameters":{"id":1082,"nodeType":"ParameterList","parameters":[],"src":"892:2:16"},"src":"873:22:16"},{"body":{"id":1097,"nodeType":"Block","src":"976:43:16","statements":[{"expression":{"id":1095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1093,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"986:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1094,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"1001:11:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"src":"986:26:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"id":1096,"nodeType":"ExpressionStatement","src":"986:26:16"}]},"id":1098,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":1089,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"964:3:16","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"968:6:16","memberName":"sender","nodeType":"MemberAccess","src":"964:10:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":1091,"kind":"baseConstructorSpecifier","modifierName":{"id":1088,"name":"ContractOwnership","nameLocations":["946:17:16"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"946:17:16"},"nodeType":"ModifierInvocation","src":"946:29:16"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1087,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1086,"mutability":"mutable","name":"didRegistry","nameLocation":"933:11:16","nodeType":"VariableDeclaration","scope":1098,"src":"913:31:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":1085,"nodeType":"UserDefinedTypeName","pathNode":{"id":1084,"name":"IIssuersDIDRegistry","nameLocations":["913:19:16"],"nodeType":"IdentifierPath","referencedDeclaration":1337,"src":"913:19:16"},"referencedDeclaration":1337,"src":"913:19:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"}],"src":"912:33:16"},"returnParameters":{"id":1092,"nodeType":"ParameterList","parameters":[],"src":"976:0:16"},"scope":1304,"src":"901:118:16","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"baseFunctions":[1376],"body":{"id":1121,"nodeType":"Block","src":"1120:509:16","statements":[{"assignments":[1108],"declarations":[{"constant":false,"id":1108,"mutability":"mutable","name":"revoker","nameLocation":"1515:7:16","nodeType":"VariableDeclaration","scope":1121,"src":"1507:15:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1107,"name":"address","nodeType":"ElementaryTypeName","src":"1507:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1114,"initialValue":{"baseExpression":{"baseExpression":{"id":1109,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"1525:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":1111,"indexExpression":{"id":1110,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"1537:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1525:28:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1113,"indexExpression":{"id":1112,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1102,"src":"1554:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1525:34:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1507:52:16"},{"expression":{"arguments":[{"id":1117,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1100,"src":"1597:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1118,"name":"revoker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1108,"src":"1614:7:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1115,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"1576:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1589:7:16","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":1327,"src":"1576:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1576:46:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1106,"id":1120,"nodeType":"Return","src":"1569:53:16"}]},"functionSelector":"a3a2656a","id":1122,"implemented":true,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"1034:9:16","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1100,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"1052:15:16","nodeType":"VariableDeclaration","scope":1122,"src":"1044:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1099,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1044:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1102,"mutability":"mutable","name":"vcId","nameLocation":"1077:4:16","nodeType":"VariableDeclaration","scope":1122,"src":"1069:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1101,"name":"uint256","nodeType":"ElementaryTypeName","src":"1069:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1043:39:16"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"revoked","nameLocation":"1111:7:16","nodeType":"VariableDeclaration","scope":1122,"src":"1106:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1104,"name":"bool","nodeType":"ElementaryTypeName","src":"1106:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1105:14:16"},"scope":1304,"src":"1025:604:16","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1355],"body":{"id":1203,"nodeType":"Block","src":"1742:827:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1133,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"1756:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1134,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"1765:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1756:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1140,"nodeType":"IfStatement","src":"1752:73:16","trueBody":{"id":1139,"nodeType":"Block","src":"1779:46:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1136,"name":"InvalidNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"1800:12:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1800:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1138,"nodeType":"RevertStatement","src":"1793:21:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1144,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1141,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1130,"src":"1839:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1849:6:16","memberName":"length","nodeType":"MemberAccess","src":"1839:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3635","id":1143,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1859:2:16","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"1839:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1148,"nodeType":"IfStatement","src":"1835:53:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1145,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"1870:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1870:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1147,"nodeType":"RevertStatement","src":"1863:25:16"}},{"assignments":[1150],"declarations":[{"constant":false,"id":1150,"mutability":"mutable","name":"v","nameLocation":"1905:1:16","nodeType":"VariableDeclaration","scope":1203,"src":"1899:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1149,"name":"uint8","nodeType":"ElementaryTypeName","src":"1899:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1151,"nodeType":"VariableDeclarationStatement","src":"1899:7:16"},{"assignments":[1153],"declarations":[{"constant":false,"id":1153,"mutability":"mutable","name":"r","nameLocation":"1924:1:16","nodeType":"VariableDeclaration","scope":1203,"src":"1916:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1152,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1916:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1154,"nodeType":"VariableDeclarationStatement","src":"1916:9:16"},{"assignments":[1156],"declarations":[{"constant":false,"id":1156,"mutability":"mutable","name":"s","nameLocation":"1943:1:16","nodeType":"VariableDeclaration","scope":1203,"src":"1935:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1155,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1935:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1157,"nodeType":"VariableDeclarationStatement","src":"1935:9:16"},{"AST":{"nativeSrc":"1963:177:16","nodeType":"YulBlock","src":"1963:177:16","statements":[{"nativeSrc":"1977:35:16","nodeType":"YulAssignment","src":"1977:35:16","value":{"arguments":[{"name":"signature.offset","nativeSrc":"1995:16:16","nodeType":"YulIdentifier","src":"1995:16:16"}],"functionName":{"name":"calldataload","nativeSrc":"1982:12:16","nodeType":"YulIdentifier","src":"1982:12:16"},"nativeSrc":"1982:30:16","nodeType":"YulFunctionCall","src":"1982:30:16"},"variableNames":[{"name":"r","nativeSrc":"1977:1:16","nodeType":"YulIdentifier","src":"1977:1:16"}]},{"nativeSrc":"2025:46:16","nodeType":"YulAssignment","src":"2025:46:16","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2047:16:16","nodeType":"YulIdentifier","src":"2047:16:16"},{"kind":"number","nativeSrc":"2065:4:16","nodeType":"YulLiteral","src":"2065:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2043:3:16","nodeType":"YulIdentifier","src":"2043:3:16"},"nativeSrc":"2043:27:16","nodeType":"YulFunctionCall","src":"2043:27:16"}],"functionName":{"name":"calldataload","nativeSrc":"2030:12:16","nodeType":"YulIdentifier","src":"2030:12:16"},"nativeSrc":"2030:41:16","nodeType":"YulFunctionCall","src":"2030:41:16"},"variableNames":[{"name":"s","nativeSrc":"2025:1:16","nodeType":"YulIdentifier","src":"2025:1:16"}]},{"nativeSrc":"2084:46:16","nodeType":"YulAssignment","src":"2084:46:16","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"2106:16:16","nodeType":"YulIdentifier","src":"2106:16:16"},{"kind":"number","nativeSrc":"2124:4:16","nodeType":"YulLiteral","src":"2124:4:16","type":"","value":"0x21"}],"functionName":{"name":"add","nativeSrc":"2102:3:16","nodeType":"YulIdentifier","src":"2102:3:16"},"nativeSrc":"2102:27:16","nodeType":"YulFunctionCall","src":"2102:27:16"}],"functionName":{"name":"calldataload","nativeSrc":"2089:12:16","nodeType":"YulIdentifier","src":"2089:12:16"},"nativeSrc":"2089:41:16","nodeType":"YulFunctionCall","src":"2089:41:16"},"variableNames":[{"name":"v","nativeSrc":"2084:1:16","nodeType":"YulIdentifier","src":"2084:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1153,"isOffset":false,"isSlot":false,"src":"1977:1:16","valueSize":1},{"declaration":1156,"isOffset":false,"isSlot":false,"src":"2025:1:16","valueSize":1},{"declaration":1130,"isOffset":true,"isSlot":false,"src":"1995:16:16","suffix":"offset","valueSize":1},{"declaration":1130,"isOffset":true,"isSlot":false,"src":"2047:16:16","suffix":"offset","valueSize":1},{"declaration":1130,"isOffset":true,"isSlot":false,"src":"2106:16:16","suffix":"offset","valueSize":1},{"declaration":1150,"isOffset":false,"isSlot":false,"src":"2084:1:16","valueSize":1}],"id":1158,"nodeType":"InlineAssembly","src":"1954:186:16"},{"assignments":[1160],"declarations":[{"constant":false,"id":1160,"mutability":"mutable","name":"signer","nameLocation":"2214:6:16","nodeType":"VariableDeclaration","scope":1203,"src":"2206:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1159,"name":"address","nodeType":"ElementaryTypeName","src":"2206:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1174,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1165,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"2254:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1166,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2271:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1167,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1128,"src":"2277:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1163,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2243:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1164,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2247:6:16","memberName":"encode","nodeType":"MemberAccess","src":"2243:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2243:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1162,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2233:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1169,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2233:51:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1170,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"2286:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1171,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1153,"src":"2289:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1172,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1156,"src":"2292:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1161,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"2223:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2223:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2206:88:16"},{"condition":{"arguments":[{"id":1177,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"2329:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1178,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2346:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1175,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"2308:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2321:7:16","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":1327,"src":"2308:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":1179,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2308:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1201,"nodeType":"Block","src":"2516:47:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1198,"name":"InvalidIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"2537:13:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2537:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1200,"nodeType":"RevertStatement","src":"2530:22:16"}]},"id":1202,"nodeType":"IfStatement","src":"2304:259:16","trueBody":{"id":1197,"nodeType":"Block","src":"2355:155:16","statements":[{"expression":{"id":1186,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1180,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"2369:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":1183,"indexExpression":{"id":1181,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"2381:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2369:28:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1184,"indexExpression":{"id":1182,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2398:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2369:34:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1185,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2406:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2369:43:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1187,"nodeType":"ExpressionStatement","src":"2369:43:16"},{"eventCall":{"arguments":[{"id":1189,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1124,"src":"2441:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1190,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2458:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1191,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1126,"src":"2466:4:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1188,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"2431:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":1192,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2431:40:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1193,"nodeType":"EmitStatement","src":"2426:45:16"},{"expression":{"id":1195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2485:14:16","subExpression":{"id":1194,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"2487:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1196,"nodeType":"ExpressionStatement","src":"2485:14:16"}]}}]},"functionSelector":"12b7ad29","id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"1644:8:16","nodeType":"FunctionDefinition","parameters":{"id":1131,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1124,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"1661:15:16","nodeType":"VariableDeclaration","scope":1204,"src":"1653:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1123,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1653:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1126,"mutability":"mutable","name":"vcId","nameLocation":"1686:4:16","nodeType":"VariableDeclaration","scope":1204,"src":"1678:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1125,"name":"uint256","nodeType":"ElementaryTypeName","src":"1678:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1128,"mutability":"mutable","name":"nonce","nameLocation":"1700:5:16","nodeType":"VariableDeclaration","scope":1204,"src":"1692:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1127,"name":"uint256","nodeType":"ElementaryTypeName","src":"1692:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1130,"mutability":"mutable","name":"signature","nameLocation":"1722:9:16","nodeType":"VariableDeclaration","scope":1204,"src":"1707:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1129,"name":"bytes","nodeType":"ElementaryTypeName","src":"1707:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1652:80:16"},"returnParameters":{"id":1132,"nodeType":"ParameterList","parameters":[],"src":"1742:0:16"},"scope":1304,"src":"1635:934:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1367],"body":{"id":1302,"nodeType":"Block","src":"2700:911:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1218,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1216,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"2714:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1217,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"2723:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2714:21:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1223,"nodeType":"IfStatement","src":"2710:73:16","trueBody":{"id":1222,"nodeType":"Block","src":"2737:46:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1219,"name":"InvalidNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1081,"src":"2758:12:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2758:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1221,"nodeType":"RevertStatement","src":"2751:21:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1227,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1224,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1213,"src":"2797:9:16","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2807:6:16","memberName":"length","nodeType":"MemberAccess","src":"2797:16:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"3635","id":1226,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2817:2:16","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2797:22:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1231,"nodeType":"IfStatement","src":"2793:53:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1228,"name":"InvalidSignature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"2828:16:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1229,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2828:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1230,"nodeType":"RevertStatement","src":"2821:25:16"}},{"assignments":[1233],"declarations":[{"constant":false,"id":1233,"mutability":"mutable","name":"v","nameLocation":"2863:1:16","nodeType":"VariableDeclaration","scope":1302,"src":"2857:7:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1232,"name":"uint8","nodeType":"ElementaryTypeName","src":"2857:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1234,"nodeType":"VariableDeclarationStatement","src":"2857:7:16"},{"assignments":[1236],"declarations":[{"constant":false,"id":1236,"mutability":"mutable","name":"r","nameLocation":"2882:1:16","nodeType":"VariableDeclaration","scope":1302,"src":"2874:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1235,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2874:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1237,"nodeType":"VariableDeclarationStatement","src":"2874:9:16"},{"assignments":[1239],"declarations":[{"constant":false,"id":1239,"mutability":"mutable","name":"s","nameLocation":"2901:1:16","nodeType":"VariableDeclaration","scope":1302,"src":"2893:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1238,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2893:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1240,"nodeType":"VariableDeclarationStatement","src":"2893:9:16"},{"AST":{"nativeSrc":"2921:177:16","nodeType":"YulBlock","src":"2921:177:16","statements":[{"nativeSrc":"2935:35:16","nodeType":"YulAssignment","src":"2935:35:16","value":{"arguments":[{"name":"signature.offset","nativeSrc":"2953:16:16","nodeType":"YulIdentifier","src":"2953:16:16"}],"functionName":{"name":"calldataload","nativeSrc":"2940:12:16","nodeType":"YulIdentifier","src":"2940:12:16"},"nativeSrc":"2940:30:16","nodeType":"YulFunctionCall","src":"2940:30:16"},"variableNames":[{"name":"r","nativeSrc":"2935:1:16","nodeType":"YulIdentifier","src":"2935:1:16"}]},{"nativeSrc":"2983:46:16","nodeType":"YulAssignment","src":"2983:46:16","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"3005:16:16","nodeType":"YulIdentifier","src":"3005:16:16"},{"kind":"number","nativeSrc":"3023:4:16","nodeType":"YulLiteral","src":"3023:4:16","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"3001:3:16","nodeType":"YulIdentifier","src":"3001:3:16"},"nativeSrc":"3001:27:16","nodeType":"YulFunctionCall","src":"3001:27:16"}],"functionName":{"name":"calldataload","nativeSrc":"2988:12:16","nodeType":"YulIdentifier","src":"2988:12:16"},"nativeSrc":"2988:41:16","nodeType":"YulFunctionCall","src":"2988:41:16"},"variableNames":[{"name":"s","nativeSrc":"2983:1:16","nodeType":"YulIdentifier","src":"2983:1:16"}]},{"nativeSrc":"3042:46:16","nodeType":"YulAssignment","src":"3042:46:16","value":{"arguments":[{"arguments":[{"name":"signature.offset","nativeSrc":"3064:16:16","nodeType":"YulIdentifier","src":"3064:16:16"},{"kind":"number","nativeSrc":"3082:4:16","nodeType":"YulLiteral","src":"3082:4:16","type":"","value":"0x21"}],"functionName":{"name":"add","nativeSrc":"3060:3:16","nodeType":"YulIdentifier","src":"3060:3:16"},"nativeSrc":"3060:27:16","nodeType":"YulFunctionCall","src":"3060:27:16"}],"functionName":{"name":"calldataload","nativeSrc":"3047:12:16","nodeType":"YulIdentifier","src":"3047:12:16"},"nativeSrc":"3047:41:16","nodeType":"YulFunctionCall","src":"3047:41:16"},"variableNames":[{"name":"v","nativeSrc":"3042:1:16","nodeType":"YulIdentifier","src":"3042:1:16"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1236,"isOffset":false,"isSlot":false,"src":"2935:1:16","valueSize":1},{"declaration":1239,"isOffset":false,"isSlot":false,"src":"2983:1:16","valueSize":1},{"declaration":1213,"isOffset":true,"isSlot":false,"src":"2953:16:16","suffix":"offset","valueSize":1},{"declaration":1213,"isOffset":true,"isSlot":false,"src":"3005:16:16","suffix":"offset","valueSize":1},{"declaration":1213,"isOffset":true,"isSlot":false,"src":"3064:16:16","suffix":"offset","valueSize":1},{"declaration":1233,"isOffset":false,"isSlot":false,"src":"3042:1:16","valueSize":1}],"id":1241,"nodeType":"InlineAssembly","src":"2912:186:16"},{"assignments":[1243],"declarations":[{"constant":false,"id":1243,"mutability":"mutable","name":"signer","nameLocation":"3172:6:16","nodeType":"VariableDeclaration","scope":1302,"src":"3164:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1242,"name":"address","nodeType":"ElementaryTypeName","src":"3164:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1257,"initialValue":{"arguments":[{"arguments":[{"arguments":[{"id":1248,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3212:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1249,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3229:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":1250,"name":"nonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1211,"src":"3236:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1246,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3201:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1247,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3205:6:16","memberName":"encode","nodeType":"MemberAccess","src":"3201:10:16","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3201:41:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1245,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3191:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1252,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3191:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1253,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1233,"src":"3245:1:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1254,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"3248:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1255,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1239,"src":"3251:1:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1244,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"3181:9:16","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3181:72:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3164:89:16"},{"condition":{"arguments":[{"id":1260,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3288:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1261,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3305:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1258,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1068,"src":"3267:12:16","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$1337","typeString":"contract IIssuersDIDRegistry"}},"id":1259,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3280:7:16","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":1327,"src":"3267:20:16","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":1262,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3267:45:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1300,"nodeType":"Block","src":"3558:47:16","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1297,"name":"InvalidIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1083,"src":"3579:13:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3579:15:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1299,"nodeType":"RevertStatement","src":"3572:22:16"}]},"id":1301,"nodeType":"IfStatement","src":"3263:342:16","trueBody":{"id":1296,"nodeType":"Block","src":"3314:238:16","statements":[{"body":{"id":1291,"nodeType":"Block","src":"3367:147:16","statements":[{"expression":{"id":1281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":1273,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"3385:11:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":1278,"indexExpression":{"id":1274,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3397:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3385:28:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":1279,"indexExpression":{"baseExpression":{"id":1275,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3414:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1277,"indexExpression":{"id":1276,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"3420:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3414:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3385:38:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1280,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3426:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3385:47:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1282,"nodeType":"ExpressionStatement","src":"3385:47:16"},{"eventCall":{"arguments":[{"id":1284,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1206,"src":"3465:15:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1285,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1243,"src":"3482:6:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1286,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3490:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1288,"indexExpression":{"id":1287,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"3496:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3490:8:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1283,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1315,"src":"3455:9:16","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":1289,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3455:44:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1290,"nodeType":"EmitStatement","src":"3450:49:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1266,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"3344:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":1267,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1209,"src":"3348:5:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3354:6:16","memberName":"length","nodeType":"MemberAccess","src":"3348:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3344:16:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1292,"initializationExpression":{"assignments":[1264],"declarations":[{"constant":false,"id":1264,"mutability":"mutable","name":"i","nameLocation":"3341:1:16","nodeType":"VariableDeclaration","scope":1292,"src":"3333:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1263,"name":"uint256","nodeType":"ElementaryTypeName","src":"3333:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1265,"nodeType":"VariableDeclarationStatement","src":"3333:9:16"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":1271,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"3362:3:16","subExpression":{"id":1270,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"3362:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1272,"nodeType":"ExpressionStatement","src":"3362:3:16"},"nodeType":"ForStatement","src":"3328:186:16"},{"expression":{"id":1294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3527:14:16","subExpression":{"id":1293,"name":"currentNonce","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1076,"src":"3529:12:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1295,"nodeType":"ExpressionStatement","src":"3527:14:16"}]}}]},"functionSelector":"4c66f71c","id":1303,"implemented":true,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"2584:14:16","nodeType":"FunctionDefinition","parameters":{"id":1214,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1206,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"2607:15:16","nodeType":"VariableDeclaration","scope":1303,"src":"2599:23:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1205,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2599:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1209,"mutability":"mutable","name":"vcIds","nameLocation":"2643:5:16","nodeType":"VariableDeclaration","scope":1303,"src":"2624:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1207,"name":"uint256","nodeType":"ElementaryTypeName","src":"2624:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1208,"nodeType":"ArrayTypeName","src":"2624:9:16","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1211,"mutability":"mutable","name":"nonce","nameLocation":"2658:5:16","nodeType":"VariableDeclaration","scope":1303,"src":"2650:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1210,"name":"uint256","nodeType":"ElementaryTypeName","src":"2650:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1213,"mutability":"mutable","name":"signature","nameLocation":"2680:9:16","nodeType":"VariableDeclaration","scope":1303,"src":"2665:24:16","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1212,"name":"bytes","nodeType":"ElementaryTypeName","src":"2665:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2598:92:16"},"returnParameters":{"id":1215,"nodeType":"ParameterList","parameters":[],"src":"2700:0:16"},"scope":1304,"src":"2575:1036:16","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1305,"src":"480:3133:16","usedErrors":[94,419,1079,1081,1083],"usedEvents":[110,1315]}],"src":"32:3582:16"},"id":16},"contracts/vc/events/RevocationRegistryEvents.sol":{"ast":{"absolutePath":"contracts/vc/events/RevocationRegistryEvents.sol","exportedSymbols":{"VcRevoked":[1315]},"id":1316,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1306,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:17"},{"anonymous":false,"documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"58:226:17","text":"@notice Emitted when `caller` attempts to revoke `vcId`.\n @param hashedIssuerDid the hashed Did for the issuer\n @param caller address of caller that invoked the revocation.\n @param vcId The Id for the VC revoked."},"eventSelector":"2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056","id":1315,"name":"VcRevoked","nameLocation":"290:9:17","nodeType":"EventDefinition","parameters":{"id":1314,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1309,"indexed":true,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"316:15:17","nodeType":"VariableDeclaration","scope":1315,"src":"300:31:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1308,"name":"bytes32","nodeType":"ElementaryTypeName","src":"300:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1311,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"341:6:17","nodeType":"VariableDeclaration","scope":1315,"src":"333:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1310,"name":"address","nodeType":"ElementaryTypeName","src":"333:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1313,"indexed":true,"mutability":"mutable","name":"vcId","nameLocation":"365:4:17","nodeType":"VariableDeclaration","scope":1315,"src":"349:20:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1312,"name":"uint256","nodeType":"ElementaryTypeName","src":"349:7:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"299:71:17"},"src":"284:87:17"}],"src":"32:341:17"},"id":17},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","exportedSymbols":{"IIssuersDIDRegistry":[1337]},"id":1338,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1317,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:18"},{"abstract":false,"baseContracts":[],"canonicalName":"IIssuersDIDRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"58:119:18","text":"@title IAllowedIssuersRegistry\n @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs"},"fullyImplemented":false,"id":1337,"linearizedBaseContracts":[1337],"name":"IIssuersDIDRegistry","nameLocation":"187:19:18","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f9236a39","id":1327,"implemented":false,"kind":"function","modifiers":[],"name":"issuers","nameLocation":"222:7:18","nodeType":"FunctionDefinition","parameters":{"id":1323,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1320,"mutability":"mutable","name":"hashedDid","nameLocation":"238:9:18","nodeType":"VariableDeclaration","scope":1327,"src":"230:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1319,"name":"bytes32","nodeType":"ElementaryTypeName","src":"230:7:18","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1322,"mutability":"mutable","name":"issuerAddress","nameLocation":"257:13:18","nodeType":"VariableDeclaration","scope":1327,"src":"249:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1321,"name":"address","nodeType":"ElementaryTypeName","src":"249:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"229:42:18"},"returnParameters":{"id":1326,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1325,"mutability":"mutable","name":"allowed","nameLocation":"300:7:18","nodeType":"VariableDeclaration","scope":1327,"src":"295:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1324,"name":"bool","nodeType":"ElementaryTypeName","src":"295:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"294:14:18"},"scope":1337,"src":"213:96:18","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f176f7e","id":1336,"implemented":false,"kind":"function","modifiers":[],"name":"isIssuerAllowed","nameLocation":"324:15:18","nodeType":"FunctionDefinition","parameters":{"id":1332,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1329,"mutability":"mutable","name":"did","nameLocation":"356:3:18","nodeType":"VariableDeclaration","scope":1336,"src":"340:19:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":1328,"name":"string","nodeType":"ElementaryTypeName","src":"340:6:18","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1331,"mutability":"mutable","name":"issuerAddress","nameLocation":"369:13:18","nodeType":"VariableDeclaration","scope":1336,"src":"361:21:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1330,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"339:44:18"},"returnParameters":{"id":1335,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1334,"mutability":"mutable","name":"allowed","nameLocation":"412:7:18","nodeType":"VariableDeclaration","scope":1336,"src":"407:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1333,"name":"bool","nodeType":"ElementaryTypeName","src":"407:4:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"406:14:18"},"scope":1337,"src":"315:106:18","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1338,"src":"177:246:18","usedErrors":[],"usedEvents":[]}],"src":"32:392:18"},"id":18},"contracts/vc/interfaces/IRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","exportedSymbols":{"IRevocationRegistry":[1377]},"id":1378,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1339,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IRevocationRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":1377,"linearizedBaseContracts":[1377],"name":"IRevocationRegistry","nameLocation":"68:19:19","nodeType":"ContractDefinition","nodes":[{"functionSelector":"adb610a3","id":1344,"implemented":false,"kind":"function","modifiers":[],"name":"currentNonce","nameLocation":"103:12:19","nodeType":"FunctionDefinition","parameters":{"id":1340,"nodeType":"ParameterList","parameters":[],"src":"115:2:19"},"returnParameters":{"id":1343,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1342,"mutability":"mutable","name":"nonce","nameLocation":"149:5:19","nodeType":"VariableDeclaration","scope":1344,"src":"141:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1341,"name":"uint256","nodeType":"ElementaryTypeName","src":"141:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"140:15:19"},"scope":1377,"src":"94:62:19","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"12b7ad29","id":1355,"implemented":false,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"171:8:19","nodeType":"FunctionDefinition","parameters":{"id":1353,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1346,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"188:15:19","nodeType":"VariableDeclaration","scope":1355,"src":"180:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1345,"name":"bytes32","nodeType":"ElementaryTypeName","src":"180:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1348,"mutability":"mutable","name":"vcId","nameLocation":"213:4:19","nodeType":"VariableDeclaration","scope":1355,"src":"205:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1347,"name":"uint256","nodeType":"ElementaryTypeName","src":"205:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1350,"mutability":"mutable","name":"nonce","nameLocation":"227:5:19","nodeType":"VariableDeclaration","scope":1355,"src":"219:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1349,"name":"uint256","nodeType":"ElementaryTypeName","src":"219:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1352,"mutability":"mutable","name":"signature","nameLocation":"249:9:19","nodeType":"VariableDeclaration","scope":1355,"src":"234:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1351,"name":"bytes","nodeType":"ElementaryTypeName","src":"234:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"179:80:19"},"returnParameters":{"id":1354,"nodeType":"ParameterList","parameters":[],"src":"268:0:19"},"scope":1377,"src":"162:107:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"4c66f71c","id":1367,"implemented":false,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"284:14:19","nodeType":"FunctionDefinition","parameters":{"id":1365,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1357,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"307:15:19","nodeType":"VariableDeclaration","scope":1367,"src":"299:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"299:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1360,"mutability":"mutable","name":"vcIds","nameLocation":"343:5:19","nodeType":"VariableDeclaration","scope":1367,"src":"324:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1358,"name":"uint256","nodeType":"ElementaryTypeName","src":"324:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1359,"nodeType":"ArrayTypeName","src":"324:9:19","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":1362,"mutability":"mutable","name":"nonce","nameLocation":"358:5:19","nodeType":"VariableDeclaration","scope":1367,"src":"350:13:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1361,"name":"uint256","nodeType":"ElementaryTypeName","src":"350:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1364,"mutability":"mutable","name":"signature","nameLocation":"380:9:19","nodeType":"VariableDeclaration","scope":1367,"src":"365:24:19","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1363,"name":"bytes","nodeType":"ElementaryTypeName","src":"365:5:19","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"298:92:19"},"returnParameters":{"id":1366,"nodeType":"ParameterList","parameters":[],"src":"399:0:19"},"scope":1377,"src":"275:125:19","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a3a2656a","id":1376,"implemented":false,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"415:9:19","nodeType":"FunctionDefinition","parameters":{"id":1372,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1369,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"433:15:19","nodeType":"VariableDeclaration","scope":1376,"src":"425:23:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1368,"name":"bytes32","nodeType":"ElementaryTypeName","src":"425:7:19","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1371,"mutability":"mutable","name":"vcId","nameLocation":"458:4:19","nodeType":"VariableDeclaration","scope":1376,"src":"450:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1370,"name":"uint256","nodeType":"ElementaryTypeName","src":"450:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"424:39:19"},"returnParameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1374,"mutability":"mutable","name":"revoked","nameLocation":"492:7:19","nodeType":"VariableDeclaration","scope":1376,"src":"487:12:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1373,"name":"bool","nodeType":"ElementaryTypeName","src":"487:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"486:14:19"},"scope":1377,"src":"406:95:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1378,"src":"58:445:19","usedErrors":[],"usedEvents":[]}],"src":"32:472:19"},"id":19}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"OpenCampusCertificateRevocationRegistry":{"abi":[{"inputs":[{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidIssuer","type":"error"},{"inputs":[],"name":"InvalidNonce","type":"error"},{"inputs":[],"name":"InvalidSignature","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"VcRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentNonce","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"revocations","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"VcRevoked(bytes32,address,uint256)":{"params":{"caller":"address of caller that invoked the revocation.","hashedIssuerDid":"the hashed Did for the issuer","vcId":"The Id for the VC revoked."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"OpenCampusCertificateRevocationRegistry.","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1098":{"entryPoint":null,"id":1098,"parameterSlots":1,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@constructorInit_227":{"entryPoint":148,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":94,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":271,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":319,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$1337_fromMemory":{"entryPoint":412,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":462,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:564:20","nodeType":"YulBlock","src":"0:564:20","statements":[{"nativeSrc":"6:3:20","nodeType":"YulBlock","src":"6:3:20","statements":[]},{"body":{"nativeSrc":"123:209:20","nodeType":"YulBlock","src":"123:209:20","statements":[{"body":{"nativeSrc":"169:16:20","nodeType":"YulBlock","src":"169:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:20","nodeType":"YulLiteral","src":"178:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:20","nodeType":"YulLiteral","src":"181:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:20","nodeType":"YulIdentifier","src":"171:6:20"},"nativeSrc":"171:12:20","nodeType":"YulFunctionCall","src":"171:12:20"},"nativeSrc":"171:12:20","nodeType":"YulExpressionStatement","src":"171:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"144:7:20","nodeType":"YulIdentifier","src":"144:7:20"},{"name":"headStart","nativeSrc":"153:9:20","nodeType":"YulIdentifier","src":"153:9:20"}],"functionName":{"name":"sub","nativeSrc":"140:3:20","nodeType":"YulIdentifier","src":"140:3:20"},"nativeSrc":"140:23:20","nodeType":"YulFunctionCall","src":"140:23:20"},{"kind":"number","nativeSrc":"165:2:20","nodeType":"YulLiteral","src":"165:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"136:3:20","nodeType":"YulIdentifier","src":"136:3:20"},"nativeSrc":"136:32:20","nodeType":"YulFunctionCall","src":"136:32:20"},"nativeSrc":"133:52:20","nodeType":"YulIf","src":"133:52:20"},{"nativeSrc":"194:29:20","nodeType":"YulVariableDeclaration","src":"194:29:20","value":{"arguments":[{"name":"headStart","nativeSrc":"213:9:20","nodeType":"YulIdentifier","src":"213:9:20"}],"functionName":{"name":"mload","nativeSrc":"207:5:20","nodeType":"YulIdentifier","src":"207:5:20"},"nativeSrc":"207:16:20","nodeType":"YulFunctionCall","src":"207:16:20"},"variables":[{"name":"value","nativeSrc":"198:5:20","nodeType":"YulTypedName","src":"198:5:20","type":""}]},{"body":{"nativeSrc":"286:16:20","nodeType":"YulBlock","src":"286:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"295:1:20","nodeType":"YulLiteral","src":"295:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"298:1:20","nodeType":"YulLiteral","src":"298:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"288:6:20","nodeType":"YulIdentifier","src":"288:6:20"},"nativeSrc":"288:12:20","nodeType":"YulFunctionCall","src":"288:12:20"},"nativeSrc":"288:12:20","nodeType":"YulExpressionStatement","src":"288:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"245:5:20","nodeType":"YulIdentifier","src":"245:5:20"},{"arguments":[{"name":"value","nativeSrc":"256:5:20","nodeType":"YulIdentifier","src":"256:5:20"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"271:3:20","nodeType":"YulLiteral","src":"271:3:20","type":"","value":"160"},{"kind":"number","nativeSrc":"276:1:20","nodeType":"YulLiteral","src":"276:1:20","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"267:3:20","nodeType":"YulIdentifier","src":"267:3:20"},"nativeSrc":"267:11:20","nodeType":"YulFunctionCall","src":"267:11:20"},{"kind":"number","nativeSrc":"280:1:20","nodeType":"YulLiteral","src":"280:1:20","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"263:3:20","nodeType":"YulIdentifier","src":"263:3:20"},"nativeSrc":"263:19:20","nodeType":"YulFunctionCall","src":"263:19:20"}],"functionName":{"name":"and","nativeSrc":"252:3:20","nodeType":"YulIdentifier","src":"252:3:20"},"nativeSrc":"252:31:20","nodeType":"YulFunctionCall","src":"252:31:20"}],"functionName":{"name":"eq","nativeSrc":"242:2:20","nodeType":"YulIdentifier","src":"242:2:20"},"nativeSrc":"242:42:20","nodeType":"YulFunctionCall","src":"242:42:20"}],"functionName":{"name":"iszero","nativeSrc":"235:6:20","nodeType":"YulIdentifier","src":"235:6:20"},"nativeSrc":"235:50:20","nodeType":"YulFunctionCall","src":"235:50:20"},"nativeSrc":"232:70:20","nodeType":"YulIf","src":"232:70:20"},{"nativeSrc":"311:15:20","nodeType":"YulAssignment","src":"311:15:20","value":{"name":"value","nativeSrc":"321:5:20","nodeType":"YulIdentifier","src":"321:5:20"},"variableNames":[{"name":"value0","nativeSrc":"311:6:20","nodeType":"YulIdentifier","src":"311:6:20"}]}]},"name":"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$1337_fromMemory","nativeSrc":"14:318:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"89:9:20","nodeType":"YulTypedName","src":"89:9:20","type":""},{"name":"dataEnd","nativeSrc":"100:7:20","nodeType":"YulTypedName","src":"100:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"112:6:20","nodeType":"YulTypedName","src":"112:6:20","type":""}],"src":"14:318:20"},{"body":{"nativeSrc":"386:176:20","nodeType":"YulBlock","src":"386:176:20","statements":[{"nativeSrc":"396:17:20","nodeType":"YulAssignment","src":"396:17:20","value":{"arguments":[{"name":"x","nativeSrc":"408:1:20","nodeType":"YulIdentifier","src":"408:1:20"},{"name":"y","nativeSrc":"411:1:20","nodeType":"YulIdentifier","src":"411:1:20"}],"functionName":{"name":"sub","nativeSrc":"404:3:20","nodeType":"YulIdentifier","src":"404:3:20"},"nativeSrc":"404:9:20","nodeType":"YulFunctionCall","src":"404:9:20"},"variableNames":[{"name":"diff","nativeSrc":"396:4:20","nodeType":"YulIdentifier","src":"396:4:20"}]},{"body":{"nativeSrc":"445:111:20","nodeType":"YulBlock","src":"445:111:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"466:1:20","nodeType":"YulLiteral","src":"466:1:20","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"473:3:20","nodeType":"YulLiteral","src":"473:3:20","type":"","value":"224"},{"kind":"number","nativeSrc":"478:10:20","nodeType":"YulLiteral","src":"478:10:20","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"469:3:20","nodeType":"YulIdentifier","src":"469:3:20"},"nativeSrc":"469:20:20","nodeType":"YulFunctionCall","src":"469:20:20"}],"functionName":{"name":"mstore","nativeSrc":"459:6:20","nodeType":"YulIdentifier","src":"459:6:20"},"nativeSrc":"459:31:20","nodeType":"YulFunctionCall","src":"459:31:20"},"nativeSrc":"459:31:20","nodeType":"YulExpressionStatement","src":"459:31:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"510:1:20","nodeType":"YulLiteral","src":"510:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"513:4:20","nodeType":"YulLiteral","src":"513:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"503:6:20","nodeType":"YulIdentifier","src":"503:6:20"},"nativeSrc":"503:15:20","nodeType":"YulFunctionCall","src":"503:15:20"},"nativeSrc":"503:15:20","nodeType":"YulExpressionStatement","src":"503:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"538:1:20","nodeType":"YulLiteral","src":"538:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"541:4:20","nodeType":"YulLiteral","src":"541:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"531:6:20","nodeType":"YulIdentifier","src":"531:6:20"},"nativeSrc":"531:15:20","nodeType":"YulFunctionCall","src":"531:15:20"},"nativeSrc":"531:15:20","nodeType":"YulExpressionStatement","src":"531:15:20"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"428:4:20","nodeType":"YulIdentifier","src":"428:4:20"},{"name":"x","nativeSrc":"434:1:20","nodeType":"YulIdentifier","src":"434:1:20"}],"functionName":{"name":"gt","nativeSrc":"425:2:20","nodeType":"YulIdentifier","src":"425:2:20"},"nativeSrc":"425:11:20","nodeType":"YulFunctionCall","src":"425:11:20"},"nativeSrc":"422:134:20","nodeType":"YulIf","src":"422:134:20"}]},"name":"checked_sub_t_uint256","nativeSrc":"337:225:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"368:1:20","nodeType":"YulTypedName","src":"368:1:20","type":""},{"name":"y","nativeSrc":"371:1:20","nodeType":"YulTypedName","src":"371:1:20","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"377:4:20","nodeType":"YulTypedName","src":"377:4:20","type":""}],"src":"337:225:20"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$1337_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n}","id":20,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60a06040523480156200001157600080fd5b50604051620010833803806200108383398101604081905262000034916200019c565b336200004b81620000446200005e565b9062000094565b506001600160a01b0316608052620001f0565b6000806200008e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd620001ce565b92915050565b6001600160a01b03811615620000eb5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200010b6307f5828d60e41b6001620001036200010f565b91906200013f565b5050565b6000806200008e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e620001ce565b600160e01b6001600160e01b03198316016200016e576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b600060208284031215620001af57600080fd5b81516001600160a01b0381168114620001c757600080fd5b9392505050565b818103818111156200008e57634e487b7160e01b600052601160045260246000fd5b608051610e696200021a600039600081816103350152818161061901526108320152610e696000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3a2656a1161005b578063a3a2656a1461010a578063adb610a31461011d578063d394ab5a14610134578063f2fde38b1461017257600080fd5b806301ffc9a71461008d57806312b7ad29146100b55780634c66f71c146100ca5780638da5cb5b146100dd575b600080fd5b6100a061009b366004610b0b565b610185565b60405190151581526020015b60405180910390f35b6100c86100c3366004610b9d565b61019f565b005b6100c86100d8366004610bfe565b610488565b6100e561079f565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100a0610118366004610cb2565b6107cb565b61012660015481565b6040519081526020016100ac565b6100e5610142366004610cb2565b600060208181529281526040808220909352908152205473ffffffffffffffffffffffffffffffffffffffff1681565b6100c8610180366004610cd4565b6108a5565b6000610199826101936108bc565b906108ea565b92915050565b60015483146101da576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60418114610214576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020808201889052918101869052606081018590526021840135918435919085013590600090600190608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156102c0573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101517ff9236a39000000000000000000000000000000000000000000000000000000008252600482018c905273ffffffffffffffffffffffffffffffffffffffff80821660248401529093507f000000000000000000000000000000000000000000000000000000000000000016915063f9236a3990604401602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190610d0a565b1561044b576000898152602081815260408083208b845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825289918b917f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056910160405180910390a360016000815461044290610d5b565b9091555061047d565b6040517fbdbfe21600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b60015483146104c3576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604181146104fd576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160218301359083359060208086013591600091600191610528918d918d918d918d9101610d93565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156105a4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101517ff9236a39000000000000000000000000000000000000000000000000000000008252600482018d905273ffffffffffffffffffffffffffffffffffffffff80821660248401529093507f000000000000000000000000000000000000000000000000000000000000000016915063f9236a3990604401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610d0a565b1561044b5760005b8881101561077f5760008b815260208190526040812083918c8c858181106106b7576106b7610df1565b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089898281811061071c5761071c610df1565b905060200201358b7f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f50568460405161076f919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a360010161068d565b5060016000815461078f90610d5b565b9091555050505050505050505050565b60006107c66107ac6109c4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000828152602081815260408083208484529091528082205490517ff9236a390000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff91821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190610d0a565b949350505050565b6108b933826108b26109c4565b91906109f2565b50565b60008061019960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610e20565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161093a57506000610199565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161098b57506001610199565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019960017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610e20565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a63576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b055783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600060208284031215610b1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b4d57600080fd5b9392505050565b60008083601f840112610b6657600080fd5b50813567ffffffffffffffff811115610b7e57600080fd5b602083019150836020828501011115610b9657600080fd5b9250929050565b600080600080600060808688031215610bb557600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115610be157600080fd5b610bed88828901610b54565b969995985093965092949392505050565b60008060008060008060808789031215610c1757600080fd5b86359550602087013567ffffffffffffffff80821115610c3657600080fd5b818901915089601f830112610c4a57600080fd5b813581811115610c5957600080fd5b8a60208260051b8501011115610c6e57600080fd5b60208301975080965050604089013594506060890135915080821115610c9357600080fd5b50610ca089828a01610b54565b979a9699509497509295939492505050565b60008060408385031215610cc557600080fd5b50508035926020909101359150565b600060208284031215610ce657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b4d57600080fd5b600060208284031215610d1c57600080fd5b81518015158114610b4d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8c57610d8c610d2c565b5060010190565b8481526060602082015282606082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115610dd257600080fd5b8360051b80866080850137604083019390935250016080019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561019957610199610d2c56fea26469706673582212209e28d931a67c51a7b9bdb87ba9d987e1c8b6242669600cd8bb79a2f562cbb08d64736f6c63430008160033","opcodes":"PUSH1 0xA0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1083 CODESIZE SUB DUP1 PUSH3 0x1083 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x19C JUMP JUMPDEST CALLER PUSH3 0x4B DUP2 PUSH3 0x44 PUSH3 0x5E JUMP JUMPDEST SWAP1 PUSH3 0x94 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 MSTORE PUSH3 0x1F0 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x8E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x1CE JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0xEB JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x10B PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x103 PUSH3 0x10F JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x13F JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x8E PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x1CE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x16E JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x1AF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x1C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x8E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH2 0xE69 PUSH3 0x21A PUSH1 0x0 CODECOPY PUSH1 0x0 DUP2 DUP2 PUSH2 0x335 ADD MSTORE DUP2 DUP2 PUSH2 0x619 ADD MSTORE PUSH2 0x832 ADD MSTORE PUSH2 0xE69 PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A2656A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA3A2656A EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xADB610A3 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0xD394AB5A EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x12B7AD29 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x4C66F71C EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBFE JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH2 0x126 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x199 DUP3 PUSH2 0x193 PUSH2 0x8BC JUMP JUMPDEST SWAP1 PUSH2 0x8EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x1DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x756688FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE SWAP2 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x21 DUP5 ADD CALLDATALOAD SWAP2 DUP5 CALLDATALOAD SWAP2 SWAP1 DUP6 ADD CALLDATALOAD SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP4 POP PUSH32 0x0 AND SWAP2 POP PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE DUP10 SWAP2 DUP12 SWAP2 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x442 SWAP1 PUSH2 0xD5B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBDBFE21600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x4C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x756688FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x528 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 ADD PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP14 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP4 POP PUSH32 0x0 AND SWAP2 POP PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x661 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x685 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x77F JUMPI PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 SWAP2 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0x6B7 JUMPI PUSH2 0x6B7 PUSH2 0xDF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x71C JUMPI PUSH2 0x71C PUSH2 0xDF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP12 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 DUP5 PUSH1 0x40 MLOAD PUSH2 0x76F SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 ADD PUSH2 0x68D JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x78F SWAP1 PUSH2 0xD5B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C6 PUSH2 0x7AC PUSH2 0x9C4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x879 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x89D SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8B9 CALLER DUP3 PUSH2 0x8B2 PUSH2 0x9C4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x199 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xE20 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x93A JUMPI POP PUSH1 0x0 PUSH2 0x199 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x98B JUMPI POP PUSH1 0x1 PUSH2 0x199 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x199 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xE20 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB05 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xB66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xB96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBED DUP9 DUP3 DUP10 ADD PUSH2 0xB54 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xC59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCA0 DUP10 DUP3 DUP11 ADD PUSH2 0xB54 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD8C JUMPI PUSH2 0xD8C PUSH2 0xD2C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 GT ISZERO PUSH2 0xDD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x5 SHL DUP1 DUP7 PUSH1 0x80 DUP6 ADD CALLDATACOPY PUSH1 0x40 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP ADD PUSH1 0x80 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x199 JUMPI PUSH2 0x199 PUSH2 0xD2C JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0x28 0xD9 BALANCE 0xA6 PUSH29 0x51A7B9BDB87BA9D987E1C8B6242669600CD8BB79A2F562CBB08D64736F PUSH13 0x63430008160033000000000000 ","sourceMap":"480:3133:16:-:0;;;901:118;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;964:10;1008:63:0;964:10:16;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;986:26:16::1;;::::0;480:3133;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:318:20:-;112:6;165:2;153:9;144:7;140:23;136:32;133:52;;;181:1;178;171:12;133:52;207:16;;-1:-1:-1;;;;;252:31:20;;242:42;;232:70;;298:1;295;288:12;232:70;321:5;14:318;-1:-1:-1;;;14:318:20:o;337:225::-;404:9;;;425:11;;;422:134;;;478:10;473:3;469:20;466:1;459:31;513:4;510:1;503:15;541:4;538:1;531:15;337:225;480:3133:16;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@_msgSender_930":{"entryPoint":null,"id":930,"parameterSlots":0,"returnSlots":1},"@batchRevokeVCs_1303":{"entryPoint":1160,"id":1303,"parameterSlots":6,"returnSlots":0},"@currentNonce_1076":{"entryPoint":null,"id":1076,"parameterSlots":0,"returnSlots":0},"@isRevoked_1122":{"entryPoint":1995,"id":1122,"parameterSlots":2,"returnSlots":1},"@layout_383":{"entryPoint":2500,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2236,"id":531,"parameterSlots":0,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":1951,"id":62,"parameterSlots":0,"returnSlots":1},"@revocations_1074":{"entryPoint":null,"id":1074,"parameterSlots":0,"returnSlots":0},"@revokeVC_1204":{"entryPoint":415,"id":1204,"parameterSlots":5,"returnSlots":0},"@supportsInterface_413":{"entryPoint":389,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2282,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2546,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2213,"id":79,"parameterSlots":1,"returnSlots":0},"abi_decode_bytes_calldata":{"entryPoint":2900,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":3284,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":3338,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_uint256t_bytes_calldata_ptr":{"entryPoint":3070,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":3250,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_uint256t_bytes_calldata_ptr":{"entryPoint":2973,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes4":{"entryPoint":2827,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed":{"entryPoint":3475,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":3616,"id":null,"parameterSlots":2,"returnSlots":1},"increment_t_uint256":{"entryPoint":3419,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":3372,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":3569,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:6196:20","nodeType":"YulBlock","src":"0:6196:20","statements":[{"nativeSrc":"6:3:20","nodeType":"YulBlock","src":"6:3:20","statements":[]},{"body":{"nativeSrc":"83:263:20","nodeType":"YulBlock","src":"83:263:20","statements":[{"body":{"nativeSrc":"129:16:20","nodeType":"YulBlock","src":"129:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:20","nodeType":"YulLiteral","src":"138:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:20","nodeType":"YulLiteral","src":"141:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:20","nodeType":"YulIdentifier","src":"131:6:20"},"nativeSrc":"131:12:20","nodeType":"YulFunctionCall","src":"131:12:20"},"nativeSrc":"131:12:20","nodeType":"YulExpressionStatement","src":"131:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:20","nodeType":"YulIdentifier","src":"104:7:20"},{"name":"headStart","nativeSrc":"113:9:20","nodeType":"YulIdentifier","src":"113:9:20"}],"functionName":{"name":"sub","nativeSrc":"100:3:20","nodeType":"YulIdentifier","src":"100:3:20"},"nativeSrc":"100:23:20","nodeType":"YulFunctionCall","src":"100:23:20"},{"kind":"number","nativeSrc":"125:2:20","nodeType":"YulLiteral","src":"125:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:20","nodeType":"YulIdentifier","src":"96:3:20"},"nativeSrc":"96:32:20","nodeType":"YulFunctionCall","src":"96:32:20"},"nativeSrc":"93:52:20","nodeType":"YulIf","src":"93:52:20"},{"nativeSrc":"154:36:20","nodeType":"YulVariableDeclaration","src":"154:36:20","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:20","nodeType":"YulIdentifier","src":"180:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:20","nodeType":"YulIdentifier","src":"167:12:20"},"nativeSrc":"167:23:20","nodeType":"YulFunctionCall","src":"167:23:20"},"variables":[{"name":"value","nativeSrc":"158:5:20","nodeType":"YulTypedName","src":"158:5:20","type":""}]},{"body":{"nativeSrc":"300:16:20","nodeType":"YulBlock","src":"300:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:20","nodeType":"YulLiteral","src":"309:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:20","nodeType":"YulLiteral","src":"312:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:20","nodeType":"YulIdentifier","src":"302:6:20"},"nativeSrc":"302:12:20","nodeType":"YulFunctionCall","src":"302:12:20"},"nativeSrc":"302:12:20","nodeType":"YulExpressionStatement","src":"302:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:20","nodeType":"YulIdentifier","src":"212:5:20"},{"arguments":[{"name":"value","nativeSrc":"223:5:20","nodeType":"YulIdentifier","src":"223:5:20"},{"kind":"number","nativeSrc":"230:66:20","nodeType":"YulLiteral","src":"230:66:20","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:20","nodeType":"YulIdentifier","src":"219:3:20"},"nativeSrc":"219:78:20","nodeType":"YulFunctionCall","src":"219:78:20"}],"functionName":{"name":"eq","nativeSrc":"209:2:20","nodeType":"YulIdentifier","src":"209:2:20"},"nativeSrc":"209:89:20","nodeType":"YulFunctionCall","src":"209:89:20"}],"functionName":{"name":"iszero","nativeSrc":"202:6:20","nodeType":"YulIdentifier","src":"202:6:20"},"nativeSrc":"202:97:20","nodeType":"YulFunctionCall","src":"202:97:20"},"nativeSrc":"199:117:20","nodeType":"YulIf","src":"199:117:20"},{"nativeSrc":"325:15:20","nodeType":"YulAssignment","src":"325:15:20","value":{"name":"value","nativeSrc":"335:5:20","nodeType":"YulIdentifier","src":"335:5:20"},"variableNames":[{"name":"value0","nativeSrc":"325:6:20","nodeType":"YulIdentifier","src":"325:6:20"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:20","nodeType":"YulTypedName","src":"49:9:20","type":""},{"name":"dataEnd","nativeSrc":"60:7:20","nodeType":"YulTypedName","src":"60:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:20","nodeType":"YulTypedName","src":"72:6:20","type":""}],"src":"14:332:20"},{"body":{"nativeSrc":"446:92:20","nodeType":"YulBlock","src":"446:92:20","statements":[{"nativeSrc":"456:26:20","nodeType":"YulAssignment","src":"456:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:20","nodeType":"YulIdentifier","src":"468:9:20"},{"kind":"number","nativeSrc":"479:2:20","nodeType":"YulLiteral","src":"479:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:20","nodeType":"YulIdentifier","src":"464:3:20"},"nativeSrc":"464:18:20","nodeType":"YulFunctionCall","src":"464:18:20"},"variableNames":[{"name":"tail","nativeSrc":"456:4:20","nodeType":"YulIdentifier","src":"456:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:20","nodeType":"YulIdentifier","src":"498:9:20"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:20","nodeType":"YulIdentifier","src":"523:6:20"}],"functionName":{"name":"iszero","nativeSrc":"516:6:20","nodeType":"YulIdentifier","src":"516:6:20"},"nativeSrc":"516:14:20","nodeType":"YulFunctionCall","src":"516:14:20"}],"functionName":{"name":"iszero","nativeSrc":"509:6:20","nodeType":"YulIdentifier","src":"509:6:20"},"nativeSrc":"509:22:20","nodeType":"YulFunctionCall","src":"509:22:20"}],"functionName":{"name":"mstore","nativeSrc":"491:6:20","nodeType":"YulIdentifier","src":"491:6:20"},"nativeSrc":"491:41:20","nodeType":"YulFunctionCall","src":"491:41:20"},"nativeSrc":"491:41:20","nodeType":"YulExpressionStatement","src":"491:41:20"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:20","nodeType":"YulTypedName","src":"415:9:20","type":""},{"name":"value0","nativeSrc":"426:6:20","nodeType":"YulTypedName","src":"426:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:20","nodeType":"YulTypedName","src":"437:4:20","type":""}],"src":"351:187:20"},{"body":{"nativeSrc":"615:275:20","nodeType":"YulBlock","src":"615:275:20","statements":[{"body":{"nativeSrc":"664:16:20","nodeType":"YulBlock","src":"664:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"673:1:20","nodeType":"YulLiteral","src":"673:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"676:1:20","nodeType":"YulLiteral","src":"676:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"666:6:20","nodeType":"YulIdentifier","src":"666:6:20"},"nativeSrc":"666:12:20","nodeType":"YulFunctionCall","src":"666:12:20"},"nativeSrc":"666:12:20","nodeType":"YulExpressionStatement","src":"666:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"643:6:20","nodeType":"YulIdentifier","src":"643:6:20"},{"kind":"number","nativeSrc":"651:4:20","nodeType":"YulLiteral","src":"651:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"639:3:20","nodeType":"YulIdentifier","src":"639:3:20"},"nativeSrc":"639:17:20","nodeType":"YulFunctionCall","src":"639:17:20"},{"name":"end","nativeSrc":"658:3:20","nodeType":"YulIdentifier","src":"658:3:20"}],"functionName":{"name":"slt","nativeSrc":"635:3:20","nodeType":"YulIdentifier","src":"635:3:20"},"nativeSrc":"635:27:20","nodeType":"YulFunctionCall","src":"635:27:20"}],"functionName":{"name":"iszero","nativeSrc":"628:6:20","nodeType":"YulIdentifier","src":"628:6:20"},"nativeSrc":"628:35:20","nodeType":"YulFunctionCall","src":"628:35:20"},"nativeSrc":"625:55:20","nodeType":"YulIf","src":"625:55:20"},{"nativeSrc":"689:30:20","nodeType":"YulAssignment","src":"689:30:20","value":{"arguments":[{"name":"offset","nativeSrc":"712:6:20","nodeType":"YulIdentifier","src":"712:6:20"}],"functionName":{"name":"calldataload","nativeSrc":"699:12:20","nodeType":"YulIdentifier","src":"699:12:20"},"nativeSrc":"699:20:20","nodeType":"YulFunctionCall","src":"699:20:20"},"variableNames":[{"name":"length","nativeSrc":"689:6:20","nodeType":"YulIdentifier","src":"689:6:20"}]},{"body":{"nativeSrc":"762:16:20","nodeType":"YulBlock","src":"762:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"771:1:20","nodeType":"YulLiteral","src":"771:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"774:1:20","nodeType":"YulLiteral","src":"774:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"764:6:20","nodeType":"YulIdentifier","src":"764:6:20"},"nativeSrc":"764:12:20","nodeType":"YulFunctionCall","src":"764:12:20"},"nativeSrc":"764:12:20","nodeType":"YulExpressionStatement","src":"764:12:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"734:6:20","nodeType":"YulIdentifier","src":"734:6:20"},{"kind":"number","nativeSrc":"742:18:20","nodeType":"YulLiteral","src":"742:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"731:2:20","nodeType":"YulIdentifier","src":"731:2:20"},"nativeSrc":"731:30:20","nodeType":"YulFunctionCall","src":"731:30:20"},"nativeSrc":"728:50:20","nodeType":"YulIf","src":"728:50:20"},{"nativeSrc":"787:29:20","nodeType":"YulAssignment","src":"787:29:20","value":{"arguments":[{"name":"offset","nativeSrc":"803:6:20","nodeType":"YulIdentifier","src":"803:6:20"},{"kind":"number","nativeSrc":"811:4:20","nodeType":"YulLiteral","src":"811:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"799:3:20","nodeType":"YulIdentifier","src":"799:3:20"},"nativeSrc":"799:17:20","nodeType":"YulFunctionCall","src":"799:17:20"},"variableNames":[{"name":"arrayPos","nativeSrc":"787:8:20","nodeType":"YulIdentifier","src":"787:8:20"}]},{"body":{"nativeSrc":"868:16:20","nodeType":"YulBlock","src":"868:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"877:1:20","nodeType":"YulLiteral","src":"877:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"880:1:20","nodeType":"YulLiteral","src":"880:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"870:6:20","nodeType":"YulIdentifier","src":"870:6:20"},"nativeSrc":"870:12:20","nodeType":"YulFunctionCall","src":"870:12:20"},"nativeSrc":"870:12:20","nodeType":"YulExpressionStatement","src":"870:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"839:6:20","nodeType":"YulIdentifier","src":"839:6:20"},{"name":"length","nativeSrc":"847:6:20","nodeType":"YulIdentifier","src":"847:6:20"}],"functionName":{"name":"add","nativeSrc":"835:3:20","nodeType":"YulIdentifier","src":"835:3:20"},"nativeSrc":"835:19:20","nodeType":"YulFunctionCall","src":"835:19:20"},{"kind":"number","nativeSrc":"856:4:20","nodeType":"YulLiteral","src":"856:4:20","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"831:3:20","nodeType":"YulIdentifier","src":"831:3:20"},"nativeSrc":"831:30:20","nodeType":"YulFunctionCall","src":"831:30:20"},{"name":"end","nativeSrc":"863:3:20","nodeType":"YulIdentifier","src":"863:3:20"}],"functionName":{"name":"gt","nativeSrc":"828:2:20","nodeType":"YulIdentifier","src":"828:2:20"},"nativeSrc":"828:39:20","nodeType":"YulFunctionCall","src":"828:39:20"},"nativeSrc":"825:59:20","nodeType":"YulIf","src":"825:59:20"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"543:347:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"578:6:20","nodeType":"YulTypedName","src":"578:6:20","type":""},{"name":"end","nativeSrc":"586:3:20","nodeType":"YulTypedName","src":"586:3:20","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"594:8:20","nodeType":"YulTypedName","src":"594:8:20","type":""},{"name":"length","nativeSrc":"604:6:20","nodeType":"YulTypedName","src":"604:6:20","type":""}],"src":"543:347:20"},{"body":{"nativeSrc":"1035:474:20","nodeType":"YulBlock","src":"1035:474:20","statements":[{"body":{"nativeSrc":"1082:16:20","nodeType":"YulBlock","src":"1082:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1091:1:20","nodeType":"YulLiteral","src":"1091:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1094:1:20","nodeType":"YulLiteral","src":"1094:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1084:6:20","nodeType":"YulIdentifier","src":"1084:6:20"},"nativeSrc":"1084:12:20","nodeType":"YulFunctionCall","src":"1084:12:20"},"nativeSrc":"1084:12:20","nodeType":"YulExpressionStatement","src":"1084:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1056:7:20","nodeType":"YulIdentifier","src":"1056:7:20"},{"name":"headStart","nativeSrc":"1065:9:20","nodeType":"YulIdentifier","src":"1065:9:20"}],"functionName":{"name":"sub","nativeSrc":"1052:3:20","nodeType":"YulIdentifier","src":"1052:3:20"},"nativeSrc":"1052:23:20","nodeType":"YulFunctionCall","src":"1052:23:20"},{"kind":"number","nativeSrc":"1077:3:20","nodeType":"YulLiteral","src":"1077:3:20","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1048:3:20","nodeType":"YulIdentifier","src":"1048:3:20"},"nativeSrc":"1048:33:20","nodeType":"YulFunctionCall","src":"1048:33:20"},"nativeSrc":"1045:53:20","nodeType":"YulIf","src":"1045:53:20"},{"nativeSrc":"1107:33:20","nodeType":"YulAssignment","src":"1107:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1130:9:20","nodeType":"YulIdentifier","src":"1130:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"1117:12:20","nodeType":"YulIdentifier","src":"1117:12:20"},"nativeSrc":"1117:23:20","nodeType":"YulFunctionCall","src":"1117:23:20"},"variableNames":[{"name":"value0","nativeSrc":"1107:6:20","nodeType":"YulIdentifier","src":"1107:6:20"}]},{"nativeSrc":"1149:42:20","nodeType":"YulAssignment","src":"1149:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1176:9:20","nodeType":"YulIdentifier","src":"1176:9:20"},{"kind":"number","nativeSrc":"1187:2:20","nodeType":"YulLiteral","src":"1187:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1172:3:20","nodeType":"YulIdentifier","src":"1172:3:20"},"nativeSrc":"1172:18:20","nodeType":"YulFunctionCall","src":"1172:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1159:12:20","nodeType":"YulIdentifier","src":"1159:12:20"},"nativeSrc":"1159:32:20","nodeType":"YulFunctionCall","src":"1159:32:20"},"variableNames":[{"name":"value1","nativeSrc":"1149:6:20","nodeType":"YulIdentifier","src":"1149:6:20"}]},{"nativeSrc":"1200:42:20","nodeType":"YulAssignment","src":"1200:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1227:9:20","nodeType":"YulIdentifier","src":"1227:9:20"},{"kind":"number","nativeSrc":"1238:2:20","nodeType":"YulLiteral","src":"1238:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1223:3:20","nodeType":"YulIdentifier","src":"1223:3:20"},"nativeSrc":"1223:18:20","nodeType":"YulFunctionCall","src":"1223:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1210:12:20","nodeType":"YulIdentifier","src":"1210:12:20"},"nativeSrc":"1210:32:20","nodeType":"YulFunctionCall","src":"1210:32:20"},"variableNames":[{"name":"value2","nativeSrc":"1200:6:20","nodeType":"YulIdentifier","src":"1200:6:20"}]},{"nativeSrc":"1251:46:20","nodeType":"YulVariableDeclaration","src":"1251:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1282:9:20","nodeType":"YulIdentifier","src":"1282:9:20"},{"kind":"number","nativeSrc":"1293:2:20","nodeType":"YulLiteral","src":"1293:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1278:3:20","nodeType":"YulIdentifier","src":"1278:3:20"},"nativeSrc":"1278:18:20","nodeType":"YulFunctionCall","src":"1278:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1265:12:20","nodeType":"YulIdentifier","src":"1265:12:20"},"nativeSrc":"1265:32:20","nodeType":"YulFunctionCall","src":"1265:32:20"},"variables":[{"name":"offset","nativeSrc":"1255:6:20","nodeType":"YulTypedName","src":"1255:6:20","type":""}]},{"body":{"nativeSrc":"1340:16:20","nodeType":"YulBlock","src":"1340:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1349:1:20","nodeType":"YulLiteral","src":"1349:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1352:1:20","nodeType":"YulLiteral","src":"1352:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1342:6:20","nodeType":"YulIdentifier","src":"1342:6:20"},"nativeSrc":"1342:12:20","nodeType":"YulFunctionCall","src":"1342:12:20"},"nativeSrc":"1342:12:20","nodeType":"YulExpressionStatement","src":"1342:12:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1312:6:20","nodeType":"YulIdentifier","src":"1312:6:20"},{"kind":"number","nativeSrc":"1320:18:20","nodeType":"YulLiteral","src":"1320:18:20","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1309:2:20","nodeType":"YulIdentifier","src":"1309:2:20"},"nativeSrc":"1309:30:20","nodeType":"YulFunctionCall","src":"1309:30:20"},"nativeSrc":"1306:50:20","nodeType":"YulIf","src":"1306:50:20"},{"nativeSrc":"1365:84:20","nodeType":"YulVariableDeclaration","src":"1365:84:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1421:9:20","nodeType":"YulIdentifier","src":"1421:9:20"},{"name":"offset","nativeSrc":"1432:6:20","nodeType":"YulIdentifier","src":"1432:6:20"}],"functionName":{"name":"add","nativeSrc":"1417:3:20","nodeType":"YulIdentifier","src":"1417:3:20"},"nativeSrc":"1417:22:20","nodeType":"YulFunctionCall","src":"1417:22:20"},{"name":"dataEnd","nativeSrc":"1441:7:20","nodeType":"YulIdentifier","src":"1441:7:20"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1391:25:20","nodeType":"YulIdentifier","src":"1391:25:20"},"nativeSrc":"1391:58:20","nodeType":"YulFunctionCall","src":"1391:58:20"},"variables":[{"name":"value3_1","nativeSrc":"1369:8:20","nodeType":"YulTypedName","src":"1369:8:20","type":""},{"name":"value4_1","nativeSrc":"1379:8:20","nodeType":"YulTypedName","src":"1379:8:20","type":""}]},{"nativeSrc":"1458:18:20","nodeType":"YulAssignment","src":"1458:18:20","value":{"name":"value3_1","nativeSrc":"1468:8:20","nodeType":"YulIdentifier","src":"1468:8:20"},"variableNames":[{"name":"value3","nativeSrc":"1458:6:20","nodeType":"YulIdentifier","src":"1458:6:20"}]},{"nativeSrc":"1485:18:20","nodeType":"YulAssignment","src":"1485:18:20","value":{"name":"value4_1","nativeSrc":"1495:8:20","nodeType":"YulIdentifier","src":"1495:8:20"},"variableNames":[{"name":"value4","nativeSrc":"1485:6:20","nodeType":"YulIdentifier","src":"1485:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_uint256t_bytes_calldata_ptr","nativeSrc":"895:614:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"969:9:20","nodeType":"YulTypedName","src":"969:9:20","type":""},{"name":"dataEnd","nativeSrc":"980:7:20","nodeType":"YulTypedName","src":"980:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"992:6:20","nodeType":"YulTypedName","src":"992:6:20","type":""},{"name":"value1","nativeSrc":"1000:6:20","nodeType":"YulTypedName","src":"1000:6:20","type":""},{"name":"value2","nativeSrc":"1008:6:20","nodeType":"YulTypedName","src":"1008:6:20","type":""},{"name":"value3","nativeSrc":"1016:6:20","nodeType":"YulTypedName","src":"1016:6:20","type":""},{"name":"value4","nativeSrc":"1024:6:20","nodeType":"YulTypedName","src":"1024:6:20","type":""}],"src":"895:614:20"},{"body":{"nativeSrc":"1689:864:20","nodeType":"YulBlock","src":"1689:864:20","statements":[{"body":{"nativeSrc":"1736:16:20","nodeType":"YulBlock","src":"1736:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1745:1:20","nodeType":"YulLiteral","src":"1745:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1748:1:20","nodeType":"YulLiteral","src":"1748:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1738:6:20","nodeType":"YulIdentifier","src":"1738:6:20"},"nativeSrc":"1738:12:20","nodeType":"YulFunctionCall","src":"1738:12:20"},"nativeSrc":"1738:12:20","nodeType":"YulExpressionStatement","src":"1738:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1710:7:20","nodeType":"YulIdentifier","src":"1710:7:20"},{"name":"headStart","nativeSrc":"1719:9:20","nodeType":"YulIdentifier","src":"1719:9:20"}],"functionName":{"name":"sub","nativeSrc":"1706:3:20","nodeType":"YulIdentifier","src":"1706:3:20"},"nativeSrc":"1706:23:20","nodeType":"YulFunctionCall","src":"1706:23:20"},{"kind":"number","nativeSrc":"1731:3:20","nodeType":"YulLiteral","src":"1731:3:20","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"1702:3:20","nodeType":"YulIdentifier","src":"1702:3:20"},"nativeSrc":"1702:33:20","nodeType":"YulFunctionCall","src":"1702:33:20"},"nativeSrc":"1699:53:20","nodeType":"YulIf","src":"1699:53:20"},{"nativeSrc":"1761:33:20","nodeType":"YulAssignment","src":"1761:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1784:9:20","nodeType":"YulIdentifier","src":"1784:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"1771:12:20","nodeType":"YulIdentifier","src":"1771:12:20"},"nativeSrc":"1771:23:20","nodeType":"YulFunctionCall","src":"1771:23:20"},"variableNames":[{"name":"value0","nativeSrc":"1761:6:20","nodeType":"YulIdentifier","src":"1761:6:20"}]},{"nativeSrc":"1803:46:20","nodeType":"YulVariableDeclaration","src":"1803:46:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1834:9:20","nodeType":"YulIdentifier","src":"1834:9:20"},{"kind":"number","nativeSrc":"1845:2:20","nodeType":"YulLiteral","src":"1845:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1830:3:20","nodeType":"YulIdentifier","src":"1830:3:20"},"nativeSrc":"1830:18:20","nodeType":"YulFunctionCall","src":"1830:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"1817:12:20","nodeType":"YulIdentifier","src":"1817:12:20"},"nativeSrc":"1817:32:20","nodeType":"YulFunctionCall","src":"1817:32:20"},"variables":[{"name":"offset","nativeSrc":"1807:6:20","nodeType":"YulTypedName","src":"1807:6:20","type":""}]},{"nativeSrc":"1858:28:20","nodeType":"YulVariableDeclaration","src":"1858:28:20","value":{"kind":"number","nativeSrc":"1868:18:20","nodeType":"YulLiteral","src":"1868:18:20","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"1862:2:20","nodeType":"YulTypedName","src":"1862:2:20","type":""}]},{"body":{"nativeSrc":"1913:16:20","nodeType":"YulBlock","src":"1913:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1922:1:20","nodeType":"YulLiteral","src":"1922:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"1925:1:20","nodeType":"YulLiteral","src":"1925:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1915:6:20","nodeType":"YulIdentifier","src":"1915:6:20"},"nativeSrc":"1915:12:20","nodeType":"YulFunctionCall","src":"1915:12:20"},"nativeSrc":"1915:12:20","nodeType":"YulExpressionStatement","src":"1915:12:20"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1901:6:20","nodeType":"YulIdentifier","src":"1901:6:20"},{"name":"_1","nativeSrc":"1909:2:20","nodeType":"YulIdentifier","src":"1909:2:20"}],"functionName":{"name":"gt","nativeSrc":"1898:2:20","nodeType":"YulIdentifier","src":"1898:2:20"},"nativeSrc":"1898:14:20","nodeType":"YulFunctionCall","src":"1898:14:20"},"nativeSrc":"1895:34:20","nodeType":"YulIf","src":"1895:34:20"},{"nativeSrc":"1938:32:20","nodeType":"YulVariableDeclaration","src":"1938:32:20","value":{"arguments":[{"name":"headStart","nativeSrc":"1952:9:20","nodeType":"YulIdentifier","src":"1952:9:20"},{"name":"offset","nativeSrc":"1963:6:20","nodeType":"YulIdentifier","src":"1963:6:20"}],"functionName":{"name":"add","nativeSrc":"1948:3:20","nodeType":"YulIdentifier","src":"1948:3:20"},"nativeSrc":"1948:22:20","nodeType":"YulFunctionCall","src":"1948:22:20"},"variables":[{"name":"_2","nativeSrc":"1942:2:20","nodeType":"YulTypedName","src":"1942:2:20","type":""}]},{"body":{"nativeSrc":"2018:16:20","nodeType":"YulBlock","src":"2018:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2027:1:20","nodeType":"YulLiteral","src":"2027:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2030:1:20","nodeType":"YulLiteral","src":"2030:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2020:6:20","nodeType":"YulIdentifier","src":"2020:6:20"},"nativeSrc":"2020:12:20","nodeType":"YulFunctionCall","src":"2020:12:20"},"nativeSrc":"2020:12:20","nodeType":"YulExpressionStatement","src":"2020:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"1997:2:20","nodeType":"YulIdentifier","src":"1997:2:20"},{"kind":"number","nativeSrc":"2001:4:20","nodeType":"YulLiteral","src":"2001:4:20","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1993:3:20","nodeType":"YulIdentifier","src":"1993:3:20"},"nativeSrc":"1993:13:20","nodeType":"YulFunctionCall","src":"1993:13:20"},{"name":"dataEnd","nativeSrc":"2008:7:20","nodeType":"YulIdentifier","src":"2008:7:20"}],"functionName":{"name":"slt","nativeSrc":"1989:3:20","nodeType":"YulIdentifier","src":"1989:3:20"},"nativeSrc":"1989:27:20","nodeType":"YulFunctionCall","src":"1989:27:20"}],"functionName":{"name":"iszero","nativeSrc":"1982:6:20","nodeType":"YulIdentifier","src":"1982:6:20"},"nativeSrc":"1982:35:20","nodeType":"YulFunctionCall","src":"1982:35:20"},"nativeSrc":"1979:55:20","nodeType":"YulIf","src":"1979:55:20"},{"nativeSrc":"2043:30:20","nodeType":"YulVariableDeclaration","src":"2043:30:20","value":{"arguments":[{"name":"_2","nativeSrc":"2070:2:20","nodeType":"YulIdentifier","src":"2070:2:20"}],"functionName":{"name":"calldataload","nativeSrc":"2057:12:20","nodeType":"YulIdentifier","src":"2057:12:20"},"nativeSrc":"2057:16:20","nodeType":"YulFunctionCall","src":"2057:16:20"},"variables":[{"name":"length","nativeSrc":"2047:6:20","nodeType":"YulTypedName","src":"2047:6:20","type":""}]},{"body":{"nativeSrc":"2100:16:20","nodeType":"YulBlock","src":"2100:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2109:1:20","nodeType":"YulLiteral","src":"2109:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2112:1:20","nodeType":"YulLiteral","src":"2112:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2102:6:20","nodeType":"YulIdentifier","src":"2102:6:20"},"nativeSrc":"2102:12:20","nodeType":"YulFunctionCall","src":"2102:12:20"},"nativeSrc":"2102:12:20","nodeType":"YulExpressionStatement","src":"2102:12:20"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2088:6:20","nodeType":"YulIdentifier","src":"2088:6:20"},{"name":"_1","nativeSrc":"2096:2:20","nodeType":"YulIdentifier","src":"2096:2:20"}],"functionName":{"name":"gt","nativeSrc":"2085:2:20","nodeType":"YulIdentifier","src":"2085:2:20"},"nativeSrc":"2085:14:20","nodeType":"YulFunctionCall","src":"2085:14:20"},"nativeSrc":"2082:34:20","nodeType":"YulIf","src":"2082:34:20"},{"body":{"nativeSrc":"2174:16:20","nodeType":"YulBlock","src":"2174:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2183:1:20","nodeType":"YulLiteral","src":"2183:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2186:1:20","nodeType":"YulLiteral","src":"2186:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2176:6:20","nodeType":"YulIdentifier","src":"2176:6:20"},"nativeSrc":"2176:12:20","nodeType":"YulFunctionCall","src":"2176:12:20"},"nativeSrc":"2176:12:20","nodeType":"YulExpressionStatement","src":"2176:12:20"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2139:2:20","nodeType":"YulIdentifier","src":"2139:2:20"},{"arguments":[{"kind":"number","nativeSrc":"2147:1:20","nodeType":"YulLiteral","src":"2147:1:20","type":"","value":"5"},{"name":"length","nativeSrc":"2150:6:20","nodeType":"YulIdentifier","src":"2150:6:20"}],"functionName":{"name":"shl","nativeSrc":"2143:3:20","nodeType":"YulIdentifier","src":"2143:3:20"},"nativeSrc":"2143:14:20","nodeType":"YulFunctionCall","src":"2143:14:20"}],"functionName":{"name":"add","nativeSrc":"2135:3:20","nodeType":"YulIdentifier","src":"2135:3:20"},"nativeSrc":"2135:23:20","nodeType":"YulFunctionCall","src":"2135:23:20"},{"kind":"number","nativeSrc":"2160:2:20","nodeType":"YulLiteral","src":"2160:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2131:3:20","nodeType":"YulIdentifier","src":"2131:3:20"},"nativeSrc":"2131:32:20","nodeType":"YulFunctionCall","src":"2131:32:20"},{"name":"dataEnd","nativeSrc":"2165:7:20","nodeType":"YulIdentifier","src":"2165:7:20"}],"functionName":{"name":"gt","nativeSrc":"2128:2:20","nodeType":"YulIdentifier","src":"2128:2:20"},"nativeSrc":"2128:45:20","nodeType":"YulFunctionCall","src":"2128:45:20"},"nativeSrc":"2125:65:20","nodeType":"YulIf","src":"2125:65:20"},{"nativeSrc":"2199:21:20","nodeType":"YulAssignment","src":"2199:21:20","value":{"arguments":[{"name":"_2","nativeSrc":"2213:2:20","nodeType":"YulIdentifier","src":"2213:2:20"},{"kind":"number","nativeSrc":"2217:2:20","nodeType":"YulLiteral","src":"2217:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2209:3:20","nodeType":"YulIdentifier","src":"2209:3:20"},"nativeSrc":"2209:11:20","nodeType":"YulFunctionCall","src":"2209:11:20"},"variableNames":[{"name":"value1","nativeSrc":"2199:6:20","nodeType":"YulIdentifier","src":"2199:6:20"}]},{"nativeSrc":"2229:16:20","nodeType":"YulAssignment","src":"2229:16:20","value":{"name":"length","nativeSrc":"2239:6:20","nodeType":"YulIdentifier","src":"2239:6:20"},"variableNames":[{"name":"value2","nativeSrc":"2229:6:20","nodeType":"YulIdentifier","src":"2229:6:20"}]},{"nativeSrc":"2254:42:20","nodeType":"YulAssignment","src":"2254:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2281:9:20","nodeType":"YulIdentifier","src":"2281:9:20"},{"kind":"number","nativeSrc":"2292:2:20","nodeType":"YulLiteral","src":"2292:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2277:3:20","nodeType":"YulIdentifier","src":"2277:3:20"},"nativeSrc":"2277:18:20","nodeType":"YulFunctionCall","src":"2277:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"2264:12:20","nodeType":"YulIdentifier","src":"2264:12:20"},"nativeSrc":"2264:32:20","nodeType":"YulFunctionCall","src":"2264:32:20"},"variableNames":[{"name":"value3","nativeSrc":"2254:6:20","nodeType":"YulIdentifier","src":"2254:6:20"}]},{"nativeSrc":"2305:48:20","nodeType":"YulVariableDeclaration","src":"2305:48:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2338:9:20","nodeType":"YulIdentifier","src":"2338:9:20"},{"kind":"number","nativeSrc":"2349:2:20","nodeType":"YulLiteral","src":"2349:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2334:3:20","nodeType":"YulIdentifier","src":"2334:3:20"},"nativeSrc":"2334:18:20","nodeType":"YulFunctionCall","src":"2334:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"2321:12:20","nodeType":"YulIdentifier","src":"2321:12:20"},"nativeSrc":"2321:32:20","nodeType":"YulFunctionCall","src":"2321:32:20"},"variables":[{"name":"offset_1","nativeSrc":"2309:8:20","nodeType":"YulTypedName","src":"2309:8:20","type":""}]},{"body":{"nativeSrc":"2382:16:20","nodeType":"YulBlock","src":"2382:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2391:1:20","nodeType":"YulLiteral","src":"2391:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2394:1:20","nodeType":"YulLiteral","src":"2394:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2384:6:20","nodeType":"YulIdentifier","src":"2384:6:20"},"nativeSrc":"2384:12:20","nodeType":"YulFunctionCall","src":"2384:12:20"},"nativeSrc":"2384:12:20","nodeType":"YulExpressionStatement","src":"2384:12:20"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2368:8:20","nodeType":"YulIdentifier","src":"2368:8:20"},{"name":"_1","nativeSrc":"2378:2:20","nodeType":"YulIdentifier","src":"2378:2:20"}],"functionName":{"name":"gt","nativeSrc":"2365:2:20","nodeType":"YulIdentifier","src":"2365:2:20"},"nativeSrc":"2365:16:20","nodeType":"YulFunctionCall","src":"2365:16:20"},"nativeSrc":"2362:36:20","nodeType":"YulIf","src":"2362:36:20"},{"nativeSrc":"2407:86:20","nodeType":"YulVariableDeclaration","src":"2407:86:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2463:9:20","nodeType":"YulIdentifier","src":"2463:9:20"},{"name":"offset_1","nativeSrc":"2474:8:20","nodeType":"YulIdentifier","src":"2474:8:20"}],"functionName":{"name":"add","nativeSrc":"2459:3:20","nodeType":"YulIdentifier","src":"2459:3:20"},"nativeSrc":"2459:24:20","nodeType":"YulFunctionCall","src":"2459:24:20"},{"name":"dataEnd","nativeSrc":"2485:7:20","nodeType":"YulIdentifier","src":"2485:7:20"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2433:25:20","nodeType":"YulIdentifier","src":"2433:25:20"},"nativeSrc":"2433:60:20","nodeType":"YulFunctionCall","src":"2433:60:20"},"variables":[{"name":"value4_1","nativeSrc":"2411:8:20","nodeType":"YulTypedName","src":"2411:8:20","type":""},{"name":"value5_1","nativeSrc":"2421:8:20","nodeType":"YulTypedName","src":"2421:8:20","type":""}]},{"nativeSrc":"2502:18:20","nodeType":"YulAssignment","src":"2502:18:20","value":{"name":"value4_1","nativeSrc":"2512:8:20","nodeType":"YulIdentifier","src":"2512:8:20"},"variableNames":[{"name":"value4","nativeSrc":"2502:6:20","nodeType":"YulIdentifier","src":"2502:6:20"}]},{"nativeSrc":"2529:18:20","nodeType":"YulAssignment","src":"2529:18:20","value":{"name":"value5_1","nativeSrc":"2539:8:20","nodeType":"YulIdentifier","src":"2539:8:20"},"variableNames":[{"name":"value5","nativeSrc":"2529:6:20","nodeType":"YulIdentifier","src":"2529:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_uint256t_bytes_calldata_ptr","nativeSrc":"1514:1039:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1615:9:20","nodeType":"YulTypedName","src":"1615:9:20","type":""},{"name":"dataEnd","nativeSrc":"1626:7:20","nodeType":"YulTypedName","src":"1626:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1638:6:20","nodeType":"YulTypedName","src":"1638:6:20","type":""},{"name":"value1","nativeSrc":"1646:6:20","nodeType":"YulTypedName","src":"1646:6:20","type":""},{"name":"value2","nativeSrc":"1654:6:20","nodeType":"YulTypedName","src":"1654:6:20","type":""},{"name":"value3","nativeSrc":"1662:6:20","nodeType":"YulTypedName","src":"1662:6:20","type":""},{"name":"value4","nativeSrc":"1670:6:20","nodeType":"YulTypedName","src":"1670:6:20","type":""},{"name":"value5","nativeSrc":"1678:6:20","nodeType":"YulTypedName","src":"1678:6:20","type":""}],"src":"1514:1039:20"},{"body":{"nativeSrc":"2659:125:20","nodeType":"YulBlock","src":"2659:125:20","statements":[{"nativeSrc":"2669:26:20","nodeType":"YulAssignment","src":"2669:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2681:9:20","nodeType":"YulIdentifier","src":"2681:9:20"},{"kind":"number","nativeSrc":"2692:2:20","nodeType":"YulLiteral","src":"2692:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2677:3:20","nodeType":"YulIdentifier","src":"2677:3:20"},"nativeSrc":"2677:18:20","nodeType":"YulFunctionCall","src":"2677:18:20"},"variableNames":[{"name":"tail","nativeSrc":"2669:4:20","nodeType":"YulIdentifier","src":"2669:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2711:9:20","nodeType":"YulIdentifier","src":"2711:9:20"},{"arguments":[{"name":"value0","nativeSrc":"2726:6:20","nodeType":"YulIdentifier","src":"2726:6:20"},{"kind":"number","nativeSrc":"2734:42:20","nodeType":"YulLiteral","src":"2734:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"2722:3:20","nodeType":"YulIdentifier","src":"2722:3:20"},"nativeSrc":"2722:55:20","nodeType":"YulFunctionCall","src":"2722:55:20"}],"functionName":{"name":"mstore","nativeSrc":"2704:6:20","nodeType":"YulIdentifier","src":"2704:6:20"},"nativeSrc":"2704:74:20","nodeType":"YulFunctionCall","src":"2704:74:20"},"nativeSrc":"2704:74:20","nodeType":"YulExpressionStatement","src":"2704:74:20"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"2558:226:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2628:9:20","nodeType":"YulTypedName","src":"2628:9:20","type":""},{"name":"value0","nativeSrc":"2639:6:20","nodeType":"YulTypedName","src":"2639:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2650:4:20","nodeType":"YulTypedName","src":"2650:4:20","type":""}],"src":"2558:226:20"},{"body":{"nativeSrc":"2876:161:20","nodeType":"YulBlock","src":"2876:161:20","statements":[{"body":{"nativeSrc":"2922:16:20","nodeType":"YulBlock","src":"2922:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2931:1:20","nodeType":"YulLiteral","src":"2931:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"2934:1:20","nodeType":"YulLiteral","src":"2934:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2924:6:20","nodeType":"YulIdentifier","src":"2924:6:20"},"nativeSrc":"2924:12:20","nodeType":"YulFunctionCall","src":"2924:12:20"},"nativeSrc":"2924:12:20","nodeType":"YulExpressionStatement","src":"2924:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2897:7:20","nodeType":"YulIdentifier","src":"2897:7:20"},{"name":"headStart","nativeSrc":"2906:9:20","nodeType":"YulIdentifier","src":"2906:9:20"}],"functionName":{"name":"sub","nativeSrc":"2893:3:20","nodeType":"YulIdentifier","src":"2893:3:20"},"nativeSrc":"2893:23:20","nodeType":"YulFunctionCall","src":"2893:23:20"},{"kind":"number","nativeSrc":"2918:2:20","nodeType":"YulLiteral","src":"2918:2:20","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2889:3:20","nodeType":"YulIdentifier","src":"2889:3:20"},"nativeSrc":"2889:32:20","nodeType":"YulFunctionCall","src":"2889:32:20"},"nativeSrc":"2886:52:20","nodeType":"YulIf","src":"2886:52:20"},{"nativeSrc":"2947:33:20","nodeType":"YulAssignment","src":"2947:33:20","value":{"arguments":[{"name":"headStart","nativeSrc":"2970:9:20","nodeType":"YulIdentifier","src":"2970:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"2957:12:20","nodeType":"YulIdentifier","src":"2957:12:20"},"nativeSrc":"2957:23:20","nodeType":"YulFunctionCall","src":"2957:23:20"},"variableNames":[{"name":"value0","nativeSrc":"2947:6:20","nodeType":"YulIdentifier","src":"2947:6:20"}]},{"nativeSrc":"2989:42:20","nodeType":"YulAssignment","src":"2989:42:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3016:9:20","nodeType":"YulIdentifier","src":"3016:9:20"},{"kind":"number","nativeSrc":"3027:2:20","nodeType":"YulLiteral","src":"3027:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3012:3:20","nodeType":"YulIdentifier","src":"3012:3:20"},"nativeSrc":"3012:18:20","nodeType":"YulFunctionCall","src":"3012:18:20"}],"functionName":{"name":"calldataload","nativeSrc":"2999:12:20","nodeType":"YulIdentifier","src":"2999:12:20"},"nativeSrc":"2999:32:20","nodeType":"YulFunctionCall","src":"2999:32:20"},"variableNames":[{"name":"value1","nativeSrc":"2989:6:20","nodeType":"YulIdentifier","src":"2989:6:20"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nativeSrc":"2789:248:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2834:9:20","nodeType":"YulTypedName","src":"2834:9:20","type":""},{"name":"dataEnd","nativeSrc":"2845:7:20","nodeType":"YulTypedName","src":"2845:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2857:6:20","nodeType":"YulTypedName","src":"2857:6:20","type":""},{"name":"value1","nativeSrc":"2865:6:20","nodeType":"YulTypedName","src":"2865:6:20","type":""}],"src":"2789:248:20"},{"body":{"nativeSrc":"3143:76:20","nodeType":"YulBlock","src":"3143:76:20","statements":[{"nativeSrc":"3153:26:20","nodeType":"YulAssignment","src":"3153:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"3165:9:20","nodeType":"YulIdentifier","src":"3165:9:20"},{"kind":"number","nativeSrc":"3176:2:20","nodeType":"YulLiteral","src":"3176:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3161:3:20","nodeType":"YulIdentifier","src":"3161:3:20"},"nativeSrc":"3161:18:20","nodeType":"YulFunctionCall","src":"3161:18:20"},"variableNames":[{"name":"tail","nativeSrc":"3153:4:20","nodeType":"YulIdentifier","src":"3153:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3195:9:20","nodeType":"YulIdentifier","src":"3195:9:20"},{"name":"value0","nativeSrc":"3206:6:20","nodeType":"YulIdentifier","src":"3206:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3188:6:20","nodeType":"YulIdentifier","src":"3188:6:20"},"nativeSrc":"3188:25:20","nodeType":"YulFunctionCall","src":"3188:25:20"},"nativeSrc":"3188:25:20","nodeType":"YulExpressionStatement","src":"3188:25:20"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"3042:177:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3112:9:20","nodeType":"YulTypedName","src":"3112:9:20","type":""},{"name":"value0","nativeSrc":"3123:6:20","nodeType":"YulTypedName","src":"3123:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3134:4:20","nodeType":"YulTypedName","src":"3134:4:20","type":""}],"src":"3042:177:20"},{"body":{"nativeSrc":"3294:239:20","nodeType":"YulBlock","src":"3294:239:20","statements":[{"body":{"nativeSrc":"3340:16:20","nodeType":"YulBlock","src":"3340:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3349:1:20","nodeType":"YulLiteral","src":"3349:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3352:1:20","nodeType":"YulLiteral","src":"3352:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3342:6:20","nodeType":"YulIdentifier","src":"3342:6:20"},"nativeSrc":"3342:12:20","nodeType":"YulFunctionCall","src":"3342:12:20"},"nativeSrc":"3342:12:20","nodeType":"YulExpressionStatement","src":"3342:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3315:7:20","nodeType":"YulIdentifier","src":"3315:7:20"},{"name":"headStart","nativeSrc":"3324:9:20","nodeType":"YulIdentifier","src":"3324:9:20"}],"functionName":{"name":"sub","nativeSrc":"3311:3:20","nodeType":"YulIdentifier","src":"3311:3:20"},"nativeSrc":"3311:23:20","nodeType":"YulFunctionCall","src":"3311:23:20"},{"kind":"number","nativeSrc":"3336:2:20","nodeType":"YulLiteral","src":"3336:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3307:3:20","nodeType":"YulIdentifier","src":"3307:3:20"},"nativeSrc":"3307:32:20","nodeType":"YulFunctionCall","src":"3307:32:20"},"nativeSrc":"3304:52:20","nodeType":"YulIf","src":"3304:52:20"},{"nativeSrc":"3365:36:20","nodeType":"YulVariableDeclaration","src":"3365:36:20","value":{"arguments":[{"name":"headStart","nativeSrc":"3391:9:20","nodeType":"YulIdentifier","src":"3391:9:20"}],"functionName":{"name":"calldataload","nativeSrc":"3378:12:20","nodeType":"YulIdentifier","src":"3378:12:20"},"nativeSrc":"3378:23:20","nodeType":"YulFunctionCall","src":"3378:23:20"},"variables":[{"name":"value","nativeSrc":"3369:5:20","nodeType":"YulTypedName","src":"3369:5:20","type":""}]},{"body":{"nativeSrc":"3487:16:20","nodeType":"YulBlock","src":"3487:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3496:1:20","nodeType":"YulLiteral","src":"3496:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"3499:1:20","nodeType":"YulLiteral","src":"3499:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3489:6:20","nodeType":"YulIdentifier","src":"3489:6:20"},"nativeSrc":"3489:12:20","nodeType":"YulFunctionCall","src":"3489:12:20"},"nativeSrc":"3489:12:20","nodeType":"YulExpressionStatement","src":"3489:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3423:5:20","nodeType":"YulIdentifier","src":"3423:5:20"},{"arguments":[{"name":"value","nativeSrc":"3434:5:20","nodeType":"YulIdentifier","src":"3434:5:20"},{"kind":"number","nativeSrc":"3441:42:20","nodeType":"YulLiteral","src":"3441:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3430:3:20","nodeType":"YulIdentifier","src":"3430:3:20"},"nativeSrc":"3430:54:20","nodeType":"YulFunctionCall","src":"3430:54:20"}],"functionName":{"name":"eq","nativeSrc":"3420:2:20","nodeType":"YulIdentifier","src":"3420:2:20"},"nativeSrc":"3420:65:20","nodeType":"YulFunctionCall","src":"3420:65:20"}],"functionName":{"name":"iszero","nativeSrc":"3413:6:20","nodeType":"YulIdentifier","src":"3413:6:20"},"nativeSrc":"3413:73:20","nodeType":"YulFunctionCall","src":"3413:73:20"},"nativeSrc":"3410:93:20","nodeType":"YulIf","src":"3410:93:20"},{"nativeSrc":"3512:15:20","nodeType":"YulAssignment","src":"3512:15:20","value":{"name":"value","nativeSrc":"3522:5:20","nodeType":"YulIdentifier","src":"3522:5:20"},"variableNames":[{"name":"value0","nativeSrc":"3512:6:20","nodeType":"YulIdentifier","src":"3512:6:20"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3224:309:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3260:9:20","nodeType":"YulTypedName","src":"3260:9:20","type":""},{"name":"dataEnd","nativeSrc":"3271:7:20","nodeType":"YulTypedName","src":"3271:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3283:6:20","nodeType":"YulTypedName","src":"3283:6:20","type":""}],"src":"3224:309:20"},{"body":{"nativeSrc":"3695:162:20","nodeType":"YulBlock","src":"3695:162:20","statements":[{"nativeSrc":"3705:26:20","nodeType":"YulAssignment","src":"3705:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"3717:9:20","nodeType":"YulIdentifier","src":"3717:9:20"},{"kind":"number","nativeSrc":"3728:2:20","nodeType":"YulLiteral","src":"3728:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3713:3:20","nodeType":"YulIdentifier","src":"3713:3:20"},"nativeSrc":"3713:18:20","nodeType":"YulFunctionCall","src":"3713:18:20"},"variableNames":[{"name":"tail","nativeSrc":"3705:4:20","nodeType":"YulIdentifier","src":"3705:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3747:9:20","nodeType":"YulIdentifier","src":"3747:9:20"},{"name":"value0","nativeSrc":"3758:6:20","nodeType":"YulIdentifier","src":"3758:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3740:6:20","nodeType":"YulIdentifier","src":"3740:6:20"},"nativeSrc":"3740:25:20","nodeType":"YulFunctionCall","src":"3740:25:20"},"nativeSrc":"3740:25:20","nodeType":"YulExpressionStatement","src":"3740:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3785:9:20","nodeType":"YulIdentifier","src":"3785:9:20"},{"kind":"number","nativeSrc":"3796:2:20","nodeType":"YulLiteral","src":"3796:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3781:3:20","nodeType":"YulIdentifier","src":"3781:3:20"},"nativeSrc":"3781:18:20","nodeType":"YulFunctionCall","src":"3781:18:20"},{"name":"value1","nativeSrc":"3801:6:20","nodeType":"YulIdentifier","src":"3801:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3774:6:20","nodeType":"YulIdentifier","src":"3774:6:20"},"nativeSrc":"3774:34:20","nodeType":"YulFunctionCall","src":"3774:34:20"},"nativeSrc":"3774:34:20","nodeType":"YulExpressionStatement","src":"3774:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3828:9:20","nodeType":"YulIdentifier","src":"3828:9:20"},{"kind":"number","nativeSrc":"3839:2:20","nodeType":"YulLiteral","src":"3839:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3824:3:20","nodeType":"YulIdentifier","src":"3824:3:20"},"nativeSrc":"3824:18:20","nodeType":"YulFunctionCall","src":"3824:18:20"},{"name":"value2","nativeSrc":"3844:6:20","nodeType":"YulIdentifier","src":"3844:6:20"}],"functionName":{"name":"mstore","nativeSrc":"3817:6:20","nodeType":"YulIdentifier","src":"3817:6:20"},"nativeSrc":"3817:34:20","nodeType":"YulFunctionCall","src":"3817:34:20"},"nativeSrc":"3817:34:20","nodeType":"YulExpressionStatement","src":"3817:34:20"}]},"name":"abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"3538:319:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3648:9:20","nodeType":"YulTypedName","src":"3648:9:20","type":""},{"name":"value2","nativeSrc":"3659:6:20","nodeType":"YulTypedName","src":"3659:6:20","type":""},{"name":"value1","nativeSrc":"3667:6:20","nodeType":"YulTypedName","src":"3667:6:20","type":""},{"name":"value0","nativeSrc":"3675:6:20","nodeType":"YulTypedName","src":"3675:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3686:4:20","nodeType":"YulTypedName","src":"3686:4:20","type":""}],"src":"3538:319:20"},{"body":{"nativeSrc":"4043:217:20","nodeType":"YulBlock","src":"4043:217:20","statements":[{"nativeSrc":"4053:27:20","nodeType":"YulAssignment","src":"4053:27:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4065:9:20","nodeType":"YulIdentifier","src":"4065:9:20"},{"kind":"number","nativeSrc":"4076:3:20","nodeType":"YulLiteral","src":"4076:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"4061:3:20","nodeType":"YulIdentifier","src":"4061:3:20"},"nativeSrc":"4061:19:20","nodeType":"YulFunctionCall","src":"4061:19:20"},"variableNames":[{"name":"tail","nativeSrc":"4053:4:20","nodeType":"YulIdentifier","src":"4053:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4096:9:20","nodeType":"YulIdentifier","src":"4096:9:20"},{"name":"value0","nativeSrc":"4107:6:20","nodeType":"YulIdentifier","src":"4107:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4089:6:20","nodeType":"YulIdentifier","src":"4089:6:20"},"nativeSrc":"4089:25:20","nodeType":"YulFunctionCall","src":"4089:25:20"},"nativeSrc":"4089:25:20","nodeType":"YulExpressionStatement","src":"4089:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4134:9:20","nodeType":"YulIdentifier","src":"4134:9:20"},{"kind":"number","nativeSrc":"4145:2:20","nodeType":"YulLiteral","src":"4145:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4130:3:20","nodeType":"YulIdentifier","src":"4130:3:20"},"nativeSrc":"4130:18:20","nodeType":"YulFunctionCall","src":"4130:18:20"},{"arguments":[{"name":"value1","nativeSrc":"4154:6:20","nodeType":"YulIdentifier","src":"4154:6:20"},{"kind":"number","nativeSrc":"4162:4:20","nodeType":"YulLiteral","src":"4162:4:20","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"4150:3:20","nodeType":"YulIdentifier","src":"4150:3:20"},"nativeSrc":"4150:17:20","nodeType":"YulFunctionCall","src":"4150:17:20"}],"functionName":{"name":"mstore","nativeSrc":"4123:6:20","nodeType":"YulIdentifier","src":"4123:6:20"},"nativeSrc":"4123:45:20","nodeType":"YulFunctionCall","src":"4123:45:20"},"nativeSrc":"4123:45:20","nodeType":"YulExpressionStatement","src":"4123:45:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4188:9:20","nodeType":"YulIdentifier","src":"4188:9:20"},{"kind":"number","nativeSrc":"4199:2:20","nodeType":"YulLiteral","src":"4199:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4184:3:20","nodeType":"YulIdentifier","src":"4184:3:20"},"nativeSrc":"4184:18:20","nodeType":"YulFunctionCall","src":"4184:18:20"},{"name":"value2","nativeSrc":"4204:6:20","nodeType":"YulIdentifier","src":"4204:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4177:6:20","nodeType":"YulIdentifier","src":"4177:6:20"},"nativeSrc":"4177:34:20","nodeType":"YulFunctionCall","src":"4177:34:20"},"nativeSrc":"4177:34:20","nodeType":"YulExpressionStatement","src":"4177:34:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4231:9:20","nodeType":"YulIdentifier","src":"4231:9:20"},{"kind":"number","nativeSrc":"4242:2:20","nodeType":"YulLiteral","src":"4242:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"4227:3:20","nodeType":"YulIdentifier","src":"4227:3:20"},"nativeSrc":"4227:18:20","nodeType":"YulFunctionCall","src":"4227:18:20"},{"name":"value3","nativeSrc":"4247:6:20","nodeType":"YulIdentifier","src":"4247:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4220:6:20","nodeType":"YulIdentifier","src":"4220:6:20"},"nativeSrc":"4220:34:20","nodeType":"YulFunctionCall","src":"4220:34:20"},"nativeSrc":"4220:34:20","nodeType":"YulExpressionStatement","src":"4220:34:20"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"3862:398:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3988:9:20","nodeType":"YulTypedName","src":"3988:9:20","type":""},{"name":"value3","nativeSrc":"3999:6:20","nodeType":"YulTypedName","src":"3999:6:20","type":""},{"name":"value2","nativeSrc":"4007:6:20","nodeType":"YulTypedName","src":"4007:6:20","type":""},{"name":"value1","nativeSrc":"4015:6:20","nodeType":"YulTypedName","src":"4015:6:20","type":""},{"name":"value0","nativeSrc":"4023:6:20","nodeType":"YulTypedName","src":"4023:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4034:4:20","nodeType":"YulTypedName","src":"4034:4:20","type":""}],"src":"3862:398:20"},{"body":{"nativeSrc":"4394:168:20","nodeType":"YulBlock","src":"4394:168:20","statements":[{"nativeSrc":"4404:26:20","nodeType":"YulAssignment","src":"4404:26:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4416:9:20","nodeType":"YulIdentifier","src":"4416:9:20"},{"kind":"number","nativeSrc":"4427:2:20","nodeType":"YulLiteral","src":"4427:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4412:3:20","nodeType":"YulIdentifier","src":"4412:3:20"},"nativeSrc":"4412:18:20","nodeType":"YulFunctionCall","src":"4412:18:20"},"variableNames":[{"name":"tail","nativeSrc":"4404:4:20","nodeType":"YulIdentifier","src":"4404:4:20"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4446:9:20","nodeType":"YulIdentifier","src":"4446:9:20"},{"name":"value0","nativeSrc":"4457:6:20","nodeType":"YulIdentifier","src":"4457:6:20"}],"functionName":{"name":"mstore","nativeSrc":"4439:6:20","nodeType":"YulIdentifier","src":"4439:6:20"},"nativeSrc":"4439:25:20","nodeType":"YulFunctionCall","src":"4439:25:20"},"nativeSrc":"4439:25:20","nodeType":"YulExpressionStatement","src":"4439:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4484:9:20","nodeType":"YulIdentifier","src":"4484:9:20"},{"kind":"number","nativeSrc":"4495:2:20","nodeType":"YulLiteral","src":"4495:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4480:3:20","nodeType":"YulIdentifier","src":"4480:3:20"},"nativeSrc":"4480:18:20","nodeType":"YulFunctionCall","src":"4480:18:20"},{"arguments":[{"name":"value1","nativeSrc":"4504:6:20","nodeType":"YulIdentifier","src":"4504:6:20"},{"kind":"number","nativeSrc":"4512:42:20","nodeType":"YulLiteral","src":"4512:42:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4500:3:20","nodeType":"YulIdentifier","src":"4500:3:20"},"nativeSrc":"4500:55:20","nodeType":"YulFunctionCall","src":"4500:55:20"}],"functionName":{"name":"mstore","nativeSrc":"4473:6:20","nodeType":"YulIdentifier","src":"4473:6:20"},"nativeSrc":"4473:83:20","nodeType":"YulFunctionCall","src":"4473:83:20"},"nativeSrc":"4473:83:20","nodeType":"YulExpressionStatement","src":"4473:83:20"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"4265:297:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4355:9:20","nodeType":"YulTypedName","src":"4355:9:20","type":""},{"name":"value1","nativeSrc":"4366:6:20","nodeType":"YulTypedName","src":"4366:6:20","type":""},{"name":"value0","nativeSrc":"4374:6:20","nodeType":"YulTypedName","src":"4374:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4385:4:20","nodeType":"YulTypedName","src":"4385:4:20","type":""}],"src":"4265:297:20"},{"body":{"nativeSrc":"4645:199:20","nodeType":"YulBlock","src":"4645:199:20","statements":[{"body":{"nativeSrc":"4691:16:20","nodeType":"YulBlock","src":"4691:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4700:1:20","nodeType":"YulLiteral","src":"4700:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4703:1:20","nodeType":"YulLiteral","src":"4703:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4693:6:20","nodeType":"YulIdentifier","src":"4693:6:20"},"nativeSrc":"4693:12:20","nodeType":"YulFunctionCall","src":"4693:12:20"},"nativeSrc":"4693:12:20","nodeType":"YulExpressionStatement","src":"4693:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4666:7:20","nodeType":"YulIdentifier","src":"4666:7:20"},{"name":"headStart","nativeSrc":"4675:9:20","nodeType":"YulIdentifier","src":"4675:9:20"}],"functionName":{"name":"sub","nativeSrc":"4662:3:20","nodeType":"YulIdentifier","src":"4662:3:20"},"nativeSrc":"4662:23:20","nodeType":"YulFunctionCall","src":"4662:23:20"},{"kind":"number","nativeSrc":"4687:2:20","nodeType":"YulLiteral","src":"4687:2:20","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4658:3:20","nodeType":"YulIdentifier","src":"4658:3:20"},"nativeSrc":"4658:32:20","nodeType":"YulFunctionCall","src":"4658:32:20"},"nativeSrc":"4655:52:20","nodeType":"YulIf","src":"4655:52:20"},{"nativeSrc":"4716:29:20","nodeType":"YulVariableDeclaration","src":"4716:29:20","value":{"arguments":[{"name":"headStart","nativeSrc":"4735:9:20","nodeType":"YulIdentifier","src":"4735:9:20"}],"functionName":{"name":"mload","nativeSrc":"4729:5:20","nodeType":"YulIdentifier","src":"4729:5:20"},"nativeSrc":"4729:16:20","nodeType":"YulFunctionCall","src":"4729:16:20"},"variables":[{"name":"value","nativeSrc":"4720:5:20","nodeType":"YulTypedName","src":"4720:5:20","type":""}]},{"body":{"nativeSrc":"4798:16:20","nodeType":"YulBlock","src":"4798:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4807:1:20","nodeType":"YulLiteral","src":"4807:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4810:1:20","nodeType":"YulLiteral","src":"4810:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4800:6:20","nodeType":"YulIdentifier","src":"4800:6:20"},"nativeSrc":"4800:12:20","nodeType":"YulFunctionCall","src":"4800:12:20"},"nativeSrc":"4800:12:20","nodeType":"YulExpressionStatement","src":"4800:12:20"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4767:5:20","nodeType":"YulIdentifier","src":"4767:5:20"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4788:5:20","nodeType":"YulIdentifier","src":"4788:5:20"}],"functionName":{"name":"iszero","nativeSrc":"4781:6:20","nodeType":"YulIdentifier","src":"4781:6:20"},"nativeSrc":"4781:13:20","nodeType":"YulFunctionCall","src":"4781:13:20"}],"functionName":{"name":"iszero","nativeSrc":"4774:6:20","nodeType":"YulIdentifier","src":"4774:6:20"},"nativeSrc":"4774:21:20","nodeType":"YulFunctionCall","src":"4774:21:20"}],"functionName":{"name":"eq","nativeSrc":"4764:2:20","nodeType":"YulIdentifier","src":"4764:2:20"},"nativeSrc":"4764:32:20","nodeType":"YulFunctionCall","src":"4764:32:20"}],"functionName":{"name":"iszero","nativeSrc":"4757:6:20","nodeType":"YulIdentifier","src":"4757:6:20"},"nativeSrc":"4757:40:20","nodeType":"YulFunctionCall","src":"4757:40:20"},"nativeSrc":"4754:60:20","nodeType":"YulIf","src":"4754:60:20"},{"nativeSrc":"4823:15:20","nodeType":"YulAssignment","src":"4823:15:20","value":{"name":"value","nativeSrc":"4833:5:20","nodeType":"YulIdentifier","src":"4833:5:20"},"variableNames":[{"name":"value0","nativeSrc":"4823:6:20","nodeType":"YulIdentifier","src":"4823:6:20"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"4567:277:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4611:9:20","nodeType":"YulTypedName","src":"4611:9:20","type":""},{"name":"dataEnd","nativeSrc":"4622:7:20","nodeType":"YulTypedName","src":"4622:7:20","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4634:6:20","nodeType":"YulTypedName","src":"4634:6:20","type":""}],"src":"4567:277:20"},{"body":{"nativeSrc":"4881:152:20","nodeType":"YulBlock","src":"4881:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4898:1:20","nodeType":"YulLiteral","src":"4898:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"4901:77:20","nodeType":"YulLiteral","src":"4901:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"4891:6:20","nodeType":"YulIdentifier","src":"4891:6:20"},"nativeSrc":"4891:88:20","nodeType":"YulFunctionCall","src":"4891:88:20"},"nativeSrc":"4891:88:20","nodeType":"YulExpressionStatement","src":"4891:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"4995:1:20","nodeType":"YulLiteral","src":"4995:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"4998:4:20","nodeType":"YulLiteral","src":"4998:4:20","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"4988:6:20","nodeType":"YulIdentifier","src":"4988:6:20"},"nativeSrc":"4988:15:20","nodeType":"YulFunctionCall","src":"4988:15:20"},"nativeSrc":"4988:15:20","nodeType":"YulExpressionStatement","src":"4988:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5019:1:20","nodeType":"YulLiteral","src":"5019:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5022:4:20","nodeType":"YulLiteral","src":"5022:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5012:6:20","nodeType":"YulIdentifier","src":"5012:6:20"},"nativeSrc":"5012:15:20","nodeType":"YulFunctionCall","src":"5012:15:20"},"nativeSrc":"5012:15:20","nodeType":"YulExpressionStatement","src":"5012:15:20"}]},"name":"panic_error_0x11","nativeSrc":"4849:184:20","nodeType":"YulFunctionDefinition","src":"4849:184:20"},{"body":{"nativeSrc":"5085:148:20","nodeType":"YulBlock","src":"5085:148:20","statements":[{"body":{"nativeSrc":"5176:22:20","nodeType":"YulBlock","src":"5176:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"5178:16:20","nodeType":"YulIdentifier","src":"5178:16:20"},"nativeSrc":"5178:18:20","nodeType":"YulFunctionCall","src":"5178:18:20"},"nativeSrc":"5178:18:20","nodeType":"YulExpressionStatement","src":"5178:18:20"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"5101:5:20","nodeType":"YulIdentifier","src":"5101:5:20"},{"kind":"number","nativeSrc":"5108:66:20","nodeType":"YulLiteral","src":"5108:66:20","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"5098:2:20","nodeType":"YulIdentifier","src":"5098:2:20"},"nativeSrc":"5098:77:20","nodeType":"YulFunctionCall","src":"5098:77:20"},"nativeSrc":"5095:103:20","nodeType":"YulIf","src":"5095:103:20"},{"nativeSrc":"5207:20:20","nodeType":"YulAssignment","src":"5207:20:20","value":{"arguments":[{"name":"value","nativeSrc":"5218:5:20","nodeType":"YulIdentifier","src":"5218:5:20"},{"kind":"number","nativeSrc":"5225:1:20","nodeType":"YulLiteral","src":"5225:1:20","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"5214:3:20","nodeType":"YulIdentifier","src":"5214:3:20"},"nativeSrc":"5214:13:20","nodeType":"YulFunctionCall","src":"5214:13:20"},"variableNames":[{"name":"ret","nativeSrc":"5207:3:20","nodeType":"YulIdentifier","src":"5207:3:20"}]}]},"name":"increment_t_uint256","nativeSrc":"5038:195:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"5067:5:20","nodeType":"YulTypedName","src":"5067:5:20","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"5077:3:20","nodeType":"YulTypedName","src":"5077:3:20","type":""}],"src":"5038:195:20"},{"body":{"nativeSrc":"5455:417:20","nodeType":"YulBlock","src":"5455:417:20","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5472:9:20","nodeType":"YulIdentifier","src":"5472:9:20"},{"name":"value0","nativeSrc":"5483:6:20","nodeType":"YulIdentifier","src":"5483:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5465:6:20","nodeType":"YulIdentifier","src":"5465:6:20"},"nativeSrc":"5465:25:20","nodeType":"YulFunctionCall","src":"5465:25:20"},"nativeSrc":"5465:25:20","nodeType":"YulExpressionStatement","src":"5465:25:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5510:9:20","nodeType":"YulIdentifier","src":"5510:9:20"},{"kind":"number","nativeSrc":"5521:2:20","nodeType":"YulLiteral","src":"5521:2:20","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5506:3:20","nodeType":"YulIdentifier","src":"5506:3:20"},"nativeSrc":"5506:18:20","nodeType":"YulFunctionCall","src":"5506:18:20"},{"kind":"number","nativeSrc":"5526:2:20","nodeType":"YulLiteral","src":"5526:2:20","type":"","value":"96"}],"functionName":{"name":"mstore","nativeSrc":"5499:6:20","nodeType":"YulIdentifier","src":"5499:6:20"},"nativeSrc":"5499:30:20","nodeType":"YulFunctionCall","src":"5499:30:20"},"nativeSrc":"5499:30:20","nodeType":"YulExpressionStatement","src":"5499:30:20"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5549:9:20","nodeType":"YulIdentifier","src":"5549:9:20"},{"kind":"number","nativeSrc":"5560:2:20","nodeType":"YulLiteral","src":"5560:2:20","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5545:3:20","nodeType":"YulIdentifier","src":"5545:3:20"},"nativeSrc":"5545:18:20","nodeType":"YulFunctionCall","src":"5545:18:20"},{"name":"value2","nativeSrc":"5565:6:20","nodeType":"YulIdentifier","src":"5565:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5538:6:20","nodeType":"YulIdentifier","src":"5538:6:20"},"nativeSrc":"5538:34:20","nodeType":"YulFunctionCall","src":"5538:34:20"},"nativeSrc":"5538:34:20","nodeType":"YulExpressionStatement","src":"5538:34:20"},{"body":{"nativeSrc":"5663:16:20","nodeType":"YulBlock","src":"5663:16:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5672:1:20","nodeType":"YulLiteral","src":"5672:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5675:1:20","nodeType":"YulLiteral","src":"5675:1:20","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5665:6:20","nodeType":"YulIdentifier","src":"5665:6:20"},"nativeSrc":"5665:12:20","nodeType":"YulFunctionCall","src":"5665:12:20"},"nativeSrc":"5665:12:20","nodeType":"YulExpressionStatement","src":"5665:12:20"}]},"condition":{"arguments":[{"name":"value2","nativeSrc":"5587:6:20","nodeType":"YulIdentifier","src":"5587:6:20"},{"kind":"number","nativeSrc":"5595:66:20","nodeType":"YulLiteral","src":"5595:66:20","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"5584:2:20","nodeType":"YulIdentifier","src":"5584:2:20"},"nativeSrc":"5584:78:20","nodeType":"YulFunctionCall","src":"5584:78:20"},"nativeSrc":"5581:98:20","nodeType":"YulIf","src":"5581:98:20"},{"nativeSrc":"5688:28:20","nodeType":"YulVariableDeclaration","src":"5688:28:20","value":{"arguments":[{"kind":"number","nativeSrc":"5706:1:20","nodeType":"YulLiteral","src":"5706:1:20","type":"","value":"5"},{"name":"value2","nativeSrc":"5709:6:20","nodeType":"YulIdentifier","src":"5709:6:20"}],"functionName":{"name":"shl","nativeSrc":"5702:3:20","nodeType":"YulIdentifier","src":"5702:3:20"},"nativeSrc":"5702:14:20","nodeType":"YulFunctionCall","src":"5702:14:20"},"variables":[{"name":"length","nativeSrc":"5692:6:20","nodeType":"YulTypedName","src":"5692:6:20","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5742:9:20","nodeType":"YulIdentifier","src":"5742:9:20"},{"kind":"number","nativeSrc":"5753:3:20","nodeType":"YulLiteral","src":"5753:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5738:3:20","nodeType":"YulIdentifier","src":"5738:3:20"},"nativeSrc":"5738:19:20","nodeType":"YulFunctionCall","src":"5738:19:20"},{"name":"value1","nativeSrc":"5759:6:20","nodeType":"YulIdentifier","src":"5759:6:20"},{"name":"length","nativeSrc":"5767:6:20","nodeType":"YulIdentifier","src":"5767:6:20"}],"functionName":{"name":"calldatacopy","nativeSrc":"5725:12:20","nodeType":"YulIdentifier","src":"5725:12:20"},"nativeSrc":"5725:49:20","nodeType":"YulFunctionCall","src":"5725:49:20"},"nativeSrc":"5725:49:20","nodeType":"YulExpressionStatement","src":"5725:49:20"},{"nativeSrc":"5783:40:20","nodeType":"YulAssignment","src":"5783:40:20","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5799:9:20","nodeType":"YulIdentifier","src":"5799:9:20"},{"name":"length","nativeSrc":"5810:6:20","nodeType":"YulIdentifier","src":"5810:6:20"}],"functionName":{"name":"add","nativeSrc":"5795:3:20","nodeType":"YulIdentifier","src":"5795:3:20"},"nativeSrc":"5795:22:20","nodeType":"YulFunctionCall","src":"5795:22:20"},{"kind":"number","nativeSrc":"5819:3:20","nodeType":"YulLiteral","src":"5819:3:20","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"5791:3:20","nodeType":"YulIdentifier","src":"5791:3:20"},"nativeSrc":"5791:32:20","nodeType":"YulFunctionCall","src":"5791:32:20"},"variableNames":[{"name":"tail","nativeSrc":"5783:4:20","nodeType":"YulIdentifier","src":"5783:4:20"}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5843:9:20","nodeType":"YulIdentifier","src":"5843:9:20"},{"kind":"number","nativeSrc":"5854:2:20","nodeType":"YulLiteral","src":"5854:2:20","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5839:3:20","nodeType":"YulIdentifier","src":"5839:3:20"},"nativeSrc":"5839:18:20","nodeType":"YulFunctionCall","src":"5839:18:20"},{"name":"value3","nativeSrc":"5859:6:20","nodeType":"YulIdentifier","src":"5859:6:20"}],"functionName":{"name":"mstore","nativeSrc":"5832:6:20","nodeType":"YulIdentifier","src":"5832:6:20"},"nativeSrc":"5832:34:20","nodeType":"YulFunctionCall","src":"5832:34:20"},"nativeSrc":"5832:34:20","nodeType":"YulExpressionStatement","src":"5832:34:20"}]},"name":"abi_encode_tuple_t_bytes32_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed","nativeSrc":"5238:634:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5400:9:20","nodeType":"YulTypedName","src":"5400:9:20","type":""},{"name":"value3","nativeSrc":"5411:6:20","nodeType":"YulTypedName","src":"5411:6:20","type":""},{"name":"value2","nativeSrc":"5419:6:20","nodeType":"YulTypedName","src":"5419:6:20","type":""},{"name":"value1","nativeSrc":"5427:6:20","nodeType":"YulTypedName","src":"5427:6:20","type":""},{"name":"value0","nativeSrc":"5435:6:20","nodeType":"YulTypedName","src":"5435:6:20","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5446:4:20","nodeType":"YulTypedName","src":"5446:4:20","type":""}],"src":"5238:634:20"},{"body":{"nativeSrc":"5909:152:20","nodeType":"YulBlock","src":"5909:152:20","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5926:1:20","nodeType":"YulLiteral","src":"5926:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"5929:77:20","nodeType":"YulLiteral","src":"5929:77:20","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5919:6:20","nodeType":"YulIdentifier","src":"5919:6:20"},"nativeSrc":"5919:88:20","nodeType":"YulFunctionCall","src":"5919:88:20"},"nativeSrc":"5919:88:20","nodeType":"YulExpressionStatement","src":"5919:88:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6023:1:20","nodeType":"YulLiteral","src":"6023:1:20","type":"","value":"4"},{"kind":"number","nativeSrc":"6026:4:20","nodeType":"YulLiteral","src":"6026:4:20","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"6016:6:20","nodeType":"YulIdentifier","src":"6016:6:20"},"nativeSrc":"6016:15:20","nodeType":"YulFunctionCall","src":"6016:15:20"},"nativeSrc":"6016:15:20","nodeType":"YulExpressionStatement","src":"6016:15:20"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6047:1:20","nodeType":"YulLiteral","src":"6047:1:20","type":"","value":"0"},{"kind":"number","nativeSrc":"6050:4:20","nodeType":"YulLiteral","src":"6050:4:20","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6040:6:20","nodeType":"YulIdentifier","src":"6040:6:20"},"nativeSrc":"6040:15:20","nodeType":"YulFunctionCall","src":"6040:15:20"},"nativeSrc":"6040:15:20","nodeType":"YulExpressionStatement","src":"6040:15:20"}]},"name":"panic_error_0x32","nativeSrc":"5877:184:20","nodeType":"YulFunctionDefinition","src":"5877:184:20"},{"body":{"nativeSrc":"6115:79:20","nodeType":"YulBlock","src":"6115:79:20","statements":[{"nativeSrc":"6125:17:20","nodeType":"YulAssignment","src":"6125:17:20","value":{"arguments":[{"name":"x","nativeSrc":"6137:1:20","nodeType":"YulIdentifier","src":"6137:1:20"},{"name":"y","nativeSrc":"6140:1:20","nodeType":"YulIdentifier","src":"6140:1:20"}],"functionName":{"name":"sub","nativeSrc":"6133:3:20","nodeType":"YulIdentifier","src":"6133:3:20"},"nativeSrc":"6133:9:20","nodeType":"YulFunctionCall","src":"6133:9:20"},"variableNames":[{"name":"diff","nativeSrc":"6125:4:20","nodeType":"YulIdentifier","src":"6125:4:20"}]},{"body":{"nativeSrc":"6166:22:20","nodeType":"YulBlock","src":"6166:22:20","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"6168:16:20","nodeType":"YulIdentifier","src":"6168:16:20"},"nativeSrc":"6168:18:20","nodeType":"YulFunctionCall","src":"6168:18:20"},"nativeSrc":"6168:18:20","nodeType":"YulExpressionStatement","src":"6168:18:20"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"6157:4:20","nodeType":"YulIdentifier","src":"6157:4:20"},{"name":"x","nativeSrc":"6163:1:20","nodeType":"YulIdentifier","src":"6163:1:20"}],"functionName":{"name":"gt","nativeSrc":"6154:2:20","nodeType":"YulIdentifier","src":"6154:2:20"},"nativeSrc":"6154:11:20","nodeType":"YulFunctionCall","src":"6154:11:20"},"nativeSrc":"6151:37:20","nodeType":"YulIf","src":"6151:37:20"}]},"name":"checked_sub_t_uint256","nativeSrc":"6066:128:20","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"6097:1:20","nodeType":"YulTypedName","src":"6097:1:20","type":""},{"name":"y","nativeSrc":"6100:1:20","nodeType":"YulTypedName","src":"6100:1:20","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"6106:4:20","nodeType":"YulTypedName","src":"6106:4:20","type":""}],"src":"6066:128:20"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        value3 := calldataload(add(headStart, 64))\n        let offset_1 := calldataload(add(headStart, 96))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_uint256_t_uint256__to_t_bytes32_t_uint256_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_bytes32_t_array$_t_uint256_$dyn_calldata_ptr_t_uint256__to_t_bytes32_t_array$_t_uint256_$dyn_memory_ptr_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), 96)\n        mstore(add(headStart, 96), value2)\n        if gt(value2, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length := shl(5, value2)\n        calldatacopy(add(headStart, 128), value1, length)\n        tail := add(add(headStart, length), 128)\n        mstore(add(headStart, 64), value3)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n}","id":20,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1068":[{"length":32,"start":821},{"length":32,"start":1561},{"length":32,"start":2098}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3a2656a1161005b578063a3a2656a1461010a578063adb610a31461011d578063d394ab5a14610134578063f2fde38b1461017257600080fd5b806301ffc9a71461008d57806312b7ad29146100b55780634c66f71c146100ca5780638da5cb5b146100dd575b600080fd5b6100a061009b366004610b0b565b610185565b60405190151581526020015b60405180910390f35b6100c86100c3366004610b9d565b61019f565b005b6100c86100d8366004610bfe565b610488565b6100e561079f565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b6100a0610118366004610cb2565b6107cb565b61012660015481565b6040519081526020016100ac565b6100e5610142366004610cb2565b600060208181529281526040808220909352908152205473ffffffffffffffffffffffffffffffffffffffff1681565b6100c8610180366004610cd4565b6108a5565b6000610199826101936108bc565b906108ea565b92915050565b60015483146101da576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60418114610214576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604080516020808201889052918101869052606081018590526021840135918435919085013590600090600190608001604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156102c0573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101517ff9236a39000000000000000000000000000000000000000000000000000000008252600482018c905273ffffffffffffffffffffffffffffffffffffffff80821660248401529093507f000000000000000000000000000000000000000000000000000000000000000016915063f9236a3990604401602060405180830381865afa15801561037d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103a19190610d0a565b1561044b576000898152602081815260408083208b845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155915191825289918b917f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056910160405180910390a360016000815461044290610d5b565b9091555061047d565b6040517fbdbfe21600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050505050565b60015483146104c3576040517f756688fe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b604181146104fd576040517f8baa579f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60405160218301359083359060208086013591600091600191610528918d918d918d918d9101610d93565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120600084529083018083525260ff871690820152606081018590526080810184905260a0016020604051602081039080840390855afa1580156105a4573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08101517ff9236a39000000000000000000000000000000000000000000000000000000008252600482018d905273ffffffffffffffffffffffffffffffffffffffff80821660248401529093507f000000000000000000000000000000000000000000000000000000000000000016915063f9236a3990604401602060405180830381865afa158015610661573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106859190610d0a565b1561044b5760005b8881101561077f5760008b815260208190526040812083918c8c858181106106b7576106b7610df1565b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555089898281811061071c5761071c610df1565b905060200201358b7f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f50568460405161076f919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a360010161068d565b5060016000815461078f90610d5b565b9091555050505050505050505050565b60006107c66107ac6109c4565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b6000828152602081815260408083208484529091528082205490517ff9236a390000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff91821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190610d0a565b949350505050565b6108b933826108b26109c4565b91906109f2565b50565b60008061019960017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e610e20565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161093a57506000610199565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161098b57506001610199565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019960017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd610e20565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610a63576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8416600482015260240160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610b055783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b600060208284031215610b1d57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610b4d57600080fd5b9392505050565b60008083601f840112610b6657600080fd5b50813567ffffffffffffffff811115610b7e57600080fd5b602083019150836020828501011115610b9657600080fd5b9250929050565b600080600080600060808688031215610bb557600080fd5b853594506020860135935060408601359250606086013567ffffffffffffffff811115610be157600080fd5b610bed88828901610b54565b969995985093965092949392505050565b60008060008060008060808789031215610c1757600080fd5b86359550602087013567ffffffffffffffff80821115610c3657600080fd5b818901915089601f830112610c4a57600080fd5b813581811115610c5957600080fd5b8a60208260051b8501011115610c6e57600080fd5b60208301975080965050604089013594506060890135915080821115610c9357600080fd5b50610ca089828a01610b54565b979a9699509497509295939492505050565b60008060408385031215610cc557600080fd5b50508035926020909101359150565b600060208284031215610ce657600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610b4d57600080fd5b600060208284031215610d1c57600080fd5b81518015158114610b4d57600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610d8c57610d8c610d2c565b5060010190565b8481526060602082015282606082015260007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115610dd257600080fd5b8360051b80866080850137604083019390935250016080019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b8181038181111561019957610199610d2c56fea26469706673582212209e28d931a67c51a7b9bdb87ba9d987e1c8b6242669600cd8bb79a2f562cbb08d64736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A2656A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA3A2656A EQ PUSH2 0x10A JUMPI DUP1 PUSH4 0xADB610A3 EQ PUSH2 0x11D JUMPI DUP1 PUSH4 0xD394AB5A EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x172 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x12B7AD29 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x4C66F71C EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xDD JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xB0B JUMP JUMPDEST PUSH2 0x185 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xC8 PUSH2 0xC3 CALLDATASIZE PUSH1 0x4 PUSH2 0xB9D JUMP JUMPDEST PUSH2 0x19F JUMP JUMPDEST STOP JUMPDEST PUSH2 0xC8 PUSH2 0xD8 CALLDATASIZE PUSH1 0x4 PUSH2 0xBFE JUMP JUMPDEST PUSH2 0x488 JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x79F JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xA0 PUSH2 0x118 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH2 0x7CB JUMP JUMPDEST PUSH2 0x126 PUSH1 0x1 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xE5 PUSH2 0x142 CALLDATASIZE PUSH1 0x4 PUSH2 0xCB2 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0xC8 PUSH2 0x180 CALLDATASIZE PUSH1 0x4 PUSH2 0xCD4 JUMP JUMPDEST PUSH2 0x8A5 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x199 DUP3 PUSH2 0x193 PUSH2 0x8BC JUMP JUMPDEST SWAP1 PUSH2 0x8EA JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x1DA JUMPI PUSH1 0x40 MLOAD PUSH32 0x756688FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x214 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 ADD DUP9 SWAP1 MSTORE SWAP2 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x21 DUP5 ADD CALLDATALOAD SWAP2 DUP5 CALLDATALOAD SWAP2 SWAP1 DUP6 ADD CALLDATALOAD SWAP1 PUSH1 0x0 SWAP1 PUSH1 0x1 SWAP1 PUSH1 0x80 ADD PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x2C0 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP13 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP4 POP PUSH32 0x0 AND SWAP2 POP PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x37D JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x3A1 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 DUP10 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP12 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE DUP10 SWAP2 DUP12 SWAP2 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x442 SWAP1 PUSH2 0xD5B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0x47D JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBDBFE21600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD DUP4 EQ PUSH2 0x4C3 JUMPI PUSH1 0x40 MLOAD PUSH32 0x756688FE00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x41 DUP2 EQ PUSH2 0x4FD JUMPI PUSH1 0x40 MLOAD PUSH32 0x8BAA579F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x21 DUP4 ADD CALLDATALOAD SWAP1 DUP4 CALLDATALOAD SWAP1 PUSH1 0x20 DUP1 DUP7 ADD CALLDATALOAD SWAP2 PUSH1 0x0 SWAP2 PUSH1 0x1 SWAP2 PUSH2 0x528 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 DUP14 SWAP2 ADD PUSH2 0xD93 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 PUSH1 0x0 DUP5 MSTORE SWAP1 DUP4 ADD DUP1 DUP4 MSTORE MSTORE PUSH1 0xFF DUP8 AND SWAP1 DUP3 ADD MSTORE PUSH1 0x60 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5A4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 ADD MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP3 MSTORE PUSH1 0x4 DUP3 ADD DUP14 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP3 AND PUSH1 0x24 DUP5 ADD MSTORE SWAP1 SWAP4 POP PUSH32 0x0 AND SWAP2 POP PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x661 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x685 SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST ISZERO PUSH2 0x44B JUMPI PUSH1 0x0 JUMPDEST DUP9 DUP2 LT ISZERO PUSH2 0x77F JUMPI PUSH1 0x0 DUP12 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 SWAP2 DUP13 DUP13 DUP6 DUP2 DUP2 LT PUSH2 0x6B7 JUMPI PUSH2 0x6B7 PUSH2 0xDF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP10 DUP10 DUP3 DUP2 DUP2 LT PUSH2 0x71C JUMPI PUSH2 0x71C PUSH2 0xDF1 JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP12 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 DUP5 PUSH1 0x40 MLOAD PUSH2 0x76F SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 ADD PUSH2 0x68D JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x0 DUP2 SLOAD PUSH2 0x78F SWAP1 PUSH2 0xD5B JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x7C6 PUSH2 0x7AC PUSH2 0x9C4 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x879 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x89D SWAP2 SWAP1 PUSH2 0xD0A JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH2 0x8B9 CALLER DUP3 PUSH2 0x8B2 PUSH2 0x9C4 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x9F2 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x199 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0xE20 JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x93A JUMPI POP PUSH1 0x0 PUSH2 0x199 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x98B JUMPI POP PUSH1 0x1 PUSH2 0x199 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x199 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0xE20 JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xA63 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xB05 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xB1D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xB66 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xB7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xB96 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xBB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xBE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xBED DUP9 DUP3 DUP10 ADD PUSH2 0xB54 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP8 DUP10 SUB SLT ISZERO PUSH2 0xC17 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD SWAP6 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xC36 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP10 ADD SWAP2 POP DUP10 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xC4A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xC59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP11 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0xC6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP8 POP DUP1 SWAP7 POP POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP5 POP PUSH1 0x60 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0xC93 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xCA0 DUP10 DUP3 DUP11 ADD PUSH2 0xB54 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xCC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xCE6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xD1C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0xD8C JUMPI PUSH2 0xD8C PUSH2 0xD2C JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP5 DUP2 MSTORE PUSH1 0x60 PUSH1 0x20 DUP3 ADD MSTORE DUP3 PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 GT ISZERO PUSH2 0xDD2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP4 PUSH1 0x5 SHL DUP1 DUP7 PUSH1 0x80 DUP6 ADD CALLDATACOPY PUSH1 0x40 DUP4 ADD SWAP4 SWAP1 SWAP4 MSTORE POP ADD PUSH1 0x80 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x199 JUMPI PUSH2 0x199 PUSH2 0xD2C JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SWAP15 0x28 0xD9 BALANCE 0xA6 PUSH29 0x51A7B9BDB87BA9D987E1C8B6242669600CD8BB79A2F562CBB08D64736F PUSH13 0x63430008160033000000000000 ","sourceMap":"480:3133:16:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:20;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1635:934:16;;;;;;:::i;:::-;;:::i;:::-;;2575:1036;;;;;;:::i;:::-;;:::i;710:120:1:-;;;:::i;:::-;;;2734:42:20;2722:55;;;2704:74;;2692:2;2677:18;710:120:1;2558:226:20;1025:604:16;;;;;;:::i;:::-;;:::i;707:27::-;;;;;;;;;3188:25:20;;;3176:2;3161:18;707:27:16;3042:177:20;635:66:16;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;864:152:1;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;1635:934:16:-;1765:12;;1756:5;:21;1752:73;;1800:14;;;;;;;;;;;;;;1752:73;1859:2;1839:22;;1835:53;;1870:18;;;;;;;;;;;;;;1835:53;2243:40;;;2065:4;2243:40;;;3740:25:20;;;3781:18;;;3774:34;;;3824:18;;;3817:34;;;2124:4:16;2102:27;;2089:41;;1982:30;;;2043:27;;;2030:41;;1899:7;;2223:71;;3713:18:20;;2243:40:16;;;;;;;;;;;;;2233:51;;2243:40;2233:51;;;;2223:71;;;;;;;;;4089:25:20;4162:4;4150:17;;4130:18;;;4123:45;4184:18;;;4177:34;;;4227:18;;;4220:34;;;4061:19;;2223:71:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;2223:71:16;;;;;;2308:45;;;;;;4439:25:20;;;2308:20:16;4500:55:20;;;4480:18;;;4473:83;2223:71:16;;-1:-1:-1;2308:12:16;:20;;-1:-1:-1;2308:20:16;;4412:18:20;;2308:45:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2304:259;;;2369:11;:28;;;;;;;;;;;:34;;;;;;;;;:43;;;;;;;;;;;;;2431:40;;2704:74:20;;;2369:34:16;;:28;;2431:40;;2677:18:20;2431:40:16;;;;;;;2487:12;;2485:14;;;;;:::i;:::-;;;;-1:-1:-1;2304:259:16;;;2537:15;;;;;;;;;;;;;;2304:259;1742:827;;;;1635:934;;;;;:::o;2575:1036::-;2723:12;;2714:5;:21;2710:73;;2758:14;;;;;;;;;;;;;;2710:73;2817:2;2797:22;;2793:53;;2828:18;;;;;;;;;;;;;;2793:53;3201:41;;3082:4;3060:27;;3047:41;;2940:30;;;3023:4;3001:27;;;2988:41;;2857:7;;3181:72;;3201:41;;3212:15;;3229:5;;;;3236;;3201:41;;:::i;:::-;;;;;;;;;;;;;;3191:52;;3201:41;3191:52;;;;3181:72;;;;;;;;;4089:25:20;4162:4;4150:17;;4130:18;;;4123:45;4184:18;;;4177:34;;;4227:18;;;4220:34;;;4061:19;;3181:72:16;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;3181:72:16;;;;;;3267:45;;;;;;4439:25:20;;;3267:20:16;4500:55:20;;;4480:18;;;4473:83;3181:72:16;;-1:-1:-1;3267:12:16;:20;;-1:-1:-1;3267:20:16;;4412:18:20;;3267:45:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3263:342;;;3333:9;3328:186;3344:16;;;3328:186;;;3385:11;:28;;;;;;;;;;3426:6;;3414:5;;3420:1;3414:8;;;;;;;:::i;:::-;;;;;;;3385:38;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;3490:5;;3496:1;3490:8;;;;;;;:::i;:::-;;;;;;;3465:15;3455:44;3482:6;3455:44;;;;;2734:42:20;2722:55;;;;2704:74;;2692:2;2677:18;;2558:226;3455:44:16;;;;;;;;3362:3;;3328:186;;;;3529:12;;3527:14;;;;;:::i;:::-;;;;-1:-1:-1;2700:911:16;;;;2575:1036;;;;;;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;1025:604:16:-;1106:12;1525:28;;;;;;;;;;;:34;;;;;;;;;;1576:46;;;;;;;;4439:25:20;;;1525:34:16;;;;4480:18:20;;;4473:83;;;1525:34:16;1576:12;:20;;;;4412:18:20;;1576:46:16;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1569:53;1025:604;-1:-1:-1;;;;1025:604:16:o;864:152:1:-;934:75;719:10:14;1000:8:1;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;3060:369::-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;2734:42:20;2722:55;;3243:24:6;;;2704:74:20;2677:18;;3243:24:6;;;;;;;3207:60;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;14:332:20:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:20:o;543:347::-;594:8;604:6;658:3;651:4;643:6;639:17;635:27;625:55;;676:1;673;666:12;625:55;-1:-1:-1;699:20:20;;742:18;731:30;;728:50;;;774:1;771;764:12;728:50;811:4;803:6;799:17;787:29;;863:3;856:4;847:6;839;835:19;831:30;828:39;825:59;;;880:1;877;870:12;825:59;543:347;;;;;:::o;895:614::-;992:6;1000;1008;1016;1024;1077:3;1065:9;1056:7;1052:23;1048:33;1045:53;;;1094:1;1091;1084:12;1045:53;1130:9;1117:23;1107:33;;1187:2;1176:9;1172:18;1159:32;1149:42;;1238:2;1227:9;1223:18;1210:32;1200:42;;1293:2;1282:9;1278:18;1265:32;1320:18;1312:6;1309:30;1306:50;;;1352:1;1349;1342:12;1306:50;1391:58;1441:7;1432:6;1421:9;1417:22;1391:58;:::i;:::-;895:614;;;;-1:-1:-1;895:614:20;;-1:-1:-1;1468:8:20;;1365:84;895:614;-1:-1:-1;;;895:614:20:o;1514:1039::-;1638:6;1646;1654;1662;1670;1678;1731:3;1719:9;1710:7;1706:23;1702:33;1699:53;;;1748:1;1745;1738:12;1699:53;1784:9;1771:23;1761:33;;1845:2;1834:9;1830:18;1817:32;1868:18;1909:2;1901:6;1898:14;1895:34;;;1925:1;1922;1915:12;1895:34;1963:6;1952:9;1948:22;1938:32;;2008:7;2001:4;1997:2;1993:13;1989:27;1979:55;;2030:1;2027;2020:12;1979:55;2070:2;2057:16;2096:2;2088:6;2085:14;2082:34;;;2112:1;2109;2102:12;2082:34;2165:7;2160:2;2150:6;2147:1;2143:14;2139:2;2135:23;2131:32;2128:45;2125:65;;;2186:1;2183;2176:12;2125:65;2217:2;2213;2209:11;2199:21;;2239:6;2229:16;;;2292:2;2281:9;2277:18;2264:32;2254:42;;2349:2;2338:9;2334:18;2321:32;2305:48;;2378:2;2368:8;2365:16;2362:36;;;2394:1;2391;2384:12;2362:36;;2433:60;2485:7;2474:8;2463:9;2459:24;2433:60;:::i;:::-;1514:1039;;;;-1:-1:-1;1514:1039:20;;-1:-1:-1;1514:1039:20;;2512:8;;1514:1039;-1:-1:-1;;;1514:1039:20:o;2789:248::-;2857:6;2865;2918:2;2906:9;2897:7;2893:23;2889:32;2886:52;;;2934:1;2931;2924:12;2886:52;-1:-1:-1;;2957:23:20;;;3027:2;3012:18;;;2999:32;;-1:-1:-1;2789:248:20:o;3224:309::-;3283:6;3336:2;3324:9;3315:7;3311:23;3307:32;3304:52;;;3352:1;3349;3342:12;3304:52;3391:9;3378:23;3441:42;3434:5;3430:54;3423:5;3420:65;3410:93;;3499:1;3496;3489:12;4567:277;4634:6;4687:2;4675:9;4666:7;4662:23;4658:32;4655:52;;;4703:1;4700;4693:12;4655:52;4735:9;4729:16;4788:5;4781:13;4774:21;4767:5;4764:32;4754:60;;4810:1;4807;4800:12;4849:184;4901:77;4898:1;4891:88;4998:4;4995:1;4988:15;5022:4;5019:1;5012:15;5038:195;5077:3;5108:66;5101:5;5098:77;5095:103;;5178:18;;:::i;:::-;-1:-1:-1;5225:1:20;5214:13;;5038:195::o;5238:634::-;5483:6;5472:9;5465:25;5526:2;5521;5510:9;5506:18;5499:30;5565:6;5560:2;5549:9;5545:18;5538:34;5446:4;5595:66;5587:6;5584:78;5581:98;;;5675:1;5672;5665:12;5581:98;5709:6;5706:1;5702:14;5767:6;5759;5753:3;5742:9;5738:19;5725:49;5854:2;5839:18;;5832:34;;;;-1:-1:-1;5795:22:20;5819:3;5791:32;;5238:634;-1:-1:-1;;;5238:634:20:o;5877:184::-;5929:77;5926:1;5919:88;6026:4;6023:1;6016:15;6050:4;6047:1;6040:15;6066:128;6133:9;;;6154:11;;;6151:37;;;6168:18;;:::i"},"gasEstimates":{"creation":{"codeDepositCost":"737800","executionCost":"infinite","totalCost":"infinite"},"external":{"batchRevokeVCs(bytes32,uint256[],uint256,bytes)":"infinite","currentNonce()":"2317","isRevoked(bytes32,uint256)":"infinite","owner()":"infinite","revocations(bytes32,uint256)":"2586","revokeVC(bytes32,uint256,uint256,bytes)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"}},"methodIdentifiers":{"batchRevokeVCs(bytes32,uint256[],uint256,bytes)":"4c66f71c","currentNonce()":"adb610a3","isRevoked(bytes32,uint256)":"a3a2656a","owner()":"8da5cb5b","revocations(bytes32,uint256)":"d394ab5a","revokeVC(bytes32,uint256,uint256,bytes)":"12b7ad29","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIssuer\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"VcRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revocations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"VcRevoked(bytes32,address,uint256)\":{\"params\":{\"caller\":\"address of caller that invoked the revocation.\",\"hashedIssuerDid\":\"the hashed Did for the issuer\",\"vcId\":\"The Id for the VC revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"OpenCampusCertificateRevocationRegistry.\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidSignature()\":[{\"notice\":\"Thrown when the signature is invalid for the NFT payload.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"VcRevoked(bytes32,address,uint256)\":{\"notice\":\"Emitted when `caller` attempts to revoke `vcId`.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"notice\":\"A registry storing the revocation of VCs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateRevocationRegistry.sol\":\"OpenCampusCertificateRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {VcRevoked} from \\\"./events/RevocationRegistryEvents.sol\\\";\\n\\n/// @title OpenCampusCertificateRevocationRegistry.\\n/// @notice A registry storing the revocation of VCs.\\ncontract OpenCampusCertificateRevocationRegistry is IRevocationRegistry, ContractOwnership {\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n\\n    mapping(bytes32 => mapping(uint256 => address)) public revocations;\\n    uint256 public currentNonce;\\n\\n    /// @notice Thrown when the signature is invalid for the NFT payload.\\n    error InvalidSignature();\\n\\n    error InvalidNonce();\\n\\n    error InvalidIssuer();\\n\\n    constructor(IIssuersDIDRegistry didRegistry) ContractOwnership(msg.sender) {\\n        DID_REGISTRY = didRegistry;\\n    }\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked) {\\n        // Use-Cases\\n        // 1. issuer addr/did valid & revoked => revoker valid address, DIDRegistry allowed => returns true\\n        // 2. issuer addr/did valid when revoked, invalidated later in DIDRegistry => revoker valid address, DIDRegistry disallowed => returns false\\n        // 3. vcId never revoked => revoker address zero => DIDRegistry disallowed => return false\\n        address revoker = revocations[hashedIssuerDid][vcId];\\n        return DID_REGISTRY.issuers(hashedIssuerDid, revoker);\\n    }\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external {\\n        if (nonce != currentNonce) {\\n            revert InvalidNonce();\\n        }\\n\\n        if (signature.length != 65) revert InvalidSignature();\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        assembly {\\n            r := calldataload(signature.offset)\\n            s := calldataload(add(signature.offset, 0x20))\\n            v := calldataload(add(signature.offset, 0x21))\\n        }\\n\\n        // Use the native ecrecover provided by the EVM\\n        address signer = ecrecover(keccak256(abi.encode(hashedIssuerDid, vcId, nonce)), v, r, s);\\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\\n            revocations[hashedIssuerDid][vcId] = signer;\\n            emit VcRevoked(hashedIssuerDid, signer, vcId);\\n            ++currentNonce;\\n        } else {\\n            revert InvalidIssuer();\\n        }\\n    }\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external {\\n        if (nonce != currentNonce) {\\n            revert InvalidNonce();\\n        }\\n\\n        if (signature.length != 65) revert InvalidSignature();\\n\\n        uint8 v;\\n        bytes32 r;\\n        bytes32 s;\\n        assembly {\\n            r := calldataload(signature.offset)\\n            s := calldataload(add(signature.offset, 0x20))\\n            v := calldataload(add(signature.offset, 0x21))\\n        }\\n\\n        // Use the native ecrecover provided by the EVM\\n        address signer = ecrecover(keccak256(abi.encode(hashedIssuerDid, vcIds, nonce)), v, r, s);\\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\\n            for (uint256 i; i < vcIds.length; i++) {\\n                revocations[hashedIssuerDid][vcIds[i]] = signer;\\n                emit VcRevoked(hashedIssuerDid, signer, vcIds[i]);\\n            }\\n            ++currentNonce;\\n        } else {\\n            revert InvalidIssuer();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7a77068361117007ea0b6b55b3dbdf979ca792d244814522e0c0ad1f4d32e368\",\"license\":\"MIT\"},\"contracts/vc/events/RevocationRegistryEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `caller` attempts to revoke `vcId`.\\n/// @param hashedIssuerDid the hashed Did for the issuer\\n/// @param caller address of caller that invoked the revocation.\\n/// @param vcId The Id for the VC revoked.\\nevent VcRevoked(bytes32 indexed hashedIssuerDid, address caller, uint256 indexed vcId);\\n\\n\",\"keccak256\":\"0x9d35bd3094db7c9671a0726e6f4f489952b400616c2eefdac24f8e4397543a8d\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function currentNonce() external view returns (uint256 nonce);\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0xc8d0c75f88a0cc7324a0155ca47eddf4de4f093195df083f55382679098d2585\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":1074,"contract":"contracts/vc/OpenCampusCertificateRevocationRegistry.sol:OpenCampusCertificateRevocationRegistry","label":"revocations","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_mapping(t_uint256,t_address))"},{"astId":1076,"contract":"contracts/vc/OpenCampusCertificateRevocationRegistry.sol:OpenCampusCertificateRevocationRegistry","label":"currentNonce","offset":0,"slot":"1","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_address))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => address))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_address)"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidSignature()":[{"notice":"Thrown when the signature is invalid for the NFT payload."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"VcRevoked(bytes32,address,uint256)":{"notice":"Emitted when `caller` attempts to revoke `vcId`."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"notice":"A registry storing the revocation of VCs.","version":1}}},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"IIssuersDIDRegistry":{"abi":[{"inputs":[{"internalType":"string","name":"did","type":"string"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"isIssuerAllowed","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedDid","type":"bytes32"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"issuers","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"IAllowedIssuersRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isIssuerAllowed(string,address)":"6f176f7e","issuers(bytes32,address)":"f9236a39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"isIssuerAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedDid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"issuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"IAllowedIssuersRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for registry to store allowed issuers for VCs to mint NFT VCs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":\"IIssuersDIDRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for registry to store allowed issuers for VCs to mint NFT VCs","version":1}}},"contracts/vc/interfaces/IRevocationRegistry.sol":{"IRevocationRegistry":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"currentNonce","outputs":[{"internalType":"uint256","name":"nonce","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"uint256","name":"nonce","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchRevokeVCs(bytes32,uint256[],uint256,bytes)":"4c66f71c","currentNonce()":"adb610a3","isRevoked(bytes32,uint256)":"a3a2656a","revokeVC(bytes32,uint256,uint256,bytes)":"12b7ad29"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentNonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":\"IRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function currentNonce() external view returns (uint256 nonce);\\n\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, uint256 nonce, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, uint256 nonce, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0xc8d0c75f88a0cc7324a0155ca47eddf4de4f093195df083f55382679098d2585\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}
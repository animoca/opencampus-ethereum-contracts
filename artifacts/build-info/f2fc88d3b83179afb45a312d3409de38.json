{"id":"f2fc88d3b83179afb45a312d3409de38","_format":"hh-sol-build-info-1","solcVersion":"0.8.21","solcLongVersion":"0.8.21+commit.d9974bed","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {AccessControlBase} from \"./base/AccessControlBase.sol\";\nimport {ContractOwnership} from \"./ContractOwnership.sol\";\n\n/// @title Access control via roles management (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IAccessControl} from \"./../../access/interfaces/IAccessControl.sol\";\nimport {AccessControlStorage} from \"./../libraries/AccessControlStorage.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Access control via roles management (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract AccessControlBase is IAccessControl, Context {\n    using AccessControlStorage for AccessControlStorage.Layout;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Grants a role to an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    function grantRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().grantRole(role, account, operator);\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    function revokeRole(bytes32 role, address account) external {\n        address operator = _msgSender();\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\n        AccessControlStorage.layout().revokeRole(role, account, operator);\n    }\n\n    /// @inheritdoc IAccessControl\n    function renounceRole(bytes32 role) external {\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\n    }\n\n    /// @inheritdoc IAccessControl\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\n        return AccessControlStorage.layout().hasRole(role, account);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account does not have the required role.\n/// @param role The role the caller is missing.\n/// @param account The account that was checked.\nerror NotRoleHolder(bytes32 role, address account);\n\n/// @notice Thrown when an account does not have the required role on a target contract.\n/// @param targetContract The contract that was checked.\n/// @param role The role that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Access control via roles management (events)\ninterface IAccessControlEvents {\n    /// @notice Emitted when `role` is granted to `account`.\n    /// @param role The role that has been granted.\n    /// @param account The account that has been granted the role.\n    /// @param operator The account that granted the role.\n    event RoleGranted(bytes32 role, address account, address operator);\n\n    /// @notice Emitted when `role` is revoked from `account`.\n    /// @param role The role that has been revoked.\n    /// @param account The account that has been revoked the role.\n    /// @param operator The account that revoked the role.\n    event RoleRevoked(bytes32 role, address account, address operator);\n}\n"},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC-173 Contract Ownership Standard (events)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173Events {\n    /// @notice Emitted when the contract ownership changes.\n    /// @param previousOwner the previous contract owner.\n    /// @param newOwner the new contract owner.\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IAccessControlEvents} from \"./../events/IAccessControlEvents.sol\";\n\n/// @title Access control via roles management (functions)\ninterface IAccessControl is IAccessControlEvents {\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param role The role to renounce.\n    function renounceRole(bytes32 role) external;\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\n}\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 is IERC173Events {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \"./../errors/AccessControlErrors.sol\";\nimport {IAccessControlEvents} from \"./../events/IAccessControlEvents.sol\";\nimport {IAccessControl} from \"./../interfaces/IAccessControl.sol\";\n\nlibrary AccessControlStorage {\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct Layout {\n        mapping(bytes32 => mapping(address => bool)) roles;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.AccessControl.storage\")) - 1);\n\n    /// @notice Grants a role to an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\n    /// @param role The role to grant.\n    /// @param account The account to grant the role to.\n    /// @param operator The account requesting the role change.\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (!s.hasRole(role, account)) {\n            s.roles[role][account] = true;\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\n        }\n    }\n\n    /// @notice Revokes a role from an account.\n    /// @dev Note: Call to this function should be properly access controlled.\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\n    /// @param role The role to revoke.\n    /// @param account The account to revoke the role from.\n    /// @param operator The account requesting the role change.\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\n        if (s.hasRole(role, account)) {\n            s.roles[role][account] = false;\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\n        }\n    }\n\n    /// @notice Renounces a role by the sender.\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n    /// @dev Emits a {RoleRevoked} event.\n    /// @param sender The message sender.\n    /// @param role The role to renounce.\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\n        s.enforceHasRole(role, sender);\n        s.roles[role][sender] = false;\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\n    }\n\n    /// @notice Retrieves whether an account has a role.\n    /// @param role The role.\n    /// @param account The account.\n    /// @return hasRole_ Whether `account` has `role`.\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\n        return s.roles[role][account];\n    }\n\n    /// @notice Checks whether an account has a role in a target contract.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\n        return IAccessControl(targetContract).hasRole(role, account);\n    }\n\n    /// @notice Ensures that an account has a role.\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n    /// @param role The role.\n    /// @param account The account.\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\n    }\n\n    /// @notice Enforces that an account has a role in a target contract.\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n    /// @param targetContract The contract to check.\n    /// @param role The role to check.\n    /// @param account The account to check.\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\n        if (!hasTargetContractRole(targetContract, role, account)) {\n            revert NotTargetContractRoleHolder(targetContract, role, account);\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {IERC173Events} from \"./../events/IERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) {\n            revert NotTargetContractOwner(targetContract, account);\n        }\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\nerror EtherReceptionDisabled();\n\n/// @notice Thrown when the multiple related arrays have different lengths.\nerror InconsistentArrayLengths();\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IForwarderRegistry} from \"./../interfaces/IForwarderRegistry.sol\";\nimport {ERC2771Calldata} from \"./../libraries/ERC2771Calldata.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContextBase {\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\n\n    constructor(IForwarderRegistry forwarderRegistry) {\n        _FORWARDER_REGISTRY = forwarderRegistry;\n    }\n\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgSender() internal view virtual returns (address) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.sender;\n        }\n\n        address sender = ERC2771Calldata.msgSender();\n\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\n            return sender;\n        }\n\n        return msg.sender;\n    }\n\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\n    function _msgData() internal view virtual returns (bytes calldata) {\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\n        // solhint-disable-next-line avoid-tx-origin\n        if (msg.sender == tx.origin || msg.data.length < 24) {\n            return msg.data;\n        }\n\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\n            return ERC2771Calldata.msgData();\n        }\n\n        return msg.data;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IForwarderRegistry} from \"./interfaces/IForwarderRegistry.sol\";\nimport {IERC2771} from \"./interfaces/IERC2771.sol\";\nimport {ForwarderRegistryContextBase} from \"./base/ForwarderRegistryContextBase.sol\";\n\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\n\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\n        return _FORWARDER_REGISTRY;\n    }\n\n    /// @inheritdoc IERC2771\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\n        return forwarder == address(_FORWARDER_REGISTRY);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Secure Protocol for Native Meta Transactions.\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\ninterface IERC2771 {\n    /// @notice Checks whether a forwarder is trusted.\n    /// @param forwarder The forwarder to check.\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Universal Meta-Transactions Forwarder Registry.\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\ninterface IForwarderRegistry {\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n    /// @param sender The sender account.\n    /// @param forwarder The forwarder account.\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\n}\n"},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\nlibrary ERC2771Calldata {\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\n    function msgSender() internal pure returns (address sender) {\n        assembly {\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\n        }\n    }\n\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\n    function msgData() internal pure returns (bytes calldata data) {\n        unchecked {\n            return msg.data[:msg.data.length - 20];\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IPayoutWallet} from \"./../interfaces/IPayoutWallet.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {PayoutWalletStorage} from \"./../libraries/PayoutWalletStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title Payout wallet (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(address payable newPayoutWallet) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet() external view returns (address payable wallet) {\n        return PayoutWalletStorage.layout().payoutWallet();\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting the zero address as the payout wallet.\nerror ZeroAddressPayoutWallet();\n"},"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title Payout wallet (events)\ninterface IPayoutWalletEvents {\n    /// @notice Emitted when the payout wallet address changes.\n    /// @param payoutWallet the new payout wallet address.\n    event PayoutWalletSet(address payoutWallet);\n}\n"},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IPayoutWalletEvents} from \"./../events/IPayoutWalletEvents.sol\";\n\n/// @title Payout wallet (functions)\ninterface IPayoutWallet is IPayoutWalletEvents {\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet() external view returns (address payable wallet);\n}\n"},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {ZeroAddressPayoutWallet} from \"./../errors/PayoutWalletErrors.sol\";\nimport {IPayoutWalletEvents} from \"./../events/IPayoutWalletEvents.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\n\nlibrary PayoutWalletStorage {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    struct Layout {\n        address payable wallet;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.payment.PayoutWallet.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.setPayoutWallet(initialPayoutWallet);\n    }\n\n    /// @notice Sets the payout wallet.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param newPayoutWallet The payout wallet.\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\n        s.wallet = newPayoutWallet;\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\n    }\n\n    /// @notice Gets the payout wallet.\n    /// @return wallet The payout wallet.\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\n        return s.wallet;\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {PayoutWalletStorage} from \"./libraries/PayoutWalletStorage.sol\";\nimport {PayoutWalletBase} from \"./base/PayoutWalletBase.sol\";\nimport {ContractOwnership} from \"../access/ContractOwnership.sol\";\n\n/// @title Payout wallet (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n\n    /// @notice Initializes the storage with an initial payout wallet.\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n    /// @dev Emits a {PayoutWalletSet} event.\n    /// @param initialPayoutWallet The initial payout wallet.\n    constructor(address payable initialPayoutWallet) {\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {InconsistentArrayLengths} from \"./../../CommonErrors.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/interfaces/IERC20.sol\";\nimport {IERC721} from \"./../../token/ERC721/interfaces/IERC721.sol\";\nimport {ContractOwnershipStorage} from \"./../../access/libraries/ContractOwnershipStorage.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\nabstract contract TokenRecoveryBase is Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using SafeERC20 for IERC20;\n    using Address for address payable;\n\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != amounts.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                accounts[i].sendValue(amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n    ///  so that the extraction is limited to only amounts sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param tokens the list of ERC20 token addresses.\n    /// @param amounts the list of token amounts to transfer.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\n            }\n        }\n    }\n\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n    ///  so that the extraction is limited to only tokens sent accidentally.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\n    /// @param accounts the list of accounts to transfer the tokens to.\n    /// @param contracts the list of ERC721 contract addresses.\n    /// @param tokenIds the list of token ids to transfer.\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        uint256 length = accounts.length;\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\n            }\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {TokenRecoveryBase} from \"./base/TokenRecoveryBase.sol\";\nimport {ContractOwnership} from \"./../access/ContractOwnership.sol\";\n\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\n\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC20Receiver} from \"./interfaces/IERC20Receiver.sol\";\nimport {InterfaceDetectionStorage} from \"../../introspection/libraries/InterfaceDetectionStorage.sol\";\nimport {InterfaceDetection} from \"../../introspection/InterfaceDetection.sol\";\n\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\n    constructor() {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when the allowance increase creates an overflow.\n/// @param owner The owner of the tokens.\n/// @param spender The spender of the tokens.\n/// @param allowance The current allowance.\n/// @param increment The allowance increase.\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\nerror ERC20BatchTransferValuesOverflow();\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when setting an allowance to the the zero address.\n/// @param owner The owner of the tokens.\nerror ERC20ApprovalToAddressZero(address owner);\n\n/// @notice Thrown when the allowance decreases below the current alowance set.\n/// @param owner The owner of the tokens.\n/// @param spender The spender of the tokens.\n/// @param allowance The current allowance.\n/// @param decrement The allowance decrease.\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\n\n/// @notice Thrown when transferring tokens to the zero address.\n/// @param owner The account from which the tokens are transferred.\nerror ERC20TransferToAddressZero(address owner);\n\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\n/// @param owner The owner of the tokens.\n/// @param balance The current balance.\n/// @param value The amount of tokens being transferred.\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when the minting tokens to the zero address.\nerror ERC20MintToAddressZero();\n\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\nerror ERC20BatchMintValuesOverflow();\n\n/// @notice Thrown when the minting tokens overflows the supply.\n/// @param supply The current supply.\n/// @param value The amount of tokens being minted.\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\n/// @param recipient The recipient contract.\nerror ERC20SafeTransferRejected(address recipient);\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, basic interface (events).\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20Events {\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\n    /// @param from The account where the transferred tokens are withdrawn from.\n    /// @param to The account where the transferred tokens are deposited to.\n    /// @param value The amount of tokens being transferred.\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /// @notice Emitted when an approval is set.\n    /// @param owner The account granting an allowance to `spender`.\n    /// @param spender The account being granted an allowance from `owner`.\n    /// @param value The allowance amount being granted.\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC20Events} from \"./../events/IERC20Events.sol\";\n\n/// @title ERC20 Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\ninterface IERC20 is IERC20Events {\n    /// @notice Sets the allowance to an account from the sender.\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param spender The account being granted the allowance by the message caller.\n    /// @param value The allowance amount to grant.\n    /// @return result Whether the operation succeeded.\n    function approve(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transfer(address to, uint256 value) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @return result Whether the operation succeeded.\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\n\n    /// @notice Gets the total token supply.\n    /// @return supply The total token supply.\n    function totalSupply() external view returns (uint256 supply);\n\n    /// @notice Gets an account balance.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(address owner, address spender) external view returns (uint256 value);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, optional extension: Allowance.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\ninterface IERC20Allowance {\n    /// @notice Increases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    /// @return result Whether the operation succeeded.\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\n\n    /// @notice Decreases the allowance granted to an account by the sender.\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n    /// @dev Reverts if `spender` is the zero address.\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    /// @return result Whether the operation succeeded.\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\ninterface IERC20BatchTransfers {\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to be transferred.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    /// @return result Whether the operation succeeded.\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, optional extension: Burnable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\ninterface IERC20Burnable {\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burn(uint256 value) external returns (bool result);\n\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function burnFrom(address from, uint256 value) external returns (bool result);\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Reverts if `owners` and `values` have different lengths.\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    /// @return result Whether the operation succeeded.\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, optional extension: Mintable.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\ninterface IERC20Mintable {\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(address to, uint256 value) external;\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Reverts if `recipients` and `values` have different lengths.\n    /// @dev Reverts if one of `recipients` is the zero address.\n    /// @dev Reverts if the total supply overflows.\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, Tokens Receiver.\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\ninterface IERC20Receiver {\n    /// @notice Handles the receipt of ERC20 tokens.\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n    /// @param operator The initiator of the safe transfer.\n    /// @param from The previous tokens owner.\n    /// @param value The amount of tokens transferred.\n    /// @param data Optional additional data with no specified format.\n    /// @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse.\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\ninterface IERC20SafeTransfers {\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if the sender does not have at least `value` of balance.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` does not have at least `value` of balance.\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n    /// @dev Emits an {IERC20-Transfer} event.\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    /// @return result Whether the operation succeeded.\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n// solhint-disable-next-line max-line-length\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \"./../errors/ERC20Errors.sol\";\nimport {ERC20AllowanceOverflow} from \"./../errors/ERC20AllowanceErrors.sol\";\nimport {ERC20BatchTransferValuesOverflow} from \"./../errors/ERC20BatchTransfersErrors.sol\";\nimport {ERC20SafeTransferRejected} from \"./../errors/ERC20SafeTransfersErrors.sol\";\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \"./../errors/ERC20MintableErrors.sol\";\nimport {InconsistentArrayLengths} from \"./../../../CommonErrors.sol\";\nimport {IERC20Events} from \"./../events/IERC20Events.sol\";\nimport {IERC20} from \"./../interfaces/IERC20.sol\";\nimport {IERC20Allowance} from \"./../interfaces/IERC20Allowance.sol\";\nimport {IERC20BatchTransfers} from \"./../interfaces/IERC20BatchTransfers.sol\";\nimport {IERC20SafeTransfers} from \"./../interfaces/IERC20SafeTransfers.sol\";\nimport {IERC20Mintable} from \"./../interfaces/IERC20Mintable.sol\";\nimport {IERC20Burnable} from \"./../interfaces/IERC20Burnable.sol\";\nimport {IERC20Receiver} from \"./../interfaces/IERC20Receiver.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ERC20Storage {\n    using Address for address;\n    using ERC20Storage for ERC20Storage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        mapping(address => uint256) balances;\n        mapping(address => mapping(address => uint256)) allowances;\n        uint256 supply;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.token.ERC20.ERC20.phase\")) - 1);\n\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function init() internal {\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        init();\n        layout().batchMint(initialHolders, initialAllocations);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\n    function initERC20BatchTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\n    function initERC20SafeTransfers() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\n    function initERC20Mintable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\n    }\n\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\n    function initERC20Burnable() internal {\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\n    }\n\n    /// @notice Sets the allowance to an account by an owner.\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Emits an {Approval} event.\n    /// @param owner The account to set the allowance from.\n    /// @param spender The account being granted the allowance by `owner`.\n    /// @param value The allowance amount to grant.\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        s.allowances[owner][spender] = value;\n        emit IERC20Events.Approval(owner, spender, value);\n    }\n\n    /// @notice Increases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account increasing the allowance.\n    /// @param spender The account whose allowance is being increased.\n    /// @param value The allowance amount increase.\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        uint256 currentAllowance = s.allowances[owner][spender];\n        if (value != 0) {\n            unchecked {\n                uint256 newAllowance = currentAllowance + value;\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\n                s.allowances[owner][spender] = newAllowance;\n                currentAllowance = newAllowance;\n            }\n        }\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\n    }\n\n    /// @notice Decreases the allowance granted to an account by an owner.\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n    /// @param owner The account decreasing the allowance.\n    /// @param spender The account whose allowance is being decreased.\n    /// @param value The allowance amount decrease.\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\n        uint256 currentAllowance = s.allowances[owner][spender];\n\n        if (currentAllowance != type(uint256).max && value != 0) {\n            unchecked {\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\n                uint256 newAllowance = currentAllowance - value;\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\n                s.allowances[owner][spender] = newAllowance;\n                currentAllowance = newAllowance;\n            }\n        }\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient.\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                if (from != to) {\n                    s.balances[from] = newBalance;\n                    s.balances[to] += value;\n                }\n            }\n        }\n\n        emit IERC20Events.Transfer(from, to, value);\n    }\n\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\n    /// @param sender The message sender.\n    /// @param from The account which owns the tokens to transfer.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.transfer(from, to, value);\n    }\n\n    //================================================= Batch Transfers ==================================================//\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n                emit IERC20Events.Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                // balance must be sufficient, including self-transfers\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n    }\n\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n    /// @dev Emits a {Transfer} event for each transfer.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param recipients The list of accounts to transfer the tokens to.\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 balance = s.balances[from];\n\n        uint256 totalValue;\n        uint256 selfTransferTotalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\n\n                uint256 value = values[i];\n\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\n                    totalValue = newTotalValue;\n                    if (from != to) {\n                        s.balances[to] += value;\n                    } else {\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\n                    }\n                }\n\n                emit IERC20Events.Transfer(from, to, value);\n            }\n\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\n                uint256 newBalance = balance - totalValue;\n                // balance must be sufficient, including self-transfers\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\n            }\n        }\n\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, totalValue);\n        }\n    }\n\n    //================================================= Safe Transfers ==================================================//\n\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transfer(from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(from, from, to, value, data);\n        }\n    }\n\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account transferring the tokens.\n    /// @param to The account to transfer the tokens to.\n    /// @param value The amount of tokens to transfer.\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\n        s.transferFrom(sender, from, to, value);\n        if (to.isContract()) {\n            _callOnERC20Received(sender, from, to, value, data);\n        }\n    }\n\n    //================================================= Minting ==================================================//\n\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\n    /// @param to The account to mint the tokens to.\n    /// @param value The amount of tokens to mint.\n    function mint(Layout storage s, address to, uint256 value) internal {\n        if (to == address(0)) revert ERC20MintToAddressZero();\n        if (value != 0) {\n            uint256 supply = s.supply;\n            unchecked {\n                uint256 newSupply = supply + value;\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\n                s.supply = newSupply;\n                s.balances[to] += value; // balance cannot overflow if supply does not\n            }\n        }\n        emit IERC20Events.Transfer(address(0), to, value);\n    }\n\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n    /// @param recipients The list of accounts to mint the tokens to.\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\n        uint256 length = recipients.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address to = recipients[i];\n                if (to == address(0)) revert ERC20MintToAddressZero();\n\n                uint256 value = values[i];\n                if (value != 0) {\n                    uint256 newTotalValue = totalValue + value;\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\n                    totalValue = newTotalValue;\n                    s.balances[to] += value; // balance cannot overflow if supply does not\n                }\n                emit IERC20Events.Transfer(address(0), to, value);\n            }\n\n            if (totalValue != 0) {\n                uint256 supply = s.supply;\n                uint256 newSupply = supply + totalValue;\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\n                s.supply = newSupply;\n            }\n        }\n    }\n\n    //================================================= Burning ==================================================//\n\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @param from The account burning the tokens.\n    /// @param value The amount of tokens to burn.\n    function burn(Layout storage s, address from, uint256 value) internal {\n        if (value != 0) {\n            uint256 balance = s.balances[from];\n            unchecked {\n                uint256 newBalance = balance - value;\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                s.balances[from] = newBalance;\n                s.supply -= value; // will not underflow if balance does not\n            }\n        }\n\n        emit IERC20Events.Transfer(from, address(0), value);\n    }\n\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n    /// @param sender The message sender.\n    /// @param from The account to burn the tokens from.\n    /// @param value The amount of tokens to burn.\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\n        if (from != sender) {\n            s.decreaseAllowance(from, sender, value);\n        }\n        s.burn(from, value);\n    }\n\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\n    ///  at least the corresponding `value` of allowance by this `owner`.\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n    /// @param sender The message sender.\n    /// @param owners The list of accounts to burn the tokens from.\n    /// @param values The list of amounts of tokens to burn.\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\n        uint256 length = owners.length;\n        if (length != values.length) revert InconsistentArrayLengths();\n\n        if (length == 0) return;\n\n        uint256 totalValue;\n        unchecked {\n            for (uint256 i; i != length; ++i) {\n                address from = owners[i];\n                uint256 value = values[i];\n\n                if (from != sender) {\n                    s.decreaseAllowance(from, sender, value);\n                }\n\n                if (value != 0) {\n                    uint256 balance = s.balances[from];\n                    uint256 newBalance = balance - value;\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\n                    s.balances[from] = newBalance;\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\n                }\n\n                emit IERC20Events.Transfer(from, address(0), value);\n            }\n\n            if (totalValue != 0) {\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\n            }\n        }\n    }\n\n    /// @notice Gets the total token supply.\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\n    /// @return supply The total token supply.\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\n        return s.supply;\n    }\n\n    /// @notice Gets an account balance.\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\n    /// @param owner The account whose balance will be returned.\n    /// @return balance The account balance.\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\n        return s.balances[owner];\n    }\n\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\n    /// @param owner The account that has granted an allowance to `spender`.\n    /// @param spender The account that was granted an allowance by `owner`.\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\n        return s.allowances[owner][spender];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n    /// @param sender The message sender.\n    /// @param from Previous token owner.\n    /// @param to New token owner.\n    /// @param value The value transferred.\n    /// @param data Optional data to send along with the receiver contract call.\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721Events {\n    /// @notice Emitted when a token is transferred.\n    /// @param from The previous token owner.\n    /// @param to The new token owner.\n    /// @param tokenId The transferred token identifier.\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /// @notice Emitted when a single token approval is set.\n    /// @param owner The token owner.\n    /// @param approved The approved address.\n    /// @param tokenId The approved token identifier.\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /// @notice Emitted when an approval for all tokens is set or unset.\n    /// @param owner The tokens owner.\n    /// @param operator The approved address.\n    /// @param approved True when then approval is set, false when it is unset.\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n}\n"},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.21;\n\nimport {IERC721Events} from \"./../events/IERC721Events.sol\";\n\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\ninterface IERC721 is IERC721Events {\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n    /// @dev Note: There can only be one approved address per token at a given time.\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @dev Reverts if `to` is the token owner.\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n    /// @dev Emits an {Approval} event.\n    /// @param to The address to approve, or the zero address to remove any existing approval.\n    /// @param tokenId The token identifier to give approval for.\n    function approve(address to, uint256 tokenId) external;\n\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n    /// @dev Reverts if the sender is the same as `operator`.\n    /// @dev Emits an {ApprovalForAll} event.\n    /// @param operator The address to approve for all tokens.\n    /// @param approved True to set an approval for all tokens, false to unset it.\n    function setApprovalForAll(address operator, bool approved) external;\n\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\n    /// @param tokenId The identifier of the token to transfer.\n    function transferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\n\n    /// @notice Safely transfers the ownership of a token to a recipient.\n    /// @dev Resets the token approval for `tokenId`.\n    /// @dev Reverts if `to` is the zero address.\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n    /// @dev Emits a {Transfer} event.\n    /// @param from The current token owner.\n    /// @param to The recipient of the token transfer.\n    /// @param tokenId The identifier of the token to transfer.\n    /// @param data Optional data to send along to a receiver contract.\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\n\n    /// @notice Gets the balance of an address.\n    /// @dev Reverts if `owner` is the zero address.\n    /// @param owner The address to query the balance of.\n    /// @return balance The amount owned by the owner.\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /// @notice Gets the owner of a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the owner of.\n    /// @return tokenOwner The owner of the token identifier.\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\n\n    /// @notice Gets the approved address for a token.\n    /// @dev Reverts if `tokenId` does not exist.\n    /// @param tokenId The token identifier to query the approval of.\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\n    function getApproved(uint256 tokenId) external view returns (address approved);\n\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\n    /// @param owner The address which gives the approval for all tokens.\n    /// @param operator The address which receives the approval for all tokens.\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\n}\n"},"@openzeppelin/contracts/interfaces/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../token/ERC20/IERC20.sol\";\n"},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\n}\n"},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    /**\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    /**\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\n     */\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    /**\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        uint256 oldAllowance = token.allowance(address(this), spender);\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\n    }\n\n    /**\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful.\n     */\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\n        }\n    }\n\n    /**\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n     * to be set to zero before setting it to a non-zero value, such as USDT.\n     */\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\n\n        if (!_callOptionalReturnBool(token, approvalCall)) {\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\n            _callOptionalReturn(token, approvalCall);\n        }\n    }\n\n    /**\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n     * Revert on invalid signature.\n     */\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     *\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\n     */\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\n        // and not revert is the subcall reverts.\n\n        (bool success, bytes memory returndata) = address(token).call(data);\n        return\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"contracts/mocks/payment/EDUCreditsManagerMock.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {EDUCreditsManager} from \"./../../payment/EDUCreditsManager.sol\";\n\ncontract EDUCreditsManagerMock is EDUCreditsManager {\n    constructor(\n        IERC20 eduToken,\n        address payable payoutWallet,\n        address unclaimedEDUHolder,\n        IForwarderRegistry forwarderRegistry\n    ) EDUCreditsManager(eduToken, payoutWallet, unclaimedEDUHolder, forwarderRegistry) {}\n\n    function __msgData() external view returns (bytes calldata) {\n        return _msgData();\n    }\n}\n"},"contracts/payment/EDUCreditsManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.21;\n\nimport {InconsistentArrayLengths} from \"@animoca/ethereum-contracts/contracts/CommonErrors.sol\";\nimport {IForwarderRegistry} from \"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\";\nimport {IERC20} from \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {IERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\";\nimport {ContractOwnershipStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\";\nimport {AccessControlStorage} from \"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\";\nimport {PayoutWalletStorage} from \"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\";\nimport {ERC20Storage} from \"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\";\nimport {PayoutWallet} from \"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\";\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {AccessControl} from \"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\";\nimport {ERC20Receiver} from \"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\";\nimport {TokenRecoveryBase} from \"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\";\nimport {TokenRecovery} from \"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\nimport {ForwarderRegistryContextBase} from \"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\";\nimport {ForwarderRegistryContext} from \"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\";\n\n/// @title DepositManager\n/// @notice Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).\n/// @notice Handles the deposit of EDU tokens by users (during the deposit phase).\n/// @notice Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).\n/// @notice Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase).\ncontract EDUCreditsManager is PayoutWallet, ERC20Receiver, AccessControl, TokenRecovery, ForwarderRegistryContext {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\n    using AccessControlStorage for AccessControlStorage.Layout;\n\n    struct UserCredits {\n        uint256 unclaimed; // unclaimed EDU credits from the genesis mint\n        uint256 bonus; // bonus EDU credits from the genesis mint\n        uint256 deposited; // deposited EDU credits from the user\n        bool diamondHand; // whether the user is a diamond hand, ie. didn't claim any from the genesis mint\n    }\n\n    bytes32 public constant SPENDER_ROLE = \"spender\";\n\n    uint256 public constant INIT_PHASE = 0;\n    uint256 public constant DEPOSIT_PHASE = 1;\n    uint256 public constant SALE_PHASE = 2;\n    uint256 public constant WITHDRAW_PHASE = 3;\n\n    IERC20 public immutable EDU_TOKEN;\n    address public immutable UNCLAIMED_EDU_HOLDER;\n\n    uint256 public currentPhase = INIT_PHASE;\n\n    mapping(address => UserCredits) public userCredits;\n\n    /// @notice The total credits is the sum of all unclaimed, bonus and deposited credits.\n    /// @notice The total credits does not decrease when credits are spent or withdrawn.\n    uint256 public totalCredits;\n\n    /// @notice The total deposited is the sum of all deposited credits.\n    /// @notice The total deposited decreases when unclaimed credits are spent or withdrawn.\n    uint256 public totalDeposited;\n\n    /// @notice Emitted when the current phase is set.\n    /// @param phase the phase set.\n    event PhaseSet(uint256 phase);\n\n    /// @notice Emitted when the initial credits are set.\n    /// @param users the users whose credits are set.\n    /// @param unclaimed the unclaimed EDU credits.\n    /// @param bonus the bonus EDU credits.\n    /// @param diamondHands whether the users are a diamond hand.\n    event InitialCreditsSet(address[] users, uint256[] unclaimed, uint256[] bonus, bool[] diamondHands);\n\n    /// @notice Emitted when credits are spent.\n    /// @param spender the spender of the credits.\n    /// @param user the user whose credits are spent.\n    /// @param bonusSpent the amount of bonus credits spent.\n    /// @param unclaimedSpent the amount of unclaimed credits spent.\n    /// @param depositedSpent the amount of deposited credits spent.\n    event CreditsSpent(address spender, address user, uint256 bonusSpent, uint256 unclaimedSpent, uint256 depositedSpent);\n\n    /// @notice Thrown when the phase being set is invalid.\n    /// @param phase the invalid phase.\n    error SettingInvalidPhase(uint256 phase);\n\n    /// @notice Thrown when an action is performed during the wrong phase.\n    /// @param expectedPhase the expected phase.\n    /// @param actualPhase the actual phase.\n    error OnlyDuringPhase(uint256 expectedPhase, uint256 actualPhase);\n\n    /// @notice Thrown when setting the initial credits for a zero address user.\n    error ZeroAddressUser();\n\n    /// @notice Thrown when setting the initial credits for a user with zero unclaimed credits.\n    /// @param user the user whose credits are set.\n    error ZeroValueUnclaimedCredits(address user);\n\n    /// @notice Thrown when setting the initial credits for a user whose credits have already been set.\n    /// @param user the user whose credits are set.\n    error UserCreditsAlreadySet(address user);\n\n    /// @notice Thrown when trying to spend zero credits.\n    /// @param spender the spender of the credits.\n    /// @param user the user whose credits are spent.\n    error ZeroSpendAmount(address spender, address user);\n\n    /// @notice Thrown when trying to spend more credits than the user has.\n    /// @param spender the spender of the credits.\n    /// @param user the user whose credits are spent.\n    /// @param amount the amount of credits to spend.\n    error InsufficientCredits(address spender, address user, uint256 amount);\n\n    /// @notice Thrown when trying to recover more EDU tokens than accidentally sent to this contract.\n    error UnrecoverableEDU(uint256 recoverable, uint256 recovering);\n\n    /// @dev Emits a {PhaseSet} to INIT_PHASE event.\n    constructor(\n        IERC20 eduToken,\n        address payable payoutWallet,\n        address unclaimedEDUHolder,\n        IForwarderRegistry forwarderRegistry\n    ) PayoutWallet(payoutWallet) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\n        EDU_TOKEN = eduToken;\n        UNCLAIMED_EDU_HOLDER = unclaimedEDUHolder;\n        emit PhaseSet(INIT_PHASE);\n    }\n\n    /// @notice Sets the current phase.\n    /// @dev Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Emits a {PhaseSet} event.\n    /// @param phase the phase to set.\n    function setPhase(uint256 phase) external {\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        if (phase > WITHDRAW_PHASE) revert SettingInvalidPhase(phase);\n        currentPhase = phase;\n        emit PhaseSet(DEPOSIT_PHASE);\n    }\n\n    /// @notice Sets the unclaimed and bonus EDU credits for a list of users.\n    /// @dev Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the init phase.\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n    /// @dev Reverts with {ZeroAddressUser} if one of `users` is the zero address.\n    /// @dev Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.\n    /// @dev Emits a {InitialCreditsSet} event.\n    /// @param users the users whose credits are set.\n    /// @param unclaimedCredits the unclaimed EDU credits.\n    /// @param bonusCredits the bonus EDU credits.\n    /// @param diamondHands whether the users are a diamond hand.\n    function setInitialCredits(\n        address[] calldata users,\n        uint256[] calldata unclaimedCredits,\n        uint256[] calldata bonusCredits,\n        bool[] calldata diamondHands\n    ) external {\n        uint256 length = users.length;\n        if (length != unclaimedCredits.length || length != bonusCredits.length || length != diamondHands.length) revert InconsistentArrayLengths();\n        if (currentPhase != INIT_PHASE) revert OnlyDuringPhase(INIT_PHASE, currentPhase);\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\n        for (uint256 i; i != length; ++i) {\n            address user = users[i];\n            if (user == address(0)) revert ZeroAddressUser();\n            uint256 unclaimed = unclaimedCredits[i];\n            if (unclaimed == 0) revert ZeroValueUnclaimedCredits(user);\n            UserCredits storage credits = userCredits[user];\n            if (credits.unclaimed != 0) revert UserCreditsAlreadySet(user);\n            uint256 bonus = bonusCredits[i];\n            credits.unclaimed = unclaimed;\n            credits.bonus = bonus;\n            credits.diamondHand = diamondHands[i];\n            totalCredits += unclaimed + bonus;\n        }\n        emit InitialCreditsSet(users, unclaimedCredits, bonusCredits, diamondHands);\n    }\n\n    /// @inheritdoc IERC20Receiver\n    /// @notice Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external returns (bytes4 magicValue) {\n        if (currentPhase != DEPOSIT_PHASE) revert OnlyDuringPhase(DEPOSIT_PHASE, currentPhase);\n        UserCredits storage credits = userCredits[from];\n        credits.deposited += value;\n        totalDeposited += value;\n        totalCredits += value;\n        return ERC20Storage.ERC20_RECEIVED;\n    }\n\n    /// @notice Spends EDU tokens from the user's balance by a spender account.\n    /// @notice The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\n    /// @dev Reverts with {ZeroSpendAmount} if `amount` is zero.\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.\n    /// @dev Reverts with {NotRoleHolder} if the sender is not a spender.\n    /// @dev Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.\n    /// @dev Emits a {EDUSpent} event.\n    /// @param user the user whose EDU tokens are spent.\n    /// @param amount the amount of EDU tokens to spend.\n    function spend(address user, uint256 amount) external {\n        address spender = _msgSender();\n        if (amount == 0) revert ZeroSpendAmount(spender, user);\n        if (currentPhase != SALE_PHASE) revert OnlyDuringPhase(SALE_PHASE, currentPhase);\n        AccessControlStorage.layout().enforceHasRole(SPENDER_ROLE, spender);\n        UserCredits storage credits = userCredits[user];\n\n        uint256 bonusSpent;\n        uint256 bonus = credits.bonus;\n        if (bonus != 0) {\n            if (bonus >= amount) {\n                credits.bonus -= amount;\n                emit CreditsSpent(spender, user, amount, 0, 0);\n                return;\n            } else {\n                credits.bonus = 0;\n                amount -= bonus;\n                bonusSpent = bonus;\n            }\n        }\n\n        uint256 unclaimedSpent;\n        uint256 unclaimed = credits.unclaimed;\n        if (unclaimed != 0) {\n            if (unclaimed >= amount) {\n                credits.unclaimed -= amount;\n                emit CreditsSpent(spender, user, bonusSpent, amount, 0);\n                return;\n            } else {\n                credits.unclaimed = 0;\n                amount -= unclaimed;\n                unclaimedSpent = unclaimed;\n            }\n        }\n\n        uint256 deposited = credits.deposited;\n        if (deposited < amount) revert InsufficientCredits(spender, user, amount);\n\n        credits.deposited -= amount;\n        totalDeposited -= amount;\n        EDU_TOKEN.transfer(PayoutWalletStorage.layout().payoutWallet(), amount);\n        emit CreditsSpent(spender, user, bonusSpent, unclaimedSpent, amount);\n    }\n\n    /// @notice Withdraws all the remaining unclaimed and deposited EDU credits.\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase.\n    function withdraw() external {\n        if (currentPhase != WITHDRAW_PHASE) revert OnlyDuringPhase(WITHDRAW_PHASE, currentPhase);\n        address user = _msgSender();\n        UserCredits storage credits = userCredits[_msgSender()];\n        uint256 unclaimed = credits.unclaimed;\n        if (unclaimed != 0) {\n            credits.unclaimed = 0;\n            EDU_TOKEN.transferFrom(UNCLAIMED_EDU_HOLDER, user, unclaimed);\n        }\n\n        uint256 deposited = credits.deposited;\n        if (deposited != 0) {\n            credits.deposited = 0;\n            totalDeposited -= deposited;\n            EDU_TOKEN.transfer(user, deposited);\n        }\n    }\n\n    /// @inheritdoc TokenRecoveryBase\n    /// @notice EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\n    /// @dev Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\n        uint256 recoverableEDUAmount = EDU_TOKEN.balanceOf(address(this)) - totalDeposited;\n        uint256 eduAmount;\n        for (uint256 i = 0; i < tokens.length; i++) {\n            if (tokens[i] == EDU_TOKEN) {\n                eduAmount += amounts[i];\n            }\n        }\n        if (eduAmount > recoverableEDUAmount) {\n            revert UnrecoverableEDU(recoverableEDUAmount, eduAmount);\n        }\n        super.recoverERC20s(accounts, tokens, amounts);\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\n        return ForwarderRegistryContextBase._msgSender();\n    }\n\n    /// @inheritdoc ForwarderRegistryContextBase\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\n        return ForwarderRegistryContextBase._msgData();\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/CommonErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","exportedSymbols":{"EtherReceptionDisabled":[4],"InconsistentArrayLengths":[7]},"id":8,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:0"},{"documentation":{"id":2,"nodeType":"StructuredDocumentation","src":"58:84:0","text":"@notice Thrown when trying to transfer tokens without calldata to the contract."},"errorSelector":"7b5c3290","id":4,"name":"EtherReceptionDisabled","nameLocation":"148:22:0","nodeType":"ErrorDefinition","parameters":{"id":3,"nodeType":"ParameterList","parameters":[],"src":"170:2:0"},"src":"142:31:0"},{"documentation":{"id":5,"nodeType":"StructuredDocumentation","src":"175:76:0","text":"@notice Thrown when the multiple related arrays have different lengths."},"errorSelector":"65825336","id":7,"name":"InconsistentArrayLengths","nameLocation":"257:24:0","nodeType":"ErrorDefinition","parameters":{"id":6,"nodeType":"ParameterList","parameters":[],"src":"281:2:0"},"src":"251:33:0"}],"src":"32:253:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","exportedSymbols":{"AccessControl":[19],"AccessControlBase":[176],"ContractOwnership":[52]},"id":20,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":9,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","file":"./base/AccessControlBase.sol","id":11,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":20,"sourceUnit":177,"src":"58:63:1","symbolAliases":[{"foreign":{"id":10,"name":"AccessControlBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":176,"src":"66:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./ContractOwnership.sol","id":13,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":20,"sourceUnit":53,"src":"122:58:1","symbolAliases":[{"foreign":{"id":12,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"130:17:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":15,"name":"AccessControlBase","nameLocations":["384:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":176,"src":"384:17:1"},"id":16,"nodeType":"InheritanceSpecifier","src":"384:17:1"},{"baseName":{"id":17,"name":"ContractOwnership","nameLocations":["403:17:1"],"nodeType":"IdentifierPath","referencedDeclaration":52,"src":"403:17:1"},"id":18,"nodeType":"InheritanceSpecifier","src":"403:17:1"}],"canonicalName":"AccessControl","contractDependencies":[],"contractKind":"contract","documentation":{"id":14,"nodeType":"StructuredDocumentation","src":"182:167:1","text":"@title Access control via roles management (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":19,"linearizedBaseContracts":[19,52,863,880,224,176,4613,333,289,313,278],"name":"AccessControl","nameLocation":"367:13:1","nodeType":"ContractDefinition","nodes":[],"scope":20,"src":"349:76:1","usedErrors":[233,249,868],"usedEvents":[268,277,288]}],"src":"32:394:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[52],"ContractOwnershipBase":[224],"ContractOwnershipStorage":[833],"InterfaceDetection":[863]},"id":53,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":21,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:2"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":23,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":53,"sourceUnit":834,"src":"58:82:2","symbolAliases":[{"foreign":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"66:24:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":25,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":53,"sourceUnit":225,"src":"141:71:2","symbolAliases":[{"foreign":{"id":24,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":224,"src":"149:21:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":27,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":53,"sourceUnit":864,"src":"213:77:2","symbolAliases":[{"foreign":{"id":26,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"221:18:2","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":29,"name":"ContractOwnershipBase","nameLocations":["549:21:2"],"nodeType":"IdentifierPath","referencedDeclaration":224,"src":"549:21:2"},"id":30,"nodeType":"InheritanceSpecifier","src":"549:21:2"},{"baseName":{"id":31,"name":"InterfaceDetection","nameLocations":["572:18:2"],"nodeType":"IdentifierPath","referencedDeclaration":863,"src":"572:18:2"},"id":32,"nodeType":"InheritanceSpecifier","src":"572:18:2"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":28,"nodeType":"StructuredDocumentation","src":"292:218:2","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":52,"linearizedBaseContracts":[52,863,880,224,4613,333,289],"name":"ContractOwnership","nameLocation":"528:17:2","nodeType":"ContractDefinition","nodes":[{"global":false,"id":36,"libraryName":{"id":33,"name":"ContractOwnershipStorage","nameLocations":["603:24:2"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"603:24:2"},"nodeType":"UsingForDirective","src":"597:67:2","typeName":{"id":35,"nodeType":"UserDefinedTypeName","pathNode":{"id":34,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:2","657:6:2"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"632:31:2"},"referencedDeclaration":610,"src":"632:31:2","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":50,"nodeType":"Block","src":"998:80:2","statements":[{"expression":{"arguments":[{"id":47,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":39,"src":"1058:12:2","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":42,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"1008:24:2","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":44,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:2","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"1008:31:2","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":45,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":46,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:2","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":682,"src":"1008:49:2","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":48,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:2","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":49,"nodeType":"ExpressionStatement","src":"1008:63:2"}]},"documentation":{"id":37,"nodeType":"StructuredDocumentation","src":"670:289:2","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":51,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":40,"nodeType":"ParameterList","parameters":[{"constant":false,"id":39,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:2","nodeType":"VariableDeclaration","scope":51,"src":"976:20:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":38,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:2"},"returnParameters":{"id":41,"nodeType":"ParameterList","parameters":[],"src":"998:0:2"},"scope":52,"src":"964:114:2","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":53,"src":"510:570:2","usedErrors":[249,868],"usedEvents":[288]}],"src":"32:1049:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol","exportedSymbols":{"AccessControlBase":[176],"AccessControlStorage":[586],"Context":[4613],"ContractOwnershipStorage":[833],"IAccessControl":[313]},"id":177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":54,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:3"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../../access/interfaces/IAccessControl.sol","id":56,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":177,"sourceUnit":314,"src":"58:76:3","symbolAliases":[{"foreign":{"id":55,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"66:14:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"./../libraries/AccessControlStorage.sol","id":58,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":177,"sourceUnit":587,"src":"135:77:3","symbolAliases":[{"foreign":{"id":57,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"143:20:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":60,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":177,"sourceUnit":834,"src":"213:85:3","symbolAliases":[{"foreign":{"id":59,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"221:24:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":62,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":177,"sourceUnit":4614,"src":"299:66:3","symbolAliases":[{"foreign":{"id":61,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"307:7:3","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":64,"name":"IAccessControl","nameLocations":["632:14:3"],"nodeType":"IdentifierPath","referencedDeclaration":313,"src":"632:14:3"},"id":65,"nodeType":"InheritanceSpecifier","src":"632:14:3"},{"baseName":{"id":66,"name":"Context","nameLocations":["648:7:3"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"648:7:3"},"id":67,"nodeType":"InheritanceSpecifier","src":"648:7:3"}],"canonicalName":"AccessControlBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"367:226:3","text":"@title Access control via roles management (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":176,"linearizedBaseContracts":[176,4613,313,278],"name":"AccessControlBase","nameLocation":"611:17:3","nodeType":"ContractDefinition","nodes":[{"global":false,"id":71,"libraryName":{"id":68,"name":"AccessControlStorage","nameLocations":["668:20:3"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"668:20:3"},"nodeType":"UsingForDirective","src":"662:59:3","typeName":{"id":70,"nodeType":"UserDefinedTypeName","pathNode":{"id":69,"name":"AccessControlStorage.Layout","nameLocations":["693:20:3","714:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"693:27:3"},"referencedDeclaration":353,"src":"693:27:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"global":false,"id":75,"libraryName":{"id":72,"name":"ContractOwnershipStorage","nameLocations":["732:24:3"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"732:24:3"},"nodeType":"UsingForDirective","src":"726:67:3","typeName":{"id":74,"nodeType":"UserDefinedTypeName","pathNode":{"id":73,"name":"ContractOwnershipStorage.Layout","nameLocations":["761:24:3","786:6:3"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"761:31:3"},"referencedDeclaration":610,"src":"761:31:3","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":106,"nodeType":"Block","src":"1175:198:3","statements":[{"assignments":[84],"declarations":[{"constant":false,"id":84,"mutability":"mutable","name":"operator","nameLocation":"1193:8:3","nodeType":"VariableDeclaration","scope":106,"src":"1185:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":83,"name":"address","nodeType":"ElementaryTypeName","src":"1185:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":87,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":85,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"1204:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":86,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1204:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1185:31:3"},{"expression":{"arguments":[{"id":93,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1283:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":88,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"1226:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":90,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1251:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"1226:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":91,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":92,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1260:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"1226:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":94,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1226:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":95,"nodeType":"ExpressionStatement","src":"1226:66:3"},{"expression":{"arguments":[{"id":101,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":78,"src":"1342:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":102,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"1348:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":103,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":84,"src":"1357:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":96,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"1302:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$586_$","typeString":"type(library AccessControlStorage)"}},"id":98,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1323:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":585,"src":"1302:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":99,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":100,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1332:9:3","memberName":"grantRole","nodeType":"MemberAccess","referencedDeclaration":406,"src":"1302:39:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":104,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1302:64:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":105,"nodeType":"ExpressionStatement","src":"1302:64:3"}]},"documentation":{"id":76,"nodeType":"StructuredDocumentation","src":"799:312:3","text":"@notice Grants a role to an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to."},"functionSelector":"2f2ff15d","id":107,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"1125:9:3","nodeType":"FunctionDefinition","parameters":{"id":81,"nodeType":"ParameterList","parameters":[{"constant":false,"id":78,"mutability":"mutable","name":"role","nameLocation":"1143:4:3","nodeType":"VariableDeclaration","scope":107,"src":"1135:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":77,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1135:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":80,"mutability":"mutable","name":"account","nameLocation":"1157:7:3","nodeType":"VariableDeclaration","scope":107,"src":"1149:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":79,"name":"address","nodeType":"ElementaryTypeName","src":"1149:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1134:31:3"},"returnParameters":{"id":82,"nodeType":"ParameterList","parameters":[],"src":"1175:0:3"},"scope":176,"src":"1116:257:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":138,"nodeType":"Block","src":"1754:199:3","statements":[{"assignments":[116],"declarations":[{"constant":false,"id":116,"mutability":"mutable","name":"operator","nameLocation":"1772:8:3","nodeType":"VariableDeclaration","scope":138,"src":"1764:16:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"1764:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":119,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":117,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"1783:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":118,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1783:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1764:31:3"},{"expression":{"arguments":[{"id":125,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"1862:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":120,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"1805:24:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":122,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1830:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"1805:31:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":123,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:33:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":124,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1839:22:3","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"1805:56:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":126,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1805:66:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":127,"nodeType":"ExpressionStatement","src":"1805:66:3"},{"expression":{"arguments":[{"id":133,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1922:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":134,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":112,"src":"1928:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":135,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":116,"src":"1937:8:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":128,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"1881:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$586_$","typeString":"type(library AccessControlStorage)"}},"id":130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1902:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":585,"src":"1881:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":132,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1911:10:3","memberName":"revokeRole","nodeType":"MemberAccess","referencedDeclaration":445,"src":"1881:40:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address,address)"}},"id":136,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1881:65:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":137,"nodeType":"ExpressionStatement","src":"1881:65:3"}]},"documentation":{"id":108,"nodeType":"StructuredDocumentation","src":"1379:310:3","text":"@notice Revokes a role from an account.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from."},"functionSelector":"d547741f","id":139,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1703:10:3","nodeType":"FunctionDefinition","parameters":{"id":113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":110,"mutability":"mutable","name":"role","nameLocation":"1722:4:3","nodeType":"VariableDeclaration","scope":139,"src":"1714:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":109,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1714:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":112,"mutability":"mutable","name":"account","nameLocation":"1736:7:3","nodeType":"VariableDeclaration","scope":139,"src":"1728:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":111,"name":"address","nodeType":"ElementaryTypeName","src":"1728:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1713:31:3"},"returnParameters":{"id":114,"nodeType":"ParameterList","parameters":[],"src":"1754:0:3"},"scope":176,"src":"1694:259:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[302],"body":{"id":155,"nodeType":"Block","src":"2039:79:3","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":150,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"2092:10:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":151,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2092:12:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":152,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":142,"src":"2106:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":145,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"2049:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$586_$","typeString":"type(library AccessControlStorage)"}},"id":147,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2070:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":585,"src":"2049:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":148,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":149,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2079:12:3","memberName":"renounceRole","nodeType":"MemberAccess","referencedDeclaration":482,"src":"2049:42:3","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$353_storage_ptr_$_t_address_$_t_bytes32_$returns$__$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,address,bytes32)"}},"id":153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2049:62:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":154,"nodeType":"ExpressionStatement","src":"2049:62:3"}]},"documentation":{"id":140,"nodeType":"StructuredDocumentation","src":"1959:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"8bb9c5bf","id":156,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2003:12:3","nodeType":"FunctionDefinition","parameters":{"id":143,"nodeType":"ParameterList","parameters":[{"constant":false,"id":142,"mutability":"mutable","name":"role","nameLocation":"2024:4:3","nodeType":"VariableDeclaration","scope":156,"src":"2016:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":141,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2016:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2015:14:3"},"returnParameters":{"id":144,"nodeType":"ParameterList","parameters":[],"src":"2039:0:3"},"scope":176,"src":"1994:124:3","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[312],"body":{"id":174,"nodeType":"Block","src":"2245:76:3","statements":[{"expression":{"arguments":[{"id":170,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":159,"src":"2300:4:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":171,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":161,"src":"2306:7:3","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":166,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"2262:20:3","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$586_$","typeString":"type(library AccessControlStorage)"}},"id":167,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2283:6:3","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":585,"src":"2262:27:3","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":168,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:29:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":169,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2292:7:3","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"2262:37:3","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2262:52:3","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":165,"id":173,"nodeType":"Return","src":"2255:59:3"}]},"documentation":{"id":157,"nodeType":"StructuredDocumentation","src":"2124:30:3","text":"@inheritdoc IAccessControl"},"functionSelector":"91d14854","id":175,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2168:7:3","nodeType":"FunctionDefinition","parameters":{"id":162,"nodeType":"ParameterList","parameters":[{"constant":false,"id":159,"mutability":"mutable","name":"role","nameLocation":"2184:4:3","nodeType":"VariableDeclaration","scope":175,"src":"2176:12:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2176:7:3","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":161,"mutability":"mutable","name":"account","nameLocation":"2198:7:3","nodeType":"VariableDeclaration","scope":175,"src":"2190:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":160,"name":"address","nodeType":"ElementaryTypeName","src":"2190:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2175:31:3"},"returnParameters":{"id":165,"nodeType":"ParameterList","parameters":[{"constant":false,"id":164,"mutability":"mutable","name":"hasRole_","nameLocation":"2235:8:3","nodeType":"VariableDeclaration","scope":175,"src":"2230:13:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":163,"name":"bool","nodeType":"ElementaryTypeName","src":"2230:4:3","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2229:15:3"},"scope":176,"src":"2159:162:3","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":177,"src":"593:1730:3","usedErrors":[233,249],"usedEvents":[268,277]}],"src":"32:2292:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[4613],"ContractOwnershipBase":[224],"ContractOwnershipStorage":[833],"IERC173":[333]},"id":225,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":178,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:4"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":180,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":225,"sourceUnit":334,"src":"58:52:4","symbolAliases":[{"foreign":{"id":179,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"66:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":182,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":225,"sourceUnit":834,"src":"111:85:4","symbolAliases":[{"foreign":{"id":181,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"119:24:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":184,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":225,"sourceUnit":4614,"src":"197:66:4","symbolAliases":[{"foreign":{"id":183,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"205:7:4","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":186,"name":"IERC173","nameLocations":["586:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":333,"src":"586:7:4"},"id":187,"nodeType":"InheritanceSpecifier","src":"586:7:4"},{"baseName":{"id":188,"name":"Context","nameLocations":["595:7:4"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"595:7:4"},"id":189,"nodeType":"InheritanceSpecifier","src":"595:7:4"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":185,"nodeType":"StructuredDocumentation","src":"265:278:4","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":224,"linearizedBaseContracts":[224,4613,333,289],"name":"ContractOwnershipBase","nameLocation":"561:21:4","nodeType":"ContractDefinition","nodes":[{"global":false,"id":193,"libraryName":{"id":190,"name":"ContractOwnershipStorage","nameLocations":["615:24:4"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"615:24:4"},"nodeType":"UsingForDirective","src":"609:67:4","typeName":{"id":192,"nodeType":"UserDefinedTypeName","pathNode":{"id":191,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:4","669:6:4"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"644:31:4"},"referencedDeclaration":610,"src":"644:31:4","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[332],"body":{"id":205,"nodeType":"Block","src":"765:65:4","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":199,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"782:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"782:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":201,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":202,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:4","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":761,"src":"782:39:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":203,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":198,"id":204,"nodeType":"Return","src":"775:48:4"}]},"documentation":{"id":194,"nodeType":"StructuredDocumentation","src":"682:23:4","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":206,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:4","nodeType":"FunctionDefinition","parameters":{"id":195,"nodeType":"ParameterList","parameters":[],"src":"724:2:4"},"returnParameters":{"id":198,"nodeType":"ParameterList","parameters":[{"constant":false,"id":197,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":206,"src":"756:7:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":196,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:4"},"scope":224,"src":"710:120:4","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[326],"body":{"id":222,"nodeType":"Block","src":"924:92:4","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":217,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"986:10:4","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":218,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":219,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":209,"src":"1000:8:4","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":212,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"934:24:4","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:4","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"934:31:4","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":215,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:4","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":748,"src":"934:51:4","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$610_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":220,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:4","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":221,"nodeType":"ExpressionStatement","src":"934:75:4"}]},"documentation":{"id":207,"nodeType":"StructuredDocumentation","src":"836:23:4","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":223,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:4","nodeType":"FunctionDefinition","parameters":{"id":210,"nodeType":"ParameterList","parameters":[{"constant":false,"id":209,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:4","nodeType":"VariableDeclaration","scope":223,"src":"891:16:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":208,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:4"},"returnParameters":{"id":211,"nodeType":"ParameterList","parameters":[],"src":"924:0:4"},"scope":224,"src":"864:152:4","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":225,"src":"543:475:4","usedErrors":[249],"usedEvents":[288]}],"src":"32:987:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","exportedSymbols":{"NotRoleHolder":[233],"NotTargetContractRoleHolder":[242]},"id":243,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":226,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:5"},{"documentation":{"id":227,"nodeType":"StructuredDocumentation","src":"58:165:5","text":"@notice Thrown when an account does not have the required role.\n @param role The role the caller is missing.\n @param account The account that was checked."},"errorSelector":"7aa72882","id":233,"name":"NotRoleHolder","nameLocation":"229:13:5","nodeType":"ErrorDefinition","parameters":{"id":232,"nodeType":"ParameterList","parameters":[{"constant":false,"id":229,"mutability":"mutable","name":"role","nameLocation":"251:4:5","nodeType":"VariableDeclaration","scope":233,"src":"243:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":228,"name":"bytes32","nodeType":"ElementaryTypeName","src":"243:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":231,"mutability":"mutable","name":"account","nameLocation":"265:7:5","nodeType":"VariableDeclaration","scope":233,"src":"257:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":230,"name":"address","nodeType":"ElementaryTypeName","src":"257:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"242:31:5"},"src":"223:51:5"},{"documentation":{"id":234,"nodeType":"StructuredDocumentation","src":"276:238:5","text":"@notice Thrown when an account does not have the required role on a target contract.\n @param targetContract The contract that was checked.\n @param role The role that was checked.\n @param account The account that was checked."},"errorSelector":"7a436c16","id":242,"name":"NotTargetContractRoleHolder","nameLocation":"520:27:5","nodeType":"ErrorDefinition","parameters":{"id":241,"nodeType":"ParameterList","parameters":[{"constant":false,"id":236,"mutability":"mutable","name":"targetContract","nameLocation":"556:14:5","nodeType":"VariableDeclaration","scope":242,"src":"548:22:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":235,"name":"address","nodeType":"ElementaryTypeName","src":"548:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":238,"mutability":"mutable","name":"role","nameLocation":"580:4:5","nodeType":"VariableDeclaration","scope":242,"src":"572:12:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":237,"name":"bytes32","nodeType":"ElementaryTypeName","src":"572:7:5","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":240,"mutability":"mutable","name":"account","nameLocation":"594:7:5","nodeType":"VariableDeclaration","scope":242,"src":"586:15:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":239,"name":"address","nodeType":"ElementaryTypeName","src":"586:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"547:55:5"},"src":"514:89:5"}],"src":"32:572:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[249],"NotTargetContractOwner":[256]},"id":257,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":244,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:6"},{"documentation":{"id":245,"nodeType":"StructuredDocumentation","src":"58:130:6","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":249,"name":"NotContractOwner","nameLocation":"194:16:6","nodeType":"ErrorDefinition","parameters":{"id":248,"nodeType":"ParameterList","parameters":[{"constant":false,"id":247,"mutability":"mutable","name":"account","nameLocation":"219:7:6","nodeType":"VariableDeclaration","scope":249,"src":"211:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":246,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:6"},"src":"188:40:6"},{"documentation":{"id":250,"nodeType":"StructuredDocumentation","src":"230:194:6","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":256,"name":"NotTargetContractOwner","nameLocation":"430:22:6","nodeType":"ErrorDefinition","parameters":{"id":255,"nodeType":"ParameterList","parameters":[{"constant":false,"id":252,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:6","nodeType":"VariableDeclaration","scope":256,"src":"453:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":251,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":254,"mutability":"mutable","name":"account","nameLocation":"485:7:6","nodeType":"VariableDeclaration","scope":256,"src":"477:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":253,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:6"},"src":"424:70:6"}],"src":"32:463:6"},"id":6},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","exportedSymbols":{"IAccessControlEvents":[278]},"id":279,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":258,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:7"},{"abstract":false,"baseContracts":[],"canonicalName":"IAccessControlEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":259,"nodeType":"StructuredDocumentation","src":"58:56:7","text":"@title Access control via roles management (events)"},"fullyImplemented":true,"id":278,"linearizedBaseContracts":[278],"name":"IAccessControlEvents","nameLocation":"124:20:7","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":260,"nodeType":"StructuredDocumentation","src":"151:234:7","text":"@notice Emitted when `role` is granted to `account`.\n @param role The role that has been granted.\n @param account The account that has been granted the role.\n @param operator The account that granted the role."},"eventSelector":"2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d","id":268,"name":"RoleGranted","nameLocation":"396:11:7","nodeType":"EventDefinition","parameters":{"id":267,"nodeType":"ParameterList","parameters":[{"constant":false,"id":262,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"416:4:7","nodeType":"VariableDeclaration","scope":268,"src":"408:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":261,"name":"bytes32","nodeType":"ElementaryTypeName","src":"408:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":264,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"430:7:7","nodeType":"VariableDeclaration","scope":268,"src":"422:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":263,"name":"address","nodeType":"ElementaryTypeName","src":"422:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":266,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"447:8:7","nodeType":"VariableDeclaration","scope":268,"src":"439:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":265,"name":"address","nodeType":"ElementaryTypeName","src":"439:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"407:49:7"},"src":"390:67:7"},{"anonymous":false,"documentation":{"id":269,"nodeType":"StructuredDocumentation","src":"463:236:7","text":"@notice Emitted when `role` is revoked from `account`.\n @param role The role that has been revoked.\n @param account The account that has been revoked the role.\n @param operator The account that revoked the role."},"eventSelector":"f6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b","id":277,"name":"RoleRevoked","nameLocation":"710:11:7","nodeType":"EventDefinition","parameters":{"id":276,"nodeType":"ParameterList","parameters":[{"constant":false,"id":271,"indexed":false,"mutability":"mutable","name":"role","nameLocation":"730:4:7","nodeType":"VariableDeclaration","scope":277,"src":"722:12:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":270,"name":"bytes32","nodeType":"ElementaryTypeName","src":"722:7:7","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":273,"indexed":false,"mutability":"mutable","name":"account","nameLocation":"744:7:7","nodeType":"VariableDeclaration","scope":277,"src":"736:15:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":272,"name":"address","nodeType":"ElementaryTypeName","src":"736:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":275,"indexed":false,"mutability":"mutable","name":"operator","nameLocation":"761:8:7","nodeType":"VariableDeclaration","scope":277,"src":"753:16:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":274,"name":"address","nodeType":"ElementaryTypeName","src":"753:7:7","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"721:49:7"},"src":"704:67:7"}],"scope":279,"src":"114:659:7","usedErrors":[],"usedEvents":[268,277]}],"src":"32:742:7"},"id":7},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","exportedSymbols":{"IERC173Events":[289]},"id":290,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":280,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:8"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":281,"nodeType":"StructuredDocumentation","src":"58:179:8","text":"@title ERC-173 Contract Ownership Standard (events)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":true,"id":289,"linearizedBaseContracts":[289],"name":"IERC173Events","nameLocation":"247:13:8","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":282,"nodeType":"StructuredDocumentation","src":"267:162:8","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":288,"name":"OwnershipTransferred","nameLocation":"440:20:8","nodeType":"EventDefinition","parameters":{"id":287,"nodeType":"ParameterList","parameters":[{"constant":false,"id":284,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"477:13:8","nodeType":"VariableDeclaration","scope":288,"src":"461:29:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":283,"name":"address","nodeType":"ElementaryTypeName","src":"461:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":286,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"508:8:8","nodeType":"VariableDeclaration","scope":288,"src":"492:24:8","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":285,"name":"address","nodeType":"ElementaryTypeName","src":"492:7:8","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"460:57:8"},"src":"434:84:8"}],"scope":290,"src":"237:283:8","usedErrors":[],"usedEvents":[288]}],"src":"32:489:8"},"id":8},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","exportedSymbols":{"IAccessControl":[313],"IAccessControlEvents":[278]},"id":314,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":291,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:9"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","file":"./../events/IAccessControlEvents.sol","id":293,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":314,"sourceUnit":279,"src":"58:74:9","symbolAliases":[{"foreign":{"id":292,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"66:20:9","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":295,"name":"IAccessControlEvents","nameLocations":["221:20:9"],"nodeType":"IdentifierPath","referencedDeclaration":278,"src":"221:20:9"},"id":296,"nodeType":"InheritanceSpecifier","src":"221:20:9"}],"canonicalName":"IAccessControl","contractDependencies":[],"contractKind":"interface","documentation":{"id":294,"nodeType":"StructuredDocumentation","src":"134:59:9","text":"@title Access control via roles management (functions)"},"fullyImplemented":false,"id":313,"linearizedBaseContracts":[313,278],"name":"IAccessControl","nameLocation":"203:14:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":297,"nodeType":"StructuredDocumentation","src":"248:182:9","text":"@notice Renounces a role by the sender.\n @dev Reverts if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param role The role to renounce."},"functionSelector":"8bb9c5bf","id":302,"implemented":false,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"444:12:9","nodeType":"FunctionDefinition","parameters":{"id":300,"nodeType":"ParameterList","parameters":[{"constant":false,"id":299,"mutability":"mutable","name":"role","nameLocation":"465:4:9","nodeType":"VariableDeclaration","scope":302,"src":"457:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":298,"name":"bytes32","nodeType":"ElementaryTypeName","src":"457:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"456:14:9"},"returnParameters":{"id":301,"nodeType":"ParameterList","parameters":[],"src":"479:0:9"},"scope":313,"src":"435:45:9","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":303,"nodeType":"StructuredDocumentation","src":"486:173:9","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"functionSelector":"91d14854","id":312,"implemented":false,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"673:7:9","nodeType":"FunctionDefinition","parameters":{"id":308,"nodeType":"ParameterList","parameters":[{"constant":false,"id":305,"mutability":"mutable","name":"role","nameLocation":"689:4:9","nodeType":"VariableDeclaration","scope":312,"src":"681:12:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":304,"name":"bytes32","nodeType":"ElementaryTypeName","src":"681:7:9","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":307,"mutability":"mutable","name":"account","nameLocation":"703:7:9","nodeType":"VariableDeclaration","scope":312,"src":"695:15:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"695:7:9","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"680:31:9"},"returnParameters":{"id":311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":310,"mutability":"mutable","name":"hasRole_","nameLocation":"740:8:9","nodeType":"VariableDeclaration","scope":312,"src":"735:13:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":309,"name":"bool","nodeType":"ElementaryTypeName","src":"735:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"734:15:9"},"scope":313,"src":"664:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":314,"src":"193:559:9","usedErrors":[],"usedEvents":[268,277]}],"src":"32:721:9"},"id":9},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[333],"IERC173Events":[289]},"id":334,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":315,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":317,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":334,"sourceUnit":290,"src":"58:60:10","symbolAliases":[{"foreign":{"id":316,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"66:13:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":319,"name":"IERC173Events","nameLocations":["323:13:10"],"nodeType":"IdentifierPath","referencedDeclaration":289,"src":"323:13:10"},"id":320,"nodeType":"InheritanceSpecifier","src":"323:13:10"}],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":318,"nodeType":"StructuredDocumentation","src":"120:182:10","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":333,"linearizedBaseContracts":[333,289],"name":"IERC173","nameLocation":"312:7:10","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":321,"nodeType":"StructuredDocumentation","src":"343:342:10","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":326,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"699:17:10","nodeType":"FunctionDefinition","parameters":{"id":324,"nodeType":"ParameterList","parameters":[{"constant":false,"id":323,"mutability":"mutable","name":"newOwner","nameLocation":"725:8:10","nodeType":"VariableDeclaration","scope":326,"src":"717:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":322,"name":"address","nodeType":"ElementaryTypeName","src":"717:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"716:18:10"},"returnParameters":{"id":325,"nodeType":"ParameterList","parameters":[],"src":"743:0:10"},"scope":333,"src":"690:54:10","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":327,"nodeType":"StructuredDocumentation","src":"750:116:10","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":332,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"880:5:10","nodeType":"FunctionDefinition","parameters":{"id":328,"nodeType":"ParameterList","parameters":[],"src":"885:2:10"},"returnParameters":{"id":331,"nodeType":"ParameterList","parameters":[{"constant":false,"id":330,"mutability":"mutable","name":"contractOwner","nameLocation":"919:13:10","nodeType":"VariableDeclaration","scope":332,"src":"911:21:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":329,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:10","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"910:23:10"},"scope":333,"src":"871:63:10","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":334,"src":"302:634:10","usedErrors":[],"usedEvents":[288]}],"src":"32:905:10"},"id":10},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","exportedSymbols":{"AccessControlStorage":[586],"IAccessControl":[313],"IAccessControlEvents":[278],"NotRoleHolder":[233],"NotTargetContractRoleHolder":[242]},"id":587,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":335,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:11"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol","file":"./../errors/AccessControlErrors.sol","id":338,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":243,"src":"58:95:11","symbolAliases":[{"foreign":{"id":336,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"66:13:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":337,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"81:27:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol","file":"./../events/IAccessControlEvents.sol","id":340,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":279,"src":"154:74:11","symbolAliases":[{"foreign":{"id":339,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"162:20:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol","file":"./../interfaces/IAccessControl.sol","id":342,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":587,"sourceUnit":314,"src":"229:66:11","symbolAliases":[{"foreign":{"id":341,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"237:14:11","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"AccessControlStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":586,"linearizedBaseContracts":[586],"name":"AccessControlStorage","nameLocation":"305:20:11","nodeType":"ContractDefinition","nodes":[{"global":false,"id":346,"libraryName":{"id":343,"name":"AccessControlStorage","nameLocations":["338:20:11"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"338:20:11"},"nodeType":"UsingForDirective","src":"332:59:11","typeName":{"id":345,"nodeType":"UserDefinedTypeName","pathNode":{"id":344,"name":"AccessControlStorage.Layout","nameLocations":["363:20:11","384:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"363:27:11"},"referencedDeclaration":353,"src":"363:27:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"AccessControlStorage.Layout","id":353,"members":[{"constant":false,"id":352,"mutability":"mutable","name":"roles","nameLocation":"466:5:11","nodeType":"VariableDeclaration","scope":353,"src":"421:50:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"typeName":{"id":351,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":347,"name":"bytes32","nodeType":"ElementaryTypeName","src":"429:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"421:44:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":350,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":348,"name":"address","nodeType":"ElementaryTypeName","src":"448:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"440:24:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":349,"name":"bool","nodeType":"ElementaryTypeName","src":"459:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}}},"visibility":"internal"}],"name":"Layout","nameLocation":"404:6:11","nodeType":"StructDefinition","scope":586,"src":"397:81:11","visibility":"public"},{"constant":true,"id":366,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"510:19:11","nodeType":"VariableDeclaration","scope":586,"src":"484:124:11","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":354,"name":"bytes32","nodeType":"ElementaryTypeName","src":"484:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":364,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e416363657373436f6e74726f6c2e73746f72616765","id":360,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"558:43:11","typeDescriptions":{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""},"value":"animoca.core.access.AccessControl.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23","typeString":"literal_string \"animoca.core.access.AccessControl.storage\""}],"id":359,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"548:9:11","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":361,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"548:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"540:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":357,"name":"uint256","nodeType":"ElementaryTypeName","src":"540:7:11","typeDescriptions":{}}},"id":362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"540:63:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"606:1:11","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"540:67:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":356,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"532:7:11","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":355,"name":"bytes32","nodeType":"ElementaryTypeName","src":"532:7:11","typeDescriptions":{}}},"id":365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"532:76:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":405,"nodeType":"Block","src":"1084:177:11","statements":[{"condition":{"id":384,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"1098:25:11","subExpression":{"arguments":[{"id":381,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1109:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":382,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"1115:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":379,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"1099:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":380,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1101:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1099:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":383,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1099:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":404,"nodeType":"IfStatement","src":"1094:161:11","trueBody":{"id":403,"nodeType":"Block","src":"1125:130:11","statements":[{"expression":{"id":393,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":385,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":370,"src":"1139:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":389,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1141:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":352,"src":"1139:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":390,"indexExpression":{"id":387,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1147:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1139:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":391,"indexExpression":{"id":388,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"1153:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1139:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"74727565","id":392,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1164:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"src":"1139:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":394,"nodeType":"ExpressionStatement","src":"1139:29:11"},{"eventCall":{"arguments":[{"id":398,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":372,"src":"1220:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":399,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":374,"src":"1226:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":400,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":376,"src":"1235:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":395,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1187:20:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$278_$","typeString":"type(contract IAccessControlEvents)"}},"id":397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1208:11:11","memberName":"RoleGranted","nodeType":"MemberAccess","referencedDeclaration":268,"src":"1187:32:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1187:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":402,"nodeType":"EmitStatement","src":"1182:62:11"}]}}]},"documentation":{"id":367,"nodeType":"StructuredDocumentation","src":"615:369:11","text":"@notice Grants a role to an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleGranted} event if the account did not previously have the role.\n @param role The role to grant.\n @param account The account to grant the role to.\n @param operator The account requesting the role change."},"id":406,"implemented":true,"kind":"function","modifiers":[],"name":"grantRole","nameLocation":"998:9:11","nodeType":"FunctionDefinition","parameters":{"id":377,"nodeType":"ParameterList","parameters":[{"constant":false,"id":370,"mutability":"mutable","name":"s","nameLocation":"1023:1:11","nodeType":"VariableDeclaration","scope":406,"src":"1008:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":369,"nodeType":"UserDefinedTypeName","pathNode":{"id":368,"name":"Layout","nameLocations":["1008:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1008:6:11"},"referencedDeclaration":353,"src":"1008:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":372,"mutability":"mutable","name":"role","nameLocation":"1034:4:11","nodeType":"VariableDeclaration","scope":406,"src":"1026:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":371,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1026:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":374,"mutability":"mutable","name":"account","nameLocation":"1048:7:11","nodeType":"VariableDeclaration","scope":406,"src":"1040:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":373,"name":"address","nodeType":"ElementaryTypeName","src":"1040:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":376,"mutability":"mutable","name":"operator","nameLocation":"1065:8:11","nodeType":"VariableDeclaration","scope":406,"src":"1057:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":375,"name":"address","nodeType":"ElementaryTypeName","src":"1057:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1007:67:11"},"returnParameters":{"id":378,"nodeType":"ParameterList","parameters":[],"src":"1084:0:11"},"scope":586,"src":"989:272:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":444,"nodeType":"Block","src":"1735:177:11","statements":[{"condition":{"arguments":[{"id":421,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1759:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":422,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1765:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":419,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1749:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":420,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1751:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"1749:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1749:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":443,"nodeType":"IfStatement","src":"1745:161:11","trueBody":{"id":442,"nodeType":"Block","src":"1775:131:11","statements":[{"expression":{"id":432,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":424,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":410,"src":"1789:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1791:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":352,"src":"1789:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":429,"indexExpression":{"id":426,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1797:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1789:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":430,"indexExpression":{"id":427,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1803:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1789:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":431,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1814:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"1789:30:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":433,"nodeType":"ExpressionStatement","src":"1789:30:11"},{"eventCall":{"arguments":[{"id":437,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":412,"src":"1871:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":438,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"1877:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":439,"name":"operator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":416,"src":"1886:8:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":434,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"1838:20:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$278_$","typeString":"type(contract IAccessControlEvents)"}},"id":436,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1859:11:11","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":277,"src":"1838:32:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":440,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1838:57:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":441,"nodeType":"EmitStatement","src":"1833:62:11"}]}}]},"documentation":{"id":407,"nodeType":"StructuredDocumentation","src":"1267:367:11","text":"@notice Revokes a role from an account.\n @dev Note: Call to this function should be properly access controlled.\n @dev Emits a {RoleRevoked} event if the account previously had the role.\n @param role The role to revoke.\n @param account The account to revoke the role from.\n @param operator The account requesting the role change."},"id":445,"implemented":true,"kind":"function","modifiers":[],"name":"revokeRole","nameLocation":"1648:10:11","nodeType":"FunctionDefinition","parameters":{"id":417,"nodeType":"ParameterList","parameters":[{"constant":false,"id":410,"mutability":"mutable","name":"s","nameLocation":"1674:1:11","nodeType":"VariableDeclaration","scope":445,"src":"1659:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":409,"nodeType":"UserDefinedTypeName","pathNode":{"id":408,"name":"Layout","nameLocations":["1659:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"1659:6:11"},"referencedDeclaration":353,"src":"1659:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":412,"mutability":"mutable","name":"role","nameLocation":"1685:4:11","nodeType":"VariableDeclaration","scope":445,"src":"1677:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":411,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1677:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":414,"mutability":"mutable","name":"account","nameLocation":"1699:7:11","nodeType":"VariableDeclaration","scope":445,"src":"1691:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":413,"name":"address","nodeType":"ElementaryTypeName","src":"1691:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":416,"mutability":"mutable","name":"operator","nameLocation":"1716:8:11","nodeType":"VariableDeclaration","scope":445,"src":"1708:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":415,"name":"address","nodeType":"ElementaryTypeName","src":"1708:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1658:67:11"},"returnParameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"1735:0:11"},"scope":586,"src":"1639:273:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":481,"nodeType":"Block","src":"2247:155:11","statements":[{"expression":{"arguments":[{"id":459,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2274:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":460,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2280:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":456,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2257:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2259:14:11","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":548,"src":"2257:16:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":461,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2257:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":462,"nodeType":"ExpressionStatement","src":"2257:30:11"},{"expression":{"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":463,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":449,"src":"2297:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":467,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2299:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":352,"src":"2297:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":468,"indexExpression":{"id":465,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2305:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2297:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":469,"indexExpression":{"id":466,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2311:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2297:21:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"66616c7365","id":470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2321:5:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"src":"2297:29:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":472,"nodeType":"ExpressionStatement","src":"2297:29:11"},{"eventCall":{"arguments":[{"id":476,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":453,"src":"2374:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":477,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2380:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":478,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":451,"src":"2388:6:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":473,"name":"IAccessControlEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":278,"src":"2341:20:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControlEvents_$278_$","typeString":"type(contract IAccessControlEvents)"}},"id":475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2362:11:11","memberName":"RoleRevoked","nodeType":"MemberAccess","referencedDeclaration":277,"src":"2341:32:11","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_address_$returns$__$","typeString":"function (bytes32,address,address)"}},"id":479,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2341:54:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":480,"nodeType":"EmitStatement","src":"2336:59:11"}]},"documentation":{"id":446,"nodeType":"StructuredDocumentation","src":"1918:245:11","text":"@notice Renounces a role by the sender.\n @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\n @dev Emits a {RoleRevoked} event.\n @param sender The message sender.\n @param role The role to renounce."},"id":482,"implemented":true,"kind":"function","modifiers":[],"name":"renounceRole","nameLocation":"2177:12:11","nodeType":"FunctionDefinition","parameters":{"id":454,"nodeType":"ParameterList","parameters":[{"constant":false,"id":449,"mutability":"mutable","name":"s","nameLocation":"2205:1:11","nodeType":"VariableDeclaration","scope":482,"src":"2190:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":448,"nodeType":"UserDefinedTypeName","pathNode":{"id":447,"name":"Layout","nameLocations":["2190:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"2190:6:11"},"referencedDeclaration":353,"src":"2190:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":451,"mutability":"mutable","name":"sender","nameLocation":"2216:6:11","nodeType":"VariableDeclaration","scope":482,"src":"2208:14:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":450,"name":"address","nodeType":"ElementaryTypeName","src":"2208:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":453,"mutability":"mutable","name":"role","nameLocation":"2232:4:11","nodeType":"VariableDeclaration","scope":482,"src":"2224:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":452,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2224:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2189:48:11"},"returnParameters":{"id":455,"nodeType":"ParameterList","parameters":[],"src":"2247:0:11"},"scope":586,"src":"2168:234:11","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":502,"nodeType":"Block","src":"2690:46:11","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":495,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":486,"src":"2707:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":496,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2709:5:11","memberName":"roles","nodeType":"MemberAccess","referencedDeclaration":352,"src":"2707:7:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_address_$_t_bool_$_$","typeString":"mapping(bytes32 => mapping(address => bool))"}},"id":498,"indexExpression":{"id":497,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":488,"src":"2715:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2707:13:11","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_bool_$","typeString":"mapping(address => bool)"}},"id":500,"indexExpression":{"id":499,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":490,"src":"2721:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2707:22:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":494,"id":501,"nodeType":"Return","src":"2700:29:11"}]},"documentation":{"id":483,"nodeType":"StructuredDocumentation","src":"2408:173:11","text":"@notice Retrieves whether an account has a role.\n @param role The role.\n @param account The account.\n @return hasRole_ Whether `account` has `role`."},"id":503,"implemented":true,"kind":"function","modifiers":[],"name":"hasRole","nameLocation":"2595:7:11","nodeType":"FunctionDefinition","parameters":{"id":491,"nodeType":"ParameterList","parameters":[{"constant":false,"id":486,"mutability":"mutable","name":"s","nameLocation":"2618:1:11","nodeType":"VariableDeclaration","scope":503,"src":"2603:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":485,"nodeType":"UserDefinedTypeName","pathNode":{"id":484,"name":"Layout","nameLocations":["2603:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"2603:6:11"},"referencedDeclaration":353,"src":"2603:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":488,"mutability":"mutable","name":"role","nameLocation":"2629:4:11","nodeType":"VariableDeclaration","scope":503,"src":"2621:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":487,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2621:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":490,"mutability":"mutable","name":"account","nameLocation":"2643:7:11","nodeType":"VariableDeclaration","scope":503,"src":"2635:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":489,"name":"address","nodeType":"ElementaryTypeName","src":"2635:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2602:49:11"},"returnParameters":{"id":494,"nodeType":"ParameterList","parameters":[{"constant":false,"id":493,"mutability":"mutable","name":"hasRole_","nameLocation":"2680:8:11","nodeType":"VariableDeclaration","scope":503,"src":"2675:13:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":492,"name":"bool","nodeType":"ElementaryTypeName","src":"2675:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2674:15:11"},"scope":586,"src":"2586:150:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":523,"nodeType":"Block","src":"3181:77:11","statements":[{"expression":{"arguments":[{"id":519,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":508,"src":"3237:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":520,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":510,"src":"3243:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[{"id":516,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":506,"src":"3213:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":515,"name":"IAccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":313,"src":"3198:14:11","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IAccessControl_$313_$","typeString":"type(contract IAccessControl)"}},"id":517,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3198:30:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IAccessControl_$313","typeString":"contract IAccessControl"}},"id":518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3229:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":312,"src":"3198:38:11","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":521,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3198:53:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":514,"id":522,"nodeType":"Return","src":"3191:60:11"}]},"documentation":{"id":504,"nodeType":"StructuredDocumentation","src":"2742:296:11","text":"@notice Checks whether an account has a role in a target contract.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check.\n @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`."},"id":524,"implemented":true,"kind":"function","modifiers":[],"name":"hasTargetContractRole","nameLocation":"3052:21:11","nodeType":"FunctionDefinition","parameters":{"id":511,"nodeType":"ParameterList","parameters":[{"constant":false,"id":506,"mutability":"mutable","name":"targetContract","nameLocation":"3082:14:11","nodeType":"VariableDeclaration","scope":524,"src":"3074:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":505,"name":"address","nodeType":"ElementaryTypeName","src":"3074:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":508,"mutability":"mutable","name":"role","nameLocation":"3106:4:11","nodeType":"VariableDeclaration","scope":524,"src":"3098:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":507,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3098:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":510,"mutability":"mutable","name":"account","nameLocation":"3120:7:11","nodeType":"VariableDeclaration","scope":524,"src":"3112:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":509,"name":"address","nodeType":"ElementaryTypeName","src":"3112:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3073:55:11"},"returnParameters":{"id":514,"nodeType":"ParameterList","parameters":[{"constant":false,"id":513,"mutability":"mutable","name":"hasTargetContractRole_","nameLocation":"3157:22:11","nodeType":"VariableDeclaration","scope":524,"src":"3152:27:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":512,"name":"bool","nodeType":"ElementaryTypeName","src":"3152:4:11","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3151:29:11"},"scope":586,"src":"3043:215:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":547,"nodeType":"Block","src":"3546:83:11","statements":[{"condition":{"id":540,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3560:25:11","subExpression":{"arguments":[{"id":537,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3571:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":538,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"3577:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":535,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":528,"src":"3561:1:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":536,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3563:7:11","memberName":"hasRole","nodeType":"MemberAccess","referencedDeclaration":503,"src":"3561:9:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$_t_bool_$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view returns (bool)"}},"id":539,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3561:24:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":546,"nodeType":"IfStatement","src":"3556:66:11","trueBody":{"errorCall":{"arguments":[{"id":542,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":530,"src":"3608:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":543,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"3614:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":541,"name":"NotRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"3594:13:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_bytes32_$_t_address_$returns$__$","typeString":"function (bytes32,address) pure"}},"id":544,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3594:28:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":545,"nodeType":"RevertStatement","src":"3587:35:11"}}]},"documentation":{"id":525,"nodeType":"StructuredDocumentation","src":"3264:190:11","text":"@notice Ensures that an account has a role.\n @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\n @param role The role.\n @param account The account."},"id":548,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasRole","nameLocation":"3468:14:11","nodeType":"FunctionDefinition","parameters":{"id":533,"nodeType":"ParameterList","parameters":[{"constant":false,"id":528,"mutability":"mutable","name":"s","nameLocation":"3498:1:11","nodeType":"VariableDeclaration","scope":548,"src":"3483:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":527,"nodeType":"UserDefinedTypeName","pathNode":{"id":526,"name":"Layout","nameLocations":["3483:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"3483:6:11"},"referencedDeclaration":353,"src":"3483:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":530,"mutability":"mutable","name":"role","nameLocation":"3509:4:11","nodeType":"VariableDeclaration","scope":548,"src":"3501:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":529,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3501:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":532,"mutability":"mutable","name":"account","nameLocation":"3523:7:11","nodeType":"VariableDeclaration","scope":548,"src":"3515:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":531,"name":"address","nodeType":"ElementaryTypeName","src":"3515:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3482:49:11"},"returnParameters":{"id":534,"nodeType":"ParameterList","parameters":[],"src":"3546:0:11"},"scope":586,"src":"3459:170:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":572,"nodeType":"Block","src":"4048:165:11","statements":[{"condition":{"id":563,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4062:53:11","subExpression":{"arguments":[{"id":559,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"4085:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":560,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"4101:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":561,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"4107:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":558,"name":"hasTargetContractRole","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":524,"src":"4063:21:11","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (address,bytes32,address) view returns (bool)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4063:52:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":571,"nodeType":"IfStatement","src":"4058:149:11","trueBody":{"id":570,"nodeType":"Block","src":"4117:90:11","statements":[{"errorCall":{"arguments":[{"id":565,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"4166:14:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":566,"name":"role","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"4182:4:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":567,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":555,"src":"4188:7:11","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"id":564,"name":"NotTargetContractRoleHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":242,"src":"4138:27:11","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_bytes32_$_t_address_$returns$__$","typeString":"function (address,bytes32,address) pure"}},"id":568,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4138:58:11","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":569,"nodeType":"RevertStatement","src":"4131:65:11"}]}}]},"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"3635:301:11","text":"@notice Enforces that an account has a role in a target contract.\n @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\n @param targetContract The contract to check.\n @param role The role to check.\n @param account The account to check."},"id":573,"implemented":true,"kind":"function","modifiers":[],"name":"enforceHasTargetContractRole","nameLocation":"3950:28:11","nodeType":"FunctionDefinition","parameters":{"id":556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"targetContract","nameLocation":"3987:14:11","nodeType":"VariableDeclaration","scope":573,"src":"3979:22:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":550,"name":"address","nodeType":"ElementaryTypeName","src":"3979:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":553,"mutability":"mutable","name":"role","nameLocation":"4011:4:11","nodeType":"VariableDeclaration","scope":573,"src":"4003:12:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":552,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4003:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":555,"mutability":"mutable","name":"account","nameLocation":"4025:7:11","nodeType":"VariableDeclaration","scope":573,"src":"4017:15:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":554,"name":"address","nodeType":"ElementaryTypeName","src":"4017:7:11","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3978:55:11"},"returnParameters":{"id":557,"nodeType":"ParameterList","parameters":[],"src":"4048:0:11"},"scope":586,"src":"3941:272:11","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":584,"nodeType":"Block","src":"4278:115:11","statements":[{"assignments":[580],"declarations":[{"constant":false,"id":580,"mutability":"mutable","name":"position","nameLocation":"4296:8:11","nodeType":"VariableDeclaration","scope":584,"src":"4288:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":579,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4288:7:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":582,"initialValue":{"id":581,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":366,"src":"4307:19:11","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4288:38:11"},{"AST":{"nativeSrc":"4345:42:11","nodeType":"YulBlock","src":"4345:42:11","statements":[{"nativeSrc":"4359:18:11","nodeType":"YulAssignment","src":"4359:18:11","value":{"name":"position","nativeSrc":"4369:8:11","nodeType":"YulIdentifier","src":"4369:8:11"},"variableNames":[{"name":"s.slot","nativeSrc":"4359:6:11","nodeType":"YulIdentifier","src":"4359:6:11"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":580,"isOffset":false,"isSlot":false,"src":"4369:8:11","valueSize":1},{"declaration":577,"isOffset":false,"isSlot":true,"src":"4359:6:11","suffix":"slot","valueSize":1}],"id":583,"nodeType":"InlineAssembly","src":"4336:51:11"}]},"id":585,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4228:6:11","nodeType":"FunctionDefinition","parameters":{"id":574,"nodeType":"ParameterList","parameters":[],"src":"4234:2:11"},"returnParameters":{"id":578,"nodeType":"ParameterList","parameters":[{"constant":false,"id":577,"mutability":"mutable","name":"s","nameLocation":"4275:1:11","nodeType":"VariableDeclaration","scope":585,"src":"4260:16:11","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"},"typeName":{"id":576,"nodeType":"UserDefinedTypeName","pathNode":{"id":575,"name":"Layout","nameLocations":["4260:6:11"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"4260:6:11"},"referencedDeclaration":353,"src":"4260:6:11","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}},"visibility":"internal"}],"src":"4259:18:11"},"scope":586,"src":"4219:174:11","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":587,"src":"297:4098:11","usedErrors":[],"usedEvents":[]}],"src":"32:4364:11"},"id":11},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"ContractOwnershipStorage":[833],"IERC173":[333],"IERC173Events":[289],"InterfaceDetectionStorage":[981],"NotContractOwner":[249],"NotTargetContractOwner":[256],"ProxyInitialization":[1521]},"id":834,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":588,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":591,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":834,"sourceUnit":257,"src":"58:97:12","symbolAliases":[{"foreign":{"id":589,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"66:16:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":590,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"84:22:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol","file":"./../events/IERC173Events.sol","id":593,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":834,"sourceUnit":290,"src":"156:60:12","symbolAliases":[{"foreign":{"id":592,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"164:13:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":595,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":834,"sourceUnit":334,"src":"217:52:12","symbolAliases":[{"foreign":{"id":594,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"225:7:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":597,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":834,"sourceUnit":1522,"src":"270:84:12","symbolAliases":[{"foreign":{"id":596,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"278:19:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":599,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":834,"sourceUnit":982,"src":"355:104:12","symbolAliases":[{"foreign":{"id":598,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"363:25:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":833,"linearizedBaseContracts":[833],"name":"ContractOwnershipStorage","nameLocation":"469:24:12","nodeType":"ContractDefinition","nodes":[{"global":false,"id":603,"libraryName":{"id":600,"name":"ContractOwnershipStorage","nameLocations":["506:24:12"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"506:24:12"},"nodeType":"UsingForDirective","src":"500:67:12","typeName":{"id":602,"nodeType":"UserDefinedTypeName","pathNode":{"id":601,"name":"ContractOwnershipStorage.Layout","nameLocations":["535:24:12","560:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"535:31:12"},"referencedDeclaration":610,"src":"535:31:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":607,"libraryName":{"id":604,"name":"InterfaceDetectionStorage","nameLocations":["578:25:12"],"nodeType":"IdentifierPath","referencedDeclaration":981,"src":"578:25:12"},"nodeType":"UsingForDirective","src":"572:69:12","typeName":{"id":606,"nodeType":"UserDefinedTypeName","pathNode":{"id":605,"name":"InterfaceDetectionStorage.Layout","nameLocations":["608:25:12","634:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"608:32:12"},"referencedDeclaration":891,"src":"608:32:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":610,"members":[{"constant":false,"id":609,"mutability":"mutable","name":"contractOwner","nameLocation":"679:13:12","nodeType":"VariableDeclaration","scope":610,"src":"671:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"671:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"654:6:12","nodeType":"StructDefinition","scope":833,"src":"647:52:12","visibility":"public"},{"constant":true,"id":623,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"731:19:12","nodeType":"VariableDeclaration","scope":833,"src":"705:128:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":611,"name":"bytes32","nodeType":"ElementaryTypeName","src":"705:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":617,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"779:47:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":616,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"769:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":618,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"769:58:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":615,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"761:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":614,"name":"uint256","nodeType":"ElementaryTypeName","src":"761:7:12","typeDescriptions":{}}},"id":619,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"761:67:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":620,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"831:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"761:71:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":613,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"753:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":612,"name":"bytes32","nodeType":"ElementaryTypeName","src":"753:7:12","typeDescriptions":{}}},"id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"753:80:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":636,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"865:21:12","nodeType":"VariableDeclaration","scope":833,"src":"839:128:12","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":624,"name":"bytes32","nodeType":"ElementaryTypeName","src":"839:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":634,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":630,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"915:45:12","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":629,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"905:9:12","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"905:56:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":628,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"897:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":627,"name":"uint256","nodeType":"ElementaryTypeName","src":"897:7:12","typeDescriptions":{}}},"id":632,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"897:65:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":633,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"965:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"897:69:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":626,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"889:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":625,"name":"bytes32","nodeType":"ElementaryTypeName","src":"889:7:12","typeDescriptions":{}}},"id":635,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"889:78:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":681,"nodeType":"Block","src":"1476:281:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":650,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":645,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1490:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":648,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1514:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":647,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1506:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":646,"name":"address","nodeType":"ElementaryTypeName","src":"1506:7:12","typeDescriptions":{}}},"id":649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1506:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1490:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":668,"nodeType":"IfStatement","src":"1486:166:12","trueBody":{"id":667,"nodeType":"Block","src":"1518:134:12","statements":[{"expression":{"id":655,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":651,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":640,"src":"1532:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":653,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1534:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":609,"src":"1532:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":654,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1550:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1532:30:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":656,"nodeType":"ExpressionStatement","src":"1532:30:12"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":662,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1624:1:12","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":661,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1616:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"1616:7:12","typeDescriptions":{}}},"id":663,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1616:10:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":664,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":642,"src":"1628:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":657,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"1581:13:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$289_$","typeString":"type(contract IERC173Events)"}},"id":659,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1595:20:12","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":288,"src":"1581:34:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":665,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1581:60:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":666,"nodeType":"EmitStatement","src":"1576:65:12"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":675,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"1723:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$333_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$333_$","typeString":"type(contract IERC173)"}],"id":674,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1718:4:12","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":676,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1718:13:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$333","typeString":"type(contract IERC173)"}},"id":677,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1732:11:12","memberName":"interfaceId","nodeType":"MemberAccess","src":"1718:25:12","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":678,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1745:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":669,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"1661:25:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":671,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1687:6:12","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"1661:32:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":672,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:34:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":673,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1696:21:12","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"1661:56:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":679,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1661:89:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":680,"nodeType":"ExpressionStatement","src":"1661:89:12"}]},"documentation":{"id":637,"nodeType":"StructuredDocumentation","src":"974:423:12","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":682,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1411:15:12","nodeType":"FunctionDefinition","parameters":{"id":643,"nodeType":"ParameterList","parameters":[{"constant":false,"id":640,"mutability":"mutable","name":"s","nameLocation":"1442:1:12","nodeType":"VariableDeclaration","scope":682,"src":"1427:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":639,"nodeType":"UserDefinedTypeName","pathNode":{"id":638,"name":"Layout","nameLocations":["1427:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"1427:6:12"},"referencedDeclaration":610,"src":"1427:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":642,"mutability":"mutable","name":"initialOwner","nameLocation":"1453:12:12","nodeType":"VariableDeclaration","scope":682,"src":"1445:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":641,"name":"address","nodeType":"ElementaryTypeName","src":"1445:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1426:40:12"},"returnParameters":{"id":644,"nodeType":"ParameterList","parameters":[],"src":"1476:0:12"},"scope":833,"src":"1402:355:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":704,"nodeType":"Block","src":"2422:112:12","statements":[{"expression":{"arguments":[{"id":694,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":636,"src":"2461:21:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":695,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2484:1:12","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":691,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2432:19:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1521_$","typeString":"type(library ProxyInitialization)"}},"id":693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2452:8:12","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1520,"src":"2432:28:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":696,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2432:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":697,"nodeType":"ExpressionStatement","src":"2432:54:12"},{"expression":{"arguments":[{"id":701,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":688,"src":"2514:12:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":698,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":686,"src":"2496:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":700,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2498:15:12","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":682,"src":"2496:17:12","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":702,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2496:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":703,"nodeType":"ExpressionStatement","src":"2496:31:12"}]},"documentation":{"id":683,"nodeType":"StructuredDocumentation","src":"1763:586:12","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":705,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2363:9:12","nodeType":"FunctionDefinition","parameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":686,"mutability":"mutable","name":"s","nameLocation":"2388:1:12","nodeType":"VariableDeclaration","scope":705,"src":"2373:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":685,"nodeType":"UserDefinedTypeName","pathNode":{"id":684,"name":"Layout","nameLocations":["2373:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"2373:6:12"},"referencedDeclaration":610,"src":"2373:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":688,"mutability":"mutable","name":"initialOwner","nameLocation":"2399:12:12","nodeType":"VariableDeclaration","scope":705,"src":"2391:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":687,"name":"address","nodeType":"ElementaryTypeName","src":"2391:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2372:40:12"},"returnParameters":{"id":690,"nodeType":"ParameterList","parameters":[],"src":"2422:0:12"},"scope":833,"src":"2354:180:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":747,"nodeType":"Block","src":"2997:295:12","statements":[{"assignments":[717],"declarations":[{"constant":false,"id":717,"mutability":"mutable","name":"previousOwner","nameLocation":"3015:13:12","nodeType":"VariableDeclaration","scope":747,"src":"3007:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":716,"name":"address","nodeType":"ElementaryTypeName","src":"3007:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":720,"initialValue":{"expression":{"id":718,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"3031:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":719,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3033:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":609,"src":"3031:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3007:39:12"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":721,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"3060:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":722,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"3070:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3060:23:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":728,"nodeType":"IfStatement","src":"3056:60:12","trueBody":{"errorCall":{"arguments":[{"id":725,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":711,"src":"3109:6:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":724,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"3092:16:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":726,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3092:24:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":727,"nodeType":"RevertStatement","src":"3085:31:12"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":729,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"3130:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":730,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3147:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3130:25:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":746,"nodeType":"IfStatement","src":"3126:160:12","trueBody":{"id":745,"nodeType":"Block","src":"3157:129:12","statements":[{"expression":{"id":736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":732,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":709,"src":"3171:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":734,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3173:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":609,"src":"3171:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":735,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3189:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3171:26:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":737,"nodeType":"ExpressionStatement","src":"3171:26:12"},{"eventCall":{"arguments":[{"id":741,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":717,"src":"3251:13:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":742,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":713,"src":"3266:8:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":738,"name":"IERC173Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":289,"src":"3216:13:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173Events_$289_$","typeString":"type(contract IERC173Events)"}},"id":740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3230:20:12","memberName":"OwnershipTransferred","nodeType":"MemberAccess","referencedDeclaration":288,"src":"3216:34:12","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":743,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3216:59:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":744,"nodeType":"EmitStatement","src":"3211:64:12"}]}}]},"documentation":{"id":706,"nodeType":"StructuredDocumentation","src":"2540:364:12","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":748,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"2918:17:12","nodeType":"FunctionDefinition","parameters":{"id":714,"nodeType":"ParameterList","parameters":[{"constant":false,"id":709,"mutability":"mutable","name":"s","nameLocation":"2951:1:12","nodeType":"VariableDeclaration","scope":748,"src":"2936:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":708,"nodeType":"UserDefinedTypeName","pathNode":{"id":707,"name":"Layout","nameLocations":["2936:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"2936:6:12"},"referencedDeclaration":610,"src":"2936:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":711,"mutability":"mutable","name":"sender","nameLocation":"2962:6:12","nodeType":"VariableDeclaration","scope":748,"src":"2954:14:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":710,"name":"address","nodeType":"ElementaryTypeName","src":"2954:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":713,"mutability":"mutable","name":"newOwner","nameLocation":"2978:8:12","nodeType":"VariableDeclaration","scope":748,"src":"2970:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":712,"name":"address","nodeType":"ElementaryTypeName","src":"2970:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2935:52:12"},"returnParameters":{"id":715,"nodeType":"ParameterList","parameters":[],"src":"2997:0:12"},"scope":833,"src":"2909:383:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":760,"nodeType":"Block","src":"3498:39:12","statements":[{"expression":{"expression":{"id":757,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":752,"src":"3515:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":758,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3517:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":609,"src":"3515:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":756,"id":759,"nodeType":"Return","src":"3508:22:12"}]},"documentation":{"id":749,"nodeType":"StructuredDocumentation","src":"3298:116:12","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":761,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3428:5:12","nodeType":"FunctionDefinition","parameters":{"id":753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":752,"mutability":"mutable","name":"s","nameLocation":"3449:1:12","nodeType":"VariableDeclaration","scope":761,"src":"3434:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":751,"nodeType":"UserDefinedTypeName","pathNode":{"id":750,"name":"Layout","nameLocations":["3434:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"3434:6:12"},"referencedDeclaration":610,"src":"3434:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3433:18:12"},"returnParameters":{"id":756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":755,"mutability":"mutable","name":"contractOwner","nameLocation":"3483:13:12","nodeType":"VariableDeclaration","scope":761,"src":"3475:21:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":754,"name":"address","nodeType":"ElementaryTypeName","src":"3475:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3474:23:12"},"scope":833,"src":"3419:118:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":779,"nodeType":"Block","src":"3933:66:12","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":772,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"3958:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":771,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":333,"src":"3950:7:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$333_$","typeString":"type(contract IERC173)"}},"id":773,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3950:23:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$333","typeString":"contract IERC173"}},"id":774,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3974:5:12","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":332,"src":"3950:29:12","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3950:31:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":776,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"3985:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3950:42:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":770,"id":778,"nodeType":"Return","src":"3943:49:12"}]},"documentation":{"id":762,"nodeType":"StructuredDocumentation","src":"3543:261:12","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":780,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3818:21:12","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":764,"mutability":"mutable","name":"targetContract","nameLocation":"3848:14:12","nodeType":"VariableDeclaration","scope":780,"src":"3840:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":763,"name":"address","nodeType":"ElementaryTypeName","src":"3840:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"account","nameLocation":"3872:7:12","nodeType":"VariableDeclaration","scope":780,"src":"3864:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":765,"name":"address","nodeType":"ElementaryTypeName","src":"3864:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3839:41:12"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"3909:22:12","nodeType":"VariableDeclaration","scope":780,"src":"3904:27:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":768,"name":"bool","nodeType":"ElementaryTypeName","src":"3904:4:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"3903:29:12"},"scope":833,"src":"3809:190:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":798,"nodeType":"Block","src":"4270:81:12","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":792,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":789,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4284:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":790,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":784,"src":"4295:1:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":791,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4297:13:12","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":609,"src":"4295:15:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4284:26:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":797,"nodeType":"IfStatement","src":"4280:64:12","trueBody":{"errorCall":{"arguments":[{"id":794,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":786,"src":"4336:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":793,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":249,"src":"4319:16:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":795,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4319:25:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":796,"nodeType":"RevertStatement","src":"4312:32:12"}}]},"documentation":{"id":781,"nodeType":"StructuredDocumentation","src":"4005:179:12","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":799,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4198:22:12","nodeType":"FunctionDefinition","parameters":{"id":787,"nodeType":"ParameterList","parameters":[{"constant":false,"id":784,"mutability":"mutable","name":"s","nameLocation":"4236:1:12","nodeType":"VariableDeclaration","scope":799,"src":"4221:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":783,"nodeType":"UserDefinedTypeName","pathNode":{"id":782,"name":"Layout","nameLocations":["4221:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"4221:6:12"},"referencedDeclaration":610,"src":"4221:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":786,"mutability":"mutable","name":"account","nameLocation":"4247:7:12","nodeType":"VariableDeclaration","scope":799,"src":"4239:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":785,"name":"address","nodeType":"ElementaryTypeName","src":"4239:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4220:35:12"},"returnParameters":{"id":788,"nodeType":"ParameterList","parameters":[],"src":"4270:0:12"},"scope":833,"src":"4189:162:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":819,"nodeType":"Block","src":"4711:148:12","statements":[{"condition":{"id":811,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4725:47:12","subExpression":{"arguments":[{"id":808,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"4748:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":809,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4764:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":807,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":780,"src":"4726:21:12","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":810,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4726:46:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":818,"nodeType":"IfStatement","src":"4721:132:12","trueBody":{"id":817,"nodeType":"Block","src":"4774:79:12","statements":[{"errorCall":{"arguments":[{"id":813,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":802,"src":"4818:14:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":814,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":804,"src":"4834:7:12","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":812,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"4795:22:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":815,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4795:47:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":816,"nodeType":"RevertStatement","src":"4788:54:12"}]}}]},"documentation":{"id":800,"nodeType":"StructuredDocumentation","src":"4357:256:12","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":820,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4627:28:12","nodeType":"FunctionDefinition","parameters":{"id":805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":802,"mutability":"mutable","name":"targetContract","nameLocation":"4664:14:12","nodeType":"VariableDeclaration","scope":820,"src":"4656:22:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":801,"name":"address","nodeType":"ElementaryTypeName","src":"4656:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":804,"mutability":"mutable","name":"account","nameLocation":"4688:7:12","nodeType":"VariableDeclaration","scope":820,"src":"4680:15:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":803,"name":"address","nodeType":"ElementaryTypeName","src":"4680:7:12","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4655:41:12"},"returnParameters":{"id":806,"nodeType":"ParameterList","parameters":[],"src":"4711:0:12"},"scope":833,"src":"4618:241:12","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":831,"nodeType":"Block","src":"4924:115:12","statements":[{"assignments":[827],"declarations":[{"constant":false,"id":827,"mutability":"mutable","name":"position","nameLocation":"4942:8:12","nodeType":"VariableDeclaration","scope":831,"src":"4934:16:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":826,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4934:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":829,"initialValue":{"id":828,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":623,"src":"4953:19:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4934:38:12"},{"AST":{"nativeSrc":"4991:42:12","nodeType":"YulBlock","src":"4991:42:12","statements":[{"nativeSrc":"5005:18:12","nodeType":"YulAssignment","src":"5005:18:12","value":{"name":"position","nativeSrc":"5015:8:12","nodeType":"YulIdentifier","src":"5015:8:12"},"variableNames":[{"name":"s.slot","nativeSrc":"5005:6:12","nodeType":"YulIdentifier","src":"5005:6:12"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":827,"isOffset":false,"isSlot":false,"src":"5015:8:12","valueSize":1},{"declaration":824,"isOffset":false,"isSlot":true,"src":"5005:6:12","suffix":"slot","valueSize":1}],"id":830,"nodeType":"InlineAssembly","src":"4982:51:12"}]},"id":832,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"4874:6:12","nodeType":"FunctionDefinition","parameters":{"id":821,"nodeType":"ParameterList","parameters":[],"src":"4880:2:12"},"returnParameters":{"id":825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":824,"mutability":"mutable","name":"s","nameLocation":"4921:1:12","nodeType":"VariableDeclaration","scope":832,"src":"4906:16:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":823,"nodeType":"UserDefinedTypeName","pathNode":{"id":822,"name":"Layout","nameLocations":["4906:6:12"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"4906:6:12"},"referencedDeclaration":610,"src":"4906:6:12","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"4905:18:12"},"scope":833,"src":"4865:174:12","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":834,"src":"461:4580:12","usedErrors":[],"usedEvents":[]}],"src":"32:5010:12"},"id":12},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[880],"InterfaceDetection":[863],"InterfaceDetectionStorage":[981]},"id":864,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":835,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:13"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":837,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":864,"sourceUnit":881,"src":"58:49:13","symbolAliases":[{"foreign":{"id":836,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"66:7:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":839,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":864,"sourceUnit":982,"src":"108:84:13","symbolAliases":[{"foreign":{"id":838,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"116:25:13","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":841,"name":"IERC165","nameLocations":["425:7:13"],"nodeType":"IdentifierPath","referencedDeclaration":880,"src":"425:7:13"},"id":842,"nodeType":"InheritanceSpecifier","src":"425:7:13"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":840,"nodeType":"StructuredDocumentation","src":"194:191:13","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":863,"linearizedBaseContracts":[863,880],"name":"InterfaceDetection","nameLocation":"403:18:13","nodeType":"ContractDefinition","nodes":[{"global":false,"id":846,"libraryName":{"id":843,"name":"InterfaceDetectionStorage","nameLocations":["445:25:13"],"nodeType":"IdentifierPath","referencedDeclaration":981,"src":"445:25:13"},"nodeType":"UsingForDirective","src":"439:69:13","typeName":{"id":845,"nodeType":"UserDefinedTypeName","pathNode":{"id":844,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:13","501:6:13"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"475:32:13"},"referencedDeclaration":891,"src":"475:32:13","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[879],"body":{"id":861,"nodeType":"Block","src":"618:89:13","statements":[{"expression":{"arguments":[{"id":858,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":849,"src":"688:11:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":854,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"635:25:13","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:13","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"635:32:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":857,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:13","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":968,"src":"635:52:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":859,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":853,"id":860,"nodeType":"Return","src":"628:72:13"}]},"documentation":{"id":847,"nodeType":"StructuredDocumentation","src":"514:23:13","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":862,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:13","nodeType":"FunctionDefinition","parameters":{"id":850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":849,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:13","nodeType":"VariableDeclaration","scope":862,"src":"569:18:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":848,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:13","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:13"},"returnParameters":{"id":853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":852,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":862,"src":"612:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":851,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:13"},"scope":863,"src":"542:165:13","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":864,"src":"385:324:13","usedErrors":[],"usedEvents":[]}],"src":"32:678:13"},"id":13},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[868]},"id":869,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":865,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:14"},{"documentation":{"id":866,"nodeType":"StructuredDocumentation","src":"58:68:14","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":868,"name":"IllegalInterfaceId","nameLocation":"132:18:14","nodeType":"ErrorDefinition","parameters":{"id":867,"nodeType":"ParameterList","parameters":[],"src":"150:2:14"},"src":"126:27:14"}],"src":"32:122:14"},"id":14},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[880]},"id":881,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":870,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:15"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":871,"nodeType":"StructuredDocumentation","src":"58:173:15","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":880,"linearizedBaseContracts":[880],"name":"IERC165","nameLocation":"241:7:15","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":872,"nodeType":"StructuredDocumentation","src":"255:340:15","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":879,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:15","nodeType":"FunctionDefinition","parameters":{"id":875,"nodeType":"ParameterList","parameters":[{"constant":false,"id":874,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:15","nodeType":"VariableDeclaration","scope":879,"src":"627:18:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":873,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:15","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:15"},"returnParameters":{"id":878,"nodeType":"ParameterList","parameters":[{"constant":false,"id":877,"mutability":"mutable","name":"supported","nameLocation":"675:9:15","nodeType":"VariableDeclaration","scope":879,"src":"670:14:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":876,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:15"},"scope":880,"src":"600:86:15","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":881,"src":"231:457:15","usedErrors":[],"usedEvents":[]}],"src":"32:657:15"},"id":15},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[880],"IllegalInterfaceId":[868],"InterfaceDetectionStorage":[981]},"id":982,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":882,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:16"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":884,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":982,"sourceUnit":869,"src":"58:76:16","symbolAliases":[{"foreign":{"id":883,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"66:18:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":886,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":982,"sourceUnit":881,"src":"135:52:16","symbolAliases":[{"foreign":{"id":885,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"143:7:16","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":981,"linearizedBaseContracts":[981],"name":"InterfaceDetectionStorage","nameLocation":"197:25:16","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":891,"members":[{"constant":false,"id":890,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:16","nodeType":"VariableDeclaration","scope":891,"src":"253:43:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":889,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":887,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":888,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:16","nodeType":"StructDefinition","scope":981,"src":"229:74:16","visibility":"public"},{"constant":true,"id":904,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:16","nodeType":"VariableDeclaration","scope":981,"src":"309:136:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":892,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":902,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":897,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":895,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:16","typeDescriptions":{}}},"id":900,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":894,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":893,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:16","typeDescriptions":{}}},"id":903,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":907,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:16","nodeType":"VariableDeclaration","scope":981,"src":"452:58:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":905,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:16","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":933,"nodeType":"Block","src":"867:141:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":920,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":918,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"881:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":919,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"896:20:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":924,"nodeType":"IfStatement","src":"877:68:16","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":921,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":868,"src":"925:18:16","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":922,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":923,"nodeType":"RevertStatement","src":"918:27:16"}},{"expression":{"id":931,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":925,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":911,"src":"955:1:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":928,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:16","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":890,"src":"955:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":929,"indexExpression":{"id":927,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":913,"src":"977:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":930,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":915,"src":"992:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":932,"nodeType":"ExpressionStatement","src":"955:46:16"}]},"documentation":{"id":908,"nodeType":"StructuredDocumentation","src":"517:251:16","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":934,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:16","nodeType":"FunctionDefinition","parameters":{"id":916,"nodeType":"ParameterList","parameters":[{"constant":false,"id":911,"mutability":"mutable","name":"s","nameLocation":"819:1:16","nodeType":"VariableDeclaration","scope":934,"src":"804:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":910,"nodeType":"UserDefinedTypeName","pathNode":{"id":909,"name":"Layout","nameLocations":["804:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"804:6:16"},"referencedDeclaration":891,"src":"804:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":913,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:16","nodeType":"VariableDeclaration","scope":934,"src":"822:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":912,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":915,"mutability":"mutable","name":"supported","nameLocation":"847:9:16","nodeType":"VariableDeclaration","scope":934,"src":"842:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":914,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:16"},"returnParameters":{"id":917,"nodeType":"ParameterList","parameters":[],"src":"867:0:16"},"scope":981,"src":"773:235:16","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":967,"nodeType":"Block","src":"1463:236:16","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":947,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":945,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"1477:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":946,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":907,"src":"1492:20:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":951,"nodeType":"IfStatement","src":"1473:78:16","trueBody":{"id":950,"nodeType":"Block","src":"1514:37:16","statements":[{"expression":{"hexValue":"66616c7365","id":948,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":944,"id":949,"nodeType":"Return","src":"1528:12:16"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":957,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":952,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"1564:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":954,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"1584:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$880_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$880_$","typeString":"type(contract IERC165)"}],"id":953,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:16","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":955,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$880","typeString":"type(contract IERC165)"}},"id":956,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:16","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":961,"nodeType":"IfStatement","src":"1560:82:16","trueBody":{"id":960,"nodeType":"Block","src":"1606:36:16","statements":[{"expression":{"hexValue":"74727565","id":958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":944,"id":959,"nodeType":"Return","src":"1620:11:16"}]}},{"expression":{"baseExpression":{"expression":{"id":962,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":938,"src":"1658:1:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":963,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:16","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":890,"src":"1658:21:16","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":965,"indexExpression":{"id":964,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"1680:11:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":944,"id":966,"nodeType":"Return","src":"1651:41:16"}]},"documentation":{"id":935,"nodeType":"StructuredDocumentation","src":"1014:340:16","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":968,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:16","nodeType":"FunctionDefinition","parameters":{"id":941,"nodeType":"ParameterList","parameters":[{"constant":false,"id":938,"mutability":"mutable","name":"s","nameLocation":"1401:1:16","nodeType":"VariableDeclaration","scope":968,"src":"1386:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":937,"nodeType":"UserDefinedTypeName","pathNode":{"id":936,"name":"Layout","nameLocations":["1386:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1386:6:16"},"referencedDeclaration":891,"src":"1386:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":940,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:16","nodeType":"VariableDeclaration","scope":968,"src":"1404:18:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":939,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:16","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:16"},"returnParameters":{"id":944,"nodeType":"ParameterList","parameters":[{"constant":false,"id":943,"mutability":"mutable","name":"supported","nameLocation":"1452:9:16","nodeType":"VariableDeclaration","scope":968,"src":"1447:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":942,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:16"},"scope":981,"src":"1359:340:16","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":979,"nodeType":"Block","src":"1764:115:16","statements":[{"assignments":[975],"declarations":[{"constant":false,"id":975,"mutability":"mutable","name":"position","nameLocation":"1782:8:16","nodeType":"VariableDeclaration","scope":979,"src":"1774:16:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":977,"initialValue":{"id":976,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":904,"src":"1793:19:16","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:16"},{"AST":{"nativeSrc":"1831:42:16","nodeType":"YulBlock","src":"1831:42:16","statements":[{"nativeSrc":"1845:18:16","nodeType":"YulAssignment","src":"1845:18:16","value":{"name":"position","nativeSrc":"1855:8:16","nodeType":"YulIdentifier","src":"1855:8:16"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:16","nodeType":"YulIdentifier","src":"1845:6:16"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":975,"isOffset":false,"isSlot":false,"src":"1855:8:16","valueSize":1},{"declaration":972,"isOffset":false,"isSlot":true,"src":"1845:6:16","suffix":"slot","valueSize":1}],"id":978,"nodeType":"InlineAssembly","src":"1822:51:16"}]},"id":980,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:16","nodeType":"FunctionDefinition","parameters":{"id":969,"nodeType":"ParameterList","parameters":[],"src":"1720:2:16"},"returnParameters":{"id":973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":972,"mutability":"mutable","name":"s","nameLocation":"1761:1:16","nodeType":"VariableDeclaration","scope":980,"src":"1746:16:16","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":971,"nodeType":"UserDefinedTypeName","pathNode":{"id":970,"name":"Layout","nameLocations":["1746:6:16"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1746:6:16"},"referencedDeclaration":891,"src":"1746:6:16","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:16"},"scope":981,"src":"1705:174:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":982,"src":"189:1692:16","usedErrors":[],"usedEvents":[]}],"src":"32:1850:16"},"id":16},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","exportedSymbols":{"ForwarderRegistryContext":[1030],"ForwarderRegistryContextBase":[1150],"IERC2771":[1162],"IForwarderRegistry":[1176]},"id":1031,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":983,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:17"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./interfaces/IForwarderRegistry.sol","id":985,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1031,"sourceUnit":1177,"src":"58:71:17","symbolAliases":[{"foreign":{"id":984,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"66:18:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","file":"./interfaces/IERC2771.sol","id":987,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1031,"sourceUnit":1163,"src":"130:51:17","symbolAliases":[{"foreign":{"id":986,"name":"IERC2771","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"138:8:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"./base/ForwarderRegistryContextBase.sol","id":989,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1031,"sourceUnit":1151,"src":"182:85:17","symbolAliases":[{"foreign":{"id":988,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"190:28:17","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":991,"name":"ForwarderRegistryContextBase","nameLocations":["575:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":1150,"src":"575:28:17"},"id":992,"nodeType":"InheritanceSpecifier","src":"575:28:17"},{"baseName":{"id":993,"name":"IERC2771","nameLocations":["605:8:17"],"nodeType":"IdentifierPath","referencedDeclaration":1162,"src":"605:8:17"},"id":994,"nodeType":"InheritanceSpecifier","src":"605:8:17"}],"canonicalName":"ForwarderRegistryContext","contractDependencies":[],"contractKind":"contract","documentation":{"id":990,"nodeType":"StructuredDocumentation","src":"269:260:17","text":"@title Meta-Transactions Forwarder Registry Context (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1030,"linearizedBaseContracts":[1030,1162,1150],"name":"ForwarderRegistryContext","nameLocation":"547:24:17","nodeType":"ContractDefinition","nodes":[{"body":{"id":1003,"nodeType":"Block","src":"720:2:17","statements":[]},"id":1004,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":1000,"name":"forwarderRegistry_","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":997,"src":"700:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"id":1001,"kind":"baseConstructorSpecifier","modifierName":{"id":999,"name":"ForwarderRegistryContextBase","nameLocations":["671:28:17"],"nodeType":"IdentifierPath","referencedDeclaration":1150,"src":"671:28:17"},"nodeType":"ModifierInvocation","src":"671:48:17"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"forwarderRegistry_","nameLocation":"651:18:17","nodeType":"VariableDeclaration","scope":1004,"src":"632:37:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":996,"nodeType":"UserDefinedTypeName","pathNode":{"id":995,"name":"IForwarderRegistry","nameLocations":["632:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"632:18:17"},"referencedDeclaration":1176,"src":"632:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"631:39:17"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[],"src":"720:0:17"},"scope":1030,"src":"620:102:17","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1012,"nodeType":"Block","src":"800:43:17","statements":[{"expression":{"id":1010,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"817:19:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"functionReturnParameters":1009,"id":1011,"nodeType":"Return","src":"810:26:17"}]},"functionSelector":"2b4c9f16","id":1013,"implemented":true,"kind":"function","modifiers":[],"name":"forwarderRegistry","nameLocation":"737:17:17","nodeType":"FunctionDefinition","parameters":{"id":1005,"nodeType":"ParameterList","parameters":[],"src":"754:2:17"},"returnParameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1013,"src":"780:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":1007,"nodeType":"UserDefinedTypeName","pathNode":{"id":1006,"name":"IForwarderRegistry","nameLocations":["780:18:17"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"780:18:17"},"referencedDeclaration":1176,"src":"780:18:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"779:20:17"},"scope":1030,"src":"728:115:17","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[1161],"body":{"id":1028,"nodeType":"Block","src":"962:65:17","statements":[{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1026,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1021,"name":"forwarder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1016,"src":"979:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1024,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1000:19:17","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}],"id":1023,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"992:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1022,"name":"address","nodeType":"ElementaryTypeName","src":"992:7:17","typeDescriptions":{}}},"id":1025,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"992:28:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"979:41:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1020,"id":1027,"nodeType":"Return","src":"972:48:17"}]},"documentation":{"id":1014,"nodeType":"StructuredDocumentation","src":"849:24:17","text":"@inheritdoc IERC2771"},"functionSelector":"572b6c05","id":1029,"implemented":true,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"887:18:17","nodeType":"FunctionDefinition","parameters":{"id":1017,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1016,"mutability":"mutable","name":"forwarder","nameLocation":"914:9:17","nodeType":"VariableDeclaration","scope":1029,"src":"906:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1015,"name":"address","nodeType":"ElementaryTypeName","src":"906:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"905:19:17"},"returnParameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1029,"src":"956:4:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1018,"name":"bool","nodeType":"ElementaryTypeName","src":"956:4:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"955:6:17"},"scope":1030,"src":"878:149:17","stateMutability":"view","virtual":true,"visibility":"external"}],"scope":1031,"src":"529:500:17","usedErrors":[],"usedEvents":[]}],"src":"32:998:17"},"id":17},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","exportedSymbols":{"ERC2771Calldata":[1205],"ForwarderRegistryContextBase":[1150],"IForwarderRegistry":[1176]},"id":1151,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1032,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:18"},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"./../interfaces/IForwarderRegistry.sol","id":1034,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1151,"sourceUnit":1177,"src":"58:74:18","symbolAliases":[{"foreign":{"id":1033,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"66:18:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","file":"./../libraries/ERC2771Calldata.sol","id":1036,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1151,"sourceUnit":1206,"src":"133:67:18","symbolAliases":[{"foreign":{"id":1035,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"141:15:18","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[],"canonicalName":"ForwarderRegistryContextBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1037,"nodeType":"StructuredDocumentation","src":"202:243:18","text":"@title Meta-Transactions Forwarder Registry Context (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":true,"id":1150,"linearizedBaseContracts":[1150],"name":"ForwarderRegistryContextBase","nameLocation":"463:28:18","nodeType":"ContractDefinition","nodes":[{"constant":false,"id":1040,"mutability":"immutable","name":"_FORWARDER_REGISTRY","nameLocation":"536:19:18","nodeType":"VariableDeclaration","scope":1150,"src":"498:57:18","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":1039,"nodeType":"UserDefinedTypeName","pathNode":{"id":1038,"name":"IForwarderRegistry","nameLocations":["498:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"498:18:18"},"referencedDeclaration":1176,"src":"498:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"},{"body":{"id":1050,"nodeType":"Block","src":"612:56:18","statements":[{"expression":{"id":1048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1046,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"622:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1047,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1043,"src":"644:17:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"src":"622:39:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"id":1049,"nodeType":"ExpressionStatement","src":"622:39:18"}]},"id":1051,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1043,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"593:17:18","nodeType":"VariableDeclaration","scope":1051,"src":"574:36:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":1042,"nodeType":"UserDefinedTypeName","pathNode":{"id":1041,"name":"IForwarderRegistry","nameLocations":["574:18:18"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"574:18:18"},"referencedDeclaration":1176,"src":"574:18:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"573:38:18"},"returnParameters":{"id":1045,"nodeType":"ParameterList","parameters":[],"src":"612:0:18"},"scope":1150,"src":"562:106:18","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1100,"nodeType":"Block","src":"846:683:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1057,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1047:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1058,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1051:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1047:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1059,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1061:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1064:6:18","memberName":"origin","nodeType":"MemberAccess","src":"1061:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1047:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1066,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1062,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1074:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1063,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1078:4:18","memberName":"data","nodeType":"MemberAccess","src":"1074:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1064,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1083:6:18","memberName":"length","nodeType":"MemberAccess","src":"1074:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1065,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1092:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1074:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1047:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1072,"nodeType":"IfStatement","src":"1043:95:18","trueBody":{"id":1071,"nodeType":"Block","src":"1096:42:18","statements":[{"expression":{"expression":{"id":1068,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1117:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1069,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1121:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1117:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1056,"id":1070,"nodeType":"Return","src":"1110:17:18"}]}},{"assignments":[1074],"declarations":[{"constant":false,"id":1074,"mutability":"mutable","name":"sender","nameLocation":"1156:6:18","nodeType":"VariableDeclaration","scope":1100,"src":"1148:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1073,"name":"address","nodeType":"ElementaryTypeName","src":"1148:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1078,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1075,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"1165:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1205_$","typeString":"type(library ERC2771Calldata)"}},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1181:9:18","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"1165:25:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1077,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1165:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"1148:44:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1079,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1350:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1354:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1350:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1083,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1372:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}],"id":1082,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1364:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1081,"name":"address","nodeType":"ElementaryTypeName","src":"1364:7:18","typeDescriptions":{}}},"id":1084,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1364:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1350:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":1088,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"1436:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1089,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1444:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1090,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1448:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1444:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1086,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"1396:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"id":1087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1416:19:18","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"1396:39:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1396:59:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1350:105:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1096,"nodeType":"IfStatement","src":"1346:149:18","trueBody":{"id":1095,"nodeType":"Block","src":"1457:38:18","statements":[{"expression":{"id":1093,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1074,"src":"1478:6:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1056,"id":1094,"nodeType":"Return","src":"1471:13:18"}]}},{"expression":{"expression":{"id":1097,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1512:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1098,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1516:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1512:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1056,"id":1099,"nodeType":"Return","src":"1505:17:18"}]},"documentation":{"id":1052,"nodeType":"StructuredDocumentation","src":"674:105:18","text":"@notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context."},"id":1101,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"793:10:18","nodeType":"FunctionDefinition","parameters":{"id":1053,"nodeType":"ParameterList","parameters":[],"src":"803:2:18"},"returnParameters":{"id":1056,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1055,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1101,"src":"837:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1054,"name":"address","nodeType":"ElementaryTypeName","src":"837:7:18","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"836:9:18"},"scope":1150,"src":"784:745:18","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":1148,"nodeType":"Block","src":"1710:668:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1117,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1111,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1107,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1911:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1108,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1915:6:18","memberName":"sender","nodeType":"MemberAccess","src":"1911:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1109,"name":"tx","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-26,"src":"1925:2:18","typeDescriptions":{"typeIdentifier":"t_magic_transaction","typeString":"tx"}},"id":1110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1928:6:18","memberName":"origin","nodeType":"MemberAccess","src":"1925:9:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1911:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1116,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1112,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1938:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1113,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1942:4:18","memberName":"data","nodeType":"MemberAccess","src":"1938:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1114,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1947:6:18","memberName":"length","nodeType":"MemberAccess","src":"1938:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"3234","id":1115,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1956:2:18","typeDescriptions":{"typeIdentifier":"t_rational_24_by_1","typeString":"int_const 24"},"value":"24"},"src":"1938:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"1911:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1122,"nodeType":"IfStatement","src":"1907:93:18","trueBody":{"id":1121,"nodeType":"Block","src":"1960:40:18","statements":[{"expression":{"expression":{"id":1118,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1981:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1985:4:18","memberName":"data","nodeType":"MemberAccess","src":"1981:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1106,"id":1120,"nodeType":"Return","src":"1974:15:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1138,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1123,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2161:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1124,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2161:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"id":1127,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"2183:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}],"id":1126,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:18","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1125,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:18","typeDescriptions":{}}},"id":1128,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:28:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2161:42:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1132,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"2247:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1205_$","typeString":"type(library ERC2771Calldata)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2263:9:18","memberName":"msgSender","nodeType":"MemberAccess","referencedDeclaration":1187,"src":"2247:25:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_address_$","typeString":"function () pure returns (address)"}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2247:27:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1135,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2276:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1136,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2280:6:18","memberName":"sender","nodeType":"MemberAccess","src":"2276:10:18","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":1130,"name":"_FORWARDER_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1040,"src":"2207:19:18","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2227:19:18","memberName":"isApprovedForwarder","nodeType":"MemberAccess","referencedDeclaration":1175,"src":"2207:39:18","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view external returns (bool)"}},"id":1137,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2207:80:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2161:126:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1144,"nodeType":"IfStatement","src":"2157:189:18","trueBody":{"id":1143,"nodeType":"Block","src":"2289:57:18","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1139,"name":"ERC2771Calldata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1205,"src":"2310:15:18","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC2771Calldata_$1205_$","typeString":"type(library ERC2771Calldata)"}},"id":1140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2326:7:18","memberName":"msgData","nodeType":"MemberAccess","referencedDeclaration":1204,"src":"2310:23:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () pure returns (bytes calldata)"}},"id":1141,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2310:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1106,"id":1142,"nodeType":"Return","src":"2303:32:18"}]}},{"expression":{"expression":{"id":1145,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"2363:3:18","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1146,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2367:4:18","memberName":"data","nodeType":"MemberAccess","src":"2363:8:18","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":1106,"id":1147,"nodeType":"Return","src":"2356:15:18"}]},"documentation":{"id":1102,"nodeType":"StructuredDocumentation","src":"1535:103:18","text":"@notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context."},"id":1149,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"1652:8:18","nodeType":"FunctionDefinition","parameters":{"id":1103,"nodeType":"ParameterList","parameters":[],"src":"1660:2:18"},"returnParameters":{"id":1106,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1105,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1149,"src":"1694:14:18","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1104,"name":"bytes","nodeType":"ElementaryTypeName","src":"1694:5:18","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1693:16:18"},"scope":1150,"src":"1643:735:18","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":1151,"src":"445:1935:18","usedErrors":[],"usedEvents":[]}],"src":"32:2349:18"},"id":18},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol","exportedSymbols":{"IERC2771":[1162]},"id":1163,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1152,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:19"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC2771","contractDependencies":[],"contractKind":"interface","documentation":{"id":1153,"nodeType":"StructuredDocumentation","src":"58:110:19","text":"@title Secure Protocol for Native Meta Transactions.\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":false,"id":1162,"linearizedBaseContracts":[1162],"name":"IERC2771","nameLocation":"178:8:19","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1154,"nodeType":"StructuredDocumentation","src":"193:171:19","text":"@notice Checks whether a forwarder is trusted.\n @param forwarder The forwarder to check.\n @return isTrusted True if `forwarder` is trusted, false if not."},"functionSelector":"572b6c05","id":1161,"implemented":false,"kind":"function","modifiers":[],"name":"isTrustedForwarder","nameLocation":"378:18:19","nodeType":"FunctionDefinition","parameters":{"id":1157,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1156,"mutability":"mutable","name":"forwarder","nameLocation":"405:9:19","nodeType":"VariableDeclaration","scope":1161,"src":"397:17:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1155,"name":"address","nodeType":"ElementaryTypeName","src":"397:7:19","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"396:19:19"},"returnParameters":{"id":1160,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1159,"mutability":"mutable","name":"isTrusted","nameLocation":"444:9:19","nodeType":"VariableDeclaration","scope":1161,"src":"439:14:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1158,"name":"bool","nodeType":"ElementaryTypeName","src":"439:4:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"438:16:19"},"scope":1162,"src":"369:86:19","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1163,"src":"168:289:19","usedErrors":[],"usedEvents":[]}],"src":"32:426:19"},"id":19},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","exportedSymbols":{"IForwarderRegistry":[1176]},"id":1177,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1164,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:20"},{"abstract":false,"baseContracts":[],"canonicalName":"IForwarderRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":1165,"nodeType":"StructuredDocumentation","src":"58:143:20","text":"@title Universal Meta-Transactions Forwarder Registry.\n @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)"},"fullyImplemented":false,"id":1176,"linearizedBaseContracts":[1176],"name":"IForwarderRegistry","nameLocation":"211:18:20","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1166,"nodeType":"StructuredDocumentation","src":"236:314:20","text":"@notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\n @param sender The sender account.\n @param forwarder The forwarder account.\n @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."},"functionSelector":"8929a8ca","id":1175,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForwarder","nameLocation":"564:19:20","nodeType":"FunctionDefinition","parameters":{"id":1171,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1168,"mutability":"mutable","name":"sender","nameLocation":"592:6:20","nodeType":"VariableDeclaration","scope":1175,"src":"584:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1167,"name":"address","nodeType":"ElementaryTypeName","src":"584:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1170,"mutability":"mutable","name":"forwarder","nameLocation":"608:9:20","nodeType":"VariableDeclaration","scope":1175,"src":"600:17:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1169,"name":"address","nodeType":"ElementaryTypeName","src":"600:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"583:35:20"},"returnParameters":{"id":1174,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1173,"mutability":"mutable","name":"isApproved","nameLocation":"647:10:20","nodeType":"VariableDeclaration","scope":1175,"src":"642:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1172,"name":"bool","nodeType":"ElementaryTypeName","src":"642:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"641:17:20"},"scope":1176,"src":"555:104:20","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1177,"src":"201:460:20","usedErrors":[],"usedEvents":[]}],"src":"32:630:20"},"id":20},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol","exportedSymbols":{"ERC2771Calldata":[1205]},"id":1206,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1178,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:21"},{"abstract":false,"baseContracts":[],"canonicalName":"ERC2771Calldata","contractDependencies":[],"contractKind":"library","documentation":{"id":1179,"nodeType":"StructuredDocumentation","src":"58:144:21","text":"@dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\n @dev See https://eips.ethereum.org/EIPS/eip-2771"},"fullyImplemented":true,"id":1205,"linearizedBaseContracts":[1205],"name":"ERC2771Calldata","nameLocation":"210:15:21","nodeType":"ContractDefinition","nodes":[{"body":{"id":1186,"nodeType":"Block","src":"398:105:21","statements":[{"AST":{"nativeSrc":"417:80:21","nodeType":"YulBlock","src":"417:80:21","statements":[{"nativeSrc":"431:56:21","nodeType":"YulAssignment","src":"431:56:21","value":{"arguments":[{"kind":"number","nativeSrc":"445:2:21","nodeType":"YulLiteral","src":"445:2:21","type":"","value":"96"},{"arguments":[{"arguments":[{"arguments":[],"functionName":{"name":"calldatasize","nativeSrc":"466:12:21","nodeType":"YulIdentifier","src":"466:12:21"},"nativeSrc":"466:14:21","nodeType":"YulFunctionCall","src":"466:14:21"},{"kind":"number","nativeSrc":"482:2:21","nodeType":"YulLiteral","src":"482:2:21","type":"","value":"20"}],"functionName":{"name":"sub","nativeSrc":"462:3:21","nodeType":"YulIdentifier","src":"462:3:21"},"nativeSrc":"462:23:21","nodeType":"YulFunctionCall","src":"462:23:21"}],"functionName":{"name":"calldataload","nativeSrc":"449:12:21","nodeType":"YulIdentifier","src":"449:12:21"},"nativeSrc":"449:37:21","nodeType":"YulFunctionCall","src":"449:37:21"}],"functionName":{"name":"shr","nativeSrc":"441:3:21","nodeType":"YulIdentifier","src":"441:3:21"},"nativeSrc":"441:46:21","nodeType":"YulFunctionCall","src":"441:46:21"},"variableNames":[{"name":"sender","nativeSrc":"431:6:21","nodeType":"YulIdentifier","src":"431:6:21"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":1183,"isOffset":false,"isSlot":false,"src":"431:6:21","valueSize":1}],"id":1185,"nodeType":"InlineAssembly","src":"408:89:21"}]},"documentation":{"id":1180,"nodeType":"StructuredDocumentation","src":"232:101:21","text":"@notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771."},"id":1187,"implemented":true,"kind":"function","modifiers":[],"name":"msgSender","nameLocation":"347:9:21","nodeType":"FunctionDefinition","parameters":{"id":1181,"nodeType":"ParameterList","parameters":[],"src":"356:2:21"},"returnParameters":{"id":1184,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1183,"mutability":"mutable","name":"sender","nameLocation":"390:6:21","nodeType":"VariableDeclaration","scope":1187,"src":"382:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1182,"name":"address","nodeType":"ElementaryTypeName","src":"382:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"381:16:21"},"scope":1205,"src":"338:165:21","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1203,"nodeType":"Block","src":"679:89:21","statements":[{"id":1202,"nodeType":"UncheckedBlock","src":"689:73:21","statements":[{"expression":{"baseExpression":{"expression":{"id":1193,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"720:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"724:4:21","memberName":"data","nodeType":"MemberAccess","src":"720:8:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"endExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":1195,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"730:3:21","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"734:4:21","memberName":"data","nodeType":"MemberAccess","src":"730:8:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"id":1197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"739:6:21","memberName":"length","nodeType":"MemberAccess","src":"730:15:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"3230","id":1198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"748:2:21","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"src":"730:20:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexRangeAccess","src":"720:31:21","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr_slice","typeString":"bytes calldata slice"}},"functionReturnParameters":1192,"id":1201,"nodeType":"Return","src":"713:38:21"}]}]},"documentation":{"id":1188,"nodeType":"StructuredDocumentation","src":"509:102:21","text":"@notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771."},"id":1204,"implemented":true,"kind":"function","modifiers":[],"name":"msgData","nameLocation":"625:7:21","nodeType":"FunctionDefinition","parameters":{"id":1189,"nodeType":"ParameterList","parameters":[],"src":"632:2:21"},"returnParameters":{"id":1192,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1191,"mutability":"mutable","name":"data","nameLocation":"673:4:21","nodeType":"VariableDeclaration","scope":1204,"src":"658:19:21","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":1190,"name":"bytes","nodeType":"ElementaryTypeName","src":"658:5:21","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"657:21:21"},"scope":1205,"src":"616:152:21","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1206,"src":"202:568:21","usedErrors":[],"usedEvents":[]}],"src":"32:739:21"},"id":21},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","exportedSymbols":{"ContractOwnership":[52],"PayoutWallet":[1238],"PayoutWalletBase":[1299],"PayoutWalletStorage":[1465]},"id":1239,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1207,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:22"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"./libraries/PayoutWalletStorage.sol","id":1209,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1239,"sourceUnit":1466,"src":"58:72:22","symbolAliases":[{"foreign":{"id":1208,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"66:19:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol","file":"./base/PayoutWalletBase.sol","id":1211,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1239,"sourceUnit":1300,"src":"131:61:22","symbolAliases":[{"foreign":{"id":1210,"name":"PayoutWalletBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1299,"src":"139:16:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"../access/ContractOwnership.sol","id":1213,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1239,"sourceUnit":53,"src":"193:66:22","symbolAliases":[{"foreign":{"id":1212,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"201:17:22","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1215,"name":"PayoutWalletBase","nameLocations":["440:16:22"],"nodeType":"IdentifierPath","referencedDeclaration":1299,"src":"440:16:22"},"id":1216,"nodeType":"InheritanceSpecifier","src":"440:16:22"},{"baseName":{"id":1217,"name":"ContractOwnership","nameLocations":["458:17:22"],"nodeType":"IdentifierPath","referencedDeclaration":52,"src":"458:17:22"},"id":1218,"nodeType":"InheritanceSpecifier","src":"458:17:22"}],"canonicalName":"PayoutWallet","contractDependencies":[],"contractKind":"contract","documentation":{"id":1214,"nodeType":"StructuredDocumentation","src":"261:145:22","text":"@title Payout wallet (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1238,"linearizedBaseContracts":[1238,52,863,880,224,1299,4613,333,289,1327,1313],"name":"PayoutWallet","nameLocation":"424:12:22","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1222,"libraryName":{"id":1219,"name":"PayoutWalletStorage","nameLocations":["488:19:22"],"nodeType":"IdentifierPath","referencedDeclaration":1465,"src":"488:19:22"},"nodeType":"UsingForDirective","src":"482:57:22","typeName":{"id":1221,"nodeType":"UserDefinedTypeName","pathNode":{"id":1220,"name":"PayoutWalletStorage.Layout","nameLocations":["512:19:22","532:6:22"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"512:26:22"},"referencedDeclaration":1342,"src":"512:26:22","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"body":{"id":1236,"nodeType":"Block","src":"871:82:22","statements":[{"expression":{"arguments":[{"id":1233,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1225,"src":"926:19:22","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1228,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"881:19:22","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$1465_$","typeString":"type(library PayoutWalletStorage)"}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"901:6:22","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1464,"src":"881:26:22","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":1231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:28:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1232,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"910:15:22","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":1384,"src":"881:44:22","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1342_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":1234,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"881:65:22","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1235,"nodeType":"ExpressionStatement","src":"881:65:22"}]},"documentation":{"id":1223,"nodeType":"StructuredDocumentation","src":"545:272:22","text":"@notice Initializes the storage with an initial payout wallet.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":1237,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1225,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"850:19:22","nodeType":"VariableDeclaration","scope":1237,"src":"834:35:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1224,"name":"address","nodeType":"ElementaryTypeName","src":"834:15:22","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"833:37:22"},"returnParameters":{"id":1227,"nodeType":"ParameterList","parameters":[],"src":"871:0:22"},"scope":1238,"src":"822:131:22","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1239,"src":"406:549:22","usedErrors":[249,868,1304],"usedEvents":[288,1312]}],"src":"32:924:22"},"id":22},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol","exportedSymbols":{"Context":[4613],"ContractOwnershipStorage":[833],"IPayoutWallet":[1327],"PayoutWalletBase":[1299],"PayoutWalletStorage":[1465]},"id":1300,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1240,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:23"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol","file":"./../interfaces/IPayoutWallet.sol","id":1242,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1300,"sourceUnit":1328,"src":"58:64:23","symbolAliases":[{"foreign":{"id":1241,"name":"IPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1327,"src":"66:13:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":1244,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1300,"sourceUnit":834,"src":"123:95:23","symbolAliases":[{"foreign":{"id":1243,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"131:24:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"./../libraries/PayoutWalletStorage.sol","id":1246,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1300,"sourceUnit":1466,"src":"219:75:23","symbolAliases":[{"foreign":{"id":1245,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"227:19:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1248,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1300,"sourceUnit":4614,"src":"295:66:23","symbolAliases":[{"foreign":{"id":1247,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"303:7:23","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1250,"name":"IPayoutWallet","nameLocations":["605:13:23"],"nodeType":"IdentifierPath","referencedDeclaration":1327,"src":"605:13:23"},"id":1251,"nodeType":"InheritanceSpecifier","src":"605:13:23"},{"baseName":{"id":1252,"name":"Context","nameLocations":["620:7:23"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"620:7:23"},"id":1253,"nodeType":"InheritanceSpecifier","src":"620:7:23"}],"canonicalName":"PayoutWalletBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1249,"nodeType":"StructuredDocumentation","src":"363:204:23","text":"@title Payout wallet (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1299,"linearizedBaseContracts":[1299,4613,1327,1313],"name":"PayoutWalletBase","nameLocation":"585:16:23","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1257,"libraryName":{"id":1254,"name":"ContractOwnershipStorage","nameLocations":["640:24:23"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"640:24:23"},"nodeType":"UsingForDirective","src":"634:67:23","typeName":{"id":1256,"nodeType":"UserDefinedTypeName","pathNode":{"id":1255,"name":"ContractOwnershipStorage.Layout","nameLocations":["669:24:23","694:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"669:31:23"},"referencedDeclaration":610,"src":"669:31:23","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":1261,"libraryName":{"id":1258,"name":"PayoutWalletStorage","nameLocations":["712:19:23"],"nodeType":"IdentifierPath","referencedDeclaration":1465,"src":"712:19:23"},"nodeType":"UsingForDirective","src":"706:57:23","typeName":{"id":1260,"nodeType":"UserDefinedTypeName","pathNode":{"id":1259,"name":"PayoutWalletStorage.Layout","nameLocations":["736:19:23","756:6:23"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"736:26:23"},"referencedDeclaration":1342,"src":"736:26:23","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"body":{"id":1284,"nodeType":"Block","src":"1152:158:23","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1272,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"1219:10:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:12:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1267,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"1162:24:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1187:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"1162:31:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:33:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1196:22:23","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"1162:56:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1162:70:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1275,"nodeType":"ExpressionStatement","src":"1162:70:23"},{"expression":{"arguments":[{"id":1281,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1264,"src":"1287:15:23","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1276,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"1242:19:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$1465_$","typeString":"type(library PayoutWalletStorage)"}},"id":1278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1262:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1464,"src":"1242:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":1279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1242:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1271:15:23","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":1439,"src":"1242:44:23","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1342_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":1282,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1242:61:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1283,"nodeType":"ExpressionStatement","src":"1242:61:23"}]},"documentation":{"id":1262,"nodeType":"StructuredDocumentation","src":"769:311:23","text":"@notice Sets the payout wallet.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param newPayoutWallet The payout wallet."},"functionSelector":"6b8f9c43","id":1285,"implemented":true,"kind":"function","modifiers":[],"name":"setPayoutWallet","nameLocation":"1094:15:23","nodeType":"FunctionDefinition","parameters":{"id":1265,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1264,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"1126:15:23","nodeType":"VariableDeclaration","scope":1285,"src":"1110:31:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1263,"name":"address","nodeType":"ElementaryTypeName","src":"1110:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1109:33:23"},"returnParameters":{"id":1266,"nodeType":"ParameterList","parameters":[],"src":"1152:0:23"},"scope":1299,"src":"1085:225:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1326],"body":{"id":1297,"nodeType":"Block","src":"1469:67:23","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1291,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"1486:19:23","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$1465_$","typeString":"type(library PayoutWalletStorage)"}},"id":1292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1506:6:23","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1464,"src":"1486:26:23","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":1293,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:28:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1294,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1515:12:23","memberName":"payoutWallet","nodeType":"MemberAccess","referencedDeclaration":1452,"src":"1486:41:23","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1342_storage_ptr_$returns$_t_address_payable_$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer) view returns (address payable)"}},"id":1295,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1486:43:23","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":1290,"id":1296,"nodeType":"Return","src":"1479:50:23"}]},"documentation":{"id":1286,"nodeType":"StructuredDocumentation","src":"1316:77:23","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"functionSelector":"8488bb4e","id":1298,"implemented":true,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"1407:12:23","nodeType":"FunctionDefinition","parameters":{"id":1287,"nodeType":"ParameterList","parameters":[],"src":"1419:2:23"},"returnParameters":{"id":1290,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1289,"mutability":"mutable","name":"wallet","nameLocation":"1461:6:23","nodeType":"VariableDeclaration","scope":1298,"src":"1445:22:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1288,"name":"address","nodeType":"ElementaryTypeName","src":"1445:15:23","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1444:24:23"},"scope":1299,"src":"1398:138:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1300,"src":"567:971:23","usedErrors":[249,1304],"usedEvents":[1312]}],"src":"32:1507:23"},"id":23},"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol","exportedSymbols":{"ZeroAddressPayoutWallet":[1304]},"id":1305,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1301,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:24"},{"documentation":{"id":1302,"nodeType":"StructuredDocumentation","src":"58:71:24","text":"@notice Thrown when setting the zero address as the payout wallet."},"errorSelector":"40b539cf","id":1304,"name":"ZeroAddressPayoutWallet","nameLocation":"135:23:24","nodeType":"ErrorDefinition","parameters":{"id":1303,"nodeType":"ParameterList","parameters":[],"src":"158:2:24"},"src":"129:32:24"}],"src":"32:130:24"},"id":24},"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol","exportedSymbols":{"IPayoutWalletEvents":[1313]},"id":1314,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1306,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:25"},{"abstract":false,"baseContracts":[],"canonicalName":"IPayoutWalletEvents","contractDependencies":[],"contractKind":"interface","documentation":{"id":1307,"nodeType":"StructuredDocumentation","src":"58:34:25","text":"@title Payout wallet (events)"},"fullyImplemented":true,"id":1313,"linearizedBaseContracts":[1313],"name":"IPayoutWalletEvents","nameLocation":"102:19:25","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1308,"nodeType":"StructuredDocumentation","src":"128:118:25","text":"@notice Emitted when the payout wallet address changes.\n @param payoutWallet the new payout wallet address."},"eventSelector":"dd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f855","id":1312,"name":"PayoutWalletSet","nameLocation":"257:15:25","nodeType":"EventDefinition","parameters":{"id":1311,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1310,"indexed":false,"mutability":"mutable","name":"payoutWallet","nameLocation":"281:12:25","nodeType":"VariableDeclaration","scope":1312,"src":"273:20:25","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1309,"name":"address","nodeType":"ElementaryTypeName","src":"273:7:25","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"272:22:25"},"src":"251:44:25"}],"scope":1314,"src":"92:205:25","usedErrors":[],"usedEvents":[1312]}],"src":"32:266:25"},"id":25},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol","exportedSymbols":{"IPayoutWallet":[1327],"IPayoutWalletEvents":[1313]},"id":1328,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1315,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:26"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol","file":"./../events/IPayoutWalletEvents.sol","id":1317,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1328,"sourceUnit":1314,"src":"58:72:26","symbolAliases":[{"foreign":{"id":1316,"name":"IPayoutWalletEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"66:19:26","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1319,"name":"IPayoutWalletEvents","nameLocations":["196:19:26"],"nodeType":"IdentifierPath","referencedDeclaration":1313,"src":"196:19:26"},"id":1320,"nodeType":"InheritanceSpecifier","src":"196:19:26"}],"canonicalName":"IPayoutWallet","contractDependencies":[],"contractKind":"interface","documentation":{"id":1318,"nodeType":"StructuredDocumentation","src":"132:37:26","text":"@title Payout wallet (functions)"},"fullyImplemented":false,"id":1327,"linearizedBaseContracts":[1327,1313],"name":"IPayoutWallet","nameLocation":"179:13:26","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1321,"nodeType":"StructuredDocumentation","src":"222:77:26","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"functionSelector":"8488bb4e","id":1326,"implemented":false,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"313:12:26","nodeType":"FunctionDefinition","parameters":{"id":1322,"nodeType":"ParameterList","parameters":[],"src":"325:2:26"},"returnParameters":{"id":1325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1324,"mutability":"mutable","name":"wallet","nameLocation":"367:6:26","nodeType":"VariableDeclaration","scope":1326,"src":"351:22:26","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1323,"name":"address","nodeType":"ElementaryTypeName","src":"351:15:26","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"350:24:26"},"scope":1327,"src":"304:71:26","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1328,"src":"169:208:26","usedErrors":[],"usedEvents":[1312]}],"src":"32:346:26"},"id":26},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","exportedSymbols":{"IPayoutWalletEvents":[1313],"PayoutWalletStorage":[1465],"ProxyInitialization":[1521],"ZeroAddressPayoutWallet":[1304]},"id":1466,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1329,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:27"},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol","file":"./../errors/PayoutWalletErrors.sol","id":1331,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1466,"sourceUnit":1305,"src":"58:75:27","symbolAliases":[{"foreign":{"id":1330,"name":"ZeroAddressPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"66:23:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol","file":"./../events/IPayoutWalletEvents.sol","id":1333,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1466,"sourceUnit":1314,"src":"134:72:27","symbolAliases":[{"foreign":{"id":1332,"name":"IPayoutWalletEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"142:19:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":1335,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1466,"sourceUnit":1522,"src":"207:84:27","symbolAliases":[{"foreign":{"id":1334,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"215:19:27","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"PayoutWalletStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":1465,"linearizedBaseContracts":[1465],"name":"PayoutWalletStorage","nameLocation":"301:19:27","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1339,"libraryName":{"id":1336,"name":"PayoutWalletStorage","nameLocations":["333:19:27"],"nodeType":"IdentifierPath","referencedDeclaration":1465,"src":"333:19:27"},"nodeType":"UsingForDirective","src":"327:57:27","typeName":{"id":1338,"nodeType":"UserDefinedTypeName","pathNode":{"id":1337,"name":"PayoutWalletStorage.Layout","nameLocations":["357:19:27","377:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"357:26:27"},"referencedDeclaration":1342,"src":"357:26:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"canonicalName":"PayoutWalletStorage.Layout","id":1342,"members":[{"constant":false,"id":1341,"mutability":"mutable","name":"wallet","nameLocation":"430:6:27","nodeType":"VariableDeclaration","scope":1342,"src":"414:22:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"414:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"name":"Layout","nameLocation":"397:6:27","nodeType":"StructDefinition","scope":1465,"src":"390:53:27","visibility":"public"},{"constant":true,"id":1355,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"475:19:27","nodeType":"VariableDeclaration","scope":1465,"src":"449:124:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1343,"name":"bytes32","nodeType":"ElementaryTypeName","src":"449:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1353,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e7061796d656e742e5061796f757457616c6c65742e73746f72616765","id":1349,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"523:43:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae","typeString":"literal_string \"animoca.core.payment.PayoutWallet.storage\""},"value":"animoca.core.payment.PayoutWallet.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae","typeString":"literal_string \"animoca.core.payment.PayoutWallet.storage\""}],"id":1348,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"513:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1350,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"513:54:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1347,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"505:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1346,"name":"uint256","nodeType":"ElementaryTypeName","src":"505:7:27","typeDescriptions":{}}},"id":1351,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"505:63:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1352,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"571:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"505:67:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1345,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"497:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1344,"name":"bytes32","nodeType":"ElementaryTypeName","src":"497:7:27","typeDescriptions":{}}},"id":1354,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"497:76:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":1368,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"605:21:27","nodeType":"VariableDeclaration","scope":1465,"src":"579:124:27","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1356,"name":"bytes32","nodeType":"ElementaryTypeName","src":"579:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1366,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e7061796d656e742e5061796f757457616c6c65742e7068617365","id":1362,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"655:41:27","typeDescriptions":{"typeIdentifier":"t_stringliteral_03497821c97e7d2bd8e34992e1a723a2edcf97a05eef937ff657491b38cca19e","typeString":"literal_string \"animoca.core.payment.PayoutWallet.phase\""},"value":"animoca.core.payment.PayoutWallet.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_03497821c97e7d2bd8e34992e1a723a2edcf97a05eef937ff657491b38cca19e","typeString":"literal_string \"animoca.core.payment.PayoutWallet.phase\""}],"id":1361,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"645:9:27","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1363,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"645:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1360,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"637:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1359,"name":"uint256","nodeType":"ElementaryTypeName","src":"637:7:27","typeDescriptions":{}}},"id":1364,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"637:61:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1365,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"701:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"637:65:27","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1358,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"629:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1357,"name":"bytes32","nodeType":"ElementaryTypeName","src":"629:7:27","typeDescriptions":{}}},"id":1367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"629:74:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":1383,"nodeType":"Block","src":"1210:55:27","statements":[{"expression":{"arguments":[{"id":1380,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1374,"src":"1238:19:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":1377,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1372,"src":"1220:1:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1379,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1222:15:27","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":1439,"src":"1220:17:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1342_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":1381,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1220:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1382,"nodeType":"ExpressionStatement","src":"1220:38:27"}]},"documentation":{"id":1369,"nodeType":"StructuredDocumentation","src":"710:406:27","text":"@notice Initializes the storage with an initial payout wallet (immutable version).\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":1384,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1130:15:27","nodeType":"FunctionDefinition","parameters":{"id":1375,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1372,"mutability":"mutable","name":"s","nameLocation":"1161:1:27","nodeType":"VariableDeclaration","scope":1384,"src":"1146:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":1371,"nodeType":"UserDefinedTypeName","pathNode":{"id":1370,"name":"Layout","nameLocations":["1146:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"1146:6:27"},"referencedDeclaration":1342,"src":"1146:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1374,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"1180:19:27","nodeType":"VariableDeclaration","scope":1384,"src":"1164:35:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1373,"name":"address","nodeType":"ElementaryTypeName","src":"1164:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1145:55:27"},"returnParameters":{"id":1376,"nodeType":"ParameterList","parameters":[],"src":"1210:0:27"},"scope":1465,"src":"1121:144:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1406,"nodeType":"Block","src":"1928:119:27","statements":[{"expression":{"arguments":[{"id":1396,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1368,"src":"1967:21:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":1397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1990:1:27","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":1393,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"1938:19:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1521_$","typeString":"type(library ProxyInitialization)"}},"id":1395,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1958:8:27","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1520,"src":"1938:28:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":1398,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1938:54:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1399,"nodeType":"ExpressionStatement","src":"1938:54:27"},{"expression":{"arguments":[{"id":1403,"name":"initialPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"2020:19:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":1400,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1388,"src":"2002:1:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1402,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2004:15:27","memberName":"setPayoutWallet","nodeType":"MemberAccess","referencedDeclaration":1439,"src":"2002:17:27","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$1342_storage_ptr_$_t_address_payable_$returns$__$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer,address payable)"}},"id":1404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2002:38:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1405,"nodeType":"ExpressionStatement","src":"2002:38:27"}]},"documentation":{"id":1385,"nodeType":"StructuredDocumentation","src":"1271:569:27","text":"@notice Initializes the storage with an initial payout wallet (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param initialPayoutWallet The initial payout wallet."},"id":1407,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"1854:9:27","nodeType":"FunctionDefinition","parameters":{"id":1391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1388,"mutability":"mutable","name":"s","nameLocation":"1879:1:27","nodeType":"VariableDeclaration","scope":1407,"src":"1864:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":1387,"nodeType":"UserDefinedTypeName","pathNode":{"id":1386,"name":"Layout","nameLocations":["1864:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"1864:6:27"},"referencedDeclaration":1342,"src":"1864:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1390,"mutability":"mutable","name":"initialPayoutWallet","nameLocation":"1898:19:27","nodeType":"VariableDeclaration","scope":1407,"src":"1882:35:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"1882:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"1863:55:27"},"returnParameters":{"id":1392,"nodeType":"ParameterList","parameters":[],"src":"1928:0:27"},"scope":1465,"src":"1845:202:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1438,"nodeType":"Block","src":"2368:187:27","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1421,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1416,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"2382:15:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1419,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2409:1:27","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1418,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2401:7:27","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1417,"name":"address","nodeType":"ElementaryTypeName","src":"2401:7:27","typeDescriptions":{}}},"id":1420,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2401:10:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"2382:29:27","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1425,"nodeType":"IfStatement","src":"2378:67:27","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1422,"name":"ZeroAddressPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1304,"src":"2420:23:27","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1423,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2420:25:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1424,"nodeType":"RevertStatement","src":"2413:32:27"}},{"expression":{"id":1430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1426,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"2455:1:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1428,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"2457:6:27","memberName":"wallet","nodeType":"MemberAccess","referencedDeclaration":1341,"src":"2455:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1429,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"2466:15:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"src":"2455:26:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1431,"nodeType":"ExpressionStatement","src":"2455:26:27"},{"eventCall":{"arguments":[{"id":1435,"name":"newPayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"2532:15:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"}],"expression":{"id":1432,"name":"IPayoutWalletEvents","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1313,"src":"2496:19:27","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IPayoutWalletEvents_$1313_$","typeString":"type(contract IPayoutWalletEvents)"}},"id":1434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2516:15:27","memberName":"PayoutWalletSet","nodeType":"MemberAccess","referencedDeclaration":1312,"src":"2496:35:27","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$returns$__$","typeString":"function (address)"}},"id":1436,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2496:52:27","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1437,"nodeType":"EmitStatement","src":"2491:57:27"}]},"documentation":{"id":1408,"nodeType":"StructuredDocumentation","src":"2053:225:27","text":"@notice Sets the payout wallet.\n @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\n @dev Emits a {PayoutWalletSet} event.\n @param newPayoutWallet The payout wallet."},"id":1439,"implemented":true,"kind":"function","modifiers":[],"name":"setPayoutWallet","nameLocation":"2292:15:27","nodeType":"FunctionDefinition","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1411,"mutability":"mutable","name":"s","nameLocation":"2323:1:27","nodeType":"VariableDeclaration","scope":1439,"src":"2308:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":1410,"nodeType":"UserDefinedTypeName","pathNode":{"id":1409,"name":"Layout","nameLocations":["2308:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"2308:6:27"},"referencedDeclaration":1342,"src":"2308:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"newPayoutWallet","nameLocation":"2342:15:27","nodeType":"VariableDeclaration","scope":1439,"src":"2326:31:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1412,"name":"address","nodeType":"ElementaryTypeName","src":"2326:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2307:51:27"},"returnParameters":{"id":1415,"nodeType":"ParameterList","parameters":[],"src":"2368:0:27"},"scope":1465,"src":"2283:272:27","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":1451,"nodeType":"Block","src":"2723:32:27","statements":[{"expression":{"expression":{"id":1448,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1443,"src":"2740:1:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":1449,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2742:6:27","memberName":"wallet","nodeType":"MemberAccess","referencedDeclaration":1341,"src":"2740:8:27","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"functionReturnParameters":1447,"id":1450,"nodeType":"Return","src":"2733:15:27"}]},"documentation":{"id":1440,"nodeType":"StructuredDocumentation","src":"2561:77:27","text":"@notice Gets the payout wallet.\n @return wallet The payout wallet."},"id":1452,"implemented":true,"kind":"function","modifiers":[],"name":"payoutWallet","nameLocation":"2652:12:27","nodeType":"FunctionDefinition","parameters":{"id":1444,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1443,"mutability":"mutable","name":"s","nameLocation":"2680:1:27","nodeType":"VariableDeclaration","scope":1452,"src":"2665:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":1442,"nodeType":"UserDefinedTypeName","pathNode":{"id":1441,"name":"Layout","nameLocations":["2665:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"2665:6:27"},"referencedDeclaration":1342,"src":"2665:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"}],"src":"2664:18:27"},"returnParameters":{"id":1447,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1446,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1452,"src":"2706:15:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":1445,"name":"address","nodeType":"ElementaryTypeName","src":"2706:15:27","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"}],"src":"2705:17:27"},"scope":1465,"src":"2643:112:27","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":1463,"nodeType":"Block","src":"2820:115:27","statements":[{"assignments":[1459],"declarations":[{"constant":false,"id":1459,"mutability":"mutable","name":"position","nameLocation":"2838:8:27","nodeType":"VariableDeclaration","scope":1463,"src":"2830:16:27","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1458,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2830:7:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1461,"initialValue":{"id":1460,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1355,"src":"2849:19:27","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"2830:38:27"},{"AST":{"nativeSrc":"2887:42:27","nodeType":"YulBlock","src":"2887:42:27","statements":[{"nativeSrc":"2901:18:27","nodeType":"YulAssignment","src":"2901:18:27","value":{"name":"position","nativeSrc":"2911:8:27","nodeType":"YulIdentifier","src":"2911:8:27"},"variableNames":[{"name":"s.slot","nativeSrc":"2901:6:27","nodeType":"YulIdentifier","src":"2901:6:27"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":1459,"isOffset":false,"isSlot":false,"src":"2911:8:27","valueSize":1},{"declaration":1456,"isOffset":false,"isSlot":true,"src":"2901:6:27","suffix":"slot","valueSize":1}],"id":1462,"nodeType":"InlineAssembly","src":"2878:51:27"}]},"id":1464,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"2770:6:27","nodeType":"FunctionDefinition","parameters":{"id":1453,"nodeType":"ParameterList","parameters":[],"src":"2776:2:27"},"returnParameters":{"id":1457,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"s","nameLocation":"2817:1:27","nodeType":"VariableDeclaration","scope":1464,"src":"2802:16:27","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"},"typeName":{"id":1455,"nodeType":"UserDefinedTypeName","pathNode":{"id":1454,"name":"Layout","nameLocations":["2802:6:27"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"2802:6:27"},"referencedDeclaration":1342,"src":"2802:6:27","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}},"visibility":"internal"}],"src":"2801:18:27"},"scope":1465,"src":"2761:174:27","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1466,"src":"293:2644:27","usedErrors":[],"usedEvents":[]}],"src":"32:2906:27"},"id":27},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1474]},"id":1475,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1467,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:28"},{"documentation":{"id":1468,"nodeType":"StructuredDocumentation","src":"58:179:28","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":1474,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:28","nodeType":"ErrorDefinition","parameters":{"id":1473,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1470,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:28","nodeType":"VariableDeclaration","scope":1474,"src":"277:20:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1469,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1472,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:28","nodeType":"VariableDeclaration","scope":1474,"src":"299:16:28","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1471,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:28","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:28"},"src":"237:80:28"}],"src":"32:286:28"},"id":28},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[1474],"ProxyInitialization":[1521],"StorageSlot":[4723]},"id":1522,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1476,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:29"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":1478,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1522,"sourceUnit":1475,"src":"58:92:29","symbolAliases":[{"foreign":{"id":1477,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"66:33:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":1480,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1522,"sourceUnit":4724,"src":"151:74:29","symbolAliases":[{"foreign":{"id":1479,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"159:11:29","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":1481,"nodeType":"StructuredDocumentation","src":"227:92:29","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":1521,"linearizedBaseContracts":[1521],"name":"ProxyInitialization","nameLocation":"327:19:29","nodeType":"ContractDefinition","nodes":[{"body":{"id":1519,"nodeType":"Block","src":"735:294:29","statements":[{"assignments":[1493],"declarations":[{"constant":false,"id":1493,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:29","nodeType":"VariableDeclaration","scope":1519,"src":"745:46:29","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1492,"nodeType":"UserDefinedTypeName","pathNode":{"id":1491,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:29","757:11:29"],"nodeType":"IdentifierPath","referencedDeclaration":4628,"src":"745:23:29"},"referencedDeclaration":4628,"src":"745:23:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":1498,"initialValue":{"arguments":[{"id":1496,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1484,"src":"821:11:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":1494,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4723,"src":"794:11:29","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$4723_$","typeString":"type(library StorageSlot)"}},"id":1495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:29","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":4678,"src":"794:26:29","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$4628_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":1497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:29"},{"assignments":[1500],"declarations":[{"constant":false,"id":1500,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:29","nodeType":"VariableDeclaration","scope":1519,"src":"843:20:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1499,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1503,"initialValue":{"expression":{"id":1501,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"866:14:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1502,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4627,"src":"866:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:29"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1504,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"900:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":1505,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"916:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:29","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1512,"nodeType":"IfStatement","src":"896:88:29","trueBody":{"errorCall":{"arguments":[{"id":1508,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1500,"src":"964:12:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1509,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"978:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1507,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1474,"src":"930:33:29","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":1510,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:29","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1511,"nodeType":"RevertStatement","src":"923:61:29"}},{"expression":{"id":1517,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":1513,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1493,"src":"994:14:29","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":1515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:29","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":4627,"src":"994:20:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":1516,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"1017:5:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1518,"nodeType":"ExpressionStatement","src":"994:28:29"}]},"documentation":{"id":1482,"nodeType":"StructuredDocumentation","src":"353:314:29","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":1520,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:29","nodeType":"FunctionDefinition","parameters":{"id":1487,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1484,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:29","nodeType":"VariableDeclaration","scope":1520,"src":"690:19:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1483,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:29","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1486,"mutability":"mutable","name":"phase","nameLocation":"719:5:29","nodeType":"VariableDeclaration","scope":1520,"src":"711:13:29","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1485,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:29","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:29"},"returnParameters":{"id":1488,"nodeType":"ParameterList","parameters":[],"src":"735:0:29"},"scope":1521,"src":"672:357:29","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1522,"src":"319:712:29","usedErrors":[],"usedEvents":[]}],"src":"32:1000:29"},"id":29},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","exportedSymbols":{"ContractOwnership":[52],"TokenRecovery":[1533],"TokenRecoveryBase":[1754]},"id":1534,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1523,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:30"},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"./base/TokenRecoveryBase.sol","id":1525,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1534,"sourceUnit":1755,"src":"58:63:30","symbolAliases":[{"foreign":{"id":1524,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"66:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"./../access/ContractOwnership.sol","id":1527,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1534,"sourceUnit":53,"src":"122:68:30","symbolAliases":[{"foreign":{"id":1526,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"130:17:30","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1529,"name":"TokenRecoveryBase","nameLocations":["440:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":1754,"src":"440:17:30"},"id":1530,"nodeType":"InheritanceSpecifier","src":"440:17:30"},{"baseName":{"id":1531,"name":"ContractOwnership","nameLocations":["459:17:30"],"nodeType":"IdentifierPath","referencedDeclaration":52,"src":"459:17:30"},"id":1532,"nodeType":"InheritanceSpecifier","src":"459:17:30"}],"canonicalName":"TokenRecovery","contractDependencies":[],"contractKind":"contract","documentation":{"id":1528,"nodeType":"StructuredDocumentation","src":"192:213:30","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":1533,"linearizedBaseContracts":[1533,52,863,880,224,1754,4613,333,289],"name":"TokenRecovery","nameLocation":"423:13:30","nodeType":"ContractDefinition","nodes":[],"scope":1534,"src":"405:76:30","usedErrors":[7,249,868],"usedEvents":[288]}],"src":"32:450:30"},"id":30},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","exportedSymbols":{"Address":[4591],"Context":[4613],"ContractOwnershipStorage":[833],"IERC20":[3849],"IERC721":[3768],"InconsistentArrayLengths":[7],"SafeERC20":[4261],"TokenRecoveryBase":[1754]},"id":1755,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1535,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:31"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../CommonErrors.sol","id":1537,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":8,"src":"58:66:31","symbolAliases":[{"foreign":{"id":1536,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"66:24:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","file":"@openzeppelin/contracts/interfaces/IERC20.sol","id":1539,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":3772,"src":"125:69:31","symbolAliases":[{"foreign":{"id":1538,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"133:6:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","file":"./../../token/ERC721/interfaces/IERC721.sol","id":1541,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":3769,"src":"195:68:31","symbolAliases":[{"foreign":{"id":1540,"name":"IERC721","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3768,"src":"203:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../../access/libraries/ContractOwnershipStorage.sol","id":1543,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":834,"src":"264:95:31","symbolAliases":[{"foreign":{"id":1542,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"272:24:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","file":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","id":1545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":4262,"src":"360:82:31","symbolAliases":[{"foreign":{"id":1544,"name":"SafeERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4261,"src":"368:9:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":1547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":4614,"src":"443:66:31","symbolAliases":[{"foreign":{"id":1546,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"451:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":1549,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1755,"sourceUnit":4592,"src":"510:66:31","symbolAliases":[{"foreign":{"id":1548,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"518:7:31","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1551,"name":"Context","nameLocations":["889:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"889:7:31"},"id":1552,"nodeType":"InheritanceSpecifier","src":"889:7:31"}],"canonicalName":"TokenRecoveryBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":1550,"nodeType":"StructuredDocumentation","src":"578:272:31","text":"@title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC173 (Contract Ownership standard)."},"fullyImplemented":true,"id":1754,"linearizedBaseContracts":[1754,4613],"name":"TokenRecoveryBase","nameLocation":"868:17:31","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1556,"libraryName":{"id":1553,"name":"ContractOwnershipStorage","nameLocations":["909:24:31"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"909:24:31"},"nodeType":"UsingForDirective","src":"903:67:31","typeName":{"id":1555,"nodeType":"UserDefinedTypeName","pathNode":{"id":1554,"name":"ContractOwnershipStorage.Layout","nameLocations":["938:24:31","963:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"938:31:31"},"referencedDeclaration":610,"src":"938:31:31","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":1560,"libraryName":{"id":1557,"name":"SafeERC20","nameLocations":["981:9:31"],"nodeType":"IdentifierPath","referencedDeclaration":4261,"src":"981:9:31"},"nodeType":"UsingForDirective","src":"975:27:31","typeName":{"id":1559,"nodeType":"UserDefinedTypeName","pathNode":{"id":1558,"name":"IERC20","nameLocations":["995:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"995:6:31"},"referencedDeclaration":3849,"src":"995:6:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}}},{"global":false,"id":1563,"libraryName":{"id":1561,"name":"Address","nameLocations":["1013:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":4591,"src":"1013:7:31"},"nodeType":"UsingForDirective","src":"1007:34:31","typeName":{"id":1562,"name":"address","nodeType":"ElementaryTypeName","src":"1025:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}},{"body":{"id":1616,"nodeType":"Block","src":"2042:345:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1578,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"2109:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1579,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2109:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1573,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"2052:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2077:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"2052:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1576,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1577,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2086:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"2052:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1580,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2052:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1581,"nodeType":"ExpressionStatement","src":"2052:70:31"},{"assignments":[1583],"declarations":[{"constant":false,"id":1583,"mutability":"mutable","name":"length","nameLocation":"2140:6:31","nodeType":"VariableDeclaration","scope":1616,"src":"2132:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1582,"name":"uint256","nodeType":"ElementaryTypeName","src":"2132:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1586,"initialValue":{"expression":{"id":1584,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2149:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1585,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2158:6:31","memberName":"length","nodeType":"MemberAccess","src":"2149:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2132:32:31"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1590,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1587,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"2178:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1588,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"2188:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2196:6:31","memberName":"length","nodeType":"MemberAccess","src":"2188:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2178:24:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1594,"nodeType":"IfStatement","src":"2174:63:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1591,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"2211:24:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1592,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2211:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1593,"nodeType":"RevertStatement","src":"2204:33:31"}},{"id":1615,"nodeType":"UncheckedBlock","src":"2247:134:31","statements":[{"body":{"id":1613,"nodeType":"Block","src":"2305:66:31","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1608,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1570,"src":"2345:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1610,"indexExpression":{"id":1609,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2353:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2345:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1604,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1567,"src":"2323:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[] calldata"}},"id":1606,"indexExpression":{"id":1605,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2332:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2323:11:31","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2335:9:31","memberName":"sendValue","nodeType":"MemberAccess","referencedDeclaration":4313,"src":"2323:21:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_payable_$_t_uint256_$returns$__$attached_to$_t_address_payable_$","typeString":"function (address payable,uint256)"}},"id":1611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2323:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1612,"nodeType":"ExpressionStatement","src":"2323:33:31"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1598,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2287:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1599,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1583,"src":"2292:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2287:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1614,"initializationExpression":{"assignments":[1596],"declarations":[{"constant":false,"id":1596,"mutability":"mutable","name":"i","nameLocation":"2284:1:31","nodeType":"VariableDeclaration","scope":1614,"src":"2276:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1595,"name":"uint256","nodeType":"ElementaryTypeName","src":"2276:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1597,"nodeType":"VariableDeclarationStatement","src":"2276:9:31"},"loopExpression":{"expression":{"id":1602,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"2300:3:31","subExpression":{"id":1601,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1596,"src":"2302:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1603,"nodeType":"ExpressionStatement","src":"2300:3:31"},"nodeType":"ForStatement","src":"2271:100:31"}]}]},"documentation":{"id":1564,"nodeType":"StructuredDocumentation","src":"1047:890:31","text":"@notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\n @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\n  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\n @dev Reverts if one of the ETH transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param amounts the list of token amounts to transfer."},"functionSelector":"f7ba94bd","id":1617,"implemented":true,"kind":"function","modifiers":[],"name":"recoverETH","nameLocation":"1951:10:31","nodeType":"FunctionDefinition","parameters":{"id":1571,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1567,"mutability":"mutable","name":"accounts","nameLocation":"1989:8:31","nodeType":"VariableDeclaration","scope":1617,"src":"1962:35:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_calldata_ptr","typeString":"address payable[]"},"typeName":{"baseType":{"id":1565,"name":"address","nodeType":"ElementaryTypeName","src":"1962:15:31","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":1566,"nodeType":"ArrayTypeName","src":"1962:17:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_payable_$dyn_storage_ptr","typeString":"address payable[]"}},"visibility":"internal"},{"constant":false,"id":1570,"mutability":"mutable","name":"amounts","nameLocation":"2018:7:31","nodeType":"VariableDeclaration","scope":1617,"src":"1999:26:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1568,"name":"uint256","nodeType":"ElementaryTypeName","src":"1999:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1569,"nodeType":"ArrayTypeName","src":"1999:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1961:65:31"},"returnParameters":{"id":1572,"nodeType":"ParameterList","parameters":[],"src":"2042:0:31"},"scope":1754,"src":"1942:445:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1682,"nodeType":"Block","src":"3277:386:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1636,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"3344:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3344:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1631,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"3287:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1633,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3312:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"3287:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1634,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1635,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3321:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"3287:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1638,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3287:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1639,"nodeType":"ExpressionStatement","src":"3287:70:31"},{"assignments":[1641],"declarations":[{"constant":false,"id":1641,"mutability":"mutable","name":"length","nameLocation":"3375:6:31","nodeType":"VariableDeclaration","scope":1682,"src":"3367:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1640,"name":"uint256","nodeType":"ElementaryTypeName","src":"3367:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1644,"initialValue":{"expression":{"id":1642,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3384:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1643,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3393:6:31","memberName":"length","nodeType":"MemberAccess","src":"3384:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3367:32:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1653,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1648,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1645,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"3413:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1646,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"3423:6:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1647,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3430:6:31","memberName":"length","nodeType":"MemberAccess","src":"3423:13:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3413:23:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1652,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1649,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"3440:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1650,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"3450:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1651,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3458:6:31","memberName":"length","nodeType":"MemberAccess","src":"3450:14:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3440:24:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"3413:51:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1657,"nodeType":"IfStatement","src":"3409:90:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1654,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"3473:24:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3473:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1656,"nodeType":"RevertStatement","src":"3466:33:31"}},{"id":1681,"nodeType":"UncheckedBlock","src":"3509:148:31","statements":[{"body":{"id":1679,"nodeType":"Block","src":"3567:80:31","statements":[{"expression":{"arguments":[{"baseExpression":{"id":1671,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1621,"src":"3608:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1673,"indexExpression":{"id":1672,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3617:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3608:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1674,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1628,"src":"3621:7:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1676,"indexExpression":{"id":1675,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3629:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3621:10:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1667,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1625,"src":"3585:6:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":1669,"indexExpression":{"id":1668,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3592:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3585:9:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":1670,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3595:12:31","memberName":"safeTransfer","nodeType":"MemberAccess","referencedDeclaration":3918,"src":"3585:22:31","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_address_$_t_uint256_$returns$__$attached_to$_t_contract$_IERC20_$3849_$","typeString":"function (contract IERC20,address,uint256)"}},"id":1677,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3585:47:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1678,"nodeType":"ExpressionStatement","src":"3585:47:31"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1663,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1661,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3549:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1662,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1641,"src":"3554:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3549:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1680,"initializationExpression":{"assignments":[1659],"declarations":[{"constant":false,"id":1659,"mutability":"mutable","name":"i","nameLocation":"3546:1:31","nodeType":"VariableDeclaration","scope":1680,"src":"3538:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1658,"name":"uint256","nodeType":"ElementaryTypeName","src":"3538:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1660,"nodeType":"VariableDeclarationStatement","src":"3538:9:31"},"loopExpression":{"expression":{"id":1665,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"3562:3:31","subExpression":{"id":1664,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1659,"src":"3564:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1666,"nodeType":"ExpressionStatement","src":"3562:3:31"},"nodeType":"ForStatement","src":"3533:114:31"}]}]},"documentation":{"id":1618,"nodeType":"StructuredDocumentation","src":"2393:758:31","text":"@notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\n  so that the extraction is limited to only amounts sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC20 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param tokens the list of ERC20 token addresses.\n @param amounts the list of token amounts to transfer."},"functionSelector":"73c8a958","id":1683,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"3165:13:31","nodeType":"FunctionDefinition","parameters":{"id":1629,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1621,"mutability":"mutable","name":"accounts","nameLocation":"3198:8:31","nodeType":"VariableDeclaration","scope":1683,"src":"3179:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1619,"name":"address","nodeType":"ElementaryTypeName","src":"3179:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1620,"nodeType":"ArrayTypeName","src":"3179:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1625,"mutability":"mutable","name":"tokens","nameLocation":"3226:6:31","nodeType":"VariableDeclaration","scope":1683,"src":"3208:24:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":1623,"nodeType":"UserDefinedTypeName","pathNode":{"id":1622,"name":"IERC20","nameLocations":["3208:6:31"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"3208:6:31"},"referencedDeclaration":3849,"src":"3208:6:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":1624,"nodeType":"ArrayTypeName","src":"3208:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":1628,"mutability":"mutable","name":"amounts","nameLocation":"3253:7:31","nodeType":"VariableDeclaration","scope":1683,"src":"3234:26:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1626,"name":"uint256","nodeType":"ElementaryTypeName","src":"3234:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1627,"nodeType":"ArrayTypeName","src":"3234:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"3178:83:31"},"returnParameters":{"id":1630,"nodeType":"ParameterList","parameters":[],"src":"3277:0:31"},"scope":1754,"src":"3156:507:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"body":{"id":1752,"nodeType":"Block","src":"4568:409:31","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":1702,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4603,"src":"4635:10:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":1703,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4635:12:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1697,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"4578:24:31","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":1699,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4603:6:31","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"4578:31:31","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:33:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":1701,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4612:22:31","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"4578:56:31","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4578:70:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1705,"nodeType":"ExpressionStatement","src":"4578:70:31"},{"assignments":[1707],"declarations":[{"constant":false,"id":1707,"mutability":"mutable","name":"length","nameLocation":"4666:6:31","nodeType":"VariableDeclaration","scope":1752,"src":"4658:14:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1706,"name":"uint256","nodeType":"ElementaryTypeName","src":"4658:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1710,"initialValue":{"expression":{"id":1708,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"4675:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1709,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4684:6:31","memberName":"length","nodeType":"MemberAccess","src":"4675:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4658:32:31"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1714,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1711,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4704:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1712,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4714:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4724:6:31","memberName":"length","nodeType":"MemberAccess","src":"4714:16:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4704:26:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1718,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1715,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4734:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":1716,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4744:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4753:6:31","memberName":"length","nodeType":"MemberAccess","src":"4744:15:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4734:25:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"4704:55:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1723,"nodeType":"IfStatement","src":"4700:94:31","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":1720,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"4768:24:31","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":1721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4768:26:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1722,"nodeType":"RevertStatement","src":"4761:33:31"}},{"id":1751,"nodeType":"UncheckedBlock","src":"4804:167:31","statements":[{"body":{"id":1749,"nodeType":"Block","src":"4862:99:31","statements":[{"expression":{"arguments":[{"arguments":[{"id":1739,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"4914:4:31","typeDescriptions":{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1754","typeString":"contract TokenRecoveryBase"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_TokenRecoveryBase_$1754","typeString":"contract TokenRecoveryBase"}],"id":1738,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4906:7:31","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1737,"name":"address","nodeType":"ElementaryTypeName","src":"4906:7:31","typeDescriptions":{}}},"id":1740,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4906:13:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1741,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1687,"src":"4921:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":1743,"indexExpression":{"id":1742,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4930:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4921:11:31","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":1744,"name":"tokenIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1694,"src":"4934:8:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":1746,"indexExpression":{"id":1745,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4943:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4934:11:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"baseExpression":{"id":1733,"name":"contracts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"4880:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptr","typeString":"contract IERC721[] calldata"}},"id":1735,"indexExpression":{"id":1734,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4890:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4880:12:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3768","typeString":"contract IERC721"}},"id":1736,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4893:12:31","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3711,"src":"4880:25:31","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) external"}},"id":1747,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4880:66:31","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1748,"nodeType":"ExpressionStatement","src":"4880:66:31"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1729,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1727,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4844:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":1728,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1707,"src":"4849:6:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4844:11:31","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1750,"initializationExpression":{"assignments":[1725],"declarations":[{"constant":false,"id":1725,"mutability":"mutable","name":"i","nameLocation":"4841:1:31","nodeType":"VariableDeclaration","scope":1750,"src":"4833:9:31","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1724,"name":"uint256","nodeType":"ElementaryTypeName","src":"4833:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1726,"nodeType":"VariableDeclarationStatement","src":"4833:9:31"},"loopExpression":{"expression":{"id":1731,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"4857:3:31","subExpression":{"id":1730,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1725,"src":"4859:1:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1732,"nodeType":"ExpressionStatement","src":"4857:3:31"},"nodeType":"ForStatement","src":"4828:133:31"}]}]},"documentation":{"id":1684,"nodeType":"StructuredDocumentation","src":"3669:767:31","text":"@notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\n @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\n  so that the extraction is limited to only tokens sent accidentally.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\n @dev Reverts if one of the ERC721 transfers fails for any reason.\n @param accounts the list of accounts to transfer the tokens to.\n @param contracts the list of ERC721 contract addresses.\n @param tokenIds the list of token ids to transfer."},"functionSelector":"c3666c36","id":1753,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC721s","nameLocation":"4450:14:31","nodeType":"FunctionDefinition","parameters":{"id":1695,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1687,"mutability":"mutable","name":"accounts","nameLocation":"4484:8:31","nodeType":"VariableDeclaration","scope":1753,"src":"4465:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1685,"name":"address","nodeType":"ElementaryTypeName","src":"4465:7:31","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1686,"nodeType":"ArrayTypeName","src":"4465:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1691,"mutability":"mutable","name":"contracts","nameLocation":"4513:9:31","nodeType":"VariableDeclaration","scope":1753,"src":"4494:28:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptr","typeString":"contract IERC721[]"},"typeName":{"baseType":{"id":1689,"nodeType":"UserDefinedTypeName","pathNode":{"id":1688,"name":"IERC721","nameLocations":["4494:7:31"],"nodeType":"IdentifierPath","referencedDeclaration":3768,"src":"4494:7:31"},"referencedDeclaration":3768,"src":"4494:7:31","typeDescriptions":{"typeIdentifier":"t_contract$_IERC721_$3768","typeString":"contract IERC721"}},"id":1690,"nodeType":"ArrayTypeName","src":"4494:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC721_$3768_$dyn_storage_ptr","typeString":"contract IERC721[]"}},"visibility":"internal"},{"constant":false,"id":1694,"mutability":"mutable","name":"tokenIds","nameLocation":"4543:8:31","nodeType":"VariableDeclaration","scope":1753,"src":"4524:27:31","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"4524:7:31","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1693,"nodeType":"ArrayTypeName","src":"4524:9:31","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"4464:88:31"},"returnParameters":{"id":1696,"nodeType":"ParameterList","parameters":[],"src":"4568:0:31"},"scope":1754,"src":"4441:536:31","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":1755,"src":"850:4129:31","usedErrors":[7,249],"usedEvents":[]}],"src":"32:4948:31"},"id":31},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","exportedSymbols":{"ERC20Receiver":[1789],"IERC20Receiver":[2075],"InterfaceDetection":[863],"InterfaceDetectionStorage":[981]},"id":1790,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1756,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:32"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./interfaces/IERC20Receiver.sol","id":1758,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":2076,"src":"58:63:32","symbolAliases":[{"foreign":{"id":1757,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"66:14:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"../../introspection/libraries/InterfaceDetectionStorage.sol","id":1760,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":982,"src":"122:102:32","symbolAliases":[{"foreign":{"id":1759,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"130:25:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"../../introspection/InterfaceDetection.sol","id":1762,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1790,"sourceUnit":864,"src":"225:78:32","symbolAliases":[{"foreign":{"id":1761,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":863,"src":"233:18:32","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":1764,"name":"IERC20Receiver","nameLocations":["511:14:32"],"nodeType":"IdentifierPath","referencedDeclaration":2075,"src":"511:14:32"},"id":1765,"nodeType":"InheritanceSpecifier","src":"511:14:32"},{"baseName":{"id":1766,"name":"InterfaceDetection","nameLocations":["527:18:32"],"nodeType":"IdentifierPath","referencedDeclaration":863,"src":"527:18:32"},"id":1767,"nodeType":"InheritanceSpecifier","src":"527:18:32"}],"canonicalName":"ERC20Receiver","contractDependencies":[],"contractKind":"contract","documentation":{"id":1763,"nodeType":"StructuredDocumentation","src":"305:171:32","text":"@title ERC20 Fungible Token Standard, Receiver (immutable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":false,"id":1789,"linearizedBaseContracts":[1789,863,880,2075],"name":"ERC20Receiver","nameLocation":"494:13:32","nodeType":"ContractDefinition","nodes":[{"global":false,"id":1771,"libraryName":{"id":1768,"name":"InterfaceDetectionStorage","nameLocations":["558:25:32"],"nodeType":"IdentifierPath","referencedDeclaration":981,"src":"558:25:32"},"nodeType":"UsingForDirective","src":"552:69:32","typeName":{"id":1770,"nodeType":"UserDefinedTypeName","pathNode":{"id":1769,"name":"InterfaceDetectionStorage.Layout","nameLocations":["588:25:32","614:6:32"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"588:32:32"},"referencedDeclaration":891,"src":"588:32:32","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"body":{"id":1787,"nodeType":"Block","src":"726:113:32","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":1781,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"798:14:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2075_$","typeString":"type(contract IERC20Receiver)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2075_$","typeString":"type(contract IERC20Receiver)"}],"id":1780,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"793:4:32","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":1782,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"793:20:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Receiver_$2075","typeString":"type(contract IERC20Receiver)"}},"id":1783,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"814:11:32","memberName":"interfaceId","nodeType":"MemberAccess","src":"793:32:32","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":1784,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:32","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":1775,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"736:25:32","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":1777,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"762:6:32","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"736:32:32","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":1778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:34:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":1779,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"771:21:32","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"736:56:32","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":1785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"736:96:32","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1786,"nodeType":"ExpressionStatement","src":"736:96:32"}]},"documentation":{"id":1772,"nodeType":"StructuredDocumentation","src":"627:80:32","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"id":1788,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":1773,"nodeType":"ParameterList","parameters":[],"src":"723:2:32"},"returnParameters":{"id":1774,"nodeType":"ParameterList","parameters":[],"src":"726:0:32"},"scope":1789,"src":"712:127:32","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":1790,"src":"476:365:32","usedErrors":[868],"usedEvents":[]}],"src":"32:810:32"},"id":32},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol","exportedSymbols":{"ERC20AllowanceOverflow":[1802]},"id":1803,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1791,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:33"},{"documentation":{"id":1792,"nodeType":"StructuredDocumentation","src":"58:245:33","text":"@notice Thrown when the allowance increase creates an overflow.\n @param owner The owner of the tokens.\n @param spender The spender of the tokens.\n @param allowance The current allowance.\n @param increment The allowance increase."},"errorSelector":"93bc2ff1","id":1802,"name":"ERC20AllowanceOverflow","nameLocation":"309:22:33","nodeType":"ErrorDefinition","parameters":{"id":1801,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1794,"mutability":"mutable","name":"owner","nameLocation":"340:5:33","nodeType":"VariableDeclaration","scope":1802,"src":"332:13:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1793,"name":"address","nodeType":"ElementaryTypeName","src":"332:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1796,"mutability":"mutable","name":"spender","nameLocation":"355:7:33","nodeType":"VariableDeclaration","scope":1802,"src":"347:15:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1795,"name":"address","nodeType":"ElementaryTypeName","src":"347:7:33","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1798,"mutability":"mutable","name":"allowance","nameLocation":"372:9:33","nodeType":"VariableDeclaration","scope":1802,"src":"364:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1797,"name":"uint256","nodeType":"ElementaryTypeName","src":"364:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1800,"mutability":"mutable","name":"increment","nameLocation":"391:9:33","nodeType":"VariableDeclaration","scope":1802,"src":"383:17:33","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1799,"name":"uint256","nodeType":"ElementaryTypeName","src":"383:7:33","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"331:70:33"},"src":"303:99:33"}],"src":"32:371:33"},"id":33},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol","exportedSymbols":{"ERC20BatchTransferValuesOverflow":[1807]},"id":1808,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1804,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:34"},{"documentation":{"id":1805,"nodeType":"StructuredDocumentation","src":"58:88:34","text":"@notice Thrown when the `values` array sum overflows on a batch transfer operation."},"errorSelector":"dedd8341","id":1807,"name":"ERC20BatchTransferValuesOverflow","nameLocation":"152:32:34","nodeType":"ErrorDefinition","parameters":{"id":1806,"nodeType":"ParameterList","parameters":[],"src":"184:2:34"},"src":"146:41:34"}],"src":"32:156:34"},"id":34},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol","exportedSymbols":{"ERC20ApprovalToAddressZero":[1814],"ERC20InsufficientAllowance":[1825],"ERC20InsufficientBalance":[1839],"ERC20TransferToAddressZero":[1830]},"id":1840,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1809,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:35"},{"documentation":{"id":1810,"nodeType":"StructuredDocumentation","src":"58:112:35","text":"@notice Thrown when setting an allowance to the the zero address.\n @param owner The owner of the tokens."},"errorSelector":"f7e1ac0f","id":1814,"name":"ERC20ApprovalToAddressZero","nameLocation":"176:26:35","nodeType":"ErrorDefinition","parameters":{"id":1813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1812,"mutability":"mutable","name":"owner","nameLocation":"211:5:35","nodeType":"VariableDeclaration","scope":1814,"src":"203:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1811,"name":"address","nodeType":"ElementaryTypeName","src":"203:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"202:15:35"},"src":"170:48:35"},{"documentation":{"id":1815,"nodeType":"StructuredDocumentation","src":"220:257:35","text":"@notice Thrown when the allowance decreases below the current alowance set.\n @param owner The owner of the tokens.\n @param spender The spender of the tokens.\n @param allowance The current allowance.\n @param decrement The allowance decrease."},"errorSelector":"137ad6ab","id":1825,"name":"ERC20InsufficientAllowance","nameLocation":"483:26:35","nodeType":"ErrorDefinition","parameters":{"id":1824,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1817,"mutability":"mutable","name":"owner","nameLocation":"518:5:35","nodeType":"VariableDeclaration","scope":1825,"src":"510:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1816,"name":"address","nodeType":"ElementaryTypeName","src":"510:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1819,"mutability":"mutable","name":"spender","nameLocation":"533:7:35","nodeType":"VariableDeclaration","scope":1825,"src":"525:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1818,"name":"address","nodeType":"ElementaryTypeName","src":"525:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1821,"mutability":"mutable","name":"allowance","nameLocation":"550:9:35","nodeType":"VariableDeclaration","scope":1825,"src":"542:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1820,"name":"uint256","nodeType":"ElementaryTypeName","src":"542:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1823,"mutability":"mutable","name":"decrement","nameLocation":"569:9:35","nodeType":"VariableDeclaration","scope":1825,"src":"561:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1822,"name":"uint256","nodeType":"ElementaryTypeName","src":"561:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"509:70:35"},"src":"477:103:35"},{"documentation":{"id":1826,"nodeType":"StructuredDocumentation","src":"582:133:35","text":"@notice Thrown when transferring tokens to the zero address.\n @param owner The account from which the tokens are transferred."},"errorSelector":"754f425b","id":1830,"name":"ERC20TransferToAddressZero","nameLocation":"721:26:35","nodeType":"ErrorDefinition","parameters":{"id":1829,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1828,"mutability":"mutable","name":"owner","nameLocation":"756:5:35","nodeType":"VariableDeclaration","scope":1830,"src":"748:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1827,"name":"address","nodeType":"ElementaryTypeName","src":"748:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"747:15:35"},"src":"715:48:35"},{"documentation":{"id":1831,"nodeType":"StructuredDocumentation","src":"765:230:35","text":"@notice Thrown when transferring an amount of tokens greater than the current balance.\n @param owner The owner of the tokens.\n @param balance The current balance.\n @param value The amount of tokens being transferred."},"errorSelector":"e450d38c","id":1839,"name":"ERC20InsufficientBalance","nameLocation":"1001:24:35","nodeType":"ErrorDefinition","parameters":{"id":1838,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1833,"mutability":"mutable","name":"owner","nameLocation":"1034:5:35","nodeType":"VariableDeclaration","scope":1839,"src":"1026:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1832,"name":"address","nodeType":"ElementaryTypeName","src":"1026:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1835,"mutability":"mutable","name":"balance","nameLocation":"1049:7:35","nodeType":"VariableDeclaration","scope":1839,"src":"1041:15:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1834,"name":"uint256","nodeType":"ElementaryTypeName","src":"1041:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1837,"mutability":"mutable","name":"value","nameLocation":"1066:5:35","nodeType":"VariableDeclaration","scope":1839,"src":"1058:13:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1836,"name":"uint256","nodeType":"ElementaryTypeName","src":"1058:7:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1025:47:35"},"src":"995:78:35"}],"src":"32:1042:35"},"id":35},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol","exportedSymbols":{"ERC20BatchMintValuesOverflow":[1847],"ERC20MintToAddressZero":[1844],"ERC20TotalSupplyOverflow":[1854]},"id":1855,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1841,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:36"},{"documentation":{"id":1842,"nodeType":"StructuredDocumentation","src":"58:64:36","text":"@notice Thrown when the minting tokens to the zero address."},"errorSelector":"92fd9c8f","id":1844,"name":"ERC20MintToAddressZero","nameLocation":"128:22:36","nodeType":"ErrorDefinition","parameters":{"id":1843,"nodeType":"ParameterList","parameters":[],"src":"150:2:36"},"src":"122:31:36"},{"documentation":{"id":1845,"nodeType":"StructuredDocumentation","src":"155:84:36","text":"@notice Thrown when the `values` array sum overflows on a batch mint operation."},"errorSelector":"5542ae7c","id":1847,"name":"ERC20BatchMintValuesOverflow","nameLocation":"245:28:36","nodeType":"ErrorDefinition","parameters":{"id":1846,"nodeType":"ParameterList","parameters":[],"src":"273:2:36"},"src":"239:37:36"},{"documentation":{"id":1848,"nodeType":"StructuredDocumentation","src":"278:155:36","text":"@notice Thrown when the minting tokens overflows the supply.\n @param supply The current supply.\n @param value The amount of tokens being minted."},"errorSelector":"0366a5f6","id":1854,"name":"ERC20TotalSupplyOverflow","nameLocation":"439:24:36","nodeType":"ErrorDefinition","parameters":{"id":1853,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1850,"mutability":"mutable","name":"supply","nameLocation":"472:6:36","nodeType":"VariableDeclaration","scope":1854,"src":"464:14:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1849,"name":"uint256","nodeType":"ElementaryTypeName","src":"464:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1852,"mutability":"mutable","name":"value","nameLocation":"488:5:36","nodeType":"VariableDeclaration","scope":1854,"src":"480:13:36","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1851,"name":"uint256","nodeType":"ElementaryTypeName","src":"480:7:36","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"463:31:36"},"src":"433:62:36"}],"src":"32:464:36"},"id":36},"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol","exportedSymbols":{"ERC20SafeTransferRejected":[1861]},"id":1862,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1856,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:37"},{"documentation":{"id":1857,"nodeType":"StructuredDocumentation","src":"58:124:37","text":"@notice Thrown when a safe transfer is rejected by the recipient contract.\n @param recipient The recipient contract."},"errorSelector":"6d449736","id":1861,"name":"ERC20SafeTransferRejected","nameLocation":"188:25:37","nodeType":"ErrorDefinition","parameters":{"id":1860,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1859,"mutability":"mutable","name":"recipient","nameLocation":"222:9:37","nodeType":"VariableDeclaration","scope":1861,"src":"214:17:37","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1858,"name":"address","nodeType":"ElementaryTypeName","src":"214:7:37","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"213:19:37"},"src":"182:51:37"}],"src":"32:202:37"},"id":37},"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol","exportedSymbols":{"IERC20Events":[1883]},"id":1884,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1863,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:38"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":1864,"nodeType":"StructuredDocumentation","src":"58:182:38","text":"@title ERC20 Token Standard, basic interface (events).\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: The ERC-165 identifier for this interface is 0x36372b07."},"fullyImplemented":true,"id":1883,"linearizedBaseContracts":[1883],"name":"IERC20Events","nameLocation":"250:12:38","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":1865,"nodeType":"StructuredDocumentation","src":"269:299:38","text":"@notice Emitted when tokens are transferred, including zero value transfers.\n @param from The account where the transferred tokens are withdrawn from.\n @param to The account where the transferred tokens are deposited to.\n @param value The amount of tokens being transferred."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":1873,"name":"Transfer","nameLocation":"579:8:38","nodeType":"EventDefinition","parameters":{"id":1872,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1867,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"604:4:38","nodeType":"VariableDeclaration","scope":1873,"src":"588:20:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1866,"name":"address","nodeType":"ElementaryTypeName","src":"588:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1869,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"626:2:38","nodeType":"VariableDeclaration","scope":1873,"src":"610:18:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1868,"name":"address","nodeType":"ElementaryTypeName","src":"610:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1871,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"638:5:38","nodeType":"VariableDeclaration","scope":1873,"src":"630:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1870,"name":"uint256","nodeType":"ElementaryTypeName","src":"630:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"587:57:38"},"src":"573:72:38"},{"anonymous":false,"documentation":{"id":1874,"nodeType":"StructuredDocumentation","src":"651:246:38","text":"@notice Emitted when an approval is set.\n @param owner The account granting an allowance to `spender`.\n @param spender The account being granted an allowance from `owner`.\n @param value The allowance amount being granted."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":1882,"name":"Approval","nameLocation":"908:8:38","nodeType":"EventDefinition","parameters":{"id":1881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1876,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"933:5:38","nodeType":"VariableDeclaration","scope":1882,"src":"917:21:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1875,"name":"address","nodeType":"ElementaryTypeName","src":"917:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1878,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"956:7:38","nodeType":"VariableDeclaration","scope":1882,"src":"940:23:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1877,"name":"address","nodeType":"ElementaryTypeName","src":"940:7:38","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1880,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"973:5:38","nodeType":"VariableDeclaration","scope":1882,"src":"965:13:38","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1879,"name":"uint256","nodeType":"ElementaryTypeName","src":"965:7:38","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"916:63:38"},"src":"902:78:38"}],"scope":1884,"src":"240:742:38","usedErrors":[],"usedEvents":[1873,1882]}],"src":"32:951:38"},"id":38},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[1947],"IERC20Events":[1883]},"id":1948,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1885,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:39"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol","file":"./../events/IERC20Events.sol","id":1887,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1948,"sourceUnit":1884,"src":"58:58:39","symbolAliases":[{"foreign":{"id":1886,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"66:12:39","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":1889,"name":"IERC20Events","nameLocations":["323:12:39"],"nodeType":"IdentifierPath","referencedDeclaration":1883,"src":"323:12:39"},"id":1890,"nodeType":"InheritanceSpecifier","src":"323:12:39"}],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":1888,"nodeType":"StructuredDocumentation","src":"118:185:39","text":"@title ERC20 Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: The ERC-165 identifier for this interface is 0x36372b07."},"fullyImplemented":false,"id":1947,"linearizedBaseContracts":[1947,1883],"name":"IERC20","nameLocation":"313:6:39","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1891,"nodeType":"StructuredDocumentation","src":"342:759:39","text":"@notice Sets the allowance to an account from the sender.\n @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\n  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\n  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n @dev Reverts if `spender` is the zero address.\n @dev Emits an {Approval} event.\n @param spender The account being granted the allowance by the message caller.\n @param value The allowance amount to grant.\n @return result Whether the operation succeeded."},"functionSelector":"095ea7b3","id":1900,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1115:7:39","nodeType":"FunctionDefinition","parameters":{"id":1896,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1893,"mutability":"mutable","name":"spender","nameLocation":"1131:7:39","nodeType":"VariableDeclaration","scope":1900,"src":"1123:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1892,"name":"address","nodeType":"ElementaryTypeName","src":"1123:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1895,"mutability":"mutable","name":"value","nameLocation":"1148:5:39","nodeType":"VariableDeclaration","scope":1900,"src":"1140:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1894,"name":"uint256","nodeType":"ElementaryTypeName","src":"1140:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1122:32:39"},"returnParameters":{"id":1899,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1898,"mutability":"mutable","name":"result","nameLocation":"1178:6:39","nodeType":"VariableDeclaration","scope":1900,"src":"1173:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1897,"name":"bool","nodeType":"ElementaryTypeName","src":"1173:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1172:13:39"},"scope":1947,"src":"1106:80:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1901,"nodeType":"StructuredDocumentation","src":"1192:408:39","text":"@notice Transfers an amount of tokens to a recipient from the sender.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Emits a {Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"a9059cbb","id":1910,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1614:8:39","nodeType":"FunctionDefinition","parameters":{"id":1906,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1903,"mutability":"mutable","name":"to","nameLocation":"1631:2:39","nodeType":"VariableDeclaration","scope":1910,"src":"1623:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1902,"name":"address","nodeType":"ElementaryTypeName","src":"1623:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1905,"mutability":"mutable","name":"value","nameLocation":"1643:5:39","nodeType":"VariableDeclaration","scope":1910,"src":"1635:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1904,"name":"uint256","nodeType":"ElementaryTypeName","src":"1635:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1622:27:39"},"returnParameters":{"id":1909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1908,"mutability":"mutable","name":"result","nameLocation":"1673:6:39","nodeType":"VariableDeclaration","scope":1910,"src":"1668:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1907,"name":"bool","nodeType":"ElementaryTypeName","src":"1668:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1667:13:39"},"scope":1947,"src":"1605:76:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1911,"nodeType":"StructuredDocumentation","src":"1687:682:39","text":"@notice Transfers an amount of tokens to a recipient from a specified address.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @return result Whether the operation succeeded."},"functionSelector":"23b872dd","id":1922,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2383:12:39","nodeType":"FunctionDefinition","parameters":{"id":1918,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1913,"mutability":"mutable","name":"from","nameLocation":"2404:4:39","nodeType":"VariableDeclaration","scope":1922,"src":"2396:12:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1912,"name":"address","nodeType":"ElementaryTypeName","src":"2396:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1915,"mutability":"mutable","name":"to","nameLocation":"2418:2:39","nodeType":"VariableDeclaration","scope":1922,"src":"2410:10:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1914,"name":"address","nodeType":"ElementaryTypeName","src":"2410:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1917,"mutability":"mutable","name":"value","nameLocation":"2430:5:39","nodeType":"VariableDeclaration","scope":1922,"src":"2422:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1916,"name":"uint256","nodeType":"ElementaryTypeName","src":"2422:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2395:41:39"},"returnParameters":{"id":1921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1920,"mutability":"mutable","name":"result","nameLocation":"2460:6:39","nodeType":"VariableDeclaration","scope":1922,"src":"2455:11:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1919,"name":"bool","nodeType":"ElementaryTypeName","src":"2455:4:39","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2454:13:39"},"scope":1947,"src":"2374:94:39","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1923,"nodeType":"StructuredDocumentation","src":"2474:87:39","text":"@notice Gets the total token supply.\n @return supply The total token supply."},"functionSelector":"18160ddd","id":1928,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"2575:11:39","nodeType":"FunctionDefinition","parameters":{"id":1924,"nodeType":"ParameterList","parameters":[],"src":"2586:2:39"},"returnParameters":{"id":1927,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1926,"mutability":"mutable","name":"supply","nameLocation":"2620:6:39","nodeType":"VariableDeclaration","scope":1928,"src":"2612:14:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1925,"name":"uint256","nodeType":"ElementaryTypeName","src":"2612:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2611:16:39"},"scope":1947,"src":"2566:62:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1929,"nodeType":"StructuredDocumentation","src":"2634:146:39","text":"@notice Gets an account balance.\n @param owner The account whose balance will be returned.\n @return balance The account balance."},"functionSelector":"70a08231","id":1936,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"2794:9:39","nodeType":"FunctionDefinition","parameters":{"id":1932,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1931,"mutability":"mutable","name":"owner","nameLocation":"2812:5:39","nodeType":"VariableDeclaration","scope":1936,"src":"2804:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1930,"name":"address","nodeType":"ElementaryTypeName","src":"2804:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2803:15:39"},"returnParameters":{"id":1935,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1934,"mutability":"mutable","name":"balance","nameLocation":"2850:7:39","nodeType":"VariableDeclaration","scope":1936,"src":"2842:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1933,"name":"uint256","nodeType":"ElementaryTypeName","src":"2842:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2841:17:39"},"scope":1947,"src":"2785:74:39","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":1937,"nodeType":"StructuredDocumentation","src":"2865:330:39","text":"@notice Gets the amount that an account is allowed to spend on behalf of another.\n @param owner The account that has granted an allowance to `spender`.\n @param spender The account that was granted an allowance by `owner`.\n @return value The amount which `spender` is allowed to spend on behalf of `owner`."},"functionSelector":"dd62ed3e","id":1946,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"3209:9:39","nodeType":"FunctionDefinition","parameters":{"id":1942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1939,"mutability":"mutable","name":"owner","nameLocation":"3227:5:39","nodeType":"VariableDeclaration","scope":1946,"src":"3219:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1938,"name":"address","nodeType":"ElementaryTypeName","src":"3219:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1941,"mutability":"mutable","name":"spender","nameLocation":"3242:7:39","nodeType":"VariableDeclaration","scope":1946,"src":"3234:15:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1940,"name":"address","nodeType":"ElementaryTypeName","src":"3234:7:39","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3218:32:39"},"returnParameters":{"id":1945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1944,"mutability":"mutable","name":"value","nameLocation":"3282:5:39","nodeType":"VariableDeclaration","scope":1946,"src":"3274:13:39","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1943,"name":"uint256","nodeType":"ElementaryTypeName","src":"3274:7:39","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3273:15:39"},"scope":1947,"src":"3200:89:39","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":1948,"src":"303:2988:39","usedErrors":[],"usedEvents":[1873,1882]}],"src":"32:3260:39"},"id":39},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol","exportedSymbols":{"IERC20Allowance":[1971]},"id":1972,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1949,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:40"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Allowance","contractDependencies":[],"contractKind":"interface","documentation":{"id":1950,"nodeType":"StructuredDocumentation","src":"58:187:40","text":"@title ERC20 Token Standard, optional extension: Allowance.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x9d075186."},"fullyImplemented":false,"id":1971,"linearizedBaseContracts":[1971],"name":"IERC20Allowance","nameLocation":"255:15:40","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1951,"nodeType":"StructuredDocumentation","src":"277:598:40","text":"@notice Increases the allowance granted to an account by the sender.\n @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender`'s allowance by the sender overflows.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n @param spender The account whose allowance is being increased.\n @param value The allowance amount increase.\n @return result Whether the operation succeeded."},"functionSelector":"39509351","id":1960,"implemented":false,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"889:17:40","nodeType":"FunctionDefinition","parameters":{"id":1956,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1953,"mutability":"mutable","name":"spender","nameLocation":"915:7:40","nodeType":"VariableDeclaration","scope":1960,"src":"907:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1952,"name":"address","nodeType":"ElementaryTypeName","src":"907:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1955,"mutability":"mutable","name":"value","nameLocation":"932:5:40","nodeType":"VariableDeclaration","scope":1960,"src":"924:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1954,"name":"uint256","nodeType":"ElementaryTypeName","src":"924:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"906:32:40"},"returnParameters":{"id":1959,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1958,"mutability":"mutable","name":"result","nameLocation":"962:6:40","nodeType":"VariableDeclaration","scope":1960,"src":"957:11:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1957,"name":"bool","nodeType":"ElementaryTypeName","src":"957:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"956:13:40"},"scope":1971,"src":"880:90:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1961,"nodeType":"StructuredDocumentation","src":"976:620:40","text":"@notice Decreases the allowance granted to an account by the sender.\n @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\n @dev Reverts if `spender` is the zero address.\n @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\n @param spender The account whose allowance is being decreased.\n @param value The allowance amount decrease.\n @return result Whether the operation succeeded."},"functionSelector":"a457c2d7","id":1970,"implemented":false,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"1610:17:40","nodeType":"FunctionDefinition","parameters":{"id":1966,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1963,"mutability":"mutable","name":"spender","nameLocation":"1636:7:40","nodeType":"VariableDeclaration","scope":1970,"src":"1628:15:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1962,"name":"address","nodeType":"ElementaryTypeName","src":"1628:7:40","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1965,"mutability":"mutable","name":"value","nameLocation":"1653:5:40","nodeType":"VariableDeclaration","scope":1970,"src":"1645:13:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1964,"name":"uint256","nodeType":"ElementaryTypeName","src":"1645:7:40","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1627:32:40"},"returnParameters":{"id":1969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1968,"mutability":"mutable","name":"result","nameLocation":"1683:6:40","nodeType":"VariableDeclaration","scope":1970,"src":"1678:11:40","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1967,"name":"bool","nodeType":"ElementaryTypeName","src":"1678:4:40","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1677:13:40"},"scope":1971,"src":"1601:90:40","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":1972,"src":"245:1448:40","usedErrors":[],"usedEvents":[]}],"src":"32:1662:40"},"id":40},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol","exportedSymbols":{"IERC20BatchTransfers":[2001]},"id":2002,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1973,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:41"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20BatchTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":1974,"nodeType":"StructuredDocumentation","src":"58:193:41","text":"@title ERC20 Token Standard, optional extension: Batch Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0xc05327e6."},"fullyImplemented":false,"id":2001,"linearizedBaseContracts":[2001],"name":"IERC20BatchTransfers","nameLocation":"261:20:41","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":1975,"nodeType":"StructuredDocumentation","src":"288:595:41","text":"@notice Transfers multiple amounts of tokens to multiple recipients from the sender.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the sender does not have at least `sum(values)` of balance.\n @dev Emits an {IERC20-Transfer} event for each transfer.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`.\n @return result Whether the operation succeeded."},"functionSelector":"88d695b2","id":1986,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"897:13:41","nodeType":"FunctionDefinition","parameters":{"id":1982,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1978,"mutability":"mutable","name":"recipients","nameLocation":"930:10:41","nodeType":"VariableDeclaration","scope":1986,"src":"911:29:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1976,"name":"address","nodeType":"ElementaryTypeName","src":"911:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1977,"nodeType":"ArrayTypeName","src":"911:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1981,"mutability":"mutable","name":"values","nameLocation":"961:6:41","nodeType":"VariableDeclaration","scope":1986,"src":"942:25:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1979,"name":"uint256","nodeType":"ElementaryTypeName","src":"942:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1980,"nodeType":"ArrayTypeName","src":"942:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"910:58:41"},"returnParameters":{"id":1985,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1984,"mutability":"mutable","name":"result","nameLocation":"992:6:41","nodeType":"VariableDeclaration","scope":1986,"src":"987:11:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1983,"name":"bool","nodeType":"ElementaryTypeName","src":"987:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"986:13:41"},"scope":2001,"src":"888:112:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":1987,"nodeType":"StructuredDocumentation","src":"1006:888:41","text":"@notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if `from` does not have at least `sum(values)` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\n @dev Emits an {IERC20-Transfer} event for each transfer.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to be transferred.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`.\n @return result Whether the operation succeeded."},"functionSelector":"4885b254","id":2000,"implemented":false,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"1908:17:41","nodeType":"FunctionDefinition","parameters":{"id":1996,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1989,"mutability":"mutable","name":"from","nameLocation":"1934:4:41","nodeType":"VariableDeclaration","scope":2000,"src":"1926:12:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1988,"name":"address","nodeType":"ElementaryTypeName","src":"1926:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1992,"mutability":"mutable","name":"recipients","nameLocation":"1959:10:41","nodeType":"VariableDeclaration","scope":2000,"src":"1940:29:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":1990,"name":"address","nodeType":"ElementaryTypeName","src":"1940:7:41","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":1991,"nodeType":"ArrayTypeName","src":"1940:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":1995,"mutability":"mutable","name":"values","nameLocation":"1990:6:41","nodeType":"VariableDeclaration","scope":2000,"src":"1971:25:41","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":1993,"name":"uint256","nodeType":"ElementaryTypeName","src":"1971:7:41","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1994,"nodeType":"ArrayTypeName","src":"1971:9:41","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1925:72:41"},"returnParameters":{"id":1999,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1998,"mutability":"mutable","name":"result","nameLocation":"2021:6:41","nodeType":"VariableDeclaration","scope":2000,"src":"2016:11:41","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1997,"name":"bool","nodeType":"ElementaryTypeName","src":"2016:4:41","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2015:13:41"},"scope":2001,"src":"1899:130:41","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2002,"src":"251:1780:41","usedErrors":[],"usedEvents":[]}],"src":"32:2000:41"},"id":41},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol","exportedSymbols":{"IERC20Burnable":[2035]},"id":2036,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2003,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:42"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Burnable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2004,"nodeType":"StructuredDocumentation","src":"58:186:42","text":"@title ERC20 Token Standard, optional extension: Burnable.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8."},"fullyImplemented":false,"id":2035,"linearizedBaseContracts":[2035],"name":"IERC20Burnable","nameLocation":"254:14:42","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2005,"nodeType":"StructuredDocumentation","src":"275:349:42","text":"@notice Burns an amount of tokens from the sender, decreasing the total supply.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n @param value The amount of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"42966c68","id":2012,"implemented":false,"kind":"function","modifiers":[],"name":"burn","nameLocation":"638:4:42","nodeType":"FunctionDefinition","parameters":{"id":2008,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2007,"mutability":"mutable","name":"value","nameLocation":"651:5:42","nodeType":"VariableDeclaration","scope":2012,"src":"643:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2006,"name":"uint256","nodeType":"ElementaryTypeName","src":"643:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"642:15:42"},"returnParameters":{"id":2011,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2010,"mutability":"mutable","name":"result","nameLocation":"681:6:42","nodeType":"VariableDeclaration","scope":2012,"src":"676:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2009,"name":"bool","nodeType":"ElementaryTypeName","src":"676:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"675:13:42"},"scope":2035,"src":"629:60:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2013,"nodeType":"StructuredDocumentation","src":"695:613:42","text":"@notice Burns an amount of tokens from a specified address, decreasing the total supply.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\n @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\n @param from The account to burn the tokens from.\n @param value The amount of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"79cc6790","id":2022,"implemented":false,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"1322:8:42","nodeType":"FunctionDefinition","parameters":{"id":2018,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2015,"mutability":"mutable","name":"from","nameLocation":"1339:4:42","nodeType":"VariableDeclaration","scope":2022,"src":"1331:12:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2014,"name":"address","nodeType":"ElementaryTypeName","src":"1331:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2017,"mutability":"mutable","name":"value","nameLocation":"1353:5:42","nodeType":"VariableDeclaration","scope":2022,"src":"1345:13:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2016,"name":"uint256","nodeType":"ElementaryTypeName","src":"1345:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1330:29:42"},"returnParameters":{"id":2021,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2020,"mutability":"mutable","name":"result","nameLocation":"1383:6:42","nodeType":"VariableDeclaration","scope":2022,"src":"1378:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2019,"name":"bool","nodeType":"ElementaryTypeName","src":"1378:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1377:13:42"},"scope":2035,"src":"1313:78:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2023,"nodeType":"StructuredDocumentation","src":"1397:799:42","text":"@notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n @dev Reverts if `owners` and `values` have different lengths.\n @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\n @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\n @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\n @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\n @param owners The list of accounts to burn the tokens from.\n @param values The list of amounts of tokens to burn.\n @return result Whether the operation succeeded."},"functionSelector":"1b9a7529","id":2034,"implemented":false,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"2210:13:42","nodeType":"FunctionDefinition","parameters":{"id":2030,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2026,"mutability":"mutable","name":"owners","nameLocation":"2243:6:42","nodeType":"VariableDeclaration","scope":2034,"src":"2224:25:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2024,"name":"address","nodeType":"ElementaryTypeName","src":"2224:7:42","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2025,"nodeType":"ArrayTypeName","src":"2224:9:42","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2029,"mutability":"mutable","name":"values","nameLocation":"2270:6:42","nodeType":"VariableDeclaration","scope":2034,"src":"2251:25:42","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2027,"name":"uint256","nodeType":"ElementaryTypeName","src":"2251:7:42","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2028,"nodeType":"ArrayTypeName","src":"2251:9:42","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2223:54:42"},"returnParameters":{"id":2033,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2032,"mutability":"mutable","name":"result","nameLocation":"2301:6:42","nodeType":"VariableDeclaration","scope":2034,"src":"2296:11:42","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2031,"name":"bool","nodeType":"ElementaryTypeName","src":"2296:4:42","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2295:13:42"},"scope":2035,"src":"2201:108:42","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2036,"src":"244:2067:42","usedErrors":[],"usedEvents":[]}],"src":"32:2280:42"},"id":42},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","exportedSymbols":{"IERC20Mintable":[2057]},"id":2058,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2037,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:43"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Mintable","contractDependencies":[],"contractKind":"interface","documentation":{"id":2038,"nodeType":"StructuredDocumentation","src":"58:186:43","text":"@title ERC20 Token Standard, optional extension: Mintable.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x28963e1e."},"fullyImplemented":false,"id":2057,"linearizedBaseContracts":[2057],"name":"IERC20Mintable","nameLocation":"254:14:43","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2039,"nodeType":"StructuredDocumentation","src":"275:371:43","text":"@notice Mints an amount of tokens to a recipient, increasing the total supply.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\n @param to The account to mint the tokens to.\n @param value The amount of tokens to mint."},"functionSelector":"40c10f19","id":2046,"implemented":false,"kind":"function","modifiers":[],"name":"mint","nameLocation":"660:4:43","nodeType":"FunctionDefinition","parameters":{"id":2044,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2041,"mutability":"mutable","name":"to","nameLocation":"673:2:43","nodeType":"VariableDeclaration","scope":2046,"src":"665:10:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2040,"name":"address","nodeType":"ElementaryTypeName","src":"665:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2043,"mutability":"mutable","name":"value","nameLocation":"685:5:43","nodeType":"VariableDeclaration","scope":2046,"src":"677:13:43","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2042,"name":"uint256","nodeType":"ElementaryTypeName","src":"677:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"664:27:43"},"returnParameters":{"id":2045,"nodeType":"ParameterList","parameters":[],"src":"700:0:43"},"scope":2057,"src":"651:50:43","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2047,"nodeType":"StructuredDocumentation","src":"707:544:43","text":"@notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n @dev Reverts if `recipients` and `values` have different lengths.\n @dev Reverts if one of `recipients` is the zero address.\n @dev Reverts if the total supply overflows.\n @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\n @param recipients The list of accounts to mint the tokens to.\n @param values The list of amounts of tokens to mint to each of `recipients`."},"functionSelector":"68573107","id":2056,"implemented":false,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"1265:9:43","nodeType":"FunctionDefinition","parameters":{"id":2054,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2050,"mutability":"mutable","name":"recipients","nameLocation":"1294:10:43","nodeType":"VariableDeclaration","scope":2056,"src":"1275:29:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2048,"name":"address","nodeType":"ElementaryTypeName","src":"1275:7:43","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2049,"nodeType":"ArrayTypeName","src":"1275:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2053,"mutability":"mutable","name":"values","nameLocation":"1325:6:43","nodeType":"VariableDeclaration","scope":2056,"src":"1306:25:43","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2051,"name":"uint256","nodeType":"ElementaryTypeName","src":"1306:7:43","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2052,"nodeType":"ArrayTypeName","src":"1306:9:43","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"1274:58:43"},"returnParameters":{"id":2055,"nodeType":"ParameterList","parameters":[],"src":"1341:0:43"},"scope":2057,"src":"1256:86:43","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2058,"src":"244:1100:43","usedErrors":[],"usedEvents":[]}],"src":"32:1313:43"},"id":43},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","exportedSymbols":{"IERC20Receiver":[2075]},"id":2076,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2059,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:44"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Receiver","contractDependencies":[],"contractKind":"interface","documentation":{"id":2060,"nodeType":"StructuredDocumentation","src":"58:281:44","text":"@title ERC20 Token Standard, Tokens Receiver.\n @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x4fc35859."},"fullyImplemented":false,"id":2075,"linearizedBaseContracts":[2075],"name":"IERC20Receiver","nameLocation":"349:14:44","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2061,"nodeType":"StructuredDocumentation","src":"370:532:44","text":"@notice Handles the receipt of ERC20 tokens.\n @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\n @param operator The initiator of the safe transfer.\n @param from The previous tokens owner.\n @param value The amount of tokens transferred.\n @param data Optional additional data with no specified format.\n @return magicValue `bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."},"functionSelector":"4fc35859","id":2074,"implemented":false,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"916:15:44","nodeType":"FunctionDefinition","parameters":{"id":2070,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2063,"mutability":"mutable","name":"operator","nameLocation":"940:8:44","nodeType":"VariableDeclaration","scope":2074,"src":"932:16:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2062,"name":"address","nodeType":"ElementaryTypeName","src":"932:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2065,"mutability":"mutable","name":"from","nameLocation":"958:4:44","nodeType":"VariableDeclaration","scope":2074,"src":"950:12:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2064,"name":"address","nodeType":"ElementaryTypeName","src":"950:7:44","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2067,"mutability":"mutable","name":"value","nameLocation":"972:5:44","nodeType":"VariableDeclaration","scope":2074,"src":"964:13:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2066,"name":"uint256","nodeType":"ElementaryTypeName","src":"964:7:44","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2069,"mutability":"mutable","name":"data","nameLocation":"994:4:44","nodeType":"VariableDeclaration","scope":2074,"src":"979:19:44","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2068,"name":"bytes","nodeType":"ElementaryTypeName","src":"979:5:44","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"931:68:44"},"returnParameters":{"id":2073,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2072,"mutability":"mutable","name":"magicValue","nameLocation":"1025:10:44","nodeType":"VariableDeclaration","scope":2074,"src":"1018:17:44","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2071,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1018:6:44","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1017:19:44"},"scope":2075,"src":"907:130:44","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2076,"src":"339:700:44","usedErrors":[],"usedEvents":[]}],"src":"32:1008:44"},"id":44},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","exportedSymbols":{"IERC20SafeTransfers":[2105]},"id":2106,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2077,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:45"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20SafeTransfers","contractDependencies":[],"contractKind":"interface","documentation":{"id":2078,"nodeType":"StructuredDocumentation","src":"58:192:45","text":"@title ERC20 Token Standard, optional extension: Safe Transfers.\n @dev See https://eips.ethereum.org/EIPS/eip-20\n @dev Note: the ERC-165 identifier for this interface is 0x53f41a97."},"fullyImplemented":false,"id":2105,"linearizedBaseContracts":[2105],"name":"IERC20SafeTransfers","nameLocation":"260:19:45","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":2079,"nodeType":"StructuredDocumentation","src":"286:697:45","text":"@notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if the sender does not have at least `value` of balance.\n @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"eb795549","id":2090,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"997:12:45","nodeType":"FunctionDefinition","parameters":{"id":2086,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2081,"mutability":"mutable","name":"to","nameLocation":"1018:2:45","nodeType":"VariableDeclaration","scope":2090,"src":"1010:10:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2080,"name":"address","nodeType":"ElementaryTypeName","src":"1010:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2083,"mutability":"mutable","name":"value","nameLocation":"1030:5:45","nodeType":"VariableDeclaration","scope":2090,"src":"1022:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2082,"name":"uint256","nodeType":"ElementaryTypeName","src":"1022:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2085,"mutability":"mutable","name":"data","nameLocation":"1052:4:45","nodeType":"VariableDeclaration","scope":2090,"src":"1037:19:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2084,"name":"bytes","nodeType":"ElementaryTypeName","src":"1037:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"1009:48:45"},"returnParameters":{"id":2089,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2088,"mutability":"mutable","name":"result","nameLocation":"1081:6:45","nodeType":"VariableDeclaration","scope":2090,"src":"1076:11:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2087,"name":"bool","nodeType":"ElementaryTypeName","src":"1076:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1075:13:45"},"scope":2105,"src":"988:101:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":2091,"nodeType":"StructuredDocumentation","src":"1095:1009:45","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` does not have at least `value` of balance.\n @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\n @dev Emits an {IERC20-Transfer} event.\n @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract.\n @return result Whether the operation succeeded."},"functionSelector":"b88d4fde","id":2104,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"2118:16:45","nodeType":"FunctionDefinition","parameters":{"id":2100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2093,"mutability":"mutable","name":"from","nameLocation":"2143:4:45","nodeType":"VariableDeclaration","scope":2104,"src":"2135:12:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2092,"name":"address","nodeType":"ElementaryTypeName","src":"2135:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2095,"mutability":"mutable","name":"to","nameLocation":"2157:2:45","nodeType":"VariableDeclaration","scope":2104,"src":"2149:10:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2094,"name":"address","nodeType":"ElementaryTypeName","src":"2149:7:45","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2097,"mutability":"mutable","name":"value","nameLocation":"2169:5:45","nodeType":"VariableDeclaration","scope":2104,"src":"2161:13:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2096,"name":"uint256","nodeType":"ElementaryTypeName","src":"2161:7:45","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2099,"mutability":"mutable","name":"data","nameLocation":"2191:4:45","nodeType":"VariableDeclaration","scope":2104,"src":"2176:19:45","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2098,"name":"bytes","nodeType":"ElementaryTypeName","src":"2176:5:45","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2134:62:45"},"returnParameters":{"id":2103,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2102,"mutability":"mutable","name":"result","nameLocation":"2220:6:45","nodeType":"VariableDeclaration","scope":2104,"src":"2215:11:45","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2101,"name":"bool","nodeType":"ElementaryTypeName","src":"2215:4:45","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2214:13:45"},"scope":2105,"src":"2109:119:45","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":2106,"src":"250:1980:45","usedErrors":[],"usedEvents":[]}],"src":"32:2199:45"},"id":45},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","exportedSymbols":{"Address":[4591],"ERC20AllowanceOverflow":[1802],"ERC20ApprovalToAddressZero":[1814],"ERC20BatchMintValuesOverflow":[1847],"ERC20BatchTransferValuesOverflow":[1807],"ERC20InsufficientAllowance":[1825],"ERC20InsufficientBalance":[1839],"ERC20MintToAddressZero":[1844],"ERC20SafeTransferRejected":[1861],"ERC20Storage":[3647],"ERC20TotalSupplyOverflow":[1854],"ERC20TransferToAddressZero":[1830],"IERC20":[1947],"IERC20Allowance":[1971],"IERC20BatchTransfers":[2001],"IERC20Burnable":[2035],"IERC20Events":[1883],"IERC20Mintable":[2057],"IERC20Receiver":[2075],"IERC20SafeTransfers":[2105],"InconsistentArrayLengths":[7],"InterfaceDetectionStorage":[981],"ProxyInitialization":[1521]},"id":3648,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2107,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:46"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol","file":"./../errors/ERC20Errors.sol","id":2112,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1840,"src":"103:153:46","symbolAliases":[{"foreign":{"id":2108,"name":"ERC20ApprovalToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"111:26:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2109,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"139:26:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2110,"name":"ERC20TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"167:26:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2111,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"195:24:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol","file":"./../errors/ERC20AllowanceErrors.sol","id":2114,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1803,"src":"257:76:46","symbolAliases":[{"foreign":{"id":2113,"name":"ERC20AllowanceOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"265:22:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol","file":"./../errors/ERC20BatchTransfersErrors.sol","id":2116,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1808,"src":"334:91:46","symbolAliases":[{"foreign":{"id":2115,"name":"ERC20BatchTransferValuesOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"342:32:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol","file":"./../errors/ERC20SafeTransfersErrors.sol","id":2118,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1862,"src":"426:83:46","symbolAliases":[{"foreign":{"id":2117,"name":"ERC20SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"434:25:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol","file":"./../errors/ERC20MintableErrors.sol","id":2122,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1855,"src":"510:131:46","symbolAliases":[{"foreign":{"id":2119,"name":"ERC20MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"518:22:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2120,"name":"ERC20BatchMintValuesOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"542:28:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":2121,"name":"ERC20TotalSupplyOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"572:24:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"./../../../CommonErrors.sol","id":2124,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":8,"src":"642:69:46","symbolAliases":[{"foreign":{"id":2123,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"650:24:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol","file":"./../events/IERC20Events.sol","id":2126,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1884,"src":"712:58:46","symbolAliases":[{"foreign":{"id":2125,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"720:12:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol","file":"./../interfaces/IERC20.sol","id":2128,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1948,"src":"771:50:46","symbolAliases":[{"foreign":{"id":2127,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"779:6:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol","file":"./../interfaces/IERC20Allowance.sol","id":2130,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1972,"src":"822:68:46","symbolAliases":[{"foreign":{"id":2129,"name":"IERC20Allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"830:15:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol","file":"./../interfaces/IERC20BatchTransfers.sol","id":2132,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":2002,"src":"891:78:46","symbolAliases":[{"foreign":{"id":2131,"name":"IERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"899:20:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol","file":"./../interfaces/IERC20SafeTransfers.sol","id":2134,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":2106,"src":"970:76:46","symbolAliases":[{"foreign":{"id":2133,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"978:19:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol","file":"./../interfaces/IERC20Mintable.sol","id":2136,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":2058,"src":"1047:66:46","symbolAliases":[{"foreign":{"id":2135,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"1055:14:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol","file":"./../interfaces/IERC20Burnable.sol","id":2138,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":2036,"src":"1114:66:46","symbolAliases":[{"foreign":{"id":2137,"name":"IERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"1122:14:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"./../interfaces/IERC20Receiver.sol","id":2140,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":2076,"src":"1181:66:46","symbolAliases":[{"foreign":{"id":2139,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"1189:14:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":2142,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":4592,"src":"1248:66:46","symbolAliases":[{"foreign":{"id":2141,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"1256:7:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../../proxy/libraries/ProxyInitialization.sol","id":2144,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":1522,"src":"1315:87:46","symbolAliases":[{"foreign":{"id":2143,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"1323:19:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../../introspection/libraries/InterfaceDetectionStorage.sol","id":2146,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3648,"sourceUnit":982,"src":"1403:107:46","symbolAliases":[{"foreign":{"id":2145,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"1411:25:46","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ERC20Storage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":3647,"linearizedBaseContracts":[3647],"name":"ERC20Storage","nameLocation":"1520:12:46","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2149,"libraryName":{"id":2147,"name":"Address","nameLocations":["1545:7:46"],"nodeType":"IdentifierPath","referencedDeclaration":4591,"src":"1545:7:46"},"nodeType":"UsingForDirective","src":"1539:26:46","typeName":{"id":2148,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":2153,"libraryName":{"id":2150,"name":"ERC20Storage","nameLocations":["1576:12:46"],"nodeType":"IdentifierPath","referencedDeclaration":3647,"src":"1576:12:46"},"nodeType":"UsingForDirective","src":"1570:43:46","typeName":{"id":2152,"nodeType":"UserDefinedTypeName","pathNode":{"id":2151,"name":"ERC20Storage.Layout","nameLocations":["1593:12:46","1606:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"1593:19:46"},"referencedDeclaration":2170,"src":"1593:19:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}}},{"global":false,"id":2157,"libraryName":{"id":2154,"name":"InterfaceDetectionStorage","nameLocations":["1624:25:46"],"nodeType":"IdentifierPath","referencedDeclaration":981,"src":"1624:25:46"},"nodeType":"UsingForDirective","src":"1618:69:46","typeName":{"id":2156,"nodeType":"UserDefinedTypeName","pathNode":{"id":2155,"name":"InterfaceDetectionStorage.Layout","nameLocations":["1654:25:46","1680:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"1654:32:46"},"referencedDeclaration":891,"src":"1654:32:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ERC20Storage.Layout","id":2170,"members":[{"constant":false,"id":2161,"mutability":"mutable","name":"balances","nameLocation":"1745:8:46","nodeType":"VariableDeclaration","scope":2170,"src":"1717:36:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"typeName":{"id":2160,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2158,"name":"address","nodeType":"ElementaryTypeName","src":"1725:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1717:27:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1736:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}},"visibility":"internal"},{"constant":false,"id":2167,"mutability":"mutable","name":"allowances","nameLocation":"1811:10:46","nodeType":"VariableDeclaration","scope":2170,"src":"1763:58:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"typeName":{"id":2166,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2162,"name":"address","nodeType":"ElementaryTypeName","src":"1771:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1763:47:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2165,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2163,"name":"address","nodeType":"ElementaryTypeName","src":"1790:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"1782:27:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2164,"name":"uint256","nodeType":"ElementaryTypeName","src":"1801:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}}},"visibility":"internal"},{"constant":false,"id":2169,"mutability":"mutable","name":"supply","nameLocation":"1839:6:46","nodeType":"VariableDeclaration","scope":2170,"src":"1831:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2168,"name":"uint256","nodeType":"ElementaryTypeName","src":"1831:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Layout","nameLocation":"1700:6:46","nodeType":"StructDefinition","scope":3647,"src":"1693:159:46","visibility":"public"},{"constant":true,"id":2183,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"1884:19:46","nodeType":"VariableDeclaration","scope":3647,"src":"1858:121:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1858:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e45524332302e73746f72616765","id":2177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1932:40:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.storage\""},"value":"animoca.core.token.ERC20.ERC20.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1da92899d3da68bf9787824388a37ea2bfa79780bcef91b9716c390eec8ecbef","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.storage\""}],"id":2176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1922:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1922:51:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1914:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1914:7:46","typeDescriptions":{}}},"id":2179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1914:60:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1977:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1914:64:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1906:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1906:7:46","typeDescriptions":{}}},"id":2182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1906:73:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":2196,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"2011:21:46","nodeType":"VariableDeclaration","scope":3647,"src":"1985:121:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2184,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1985:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e746f6b656e2e45524332302e45524332302e7068617365","id":2190,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2061:38:46","typeDescriptions":{"typeIdentifier":"t_stringliteral_53d309e32e4ca7be7e99298a42b755b0cd82d1ad9411e9a18f57394d12274991","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.phase\""},"value":"animoca.core.token.ERC20.ERC20.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_53d309e32e4ca7be7e99298a42b755b0cd82d1ad9411e9a18f57394d12274991","typeString":"literal_string \"animoca.core.token.ERC20.ERC20.phase\""}],"id":2189,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2051:9:46","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2191,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2051:49:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":2188,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2043:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2187,"name":"uint256","nodeType":"ElementaryTypeName","src":"2043:7:46","typeDescriptions":{}}},"id":2192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2043:58:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":2193,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2104:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2043:62:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2186,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2035:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":2185,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2035:7:46","typeDescriptions":{}}},"id":2195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2035:71:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":2201,"mutability":"constant","name":"ERC20_RECEIVED","nameLocation":"2138:14:46","nodeType":"VariableDeclaration","scope":3647,"src":"2113:81:46","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":2197,"name":"bytes4","nodeType":"ElementaryTypeName","src":"2113:6:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"expression":{"expression":{"id":2198,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"2155:14:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2075_$","typeString":"type(contract IERC20Receiver)"}},"id":2199,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2170:15:46","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"2155:30:46","typeDescriptions":{"typeIdentifier":"t_function_declaration_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_calldata_ptr_$returns$_t_bytes4_$","typeString":"function IERC20Receiver.onERC20Received(address,address,uint256,bytes calldata) returns (bytes4)"}},"id":2200,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2186:8:46","memberName":"selector","nodeType":"MemberAccess","src":"2155:39:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"body":{"id":2234,"nodeType":"Block","src":"2319:268:46","statements":[{"assignments":[2209],"declarations":[{"constant":false,"id":2209,"mutability":"mutable","name":"erc165Layout","nameLocation":"2370:12:46","nodeType":"VariableDeclaration","scope":2234,"src":"2329:53:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":2208,"nodeType":"UserDefinedTypeName","pathNode":{"id":2207,"name":"InterfaceDetectionStorage.Layout","nameLocations":["2329:25:46","2355:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":891,"src":"2329:32:46"},"referencedDeclaration":891,"src":"2329:32:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"id":2213,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2210,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"2385:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2411:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"2385:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2212,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2385:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"2329:90:46"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":2218,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1947,"src":"2469:6:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20_$1947_$","typeString":"type(contract IERC20)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20_$1947_$","typeString":"type(contract IERC20)"}],"id":2217,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2464:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2219,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2464:12:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20_$1947","typeString":"type(contract IERC20)"}},"id":2220,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2477:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"2464:24:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2490:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2214,"name":"erc165Layout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2429:12:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2216,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2442:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"2429:34:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2222,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2429:66:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2223,"nodeType":"ExpressionStatement","src":"2429:66:46"},{"expression":{"arguments":[{"expression":{"arguments":[{"id":2228,"name":"IERC20Allowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1971,"src":"2545:15:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Allowance_$1971_$","typeString":"type(contract IERC20Allowance)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Allowance_$1971_$","typeString":"type(contract IERC20Allowance)"}],"id":2227,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"2540:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2540:21:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Allowance_$1971","typeString":"type(contract IERC20Allowance)"}},"id":2230,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2562:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"2540:33:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"2575:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"id":2224,"name":"erc165Layout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2209,"src":"2505:12:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2226,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2518:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"2505:34:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2232,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2505:75:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2233,"nodeType":"ExpressionStatement","src":"2505:75:46"}]},"documentation":{"id":2202,"nodeType":"StructuredDocumentation","src":"2201:88:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance."},"id":2235,"implemented":true,"kind":"function","modifiers":[],"name":"init","nameLocation":"2303:4:46","nodeType":"FunctionDefinition","parameters":{"id":2203,"nodeType":"ParameterList","parameters":[],"src":"2307:2:46"},"returnParameters":{"id":2204,"nodeType":"ParameterList","parameters":[],"src":"2319:0:46"},"scope":3647,"src":"2294:293:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2262,"nodeType":"Block","src":"2794:151:46","statements":[{"expression":{"arguments":[{"id":2248,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2196,"src":"2833:21:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2856:1:46","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":2245,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1521,"src":"2804:19:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$1521_$","typeString":"type(library ProxyInitialization)"}},"id":2247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2824:8:46","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":1520,"src":"2804:28:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":2250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2804:54:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2251,"nodeType":"ExpressionStatement","src":"2804:54:46"},{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2252,"name":"init","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2235,"src":"2868:4:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$__$returns$__$","typeString":"function ()"}},"id":2253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2868:6:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2254,"nodeType":"ExpressionStatement","src":"2868:6:46"},{"expression":{"arguments":[{"id":2258,"name":"initialHolders","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2239,"src":"2903:14:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},{"id":2259,"name":"initialAllocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2242,"src":"2919:18:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"},{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":2255,"name":"layout","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3615,"src":"2884:6:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function () pure returns (struct ERC20Storage.Layout storage pointer)"}},"id":2256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2884:8:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2257,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2893:9:46","memberName":"batchMint","nodeType":"MemberAccess","referencedDeclaration":3316,"src":"2884:18:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address[] memory,uint256[] memory)"}},"id":2260,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2884:54:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2261,"nodeType":"ExpressionStatement","src":"2884:54:46"}]},"documentation":{"id":2236,"nodeType":"StructuredDocumentation","src":"2593:88:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance."},"id":2263,"implemented":true,"kind":"function","modifiers":[],"name":"initWithAllocations","nameLocation":"2695:19:46","nodeType":"FunctionDefinition","parameters":{"id":2243,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2239,"mutability":"mutable","name":"initialHolders","nameLocation":"2732:14:46","nodeType":"VariableDeclaration","scope":2263,"src":"2715:31:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2237,"name":"address","nodeType":"ElementaryTypeName","src":"2715:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2238,"nodeType":"ArrayTypeName","src":"2715:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2242,"mutability":"mutable","name":"initialAllocations","nameLocation":"2765:18:46","nodeType":"VariableDeclaration","scope":2263,"src":"2748:35:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2240,"name":"uint256","nodeType":"ElementaryTypeName","src":"2748:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2241,"nodeType":"ArrayTypeName","src":"2748:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"2714:70:46"},"returnParameters":{"id":2244,"nodeType":"ParameterList","parameters":[],"src":"2794:0:46"},"scope":3647,"src":"2686:259:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2279,"nodeType":"Block","src":"3086:119:46","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2273,"name":"IERC20BatchTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2001,"src":"3158:20:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20BatchTransfers_$2001_$","typeString":"type(contract IERC20BatchTransfers)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20BatchTransfers_$2001_$","typeString":"type(contract IERC20BatchTransfers)"}],"id":2272,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3153:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2274,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3153:26:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20BatchTransfers_$2001","typeString":"type(contract IERC20BatchTransfers)"}},"id":2275,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3180:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"3153:38:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3193:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2267,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3096:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3122:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"3096:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2270,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2271,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3131:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"3096:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2277,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3096:102:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2278,"nodeType":"ExpressionStatement","src":"3096:102:46"}]},"documentation":{"id":2264,"nodeType":"StructuredDocumentation","src":"2951:86:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers."},"id":2280,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20BatchTransfers","nameLocation":"3051:23:46","nodeType":"FunctionDefinition","parameters":{"id":2265,"nodeType":"ParameterList","parameters":[],"src":"3074:2:46"},"returnParameters":{"id":2266,"nodeType":"ParameterList","parameters":[],"src":"3086:0:46"},"scope":3647,"src":"3042:163:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2296,"nodeType":"Block","src":"3344:118:46","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2290,"name":"IERC20SafeTransfers","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2105,"src":"3416:19:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$2105_$","typeString":"type(contract IERC20SafeTransfers)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20SafeTransfers_$2105_$","typeString":"type(contract IERC20SafeTransfers)"}],"id":2289,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3411:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2291,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3411:25:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20SafeTransfers_$2105","typeString":"type(contract IERC20SafeTransfers)"}},"id":2292,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3437:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"3411:37:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2293,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3450:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2284,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3354:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3380:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"3354:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2287,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3354:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2288,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3389:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"3354:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2294,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3354:101:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2295,"nodeType":"ExpressionStatement","src":"3354:101:46"}]},"documentation":{"id":2281,"nodeType":"StructuredDocumentation","src":"3211:85:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers."},"id":2297,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20SafeTransfers","nameLocation":"3310:22:46","nodeType":"FunctionDefinition","parameters":{"id":2282,"nodeType":"ParameterList","parameters":[],"src":"3332:2:46"},"returnParameters":{"id":2283,"nodeType":"ParameterList","parameters":[],"src":"3344:0:46"},"scope":3647,"src":"3301:161:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2313,"nodeType":"Block","src":"3591:113:46","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2307,"name":"IERC20Mintable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2057,"src":"3663:14:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Mintable_$2057_$","typeString":"type(contract IERC20Mintable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Mintable_$2057_$","typeString":"type(contract IERC20Mintable)"}],"id":2306,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3658:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2308,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3658:20:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Mintable_$2057","typeString":"type(contract IERC20Mintable)"}},"id":2309,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3679:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"3658:32:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2310,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3692:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2301,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3601:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3627:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"3601:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2304,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3601:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2305,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3636:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"3601:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2311,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3601:96:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2312,"nodeType":"ExpressionStatement","src":"3601:96:46"}]},"documentation":{"id":2298,"nodeType":"StructuredDocumentation","src":"3468:80:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Mintable."},"id":2314,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20Mintable","nameLocation":"3562:17:46","nodeType":"FunctionDefinition","parameters":{"id":2299,"nodeType":"ParameterList","parameters":[],"src":"3579:2:46"},"returnParameters":{"id":2300,"nodeType":"ParameterList","parameters":[],"src":"3591:0:46"},"scope":3647,"src":"3553:151:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2330,"nodeType":"Block","src":"3833:113:46","statements":[{"expression":{"arguments":[{"expression":{"arguments":[{"id":2324,"name":"IERC20Burnable","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2035,"src":"3905:14:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Burnable_$2035_$","typeString":"type(contract IERC20Burnable)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC20Burnable_$2035_$","typeString":"type(contract IERC20Burnable)"}],"id":2323,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"3900:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2325,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3900:20:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC20Burnable_$2035","typeString":"type(contract IERC20Burnable)"}},"id":2326,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3921:11:46","memberName":"interfaceId","nodeType":"MemberAccess","src":"3900:32:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":2327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"3934:4:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":2318,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":981,"src":"3843:25:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$981_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3869:6:46","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":980,"src":"3843:32:46","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":2321,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$891_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":2322,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3878:21:46","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":934,"src":"3843:56:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$891_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$891_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":2328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3843:96:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2329,"nodeType":"ExpressionStatement","src":"3843:96:46"}]},"documentation":{"id":2315,"nodeType":"StructuredDocumentation","src":"3710:80:46","text":"@notice Marks the following ERC165 interface(s) as supported: ERC20Burnable."},"id":2331,"implemented":true,"kind":"function","modifiers":[],"name":"initERC20Burnable","nameLocation":"3804:17:46","nodeType":"FunctionDefinition","parameters":{"id":2316,"nodeType":"ParameterList","parameters":[],"src":"3821:2:46"},"returnParameters":{"id":2317,"nodeType":"ParameterList","parameters":[],"src":"3833:0:46"},"scope":3647,"src":"3795:151:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2373,"nodeType":"Block","src":"4499:189:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2344,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"4513:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2347,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4532:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2346,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4524:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2345,"name":"address","nodeType":"ElementaryTypeName","src":"4524:7:46","typeDescriptions":{}}},"id":2348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4524:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4513:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2354,"nodeType":"IfStatement","src":"4509:67:46","trueBody":{"errorCall":{"arguments":[{"id":2351,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4570:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2350,"name":"ERC20ApprovalToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"4543:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2352,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:33:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2353,"nodeType":"RevertStatement","src":"4536:40:46"}},{"expression":{"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2355,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2335,"src":"4586:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2359,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4588:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"4586:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2360,"indexExpression":{"id":2357,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4599:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"4586:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2361,"indexExpression":{"id":2358,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"4606:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"4586:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"4617:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4586:36:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2364,"nodeType":"ExpressionStatement","src":"4586:36:46"},{"eventCall":{"arguments":[{"id":2368,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2337,"src":"4659:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2369,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2339,"src":"4666:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2370,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2341,"src":"4675:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2365,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"4637:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4650:8:46","memberName":"Approval","nodeType":"MemberAccess","referencedDeclaration":1882,"src":"4637:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2371,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4637:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2372,"nodeType":"EmitStatement","src":"4632:49:46"}]},"documentation":{"id":2332,"nodeType":"StructuredDocumentation","src":"3952:451:46","text":"@notice Sets the allowance to an account by an owner.\n @dev Note: This function implements {ERC20-approve(address,uint256)}.\n @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n @dev Emits an {Approval} event.\n @param owner The account to set the allowance from.\n @param spender The account being granted the allowance by `owner`.\n @param value The allowance amount to grant."},"id":2374,"implemented":true,"kind":"function","modifiers":[],"name":"approve","nameLocation":"4417:7:46","nodeType":"FunctionDefinition","parameters":{"id":2342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2335,"mutability":"mutable","name":"s","nameLocation":"4440:1:46","nodeType":"VariableDeclaration","scope":2374,"src":"4425:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2334,"nodeType":"UserDefinedTypeName","pathNode":{"id":2333,"name":"Layout","nameLocations":["4425:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"4425:6:46"},"referencedDeclaration":2170,"src":"4425:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2337,"mutability":"mutable","name":"owner","nameLocation":"4451:5:46","nodeType":"VariableDeclaration","scope":2374,"src":"4443:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2336,"name":"address","nodeType":"ElementaryTypeName","src":"4443:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2339,"mutability":"mutable","name":"spender","nameLocation":"4466:7:46","nodeType":"VariableDeclaration","scope":2374,"src":"4458:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2338,"name":"address","nodeType":"ElementaryTypeName","src":"4458:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2341,"mutability":"mutable","name":"value","nameLocation":"4483:5:46","nodeType":"VariableDeclaration","scope":2374,"src":"4475:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2340,"name":"uint256","nodeType":"ElementaryTypeName","src":"4475:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4424:65:46"},"returnParameters":{"id":2343,"nodeType":"ParameterList","parameters":[],"src":"4499:0:46"},"scope":3647,"src":"4408:280:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2452,"nodeType":"Block","src":"5434:594:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2387,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5448:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2390,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5467:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2389,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5459:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2388,"name":"address","nodeType":"ElementaryTypeName","src":"5459:7:46","typeDescriptions":{}}},"id":2391,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5459:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5448:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2397,"nodeType":"IfStatement","src":"5444:67:46","trueBody":{"errorCall":{"arguments":[{"id":2394,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5505:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2393,"name":"ERC20ApprovalToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"5478:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2395,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5478:33:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2396,"nodeType":"RevertStatement","src":"5471:40:46"}},{"assignments":[2399],"declarations":[{"constant":false,"id":2399,"mutability":"mutable","name":"currentAllowance","nameLocation":"5529:16:46","nodeType":"VariableDeclaration","scope":2452,"src":"5521:24:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2398,"name":"uint256","nodeType":"ElementaryTypeName","src":"5521:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2406,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2400,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5548:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2401,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5550:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"5548:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2403,"indexExpression":{"id":2402,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5561:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5548:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2405,"indexExpression":{"id":2404,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5568:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5548:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5521:55:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2409,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2407,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5590:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2408,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5599:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5590:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2443,"nodeType":"IfStatement","src":"5586:366:46","trueBody":{"id":2442,"nodeType":"Block","src":"5602:350:46","statements":[{"id":2441,"nodeType":"UncheckedBlock","src":"5616:326:46","statements":[{"assignments":[2411],"declarations":[{"constant":false,"id":2411,"mutability":"mutable","name":"newAllowance","nameLocation":"5652:12:46","nodeType":"VariableDeclaration","scope":2441,"src":"5644:20:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2410,"name":"uint256","nodeType":"ElementaryTypeName","src":"5644:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2415,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2414,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2412,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"5667:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2413,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5686:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5667:24:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"5644:47:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2416,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"5713:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2417,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"5729:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5713:32:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2426,"nodeType":"IfStatement","src":"5709:108:46","trueBody":{"errorCall":{"arguments":[{"id":2420,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5777:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2421,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5784:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2422,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"5793:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2423,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2384,"src":"5811:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2419,"name":"ERC20AllowanceOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1802,"src":"5754:22:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) pure"}},"id":2424,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:63:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2425,"nodeType":"RevertStatement","src":"5747:70:46"}},{"expression":{"id":2435,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2427,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2378,"src":"5835:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2431,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"5837:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"5835:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2432,"indexExpression":{"id":2429,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5848:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5835:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2433,"indexExpression":{"id":2430,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5855:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5835:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2434,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"5866:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5835:43:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2436,"nodeType":"ExpressionStatement","src":"5835:43:46"},{"expression":{"id":2439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2437,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"5896:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2438,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2411,"src":"5915:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5896:31:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2440,"nodeType":"ExpressionStatement","src":"5896:31:46"}]}]}},{"eventCall":{"arguments":[{"id":2447,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2380,"src":"5988:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2448,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2382,"src":"5995:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2449,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2399,"src":"6004:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2444,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"5966:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5979:8:46","memberName":"Approval","nodeType":"MemberAccess","referencedDeclaration":1882,"src":"5966:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5966:55:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2451,"nodeType":"EmitStatement","src":"5961:60:46"}]},"documentation":{"id":2375,"nodeType":"StructuredDocumentation","src":"4694:634:46","text":"@notice Increases the allowance granted to an account by an owner.\n @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\n @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n @param owner The account increasing the allowance.\n @param spender The account whose allowance is being increased.\n @param value The allowance amount increase."},"id":2453,"implemented":true,"kind":"function","modifiers":[],"name":"increaseAllowance","nameLocation":"5342:17:46","nodeType":"FunctionDefinition","parameters":{"id":2385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2378,"mutability":"mutable","name":"s","nameLocation":"5375:1:46","nodeType":"VariableDeclaration","scope":2453,"src":"5360:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2377,"nodeType":"UserDefinedTypeName","pathNode":{"id":2376,"name":"Layout","nameLocations":["5360:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"5360:6:46"},"referencedDeclaration":2170,"src":"5360:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2380,"mutability":"mutable","name":"owner","nameLocation":"5386:5:46","nodeType":"VariableDeclaration","scope":2453,"src":"5378:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2379,"name":"address","nodeType":"ElementaryTypeName","src":"5378:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2382,"mutability":"mutable","name":"spender","nameLocation":"5401:7:46","nodeType":"VariableDeclaration","scope":2453,"src":"5393:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2381,"name":"address","nodeType":"ElementaryTypeName","src":"5393:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2384,"mutability":"mutable","name":"value","nameLocation":"5418:5:46","nodeType":"VariableDeclaration","scope":2453,"src":"5410:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2383,"name":"uint256","nodeType":"ElementaryTypeName","src":"5410:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5359:65:46"},"returnParameters":{"id":2386,"nodeType":"ParameterList","parameters":[],"src":"5434:0:46"},"scope":3647,"src":"5333:695:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2539,"nodeType":"Block","src":"6800:763:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2466,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"6814:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2469,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6833:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2468,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6825:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2467,"name":"address","nodeType":"ElementaryTypeName","src":"6825:7:46","typeDescriptions":{}}},"id":2470,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6825:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6814:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2476,"nodeType":"IfStatement","src":"6810:67:46","trueBody":{"errorCall":{"arguments":[{"id":2473,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"6871:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2472,"name":"ERC20ApprovalToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1814,"src":"6844:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6844:33:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2475,"nodeType":"RevertStatement","src":"6837:40:46"}},{"assignments":[2478],"declarations":[{"constant":false,"id":2478,"mutability":"mutable","name":"currentAllowance","nameLocation":"6895:16:46","nodeType":"VariableDeclaration","scope":2539,"src":"6887:24:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2477,"name":"uint256","nodeType":"ElementaryTypeName","src":"6887:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2485,"initialValue":{"baseExpression":{"baseExpression":{"expression":{"id":2479,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"6914:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2480,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"6916:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"6914:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2482,"indexExpression":{"id":2481,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"6927:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6914:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2484,"indexExpression":{"id":2483,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"6934:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"6914:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6887:55:46"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2486,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"6957:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"arguments":[{"id":2489,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6982:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2488,"name":"uint256","nodeType":"ElementaryTypeName","src":"6982:7:46","typeDescriptions":{}}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"}],"id":2487,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"6977:4:46","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":2490,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6977:13:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_uint256","typeString":"type(uint256)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6991:3:46","memberName":"max","nodeType":"MemberAccess","src":"6977:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"6957:37:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2493,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"6998:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2494,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7007:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6998:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6957:51:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2530,"nodeType":"IfStatement","src":"6953:534:46","trueBody":{"id":2529,"nodeType":"Block","src":"7010:477:46","statements":[{"id":2528,"nodeType":"UncheckedBlock","src":"7024:453:46","statements":[{"assignments":[2498],"declarations":[{"constant":false,"id":2498,"mutability":"mutable","name":"newAllowance","nameLocation":"7183:12:46","nodeType":"VariableDeclaration","scope":2528,"src":"7175:20:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2497,"name":"uint256","nodeType":"ElementaryTypeName","src":"7175:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2502,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2499,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"7198:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2500,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"7217:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7198:24:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7175:47:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2503,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"7244:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2504,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"7260:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7244:32:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2513,"nodeType":"IfStatement","src":"7240:112:46","trueBody":{"errorCall":{"arguments":[{"id":2507,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"7312:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2508,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7319:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2509,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"7328:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2510,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2463,"src":"7346:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2506,"name":"ERC20InsufficientAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1825,"src":"7285:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256) pure"}},"id":2511,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7285:67:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2512,"nodeType":"RevertStatement","src":"7278:74:46"}},{"expression":{"id":2522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"expression":{"id":2514,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2457,"src":"7370:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2518,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7372:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"7370:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":2519,"indexExpression":{"id":2516,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"7383:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"7370:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2520,"indexExpression":{"id":2517,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7390:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"7370:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2521,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"7401:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7370:43:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2523,"nodeType":"ExpressionStatement","src":"7370:43:46"},{"expression":{"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2524,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"7431:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2525,"name":"newAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2498,"src":"7450:12:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7431:31:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2527,"nodeType":"ExpressionStatement","src":"7431:31:46"}]}]}},{"eventCall":{"arguments":[{"id":2534,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2459,"src":"7523:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2535,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2461,"src":"7530:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2536,"name":"currentAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2478,"src":"7539:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2531,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"7501:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7514:8:46","memberName":"Approval","nodeType":"MemberAccess","referencedDeclaration":1882,"src":"7501:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2537,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7501:55:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2538,"nodeType":"EmitStatement","src":"7496:60:46"}]},"documentation":{"id":2454,"nodeType":"StructuredDocumentation","src":"6034:660:46","text":"@notice Decreases the allowance granted to an account by an owner.\n @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\n @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\n @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\n @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\n @param owner The account decreasing the allowance.\n @param spender The account whose allowance is being decreased.\n @param value The allowance amount decrease."},"id":2540,"implemented":true,"kind":"function","modifiers":[],"name":"decreaseAllowance","nameLocation":"6708:17:46","nodeType":"FunctionDefinition","parameters":{"id":2464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2457,"mutability":"mutable","name":"s","nameLocation":"6741:1:46","nodeType":"VariableDeclaration","scope":2540,"src":"6726:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2456,"nodeType":"UserDefinedTypeName","pathNode":{"id":2455,"name":"Layout","nameLocations":["6726:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"6726:6:46"},"referencedDeclaration":2170,"src":"6726:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2459,"mutability":"mutable","name":"owner","nameLocation":"6752:5:46","nodeType":"VariableDeclaration","scope":2540,"src":"6744:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2458,"name":"address","nodeType":"ElementaryTypeName","src":"6744:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2461,"mutability":"mutable","name":"spender","nameLocation":"6767:7:46","nodeType":"VariableDeclaration","scope":2540,"src":"6759:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2460,"name":"address","nodeType":"ElementaryTypeName","src":"6759:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2463,"mutability":"mutable","name":"value","nameLocation":"6784:5:46","nodeType":"VariableDeclaration","scope":2540,"src":"6776:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2462,"name":"uint256","nodeType":"ElementaryTypeName","src":"6776:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6725:65:46"},"returnParameters":{"id":2465,"nodeType":"ParameterList","parameters":[],"src":"6800:0:46"},"scope":3647,"src":"6699:864:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2622,"nodeType":"Block","src":"8210:555:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2558,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2553,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"8224:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2556,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8238:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2555,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8230:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2554,"name":"address","nodeType":"ElementaryTypeName","src":"8230:7:46","typeDescriptions":{}}},"id":2557,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8230:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8224:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2563,"nodeType":"IfStatement","src":"8220:61:46","trueBody":{"errorCall":{"arguments":[{"id":2560,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8276:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2559,"name":"ERC20TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"8249:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2561,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:32:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2562,"nodeType":"RevertStatement","src":"8242:39:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2566,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2564,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"8296:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2565,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8305:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8296:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2613,"nodeType":"IfStatement","src":"8292:413:46","trueBody":{"id":2612,"nodeType":"Block","src":"8308:397:46","statements":[{"assignments":[2568],"declarations":[{"constant":false,"id":2568,"mutability":"mutable","name":"balance","nameLocation":"8330:7:46","nodeType":"VariableDeclaration","scope":2612,"src":"8322:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2567,"name":"uint256","nodeType":"ElementaryTypeName","src":"8322:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2573,"initialValue":{"baseExpression":{"expression":{"id":2569,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"8340:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2570,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8342:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"8340:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2572,"indexExpression":{"id":2571,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8351:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8340:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8322:34:46"},{"id":2611,"nodeType":"UncheckedBlock","src":"8370:325:46","statements":[{"assignments":[2575],"declarations":[{"constant":false,"id":2575,"mutability":"mutable","name":"newBalance","nameLocation":"8406:10:46","nodeType":"VariableDeclaration","scope":2611,"src":"8398:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2574,"name":"uint256","nodeType":"ElementaryTypeName","src":"8398:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2579,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2576,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"8419:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2577,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"8429:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8419:15:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8398:36:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2580,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"8456:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2581,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"8470:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8456:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2589,"nodeType":"IfStatement","src":"8452:80:46","trueBody":{"errorCall":{"arguments":[{"id":2584,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8511:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2585,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2568,"src":"8517:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2586,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"8526:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2583,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"8486:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8486:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2588,"nodeType":"RevertStatement","src":"8479:53:46"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2592,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2590,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8554:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2591,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"8562:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8554:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2610,"nodeType":"IfStatement","src":"8550:131:46","trueBody":{"id":2609,"nodeType":"Block","src":"8566:115:46","statements":[{"expression":{"id":2599,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2593,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"8588:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8590:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"8588:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2597,"indexExpression":{"id":2595,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8599:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8588:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2598,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2575,"src":"8607:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8588:29:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2600,"nodeType":"ExpressionStatement","src":"8588:29:46"},{"expression":{"id":2607,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2601,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2544,"src":"8639:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2604,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8641:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"8639:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2605,"indexExpression":{"id":2603,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"8650:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"8639:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2606,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"8657:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8639:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2608,"nodeType":"ExpressionStatement","src":"8639:23:46"}]}}]}]}},{"eventCall":{"arguments":[{"id":2617,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2546,"src":"8742:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2618,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2548,"src":"8748:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2619,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2550,"src":"8752:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2614,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"8720:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2616,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8733:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"8720:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2620,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8720:38:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2621,"nodeType":"EmitStatement","src":"8715:43:46"}]},"documentation":{"id":2541,"nodeType":"StructuredDocumentation","src":"7569:550:46","text":"@notice Transfers an amount of tokens from an account to a recipient.\n @dev Note: This function implements {ERC20-transfer(address,uint256)}.\n @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Emits a {Transfer} event.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer."},"id":2623,"implemented":true,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"8133:8:46","nodeType":"FunctionDefinition","parameters":{"id":2551,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2544,"mutability":"mutable","name":"s","nameLocation":"8157:1:46","nodeType":"VariableDeclaration","scope":2623,"src":"8142:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2543,"nodeType":"UserDefinedTypeName","pathNode":{"id":2542,"name":"Layout","nameLocations":["8142:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"8142:6:46"},"referencedDeclaration":2170,"src":"8142:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2546,"mutability":"mutable","name":"from","nameLocation":"8168:4:46","nodeType":"VariableDeclaration","scope":2623,"src":"8160:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2545,"name":"address","nodeType":"ElementaryTypeName","src":"8160:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2548,"mutability":"mutable","name":"to","nameLocation":"8182:2:46","nodeType":"VariableDeclaration","scope":2623,"src":"8174:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2547,"name":"address","nodeType":"ElementaryTypeName","src":"8174:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2550,"mutability":"mutable","name":"value","nameLocation":"8194:5:46","nodeType":"VariableDeclaration","scope":2623,"src":"8186:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2549,"name":"uint256","nodeType":"ElementaryTypeName","src":"8186:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8141:59:46"},"returnParameters":{"id":2552,"nodeType":"ParameterList","parameters":[],"src":"8210:0:46"},"scope":3647,"src":"8124:641:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2659,"nodeType":"Block","src":"9725:138:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2640,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2638,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"9739:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2639,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9747:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"9739:14:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2650,"nodeType":"IfStatement","src":"9735:85:46","trueBody":{"id":2649,"nodeType":"Block","src":"9755:65:46","statements":[{"expression":{"arguments":[{"id":2644,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"9789:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2645,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2629,"src":"9795:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2646,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"9803:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2641,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"9769:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2643,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9771:17:46","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2540,"src":"9769:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":2647,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9769:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2648,"nodeType":"ExpressionStatement","src":"9769:40:46"}]}},{"expression":{"arguments":[{"id":2654,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2631,"src":"9840:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2655,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2633,"src":"9846:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2656,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2635,"src":"9850:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2651,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2627,"src":"9829:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2653,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9831:8:46","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2623,"src":"9829:10:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":2657,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9829:27:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2658,"nodeType":"ExpressionStatement","src":"9829:27:46"}]},"documentation":{"id":2624,"nodeType":"StructuredDocumentation","src":"8771:843:46","text":"@notice Transfers an amount of tokens from an account to a recipient by a sender.\n @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\n @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if `sender` is not `from`.\n @param sender The message sender.\n @param from The account which owns the tokens to transfer.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer."},"id":2660,"implemented":true,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"9628:12:46","nodeType":"FunctionDefinition","parameters":{"id":2636,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2627,"mutability":"mutable","name":"s","nameLocation":"9656:1:46","nodeType":"VariableDeclaration","scope":2660,"src":"9641:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2626,"nodeType":"UserDefinedTypeName","pathNode":{"id":2625,"name":"Layout","nameLocations":["9641:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"9641:6:46"},"referencedDeclaration":2170,"src":"9641:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2629,"mutability":"mutable","name":"sender","nameLocation":"9667:6:46","nodeType":"VariableDeclaration","scope":2660,"src":"9659:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2628,"name":"address","nodeType":"ElementaryTypeName","src":"9659:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2631,"mutability":"mutable","name":"from","nameLocation":"9683:4:46","nodeType":"VariableDeclaration","scope":2660,"src":"9675:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2630,"name":"address","nodeType":"ElementaryTypeName","src":"9675:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2633,"mutability":"mutable","name":"to","nameLocation":"9697:2:46","nodeType":"VariableDeclaration","scope":2660,"src":"9689:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2632,"name":"address","nodeType":"ElementaryTypeName","src":"9689:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2635,"mutability":"mutable","name":"value","nameLocation":"9709:5:46","nodeType":"VariableDeclaration","scope":2660,"src":"9701:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2634,"name":"uint256","nodeType":"ElementaryTypeName","src":"9701:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9640:75:46"},"returnParameters":{"id":2637,"nodeType":"ParameterList","parameters":[],"src":"9725:0:46"},"scope":3647,"src":"9619:244:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":2834,"nodeType":"Block","src":"11007:1674:46","statements":[{"assignments":[2676],"declarations":[{"constant":false,"id":2676,"mutability":"mutable","name":"length","nameLocation":"11025:6:46","nodeType":"VariableDeclaration","scope":2834,"src":"11017:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2675,"name":"uint256","nodeType":"ElementaryTypeName","src":"11017:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2679,"initialValue":{"expression":{"id":2677,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"11034:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2678,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11045:6:46","memberName":"length","nodeType":"MemberAccess","src":"11034:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11017:34:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2680,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"11065:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2681,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"11075:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11082:6:46","memberName":"length","nodeType":"MemberAccess","src":"11075:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11065:23:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2687,"nodeType":"IfStatement","src":"11061:62:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2684,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"11097:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2685,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11097:26:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2686,"nodeType":"RevertStatement","src":"11090:33:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2690,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2688,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"11138:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2689,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11148:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11138:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2692,"nodeType":"IfStatement","src":"11134:24:46","trueBody":{"functionReturnParameters":2674,"id":2691,"nodeType":"Return","src":"11151:7:46"}},{"assignments":[2694],"declarations":[{"constant":false,"id":2694,"mutability":"mutable","name":"balance","nameLocation":"11176:7:46","nodeType":"VariableDeclaration","scope":2834,"src":"11168:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2693,"name":"uint256","nodeType":"ElementaryTypeName","src":"11168:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2699,"initialValue":{"baseExpression":{"expression":{"id":2695,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"11186:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2696,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11188:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"11186:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2698,"indexExpression":{"id":2697,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"11197:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11186:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11168:34:46"},{"assignments":[2701],"declarations":[{"constant":false,"id":2701,"mutability":"mutable","name":"totalValue","nameLocation":"11221:10:46","nodeType":"VariableDeclaration","scope":2834,"src":"11213:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2700,"name":"uint256","nodeType":"ElementaryTypeName","src":"11213:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2702,"nodeType":"VariableDeclarationStatement","src":"11213:18:46"},{"assignments":[2704],"declarations":[{"constant":false,"id":2704,"mutability":"mutable","name":"selfTransferTotalValue","nameLocation":"11249:22:46","nodeType":"VariableDeclaration","scope":2834,"src":"11241:30:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2703,"name":"uint256","nodeType":"ElementaryTypeName","src":"11241:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2705,"nodeType":"VariableDeclarationStatement","src":"11241:30:46"},{"id":2833,"nodeType":"UncheckedBlock","src":"11281:1394:46","statements":[{"body":{"id":2796,"nodeType":"Block","src":"11339:874:46","statements":[{"assignments":[2716],"declarations":[{"constant":false,"id":2716,"mutability":"mutable","name":"to","nameLocation":"11365:2:46","nodeType":"VariableDeclaration","scope":2796,"src":"11357:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2715,"name":"address","nodeType":"ElementaryTypeName","src":"11357:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2720,"initialValue":{"baseExpression":{"id":2717,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2669,"src":"11370:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2719,"indexExpression":{"id":2718,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"11381:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11370:13:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"11357:26:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2726,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2721,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"11405:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11419:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2723,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"11411:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2722,"name":"address","nodeType":"ElementaryTypeName","src":"11411:7:46","typeDescriptions":{}}},"id":2725,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11411:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11405:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2731,"nodeType":"IfStatement","src":"11401:61:46","trueBody":{"errorCall":{"arguments":[{"id":2728,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"11457:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2727,"name":"ERC20TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"11430:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2729,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11430:32:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2730,"nodeType":"RevertStatement","src":"11423:39:46"}},{"assignments":[2733],"declarations":[{"constant":false,"id":2733,"mutability":"mutable","name":"value","nameLocation":"11489:5:46","nodeType":"VariableDeclaration","scope":2796,"src":"11481:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2732,"name":"uint256","nodeType":"ElementaryTypeName","src":"11481:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2737,"initialValue":{"baseExpression":{"id":2734,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2672,"src":"11497:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2736,"indexExpression":{"id":2735,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"11504:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11497:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11481:25:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2740,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2738,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"11528:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2739,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11537:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11528:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2787,"nodeType":"IfStatement","src":"11524:614:46","trueBody":{"id":2786,"nodeType":"Block","src":"11540:598:46","statements":[{"assignments":[2742],"declarations":[{"constant":false,"id":2742,"mutability":"mutable","name":"newTotalValue","nameLocation":"11570:13:46","nodeType":"VariableDeclaration","scope":2786,"src":"11562:21:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2741,"name":"uint256","nodeType":"ElementaryTypeName","src":"11562:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2746,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2745,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2743,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11586:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2744,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"11599:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11586:18:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11562:42:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2749,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2747,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"11630:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2748,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11647:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11630:27:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2753,"nodeType":"IfStatement","src":"11626:74:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2750,"name":"ERC20BatchTransferValuesOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"11666:32:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2751,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11666:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2752,"nodeType":"RevertStatement","src":"11659:41:46"}},{"expression":{"id":2756,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2754,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"11722:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2755,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2742,"src":"11735:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11722:26:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2757,"nodeType":"ExpressionStatement","src":"11722:26:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2758,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"11774:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2759,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"11782:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"11774:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2784,"nodeType":"Block","src":"11864:256:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2770,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"11894:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2771,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"11902:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11894:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2779,"nodeType":"IfStatement","src":"11890:74:46","trueBody":{"errorCall":{"arguments":[{"id":2774,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"11943:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2775,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"11949:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2776,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"11958:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2773,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"11918:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2777,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11918:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2778,"nodeType":"RevertStatement","src":"11911:53:46"}},{"expression":{"id":2782,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2780,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"11990:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2781,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"12016:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11990:31:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2783,"nodeType":"ExpressionStatement","src":"11990:31:46"}]},"id":2785,"nodeType":"IfStatement","src":"11770:350:46","trueBody":{"id":2769,"nodeType":"Block","src":"11786:72:46","statements":[{"expression":{"id":2767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2761,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"11812:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2764,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11814:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"11812:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2765,"indexExpression":{"id":2763,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"11823:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"11812:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2766,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"11830:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11812:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2768,"nodeType":"ExpressionStatement","src":"11812:23:46"}]}}]}},{"eventCall":{"arguments":[{"id":2791,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"12182:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2792,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"12188:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2793,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2733,"src":"12192:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2788,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"12160:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12173:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"12160:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12160:38:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"EmitStatement","src":"12155:43:46"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2711,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2709,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"11321:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2710,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2676,"src":"11326:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11321:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2797,"initializationExpression":{"assignments":[2707],"declarations":[{"constant":false,"id":2707,"mutability":"mutable","name":"i","nameLocation":"11318:1:46","nodeType":"VariableDeclaration","scope":2797,"src":"11310:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2706,"name":"uint256","nodeType":"ElementaryTypeName","src":"11310:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2708,"nodeType":"VariableDeclarationStatement","src":"11310:9:46"},"loopExpression":{"expression":{"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"11334:3:46","subExpression":{"id":2712,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2707,"src":"11336:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2714,"nodeType":"ExpressionStatement","src":"11334:3:46"},"nodeType":"ForStatement","src":"11305:908:46"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2804,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2800,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2798,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"12231:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2799,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12245:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12231:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2803,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2801,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"12250:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2802,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"12264:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12250:36:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12231:55:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2832,"nodeType":"IfStatement","src":"12227:438:46","trueBody":{"id":2831,"nodeType":"Block","src":"12288:377:46","statements":[{"assignments":[2806],"declarations":[{"constant":false,"id":2806,"mutability":"mutable","name":"newBalance","nameLocation":"12314:10:46","nodeType":"VariableDeclaration","scope":2831,"src":"12306:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2805,"name":"uint256","nodeType":"ElementaryTypeName","src":"12306:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2810,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2809,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2807,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"12327:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2808,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"12337:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12327:20:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12306:41:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2811,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"12441:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2812,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"12455:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12441:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2820,"nodeType":"IfStatement","src":"12437:85:46","trueBody":{"errorCall":{"arguments":[{"id":2815,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"12496:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2816,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2694,"src":"12502:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2817,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2701,"src":"12511:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2814,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"12471:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2818,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12471:51:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2819,"nodeType":"RevertStatement","src":"12464:58:46"}},{"expression":{"id":2829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2821,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"12540:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2824,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12542:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"12540:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2825,"indexExpression":{"id":2823,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2666,"src":"12551:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"12540:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2828,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2826,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"12559:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2827,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2704,"src":"12572:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12559:35:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12540:54:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2830,"nodeType":"ExpressionStatement","src":"12540:54:46"}]}}]}]},"documentation":{"id":2661,"nodeType":"StructuredDocumentation","src":"9995:885:46","text":"@notice Transfers multiple amounts of tokens from an account to multiple recipients.\n @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n @dev Emits a {Transfer} event for each transfer.\n @param from The account transferring the tokens.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`."},"id":2835,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransfer","nameLocation":"10894:13:46","nodeType":"FunctionDefinition","parameters":{"id":2673,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2664,"mutability":"mutable","name":"s","nameLocation":"10923:1:46","nodeType":"VariableDeclaration","scope":2835,"src":"10908:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2663,"nodeType":"UserDefinedTypeName","pathNode":{"id":2662,"name":"Layout","nameLocations":["10908:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"10908:6:46"},"referencedDeclaration":2170,"src":"10908:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2666,"mutability":"mutable","name":"from","nameLocation":"10934:4:46","nodeType":"VariableDeclaration","scope":2835,"src":"10926:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2665,"name":"address","nodeType":"ElementaryTypeName","src":"10926:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2669,"mutability":"mutable","name":"recipients","nameLocation":"10959:10:46","nodeType":"VariableDeclaration","scope":2835,"src":"10940:29:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2667,"name":"address","nodeType":"ElementaryTypeName","src":"10940:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2668,"nodeType":"ArrayTypeName","src":"10940:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2672,"mutability":"mutable","name":"values","nameLocation":"10990:6:46","nodeType":"VariableDeclaration","scope":2835,"src":"10971:25:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2670,"name":"uint256","nodeType":"ElementaryTypeName","src":"10971:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2671,"nodeType":"ArrayTypeName","src":"10971:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"10907:90:46"},"returnParameters":{"id":2674,"nodeType":"ParameterList","parameters":[],"src":"11007:0:46"},"scope":3647,"src":"10885:1796:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3024,"nodeType":"Block","src":"14023:1776:46","statements":[{"assignments":[2853],"declarations":[{"constant":false,"id":2853,"mutability":"mutable","name":"length","nameLocation":"14041:6:46","nodeType":"VariableDeclaration","scope":3024,"src":"14033:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2852,"name":"uint256","nodeType":"ElementaryTypeName","src":"14033:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2856,"initialValue":{"expression":{"id":2854,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"14050:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14061:6:46","memberName":"length","nodeType":"MemberAccess","src":"14050:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14033:34:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2860,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2857,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"14081:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":2858,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"14091:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2859,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14098:6:46","memberName":"length","nodeType":"MemberAccess","src":"14091:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14081:23:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2864,"nodeType":"IfStatement","src":"14077:62:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2861,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"14113:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2862,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14113:26:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2863,"nodeType":"RevertStatement","src":"14106:33:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2867,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2865,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"14154:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":2866,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14164:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14154:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2869,"nodeType":"IfStatement","src":"14150:24:46","trueBody":{"functionReturnParameters":2851,"id":2868,"nodeType":"Return","src":"14167:7:46"}},{"assignments":[2871],"declarations":[{"constant":false,"id":2871,"mutability":"mutable","name":"balance","nameLocation":"14192:7:46","nodeType":"VariableDeclaration","scope":3024,"src":"14184:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2870,"name":"uint256","nodeType":"ElementaryTypeName","src":"14184:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2876,"initialValue":{"baseExpression":{"expression":{"id":2872,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"14202:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2873,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14204:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"14202:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2875,"indexExpression":{"id":2874,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"14213:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14202:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14184:34:46"},{"assignments":[2878],"declarations":[{"constant":false,"id":2878,"mutability":"mutable","name":"totalValue","nameLocation":"14237:10:46","nodeType":"VariableDeclaration","scope":3024,"src":"14229:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2877,"name":"uint256","nodeType":"ElementaryTypeName","src":"14229:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2879,"nodeType":"VariableDeclarationStatement","src":"14229:18:46"},{"assignments":[2881],"declarations":[{"constant":false,"id":2881,"mutability":"mutable","name":"selfTransferTotalValue","nameLocation":"14265:22:46","nodeType":"VariableDeclaration","scope":3024,"src":"14257:30:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2880,"name":"uint256","nodeType":"ElementaryTypeName","src":"14257:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2882,"nodeType":"VariableDeclarationStatement","src":"14257:30:46"},{"id":3010,"nodeType":"UncheckedBlock","src":"14297:1396:46","statements":[{"body":{"id":2973,"nodeType":"Block","src":"14355:876:46","statements":[{"assignments":[2893],"declarations":[{"constant":false,"id":2893,"mutability":"mutable","name":"to","nameLocation":"14381:2:46","nodeType":"VariableDeclaration","scope":2973,"src":"14373:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2892,"name":"address","nodeType":"ElementaryTypeName","src":"14373:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2897,"initialValue":{"baseExpression":{"id":2894,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2846,"src":"14386:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":2896,"indexExpression":{"id":2895,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14397:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14386:13:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"14373:26:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2903,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2898,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14421:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":2901,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14435:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":2900,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"14427:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2899,"name":"address","nodeType":"ElementaryTypeName","src":"14427:7:46","typeDescriptions":{}}},"id":2902,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14427:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14421:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2908,"nodeType":"IfStatement","src":"14417:61:46","trueBody":{"errorCall":{"arguments":[{"id":2905,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"14473:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":2904,"name":"ERC20TransferToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1830,"src":"14446:26:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14446:32:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2907,"nodeType":"RevertStatement","src":"14439:39:46"}},{"assignments":[2910],"declarations":[{"constant":false,"id":2910,"mutability":"mutable","name":"value","nameLocation":"14505:5:46","nodeType":"VariableDeclaration","scope":2973,"src":"14497:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2909,"name":"uint256","nodeType":"ElementaryTypeName","src":"14497:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2914,"initialValue":{"baseExpression":{"id":2911,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2849,"src":"14513:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2913,"indexExpression":{"id":2912,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14520:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14513:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14497:25:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2917,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2915,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"14545:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2916,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"14554:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"14545:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2964,"nodeType":"IfStatement","src":"14541:614:46","trueBody":{"id":2963,"nodeType":"Block","src":"14557:598:46","statements":[{"assignments":[2919],"declarations":[{"constant":false,"id":2919,"mutability":"mutable","name":"newTotalValue","nameLocation":"14587:13:46","nodeType":"VariableDeclaration","scope":2963,"src":"14579:21:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2918,"name":"uint256","nodeType":"ElementaryTypeName","src":"14579:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2923,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2922,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2920,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"14603:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":2921,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"14616:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14603:18:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"14579:42:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2926,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2924,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"14647:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":2925,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"14664:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14647:27:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2930,"nodeType":"IfStatement","src":"14643:74:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2927,"name":"ERC20BatchTransferValuesOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1807,"src":"14683:32:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2928,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14683:34:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2929,"nodeType":"RevertStatement","src":"14676:41:46"}},{"expression":{"id":2933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2931,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"14739:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2932,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2919,"src":"14752:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14739:26:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2934,"nodeType":"ExpressionStatement","src":"14739:26:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":2937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2935,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"14791:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2936,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14799:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"14791:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2961,"nodeType":"Block","src":"14881:256:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2947,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"14911:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2948,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"14919:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14911:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2956,"nodeType":"IfStatement","src":"14907:74:46","trueBody":{"errorCall":{"arguments":[{"id":2951,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"14960:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2952,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"14966:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2953,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"14975:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2950,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"14935:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2954,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14935:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2955,"nodeType":"RevertStatement","src":"14928:53:46"}},{"expression":{"id":2959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2957,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"15007:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2958,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"15033:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15007:31:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2960,"nodeType":"ExpressionStatement","src":"15007:31:46"}]},"id":2962,"nodeType":"IfStatement","src":"14787:350:46","trueBody":{"id":2946,"nodeType":"Block","src":"14803:72:46","statements":[{"expression":{"id":2944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2938,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"14829:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":2941,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"14831:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"14829:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":2942,"indexExpression":{"id":2940,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"14840:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"14829:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":2943,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"14847:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14829:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2945,"nodeType":"ExpressionStatement","src":"14829:23:46"}]}}]}},{"eventCall":{"arguments":[{"id":2968,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"15200:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2969,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2893,"src":"15206:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2970,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"15210:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2965,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"15178:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":2967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"15191:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"15178:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":2971,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15178:38:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2972,"nodeType":"EmitStatement","src":"15173:43:46"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2888,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2886,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14337:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2887,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2853,"src":"14342:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14337:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2974,"initializationExpression":{"assignments":[2884],"declarations":[{"constant":false,"id":2884,"mutability":"mutable","name":"i","nameLocation":"14334:1:46","nodeType":"VariableDeclaration","scope":2974,"src":"14326:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2883,"name":"uint256","nodeType":"ElementaryTypeName","src":"14326:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2885,"nodeType":"VariableDeclarationStatement","src":"14326:9:46"},"loopExpression":{"expression":{"id":2890,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"14350:3:46","subExpression":{"id":2889,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2884,"src":"14352:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2891,"nodeType":"ExpressionStatement","src":"14350:3:46"},"nodeType":"ForStatement","src":"14321:910:46"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2975,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"15249:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":2976,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"15263:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"15249:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2980,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2978,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"15268:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":2979,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"15282:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15268:36:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"15249:55:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3009,"nodeType":"IfStatement","src":"15245:438:46","trueBody":{"id":3008,"nodeType":"Block","src":"15306:377:46","statements":[{"assignments":[2983],"declarations":[{"constant":false,"id":2983,"mutability":"mutable","name":"newBalance","nameLocation":"15332:10:46","nodeType":"VariableDeclaration","scope":3008,"src":"15324:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2982,"name":"uint256","nodeType":"ElementaryTypeName","src":"15324:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2987,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2986,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2984,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"15345:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":2985,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"15355:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15345:20:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"15324:41:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2988,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"15459:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":2989,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"15473:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15459:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2997,"nodeType":"IfStatement","src":"15455:85:46","trueBody":{"errorCall":{"arguments":[{"id":2992,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"15514:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2993,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2871,"src":"15520:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":2994,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"15529:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2991,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"15489:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":2995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15489:51:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2996,"nodeType":"RevertStatement","src":"15482:58:46"}},{"expression":{"id":3006,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":2998,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"15558:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3001,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15560:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"15558:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3002,"indexExpression":{"id":3000,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"15569:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"15558:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3005,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3003,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2983,"src":"15577:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3004,"name":"selfTransferTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2881,"src":"15590:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15577:35:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"15558:54:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3007,"nodeType":"ExpressionStatement","src":"15558:54:46"}]}}]},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3013,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3011,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"15707:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3012,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"15715:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"15707:14:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3023,"nodeType":"IfStatement","src":"15703:90:46","trueBody":{"id":3022,"nodeType":"Block","src":"15723:70:46","statements":[{"expression":{"arguments":[{"id":3017,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2843,"src":"15757:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3018,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2841,"src":"15763:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3019,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2878,"src":"15771:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3014,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2839,"src":"15737:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3016,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"15739:17:46","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2540,"src":"15737:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3020,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"15737:45:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3021,"nodeType":"ExpressionStatement","src":"15737:45:46"}]}}]},"documentation":{"id":2836,"nodeType":"StructuredDocumentation","src":"12687:1189:46","text":"@notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\n @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\n @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\n @dev Emits a {Transfer} event for each transfer.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account transferring the tokens.\n @param recipients The list of accounts to transfer the tokens to.\n @param values The list of amounts of tokens to transfer to each of `recipients`."},"id":3025,"implemented":true,"kind":"function","modifiers":[],"name":"batchTransferFrom","nameLocation":"13890:17:46","nodeType":"FunctionDefinition","parameters":{"id":2850,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2839,"mutability":"mutable","name":"s","nameLocation":"13923:1:46","nodeType":"VariableDeclaration","scope":3025,"src":"13908:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":2838,"nodeType":"UserDefinedTypeName","pathNode":{"id":2837,"name":"Layout","nameLocations":["13908:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"13908:6:46"},"referencedDeclaration":2170,"src":"13908:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":2841,"mutability":"mutable","name":"sender","nameLocation":"13934:6:46","nodeType":"VariableDeclaration","scope":3025,"src":"13926:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2840,"name":"address","nodeType":"ElementaryTypeName","src":"13926:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2843,"mutability":"mutable","name":"from","nameLocation":"13950:4:46","nodeType":"VariableDeclaration","scope":3025,"src":"13942:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2842,"name":"address","nodeType":"ElementaryTypeName","src":"13942:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2846,"mutability":"mutable","name":"recipients","nameLocation":"13975:10:46","nodeType":"VariableDeclaration","scope":3025,"src":"13956:29:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":2844,"name":"address","nodeType":"ElementaryTypeName","src":"13956:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2845,"nodeType":"ArrayTypeName","src":"13956:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":2849,"mutability":"mutable","name":"values","nameLocation":"14006:6:46","nodeType":"VariableDeclaration","scope":3025,"src":"13987:25:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2847,"name":"uint256","nodeType":"ElementaryTypeName","src":"13987:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2848,"nodeType":"ArrayTypeName","src":"13987:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"13907:106:46"},"returnParameters":{"id":2851,"nodeType":"ParameterList","parameters":[],"src":"14023:0:46"},"scope":3647,"src":"13881:1918:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3061,"nodeType":"Block","src":"17062:148:46","statements":[{"expression":{"arguments":[{"id":3043,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"17083:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3044,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"17089:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3045,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"17093:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3040,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3029,"src":"17072:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3042,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"17074:8:46","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":2623,"src":"17072:10:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17072:27:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3047,"nodeType":"ExpressionStatement","src":"17072:27:46"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3048,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"17113:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"17116:10:46","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"17113:13:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3050,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17113:15:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3060,"nodeType":"IfStatement","src":"17109:95:46","trueBody":{"id":3059,"nodeType":"Block","src":"17130:74:46","statements":[{"expression":{"arguments":[{"id":3052,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"17165:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3053,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3031,"src":"17171:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3054,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3033,"src":"17177:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3055,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3035,"src":"17181:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3056,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3037,"src":"17188:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3051,"name":"_callOnERC20Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"17144:20:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":3057,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"17144:49:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3058,"nodeType":"ExpressionStatement","src":"17144:49:46"}]}}]},"documentation":{"id":3026,"nodeType":"StructuredDocumentation","src":"15930:1016:46","text":"@notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract."},"id":3062,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"16960:12:46","nodeType":"FunctionDefinition","parameters":{"id":3038,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3029,"mutability":"mutable","name":"s","nameLocation":"16988:1:46","nodeType":"VariableDeclaration","scope":3062,"src":"16973:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3028,"nodeType":"UserDefinedTypeName","pathNode":{"id":3027,"name":"Layout","nameLocations":["16973:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"16973:6:46"},"referencedDeclaration":2170,"src":"16973:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3031,"mutability":"mutable","name":"from","nameLocation":"16999:4:46","nodeType":"VariableDeclaration","scope":3062,"src":"16991:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3030,"name":"address","nodeType":"ElementaryTypeName","src":"16991:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3033,"mutability":"mutable","name":"to","nameLocation":"17013:2:46","nodeType":"VariableDeclaration","scope":3062,"src":"17005:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3032,"name":"address","nodeType":"ElementaryTypeName","src":"17005:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3035,"mutability":"mutable","name":"value","nameLocation":"17025:5:46","nodeType":"VariableDeclaration","scope":3062,"src":"17017:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3034,"name":"uint256","nodeType":"ElementaryTypeName","src":"17017:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3037,"mutability":"mutable","name":"data","nameLocation":"17047:4:46","nodeType":"VariableDeclaration","scope":3062,"src":"17032:19:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3036,"name":"bytes","nodeType":"ElementaryTypeName","src":"17032:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"16972:80:46"},"returnParameters":{"id":3039,"nodeType":"ParameterList","parameters":[],"src":"17062:0:46"},"scope":3647,"src":"16951:259:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3101,"nodeType":"Block","src":"18663:162:46","statements":[{"expression":{"arguments":[{"id":3082,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"18688:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3083,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"18696:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3084,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"18702:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3085,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"18706:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3079,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3066,"src":"18673:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3081,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"18675:12:46","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":2660,"src":"18673:14:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,address,uint256)"}},"id":3086,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18673:39:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3087,"nodeType":"ExpressionStatement","src":"18673:39:46"},{"condition":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":3088,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"18726:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"18729:10:46","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"18726:13:46","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":3090,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18726:15:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3100,"nodeType":"IfStatement","src":"18722:97:46","trueBody":{"id":3099,"nodeType":"Block","src":"18743:76:46","statements":[{"expression":{"arguments":[{"id":3092,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3068,"src":"18778:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3093,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3070,"src":"18786:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3094,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3072,"src":"18792:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3095,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3074,"src":"18796:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3096,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3076,"src":"18803:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"id":3091,"name":"_callOnERC20Received","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3646,"src":"18757:20:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (address,address,address,uint256,bytes memory)"}},"id":3097,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"18757:51:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3098,"nodeType":"ExpressionStatement","src":"18757:51:46"}]}}]},"documentation":{"id":3063,"nodeType":"StructuredDocumentation","src":"17216:1311:46","text":"@notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\n @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\n @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\n @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account transferring the tokens.\n @param to The account to transfer the tokens to.\n @param value The amount of tokens to transfer.\n @param data Optional additional data with no specified format, to be passed to the receiver contract."},"id":3102,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"18541:16:46","nodeType":"FunctionDefinition","parameters":{"id":3077,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3066,"mutability":"mutable","name":"s","nameLocation":"18573:1:46","nodeType":"VariableDeclaration","scope":3102,"src":"18558:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3065,"nodeType":"UserDefinedTypeName","pathNode":{"id":3064,"name":"Layout","nameLocations":["18558:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"18558:6:46"},"referencedDeclaration":2170,"src":"18558:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3068,"mutability":"mutable","name":"sender","nameLocation":"18584:6:46","nodeType":"VariableDeclaration","scope":3102,"src":"18576:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3067,"name":"address","nodeType":"ElementaryTypeName","src":"18576:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3070,"mutability":"mutable","name":"from","nameLocation":"18600:4:46","nodeType":"VariableDeclaration","scope":3102,"src":"18592:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3069,"name":"address","nodeType":"ElementaryTypeName","src":"18592:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3072,"mutability":"mutable","name":"to","nameLocation":"18614:2:46","nodeType":"VariableDeclaration","scope":3102,"src":"18606:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3071,"name":"address","nodeType":"ElementaryTypeName","src":"18606:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3074,"mutability":"mutable","name":"value","nameLocation":"18626:5:46","nodeType":"VariableDeclaration","scope":3102,"src":"18618:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3073,"name":"uint256","nodeType":"ElementaryTypeName","src":"18618:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3076,"mutability":"mutable","name":"data","nameLocation":"18648:4:46","nodeType":"VariableDeclaration","scope":3102,"src":"18633:19:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3075,"name":"bytes","nodeType":"ElementaryTypeName","src":"18633:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"18557:96:46"},"returnParameters":{"id":3078,"nodeType":"ParameterList","parameters":[],"src":"18663:0:46"},"scope":3647,"src":"18532:293:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3174,"nodeType":"Block","src":"19530:508:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3118,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3113,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"19544:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3116,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19558:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3115,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"19550:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3114,"name":"address","nodeType":"ElementaryTypeName","src":"19550:7:46","typeDescriptions":{}}},"id":3117,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19550:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"19544:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3122,"nodeType":"IfStatement","src":"19540:53:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3119,"name":"ERC20MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"19569:22:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3120,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19569:24:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3121,"nodeType":"RevertStatement","src":"19562:31:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"19607:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"19616:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"19607:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3162,"nodeType":"IfStatement","src":"19603:370:46","trueBody":{"id":3161,"nodeType":"Block","src":"19619:354:46","statements":[{"assignments":[3127],"declarations":[{"constant":false,"id":3127,"mutability":"mutable","name":"supply","nameLocation":"19641:6:46","nodeType":"VariableDeclaration","scope":3161,"src":"19633:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3126,"name":"uint256","nodeType":"ElementaryTypeName","src":"19633:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3130,"initialValue":{"expression":{"id":3128,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"19650:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3129,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19652:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"19650:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19633:25:46"},{"id":3160,"nodeType":"UncheckedBlock","src":"19672:291:46","statements":[{"assignments":[3132],"declarations":[{"constant":false,"id":3132,"mutability":"mutable","name":"newSupply","nameLocation":"19708:9:46","nodeType":"VariableDeclaration","scope":3160,"src":"19700:17:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3131,"name":"uint256","nodeType":"ElementaryTypeName","src":"19700:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3136,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3135,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3133,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"19720:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3134,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"19729:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19720:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"19700:34:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3139,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3137,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"19756:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3138,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"19769:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19756:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3145,"nodeType":"IfStatement","src":"19752:71:46","trueBody":{"errorCall":{"arguments":[{"id":3141,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3127,"src":"19809:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3142,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"19817:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3140,"name":"ERC20TotalSupplyOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"19784:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":3143,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19784:39:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3144,"nodeType":"RevertStatement","src":"19777:46:46"}},{"expression":{"id":3150,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3146,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"19841:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3148,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"19843:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"19841:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3149,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3132,"src":"19852:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19841:20:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3151,"nodeType":"ExpressionStatement","src":"19841:20:46"},{"expression":{"id":3158,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3152,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3106,"src":"19879:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3155,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"19881:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"19879:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3156,"indexExpression":{"id":3154,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"19890:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"19879:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3157,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"19897:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"19879:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3159,"nodeType":"ExpressionStatement","src":"19879:23:46"}]}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"20017:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3167,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"20009:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3166,"name":"address","nodeType":"ElementaryTypeName","src":"20009:7:46","typeDescriptions":{}}},"id":3169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"20009:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3170,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3108,"src":"20021:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3171,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3110,"src":"20025:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3163,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"19987:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":3165,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"20000:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"19987:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"19987:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3173,"nodeType":"EmitStatement","src":"19982:49:46"}]},"documentation":{"id":3103,"nodeType":"StructuredDocumentation","src":"18949:508:46","text":"@notice Mints an amount of tokens to a recipient, increasing the total supply.\n @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\n @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\n @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n @dev Emits a {Transfer} event with `from` set to the zero address.\n @param to The account to mint the tokens to.\n @param value The amount of tokens to mint."},"id":3175,"implemented":true,"kind":"function","modifiers":[],"name":"mint","nameLocation":"19471:4:46","nodeType":"FunctionDefinition","parameters":{"id":3111,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3106,"mutability":"mutable","name":"s","nameLocation":"19491:1:46","nodeType":"VariableDeclaration","scope":3175,"src":"19476:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3105,"nodeType":"UserDefinedTypeName","pathNode":{"id":3104,"name":"Layout","nameLocations":["19476:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"19476:6:46"},"referencedDeclaration":2170,"src":"19476:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3108,"mutability":"mutable","name":"to","nameLocation":"19502:2:46","nodeType":"VariableDeclaration","scope":3175,"src":"19494:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3107,"name":"address","nodeType":"ElementaryTypeName","src":"19494:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3110,"mutability":"mutable","name":"value","nameLocation":"19514:5:46","nodeType":"VariableDeclaration","scope":3175,"src":"19506:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3109,"name":"uint256","nodeType":"ElementaryTypeName","src":"19506:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"19475:45:46"},"returnParameters":{"id":3112,"nodeType":"ParameterList","parameters":[],"src":"19530:0:46"},"scope":3647,"src":"19462:576:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3315,"nodeType":"Block","src":"20968:1133:46","statements":[{"assignments":[3189],"declarations":[{"constant":false,"id":3189,"mutability":"mutable","name":"length","nameLocation":"20986:6:46","nodeType":"VariableDeclaration","scope":3315,"src":"20978:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3188,"name":"uint256","nodeType":"ElementaryTypeName","src":"20978:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3192,"initialValue":{"expression":{"id":3190,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"20995:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3191,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21006:6:46","memberName":"length","nodeType":"MemberAccess","src":"20995:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"20978:34:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3193,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"21026:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3194,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"21036:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3195,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21043:6:46","memberName":"length","nodeType":"MemberAccess","src":"21036:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21026:23:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3200,"nodeType":"IfStatement","src":"21022:62:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3197,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"21058:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21058:26:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3199,"nodeType":"RevertStatement","src":"21051:33:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3201,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"21099:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3202,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21109:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21099:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3205,"nodeType":"IfStatement","src":"21095:24:46","trueBody":{"functionReturnParameters":3187,"id":3204,"nodeType":"Return","src":"21112:7:46"}},{"assignments":[3207],"declarations":[{"constant":false,"id":3207,"mutability":"mutable","name":"totalValue","nameLocation":"21137:10:46","nodeType":"VariableDeclaration","scope":3315,"src":"21129:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3206,"name":"uint256","nodeType":"ElementaryTypeName","src":"21129:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3208,"nodeType":"VariableDeclarationStatement","src":"21129:18:46"},{"id":3314,"nodeType":"UncheckedBlock","src":"21157:938:46","statements":[{"body":{"id":3281,"nodeType":"Block","src":"21215:588:46","statements":[{"assignments":[3219],"declarations":[{"constant":false,"id":3219,"mutability":"mutable","name":"to","nameLocation":"21241:2:46","nodeType":"VariableDeclaration","scope":3281,"src":"21233:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3218,"name":"address","nodeType":"ElementaryTypeName","src":"21233:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3223,"initialValue":{"baseExpression":{"id":3220,"name":"recipients","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3182,"src":"21246:10:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[] memory"}},"id":3222,"indexExpression":{"id":3221,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"21257:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21246:13:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"21233:26:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3229,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3224,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"21281:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":3227,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21295:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3226,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21287:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3225,"name":"address","nodeType":"ElementaryTypeName","src":"21287:7:46","typeDescriptions":{}}},"id":3228,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21287:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"21281:16:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3233,"nodeType":"IfStatement","src":"21277:53:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3230,"name":"ERC20MintToAddressZero","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1844,"src":"21306:22:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3231,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21306:24:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3232,"nodeType":"RevertStatement","src":"21299:31:46"}},{"assignments":[3235],"declarations":[{"constant":false,"id":3235,"mutability":"mutable","name":"value","nameLocation":"21357:5:46","nodeType":"VariableDeclaration","scope":3281,"src":"21349:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3234,"name":"uint256","nodeType":"ElementaryTypeName","src":"21349:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3239,"initialValue":{"baseExpression":{"id":3236,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3185,"src":"21365:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[] memory"}},"id":3238,"indexExpression":{"id":3237,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"21372:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"21365:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21349:25:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3242,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3240,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"21396:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3241,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21405:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21396:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3269,"nodeType":"IfStatement","src":"21392:330:46","trueBody":{"id":3268,"nodeType":"Block","src":"21408:314:46","statements":[{"assignments":[3244],"declarations":[{"constant":false,"id":3244,"mutability":"mutable","name":"newTotalValue","nameLocation":"21438:13:46","nodeType":"VariableDeclaration","scope":3268,"src":"21430:21:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3243,"name":"uint256","nodeType":"ElementaryTypeName","src":"21430:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3248,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3245,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"21454:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3246,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"21467:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21454:18:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21430:42:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3249,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"21498:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3250,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"21515:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21498:27:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3255,"nodeType":"IfStatement","src":"21494:70:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3252,"name":"ERC20BatchMintValuesOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1847,"src":"21534:28:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3253,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21534:30:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3254,"nodeType":"RevertStatement","src":"21527:37:46"}},{"expression":{"id":3258,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3256,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"21586:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3257,"name":"newTotalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3244,"src":"21599:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21586:26:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3259,"nodeType":"ExpressionStatement","src":"21586:26:46"},{"expression":{"id":3266,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3260,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"21634:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3263,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21636:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"21634:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3264,"indexExpression":{"id":3262,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"21645:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"21634:14:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"21652:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21634:23:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3267,"nodeType":"ExpressionStatement","src":"21634:23:46"}]}},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":3275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21774:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3274,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"21766:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3273,"name":"address","nodeType":"ElementaryTypeName","src":"21766:7:46","typeDescriptions":{}}},"id":3276,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21766:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3277,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3219,"src":"21778:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3278,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3235,"src":"21782:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3270,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"21744:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":3272,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"21757:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"21744:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3279,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21744:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3280,"nodeType":"EmitStatement","src":"21739:49:46"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3214,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3212,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"21197:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3213,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3189,"src":"21202:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21197:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3282,"initializationExpression":{"assignments":[3210],"declarations":[{"constant":false,"id":3210,"mutability":"mutable","name":"i","nameLocation":"21194:1:46","nodeType":"VariableDeclaration","scope":3282,"src":"21186:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3209,"name":"uint256","nodeType":"ElementaryTypeName","src":"21186:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3211,"nodeType":"VariableDeclarationStatement","src":"21186:9:46"},"loopExpression":{"expression":{"id":3216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"21210:3:46","subExpression":{"id":3215,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3210,"src":"21212:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3217,"nodeType":"ExpressionStatement","src":"21210:3:46"},"nodeType":"ForStatement","src":"21181:622:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3285,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3283,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"21821:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"21835:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"21821:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3313,"nodeType":"IfStatement","src":"21817:268:46","trueBody":{"id":3312,"nodeType":"Block","src":"21838:247:46","statements":[{"assignments":[3287],"declarations":[{"constant":false,"id":3287,"mutability":"mutable","name":"supply","nameLocation":"21864:6:46","nodeType":"VariableDeclaration","scope":3312,"src":"21856:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3286,"name":"uint256","nodeType":"ElementaryTypeName","src":"21856:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3290,"initialValue":{"expression":{"id":3288,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"21873:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3289,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"21875:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"21873:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21856:25:46"},{"assignments":[3292],"declarations":[{"constant":false,"id":3292,"mutability":"mutable","name":"newSupply","nameLocation":"21907:9:46","nodeType":"VariableDeclaration","scope":3312,"src":"21899:17:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3291,"name":"uint256","nodeType":"ElementaryTypeName","src":"21899:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3296,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3293,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"21919:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":3294,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"21928:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21919:19:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"21899:39:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3299,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3297,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"21960:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<=","rightExpression":{"id":3298,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"21973:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"21960:19:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3305,"nodeType":"IfStatement","src":"21956:76:46","trueBody":{"errorCall":{"arguments":[{"id":3301,"name":"supply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3287,"src":"22013:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3302,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3207,"src":"22021:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3300,"name":"ERC20TotalSupplyOverflow","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1854,"src":"21988:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":3303,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"21988:44:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3304,"nodeType":"RevertStatement","src":"21981:51:46"}},{"expression":{"id":3310,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3306,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3179,"src":"22050:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3308,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"22052:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"22050:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3309,"name":"newSupply","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3292,"src":"22061:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22050:20:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3311,"nodeType":"ExpressionStatement","src":"22050:20:46"}]}}]}]},"documentation":{"id":3176,"nodeType":"StructuredDocumentation","src":"20044:819:46","text":"@notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\n @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\n @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\n @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\n @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\n @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\n @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\n @param recipients The list of accounts to mint the tokens to.\n @param values The list of amounts of tokens to mint to each of `recipients`."},"id":3316,"implemented":true,"kind":"function","modifiers":[],"name":"batchMint","nameLocation":"20877:9:46","nodeType":"FunctionDefinition","parameters":{"id":3186,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3179,"mutability":"mutable","name":"s","nameLocation":"20902:1:46","nodeType":"VariableDeclaration","scope":3316,"src":"20887:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3178,"nodeType":"UserDefinedTypeName","pathNode":{"id":3177,"name":"Layout","nameLocations":["20887:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"20887:6:46"},"referencedDeclaration":2170,"src":"20887:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3182,"mutability":"mutable","name":"recipients","nameLocation":"20922:10:46","nodeType":"VariableDeclaration","scope":3316,"src":"20905:27:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3180,"name":"address","nodeType":"ElementaryTypeName","src":"20905:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3181,"nodeType":"ArrayTypeName","src":"20905:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3185,"mutability":"mutable","name":"values","nameLocation":"20951:6:46","nodeType":"VariableDeclaration","scope":3316,"src":"20934:23:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3183,"name":"uint256","nodeType":"ElementaryTypeName","src":"20934:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3184,"nodeType":"ArrayTypeName","src":"20934:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"20886:72:46"},"returnParameters":{"id":3187,"nodeType":"ParameterList","parameters":[],"src":"20968:0:46"},"scope":3647,"src":"20868:1233:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3381,"nodeType":"Block","src":"22740:467:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3327,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"22754:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"22763:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"22754:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3369,"nodeType":"IfStatement","src":"22750:389:46","trueBody":{"id":3368,"nodeType":"Block","src":"22766:373:46","statements":[{"assignments":[3331],"declarations":[{"constant":false,"id":3331,"mutability":"mutable","name":"balance","nameLocation":"22788:7:46","nodeType":"VariableDeclaration","scope":3368,"src":"22780:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3330,"name":"uint256","nodeType":"ElementaryTypeName","src":"22780:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3336,"initialValue":{"baseExpression":{"expression":{"id":3332,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"22798:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3333,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"22800:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"22798:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3335,"indexExpression":{"id":3334,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"22809:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"22798:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22780:34:46"},{"id":3367,"nodeType":"UncheckedBlock","src":"22828:301:46","statements":[{"assignments":[3338],"declarations":[{"constant":false,"id":3338,"mutability":"mutable","name":"newBalance","nameLocation":"22864:10:46","nodeType":"VariableDeclaration","scope":3367,"src":"22856:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3337,"name":"uint256","nodeType":"ElementaryTypeName","src":"22856:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3342,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3341,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3339,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"22877:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3340,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"22887:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22877:15:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"22856:36:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3345,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3343,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"22914:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3344,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"22928:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"22914:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3352,"nodeType":"IfStatement","src":"22910:80:46","trueBody":{"errorCall":{"arguments":[{"id":3347,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"22969:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3348,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3331,"src":"22975:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3349,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"22984:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3346,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"22944:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":3350,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"22944:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3351,"nodeType":"RevertStatement","src":"22937:53:46"}},{"expression":{"id":3359,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3353,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"23008:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3356,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"23010:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"23008:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3357,"indexExpression":{"id":3355,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"23019:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"23008:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3358,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3338,"src":"23027:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23008:29:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3360,"nodeType":"ExpressionStatement","src":"23008:29:46"},{"expression":{"id":3365,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3361,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3320,"src":"23055:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"23057:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"23055:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3364,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"23067:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"23055:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3366,"nodeType":"ExpressionStatement","src":"23055:17:46"}]}]}},{"eventCall":{"arguments":[{"id":3373,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3322,"src":"23176:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"23190:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3375,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"23182:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3374,"name":"address","nodeType":"ElementaryTypeName","src":"23182:7:46","typeDescriptions":{}}},"id":3377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23182:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3378,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3324,"src":"23194:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3370,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"23154:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":3372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"23167:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"23154:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3379,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"23154:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3380,"nodeType":"EmitStatement","src":"23149:51:46"}]},"documentation":{"id":3317,"nodeType":"StructuredDocumentation","src":"22225:440:46","text":"@notice Burns an amount of tokens from an account, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @param from The account burning the tokens.\n @param value The amount of tokens to burn."},"id":3382,"implemented":true,"kind":"function","modifiers":[],"name":"burn","nameLocation":"22679:4:46","nodeType":"FunctionDefinition","parameters":{"id":3325,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3320,"mutability":"mutable","name":"s","nameLocation":"22699:1:46","nodeType":"VariableDeclaration","scope":3382,"src":"22684:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3319,"nodeType":"UserDefinedTypeName","pathNode":{"id":3318,"name":"Layout","nameLocations":["22684:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"22684:6:46"},"referencedDeclaration":2170,"src":"22684:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3322,"mutability":"mutable","name":"from","nameLocation":"22710:4:46","nodeType":"VariableDeclaration","scope":3382,"src":"22702:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3321,"name":"address","nodeType":"ElementaryTypeName","src":"22702:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3324,"mutability":"mutable","name":"value","nameLocation":"22724:5:46","nodeType":"VariableDeclaration","scope":3382,"src":"22716:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3323,"name":"uint256","nodeType":"ElementaryTypeName","src":"22716:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"22683:47:46"},"returnParameters":{"id":3326,"nodeType":"ParameterList","parameters":[],"src":"22740:0:46"},"scope":3647,"src":"22670:537:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3415,"nodeType":"Block","src":"24051:130:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3397,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3395,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"24065:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3396,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"24073:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"24065:14:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3407,"nodeType":"IfStatement","src":"24061:85:46","trueBody":{"id":3406,"nodeType":"Block","src":"24081:65:46","statements":[{"expression":{"arguments":[{"id":3401,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"24115:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3402,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3388,"src":"24121:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3403,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"24129:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3398,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"24095:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3400,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24097:17:46","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2540,"src":"24095:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3404,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24095:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3405,"nodeType":"ExpressionStatement","src":"24095:40:46"}]}},{"expression":{"arguments":[{"id":3411,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3390,"src":"24162:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3412,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3392,"src":"24168:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3408,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3386,"src":"24155:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3410,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"24157:4:46","memberName":"burn","nodeType":"MemberAccess","referencedDeclaration":3382,"src":"24155:6:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,uint256)"}},"id":3413,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"24155:19:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3414,"nodeType":"ExpressionStatement","src":"24155:19:46"}]},"documentation":{"id":3383,"nodeType":"StructuredDocumentation","src":"23213:743:46","text":"@notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\n @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\n @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\n @dev Emits a {Transfer} event with `to` set to the zero address.\n @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\n @param sender The message sender.\n @param from The account to burn the tokens from.\n @param value The amount of tokens to burn."},"id":3416,"implemented":true,"kind":"function","modifiers":[],"name":"burnFrom","nameLocation":"23970:8:46","nodeType":"FunctionDefinition","parameters":{"id":3393,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3386,"mutability":"mutable","name":"s","nameLocation":"23994:1:46","nodeType":"VariableDeclaration","scope":3416,"src":"23979:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3385,"nodeType":"UserDefinedTypeName","pathNode":{"id":3384,"name":"Layout","nameLocations":["23979:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"23979:6:46"},"referencedDeclaration":2170,"src":"23979:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3388,"mutability":"mutable","name":"sender","nameLocation":"24005:6:46","nodeType":"VariableDeclaration","scope":3416,"src":"23997:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3387,"name":"address","nodeType":"ElementaryTypeName","src":"23997:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3390,"mutability":"mutable","name":"from","nameLocation":"24021:4:46","nodeType":"VariableDeclaration","scope":3416,"src":"24013:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3389,"name":"address","nodeType":"ElementaryTypeName","src":"24013:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3392,"mutability":"mutable","name":"value","nameLocation":"24035:5:46","nodeType":"VariableDeclaration","scope":3416,"src":"24027:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3391,"name":"uint256","nodeType":"ElementaryTypeName","src":"24027:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"23978:63:46"},"returnParameters":{"id":3394,"nodeType":"ParameterList","parameters":[],"src":"24051:0:46"},"scope":3647,"src":"23961:220:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3551,"nodeType":"Block","src":"25296:1134:46","statements":[{"assignments":[3432],"declarations":[{"constant":false,"id":3432,"mutability":"mutable","name":"length","nameLocation":"25314:6:46","nodeType":"VariableDeclaration","scope":3551,"src":"25306:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3431,"name":"uint256","nodeType":"ElementaryTypeName","src":"25306:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3435,"initialValue":{"expression":{"id":3433,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"25323:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3434,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25330:6:46","memberName":"length","nodeType":"MemberAccess","src":"25323:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25306:30:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3436,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"25350:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":3437,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"25360:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"25367:6:46","memberName":"length","nodeType":"MemberAccess","src":"25360:13:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25350:23:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3443,"nodeType":"IfStatement","src":"25346:62:46","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":3440,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"25382:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":3441,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25382:26:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3442,"nodeType":"RevertStatement","src":"25375:33:46"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3446,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3444,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"25423:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3445,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25433:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25423:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3448,"nodeType":"IfStatement","src":"25419:24:46","trueBody":{"functionReturnParameters":3430,"id":3447,"nodeType":"Return","src":"25436:7:46"}},{"assignments":[3450],"declarations":[{"constant":false,"id":3450,"mutability":"mutable","name":"totalValue","nameLocation":"25461:10:46","nodeType":"VariableDeclaration","scope":3551,"src":"25453:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3449,"name":"uint256","nodeType":"ElementaryTypeName","src":"25453:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3451,"nodeType":"VariableDeclarationStatement","src":"25453:18:46"},{"id":3550,"nodeType":"UncheckedBlock","src":"25481:943:46","statements":[{"body":{"id":3537,"nodeType":"Block","src":"25539:724:46","statements":[{"assignments":[3462],"declarations":[{"constant":false,"id":3462,"mutability":"mutable","name":"from","nameLocation":"25565:4:46","nodeType":"VariableDeclaration","scope":3537,"src":"25557:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3461,"name":"address","nodeType":"ElementaryTypeName","src":"25557:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":3466,"initialValue":{"baseExpression":{"id":3463,"name":"owners","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3425,"src":"25572:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":3465,"indexExpression":{"id":3464,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"25579:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25572:9:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"25557:24:46"},{"assignments":[3468],"declarations":[{"constant":false,"id":3468,"mutability":"mutable","name":"value","nameLocation":"25607:5:46","nodeType":"VariableDeclaration","scope":3537,"src":"25599:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3467,"name":"uint256","nodeType":"ElementaryTypeName","src":"25599:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3472,"initialValue":{"baseExpression":{"id":3469,"name":"values","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3428,"src":"25615:6:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":3471,"indexExpression":{"id":3470,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"25622:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25615:9:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25599:25:46"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":3475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3473,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"25647:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3474,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"25655:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"25647:14:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3485,"nodeType":"IfStatement","src":"25643:101:46","trueBody":{"id":3484,"nodeType":"Block","src":"25663:81:46","statements":[{"expression":{"arguments":[{"id":3479,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"25705:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3480,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3422,"src":"25711:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3481,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"25719:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"25685:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3478,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25687:17:46","memberName":"decreaseAllowance","nodeType":"MemberAccess","referencedDeclaration":2540,"src":"25685:19:46","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$2170_storage_ptr_$_t_address_$_t_address_$_t_uint256_$returns$__$attached_to$_t_struct$_Layout_$2170_storage_ptr_$","typeString":"function (struct ERC20Storage.Layout storage pointer,address,address,uint256)"}},"id":3482,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25685:40:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3483,"nodeType":"ExpressionStatement","src":"25685:40:46"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3488,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3486,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"25766:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3487,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"25775:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"25766:10:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3525,"nodeType":"IfStatement","src":"25762:417:46","trueBody":{"id":3524,"nodeType":"Block","src":"25778:401:46","statements":[{"assignments":[3490],"declarations":[{"constant":false,"id":3490,"mutability":"mutable","name":"balance","nameLocation":"25808:7:46","nodeType":"VariableDeclaration","scope":3524,"src":"25800:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3489,"name":"uint256","nodeType":"ElementaryTypeName","src":"25800:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3495,"initialValue":{"baseExpression":{"expression":{"id":3491,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"25818:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3492,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"25820:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"25818:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3494,"indexExpression":{"id":3493,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"25829:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"25818:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25800:34:46"},{"assignments":[3497],"declarations":[{"constant":false,"id":3497,"mutability":"mutable","name":"newBalance","nameLocation":"25864:10:46","nodeType":"VariableDeclaration","scope":3524,"src":"25856:18:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3496,"name":"uint256","nodeType":"ElementaryTypeName","src":"25856:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3501,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3498,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"25877:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":3499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"25887:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25877:15:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"25856:36:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3502,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"25918:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":3503,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"25932:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25918:21:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3511,"nodeType":"IfStatement","src":"25914:80:46","trueBody":{"errorCall":{"arguments":[{"id":3506,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"25973:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3507,"name":"balance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3490,"src":"25979:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3508,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"25988:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":3505,"name":"ERC20InsufficientBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1839,"src":"25948:24:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,uint256,uint256) pure"}},"id":3509,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"25948:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3510,"nodeType":"RevertStatement","src":"25941:53:46"}},{"expression":{"id":3518,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":3512,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"26016:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3515,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26018:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"26016:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3516,"indexExpression":{"id":3514,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"26027:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"26016:16:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":3517,"name":"newBalance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3497,"src":"26035:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26016:29:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3519,"nodeType":"ExpressionStatement","src":"26016:29:46"},{"expression":{"id":3522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":3520,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"26067:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":3521,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"26081:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26067:19:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3523,"nodeType":"ExpressionStatement","src":"26067:19:46"}]}},{"eventCall":{"arguments":[{"id":3529,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3462,"src":"26224:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"arguments":[{"hexValue":"30","id":3532,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26238:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":3531,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"26230:7:46","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3530,"name":"address","nodeType":"ElementaryTypeName","src":"26230:7:46","typeDescriptions":{}}},"id":3533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26230:10:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3534,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3468,"src":"26242:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3526,"name":"IERC20Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1883,"src":"26202:12:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Events_$1883_$","typeString":"type(contract IERC20Events)"}},"id":3528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"26215:8:46","memberName":"Transfer","nodeType":"MemberAccess","referencedDeclaration":1873,"src":"26202:21:46","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256)"}},"id":3535,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"26202:46:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3536,"nodeType":"EmitStatement","src":"26197:51:46"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3457,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3455,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"25521:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3456,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3432,"src":"25526:6:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"25521:11:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3538,"initializationExpression":{"assignments":[3453],"declarations":[{"constant":false,"id":3453,"mutability":"mutable","name":"i","nameLocation":"25518:1:46","nodeType":"VariableDeclaration","scope":3538,"src":"25510:9:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3452,"name":"uint256","nodeType":"ElementaryTypeName","src":"25510:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":3454,"nodeType":"VariableDeclarationStatement","src":"25510:9:46"},"loopExpression":{"expression":{"id":3459,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"25534:3:46","subExpression":{"id":3458,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3453,"src":"25536:1:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3460,"nodeType":"ExpressionStatement","src":"25534:3:46"},"nodeType":"ForStatement","src":"25505:758:46"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3539,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"26281:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":3540,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"26295:1:46","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"26281:15:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3549,"nodeType":"IfStatement","src":"26277:137:46","trueBody":{"id":3548,"nodeType":"Block","src":"26298:116:46","statements":[{"expression":{"id":3546,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":3542,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3420,"src":"26316:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3544,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"26318:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"26316:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":3545,"name":"totalValue","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3450,"src":"26328:10:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"26316:22:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3547,"nodeType":"ExpressionStatement","src":"26316:22:46"}]}}]}]},"documentation":{"id":3417,"nodeType":"StructuredDocumentation","src":"24187:984:46","text":"@notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\n @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\n @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\n @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\n @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\n  at least the corresponding `value` of allowance by this `owner`.\n @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\n @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\n @param sender The message sender.\n @param owners The list of accounts to burn the tokens from.\n @param values The list of amounts of tokens to burn."},"id":3552,"implemented":true,"kind":"function","modifiers":[],"name":"batchBurnFrom","nameLocation":"25185:13:46","nodeType":"FunctionDefinition","parameters":{"id":3429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3420,"mutability":"mutable","name":"s","nameLocation":"25214:1:46","nodeType":"VariableDeclaration","scope":3552,"src":"25199:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3419,"nodeType":"UserDefinedTypeName","pathNode":{"id":3418,"name":"Layout","nameLocations":["25199:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"25199:6:46"},"referencedDeclaration":2170,"src":"25199:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3422,"mutability":"mutable","name":"sender","nameLocation":"25225:6:46","nodeType":"VariableDeclaration","scope":3552,"src":"25217:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3421,"name":"address","nodeType":"ElementaryTypeName","src":"25217:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3425,"mutability":"mutable","name":"owners","nameLocation":"25252:6:46","nodeType":"VariableDeclaration","scope":3552,"src":"25233:25:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":3423,"name":"address","nodeType":"ElementaryTypeName","src":"25233:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":3424,"nodeType":"ArrayTypeName","src":"25233:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":3428,"mutability":"mutable","name":"values","nameLocation":"25279:6:46","nodeType":"VariableDeclaration","scope":3552,"src":"25260:25:46","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":3426,"name":"uint256","nodeType":"ElementaryTypeName","src":"25260:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":3427,"nodeType":"ArrayTypeName","src":"25260:9:46","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"25198:88:46"},"returnParameters":{"id":3430,"nodeType":"ParameterList","parameters":[],"src":"25296:0:46"},"scope":3647,"src":"25176:1254:46","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3564,"nodeType":"Block","src":"26673:32:46","statements":[{"expression":{"expression":{"id":3561,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3556,"src":"26690:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3562,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"26692:6:46","memberName":"supply","nodeType":"MemberAccess","referencedDeclaration":2169,"src":"26690:8:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3560,"id":3563,"nodeType":"Return","src":"26683:15:46"}]},"documentation":{"id":3553,"nodeType":"StructuredDocumentation","src":"26436:154:46","text":"@notice Gets the total token supply.\n @dev Note: This function implements {ERC20-totalSupply()}.\n @return supply The total token supply."},"id":3565,"implemented":true,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"26604:11:46","nodeType":"FunctionDefinition","parameters":{"id":3557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3556,"mutability":"mutable","name":"s","nameLocation":"26631:1:46","nodeType":"VariableDeclaration","scope":3565,"src":"26616:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3555,"nodeType":"UserDefinedTypeName","pathNode":{"id":3554,"name":"Layout","nameLocations":["26616:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"26616:6:46"},"referencedDeclaration":2170,"src":"26616:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"}],"src":"26615:18:46"},"returnParameters":{"id":3560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3559,"mutability":"mutable","name":"supply","nameLocation":"26665:6:46","nodeType":"VariableDeclaration","scope":3565,"src":"26657:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3558,"name":"uint256","nodeType":"ElementaryTypeName","src":"26657:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"26656:16:46"},"scope":3647,"src":"26595:110:46","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3581,"nodeType":"Block","src":"27026:41:46","statements":[{"expression":{"baseExpression":{"expression":{"id":3576,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3569,"src":"27043:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3577,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27045:8:46","memberName":"balances","nodeType":"MemberAccess","referencedDeclaration":2161,"src":"27043:10:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3579,"indexExpression":{"id":3578,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3571,"src":"27054:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27043:17:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3575,"id":3580,"nodeType":"Return","src":"27036:24:46"}]},"documentation":{"id":3566,"nodeType":"StructuredDocumentation","src":"26711:218:46","text":"@notice Gets an account balance.\n @dev Note: This function implements {ERC20-balanceOf(address)}.\n @param owner The account whose balance will be returned.\n @return balance The account balance."},"id":3582,"implemented":true,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"26943:9:46","nodeType":"FunctionDefinition","parameters":{"id":3572,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3569,"mutability":"mutable","name":"s","nameLocation":"26968:1:46","nodeType":"VariableDeclaration","scope":3582,"src":"26953:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3568,"nodeType":"UserDefinedTypeName","pathNode":{"id":3567,"name":"Layout","nameLocations":["26953:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"26953:6:46"},"referencedDeclaration":2170,"src":"26953:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3571,"mutability":"mutable","name":"owner","nameLocation":"26979:5:46","nodeType":"VariableDeclaration","scope":3582,"src":"26971:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3570,"name":"address","nodeType":"ElementaryTypeName","src":"26971:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"26952:33:46"},"returnParameters":{"id":3575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3574,"mutability":"mutable","name":"balance","nameLocation":"27017:7:46","nodeType":"VariableDeclaration","scope":3582,"src":"27009:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3573,"name":"uint256","nodeType":"ElementaryTypeName","src":"27009:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27008:17:46"},"scope":3647,"src":"26934:133:46","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3602,"nodeType":"Block","src":"27595:52:46","statements":[{"expression":{"baseExpression":{"baseExpression":{"expression":{"id":3595,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3586,"src":"27612:1:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout storage pointer"}},"id":3596,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"27614:10:46","memberName":"allowances","nodeType":"MemberAccess","referencedDeclaration":2167,"src":"27612:12:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$","typeString":"mapping(address => mapping(address => uint256))"}},"id":3598,"indexExpression":{"id":3597,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3588,"src":"27625:5:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27612:19:46","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_uint256_$","typeString":"mapping(address => uint256)"}},"id":3600,"indexExpression":{"id":3599,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3590,"src":"27632:7:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"27612:28:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":3594,"id":3601,"nodeType":"Return","src":"27605:35:46"}]},"documentation":{"id":3583,"nodeType":"StructuredDocumentation","src":"27073:410:46","text":"@notice Gets the amount that an account is allowed to spend on behalf of another.\n @dev Note: This function implements {ERC20-allowance(address,address)}.\n @param owner The account that has granted an allowance to `spender`.\n @param spender The account that was granted an allowance by `owner`.\n @return value The amount which `spender` is allowed to spend on behalf of `owner`."},"id":3603,"implemented":true,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"27497:9:46","nodeType":"FunctionDefinition","parameters":{"id":3591,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3586,"mutability":"mutable","name":"s","nameLocation":"27522:1:46","nodeType":"VariableDeclaration","scope":3603,"src":"27507:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3585,"nodeType":"UserDefinedTypeName","pathNode":{"id":3584,"name":"Layout","nameLocations":["27507:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"27507:6:46"},"referencedDeclaration":2170,"src":"27507:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"},{"constant":false,"id":3588,"mutability":"mutable","name":"owner","nameLocation":"27533:5:46","nodeType":"VariableDeclaration","scope":3603,"src":"27525:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3587,"name":"address","nodeType":"ElementaryTypeName","src":"27525:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3590,"mutability":"mutable","name":"spender","nameLocation":"27548:7:46","nodeType":"VariableDeclaration","scope":3603,"src":"27540:15:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3589,"name":"address","nodeType":"ElementaryTypeName","src":"27540:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"27506:50:46"},"returnParameters":{"id":3594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3593,"mutability":"mutable","name":"value","nameLocation":"27588:5:46","nodeType":"VariableDeclaration","scope":3603,"src":"27580:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3592,"name":"uint256","nodeType":"ElementaryTypeName","src":"27580:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"27579:15:46"},"scope":3647,"src":"27488:159:46","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":3614,"nodeType":"Block","src":"27712:115:46","statements":[{"assignments":[3610],"declarations":[{"constant":false,"id":3610,"mutability":"mutable","name":"position","nameLocation":"27730:8:46","nodeType":"VariableDeclaration","scope":3614,"src":"27722:16:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3609,"name":"bytes32","nodeType":"ElementaryTypeName","src":"27722:7:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":3612,"initialValue":{"id":3611,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2183,"src":"27741:19:46","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"27722:38:46"},{"AST":{"nativeSrc":"27779:42:46","nodeType":"YulBlock","src":"27779:42:46","statements":[{"nativeSrc":"27793:18:46","nodeType":"YulAssignment","src":"27793:18:46","value":{"name":"position","nativeSrc":"27803:8:46","nodeType":"YulIdentifier","src":"27803:8:46"},"variableNames":[{"name":"s.slot","nativeSrc":"27793:6:46","nodeType":"YulIdentifier","src":"27793:6:46"}]}]},"evmVersion":"shanghai","externalReferences":[{"declaration":3610,"isOffset":false,"isSlot":false,"src":"27803:8:46","valueSize":1},{"declaration":3607,"isOffset":false,"isSlot":true,"src":"27793:6:46","suffix":"slot","valueSize":1}],"id":3613,"nodeType":"InlineAssembly","src":"27770:51:46"}]},"id":3615,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"27662:6:46","nodeType":"FunctionDefinition","parameters":{"id":3604,"nodeType":"ParameterList","parameters":[],"src":"27668:2:46"},"returnParameters":{"id":3608,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3607,"mutability":"mutable","name":"s","nameLocation":"27709:1:46","nodeType":"VariableDeclaration","scope":3615,"src":"27694:16:46","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"},"typeName":{"id":3606,"nodeType":"UserDefinedTypeName","pathNode":{"id":3605,"name":"Layout","nameLocations":["27694:6:46"],"nodeType":"IdentifierPath","referencedDeclaration":2170,"src":"27694:6:46"},"referencedDeclaration":2170,"src":"27694:6:46","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$2170_storage_ptr","typeString":"struct ERC20Storage.Layout"}},"visibility":"internal"}],"src":"27693:18:46"},"scope":3647,"src":"27653:174:46","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":3645,"nodeType":"Block","src":"28379:138:46","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":3639,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":3633,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3618,"src":"28428:6:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3634,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3620,"src":"28436:4:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3635,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3624,"src":"28442:5:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":3636,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3626,"src":"28449:4:46","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":3630,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"28408:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3629,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"28393:14:46","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC20Receiver_$2075_$","typeString":"type(contract IERC20Receiver)"}},"id":3631,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28393:18:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Receiver_$2075","typeString":"contract IERC20Receiver"}},"id":3632,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"28412:15:46","memberName":"onERC20Received","nodeType":"MemberAccess","referencedDeclaration":2074,"src":"28393:34:46","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_bytes_memory_ptr_$returns$_t_bytes4_$","typeString":"function (address,address,uint256,bytes memory) external returns (bytes4)"}},"id":3637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28393:61:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":3638,"name":"ERC20_RECEIVED","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2201,"src":"28458:14:46","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"28393:79:46","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":3644,"nodeType":"IfStatement","src":"28389:121:46","trueBody":{"errorCall":{"arguments":[{"id":3641,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3622,"src":"28507:2:46","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":3640,"name":"ERC20SafeTransferRejected","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1861,"src":"28481:25:46","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":3642,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"28481:29:46","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3643,"nodeType":"RevertStatement","src":"28474:36:46"}}]},"documentation":{"id":3616,"nodeType":"StructuredDocumentation","src":"27833:427:46","text":"@notice Calls {IERC20Receiver-onERC20Received} on a target contract.\n @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\n @param sender The message sender.\n @param from Previous token owner.\n @param to New token owner.\n @param value The value transferred.\n @param data Optional data to send along with the receiver contract call."},"id":3646,"implemented":true,"kind":"function","modifiers":[],"name":"_callOnERC20Received","nameLocation":"28274:20:46","nodeType":"FunctionDefinition","parameters":{"id":3627,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3618,"mutability":"mutable","name":"sender","nameLocation":"28303:6:46","nodeType":"VariableDeclaration","scope":3646,"src":"28295:14:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3617,"name":"address","nodeType":"ElementaryTypeName","src":"28295:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3620,"mutability":"mutable","name":"from","nameLocation":"28319:4:46","nodeType":"VariableDeclaration","scope":3646,"src":"28311:12:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3619,"name":"address","nodeType":"ElementaryTypeName","src":"28311:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3622,"mutability":"mutable","name":"to","nameLocation":"28333:2:46","nodeType":"VariableDeclaration","scope":3646,"src":"28325:10:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3621,"name":"address","nodeType":"ElementaryTypeName","src":"28325:7:46","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3624,"mutability":"mutable","name":"value","nameLocation":"28345:5:46","nodeType":"VariableDeclaration","scope":3646,"src":"28337:13:46","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3623,"name":"uint256","nodeType":"ElementaryTypeName","src":"28337:7:46","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3626,"mutability":"mutable","name":"data","nameLocation":"28365:4:46","nodeType":"VariableDeclaration","scope":3646,"src":"28352:17:46","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":3625,"name":"bytes","nodeType":"ElementaryTypeName","src":"28352:5:46","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"28294:76:46"},"returnParameters":{"id":3628,"nodeType":"ParameterList","parameters":[],"src":"28379:0:46"},"scope":3647,"src":"28265:252:46","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":3648,"src":"1512:27007:46","usedErrors":[],"usedEvents":[]}],"src":"32:28488:46"},"id":46},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol","exportedSymbols":{"IERC721Events":[3678]},"id":3679,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3649,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:47"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC721Events","contractDependencies":[],"contractKind":"interface","documentation":{"id":3650,"nodeType":"StructuredDocumentation","src":"58:287:47","text":"@title ERC721 Non-Fungible Token Standard, basic interface (events).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard events, see IERC721 for the functions.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":true,"id":3678,"linearizedBaseContracts":[3678],"name":"IERC721Events","nameLocation":"355:13:47","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3651,"nodeType":"StructuredDocumentation","src":"375:190:47","text":"@notice Emitted when a token is transferred.\n @param from The previous token owner.\n @param to The new token owner.\n @param tokenId The transferred token identifier."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3659,"name":"Transfer","nameLocation":"576:8:47","nodeType":"EventDefinition","parameters":{"id":3658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3653,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"601:4:47","nodeType":"VariableDeclaration","scope":3659,"src":"585:20:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3652,"name":"address","nodeType":"ElementaryTypeName","src":"585:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3655,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"623:2:47","nodeType":"VariableDeclaration","scope":3659,"src":"607:18:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3654,"name":"address","nodeType":"ElementaryTypeName","src":"607:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3657,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"643:7:47","nodeType":"VariableDeclaration","scope":3659,"src":"627:23:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3656,"name":"uint256","nodeType":"ElementaryTypeName","src":"627:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"584:67:47"},"src":"570:82:47"},{"anonymous":false,"documentation":{"id":3660,"nodeType":"StructuredDocumentation","src":"658:194:47","text":"@notice Emitted when a single token approval is set.\n @param owner The token owner.\n @param approved The approved address.\n @param tokenId The approved token identifier."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3668,"name":"Approval","nameLocation":"863:8:47","nodeType":"EventDefinition","parameters":{"id":3667,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3662,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"888:5:47","nodeType":"VariableDeclaration","scope":3668,"src":"872:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3661,"name":"address","nodeType":"ElementaryTypeName","src":"872:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3664,"indexed":true,"mutability":"mutable","name":"approved","nameLocation":"911:8:47","nodeType":"VariableDeclaration","scope":3668,"src":"895:24:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3663,"name":"address","nodeType":"ElementaryTypeName","src":"895:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3666,"indexed":true,"mutability":"mutable","name":"tokenId","nameLocation":"937:7:47","nodeType":"VariableDeclaration","scope":3668,"src":"921:23:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3665,"name":"uint256","nodeType":"ElementaryTypeName","src":"921:7:47","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"871:74:47"},"src":"857:89:47"},{"anonymous":false,"documentation":{"id":3669,"nodeType":"StructuredDocumentation","src":"952:233:47","text":"@notice Emitted when an approval for all tokens is set or unset.\n @param owner The tokens owner.\n @param operator The approved address.\n @param approved True when then approval is set, false when it is unset."},"eventSelector":"17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31","id":3677,"name":"ApprovalForAll","nameLocation":"1196:14:47","nodeType":"EventDefinition","parameters":{"id":3676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3671,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"1227:5:47","nodeType":"VariableDeclaration","scope":3677,"src":"1211:21:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3670,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3673,"indexed":true,"mutability":"mutable","name":"operator","nameLocation":"1250:8:47","nodeType":"VariableDeclaration","scope":3677,"src":"1234:24:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3672,"name":"address","nodeType":"ElementaryTypeName","src":"1234:7:47","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3675,"indexed":false,"mutability":"mutable","name":"approved","nameLocation":"1265:8:47","nodeType":"VariableDeclaration","scope":3677,"src":"1260:13:47","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3674,"name":"bool","nodeType":"ElementaryTypeName","src":"1260:4:47","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1210:64:47"},"src":"1190:85:47"}],"scope":3679,"src":"345:932:47","usedErrors":[],"usedEvents":[3659,3668,3677]}],"src":"32:1246:47"},"id":47},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol","exportedSymbols":{"IERC721":[3768],"IERC721Events":[3678]},"id":3769,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3680,"literals":["solidity","^","0.8",".21"],"nodeType":"PragmaDirective","src":"32:24:48"},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol","file":"./../events/IERC721Events.sol","id":3682,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3769,"sourceUnit":3679,"src":"58:60:48","symbolAliases":[{"foreign":{"id":3681,"name":"IERC721Events","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3678,"src":"66:13:48","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":3684,"name":"IERC721Events","nameLocations":["437:13:48"],"nodeType":"IdentifierPath","referencedDeclaration":3678,"src":"437:13:48"},"id":3685,"nodeType":"InheritanceSpecifier","src":"437:13:48"}],"canonicalName":"IERC721","contractDependencies":[],"contractKind":"interface","documentation":{"id":3683,"nodeType":"StructuredDocumentation","src":"120:296:48","text":"@title ERC721 Non-Fungible Token Standard, basic interface (functions).\n @dev See https://eips.ethereum.org/EIPS/eip-721\n @dev This interface only contains the standard functions. See IERC721Events for the events.\n @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd."},"fullyImplemented":false,"id":3768,"linearizedBaseContracts":[3768,3678],"name":"IERC721","nameLocation":"426:7:48","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3686,"nodeType":"StructuredDocumentation","src":"457:684:48","text":"@notice Sets or unsets an approval to transfer a single token on behalf of its owner.\n @dev Note: There can only be one approved address per token at a given time.\n @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\n @dev Reverts if `tokenId` does not exist.\n @dev Reverts if `to` is the token owner.\n @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\n @dev Emits an {Approval} event.\n @param to The address to approve, or the zero address to remove any existing approval.\n @param tokenId The token identifier to give approval for."},"functionSelector":"095ea7b3","id":3693,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"1155:7:48","nodeType":"FunctionDefinition","parameters":{"id":3691,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3688,"mutability":"mutable","name":"to","nameLocation":"1171:2:48","nodeType":"VariableDeclaration","scope":3693,"src":"1163:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3687,"name":"address","nodeType":"ElementaryTypeName","src":"1163:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3690,"mutability":"mutable","name":"tokenId","nameLocation":"1183:7:48","nodeType":"VariableDeclaration","scope":3693,"src":"1175:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3689,"name":"uint256","nodeType":"ElementaryTypeName","src":"1175:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1162:29:48"},"returnParameters":{"id":3692,"nodeType":"ParameterList","parameters":[],"src":"1200:0:48"},"scope":3768,"src":"1146:55:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3694,"nodeType":"StructuredDocumentation","src":"1207:341:48","text":"@notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\n @dev Reverts if the sender is the same as `operator`.\n @dev Emits an {ApprovalForAll} event.\n @param operator The address to approve for all tokens.\n @param approved True to set an approval for all tokens, false to unset it."},"functionSelector":"a22cb465","id":3701,"implemented":false,"kind":"function","modifiers":[],"name":"setApprovalForAll","nameLocation":"1562:17:48","nodeType":"FunctionDefinition","parameters":{"id":3699,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3696,"mutability":"mutable","name":"operator","nameLocation":"1588:8:48","nodeType":"VariableDeclaration","scope":3701,"src":"1580:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3695,"name":"address","nodeType":"ElementaryTypeName","src":"1580:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3698,"mutability":"mutable","name":"approved","nameLocation":"1603:8:48","nodeType":"VariableDeclaration","scope":3701,"src":"1598:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3697,"name":"bool","nodeType":"ElementaryTypeName","src":"1598:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1579:33:48"},"returnParameters":{"id":3700,"nodeType":"ParameterList","parameters":[],"src":"1621:0:48"},"scope":3768,"src":"1553:69:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3702,"nodeType":"StructuredDocumentation","src":"1628:667:48","text":"@notice Unsafely transfers the ownership of a token to a recipient.\n @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer. Self-transfers are possible.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"23b872dd","id":3711,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2309:12:48","nodeType":"FunctionDefinition","parameters":{"id":3709,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3704,"mutability":"mutable","name":"from","nameLocation":"2330:4:48","nodeType":"VariableDeclaration","scope":3711,"src":"2322:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3703,"name":"address","nodeType":"ElementaryTypeName","src":"2322:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3706,"mutability":"mutable","name":"to","nameLocation":"2344:2:48","nodeType":"VariableDeclaration","scope":3711,"src":"2336:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3705,"name":"address","nodeType":"ElementaryTypeName","src":"2336:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3708,"mutability":"mutable","name":"tokenId","nameLocation":"2356:7:48","nodeType":"VariableDeclaration","scope":3711,"src":"2348:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3707,"name":"uint256","nodeType":"ElementaryTypeName","src":"2348:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2321:43:48"},"returnParameters":{"id":3710,"nodeType":"ParameterList","parameters":[],"src":"2373:0:48"},"scope":3768,"src":"2300:74:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3712,"nodeType":"StructuredDocumentation","src":"2380:663:48","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer."},"functionSelector":"42842e0e","id":3721,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3057:16:48","nodeType":"FunctionDefinition","parameters":{"id":3719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3714,"mutability":"mutable","name":"from","nameLocation":"3082:4:48","nodeType":"VariableDeclaration","scope":3721,"src":"3074:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3713,"name":"address","nodeType":"ElementaryTypeName","src":"3074:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3716,"mutability":"mutable","name":"to","nameLocation":"3096:2:48","nodeType":"VariableDeclaration","scope":3721,"src":"3088:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3715,"name":"address","nodeType":"ElementaryTypeName","src":"3088:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3718,"mutability":"mutable","name":"tokenId","nameLocation":"3108:7:48","nodeType":"VariableDeclaration","scope":3721,"src":"3100:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3717,"name":"uint256","nodeType":"ElementaryTypeName","src":"3100:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3073:43:48"},"returnParameters":{"id":3720,"nodeType":"ParameterList","parameters":[],"src":"3125:0:48"},"scope":3768,"src":"3048:78:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3722,"nodeType":"StructuredDocumentation","src":"3132:735:48","text":"@notice Safely transfers the ownership of a token to a recipient.\n @dev Resets the token approval for `tokenId`.\n @dev Reverts if `to` is the zero address.\n @dev Reverts if `from` is not the owner of `tokenId`.\n @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\n @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\n @dev Emits a {Transfer} event.\n @param from The current token owner.\n @param to The recipient of the token transfer.\n @param tokenId The identifier of the token to transfer.\n @param data Optional data to send along to a receiver contract."},"functionSelector":"b88d4fde","id":3733,"implemented":false,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"3881:16:48","nodeType":"FunctionDefinition","parameters":{"id":3731,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3724,"mutability":"mutable","name":"from","nameLocation":"3906:4:48","nodeType":"VariableDeclaration","scope":3733,"src":"3898:12:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3723,"name":"address","nodeType":"ElementaryTypeName","src":"3898:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3726,"mutability":"mutable","name":"to","nameLocation":"3920:2:48","nodeType":"VariableDeclaration","scope":3733,"src":"3912:10:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3725,"name":"address","nodeType":"ElementaryTypeName","src":"3912:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3728,"mutability":"mutable","name":"tokenId","nameLocation":"3932:7:48","nodeType":"VariableDeclaration","scope":3733,"src":"3924:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3727,"name":"uint256","nodeType":"ElementaryTypeName","src":"3924:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3730,"mutability":"mutable","name":"data","nameLocation":"3956:4:48","nodeType":"VariableDeclaration","scope":3733,"src":"3941:19:48","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":3729,"name":"bytes","nodeType":"ElementaryTypeName","src":"3941:5:48","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3897:64:48"},"returnParameters":{"id":3732,"nodeType":"ParameterList","parameters":[],"src":"3970:0:48"},"scope":3768,"src":"3872:99:48","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3734,"nodeType":"StructuredDocumentation","src":"3977:209:48","text":"@notice Gets the balance of an address.\n @dev Reverts if `owner` is the zero address.\n @param owner The address to query the balance of.\n @return balance The amount owned by the owner."},"functionSelector":"70a08231","id":3741,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"4200:9:48","nodeType":"FunctionDefinition","parameters":{"id":3737,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3736,"mutability":"mutable","name":"owner","nameLocation":"4218:5:48","nodeType":"VariableDeclaration","scope":3741,"src":"4210:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3735,"name":"address","nodeType":"ElementaryTypeName","src":"4210:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4209:15:48"},"returnParameters":{"id":3740,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3739,"mutability":"mutable","name":"balance","nameLocation":"4256:7:48","nodeType":"VariableDeclaration","scope":3741,"src":"4248:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3738,"name":"uint256","nodeType":"ElementaryTypeName","src":"4248:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4247:17:48"},"scope":3768,"src":"4191:74:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3742,"nodeType":"StructuredDocumentation","src":"4271:217:48","text":"@notice Gets the owner of a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the owner of.\n @return tokenOwner The owner of the token identifier."},"functionSelector":"6352211e","id":3749,"implemented":false,"kind":"function","modifiers":[],"name":"ownerOf","nameLocation":"4502:7:48","nodeType":"FunctionDefinition","parameters":{"id":3745,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3744,"mutability":"mutable","name":"tokenId","nameLocation":"4518:7:48","nodeType":"VariableDeclaration","scope":3749,"src":"4510:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3743,"name":"uint256","nodeType":"ElementaryTypeName","src":"4510:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4509:17:48"},"returnParameters":{"id":3748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3747,"mutability":"mutable","name":"tokenOwner","nameLocation":"4558:10:48","nodeType":"VariableDeclaration","scope":3749,"src":"4550:18:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3746,"name":"address","nodeType":"ElementaryTypeName","src":"4550:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4549:20:48"},"scope":3768,"src":"4493:77:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3750,"nodeType":"StructuredDocumentation","src":"4576:285:48","text":"@notice Gets the approved address for a token.\n @dev Reverts if `tokenId` does not exist.\n @param tokenId The token identifier to query the approval of.\n @return approved The approved address for the token identifier, or the zero address if no approval is set."},"functionSelector":"081812fc","id":3757,"implemented":false,"kind":"function","modifiers":[],"name":"getApproved","nameLocation":"4875:11:48","nodeType":"FunctionDefinition","parameters":{"id":3753,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3752,"mutability":"mutable","name":"tokenId","nameLocation":"4895:7:48","nodeType":"VariableDeclaration","scope":3757,"src":"4887:15:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3751,"name":"uint256","nodeType":"ElementaryTypeName","src":"4887:7:48","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4886:17:48"},"returnParameters":{"id":3756,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3755,"mutability":"mutable","name":"approved","nameLocation":"4935:8:48","nodeType":"VariableDeclaration","scope":3757,"src":"4927:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3754,"name":"address","nodeType":"ElementaryTypeName","src":"4927:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4926:18:48"},"scope":3768,"src":"4866:79:48","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3758,"nodeType":"StructuredDocumentation","src":"4951:323:48","text":"@notice Gets whether an operator is approved for all tokens by an owner.\n @param owner The address which gives the approval for all tokens.\n @param operator The address which receives the approval for all tokens.\n @return approvedForAll Whether the operator is approved for all tokens by the owner."},"functionSelector":"e985e9c5","id":3767,"implemented":false,"kind":"function","modifiers":[],"name":"isApprovedForAll","nameLocation":"5288:16:48","nodeType":"FunctionDefinition","parameters":{"id":3763,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3760,"mutability":"mutable","name":"owner","nameLocation":"5313:5:48","nodeType":"VariableDeclaration","scope":3767,"src":"5305:13:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3759,"name":"address","nodeType":"ElementaryTypeName","src":"5305:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3762,"mutability":"mutable","name":"operator","nameLocation":"5328:8:48","nodeType":"VariableDeclaration","scope":3767,"src":"5320:16:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3761,"name":"address","nodeType":"ElementaryTypeName","src":"5320:7:48","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5304:33:48"},"returnParameters":{"id":3766,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3765,"mutability":"mutable","name":"approvedForAll","nameLocation":"5366:14:48","nodeType":"VariableDeclaration","scope":3767,"src":"5361:19:48","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3764,"name":"bool","nodeType":"ElementaryTypeName","src":"5361:4:48","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"5360:21:48"},"scope":3768,"src":"5279:103:48","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3769,"src":"416:4968:48","usedErrors":[],"usedEvents":[3659,3668,3677]}],"src":"32:5353:48"},"id":48},"@openzeppelin/contracts/interfaces/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/interfaces/IERC20.sol","exportedSymbols":{"IERC20":[3849]},"id":3772,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3770,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"90:23:49"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../token/ERC20/IERC20.sol","id":3771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":3772,"sourceUnit":3850,"src":"115:35:49","symbolAliases":[],"unitAlias":""}],"src":"90:61:49"},"id":49},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","exportedSymbols":{"IERC20":[3849]},"id":3850,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3773,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"106:23:50"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20","contractDependencies":[],"contractKind":"interface","documentation":{"id":3774,"nodeType":"StructuredDocumentation","src":"131:70:50","text":" @dev Interface of the ERC20 standard as defined in the EIP."},"fullyImplemented":false,"id":3849,"linearizedBaseContracts":[3849],"name":"IERC20","nameLocation":"212:6:50","nodeType":"ContractDefinition","nodes":[{"anonymous":false,"documentation":{"id":3775,"nodeType":"StructuredDocumentation","src":"225:158:50","text":" @dev Emitted when `value` tokens are moved from one account (`from`) to\n another (`to`).\n Note that `value` may be zero."},"eventSelector":"ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef","id":3783,"name":"Transfer","nameLocation":"394:8:50","nodeType":"EventDefinition","parameters":{"id":3782,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3777,"indexed":true,"mutability":"mutable","name":"from","nameLocation":"419:4:50","nodeType":"VariableDeclaration","scope":3783,"src":"403:20:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3776,"name":"address","nodeType":"ElementaryTypeName","src":"403:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3779,"indexed":true,"mutability":"mutable","name":"to","nameLocation":"441:2:50","nodeType":"VariableDeclaration","scope":3783,"src":"425:18:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3778,"name":"address","nodeType":"ElementaryTypeName","src":"425:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3781,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"453:5:50","nodeType":"VariableDeclaration","scope":3783,"src":"445:13:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3780,"name":"uint256","nodeType":"ElementaryTypeName","src":"445:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"402:57:50"},"src":"388:72:50"},{"anonymous":false,"documentation":{"id":3784,"nodeType":"StructuredDocumentation","src":"466:148:50","text":" @dev Emitted when the allowance of a `spender` for an `owner` is set by\n a call to {approve}. `value` is the new allowance."},"eventSelector":"8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925","id":3792,"name":"Approval","nameLocation":"625:8:50","nodeType":"EventDefinition","parameters":{"id":3791,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3786,"indexed":true,"mutability":"mutable","name":"owner","nameLocation":"650:5:50","nodeType":"VariableDeclaration","scope":3792,"src":"634:21:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3785,"name":"address","nodeType":"ElementaryTypeName","src":"634:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3788,"indexed":true,"mutability":"mutable","name":"spender","nameLocation":"673:7:50","nodeType":"VariableDeclaration","scope":3792,"src":"657:23:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3787,"name":"address","nodeType":"ElementaryTypeName","src":"657:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3790,"indexed":false,"mutability":"mutable","name":"value","nameLocation":"690:5:50","nodeType":"VariableDeclaration","scope":3792,"src":"682:13:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3789,"name":"uint256","nodeType":"ElementaryTypeName","src":"682:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"633:63:50"},"src":"619:78:50"},{"documentation":{"id":3793,"nodeType":"StructuredDocumentation","src":"703:66:50","text":" @dev Returns the amount of tokens in existence."},"functionSelector":"18160ddd","id":3798,"implemented":false,"kind":"function","modifiers":[],"name":"totalSupply","nameLocation":"783:11:50","nodeType":"FunctionDefinition","parameters":{"id":3794,"nodeType":"ParameterList","parameters":[],"src":"794:2:50"},"returnParameters":{"id":3797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3798,"src":"820:7:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3795,"name":"uint256","nodeType":"ElementaryTypeName","src":"820:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"819:9:50"},"scope":3849,"src":"774:55:50","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3799,"nodeType":"StructuredDocumentation","src":"835:72:50","text":" @dev Returns the amount of tokens owned by `account`."},"functionSelector":"70a08231","id":3806,"implemented":false,"kind":"function","modifiers":[],"name":"balanceOf","nameLocation":"921:9:50","nodeType":"FunctionDefinition","parameters":{"id":3802,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3801,"mutability":"mutable","name":"account","nameLocation":"939:7:50","nodeType":"VariableDeclaration","scope":3806,"src":"931:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3800,"name":"address","nodeType":"ElementaryTypeName","src":"931:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"930:17:50"},"returnParameters":{"id":3805,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3804,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3806,"src":"971:7:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3803,"name":"uint256","nodeType":"ElementaryTypeName","src":"971:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"970:9:50"},"scope":3849,"src":"912:68:50","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3807,"nodeType":"StructuredDocumentation","src":"986:202:50","text":" @dev Moves `amount` tokens from the caller's account to `to`.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"a9059cbb","id":3816,"implemented":false,"kind":"function","modifiers":[],"name":"transfer","nameLocation":"1202:8:50","nodeType":"FunctionDefinition","parameters":{"id":3812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3809,"mutability":"mutable","name":"to","nameLocation":"1219:2:50","nodeType":"VariableDeclaration","scope":3816,"src":"1211:10:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3808,"name":"address","nodeType":"ElementaryTypeName","src":"1211:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3811,"mutability":"mutable","name":"amount","nameLocation":"1231:6:50","nodeType":"VariableDeclaration","scope":3816,"src":"1223:14:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3810,"name":"uint256","nodeType":"ElementaryTypeName","src":"1223:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1210:28:50"},"returnParameters":{"id":3815,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3814,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3816,"src":"1257:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3813,"name":"bool","nodeType":"ElementaryTypeName","src":"1257:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1256:6:50"},"scope":3849,"src":"1193:70:50","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3817,"nodeType":"StructuredDocumentation","src":"1269:264:50","text":" @dev Returns the remaining number of tokens that `spender` will be\n allowed to spend on behalf of `owner` through {transferFrom}. This is\n zero by default.\n This value changes when {approve} or {transferFrom} are called."},"functionSelector":"dd62ed3e","id":3826,"implemented":false,"kind":"function","modifiers":[],"name":"allowance","nameLocation":"1547:9:50","nodeType":"FunctionDefinition","parameters":{"id":3822,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3819,"mutability":"mutable","name":"owner","nameLocation":"1565:5:50","nodeType":"VariableDeclaration","scope":3826,"src":"1557:13:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3818,"name":"address","nodeType":"ElementaryTypeName","src":"1557:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3821,"mutability":"mutable","name":"spender","nameLocation":"1580:7:50","nodeType":"VariableDeclaration","scope":3826,"src":"1572:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3820,"name":"address","nodeType":"ElementaryTypeName","src":"1572:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1556:32:50"},"returnParameters":{"id":3825,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3824,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3826,"src":"1612:7:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3823,"name":"uint256","nodeType":"ElementaryTypeName","src":"1612:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1611:9:50"},"scope":3849,"src":"1538:83:50","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3827,"nodeType":"StructuredDocumentation","src":"1627:642:50","text":" @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n Returns a boolean value indicating whether the operation succeeded.\n IMPORTANT: Beware that changing an allowance with this method brings the risk\n that someone may use both the old and the new allowance by unfortunate\n transaction ordering. One possible solution to mitigate this race\n condition is to first reduce the spender's allowance to 0 and set the\n desired value afterwards:\n https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n Emits an {Approval} event."},"functionSelector":"095ea7b3","id":3836,"implemented":false,"kind":"function","modifiers":[],"name":"approve","nameLocation":"2283:7:50","nodeType":"FunctionDefinition","parameters":{"id":3832,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3829,"mutability":"mutable","name":"spender","nameLocation":"2299:7:50","nodeType":"VariableDeclaration","scope":3836,"src":"2291:15:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3828,"name":"address","nodeType":"ElementaryTypeName","src":"2291:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3831,"mutability":"mutable","name":"amount","nameLocation":"2316:6:50","nodeType":"VariableDeclaration","scope":3836,"src":"2308:14:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3830,"name":"uint256","nodeType":"ElementaryTypeName","src":"2308:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2290:33:50"},"returnParameters":{"id":3835,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3834,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3836,"src":"2342:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3833,"name":"bool","nodeType":"ElementaryTypeName","src":"2342:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2341:6:50"},"scope":3849,"src":"2274:74:50","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3837,"nodeType":"StructuredDocumentation","src":"2354:287:50","text":" @dev Moves `amount` tokens from `from` to `to` using the\n allowance mechanism. `amount` is then deducted from the caller's\n allowance.\n Returns a boolean value indicating whether the operation succeeded.\n Emits a {Transfer} event."},"functionSelector":"23b872dd","id":3848,"implemented":false,"kind":"function","modifiers":[],"name":"transferFrom","nameLocation":"2655:12:50","nodeType":"FunctionDefinition","parameters":{"id":3844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3839,"mutability":"mutable","name":"from","nameLocation":"2676:4:50","nodeType":"VariableDeclaration","scope":3848,"src":"2668:12:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3838,"name":"address","nodeType":"ElementaryTypeName","src":"2668:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3841,"mutability":"mutable","name":"to","nameLocation":"2690:2:50","nodeType":"VariableDeclaration","scope":3848,"src":"2682:10:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3840,"name":"address","nodeType":"ElementaryTypeName","src":"2682:7:50","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3843,"mutability":"mutable","name":"amount","nameLocation":"2702:6:50","nodeType":"VariableDeclaration","scope":3848,"src":"2694:14:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3842,"name":"uint256","nodeType":"ElementaryTypeName","src":"2694:7:50","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2667:42:50"},"returnParameters":{"id":3847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3848,"src":"2728:4:50","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":3845,"name":"bool","nodeType":"ElementaryTypeName","src":"2728:4:50","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2727:6:50"},"scope":3849,"src":"2646:88:50","stateMutability":"nonpayable","virtual":false,"visibility":"external"}],"scope":3850,"src":"202:2534:50","usedErrors":[],"usedEvents":[3783,3792]}],"src":"106:2631:50"},"id":50},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","exportedSymbols":{"IERC20Permit":[3885]},"id":3886,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3851,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"123:23:51"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC20Permit","contractDependencies":[],"contractKind":"interface","documentation":{"id":3852,"nodeType":"StructuredDocumentation","src":"148:480:51","text":" @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n need to send a transaction, and thus is not required to hold Ether at all."},"fullyImplemented":false,"id":3885,"linearizedBaseContracts":[3885],"name":"IERC20Permit","nameLocation":"639:12:51","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":3853,"nodeType":"StructuredDocumentation","src":"658:792:51","text":" @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n given ``owner``'s signed approval.\n IMPORTANT: The same issues {IERC20-approve} has related to transaction\n ordering also apply here.\n Emits an {Approval} event.\n Requirements:\n - `spender` cannot be the zero address.\n - `deadline` must be a timestamp in the future.\n - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n over the EIP712-formatted function arguments.\n - the signature must use ``owner``'s current nonce (see {nonces}).\n For more information on the signature format, see the\n https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n section]."},"functionSelector":"d505accf","id":3870,"implemented":false,"kind":"function","modifiers":[],"name":"permit","nameLocation":"1464:6:51","nodeType":"FunctionDefinition","parameters":{"id":3868,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3855,"mutability":"mutable","name":"owner","nameLocation":"1488:5:51","nodeType":"VariableDeclaration","scope":3870,"src":"1480:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3854,"name":"address","nodeType":"ElementaryTypeName","src":"1480:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3857,"mutability":"mutable","name":"spender","nameLocation":"1511:7:51","nodeType":"VariableDeclaration","scope":3870,"src":"1503:15:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3856,"name":"address","nodeType":"ElementaryTypeName","src":"1503:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3859,"mutability":"mutable","name":"value","nameLocation":"1536:5:51","nodeType":"VariableDeclaration","scope":3870,"src":"1528:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3858,"name":"uint256","nodeType":"ElementaryTypeName","src":"1528:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3861,"mutability":"mutable","name":"deadline","nameLocation":"1559:8:51","nodeType":"VariableDeclaration","scope":3870,"src":"1551:16:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3860,"name":"uint256","nodeType":"ElementaryTypeName","src":"1551:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":3863,"mutability":"mutable","name":"v","nameLocation":"1583:1:51","nodeType":"VariableDeclaration","scope":3870,"src":"1577:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":3862,"name":"uint8","nodeType":"ElementaryTypeName","src":"1577:5:51","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":3865,"mutability":"mutable","name":"r","nameLocation":"1602:1:51","nodeType":"VariableDeclaration","scope":3870,"src":"1594:9:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3864,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1594:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":3867,"mutability":"mutable","name":"s","nameLocation":"1621:1:51","nodeType":"VariableDeclaration","scope":3870,"src":"1613:9:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3866,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1613:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1470:158:51"},"returnParameters":{"id":3869,"nodeType":"ParameterList","parameters":[],"src":"1637:0:51"},"scope":3885,"src":"1455:183:51","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":3871,"nodeType":"StructuredDocumentation","src":"1644:294:51","text":" @dev Returns the current nonce for `owner`. This value must be\n included whenever a signature is generated for {permit}.\n Every successful call to {permit} increases ``owner``'s nonce by one. This\n prevents a signature from being used multiple times."},"functionSelector":"7ecebe00","id":3878,"implemented":false,"kind":"function","modifiers":[],"name":"nonces","nameLocation":"1952:6:51","nodeType":"FunctionDefinition","parameters":{"id":3874,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3873,"mutability":"mutable","name":"owner","nameLocation":"1967:5:51","nodeType":"VariableDeclaration","scope":3878,"src":"1959:13:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3872,"name":"address","nodeType":"ElementaryTypeName","src":"1959:7:51","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1958:15:51"},"returnParameters":{"id":3877,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3876,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3878,"src":"1997:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3875,"name":"uint256","nodeType":"ElementaryTypeName","src":"1997:7:51","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1996:9:51"},"scope":3885,"src":"1943:63:51","stateMutability":"view","virtual":false,"visibility":"external"},{"documentation":{"id":3879,"nodeType":"StructuredDocumentation","src":"2012:128:51","text":" @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"functionSelector":"3644e515","id":3884,"implemented":false,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"2207:16:51","nodeType":"FunctionDefinition","parameters":{"id":3880,"nodeType":"ParameterList","parameters":[],"src":"2223:2:51"},"returnParameters":{"id":3883,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3882,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":3884,"src":"2249:7:51","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":3881,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2249:7:51","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2248:9:51"},"scope":3885,"src":"2198:60:51","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":3886,"src":"629:1631:51","usedErrors":[],"usedEvents":[]}],"src":"123:2138:51"},"id":51},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol","exportedSymbols":{"Address":[4591],"IERC20":[3849],"IERC20Permit":[3885],"SafeERC20":[4261]},"id":4262,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":3887,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"115:23:52"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"../IERC20.sol","id":3888,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4262,"sourceUnit":3850,"src":"140:23:52","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol","file":"../extensions/IERC20Permit.sol","id":3889,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4262,"sourceUnit":3886,"src":"164:40:52","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"../../../utils/Address.sol","id":3890,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4262,"sourceUnit":4592,"src":"205:36:52","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"SafeERC20","contractDependencies":[],"contractKind":"library","documentation":{"id":3891,"nodeType":"StructuredDocumentation","src":"243:457:52","text":" @title SafeERC20\n @dev Wrappers around ERC20 operations that throw on failure (when the token\n contract returns false). Tokens that return no value (and instead revert or\n throw on failure) are also supported, non-reverting calls are assumed to be\n successful.\n To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n which allows you to call the safe operations as `token.safeTransfer(...)`, etc."},"fullyImplemented":true,"id":4261,"linearizedBaseContracts":[4261],"name":"SafeERC20","nameLocation":"709:9:52","nodeType":"ContractDefinition","nodes":[{"global":false,"id":3894,"libraryName":{"id":3892,"name":"Address","nameLocations":["731:7:52"],"nodeType":"IdentifierPath","referencedDeclaration":4591,"src":"731:7:52"},"nodeType":"UsingForDirective","src":"725:26:52","typeName":{"id":3893,"name":"address","nodeType":"ElementaryTypeName","src":"743:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"body":{"id":3917,"nodeType":"Block","src":"1013:103:52","statements":[{"expression":{"arguments":[{"id":3906,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"1043:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3909,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3898,"src":"1073:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":3910,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1079:8:52","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3816,"src":"1073:14:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3911,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1088:8:52","memberName":"selector","nodeType":"MemberAccess","src":"1073:23:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3912,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3900,"src":"1098:2:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3913,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3902,"src":"1102:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3907,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1050:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3908,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1054:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1050:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3914,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1050:58:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3905,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"1023:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3915,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1023:86:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3916,"nodeType":"ExpressionStatement","src":"1023:86:52"}]},"documentation":{"id":3895,"nodeType":"StructuredDocumentation","src":"757:179:52","text":" @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":3918,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransfer","nameLocation":"950:12:52","nodeType":"FunctionDefinition","parameters":{"id":3903,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3898,"mutability":"mutable","name":"token","nameLocation":"970:5:52","nodeType":"VariableDeclaration","scope":3918,"src":"963:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":3897,"nodeType":"UserDefinedTypeName","pathNode":{"id":3896,"name":"IERC20","nameLocations":["963:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"963:6:52"},"referencedDeclaration":3849,"src":"963:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3900,"mutability":"mutable","name":"to","nameLocation":"985:2:52","nodeType":"VariableDeclaration","scope":3918,"src":"977:10:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3899,"name":"address","nodeType":"ElementaryTypeName","src":"977:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3902,"mutability":"mutable","name":"value","nameLocation":"997:5:52","nodeType":"VariableDeclaration","scope":3918,"src":"989:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3901,"name":"uint256","nodeType":"ElementaryTypeName","src":"989:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"962:41:52"},"returnParameters":{"id":3904,"nodeType":"ParameterList","parameters":[],"src":"1013:0:52"},"scope":4261,"src":"941:175:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3944,"nodeType":"Block","src":"1445:113:52","statements":[{"expression":{"arguments":[{"id":3932,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"1475:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3935,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3922,"src":"1505:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":3936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1511:12:52","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3848,"src":"1505:18:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":3937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1524:8:52","memberName":"selector","nodeType":"MemberAccess","src":"1505:27:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3938,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3924,"src":"1534:4:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3939,"name":"to","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3926,"src":"1540:2:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3940,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3928,"src":"1544:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3933,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1482:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3934,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1486:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"1482:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3941,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1482:68:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3931,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"1455:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3942,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1455:96:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3943,"nodeType":"ExpressionStatement","src":"1455:96:52"}]},"documentation":{"id":3919,"nodeType":"StructuredDocumentation","src":"1122:228:52","text":" @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\n calling contract. If `token` returns no value, non-reverting calls are assumed to be successful."},"id":3945,"implemented":true,"kind":"function","modifiers":[],"name":"safeTransferFrom","nameLocation":"1364:16:52","nodeType":"FunctionDefinition","parameters":{"id":3929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3922,"mutability":"mutable","name":"token","nameLocation":"1388:5:52","nodeType":"VariableDeclaration","scope":3945,"src":"1381:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":3921,"nodeType":"UserDefinedTypeName","pathNode":{"id":3920,"name":"IERC20","nameLocations":["1381:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"1381:6:52"},"referencedDeclaration":3849,"src":"1381:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3924,"mutability":"mutable","name":"from","nameLocation":"1403:4:52","nodeType":"VariableDeclaration","scope":3945,"src":"1395:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3923,"name":"address","nodeType":"ElementaryTypeName","src":"1395:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3926,"mutability":"mutable","name":"to","nameLocation":"1417:2:52","nodeType":"VariableDeclaration","scope":3945,"src":"1409:10:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3925,"name":"address","nodeType":"ElementaryTypeName","src":"1409:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3928,"mutability":"mutable","name":"value","nameLocation":"1429:5:52","nodeType":"VariableDeclaration","scope":3945,"src":"1421:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3927,"name":"uint256","nodeType":"ElementaryTypeName","src":"1421:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1380:55:52"},"returnParameters":{"id":3930,"nodeType":"ParameterList","parameters":[],"src":"1445:0:52"},"scope":4261,"src":"1355:203:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":3988,"nodeType":"Block","src":"1894:497:52","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":3972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":3957,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"2143:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2152:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2143:10:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3960,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2142:12:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":3970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":3965,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2183:4:52","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}],"id":3964,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2175:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":3963,"name":"address","nodeType":"ElementaryTypeName","src":"2175:7:52","typeDescriptions":{}}},"id":3966,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2175:13:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3967,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"2190:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":3961,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"2159:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":3962,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2165:9:52","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3826,"src":"2159:15:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":3968,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2159:39:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":3969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2202:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2159:44:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":3971,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"2158:46:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"2142:62:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f20746f206e6f6e2d7a65726f20616c6c6f77616e6365","id":3973,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2218:56:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""},"value":"SafeERC20: approve from non-zero to non-zero allowance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_ef945ddb1bfdc0da870feb4560d868b047642b4ac7f2fb7f8b7c51cb4a411e25","typeString":"literal_string \"SafeERC20: approve from non-zero to non-zero allowance\""}],"id":3956,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2121:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":3974,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2121:163:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3975,"nodeType":"ExpressionStatement","src":"2121:163:52"},{"expression":{"arguments":[{"id":3977,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"2314:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":3980,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3949,"src":"2344:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":3981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2350:7:52","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"2344:13:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":3982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2358:8:52","memberName":"selector","nodeType":"MemberAccess","src":"2344:22:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":3983,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3951,"src":"2368:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":3984,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3953,"src":"2377:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":3978,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2321:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":3979,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2325:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2321:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":3985,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2321:62:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":3976,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"2294:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":3986,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2294:90:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":3987,"nodeType":"ExpressionStatement","src":"2294:90:52"}]},"documentation":{"id":3946,"nodeType":"StructuredDocumentation","src":"1564:249:52","text":" @dev Deprecated. This function has issues similar to the ones found in\n {IERC20-approve}, and its usage is discouraged.\n Whenever possible, use {safeIncreaseAllowance} and\n {safeDecreaseAllowance} instead."},"id":3989,"implemented":true,"kind":"function","modifiers":[],"name":"safeApprove","nameLocation":"1827:11:52","nodeType":"FunctionDefinition","parameters":{"id":3954,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3949,"mutability":"mutable","name":"token","nameLocation":"1846:5:52","nodeType":"VariableDeclaration","scope":3989,"src":"1839:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":3948,"nodeType":"UserDefinedTypeName","pathNode":{"id":3947,"name":"IERC20","nameLocations":["1839:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"1839:6:52"},"referencedDeclaration":3849,"src":"1839:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3951,"mutability":"mutable","name":"spender","nameLocation":"1861:7:52","nodeType":"VariableDeclaration","scope":3989,"src":"1853:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3950,"name":"address","nodeType":"ElementaryTypeName","src":"1853:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3953,"mutability":"mutable","name":"value","nameLocation":"1878:5:52","nodeType":"VariableDeclaration","scope":3989,"src":"1870:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3952,"name":"uint256","nodeType":"ElementaryTypeName","src":"1870:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:46:52"},"returnParameters":{"id":3955,"nodeType":"ParameterList","parameters":[],"src":"1894:0:52"},"scope":4261,"src":"1818:573:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4025,"nodeType":"Block","src":"2668:194:52","statements":[{"assignments":[4001],"declarations":[{"constant":false,"id":4001,"mutability":"mutable","name":"oldAllowance","nameLocation":"2686:12:52","nodeType":"VariableDeclaration","scope":4025,"src":"2678:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4000,"name":"uint256","nodeType":"ElementaryTypeName","src":"2678:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4010,"initialValue":{"arguments":[{"arguments":[{"id":4006,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2725:4:52","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}],"id":4005,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2717:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4004,"name":"address","nodeType":"ElementaryTypeName","src":"2717:7:52","typeDescriptions":{}}},"id":4007,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2717:13:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4008,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"2732:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4002,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"2701:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2707:9:52","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3826,"src":"2701:15:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4009,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2701:39:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2678:62:52"},{"expression":{"arguments":[{"id":4012,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"2770:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4015,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3993,"src":"2800:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4016,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2806:7:52","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"2800:13:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4017,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2814:8:52","memberName":"selector","nodeType":"MemberAccess","src":"2800:22:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4018,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3995,"src":"2824:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4021,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4019,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4001,"src":"2833:12:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":4020,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3997,"src":"2848:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2833:20:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4013,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2777:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4014,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2781:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"2777:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4022,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2777:77:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4011,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"2750:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4023,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2750:105:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4024,"nodeType":"ExpressionStatement","src":"2750:105:52"}]},"documentation":{"id":3990,"nodeType":"StructuredDocumentation","src":"2397:180:52","text":" @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4026,"implemented":true,"kind":"function","modifiers":[],"name":"safeIncreaseAllowance","nameLocation":"2591:21:52","nodeType":"FunctionDefinition","parameters":{"id":3998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":3993,"mutability":"mutable","name":"token","nameLocation":"2620:5:52","nodeType":"VariableDeclaration","scope":4026,"src":"2613:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":3992,"nodeType":"UserDefinedTypeName","pathNode":{"id":3991,"name":"IERC20","nameLocations":["2613:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"2613:6:52"},"referencedDeclaration":3849,"src":"2613:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":3995,"mutability":"mutable","name":"spender","nameLocation":"2635:7:52","nodeType":"VariableDeclaration","scope":4026,"src":"2627:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":3994,"name":"address","nodeType":"ElementaryTypeName","src":"2627:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":3997,"mutability":"mutable","name":"value","nameLocation":"2652:5:52","nodeType":"VariableDeclaration","scope":4026,"src":"2644:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":3996,"name":"uint256","nodeType":"ElementaryTypeName","src":"2644:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2612:46:52"},"returnParameters":{"id":3999,"nodeType":"ParameterList","parameters":[],"src":"2668:0:52"},"scope":4261,"src":"2582:280:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4070,"nodeType":"Block","src":"3139:321:52","statements":[{"id":4069,"nodeType":"UncheckedBlock","src":"3149:305:52","statements":[{"assignments":[4038],"declarations":[{"constant":false,"id":4038,"mutability":"mutable","name":"oldAllowance","nameLocation":"3181:12:52","nodeType":"VariableDeclaration","scope":4069,"src":"3173:20:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4037,"name":"uint256","nodeType":"ElementaryTypeName","src":"3173:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4047,"initialValue":{"arguments":[{"arguments":[{"id":4043,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"3220:4:52","typeDescriptions":{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_SafeERC20_$4261","typeString":"library SafeERC20"}],"id":4042,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"3212:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4041,"name":"address","nodeType":"ElementaryTypeName","src":"3212:7:52","typeDescriptions":{}}},"id":4044,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3212:13:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4045,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4032,"src":"3227:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4039,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"3196:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4040,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3202:9:52","memberName":"allowance","nodeType":"MemberAccess","referencedDeclaration":3826,"src":"3196:15:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$_t_address_$returns$_t_uint256_$","typeString":"function (address,address) view external returns (uint256)"}},"id":4046,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3196:39:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3173:62:52"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4051,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4049,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"3257:12:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4050,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"3273:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3257:21:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a2064656372656173656420616c6c6f77616e63652062656c6f77207a65726f","id":4052,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3280:43:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""},"value":"SafeERC20: decreased allowance below zero"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_2c3af60974a758b7e72e108c9bf0943ecc9e4f2e8af4695da5f52fbf57a63d3a","typeString":"literal_string \"SafeERC20: decreased allowance below zero\""}],"id":4048,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"3249:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4053,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3249:75:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4054,"nodeType":"ExpressionStatement","src":"3249:75:52"},{"expression":{"arguments":[{"id":4056,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"3358:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4059,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4030,"src":"3388:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4060,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3394:7:52","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"3388:13:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4061,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3402:8:52","memberName":"selector","nodeType":"MemberAccess","src":"3388:22:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4062,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4032,"src":"3412:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4063,"name":"oldAllowance","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4038,"src":"3421:12:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":4064,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4034,"src":"3436:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3421:20:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4057,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3365:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4058,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3369:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3365:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3365:77:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4055,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"3338:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4067,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3338:105:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4068,"nodeType":"ExpressionStatement","src":"3338:105:52"}]}]},"documentation":{"id":4027,"nodeType":"StructuredDocumentation","src":"2868:180:52","text":" @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful."},"id":4071,"implemented":true,"kind":"function","modifiers":[],"name":"safeDecreaseAllowance","nameLocation":"3062:21:52","nodeType":"FunctionDefinition","parameters":{"id":4035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4030,"mutability":"mutable","name":"token","nameLocation":"3091:5:52","nodeType":"VariableDeclaration","scope":4071,"src":"3084:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4029,"nodeType":"UserDefinedTypeName","pathNode":{"id":4028,"name":"IERC20","nameLocations":["3084:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"3084:6:52"},"referencedDeclaration":3849,"src":"3084:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4032,"mutability":"mutable","name":"spender","nameLocation":"3106:7:52","nodeType":"VariableDeclaration","scope":4071,"src":"3098:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4031,"name":"address","nodeType":"ElementaryTypeName","src":"3098:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4034,"mutability":"mutable","name":"value","nameLocation":"3123:5:52","nodeType":"VariableDeclaration","scope":4071,"src":"3115:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4033,"name":"uint256","nodeType":"ElementaryTypeName","src":"3115:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3083:46:52"},"returnParameters":{"id":4036,"nodeType":"ParameterList","parameters":[],"src":"3139:0:52"},"scope":4261,"src":"3053:407:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4117,"nodeType":"Block","src":"3856:333:52","statements":[{"assignments":[4083],"declarations":[{"constant":false,"id":4083,"mutability":"mutable","name":"approvalCall","nameLocation":"3879:12:52","nodeType":"VariableDeclaration","scope":4117,"src":"3866:25:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4082,"name":"bytes","nodeType":"ElementaryTypeName","src":"3866:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4092,"initialValue":{"arguments":[{"expression":{"expression":{"id":4086,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"3917:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4087,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3923:7:52","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"3917:13:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4088,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3931:8:52","memberName":"selector","nodeType":"MemberAccess","src":"3917:22:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4089,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"3941:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4090,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4079,"src":"3950:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":4084,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3894:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4085,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3898:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"3894:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4091,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3894:62:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3866:90:52"},{"condition":{"id":4097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"3971:45:52","subExpression":{"arguments":[{"id":4094,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"3996:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"id":4095,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4003:12:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4093,"name":"_callOptionalReturnBool","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4260,"src":"3972:23:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$_t_bool_$","typeString":"function (contract IERC20,bytes memory) returns (bool)"}},"id":4096,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3972:44:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4116,"nodeType":"IfStatement","src":"3967:216:52","trueBody":{"id":4115,"nodeType":"Block","src":"4018:165:52","statements":[{"expression":{"arguments":[{"id":4099,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"4052:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"arguments":[{"expression":{"expression":{"id":4102,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"4082:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4103,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4088:7:52","memberName":"approve","nodeType":"MemberAccess","referencedDeclaration":3836,"src":"4082:13:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":4104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4096:8:52","memberName":"selector","nodeType":"MemberAccess","src":"4082:22:52","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"id":4105,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4077,"src":"4106:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"hexValue":"30","id":4106,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4115:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"expression":{"id":4100,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4059:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4101,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4063:18:52","memberName":"encodeWithSelector","nodeType":"MemberAccess","src":"4059:22:52","typeDescriptions":{"typeIdentifier":"t_function_abiencodewithselector_pure$_t_bytes4_$returns$_t_bytes_memory_ptr_$","typeString":"function (bytes4) pure returns (bytes memory)"}},"id":4107,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4059:58:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4098,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"4032:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4032:86:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4109,"nodeType":"ExpressionStatement","src":"4032:86:52"},{"expression":{"arguments":[{"id":4111,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4075,"src":"4152:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"id":4112,"name":"approvalCall","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4083,"src":"4159:12:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":4110,"name":"_callOptionalReturn","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4212,"src":"4132:19:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_contract$_IERC20_$3849_$_t_bytes_memory_ptr_$returns$__$","typeString":"function (contract IERC20,bytes memory)"}},"id":4113,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4132:40:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4114,"nodeType":"ExpressionStatement","src":"4132:40:52"}]}}]},"documentation":{"id":4072,"nodeType":"StructuredDocumentation","src":"3466:308:52","text":" @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\n non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\n to be set to zero before setting it to a non-zero value, such as USDT."},"id":4118,"implemented":true,"kind":"function","modifiers":[],"name":"forceApprove","nameLocation":"3788:12:52","nodeType":"FunctionDefinition","parameters":{"id":4080,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4075,"mutability":"mutable","name":"token","nameLocation":"3808:5:52","nodeType":"VariableDeclaration","scope":4118,"src":"3801:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4074,"nodeType":"UserDefinedTypeName","pathNode":{"id":4073,"name":"IERC20","nameLocations":["3801:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"3801:6:52"},"referencedDeclaration":3849,"src":"3801:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4077,"mutability":"mutable","name":"spender","nameLocation":"3823:7:52","nodeType":"VariableDeclaration","scope":4118,"src":"3815:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4076,"name":"address","nodeType":"ElementaryTypeName","src":"3815:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4079,"mutability":"mutable","name":"value","nameLocation":"3840:5:52","nodeType":"VariableDeclaration","scope":4118,"src":"3832:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4078,"name":"uint256","nodeType":"ElementaryTypeName","src":"3832:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3800:46:52"},"returnParameters":{"id":4081,"nodeType":"ParameterList","parameters":[],"src":"3856:0:52"},"scope":4261,"src":"3779:410:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4174,"nodeType":"Block","src":"4556:257:52","statements":[{"assignments":[4140],"declarations":[{"constant":false,"id":4140,"mutability":"mutable","name":"nonceBefore","nameLocation":"4574:11:52","nodeType":"VariableDeclaration","scope":4174,"src":"4566:19:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4139,"name":"uint256","nodeType":"ElementaryTypeName","src":"4566:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4145,"initialValue":{"arguments":[{"id":4143,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4601:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4141,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4122,"src":"4588:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$3885","typeString":"contract IERC20Permit"}},"id":4142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4594:6:52","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3878,"src":"4588:12:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4144,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4588:19:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4566:41:52"},{"expression":{"arguments":[{"id":4149,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4630:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4150,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4126,"src":"4637:7:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4151,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4128,"src":"4646:5:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4152,"name":"deadline","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4130,"src":"4653:8:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":4153,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4132,"src":"4663:1:52","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":4154,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4134,"src":"4666:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":4155,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4136,"src":"4669:1:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":4146,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4122,"src":"4617:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$3885","typeString":"contract IERC20Permit"}},"id":4148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4623:6:52","memberName":"permit","nodeType":"MemberAccess","referencedDeclaration":3870,"src":"4617:12:52","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$","typeString":"function (address,address,uint256,uint256,uint8,bytes32,bytes32) external"}},"id":4156,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4617:54:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4157,"nodeType":"ExpressionStatement","src":"4617:54:52"},{"assignments":[4159],"declarations":[{"constant":false,"id":4159,"mutability":"mutable","name":"nonceAfter","nameLocation":"4689:10:52","nodeType":"VariableDeclaration","scope":4174,"src":"4681:18:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4158,"name":"uint256","nodeType":"ElementaryTypeName","src":"4681:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":4164,"initialValue":{"arguments":[{"id":4162,"name":"owner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4124,"src":"4715:5:52","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4160,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4122,"src":"4702:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$3885","typeString":"contract IERC20Permit"}},"id":4161,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4708:6:52","memberName":"nonces","nodeType":"MemberAccess","referencedDeclaration":3878,"src":"4702:12:52","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":4163,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4702:19:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4681:40:52"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4166,"name":"nonceAfter","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4159,"src":"4739:10:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4169,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4167,"name":"nonceBefore","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4140,"src":"4753:11:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":4168,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4767:1:52","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"4753:15:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4739:29:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a207065726d697420646964206e6f742073756363656564","id":4171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4770:35:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""},"value":"SafeERC20: permit did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cde8e927812a7a656f8f04e89ac4f4113d47940dd2125d11fcb8e0bd36bfc59d","typeString":"literal_string \"SafeERC20: permit did not succeed\""}],"id":4165,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"4731:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4172,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4731:75:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4173,"nodeType":"ExpressionStatement","src":"4731:75:52"}]},"documentation":{"id":4119,"nodeType":"StructuredDocumentation","src":"4195:141:52","text":" @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\n Revert on invalid signature."},"id":4175,"implemented":true,"kind":"function","modifiers":[],"name":"safePermit","nameLocation":"4350:10:52","nodeType":"FunctionDefinition","parameters":{"id":4137,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4122,"mutability":"mutable","name":"token","nameLocation":"4383:5:52","nodeType":"VariableDeclaration","scope":4175,"src":"4370:18:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$3885","typeString":"contract IERC20Permit"},"typeName":{"id":4121,"nodeType":"UserDefinedTypeName","pathNode":{"id":4120,"name":"IERC20Permit","nameLocations":["4370:12:52"],"nodeType":"IdentifierPath","referencedDeclaration":3885,"src":"4370:12:52"},"referencedDeclaration":3885,"src":"4370:12:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20Permit_$3885","typeString":"contract IERC20Permit"}},"visibility":"internal"},{"constant":false,"id":4124,"mutability":"mutable","name":"owner","nameLocation":"4406:5:52","nodeType":"VariableDeclaration","scope":4175,"src":"4398:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4123,"name":"address","nodeType":"ElementaryTypeName","src":"4398:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4126,"mutability":"mutable","name":"spender","nameLocation":"4429:7:52","nodeType":"VariableDeclaration","scope":4175,"src":"4421:15:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4125,"name":"address","nodeType":"ElementaryTypeName","src":"4421:7:52","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4128,"mutability":"mutable","name":"value","nameLocation":"4454:5:52","nodeType":"VariableDeclaration","scope":4175,"src":"4446:13:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4127,"name":"uint256","nodeType":"ElementaryTypeName","src":"4446:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4130,"mutability":"mutable","name":"deadline","nameLocation":"4477:8:52","nodeType":"VariableDeclaration","scope":4175,"src":"4469:16:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4129,"name":"uint256","nodeType":"ElementaryTypeName","src":"4469:7:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4132,"mutability":"mutable","name":"v","nameLocation":"4501:1:52","nodeType":"VariableDeclaration","scope":4175,"src":"4495:7:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":4131,"name":"uint8","nodeType":"ElementaryTypeName","src":"4495:5:52","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":4134,"mutability":"mutable","name":"r","nameLocation":"4520:1:52","nodeType":"VariableDeclaration","scope":4175,"src":"4512:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4133,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4512:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":4136,"mutability":"mutable","name":"s","nameLocation":"4539:1:52","nodeType":"VariableDeclaration","scope":4175,"src":"4531:9:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4135,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4531:7:52","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4360:186:52"},"returnParameters":{"id":4138,"nodeType":"ParameterList","parameters":[],"src":"4556:0:52"},"scope":4261,"src":"4341:472:52","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4211,"nodeType":"Block","src":"5266:572:52","statements":[{"assignments":[4185],"declarations":[{"constant":false,"id":4185,"mutability":"mutable","name":"returndata","nameLocation":"5628:10:52","nodeType":"VariableDeclaration","scope":4211,"src":"5615:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4184,"name":"bytes","nodeType":"ElementaryTypeName","src":"5615:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4194,"initialValue":{"arguments":[{"id":4191,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4181,"src":"5669:4:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564","id":4192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5675:34:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""},"value":"SafeERC20: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_47fb62c2c272651d2f0f342bac006756b8ba07f21cc5cb87e0fbb9d50c0c585b","typeString":"literal_string \"SafeERC20: low-level call failed\""}],"expression":{"arguments":[{"id":4188,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4179,"src":"5649:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}],"id":4187,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5641:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4186,"name":"address","nodeType":"ElementaryTypeName","src":"5641:7:52","typeDescriptions":{}}},"id":4189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:14:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4190,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5656:12:52","memberName":"functionCall","nodeType":"MemberAccess","referencedDeclaration":4351,"src":"5641:27:52","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$attached_to$_t_address_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4193,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5641:69:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"5615:95:52"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4199,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4196,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"5728:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5739:6:52","memberName":"length","nodeType":"MemberAccess","src":"5728:17:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4198,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5749:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"5728:22:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4202,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4185,"src":"5765:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4204,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5778:4:52","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4203,"name":"bool","nodeType":"ElementaryTypeName","src":"5778:4:52","typeDescriptions":{}}}],"id":4205,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"5777:6:52","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4200,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5754:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4201,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5758:6:52","memberName":"decode","nodeType":"MemberAccess","src":"5754:10:52","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4206,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5754:30:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"5728:56:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564","id":4208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5786:44:52","typeDescriptions":{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""},"value":"SafeERC20: ERC20 operation did not succeed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd","typeString":"literal_string \"SafeERC20: ERC20 operation did not succeed\""}],"id":4195,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5720:7:52","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4209,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5720:111:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4210,"nodeType":"ExpressionStatement","src":"5720:111:52"}]},"documentation":{"id":4176,"nodeType":"StructuredDocumentation","src":"4819:372:52","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants)."},"id":4212,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturn","nameLocation":"5205:19:52","nodeType":"FunctionDefinition","parameters":{"id":4182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4179,"mutability":"mutable","name":"token","nameLocation":"5232:5:52","nodeType":"VariableDeclaration","scope":4212,"src":"5225:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4178,"nodeType":"UserDefinedTypeName","pathNode":{"id":4177,"name":"IERC20","nameLocations":["5225:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"5225:6:52"},"referencedDeclaration":3849,"src":"5225:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4181,"mutability":"mutable","name":"data","nameLocation":"5252:4:52","nodeType":"VariableDeclaration","scope":4212,"src":"5239:17:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4180,"name":"bytes","nodeType":"ElementaryTypeName","src":"5239:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5224:33:52"},"returnParameters":{"id":4183,"nodeType":"ParameterList","parameters":[],"src":"5266:0:52"},"scope":4261,"src":"5196:642:52","stateMutability":"nonpayable","virtual":false,"visibility":"private"},{"body":{"id":4259,"nodeType":"Block","src":"6428:505:52","statements":[{"assignments":[4224,4226],"declarations":[{"constant":false,"id":4224,"mutability":"mutable","name":"success","nameLocation":"6729:7:52","nodeType":"VariableDeclaration","scope":4259,"src":"6724:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4223,"name":"bool","nodeType":"ElementaryTypeName","src":"6724:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4226,"mutability":"mutable","name":"returndata","nameLocation":"6751:10:52","nodeType":"VariableDeclaration","scope":4259,"src":"6738:23:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4225,"name":"bytes","nodeType":"ElementaryTypeName","src":"6738:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4234,"initialValue":{"arguments":[{"id":4232,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4218,"src":"6785:4:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"arguments":[{"id":4229,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"6773:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}],"id":4228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6765:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4227,"name":"address","nodeType":"ElementaryTypeName","src":"6765:7:52","typeDescriptions":{}}},"id":4230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:14:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4231,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6780:4:52","memberName":"call","nodeType":"MemberAccess","src":"6765:19:52","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4233,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6765:25:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6723:67:52"},{"expression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4249,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4235,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4224,"src":"6819:7:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":4247,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4239,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4236,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"6831:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4237,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6842:6:52","memberName":"length","nodeType":"MemberAccess","src":"6831:17:52","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6852:1:52","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6831:22:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"arguments":[{"id":4242,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4226,"src":"6868:10:52","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"components":[{"id":4244,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6881:4:52","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"},"typeName":{"id":4243,"name":"bool","nodeType":"ElementaryTypeName","src":"6881:4:52","typeDescriptions":{}}}],"id":4245,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6880:6:52","typeDescriptions":{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_type$_t_bool_$","typeString":"type(bool)"}],"expression":{"id":4240,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"6857:3:52","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":4241,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6861:6:52","memberName":"decode","nodeType":"MemberAccess","src":"6857:10:52","typeDescriptions":{"typeIdentifier":"t_function_abidecode_pure$__$returns$__$","typeString":"function () pure"}},"id":4246,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6857:30:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6831:56:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}],"id":4248,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6830:58:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:69:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"arguments":[{"arguments":[{"id":4254,"name":"token","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4216,"src":"6919:5:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}],"id":4253,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6911:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4252,"name":"address","nodeType":"ElementaryTypeName","src":"6911:7:52","typeDescriptions":{}}},"id":4255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6911:14:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":4250,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4591,"src":"6892:7:52","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Address_$4591_$","typeString":"type(library Address)"}},"id":4251,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6900:10:52","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":4279,"src":"6892:18:52","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4256,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6892:34:52","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6819:107:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4222,"id":4258,"nodeType":"Return","src":"6800:126:52"}]},"documentation":{"id":4213,"nodeType":"StructuredDocumentation","src":"5844:490:52","text":" @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n on the return value: the return value is optional (but if data is returned, it must not be false).\n @param token The token targeted by the call.\n @param data The call data (encoded using abi.encode or one of its variants).\n This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead."},"id":4260,"implemented":true,"kind":"function","modifiers":[],"name":"_callOptionalReturnBool","nameLocation":"6348:23:52","nodeType":"FunctionDefinition","parameters":{"id":4219,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4216,"mutability":"mutable","name":"token","nameLocation":"6379:5:52","nodeType":"VariableDeclaration","scope":4260,"src":"6372:12:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4215,"nodeType":"UserDefinedTypeName","pathNode":{"id":4214,"name":"IERC20","nameLocations":["6372:6:52"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"6372:6:52"},"referencedDeclaration":3849,"src":"6372:6:52","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4218,"mutability":"mutable","name":"data","nameLocation":"6399:4:52","nodeType":"VariableDeclaration","scope":4260,"src":"6386:17:52","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4217,"name":"bytes","nodeType":"ElementaryTypeName","src":"6386:5:52","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6371:33:52"},"returnParameters":{"id":4222,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4221,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4260,"src":"6422:4:52","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4220,"name":"bool","nodeType":"ElementaryTypeName","src":"6422:4:52","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"6421:6:52"},"scope":4261,"src":"6339:594:52","stateMutability":"nonpayable","virtual":false,"visibility":"private"}],"scope":4262,"src":"701:6234:52","usedErrors":[],"usedEvents":[]}],"src":"115:6821:52"},"id":52},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[4591]},"id":4592,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4263,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:53"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":4264,"nodeType":"StructuredDocumentation","src":"126:67:53","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":4591,"linearizedBaseContracts":[4591],"name":"Address","nameLocation":"202:7:53","nodeType":"ContractDefinition","nodes":[{"body":{"id":4278,"nodeType":"Block","src":"1478:254:53","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":4272,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4267,"src":"1702:7:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4273,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:53","memberName":"code","nodeType":"MemberAccess","src":"1702:12:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:53","memberName":"length","nodeType":"MemberAccess","src":"1702:19:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4275,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":4271,"id":4277,"nodeType":"Return","src":"1695:30:53"}]},"documentation":{"id":4265,"nodeType":"StructuredDocumentation","src":"216:1191:53","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":4279,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:53","nodeType":"FunctionDefinition","parameters":{"id":4268,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4267,"mutability":"mutable","name":"account","nameLocation":"1440:7:53","nodeType":"VariableDeclaration","scope":4279,"src":"1432:15:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4266,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:53"},"returnParameters":{"id":4271,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4270,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4279,"src":"1472:4:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4269,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:53"},"scope":4591,"src":"1412:320:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4312,"nodeType":"Block","src":"2718:241:53","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4294,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4290,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:53","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4591","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4591","typeString":"library Address"}],"id":4289,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4288,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:53","typeDescriptions":{}}},"id":4291,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4292,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:53","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4293,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"2761:6:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":4295,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":4287,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4296,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4297,"nodeType":"ExpressionStatement","src":"2728:73:53"},{"assignments":[4299,null],"declarations":[{"constant":false,"id":4299,"mutability":"mutable","name":"success","nameLocation":"2818:7:53","nodeType":"VariableDeclaration","scope":4312,"src":"2813:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4298,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":4306,"initialValue":{"arguments":[{"hexValue":"","id":4304,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":4300,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4282,"src":"2831:9:53","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":4301,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:53","memberName":"call","nodeType":"MemberAccess","src":"2831:14:53","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4302,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4284,"src":"2853:6:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:53","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4305,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:53"},{"expression":{"arguments":[{"id":4308,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4299,"src":"2882:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":4309,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":4307,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4310,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4311,"nodeType":"ExpressionStatement","src":"2874:78:53"}]},"documentation":{"id":4280,"nodeType":"StructuredDocumentation","src":"1738:904:53","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":4313,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:53","nodeType":"FunctionDefinition","parameters":{"id":4285,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4282,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:53","nodeType":"VariableDeclaration","scope":4313,"src":"2666:25:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4281,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:53","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4284,"mutability":"mutable","name":"amount","nameLocation":"2701:6:53","nodeType":"VariableDeclaration","scope":4313,"src":"2693:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4283,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:53"},"returnParameters":{"id":4286,"nodeType":"ParameterList","parameters":[],"src":"2718:0:53"},"scope":4591,"src":"2647:312:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4330,"nodeType":"Block","src":"3790:96:53","statements":[{"expression":{"arguments":[{"id":4324,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4316,"src":"3829:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4325,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4318,"src":"3837:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4326,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":4327,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":4323,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4371,4415],"referencedDeclaration":4415,"src":"3807:21:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4328,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4322,"id":4329,"nodeType":"Return","src":"3800:79:53"}]},"documentation":{"id":4314,"nodeType":"StructuredDocumentation","src":"2965:731:53","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":4331,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:53","nodeType":"FunctionDefinition","parameters":{"id":4319,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4316,"mutability":"mutable","name":"target","nameLocation":"3731:6:53","nodeType":"VariableDeclaration","scope":4331,"src":"3723:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4315,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4318,"mutability":"mutable","name":"data","nameLocation":"3752:4:53","nodeType":"VariableDeclaration","scope":4331,"src":"3739:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4317,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:53"},"returnParameters":{"id":4322,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4321,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4331,"src":"3776:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4320,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:53"},"scope":4591,"src":"3701:185:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4350,"nodeType":"Block","src":"4255:76:53","statements":[{"expression":{"arguments":[{"id":4344,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4334,"src":"4294:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4345,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4336,"src":"4302:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":4346,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":4347,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4338,"src":"4311:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4343,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4371,4415],"referencedDeclaration":4415,"src":"4272:21:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4348,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4342,"id":4349,"nodeType":"Return","src":"4265:59:53"}]},"documentation":{"id":4332,"nodeType":"StructuredDocumentation","src":"3892:211:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4351,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:53","nodeType":"FunctionDefinition","parameters":{"id":4339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4334,"mutability":"mutable","name":"target","nameLocation":"4147:6:53","nodeType":"VariableDeclaration","scope":4351,"src":"4139:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4333,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4336,"mutability":"mutable","name":"data","nameLocation":"4176:4:53","nodeType":"VariableDeclaration","scope":4351,"src":"4163:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4335,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4338,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:53","nodeType":"VariableDeclaration","scope":4351,"src":"4190:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4337,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:53"},"returnParameters":{"id":4342,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4351,"src":"4241:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4340,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:53"},"scope":4591,"src":"4108:223:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4370,"nodeType":"Block","src":"4806:111:53","statements":[{"expression":{"arguments":[{"id":4364,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4354,"src":"4845:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4365,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4356,"src":"4853:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4366,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4358,"src":"4859:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":4367,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":4363,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[4371,4415],"referencedDeclaration":4415,"src":"4823:21:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":4368,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4362,"id":4369,"nodeType":"Return","src":"4816:94:53"}]},"documentation":{"id":4352,"nodeType":"StructuredDocumentation","src":"4337:351:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":4371,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:53","nodeType":"FunctionDefinition","parameters":{"id":4359,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4354,"mutability":"mutable","name":"target","nameLocation":"4732:6:53","nodeType":"VariableDeclaration","scope":4371,"src":"4724:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4353,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4356,"mutability":"mutable","name":"data","nameLocation":"4753:4:53","nodeType":"VariableDeclaration","scope":4371,"src":"4740:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4355,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4358,"mutability":"mutable","name":"value","nameLocation":"4767:5:53","nodeType":"VariableDeclaration","scope":4371,"src":"4759:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4357,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:53"},"returnParameters":{"id":4362,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4361,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4371,"src":"4792:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4360,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:53"},"scope":4591,"src":"4693:224:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4414,"nodeType":"Block","src":"5344:267:53","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4392,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":4388,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:53","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$4591","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$4591","typeString":"library Address"}],"id":4387,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:53","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":4386,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:53","typeDescriptions":{}}},"id":4389,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4390,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:53","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":4391,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"5387:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":4393,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":4385,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4395,"nodeType":"ExpressionStatement","src":"5354:81:53"},{"assignments":[4397,4399],"declarations":[{"constant":false,"id":4397,"mutability":"mutable","name":"success","nameLocation":"5451:7:53","nodeType":"VariableDeclaration","scope":4414,"src":"5446:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4396,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4399,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:53","nodeType":"VariableDeclaration","scope":4414,"src":"5460:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4398,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4406,"initialValue":{"arguments":[{"id":4404,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4376,"src":"5513:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4400,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"5487:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4401,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:53","memberName":"call","nodeType":"MemberAccess","src":"5487:11:53","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":4402,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4378,"src":"5506:5:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:53","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":4405,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:53"},{"expression":{"arguments":[{"id":4408,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4374,"src":"5562:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4409,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4397,"src":"5570:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4410,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4399,"src":"5579:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4411,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4380,"src":"5591:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4407,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"5535:26:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4412,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4384,"id":4413,"nodeType":"Return","src":"5528:76:53"}]},"documentation":{"id":4372,"nodeType":"StructuredDocumentation","src":"4923:237:53","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":4415,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:53","nodeType":"FunctionDefinition","parameters":{"id":4381,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4374,"mutability":"mutable","name":"target","nameLocation":"5213:6:53","nodeType":"VariableDeclaration","scope":4415,"src":"5205:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4373,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4376,"mutability":"mutable","name":"data","nameLocation":"5242:4:53","nodeType":"VariableDeclaration","scope":4415,"src":"5229:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4375,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4378,"mutability":"mutable","name":"value","nameLocation":"5264:5:53","nodeType":"VariableDeclaration","scope":4415,"src":"5256:13:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4377,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4380,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:53","nodeType":"VariableDeclaration","scope":4415,"src":"5279:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4379,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:53"},"returnParameters":{"id":4384,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4383,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4415,"src":"5330:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4382,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:53"},"scope":4591,"src":"5165:446:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4431,"nodeType":"Block","src":"5888:97:53","statements":[{"expression":{"arguments":[{"id":4426,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4418,"src":"5924:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4427,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4420,"src":"5932:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":4428,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":4425,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[4432,4461],"referencedDeclaration":4461,"src":"5905:18:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":4429,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4424,"id":4430,"nodeType":"Return","src":"5898:80:53"}]},"documentation":{"id":4416,"nodeType":"StructuredDocumentation","src":"5617:166:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4432,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:53","nodeType":"FunctionDefinition","parameters":{"id":4421,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4418,"mutability":"mutable","name":"target","nameLocation":"5824:6:53","nodeType":"VariableDeclaration","scope":4432,"src":"5816:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4417,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4420,"mutability":"mutable","name":"data","nameLocation":"5845:4:53","nodeType":"VariableDeclaration","scope":4432,"src":"5832:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4419,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:53"},"returnParameters":{"id":4424,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4423,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4432,"src":"5874:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4422,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:53"},"scope":4591,"src":"5788:197:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4460,"nodeType":"Block","src":"6327:168:53","statements":[{"assignments":[4445,4447],"declarations":[{"constant":false,"id":4445,"mutability":"mutable","name":"success","nameLocation":"6343:7:53","nodeType":"VariableDeclaration","scope":4460,"src":"6338:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4444,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4447,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:53","nodeType":"VariableDeclaration","scope":4460,"src":"6352:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4446,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4452,"initialValue":{"arguments":[{"id":4450,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4437,"src":"6397:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4448,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"6379:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4449,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:53","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:53","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":4451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:53"},{"expression":{"arguments":[{"id":4454,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4435,"src":"6446:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4455,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4445,"src":"6454:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4456,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4447,"src":"6463:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4457,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4439,"src":"6475:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4453,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"6419:26:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4458,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4443,"id":4459,"nodeType":"Return","src":"6412:76:53"}]},"documentation":{"id":4433,"nodeType":"StructuredDocumentation","src":"5991:173:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":4461,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:53","nodeType":"FunctionDefinition","parameters":{"id":4440,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4435,"mutability":"mutable","name":"target","nameLocation":"6214:6:53","nodeType":"VariableDeclaration","scope":4461,"src":"6206:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4434,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4437,"mutability":"mutable","name":"data","nameLocation":"6243:4:53","nodeType":"VariableDeclaration","scope":4461,"src":"6230:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4436,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4439,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:53","nodeType":"VariableDeclaration","scope":4461,"src":"6257:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4438,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:53"},"returnParameters":{"id":4443,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4442,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4461,"src":"6313:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4441,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:53"},"scope":4591,"src":"6169:326:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4477,"nodeType":"Block","src":"6771:101:53","statements":[{"expression":{"arguments":[{"id":4472,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4464,"src":"6809:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4473,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4466,"src":"6817:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":4474,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":4471,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[4478,4507],"referencedDeclaration":4507,"src":"6788:20:53","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":4475,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4470,"id":4476,"nodeType":"Return","src":"6781:84:53"}]},"documentation":{"id":4462,"nodeType":"StructuredDocumentation","src":"6501:168:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4478,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:53","nodeType":"FunctionDefinition","parameters":{"id":4467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4464,"mutability":"mutable","name":"target","nameLocation":"6712:6:53","nodeType":"VariableDeclaration","scope":4478,"src":"6704:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4463,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4466,"mutability":"mutable","name":"data","nameLocation":"6733:4:53","nodeType":"VariableDeclaration","scope":4478,"src":"6720:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4465,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:53"},"returnParameters":{"id":4470,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4469,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4478,"src":"6757:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4468,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:53"},"scope":4591,"src":"6674:198:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4506,"nodeType":"Block","src":"7213:170:53","statements":[{"assignments":[4491,4493],"declarations":[{"constant":false,"id":4491,"mutability":"mutable","name":"success","nameLocation":"7229:7:53","nodeType":"VariableDeclaration","scope":4506,"src":"7224:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4490,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4493,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:53","nodeType":"VariableDeclaration","scope":4506,"src":"7238:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4492,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":4498,"initialValue":{"arguments":[{"id":4496,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4483,"src":"7285:4:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":4494,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"7265:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4495,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:53","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:53","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":4497,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:53"},{"expression":{"arguments":[{"id":4500,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4481,"src":"7334:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4501,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4491,"src":"7342:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":4502,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4493,"src":"7351:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4503,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4485,"src":"7363:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4499,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4546,"src":"7307:26:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":4504,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4489,"id":4505,"nodeType":"Return","src":"7300:76:53"}]},"documentation":{"id":4479,"nodeType":"StructuredDocumentation","src":"6878:175:53","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":4507,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:53","nodeType":"FunctionDefinition","parameters":{"id":4486,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4481,"mutability":"mutable","name":"target","nameLocation":"7105:6:53","nodeType":"VariableDeclaration","scope":4507,"src":"7097:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4480,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4483,"mutability":"mutable","name":"data","nameLocation":"7134:4:53","nodeType":"VariableDeclaration","scope":4507,"src":"7121:17:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4482,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4485,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:53","nodeType":"VariableDeclaration","scope":4507,"src":"7148:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4484,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:53"},"returnParameters":{"id":4489,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4488,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4507,"src":"7199:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4487,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:53"},"scope":4591,"src":"7058:325:53","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":4545,"nodeType":"Block","src":"7865:434:53","statements":[{"condition":{"id":4521,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4512,"src":"7879:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4543,"nodeType":"Block","src":"8235:58:53","statements":[{"expression":{"arguments":[{"id":4539,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"8257:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4540,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4516,"src":"8269:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4538,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"8249:7:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4541,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4542,"nodeType":"ExpressionStatement","src":"8249:33:53"}]},"id":4544,"nodeType":"IfStatement","src":"7875:418:53","trueBody":{"id":4537,"nodeType":"Block","src":"7888:341:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4525,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4522,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"7906:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4523,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:53","memberName":"length","nodeType":"MemberAccess","src":"7906:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":4524,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4534,"nodeType":"IfStatement","src":"7902:286:53","trueBody":{"id":4533,"nodeType":"Block","src":"7930:258:53","statements":[{"expression":{"arguments":[{"arguments":[{"id":4528,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4510,"src":"8132:6:53","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":4527,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4279,"src":"8121:10:53","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":4529,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":4530,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:53","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":4526,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:53","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":4531,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4532,"nodeType":"ExpressionStatement","src":"8113:60:53"}]}},{"expression":{"id":4535,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4514,"src":"8208:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4520,"id":4536,"nodeType":"Return","src":"8201:17:53"}]}}]},"documentation":{"id":4508,"nodeType":"StructuredDocumentation","src":"7389:277:53","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":4546,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:53","nodeType":"FunctionDefinition","parameters":{"id":4517,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4510,"mutability":"mutable","name":"target","nameLocation":"7724:6:53","nodeType":"VariableDeclaration","scope":4546,"src":"7716:14:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4509,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:53","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4512,"mutability":"mutable","name":"success","nameLocation":"7745:7:53","nodeType":"VariableDeclaration","scope":4546,"src":"7740:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4511,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4514,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:53","nodeType":"VariableDeclaration","scope":4546,"src":"7762:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4513,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4516,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:53","nodeType":"VariableDeclaration","scope":4546,"src":"7795:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4515,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:53"},"returnParameters":{"id":4520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4519,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4546,"src":"7851:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4518,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:53"},"scope":4591,"src":"7671:628:53","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":4569,"nodeType":"Block","src":"8680:135:53","statements":[{"condition":{"id":4558,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4549,"src":"8694:7:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4567,"nodeType":"Block","src":"8751:58:53","statements":[{"expression":{"arguments":[{"id":4563,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4551,"src":"8773:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":4564,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4553,"src":"8785:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4562,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4590,"src":"8765:7:53","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":4565,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4566,"nodeType":"ExpressionStatement","src":"8765:33:53"}]},"id":4568,"nodeType":"IfStatement","src":"8690:119:53","trueBody":{"id":4561,"nodeType":"Block","src":"8703:42:53","statements":[{"expression":{"id":4559,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4551,"src":"8724:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":4557,"id":4560,"nodeType":"Return","src":"8717:17:53"}]}}]},"documentation":{"id":4547,"nodeType":"StructuredDocumentation","src":"8305:210:53","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":4570,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:53","nodeType":"FunctionDefinition","parameters":{"id":4554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4549,"mutability":"mutable","name":"success","nameLocation":"8560:7:53","nodeType":"VariableDeclaration","scope":4570,"src":"8555:12:53","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4548,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":4551,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:53","nodeType":"VariableDeclaration","scope":4570,"src":"8577:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4550,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4553,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:53","nodeType":"VariableDeclaration","scope":4570,"src":"8610:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4552,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:53"},"returnParameters":{"id":4557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4556,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4570,"src":"8666:12:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4555,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:53"},"scope":4591,"src":"8520:295:53","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4589,"nodeType":"Block","src":"8904:457:53","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":4580,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":4577,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4572,"src":"8980:10:53","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":4578,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:53","memberName":"length","nodeType":"MemberAccess","src":"8980:17:53","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":4579,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:53","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:53","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":4587,"nodeType":"Block","src":"9310:45:53","statements":[{"expression":{"arguments":[{"id":4584,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4574,"src":"9331:12:53","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":4583,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:53","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":4585,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:53","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4586,"nodeType":"ExpressionStatement","src":"9324:20:53"}]},"id":4588,"nodeType":"IfStatement","src":"8976:379:53","trueBody":{"id":4582,"nodeType":"Block","src":"9003:301:53","statements":[{"AST":{"nativeSrc":"9161:133:53","nodeType":"YulBlock","src":"9161:133:53","statements":[{"nativeSrc":"9179:40:53","nodeType":"YulVariableDeclaration","src":"9179:40:53","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:53","nodeType":"YulIdentifier","src":"9208:10:53"}],"functionName":{"name":"mload","nativeSrc":"9202:5:53","nodeType":"YulIdentifier","src":"9202:5:53"},"nativeSrc":"9202:17:53","nodeType":"YulFunctionCall","src":"9202:17:53"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:53","nodeType":"YulTypedName","src":"9183:15:53","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:53","nodeType":"YulLiteral","src":"9247:2:53","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:53","nodeType":"YulIdentifier","src":"9251:10:53"}],"functionName":{"name":"add","nativeSrc":"9243:3:53","nodeType":"YulIdentifier","src":"9243:3:53"},"nativeSrc":"9243:19:53","nodeType":"YulFunctionCall","src":"9243:19:53"},{"name":"returndata_size","nativeSrc":"9264:15:53","nodeType":"YulIdentifier","src":"9264:15:53"}],"functionName":{"name":"revert","nativeSrc":"9236:6:53","nodeType":"YulIdentifier","src":"9236:6:53"},"nativeSrc":"9236:44:53","nodeType":"YulFunctionCall","src":"9236:44:53"},"nativeSrc":"9236:44:53","nodeType":"YulExpressionStatement","src":"9236:44:53"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4572,"isOffset":false,"isSlot":false,"src":"9208:10:53","valueSize":1},{"declaration":4572,"isOffset":false,"isSlot":false,"src":"9251:10:53","valueSize":1}],"id":4581,"nodeType":"InlineAssembly","src":"9152:142:53"}]}}]},"id":4590,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:53","nodeType":"FunctionDefinition","parameters":{"id":4575,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4572,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:53","nodeType":"VariableDeclaration","scope":4590,"src":"8838:23:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":4571,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:53","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":4574,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:53","nodeType":"VariableDeclaration","scope":4590,"src":"8863:26:53","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":4573,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:53","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:53"},"returnParameters":{"id":4576,"nodeType":"ParameterList","parameters":[],"src":"8904:0:53"},"scope":4591,"src":"8821:540:53","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":4592,"src":"194:9169:53","usedErrors":[],"usedEvents":[]}],"src":"101:9263:53"},"id":53},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[4613]},"id":4614,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4593,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:54"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":4594,"nodeType":"StructuredDocumentation","src":"111:496:54","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":4613,"linearizedBaseContracts":[4613],"name":"Context","nameLocation":"626:7:54","nodeType":"ContractDefinition","nodes":[{"body":{"id":4602,"nodeType":"Block","src":"702:34:54","statements":[{"expression":{"expression":{"id":4599,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:54","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:54","memberName":"sender","nodeType":"MemberAccess","src":"719:10:54","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":4598,"id":4601,"nodeType":"Return","src":"712:17:54"}]},"id":4603,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:54","nodeType":"FunctionDefinition","parameters":{"id":4595,"nodeType":"ParameterList","parameters":[],"src":"659:2:54"},"returnParameters":{"id":4598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4603,"src":"693:7:54","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4596,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:54","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:54"},"scope":4613,"src":"640:96:54","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":4611,"nodeType":"Block","src":"809:32:54","statements":[{"expression":{"expression":{"id":4608,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:54","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:54","memberName":"data","nodeType":"MemberAccess","src":"826:8:54","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4607,"id":4610,"nodeType":"Return","src":"819:15:54"}]},"id":4612,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:54","nodeType":"FunctionDefinition","parameters":{"id":4604,"nodeType":"ParameterList","parameters":[],"src":"759:2:54"},"returnParameters":{"id":4607,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4606,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4612,"src":"793:14:54","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4605,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:54","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:54"},"scope":4613,"src":"742:99:54","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":4614,"src":"608:235:54","usedErrors":[],"usedEvents":[]}],"src":"86:758:54"},"id":54},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[4723]},"id":4724,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4615,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:55"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":4616,"nodeType":"StructuredDocumentation","src":"218:1201:55","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":4723,"linearizedBaseContracts":[4723],"name":"StorageSlot","nameLocation":"1428:11:55","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":4619,"members":[{"constant":false,"id":4618,"mutability":"mutable","name":"value","nameLocation":"1483:5:55","nodeType":"VariableDeclaration","scope":4619,"src":"1475:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4617,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:55","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:55","nodeType":"StructDefinition","scope":4723,"src":"1446:49:55","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":4622,"members":[{"constant":false,"id":4621,"mutability":"mutable","name":"value","nameLocation":"1535:5:55","nodeType":"VariableDeclaration","scope":4622,"src":"1530:10:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4620,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:55","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:55","nodeType":"StructDefinition","scope":4723,"src":"1501:46:55","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":4625,"members":[{"constant":false,"id":4624,"mutability":"mutable","name":"value","nameLocation":"1590:5:55","nodeType":"VariableDeclaration","scope":4625,"src":"1582:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4623,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:55","nodeType":"StructDefinition","scope":4723,"src":"1553:49:55","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":4628,"members":[{"constant":false,"id":4627,"mutability":"mutable","name":"value","nameLocation":"1645:5:55","nodeType":"VariableDeclaration","scope":4628,"src":"1637:13:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4626,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:55","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:55","nodeType":"StructDefinition","scope":4723,"src":"1608:49:55","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":4631,"members":[{"constant":false,"id":4630,"mutability":"mutable","name":"value","nameLocation":"1698:5:55","nodeType":"VariableDeclaration","scope":4631,"src":"1691:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4629,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:55","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:55","nodeType":"StructDefinition","scope":4723,"src":"1663:47:55","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":4634,"members":[{"constant":false,"id":4633,"mutability":"mutable","name":"value","nameLocation":"1749:5:55","nodeType":"VariableDeclaration","scope":4634,"src":"1743:11:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4632,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:55","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:55","nodeType":"StructDefinition","scope":4723,"src":"1716:45:55","visibility":"public"},{"body":{"id":4644,"nodeType":"Block","src":"1943:106:55","statements":[{"AST":{"nativeSrc":"2005:38:55","nodeType":"YulBlock","src":"2005:38:55","statements":[{"nativeSrc":"2019:14:55","nodeType":"YulAssignment","src":"2019:14:55","value":{"name":"slot","nativeSrc":"2029:4:55","nodeType":"YulIdentifier","src":"2029:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:55","nodeType":"YulIdentifier","src":"2019:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4641,"isOffset":false,"isSlot":true,"src":"2019:6:55","suffix":"slot","valueSize":1},{"declaration":4637,"isOffset":false,"isSlot":false,"src":"2029:4:55","valueSize":1}],"id":4643,"nodeType":"InlineAssembly","src":"1996:47:55"}]},"documentation":{"id":4635,"nodeType":"StructuredDocumentation","src":"1767:87:55","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":4645,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:55","nodeType":"FunctionDefinition","parameters":{"id":4638,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4637,"mutability":"mutable","name":"slot","nameLocation":"1891:4:55","nodeType":"VariableDeclaration","scope":4645,"src":"1883:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4636,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:55"},"returnParameters":{"id":4642,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4641,"mutability":"mutable","name":"r","nameLocation":"1940:1:55","nodeType":"VariableDeclaration","scope":4645,"src":"1920:21:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4619_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":4640,"nodeType":"UserDefinedTypeName","pathNode":{"id":4639,"name":"AddressSlot","nameLocations":["1920:11:55"],"nodeType":"IdentifierPath","referencedDeclaration":4619,"src":"1920:11:55"},"referencedDeclaration":4619,"src":"1920:11:55","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$4619_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:55"},"scope":4723,"src":"1859:190:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4655,"nodeType":"Block","src":"2231:106:55","statements":[{"AST":{"nativeSrc":"2293:38:55","nodeType":"YulBlock","src":"2293:38:55","statements":[{"nativeSrc":"2307:14:55","nodeType":"YulAssignment","src":"2307:14:55","value":{"name":"slot","nativeSrc":"2317:4:55","nodeType":"YulIdentifier","src":"2317:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:55","nodeType":"YulIdentifier","src":"2307:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4652,"isOffset":false,"isSlot":true,"src":"2307:6:55","suffix":"slot","valueSize":1},{"declaration":4648,"isOffset":false,"isSlot":false,"src":"2317:4:55","valueSize":1}],"id":4654,"nodeType":"InlineAssembly","src":"2284:47:55"}]},"documentation":{"id":4646,"nodeType":"StructuredDocumentation","src":"2055:87:55","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":4656,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:55","nodeType":"FunctionDefinition","parameters":{"id":4649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4648,"mutability":"mutable","name":"slot","nameLocation":"2179:4:55","nodeType":"VariableDeclaration","scope":4656,"src":"2171:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:55"},"returnParameters":{"id":4653,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4652,"mutability":"mutable","name":"r","nameLocation":"2228:1:55","nodeType":"VariableDeclaration","scope":4656,"src":"2208:21:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4622_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":4651,"nodeType":"UserDefinedTypeName","pathNode":{"id":4650,"name":"BooleanSlot","nameLocations":["2208:11:55"],"nodeType":"IdentifierPath","referencedDeclaration":4622,"src":"2208:11:55"},"referencedDeclaration":4622,"src":"2208:11:55","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$4622_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:55"},"scope":4723,"src":"2147:190:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4666,"nodeType":"Block","src":"2519:106:55","statements":[{"AST":{"nativeSrc":"2581:38:55","nodeType":"YulBlock","src":"2581:38:55","statements":[{"nativeSrc":"2595:14:55","nodeType":"YulAssignment","src":"2595:14:55","value":{"name":"slot","nativeSrc":"2605:4:55","nodeType":"YulIdentifier","src":"2605:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:55","nodeType":"YulIdentifier","src":"2595:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4663,"isOffset":false,"isSlot":true,"src":"2595:6:55","suffix":"slot","valueSize":1},{"declaration":4659,"isOffset":false,"isSlot":false,"src":"2605:4:55","valueSize":1}],"id":4665,"nodeType":"InlineAssembly","src":"2572:47:55"}]},"documentation":{"id":4657,"nodeType":"StructuredDocumentation","src":"2343:87:55","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":4667,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:55","nodeType":"FunctionDefinition","parameters":{"id":4660,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4659,"mutability":"mutable","name":"slot","nameLocation":"2467:4:55","nodeType":"VariableDeclaration","scope":4667,"src":"2459:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4658,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:55"},"returnParameters":{"id":4664,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4663,"mutability":"mutable","name":"r","nameLocation":"2516:1:55","nodeType":"VariableDeclaration","scope":4667,"src":"2496:21:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4625_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":4662,"nodeType":"UserDefinedTypeName","pathNode":{"id":4661,"name":"Bytes32Slot","nameLocations":["2496:11:55"],"nodeType":"IdentifierPath","referencedDeclaration":4625,"src":"2496:11:55"},"referencedDeclaration":4625,"src":"2496:11:55","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$4625_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:55"},"scope":4723,"src":"2435:190:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4677,"nodeType":"Block","src":"2807:106:55","statements":[{"AST":{"nativeSrc":"2869:38:55","nodeType":"YulBlock","src":"2869:38:55","statements":[{"nativeSrc":"2883:14:55","nodeType":"YulAssignment","src":"2883:14:55","value":{"name":"slot","nativeSrc":"2893:4:55","nodeType":"YulIdentifier","src":"2893:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:55","nodeType":"YulIdentifier","src":"2883:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4674,"isOffset":false,"isSlot":true,"src":"2883:6:55","suffix":"slot","valueSize":1},{"declaration":4670,"isOffset":false,"isSlot":false,"src":"2893:4:55","valueSize":1}],"id":4676,"nodeType":"InlineAssembly","src":"2860:47:55"}]},"documentation":{"id":4668,"nodeType":"StructuredDocumentation","src":"2631:87:55","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":4678,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:55","nodeType":"FunctionDefinition","parameters":{"id":4671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4670,"mutability":"mutable","name":"slot","nameLocation":"2755:4:55","nodeType":"VariableDeclaration","scope":4678,"src":"2747:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4669,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:55"},"returnParameters":{"id":4675,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4674,"mutability":"mutable","name":"r","nameLocation":"2804:1:55","nodeType":"VariableDeclaration","scope":4678,"src":"2784:21:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":4673,"nodeType":"UserDefinedTypeName","pathNode":{"id":4672,"name":"Uint256Slot","nameLocations":["2784:11:55"],"nodeType":"IdentifierPath","referencedDeclaration":4628,"src":"2784:11:55"},"referencedDeclaration":4628,"src":"2784:11:55","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$4628_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:55"},"scope":4723,"src":"2723:190:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4688,"nodeType":"Block","src":"3092:106:55","statements":[{"AST":{"nativeSrc":"3154:38:55","nodeType":"YulBlock","src":"3154:38:55","statements":[{"nativeSrc":"3168:14:55","nodeType":"YulAssignment","src":"3168:14:55","value":{"name":"slot","nativeSrc":"3178:4:55","nodeType":"YulIdentifier","src":"3178:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:55","nodeType":"YulIdentifier","src":"3168:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4685,"isOffset":false,"isSlot":true,"src":"3168:6:55","suffix":"slot","valueSize":1},{"declaration":4681,"isOffset":false,"isSlot":false,"src":"3178:4:55","valueSize":1}],"id":4687,"nodeType":"InlineAssembly","src":"3145:47:55"}]},"documentation":{"id":4679,"nodeType":"StructuredDocumentation","src":"2919:86:55","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":4689,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:55","nodeType":"FunctionDefinition","parameters":{"id":4682,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4681,"mutability":"mutable","name":"slot","nameLocation":"3041:4:55","nodeType":"VariableDeclaration","scope":4689,"src":"3033:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4680,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:55"},"returnParameters":{"id":4686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4685,"mutability":"mutable","name":"r","nameLocation":"3089:1:55","nodeType":"VariableDeclaration","scope":4689,"src":"3070:20:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4631_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4684,"nodeType":"UserDefinedTypeName","pathNode":{"id":4683,"name":"StringSlot","nameLocations":["3070:10:55"],"nodeType":"IdentifierPath","referencedDeclaration":4631,"src":"3070:10:55"},"referencedDeclaration":4631,"src":"3070:10:55","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4631_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:55"},"scope":4723,"src":"3010:188:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4699,"nodeType":"Block","src":"3400:112:55","statements":[{"AST":{"nativeSrc":"3462:44:55","nodeType":"YulBlock","src":"3462:44:55","statements":[{"nativeSrc":"3476:20:55","nodeType":"YulAssignment","src":"3476:20:55","value":{"name":"store.slot","nativeSrc":"3486:10:55","nodeType":"YulIdentifier","src":"3486:10:55"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:55","nodeType":"YulIdentifier","src":"3476:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4696,"isOffset":false,"isSlot":true,"src":"3476:6:55","suffix":"slot","valueSize":1},{"declaration":4692,"isOffset":false,"isSlot":true,"src":"3486:10:55","suffix":"slot","valueSize":1}],"id":4698,"nodeType":"InlineAssembly","src":"3453:53:55"}]},"documentation":{"id":4690,"nodeType":"StructuredDocumentation","src":"3204:101:55","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":4700,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:55","nodeType":"FunctionDefinition","parameters":{"id":4693,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4692,"mutability":"mutable","name":"store","nameLocation":"3348:5:55","nodeType":"VariableDeclaration","scope":4700,"src":"3333:20:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":4691,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:55","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:55"},"returnParameters":{"id":4697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4696,"mutability":"mutable","name":"r","nameLocation":"3397:1:55","nodeType":"VariableDeclaration","scope":4700,"src":"3378:20:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4631_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":4695,"nodeType":"UserDefinedTypeName","pathNode":{"id":4694,"name":"StringSlot","nameLocations":["3378:10:55"],"nodeType":"IdentifierPath","referencedDeclaration":4631,"src":"3378:10:55"},"referencedDeclaration":4631,"src":"3378:10:55","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$4631_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:55"},"scope":4723,"src":"3310:202:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4710,"nodeType":"Block","src":"3688:106:55","statements":[{"AST":{"nativeSrc":"3750:38:55","nodeType":"YulBlock","src":"3750:38:55","statements":[{"nativeSrc":"3764:14:55","nodeType":"YulAssignment","src":"3764:14:55","value":{"name":"slot","nativeSrc":"3774:4:55","nodeType":"YulIdentifier","src":"3774:4:55"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:55","nodeType":"YulIdentifier","src":"3764:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4707,"isOffset":false,"isSlot":true,"src":"3764:6:55","suffix":"slot","valueSize":1},{"declaration":4703,"isOffset":false,"isSlot":false,"src":"3774:4:55","valueSize":1}],"id":4709,"nodeType":"InlineAssembly","src":"3741:47:55"}]},"documentation":{"id":4701,"nodeType":"StructuredDocumentation","src":"3518:85:55","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":4711,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:55","nodeType":"FunctionDefinition","parameters":{"id":4704,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4703,"mutability":"mutable","name":"slot","nameLocation":"3638:4:55","nodeType":"VariableDeclaration","scope":4711,"src":"3630:12:55","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4702,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:55","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:55"},"returnParameters":{"id":4708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4707,"mutability":"mutable","name":"r","nameLocation":"3685:1:55","nodeType":"VariableDeclaration","scope":4711,"src":"3667:19:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4634_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4706,"nodeType":"UserDefinedTypeName","pathNode":{"id":4705,"name":"BytesSlot","nameLocations":["3667:9:55"],"nodeType":"IdentifierPath","referencedDeclaration":4634,"src":"3667:9:55"},"referencedDeclaration":4634,"src":"3667:9:55","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4634_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:55"},"scope":4723,"src":"3608:186:55","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":4721,"nodeType":"Block","src":"3991:112:55","statements":[{"AST":{"nativeSrc":"4053:44:55","nodeType":"YulBlock","src":"4053:44:55","statements":[{"nativeSrc":"4067:20:55","nodeType":"YulAssignment","src":"4067:20:55","value":{"name":"store.slot","nativeSrc":"4077:10:55","nodeType":"YulIdentifier","src":"4077:10:55"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:55","nodeType":"YulIdentifier","src":"4067:6:55"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"shanghai","externalReferences":[{"declaration":4718,"isOffset":false,"isSlot":true,"src":"4067:6:55","suffix":"slot","valueSize":1},{"declaration":4714,"isOffset":false,"isSlot":true,"src":"4077:10:55","suffix":"slot","valueSize":1}],"id":4720,"nodeType":"InlineAssembly","src":"4044:53:55"}]},"documentation":{"id":4712,"nodeType":"StructuredDocumentation","src":"3800:99:55","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":4722,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:55","nodeType":"FunctionDefinition","parameters":{"id":4715,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4714,"mutability":"mutable","name":"store","nameLocation":"3940:5:55","nodeType":"VariableDeclaration","scope":4722,"src":"3926:19:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":4713,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:55","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:55"},"returnParameters":{"id":4719,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4718,"mutability":"mutable","name":"r","nameLocation":"3988:1:55","nodeType":"VariableDeclaration","scope":4722,"src":"3970:19:55","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4634_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":4717,"nodeType":"UserDefinedTypeName","pathNode":{"id":4716,"name":"BytesSlot","nameLocations":["3970:9:55"],"nodeType":"IdentifierPath","referencedDeclaration":4634,"src":"3970:9:55"},"referencedDeclaration":4634,"src":"3970:9:55","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$4634_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:55"},"scope":4723,"src":"3904:199:55","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":4724,"src":"1420:2685:55","usedErrors":[],"usedEvents":[]}],"src":"193:3913:55"},"id":55},"contracts/mocks/payment/EDUCreditsManagerMock.sol":{"ast":{"absolutePath":"contracts/mocks/payment/EDUCreditsManagerMock.sol","exportedSymbols":{"EDUCreditsManager":[5587],"EDUCreditsManagerMock":[4763],"IERC20":[3849],"IForwarderRegistry":[1176]},"id":4764,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4725,"literals":["solidity","0.8",".21"],"nodeType":"PragmaDirective","src":"32:23:56"},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4727,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4764,"sourceUnit":3850,"src":"57:70:56","symbolAliases":[{"foreign":{"id":4726,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"65:6:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":4729,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4764,"sourceUnit":1177,"src":"128:114:56","symbolAliases":[{"foreign":{"id":4728,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"136:18:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/payment/EDUCreditsManager.sol","file":"./../../payment/EDUCreditsManager.sol","id":4731,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":4764,"sourceUnit":5588,"src":"243:72:56","symbolAliases":[{"foreign":{"id":4730,"name":"EDUCreditsManager","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5587,"src":"251:17:56","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4732,"name":"EDUCreditsManager","nameLocations":["351:17:56"],"nodeType":"IdentifierPath","referencedDeclaration":5587,"src":"351:17:56"},"id":4733,"nodeType":"InheritanceSpecifier","src":"351:17:56"}],"canonicalName":"EDUCreditsManagerMock","contractDependencies":[],"contractKind":"contract","fullyImplemented":true,"id":4763,"linearizedBaseContracts":[4763,5587,1030,1162,1150,1533,19,1789,1238,52,863,880,224,1754,176,2075,1299,4613,333,289,313,278,1327,1313],"name":"EDUCreditsManagerMock","nameLocation":"326:21:56","nodeType":"ContractDefinition","nodes":[{"body":{"id":4752,"nodeType":"Block","src":"619:2:56","statements":[]},"id":4753,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4746,"name":"eduToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4736,"src":"556:8:56","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},{"id":4747,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4738,"src":"566:12:56","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":4748,"name":"unclaimedEDUHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4740,"src":"580:18:56","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":4749,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4743,"src":"600:17:56","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"id":4750,"kind":"baseConstructorSpecifier","modifierName":{"id":4745,"name":"EDUCreditsManager","nameLocations":["538:17:56"],"nodeType":"IdentifierPath","referencedDeclaration":5587,"src":"538:17:56"},"nodeType":"ModifierInvocation","src":"538:80:56"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4736,"mutability":"mutable","name":"eduToken","nameLocation":"403:8:56","nodeType":"VariableDeclaration","scope":4753,"src":"396:15:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4735,"nodeType":"UserDefinedTypeName","pathNode":{"id":4734,"name":"IERC20","nameLocations":["396:6:56"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"396:6:56"},"referencedDeclaration":3849,"src":"396:6:56","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4738,"mutability":"mutable","name":"payoutWallet","nameLocation":"437:12:56","nodeType":"VariableDeclaration","scope":4753,"src":"421:28:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4737,"name":"address","nodeType":"ElementaryTypeName","src":"421:15:56","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4740,"mutability":"mutable","name":"unclaimedEDUHolder","nameLocation":"467:18:56","nodeType":"VariableDeclaration","scope":4753,"src":"459:26:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4739,"name":"address","nodeType":"ElementaryTypeName","src":"459:7:56","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4743,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"514:17:56","nodeType":"VariableDeclaration","scope":4753,"src":"495:36:56","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":4742,"nodeType":"UserDefinedTypeName","pathNode":{"id":4741,"name":"IForwarderRegistry","nameLocations":["495:18:56"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"495:18:56"},"referencedDeclaration":1176,"src":"495:18:56","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"386:151:56"},"returnParameters":{"id":4751,"nodeType":"ParameterList","parameters":[],"src":"619:0:56"},"scope":4763,"src":"375:246:56","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":4761,"nodeType":"Block","src":"687:34:56","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"id":4758,"name":"_msgData","nodeType":"Identifier","overloadedDeclarations":[5586],"referencedDeclaration":5586,"src":"704:8:56","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":4759,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"704:10:56","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":4757,"id":4760,"nodeType":"Return","src":"697:17:56"}]},"functionSelector":"31e66e1e","id":4762,"implemented":true,"kind":"function","modifiers":[],"name":"__msgData","nameLocation":"636:9:56","nodeType":"FunctionDefinition","parameters":{"id":4754,"nodeType":"ParameterList","parameters":[],"src":"645:2:56"},"returnParameters":{"id":4757,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4756,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":4762,"src":"671:14:56","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":4755,"name":"bytes","nodeType":"ElementaryTypeName","src":"671:5:56","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"670:16:56"},"scope":4763,"src":"627:94:56","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":4764,"src":"317:406:56","usedErrors":[7,233,249,868,1304,4903,4910,4913,4918,4923,4930,4939,4946],"usedEvents":[268,277,288,1312,4870,4885,4898]}],"src":"32:692:56"},"id":56},"contracts/payment/EDUCreditsManager.sol":{"ast":{"absolutePath":"contracts/payment/EDUCreditsManager.sol","exportedSymbols":{"AccessControl":[19],"AccessControlStorage":[586],"Context":[4613],"ContractOwnership":[52],"ContractOwnershipStorage":[833],"EDUCreditsManager":[5587],"ERC20Receiver":[1789],"ERC20Storage":[3647],"ForwarderRegistryContext":[1030],"ForwarderRegistryContextBase":[1150],"IERC20":[3849],"IERC20Receiver":[2075],"IForwarderRegistry":[1176],"InconsistentArrayLengths":[7],"PayoutWallet":[1238],"PayoutWalletStorage":[1465],"TokenRecovery":[1533],"TokenRecoveryBase":[1754]},"id":5588,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":4765,"literals":["solidity","0.8",".21"],"nodeType":"PragmaDirective","src":"32:23:57"},{"absolutePath":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","file":"@animoca/ethereum-contracts/contracts/CommonErrors.sol","id":4767,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":8,"src":"57:96:57","symbolAliases":[{"foreign":{"id":4766,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"65:24:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","file":"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol","id":4769,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1177,"src":"154:114:57","symbolAliases":[{"foreign":{"id":4768,"name":"IForwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1176,"src":"162:18:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/token/ERC20/IERC20.sol","file":"@openzeppelin/contracts/token/ERC20/IERC20.sol","id":4771,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":3850,"src":"269:70:57","symbolAliases":[{"foreign":{"id":4770,"name":"IERC20","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3849,"src":"277:6:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol","id":4773,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":2076,"src":"340:111:57","symbolAliases":[{"foreign":{"id":4772,"name":"IERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2075,"src":"348:14:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","id":4775,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":834,"src":"452:125:57","symbolAliases":[{"foreign":{"id":4774,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"460:24:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","file":"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol","id":4777,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":587,"src":"578:117:57","symbolAliases":[{"foreign":{"id":4776,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"586:20:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","file":"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol","id":4779,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1466,"src":"696:116:57","symbolAliases":[{"foreign":{"id":4778,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"704:19:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol","id":4781,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":3648,"src":"813:106:57","symbolAliases":[{"foreign":{"id":4780,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"821:12:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","file":"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol","id":4783,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1239,"src":"920:92:57","symbolAliases":[{"foreign":{"id":4782,"name":"PayoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1238,"src":"928:12:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":4785,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":53,"src":"1013:101:57","symbolAliases":[{"foreign":{"id":4784,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":52,"src":"1021:17:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","file":"@animoca/ethereum-contracts/contracts/access/AccessControl.sol","id":4787,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":20,"src":"1115:93:57","symbolAliases":[{"foreign":{"id":4786,"name":"AccessControl","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1123:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","file":"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol","id":4789,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1790,"src":"1209:98:57","symbolAliases":[{"foreign":{"id":4788,"name":"ERC20Receiver","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1789,"src":"1217:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","file":"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol","id":4791,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1755,"src":"1308:108:57","symbolAliases":[{"foreign":{"id":4790,"name":"TokenRecoveryBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1754,"src":"1316:17:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","file":"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol","id":4793,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1534,"src":"1417:95:57","symbolAliases":[{"foreign":{"id":4792,"name":"TokenRecovery","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1533,"src":"1425:13:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":4795,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":4614,"src":"1513:66:57","symbolAliases":[{"foreign":{"id":4794,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4613,"src":"1521:7:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","file":"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol","id":4797,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1151,"src":"1580:128:57","symbolAliases":[{"foreign":{"id":4796,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"1588:28:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","file":"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol","id":4799,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":5588,"sourceUnit":1031,"src":"1709:115:57","symbolAliases":[{"foreign":{"id":4798,"name":"ForwarderRegistryContext","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1030,"src":"1717:24:57","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":4801,"name":"PayoutWallet","nameLocations":["2343:12:57"],"nodeType":"IdentifierPath","referencedDeclaration":1238,"src":"2343:12:57"},"id":4802,"nodeType":"InheritanceSpecifier","src":"2343:12:57"},{"baseName":{"id":4803,"name":"ERC20Receiver","nameLocations":["2357:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1789,"src":"2357:13:57"},"id":4804,"nodeType":"InheritanceSpecifier","src":"2357:13:57"},{"baseName":{"id":4805,"name":"AccessControl","nameLocations":["2372:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":19,"src":"2372:13:57"},"id":4806,"nodeType":"InheritanceSpecifier","src":"2372:13:57"},{"baseName":{"id":4807,"name":"TokenRecovery","nameLocations":["2387:13:57"],"nodeType":"IdentifierPath","referencedDeclaration":1533,"src":"2387:13:57"},"id":4808,"nodeType":"InheritanceSpecifier","src":"2387:13:57"},{"baseName":{"id":4809,"name":"ForwarderRegistryContext","nameLocations":["2402:24:57"],"nodeType":"IdentifierPath","referencedDeclaration":1030,"src":"2402:24:57"},"id":4810,"nodeType":"InheritanceSpecifier","src":"2402:24:57"}],"canonicalName":"EDUCreditsManager","contractDependencies":[],"contractKind":"contract","documentation":{"id":4800,"nodeType":"StructuredDocumentation","src":"1826:487:57","text":"@title DepositManager\n @notice Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).\n @notice Handles the deposit of EDU tokens by users (during the deposit phase).\n @notice Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).\n @notice Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase)."},"fullyImplemented":true,"id":5587,"linearizedBaseContracts":[5587,1030,1162,1150,1533,19,1789,1238,52,863,880,224,1754,176,2075,1299,4613,333,289,313,278,1327,1313],"name":"EDUCreditsManager","nameLocation":"2322:17:57","nodeType":"ContractDefinition","nodes":[{"global":false,"id":4814,"libraryName":{"id":4811,"name":"ContractOwnershipStorage","nameLocations":["2439:24:57"],"nodeType":"IdentifierPath","referencedDeclaration":833,"src":"2439:24:57"},"nodeType":"UsingForDirective","src":"2433:67:57","typeName":{"id":4813,"nodeType":"UserDefinedTypeName","pathNode":{"id":4812,"name":"ContractOwnershipStorage.Layout","nameLocations":["2468:24:57","2493:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":610,"src":"2468:31:57"},"referencedDeclaration":610,"src":"2468:31:57","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":4818,"libraryName":{"id":4815,"name":"PayoutWalletStorage","nameLocations":["2511:19:57"],"nodeType":"IdentifierPath","referencedDeclaration":1465,"src":"2511:19:57"},"nodeType":"UsingForDirective","src":"2505:57:57","typeName":{"id":4817,"nodeType":"UserDefinedTypeName","pathNode":{"id":4816,"name":"PayoutWalletStorage.Layout","nameLocations":["2535:19:57","2555:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":1342,"src":"2535:26:57"},"referencedDeclaration":1342,"src":"2535:26:57","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout"}}},{"global":false,"id":4822,"libraryName":{"id":4819,"name":"AccessControlStorage","nameLocations":["2573:20:57"],"nodeType":"IdentifierPath","referencedDeclaration":586,"src":"2573:20:57"},"nodeType":"UsingForDirective","src":"2567:59:57","typeName":{"id":4821,"nodeType":"UserDefinedTypeName","pathNode":{"id":4820,"name":"AccessControlStorage.Layout","nameLocations":["2598:20:57","2619:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":353,"src":"2598:27:57"},"referencedDeclaration":353,"src":"2598:27:57","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout"}}},{"canonicalName":"EDUCreditsManager.UserCredits","id":4831,"members":[{"constant":false,"id":4824,"mutability":"mutable","name":"unclaimed","nameLocation":"2669:9:57","nodeType":"VariableDeclaration","scope":4831,"src":"2661:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4823,"name":"uint256","nodeType":"ElementaryTypeName","src":"2661:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4826,"mutability":"mutable","name":"bonus","nameLocation":"2743:5:57","nodeType":"VariableDeclaration","scope":4831,"src":"2735:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4825,"name":"uint256","nodeType":"ElementaryTypeName","src":"2735:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4828,"mutability":"mutable","name":"deposited","nameLocation":"2809:9:57","nodeType":"VariableDeclaration","scope":4831,"src":"2801:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4827,"name":"uint256","nodeType":"ElementaryTypeName","src":"2801:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4830,"mutability":"mutable","name":"diamondHand","nameLocation":"2872:11:57","nodeType":"VariableDeclaration","scope":4831,"src":"2867:16:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":4829,"name":"bool","nodeType":"ElementaryTypeName","src":"2867:4:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"UserCredits","nameLocation":"2639:11:57","nodeType":"StructDefinition","scope":5587,"src":"2632:340:57","visibility":"public"},{"constant":true,"functionSelector":"72c16a24","id":4834,"mutability":"constant","name":"SPENDER_ROLE","nameLocation":"3002:12:57","nodeType":"VariableDeclaration","scope":5587,"src":"2978:48:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":4832,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2978:7:57","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"hexValue":"7370656e646572","id":4833,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3017:9:57","typeDescriptions":{"typeIdentifier":"t_stringliteral_49b2c05ea4541c2d950c8dd66a6ebbc5886c7039b397b1d8e19a29e77dd9bdcc","typeString":"literal_string \"spender\""},"value":"spender"},"visibility":"public"},{"constant":true,"functionSelector":"8de17b74","id":4837,"mutability":"constant","name":"INIT_PHASE","nameLocation":"3057:10:57","nodeType":"VariableDeclaration","scope":5587,"src":"3033:38:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4835,"name":"uint256","nodeType":"ElementaryTypeName","src":"3033:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"30","id":4836,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3070:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"visibility":"public"},{"constant":true,"functionSelector":"ad6b333b","id":4840,"mutability":"constant","name":"DEPOSIT_PHASE","nameLocation":"3101:13:57","nodeType":"VariableDeclaration","scope":5587,"src":"3077:41:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4838,"name":"uint256","nodeType":"ElementaryTypeName","src":"3077:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"31","id":4839,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3117:1:57","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"visibility":"public"},{"constant":true,"functionSelector":"148c2b5a","id":4843,"mutability":"constant","name":"SALE_PHASE","nameLocation":"3148:10:57","nodeType":"VariableDeclaration","scope":5587,"src":"3124:38:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4841,"name":"uint256","nodeType":"ElementaryTypeName","src":"3124:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"32","id":4842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3161:1:57","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"visibility":"public"},{"constant":true,"functionSelector":"8b785d49","id":4846,"mutability":"constant","name":"WITHDRAW_PHASE","nameLocation":"3192:14:57","nodeType":"VariableDeclaration","scope":5587,"src":"3168:42:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4844,"name":"uint256","nodeType":"ElementaryTypeName","src":"3168:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"hexValue":"33","id":4845,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3209:1:57","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"visibility":"public"},{"constant":false,"functionSelector":"5df2dcbc","id":4849,"mutability":"immutable","name":"EDU_TOKEN","nameLocation":"3241:9:57","nodeType":"VariableDeclaration","scope":5587,"src":"3217:33:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4848,"nodeType":"UserDefinedTypeName","pathNode":{"id":4847,"name":"IERC20","nameLocations":["3217:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"3217:6:57"},"referencedDeclaration":3849,"src":"3217:6:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"public"},{"constant":false,"functionSelector":"51887302","id":4851,"mutability":"immutable","name":"UNCLAIMED_EDU_HOLDER","nameLocation":"3281:20:57","nodeType":"VariableDeclaration","scope":5587,"src":"3256:45:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4850,"name":"address","nodeType":"ElementaryTypeName","src":"3256:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"public"},{"constant":false,"functionSelector":"055ad42e","id":4854,"mutability":"mutable","name":"currentPhase","nameLocation":"3323:12:57","nodeType":"VariableDeclaration","scope":5587,"src":"3308:40:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4852,"name":"uint256","nodeType":"ElementaryTypeName","src":"3308:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"value":{"id":4853,"name":"INIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"3338:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"functionSelector":"20babb92","id":4859,"mutability":"mutable","name":"userCredits","nameLocation":"3394:11:57","nodeType":"VariableDeclaration","scope":5587,"src":"3355:50:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits)"},"typeName":{"id":4858,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":4855,"name":"address","nodeType":"ElementaryTypeName","src":"3363:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Mapping","src":"3355:31:57","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":4857,"nodeType":"UserDefinedTypeName","pathNode":{"id":4856,"name":"UserCredits","nameLocations":["3374:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"3374:11:57"},"referencedDeclaration":4831,"src":"3374:11:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"}}},"visibility":"public"},{"constant":false,"documentation":{"id":4860,"nodeType":"StructuredDocumentation","src":"3412:176:57","text":"@notice The total credits is the sum of all unclaimed, bonus and deposited credits.\n @notice The total credits does not decrease when credits are spent or withdrawn."},"functionSelector":"b5bd3eb9","id":4862,"mutability":"mutable","name":"totalCredits","nameLocation":"3608:12:57","nodeType":"VariableDeclaration","scope":5587,"src":"3593:27:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4861,"name":"uint256","nodeType":"ElementaryTypeName","src":"3593:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"constant":false,"documentation":{"id":4863,"nodeType":"StructuredDocumentation","src":"3627:161:57","text":"@notice The total deposited is the sum of all deposited credits.\n @notice The total deposited decreases when unclaimed credits are spent or withdrawn."},"functionSelector":"ff50abdc","id":4865,"mutability":"mutable","name":"totalDeposited","nameLocation":"3808:14:57","nodeType":"VariableDeclaration","scope":5587,"src":"3793:29:57","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4864,"name":"uint256","nodeType":"ElementaryTypeName","src":"3793:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"public"},{"anonymous":false,"documentation":{"id":4866,"nodeType":"StructuredDocumentation","src":"3829:86:57","text":"@notice Emitted when the current phase is set.\n @param phase the phase set."},"eventSelector":"63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a18","id":4870,"name":"PhaseSet","nameLocation":"3926:8:57","nodeType":"EventDefinition","parameters":{"id":4869,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4868,"indexed":false,"mutability":"mutable","name":"phase","nameLocation":"3943:5:57","nodeType":"VariableDeclaration","scope":4870,"src":"3935:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4867,"name":"uint256","nodeType":"ElementaryTypeName","src":"3935:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"3934:15:57"},"src":"3920:30:57"},{"anonymous":false,"documentation":{"id":4871,"nodeType":"StructuredDocumentation","src":"3956:269:57","text":"@notice Emitted when the initial credits are set.\n @param users the users whose credits are set.\n @param unclaimed the unclaimed EDU credits.\n @param bonus the bonus EDU credits.\n @param diamondHands whether the users are a diamond hand."},"eventSelector":"44fbb8621bc7a734e344e0d7f6b84824cf97e0d8d611f9f8502e42ff0b1dee43","id":4885,"name":"InitialCreditsSet","nameLocation":"4236:17:57","nodeType":"EventDefinition","parameters":{"id":4884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4874,"indexed":false,"mutability":"mutable","name":"users","nameLocation":"4264:5:57","nodeType":"VariableDeclaration","scope":4885,"src":"4254:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_memory_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":4872,"name":"address","nodeType":"ElementaryTypeName","src":"4254:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4873,"nodeType":"ArrayTypeName","src":"4254:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":4877,"indexed":false,"mutability":"mutable","name":"unclaimed","nameLocation":"4281:9:57","nodeType":"VariableDeclaration","scope":4885,"src":"4271:19:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4875,"name":"uint256","nodeType":"ElementaryTypeName","src":"4271:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4876,"nodeType":"ArrayTypeName","src":"4271:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4880,"indexed":false,"mutability":"mutable","name":"bonus","nameLocation":"4302:5:57","nodeType":"VariableDeclaration","scope":4885,"src":"4292:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_memory_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":4878,"name":"uint256","nodeType":"ElementaryTypeName","src":"4292:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":4879,"nodeType":"ArrayTypeName","src":"4292:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":4883,"indexed":false,"mutability":"mutable","name":"diamondHands","nameLocation":"4316:12:57","nodeType":"VariableDeclaration","scope":4885,"src":"4309:19:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_memory_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":4881,"name":"bool","nodeType":"ElementaryTypeName","src":"4309:4:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":4882,"nodeType":"ArrayTypeName","src":"4309:6:57","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"4253:76:57"},"src":"4230:100:57"},{"anonymous":false,"documentation":{"id":4886,"nodeType":"StructuredDocumentation","src":"4336:347:57","text":"@notice Emitted when credits are spent.\n @param spender the spender of the credits.\n @param user the user whose credits are spent.\n @param bonusSpent the amount of bonus credits spent.\n @param unclaimedSpent the amount of unclaimed credits spent.\n @param depositedSpent the amount of deposited credits spent."},"eventSelector":"c8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e89","id":4898,"name":"CreditsSpent","nameLocation":"4694:12:57","nodeType":"EventDefinition","parameters":{"id":4897,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4888,"indexed":false,"mutability":"mutable","name":"spender","nameLocation":"4715:7:57","nodeType":"VariableDeclaration","scope":4898,"src":"4707:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4887,"name":"address","nodeType":"ElementaryTypeName","src":"4707:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4890,"indexed":false,"mutability":"mutable","name":"user","nameLocation":"4732:4:57","nodeType":"VariableDeclaration","scope":4898,"src":"4724:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4889,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4892,"indexed":false,"mutability":"mutable","name":"bonusSpent","nameLocation":"4746:10:57","nodeType":"VariableDeclaration","scope":4898,"src":"4738:18:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4891,"name":"uint256","nodeType":"ElementaryTypeName","src":"4738:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4894,"indexed":false,"mutability":"mutable","name":"unclaimedSpent","nameLocation":"4766:14:57","nodeType":"VariableDeclaration","scope":4898,"src":"4758:22:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4893,"name":"uint256","nodeType":"ElementaryTypeName","src":"4758:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4896,"indexed":false,"mutability":"mutable","name":"depositedSpent","nameLocation":"4790:14:57","nodeType":"VariableDeclaration","scope":4898,"src":"4782:22:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4895,"name":"uint256","nodeType":"ElementaryTypeName","src":"4782:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4706:99:57"},"src":"4688:118:57"},{"documentation":{"id":4899,"nodeType":"StructuredDocumentation","src":"4812:95:57","text":"@notice Thrown when the phase being set is invalid.\n @param phase the invalid phase."},"errorSelector":"96666719","id":4903,"name":"SettingInvalidPhase","nameLocation":"4918:19:57","nodeType":"ErrorDefinition","parameters":{"id":4902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4901,"mutability":"mutable","name":"phase","nameLocation":"4946:5:57","nodeType":"VariableDeclaration","scope":4903,"src":"4938:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4900,"name":"uint256","nodeType":"ElementaryTypeName","src":"4938:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4937:15:57"},"src":"4912:41:57"},{"documentation":{"id":4904,"nodeType":"StructuredDocumentation","src":"4959:164:57","text":"@notice Thrown when an action is performed during the wrong phase.\n @param expectedPhase the expected phase.\n @param actualPhase the actual phase."},"errorSelector":"7c9bb663","id":4910,"name":"OnlyDuringPhase","nameLocation":"5134:15:57","nodeType":"ErrorDefinition","parameters":{"id":4909,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4906,"mutability":"mutable","name":"expectedPhase","nameLocation":"5158:13:57","nodeType":"VariableDeclaration","scope":4910,"src":"5150:21:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4905,"name":"uint256","nodeType":"ElementaryTypeName","src":"5150:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4908,"mutability":"mutable","name":"actualPhase","nameLocation":"5181:11:57","nodeType":"VariableDeclaration","scope":4910,"src":"5173:19:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4907,"name":"uint256","nodeType":"ElementaryTypeName","src":"5173:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5149:44:57"},"src":"5128:66:57"},{"documentation":{"id":4911,"nodeType":"StructuredDocumentation","src":"5200:76:57","text":"@notice Thrown when setting the initial credits for a zero address user."},"errorSelector":"9c89d57f","id":4913,"name":"ZeroAddressUser","nameLocation":"5287:15:57","nodeType":"ErrorDefinition","parameters":{"id":4912,"nodeType":"ParameterList","parameters":[],"src":"5302:2:57"},"src":"5281:24:57"},{"documentation":{"id":4914,"nodeType":"StructuredDocumentation","src":"5311:143:57","text":"@notice Thrown when setting the initial credits for a user with zero unclaimed credits.\n @param user the user whose credits are set."},"errorSelector":"d49c1927","id":4918,"name":"ZeroValueUnclaimedCredits","nameLocation":"5465:25:57","nodeType":"ErrorDefinition","parameters":{"id":4917,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4916,"mutability":"mutable","name":"user","nameLocation":"5499:4:57","nodeType":"VariableDeclaration","scope":4918,"src":"5491:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4915,"name":"address","nodeType":"ElementaryTypeName","src":"5491:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5490:14:57"},"src":"5459:46:57"},{"documentation":{"id":4919,"nodeType":"StructuredDocumentation","src":"5511:151:57","text":"@notice Thrown when setting the initial credits for a user whose credits have already been set.\n @param user the user whose credits are set."},"errorSelector":"6dbaa9b4","id":4923,"name":"UserCreditsAlreadySet","nameLocation":"5673:21:57","nodeType":"ErrorDefinition","parameters":{"id":4922,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4921,"mutability":"mutable","name":"user","nameLocation":"5703:4:57","nodeType":"VariableDeclaration","scope":4923,"src":"5695:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4920,"name":"address","nodeType":"ElementaryTypeName","src":"5695:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5694:14:57"},"src":"5667:42:57"},{"documentation":{"id":4924,"nodeType":"StructuredDocumentation","src":"5715:158:57","text":"@notice Thrown when trying to spend zero credits.\n @param spender the spender of the credits.\n @param user the user whose credits are spent."},"errorSelector":"09bc7f2b","id":4930,"name":"ZeroSpendAmount","nameLocation":"5884:15:57","nodeType":"ErrorDefinition","parameters":{"id":4929,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4926,"mutability":"mutable","name":"spender","nameLocation":"5908:7:57","nodeType":"VariableDeclaration","scope":4930,"src":"5900:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4925,"name":"address","nodeType":"ElementaryTypeName","src":"5900:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4928,"mutability":"mutable","name":"user","nameLocation":"5925:4:57","nodeType":"VariableDeclaration","scope":4930,"src":"5917:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4927,"name":"address","nodeType":"ElementaryTypeName","src":"5917:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"5899:31:57"},"src":"5878:53:57"},{"documentation":{"id":4931,"nodeType":"StructuredDocumentation","src":"5937:230:57","text":"@notice Thrown when trying to spend more credits than the user has.\n @param spender the spender of the credits.\n @param user the user whose credits are spent.\n @param amount the amount of credits to spend."},"errorSelector":"17343925","id":4939,"name":"InsufficientCredits","nameLocation":"6178:19:57","nodeType":"ErrorDefinition","parameters":{"id":4938,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4933,"mutability":"mutable","name":"spender","nameLocation":"6206:7:57","nodeType":"VariableDeclaration","scope":4939,"src":"6198:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4932,"name":"address","nodeType":"ElementaryTypeName","src":"6198:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4935,"mutability":"mutable","name":"user","nameLocation":"6223:4:57","nodeType":"VariableDeclaration","scope":4939,"src":"6215:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4934,"name":"address","nodeType":"ElementaryTypeName","src":"6215:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4937,"mutability":"mutable","name":"amount","nameLocation":"6237:6:57","nodeType":"VariableDeclaration","scope":4939,"src":"6229:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4936,"name":"uint256","nodeType":"ElementaryTypeName","src":"6229:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6197:47:57"},"src":"6172:73:57"},{"documentation":{"id":4940,"nodeType":"StructuredDocumentation","src":"6251:98:57","text":"@notice Thrown when trying to recover more EDU tokens than accidentally sent to this contract."},"errorSelector":"7ce4d19d","id":4946,"name":"UnrecoverableEDU","nameLocation":"6360:16:57","nodeType":"ErrorDefinition","parameters":{"id":4945,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4942,"mutability":"mutable","name":"recoverable","nameLocation":"6385:11:57","nodeType":"VariableDeclaration","scope":4946,"src":"6377:19:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4941,"name":"uint256","nodeType":"ElementaryTypeName","src":"6377:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":4944,"mutability":"mutable","name":"recovering","nameLocation":"6406:10:57","nodeType":"VariableDeclaration","scope":4946,"src":"6398:18:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4943,"name":"uint256","nodeType":"ElementaryTypeName","src":"6398:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6376:41:57"},"src":"6354:64:57"},{"body":{"id":4982,"nodeType":"Block","src":"6741:123:57","statements":[{"expression":{"id":4972,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4970,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"6751:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4971,"name":"eduToken","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4950,"src":"6763:8:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"src":"6751:20:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":4973,"nodeType":"ExpressionStatement","src":"6751:20:57"},{"expression":{"id":4976,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":4974,"name":"UNCLAIMED_EDU_HOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"6781:20:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":4975,"name":"unclaimedEDUHolder","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4954,"src":"6804:18:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6781:41:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":4977,"nodeType":"ExpressionStatement","src":"6781:41:57"},{"eventCall":{"arguments":[{"id":4979,"name":"INIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"6846:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":4978,"name":"PhaseSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"6837:8:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":4980,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6837:20:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4981,"nodeType":"EmitStatement","src":"6832:25:57"}]},"documentation":{"id":4947,"nodeType":"StructuredDocumentation","src":"6424:48:57","text":"@dev Emits a {PhaseSet} to INIT_PHASE event."},"id":4983,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"id":4960,"name":"payoutWallet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4952,"src":"6653:12:57","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}}],"id":4961,"kind":"baseConstructorSpecifier","modifierName":{"id":4959,"name":"PayoutWallet","nameLocations":["6640:12:57"],"nodeType":"IdentifierPath","referencedDeclaration":1238,"src":"6640:12:57"},"nodeType":"ModifierInvocation","src":"6640:26:57"},{"arguments":[{"expression":{"id":4963,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"6685:3:57","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":4964,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6689:6:57","memberName":"sender","nodeType":"MemberAccess","src":"6685:10:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":4965,"kind":"baseConstructorSpecifier","modifierName":{"id":4962,"name":"ContractOwnership","nameLocations":["6667:17:57"],"nodeType":"IdentifierPath","referencedDeclaration":52,"src":"6667:17:57"},"nodeType":"ModifierInvocation","src":"6667:29:57"},{"arguments":[{"id":4967,"name":"forwarderRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4957,"src":"6722:17:57","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}}],"id":4968,"kind":"baseConstructorSpecifier","modifierName":{"id":4966,"name":"ForwarderRegistryContext","nameLocations":["6697:24:57"],"nodeType":"IdentifierPath","referencedDeclaration":1030,"src":"6697:24:57"},"nodeType":"ModifierInvocation","src":"6697:43:57"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":4958,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4950,"mutability":"mutable","name":"eduToken","nameLocation":"6505:8:57","nodeType":"VariableDeclaration","scope":4983,"src":"6498:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"typeName":{"id":4949,"nodeType":"UserDefinedTypeName","pathNode":{"id":4948,"name":"IERC20","nameLocations":["6498:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"6498:6:57"},"referencedDeclaration":3849,"src":"6498:6:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"visibility":"internal"},{"constant":false,"id":4952,"mutability":"mutable","name":"payoutWallet","nameLocation":"6539:12:57","nodeType":"VariableDeclaration","scope":4983,"src":"6523:28:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":4951,"name":"address","nodeType":"ElementaryTypeName","src":"6523:15:57","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":4954,"mutability":"mutable","name":"unclaimedEDUHolder","nameLocation":"6569:18:57","nodeType":"VariableDeclaration","scope":4983,"src":"6561:26:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":4953,"name":"address","nodeType":"ElementaryTypeName","src":"6561:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":4957,"mutability":"mutable","name":"forwarderRegistry","nameLocation":"6616:17:57","nodeType":"VariableDeclaration","scope":4983,"src":"6597:36:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"},"typeName":{"id":4956,"nodeType":"UserDefinedTypeName","pathNode":{"id":4955,"name":"IForwarderRegistry","nameLocations":["6597:18:57"],"nodeType":"IdentifierPath","referencedDeclaration":1176,"src":"6597:18:57"},"referencedDeclaration":1176,"src":"6597:18:57","typeDescriptions":{"typeIdentifier":"t_contract$_IForwarderRegistry_$1176","typeString":"contract IForwarderRegistry"}},"visibility":"internal"}],"src":"6488:151:57"},"returnParameters":{"id":4969,"nodeType":"ParameterList","parameters":[],"src":"6741:0:57"},"scope":5587,"src":"6477:387:57","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":5014,"nodeType":"Block","src":"7209:226:57","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":4994,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5572],"referencedDeclaration":5572,"src":"7276:10:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":4995,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7276:12:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":4989,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"7219:24:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":4991,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7244:6:57","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"7219:31:57","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":4992,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:33:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":4993,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"7253:22:57","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"7219:56:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":4996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7219:70:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":4997,"nodeType":"ExpressionStatement","src":"7219:70:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":4998,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4986,"src":"7303:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":4999,"name":"WITHDRAW_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"7311:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7303:22:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5005,"nodeType":"IfStatement","src":"7299:61:57","trueBody":{"errorCall":{"arguments":[{"id":5002,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4986,"src":"7354:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5001,"name":"SettingInvalidPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4903,"src":"7334:19:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$returns$__$","typeString":"function (uint256) pure"}},"id":5003,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7334:26:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5004,"nodeType":"RevertStatement","src":"7327:33:57"}},{"expression":{"id":5008,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5006,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"7370:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5007,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4986,"src":"7385:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7370:20:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5009,"nodeType":"ExpressionStatement","src":"7370:20:57"},{"eventCall":{"arguments":[{"id":5011,"name":"DEPOSIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"7414:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5010,"name":"PhaseSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4870,"src":"7405:8:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_uint256_$returns$__$","typeString":"function (uint256)"}},"id":5012,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7405:23:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5013,"nodeType":"EmitStatement","src":"7400:28:57"}]},"documentation":{"id":4984,"nodeType":"StructuredDocumentation","src":"6870:292:57","text":"@notice Sets the current phase.\n @dev Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Emits a {PhaseSet} event.\n @param phase the phase to set."},"functionSelector":"2cc82655","id":5015,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"7176:8:57","nodeType":"FunctionDefinition","parameters":{"id":4987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":4986,"mutability":"mutable","name":"phase","nameLocation":"7193:5:57","nodeType":"VariableDeclaration","scope":5015,"src":"7185:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":4985,"name":"uint256","nodeType":"ElementaryTypeName","src":"7185:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"7184:15:57"},"returnParameters":{"id":4988,"nodeType":"ParameterList","parameters":[],"src":"7209:0:57"},"scope":5587,"src":"7167:268:57","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5168,"nodeType":"Block","src":"8466:1085:57","statements":[{"assignments":[5032],"declarations":[{"constant":false,"id":5032,"mutability":"mutable","name":"length","nameLocation":"8484:6:57","nodeType":"VariableDeclaration","scope":5168,"src":"8476:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5031,"name":"uint256","nodeType":"ElementaryTypeName","src":"8476:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5035,"initialValue":{"expression":{"id":5033,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"8493:5:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5034,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8499:6:57","memberName":"length","nodeType":"MemberAccess","src":"8493:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8476:29:57"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5049,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":5044,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5036,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"8519:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5037,"name":"unclaimedCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"8529:16:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5038,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8546:6:57","memberName":"length","nodeType":"MemberAccess","src":"8529:23:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8519:33:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5043,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5040,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"8556:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5041,"name":"bonusCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"8566:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8579:6:57","memberName":"length","nodeType":"MemberAccess","src":"8566:19:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8556:29:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8519:66:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"||","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5048,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5045,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"8589:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":5046,"name":"diamondHands","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"8599:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8612:6:57","memberName":"length","nodeType":"MemberAccess","src":"8599:19:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8589:29:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8519:99:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5053,"nodeType":"IfStatement","src":"8515:138:57","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5050,"name":"InconsistentArrayLengths","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":7,"src":"8627:24:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5051,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8627:26:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5052,"nodeType":"RevertStatement","src":"8620:33:57"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5056,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5054,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"8667:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5055,"name":"INIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"8683:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8667:26:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5062,"nodeType":"IfStatement","src":"8663:80:57","trueBody":{"errorCall":{"arguments":[{"id":5058,"name":"INIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4837,"src":"8718:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5059,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"8730:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5057,"name":"OnlyDuringPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"8702:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5060,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8702:41:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5061,"nodeType":"RevertStatement","src":"8695:48:57"}},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":5068,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5572],"referencedDeclaration":5572,"src":"8810:10:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5069,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8810:12:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5063,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":833,"src":"8753:24:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$833_$","typeString":"type(library ContractOwnershipStorage)"}},"id":5065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8778:6:57","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":832,"src":"8753:31:57","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":5066,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8753:33:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$610_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":5067,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"8787:22:57","memberName":"enforceIsContractOwner","nodeType":"MemberAccess","referencedDeclaration":799,"src":"8753:56:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$610_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$610_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address) view"}},"id":5070,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8753:70:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5071,"nodeType":"ExpressionStatement","src":"8753:70:57"},{"body":{"id":5159,"nodeType":"Block","src":"8867:593:57","statements":[{"assignments":[5082],"declarations":[{"constant":false,"id":5082,"mutability":"mutable","name":"user","nameLocation":"8889:4:57","nodeType":"VariableDeclaration","scope":5159,"src":"8881:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5081,"name":"address","nodeType":"ElementaryTypeName","src":"8881:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5086,"initialValue":{"baseExpression":{"id":5083,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"8896:5:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},"id":5085,"indexExpression":{"id":5084,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"8902:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"8896:8:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"8881:23:57"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":5092,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5087,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"8922:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":5090,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8938:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5089,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"8930:7:57","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5088,"name":"address","nodeType":"ElementaryTypeName","src":"8930:7:57","typeDescriptions":{}}},"id":5091,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8930:10:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"8922:18:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5096,"nodeType":"IfStatement","src":"8918:48:57","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":5093,"name":"ZeroAddressUser","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4913,"src":"8949:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":5094,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8949:17:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5095,"nodeType":"RevertStatement","src":"8942:24:57"}},{"assignments":[5098],"declarations":[{"constant":false,"id":5098,"mutability":"mutable","name":"unclaimed","nameLocation":"8988:9:57","nodeType":"VariableDeclaration","scope":5159,"src":"8980:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5097,"name":"uint256","nodeType":"ElementaryTypeName","src":"8980:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5102,"initialValue":{"baseExpression":{"id":5099,"name":"unclaimedCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"9000:16:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5101,"indexExpression":{"id":5100,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"9017:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9000:19:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8980:39:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5105,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5103,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"9037:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5104,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9050:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9037:14:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5110,"nodeType":"IfStatement","src":"9033:58:57","trueBody":{"errorCall":{"arguments":[{"id":5107,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"9086:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5106,"name":"ZeroValueUnclaimedCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4918,"src":"9060:25:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5108,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9060:31:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5109,"nodeType":"RevertStatement","src":"9053:38:57"}},{"assignments":[5113],"declarations":[{"constant":false,"id":5113,"mutability":"mutable","name":"credits","nameLocation":"9125:7:57","nodeType":"VariableDeclaration","scope":5159,"src":"9105:27:57","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"},"typeName":{"id":5112,"nodeType":"UserDefinedTypeName","pathNode":{"id":5111,"name":"UserCredits","nameLocations":["9105:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"9105:11:57"},"referencedDeclaration":4831,"src":"9105:11:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"}},"visibility":"internal"}],"id":5117,"initialValue":{"baseExpression":{"id":5114,"name":"userCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"9135:11:57","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits storage ref)"}},"id":5116,"indexExpression":{"id":5115,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"9147:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9135:17:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage","typeString":"struct EDUCreditsManager.UserCredits storage ref"}},"nodeType":"VariableDeclarationStatement","src":"9105:47:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5121,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":5118,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"9170:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5119,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"9178:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"9170:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5120,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9191:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9170:22:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5126,"nodeType":"IfStatement","src":"9166:62:57","trueBody":{"errorCall":{"arguments":[{"id":5123,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5082,"src":"9223:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":5122,"name":"UserCreditsAlreadySet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4923,"src":"9201:21:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":5124,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9201:27:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5125,"nodeType":"RevertStatement","src":"9194:34:57"}},{"assignments":[5128],"declarations":[{"constant":false,"id":5128,"mutability":"mutable","name":"bonus","nameLocation":"9250:5:57","nodeType":"VariableDeclaration","scope":5159,"src":"9242:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5127,"name":"uint256","nodeType":"ElementaryTypeName","src":"9242:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5132,"initialValue":{"baseExpression":{"id":5129,"name":"bonusCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"9258:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5131,"indexExpression":{"id":5130,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"9271:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9258:15:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9242:31:57"},{"expression":{"id":5137,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5133,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"9287:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5135,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9295:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"9287:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5136,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"9307:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9287:29:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5138,"nodeType":"ExpressionStatement","src":"9287:29:57"},{"expression":{"id":5143,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5139,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"9330:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5141,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9338:5:57","memberName":"bonus","nodeType":"MemberAccess","referencedDeclaration":4826,"src":"9330:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5142,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"9346:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9330:21:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5144,"nodeType":"ExpressionStatement","src":"9330:21:57"},{"expression":{"id":5151,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5145,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5113,"src":"9365:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5147,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"9373:11:57","memberName":"diamondHand","nodeType":"MemberAccess","referencedDeclaration":4830,"src":"9365:19:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":5148,"name":"diamondHands","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"9387:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}},"id":5150,"indexExpression":{"id":5149,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"9400:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"9387:15:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9365:37:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5152,"nodeType":"ExpressionStatement","src":"9365:37:57"},{"expression":{"id":5157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5153,"name":"totalCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"9416:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5156,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5154,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5098,"src":"9432:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"id":5155,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5128,"src":"9444:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9432:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9416:33:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5158,"nodeType":"ExpressionStatement","src":"9416:33:57"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5077,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5075,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"8849:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5076,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5032,"src":"8854:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8849:11:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5160,"initializationExpression":{"assignments":[5073],"declarations":[{"constant":false,"id":5073,"mutability":"mutable","name":"i","nameLocation":"8846:1:57","nodeType":"VariableDeclaration","scope":5160,"src":"8838:9:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5072,"name":"uint256","nodeType":"ElementaryTypeName","src":"8838:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5074,"nodeType":"VariableDeclarationStatement","src":"8838:9:57"},"loopExpression":{"expression":{"id":5079,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":true,"src":"8862:3:57","subExpression":{"id":5078,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5073,"src":"8864:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5080,"nodeType":"ExpressionStatement","src":"8862:3:57"},"nodeType":"ForStatement","src":"8833:627:57"},{"eventCall":{"arguments":[{"id":5162,"name":"users","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5019,"src":"9492:5:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":5163,"name":"unclaimedCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5022,"src":"9499:16:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5164,"name":"bonusCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5025,"src":"9517:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},{"id":5165,"name":"diamondHands","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5028,"src":"9531:12:57","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"},{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[] calldata"}],"id":5161,"name":"InitialCreditsSet","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4885,"src":"9474:17:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_array$_t_address_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_uint256_$dyn_memory_ptr_$_t_array$_t_bool_$dyn_memory_ptr_$returns$__$","typeString":"function (address[] memory,uint256[] memory,uint256[] memory,bool[] memory)"}},"id":5166,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9474:70:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5167,"nodeType":"EmitStatement","src":"9469:75:57"}]},"documentation":{"id":5016,"nodeType":"StructuredDocumentation","src":"7441:820:57","text":"@notice Sets the unclaimed and bonus EDU credits for a list of users.\n @dev Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.\n @dev Reverts with {OnlyDuringPhase} if the current phase is not the init phase.\n @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\n @dev Reverts with {ZeroAddressUser} if one of `users` is the zero address.\n @dev Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.\n @dev Emits a {InitialCreditsSet} event.\n @param users the users whose credits are set.\n @param unclaimedCredits the unclaimed EDU credits.\n @param bonusCredits the bonus EDU credits.\n @param diamondHands whether the users are a diamond hand."},"functionSelector":"687f34e0","id":5169,"implemented":true,"kind":"function","modifiers":[],"name":"setInitialCredits","nameLocation":"8275:17:57","nodeType":"FunctionDefinition","parameters":{"id":5029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5019,"mutability":"mutable","name":"users","nameLocation":"8321:5:57","nodeType":"VariableDeclaration","scope":5169,"src":"8302:24:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5017,"name":"address","nodeType":"ElementaryTypeName","src":"8302:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5018,"nodeType":"ArrayTypeName","src":"8302:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5022,"mutability":"mutable","name":"unclaimedCredits","nameLocation":"8355:16:57","nodeType":"VariableDeclaration","scope":5169,"src":"8336:35:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5020,"name":"uint256","nodeType":"ElementaryTypeName","src":"8336:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5021,"nodeType":"ArrayTypeName","src":"8336:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5025,"mutability":"mutable","name":"bonusCredits","nameLocation":"8400:12:57","nodeType":"VariableDeclaration","scope":5169,"src":"8381:31:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5023,"name":"uint256","nodeType":"ElementaryTypeName","src":"8381:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5024,"nodeType":"ArrayTypeName","src":"8381:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":5028,"mutability":"mutable","name":"diamondHands","nameLocation":"8438:12:57","nodeType":"VariableDeclaration","scope":5169,"src":"8422:28:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_calldata_ptr","typeString":"bool[]"},"typeName":{"baseType":{"id":5026,"name":"bool","nodeType":"ElementaryTypeName","src":"8422:4:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5027,"nodeType":"ArrayTypeName","src":"8422:6:57","typeDescriptions":{"typeIdentifier":"t_array$_t_bool_$dyn_storage_ptr","typeString":"bool[]"}},"visibility":"internal"}],"src":"8292:164:57"},"returnParameters":{"id":5030,"nodeType":"ParameterList","parameters":[],"src":"8466:0:57"},"scope":5587,"src":"8266:1285:57","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2074],"body":{"id":5216,"nodeType":"Block","src":"9919:304:57","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5185,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5183,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"9933:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5184,"name":"DEPOSIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"9949:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9933:29:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5191,"nodeType":"IfStatement","src":"9929:86:57","trueBody":{"errorCall":{"arguments":[{"id":5187,"name":"DEPOSIT_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4840,"src":"9987:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5188,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"10002:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5186,"name":"OnlyDuringPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"9971:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5189,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9971:44:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5190,"nodeType":"RevertStatement","src":"9964:51:57"}},{"assignments":[5194],"declarations":[{"constant":false,"id":5194,"mutability":"mutable","name":"credits","nameLocation":"10045:7:57","nodeType":"VariableDeclaration","scope":5216,"src":"10025:27:57","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"},"typeName":{"id":5193,"nodeType":"UserDefinedTypeName","pathNode":{"id":5192,"name":"UserCredits","nameLocations":["10025:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"10025:11:57"},"referencedDeclaration":4831,"src":"10025:11:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"}},"visibility":"internal"}],"id":5198,"initialValue":{"baseExpression":{"id":5195,"name":"userCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"10055:11:57","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits storage ref)"}},"id":5197,"indexExpression":{"id":5196,"name":"from","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5174,"src":"10067:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"10055:17:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage","typeString":"struct EDUCreditsManager.UserCredits storage ref"}},"nodeType":"VariableDeclarationStatement","src":"10025:47:57"},{"expression":{"id":5203,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5199,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5194,"src":"10082:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5201,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"10090:9:57","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"10082:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5202,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"10103:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10082:26:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5204,"nodeType":"ExpressionStatement","src":"10082:26:57"},{"expression":{"id":5207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5205,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"10118:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5206,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"10136:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10118:23:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5208,"nodeType":"ExpressionStatement","src":"10118:23:57"},{"expression":{"id":5211,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5209,"name":"totalCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4862,"src":"10151:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"id":5210,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5176,"src":"10167:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"10151:21:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5212,"nodeType":"ExpressionStatement","src":"10151:21:57"},{"expression":{"expression":{"id":5213,"name":"ERC20Storage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":3647,"src":"10189:12:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ERC20Storage_$3647_$","typeString":"type(library ERC20Storage)"}},"id":5214,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"10202:14:57","memberName":"ERC20_RECEIVED","nodeType":"MemberAccess","referencedDeclaration":2201,"src":"10189:27:57","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"functionReturnParameters":5182,"id":5215,"nodeType":"Return","src":"10182:34:57"}]},"documentation":{"id":5170,"nodeType":"StructuredDocumentation","src":"9557:241:57","text":"@inheritdoc IERC20Receiver\n @notice Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\n @dev Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase."},"functionSelector":"4fc35859","id":5217,"implemented":true,"kind":"function","modifiers":[],"name":"onERC20Received","nameLocation":"9812:15:57","nodeType":"FunctionDefinition","parameters":{"id":5179,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5172,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5217,"src":"9828:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5171,"name":"address","nodeType":"ElementaryTypeName","src":"9828:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5174,"mutability":"mutable","name":"from","nameLocation":"9845:4:57","nodeType":"VariableDeclaration","scope":5217,"src":"9837:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5173,"name":"address","nodeType":"ElementaryTypeName","src":"9837:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5176,"mutability":"mutable","name":"value","nameLocation":"9859:5:57","nodeType":"VariableDeclaration","scope":5217,"src":"9851:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5175,"name":"uint256","nodeType":"ElementaryTypeName","src":"9851:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":5178,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5217,"src":"9866:14:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5177,"name":"bytes","nodeType":"ElementaryTypeName","src":"9866:5:57","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"9827:54:57"},"returnParameters":{"id":5182,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5181,"mutability":"mutable","name":"magicValue","nameLocation":"9907:10:57","nodeType":"VariableDeclaration","scope":5217,"src":"9900:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":5180,"name":"bytes4","nodeType":"ElementaryTypeName","src":"9900:6:57","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"9899:19:57"},"scope":5587,"src":"9803:420:57","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5404,"nodeType":"Block","src":"10958:1560:57","statements":[{"assignments":[5226],"declarations":[{"constant":false,"id":5226,"mutability":"mutable","name":"spender","nameLocation":"10976:7:57","nodeType":"VariableDeclaration","scope":5404,"src":"10968:15:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5225,"name":"address","nodeType":"ElementaryTypeName","src":"10968:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5229,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5227,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5572],"referencedDeclaration":5572,"src":"10986:10:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5228,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"10986:12:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"10968:30:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5232,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5230,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11012:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":5231,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11022:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11012:11:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5238,"nodeType":"IfStatement","src":"11008:54:57","trueBody":{"errorCall":{"arguments":[{"id":5234,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"11048:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5235,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"11057:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":5233,"name":"ZeroSpendAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4930,"src":"11032:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":5236,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11032:30:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5237,"nodeType":"RevertStatement","src":"11025:37:57"}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5241,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5239,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"11076:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5240,"name":"SALE_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"11092:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11076:26:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5247,"nodeType":"IfStatement","src":"11072:80:57","trueBody":{"errorCall":{"arguments":[{"id":5243,"name":"SALE_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4843,"src":"11127:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5244,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"11139:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5242,"name":"OnlyDuringPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"11111:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5245,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11111:41:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5246,"nodeType":"RevertStatement","src":"11104:48:57"}},{"expression":{"arguments":[{"id":5253,"name":"SPENDER_ROLE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4834,"src":"11207:12:57","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":5254,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"11221:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5248,"name":"AccessControlStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":586,"src":"11162:20:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_AccessControlStorage_$586_$","typeString":"type(library AccessControlStorage)"}},"id":5250,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"11183:6:57","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":585,"src":"11162:27:57","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function () pure returns (struct AccessControlStorage.Layout storage pointer)"}},"id":5251,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11162:29:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$353_storage_ptr","typeString":"struct AccessControlStorage.Layout storage pointer"}},"id":5252,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11192:14:57","memberName":"enforceHasRole","nodeType":"MemberAccess","referencedDeclaration":548,"src":"11162:44:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$353_storage_ptr_$_t_bytes32_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$353_storage_ptr_$","typeString":"function (struct AccessControlStorage.Layout storage pointer,bytes32,address) view"}},"id":5255,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11162:67:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5256,"nodeType":"ExpressionStatement","src":"11162:67:57"},{"assignments":[5259],"declarations":[{"constant":false,"id":5259,"mutability":"mutable","name":"credits","nameLocation":"11259:7:57","nodeType":"VariableDeclaration","scope":5404,"src":"11239:27:57","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"},"typeName":{"id":5258,"nodeType":"UserDefinedTypeName","pathNode":{"id":5257,"name":"UserCredits","nameLocations":["11239:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"11239:11:57"},"referencedDeclaration":4831,"src":"11239:11:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"}},"visibility":"internal"}],"id":5263,"initialValue":{"baseExpression":{"id":5260,"name":"userCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"11269:11:57","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits storage ref)"}},"id":5262,"indexExpression":{"id":5261,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"11281:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"11269:17:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage","typeString":"struct EDUCreditsManager.UserCredits storage ref"}},"nodeType":"VariableDeclarationStatement","src":"11239:47:57"},{"assignments":[5265],"declarations":[{"constant":false,"id":5265,"mutability":"mutable","name":"bonusSpent","nameLocation":"11305:10:57","nodeType":"VariableDeclaration","scope":5404,"src":"11297:18:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5264,"name":"uint256","nodeType":"ElementaryTypeName","src":"11297:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5266,"nodeType":"VariableDeclarationStatement","src":"11297:18:57"},{"assignments":[5268],"declarations":[{"constant":false,"id":5268,"mutability":"mutable","name":"bonus","nameLocation":"11333:5:57","nodeType":"VariableDeclaration","scope":5404,"src":"11325:13:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5267,"name":"uint256","nodeType":"ElementaryTypeName","src":"11325:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5271,"initialValue":{"expression":{"id":5269,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"11341:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5270,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11349:5:57","memberName":"bonus","nodeType":"MemberAccess","referencedDeclaration":4826,"src":"11341:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11325:29:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5272,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"11368:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5273,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11377:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11368:10:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5311,"nodeType":"IfStatement","src":"11364:330:57","trueBody":{"id":5310,"nodeType":"Block","src":"11380:314:57","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5277,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5275,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"11398:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5276,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11407:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11398:15:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5308,"nodeType":"Block","src":"11565:119:57","statements":[{"expression":{"id":5298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5294,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"11583:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5296,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11591:5:57","memberName":"bonus","nodeType":"MemberAccess","referencedDeclaration":4826,"src":"11583:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5297,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11599:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11583:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5299,"nodeType":"ExpressionStatement","src":"11583:17:57"},{"expression":{"id":5302,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5300,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11618:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5301,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"11628:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11618:15:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5303,"nodeType":"ExpressionStatement","src":"11618:15:57"},{"expression":{"id":5306,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5304,"name":"bonusSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"11651:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5305,"name":"bonus","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5268,"src":"11664:5:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11651:18:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5307,"nodeType":"ExpressionStatement","src":"11651:18:57"}]},"id":5309,"nodeType":"IfStatement","src":"11394:290:57","trueBody":{"id":5293,"nodeType":"Block","src":"11415:144:57","statements":[{"expression":{"id":5282,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5278,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"11433:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5280,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11441:5:57","memberName":"bonus","nodeType":"MemberAccess","referencedDeclaration":4826,"src":"11433:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5281,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11450:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11433:23:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5283,"nodeType":"ExpressionStatement","src":"11433:23:57"},{"eventCall":{"arguments":[{"id":5285,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"11492:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5286,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"11501:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5287,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11507:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11515:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"30","id":5289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11518:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5284,"name":"CreditsSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"11479:12:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256)"}},"id":5290,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11479:41:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5291,"nodeType":"EmitStatement","src":"11474:46:57"},{"functionReturnParameters":5224,"id":5292,"nodeType":"Return","src":"11538:7:57"}]}}]}},{"assignments":[5313],"declarations":[{"constant":false,"id":5313,"mutability":"mutable","name":"unclaimedSpent","nameLocation":"11712:14:57","nodeType":"VariableDeclaration","scope":5404,"src":"11704:22:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5312,"name":"uint256","nodeType":"ElementaryTypeName","src":"11704:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5314,"nodeType":"VariableDeclarationStatement","src":"11704:22:57"},{"assignments":[5316],"declarations":[{"constant":false,"id":5316,"mutability":"mutable","name":"unclaimed","nameLocation":"11744:9:57","nodeType":"VariableDeclaration","scope":5404,"src":"11736:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5315,"name":"uint256","nodeType":"ElementaryTypeName","src":"11736:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5319,"initialValue":{"expression":{"id":5317,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"11756:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5318,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"11764:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"11756:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11736:37:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5320,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"11787:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5321,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11800:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11787:14:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5359,"nodeType":"IfStatement","src":"11783:367:57","trueBody":{"id":5358,"nodeType":"Block","src":"11803:347:57","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5323,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"11821:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":5324,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11834:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11821:19:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":5356,"nodeType":"Block","src":"12005:135:57","statements":[{"expression":{"id":5346,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5342,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"12023:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5344,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12031:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"12023:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5345,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12043:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12023:21:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5347,"nodeType":"ExpressionStatement","src":"12023:21:57"},{"expression":{"id":5350,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5348,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12062:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5349,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"12072:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12062:19:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5351,"nodeType":"ExpressionStatement","src":"12062:19:57"},{"expression":{"id":5354,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5352,"name":"unclaimedSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"12099:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":5353,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5316,"src":"12116:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12099:26:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5355,"nodeType":"ExpressionStatement","src":"12099:26:57"}]},"id":5357,"nodeType":"IfStatement","src":"11817:323:57","trueBody":{"id":5341,"nodeType":"Block","src":"11842:157:57","statements":[{"expression":{"id":5330,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5326,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"11860:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5328,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"11868:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"11860:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5329,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11881:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11860:27:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5331,"nodeType":"ExpressionStatement","src":"11860:27:57"},{"eventCall":{"arguments":[{"id":5333,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"11923:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5334,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"11932:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5335,"name":"bonusSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"11938:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5336,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"11950:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"30","id":5337,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11958:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":5332,"name":"CreditsSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"11910:12:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256)"}},"id":5338,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11910:50:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5339,"nodeType":"EmitStatement","src":"11905:55:57"},{"functionReturnParameters":5224,"id":5340,"nodeType":"Return","src":"11978:7:57"}]}}]}},{"assignments":[5361],"declarations":[{"constant":false,"id":5361,"mutability":"mutable","name":"deposited","nameLocation":"12168:9:57","nodeType":"VariableDeclaration","scope":5404,"src":"12160:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5360,"name":"uint256","nodeType":"ElementaryTypeName","src":"12160:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5364,"initialValue":{"expression":{"id":5362,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"12180:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5363,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12188:9:57","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"12180:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12160:37:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5367,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5365,"name":"deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5361,"src":"12211:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":5366,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12223:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12211:18:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5374,"nodeType":"IfStatement","src":"12207:73:57","trueBody":{"errorCall":{"arguments":[{"id":5369,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"12258:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5370,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"12267:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5371,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12273:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5368,"name":"InsufficientCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4939,"src":"12238:19:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256) pure"}},"id":5372,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12238:42:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5373,"nodeType":"RevertStatement","src":"12231:49:57"}},{"expression":{"id":5379,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5375,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5259,"src":"12291:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5377,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"12299:9:57","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"12291:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5378,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12312:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12291:27:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5380,"nodeType":"ExpressionStatement","src":"12291:27:57"},{"expression":{"id":5383,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5381,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"12328:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5382,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12346:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12328:24:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5384,"nodeType":"ExpressionStatement","src":"12328:24:57"},{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5388,"name":"PayoutWalletStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1465,"src":"12381:19:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_PayoutWalletStorage_$1465_$","typeString":"type(library PayoutWalletStorage)"}},"id":5389,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12401:6:57","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":1464,"src":"12381:26:57","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function () pure returns (struct PayoutWalletStorage.Layout storage pointer)"}},"id":5390,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12381:28:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$1342_storage_ptr","typeString":"struct PayoutWalletStorage.Layout storage pointer"}},"id":5391,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12410:12:57","memberName":"payoutWallet","nodeType":"MemberAccess","referencedDeclaration":1452,"src":"12381:41:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$1342_storage_ptr_$returns$_t_address_payable_$attached_to$_t_struct$_Layout_$1342_storage_ptr_$","typeString":"function (struct PayoutWalletStorage.Layout storage pointer) view returns (address payable)"}},"id":5392,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12381:43:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},{"id":5393,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12426:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address_payable","typeString":"address payable"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5385,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"12362:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":5387,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"12372:8:57","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3816,"src":"12362:18:57","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5394,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12362:71:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5395,"nodeType":"ExpressionStatement","src":"12362:71:57"},{"eventCall":{"arguments":[{"id":5397,"name":"spender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5226,"src":"12461:7:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5398,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5220,"src":"12470:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5399,"name":"bonusSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5265,"src":"12476:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5400,"name":"unclaimedSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5313,"src":"12488:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5401,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5222,"src":"12504:6:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5396,"name":"CreditsSpent","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4898,"src":"12448:12:57","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (address,address,uint256,uint256,uint256)"}},"id":5402,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12448:63:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5403,"nodeType":"EmitStatement","src":"12443:68:57"}]},"documentation":{"id":5218,"nodeType":"StructuredDocumentation","src":"10229:670:57","text":"@notice Spends EDU tokens from the user's balance by a spender account.\n @notice The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\n @dev Reverts with {ZeroSpendAmount} if `amount` is zero.\n @dev Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.\n @dev Reverts with {NotRoleHolder} if the sender is not a spender.\n @dev Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.\n @dev Emits a {EDUSpent} event.\n @param user the user whose EDU tokens are spent.\n @param amount the amount of EDU tokens to spend."},"functionSelector":"af7d6ca3","id":5405,"implemented":true,"kind":"function","modifiers":[],"name":"spend","nameLocation":"10913:5:57","nodeType":"FunctionDefinition","parameters":{"id":5223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5220,"mutability":"mutable","name":"user","nameLocation":"10927:4:57","nodeType":"VariableDeclaration","scope":5405,"src":"10919:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5219,"name":"address","nodeType":"ElementaryTypeName","src":"10919:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":5222,"mutability":"mutable","name":"amount","nameLocation":"10941:6:57","nodeType":"VariableDeclaration","scope":5405,"src":"10933:14:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5221,"name":"uint256","nodeType":"ElementaryTypeName","src":"10933:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10918:30:57"},"returnParameters":{"id":5224,"nodeType":"ParameterList","parameters":[],"src":"10958:0:57"},"scope":5587,"src":"10904:1614:57","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":5482,"nodeType":"Block","src":"12726:617:57","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5411,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5409,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"12740:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":5410,"name":"WITHDRAW_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"12756:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12740:30:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5417,"nodeType":"IfStatement","src":"12736:88:57","trueBody":{"errorCall":{"arguments":[{"id":5413,"name":"WITHDRAW_PHASE","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4846,"src":"12795:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5414,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4854,"src":"12811:12:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5412,"name":"OnlyDuringPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4910,"src":"12779:15:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5415,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12779:45:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5416,"nodeType":"RevertStatement","src":"12772:52:57"}},{"assignments":[5419],"declarations":[{"constant":false,"id":5419,"mutability":"mutable","name":"user","nameLocation":"12842:4:57","nodeType":"VariableDeclaration","scope":5482,"src":"12834:12:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5418,"name":"address","nodeType":"ElementaryTypeName","src":"12834:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":5422,"initialValue":{"arguments":[],"expression":{"argumentTypes":[],"id":5420,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5572],"referencedDeclaration":5572,"src":"12849:10:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5421,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12849:12:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"12834:27:57"},{"assignments":[5425],"declarations":[{"constant":false,"id":5425,"mutability":"mutable","name":"credits","nameLocation":"12891:7:57","nodeType":"VariableDeclaration","scope":5482,"src":"12871:27:57","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"},"typeName":{"id":5424,"nodeType":"UserDefinedTypeName","pathNode":{"id":5423,"name":"UserCredits","nameLocations":["12871:11:57"],"nodeType":"IdentifierPath","referencedDeclaration":4831,"src":"12871:11:57"},"referencedDeclaration":4831,"src":"12871:11:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits"}},"visibility":"internal"}],"id":5430,"initialValue":{"baseExpression":{"id":5426,"name":"userCredits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4859,"src":"12901:11:57","typeDescriptions":{"typeIdentifier":"t_mapping$_t_address_$_t_struct$_UserCredits_$4831_storage_$","typeString":"mapping(address => struct EDUCreditsManager.UserCredits storage ref)"}},"id":5429,"indexExpression":{"arguments":[],"expression":{"argumentTypes":[],"id":5427,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[5572],"referencedDeclaration":5572,"src":"12913:10:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5428,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12913:12:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"12901:25:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage","typeString":"struct EDUCreditsManager.UserCredits storage ref"}},"nodeType":"VariableDeclarationStatement","src":"12871:55:57"},{"assignments":[5432],"declarations":[{"constant":false,"id":5432,"mutability":"mutable","name":"unclaimed","nameLocation":"12944:9:57","nodeType":"VariableDeclaration","scope":5482,"src":"12936:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5431,"name":"uint256","nodeType":"ElementaryTypeName","src":"12936:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5435,"initialValue":{"expression":{"id":5433,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"12956:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5434,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"12964:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"12956:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12936:37:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5438,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5436,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"12987:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5437,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13000:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12987:14:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5454,"nodeType":"IfStatement","src":"12983:141:57","trueBody":{"id":5453,"nodeType":"Block","src":"13003:121:57","statements":[{"expression":{"id":5443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5439,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"13017:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5441,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13025:9:57","memberName":"unclaimed","nodeType":"MemberAccess","referencedDeclaration":4824,"src":"13017:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13037:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13017:21:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5444,"nodeType":"ExpressionStatement","src":"13017:21:57"},{"expression":{"arguments":[{"id":5448,"name":"UNCLAIMED_EDU_HOLDER","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4851,"src":"13075:20:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5449,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"13097:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5450,"name":"unclaimed","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5432,"src":"13103:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5445,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"13052:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":5447,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13062:12:57","memberName":"transferFrom","nodeType":"MemberAccess","referencedDeclaration":3848,"src":"13052:22:57","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,address,uint256) external returns (bool)"}},"id":5451,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13052:61:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5452,"nodeType":"ExpressionStatement","src":"13052:61:57"}]}},{"assignments":[5456],"declarations":[{"constant":false,"id":5456,"mutability":"mutable","name":"deposited","nameLocation":"13142:9:57","nodeType":"VariableDeclaration","scope":5482,"src":"13134:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5455,"name":"uint256","nodeType":"ElementaryTypeName","src":"13134:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5459,"initialValue":{"expression":{"id":5457,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"13154:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5458,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"13162:9:57","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"13154:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13134:37:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5462,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5460,"name":"deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"13185:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"hexValue":"30","id":5461,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13198:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13185:14:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5481,"nodeType":"IfStatement","src":"13181:156:57","trueBody":{"id":5480,"nodeType":"Block","src":"13201:136:57","statements":[{"expression":{"id":5467,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":5463,"name":"credits","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5425,"src":"13215:7:57","typeDescriptions":{"typeIdentifier":"t_struct$_UserCredits_$4831_storage_ptr","typeString":"struct EDUCreditsManager.UserCredits storage pointer"}},"id":5465,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"13223:9:57","memberName":"deposited","nodeType":"MemberAccess","referencedDeclaration":4828,"src":"13215:17:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":5466,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13235:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"13215:21:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5468,"nodeType":"ExpressionStatement","src":"13215:21:57"},{"expression":{"id":5471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5469,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"13250:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"-=","rightHandSide":{"id":5470,"name":"deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"13268:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13250:27:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5472,"nodeType":"ExpressionStatement","src":"13250:27:57"},{"expression":{"arguments":[{"id":5476,"name":"user","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5419,"src":"13310:4:57","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":5477,"name":"deposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5456,"src":"13316:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":5473,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"13291:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":5475,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13301:8:57","memberName":"transfer","nodeType":"MemberAccess","referencedDeclaration":3816,"src":"13291:18:57","typeDescriptions":{"typeIdentifier":"t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$","typeString":"function (address,uint256) external returns (bool)"}},"id":5478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13291:35:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5479,"nodeType":"ExpressionStatement","src":"13291:35:57"}]}}]},"documentation":{"id":5406,"nodeType":"StructuredDocumentation","src":"12524:168:57","text":"@notice Withdraws all the remaining unclaimed and deposited EDU credits.\n @dev Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase."},"functionSelector":"3ccfd60b","id":5483,"implemented":true,"kind":"function","modifiers":[],"name":"withdraw","nameLocation":"12706:8:57","nodeType":"FunctionDefinition","parameters":{"id":5407,"nodeType":"ParameterList","parameters":[],"src":"12714:2:57"},"returnParameters":{"id":5408,"nodeType":"ParameterList","parameters":[],"src":"12726:0:57"},"scope":5587,"src":"12697:646:57","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[1683],"body":{"id":5557,"nodeType":"Block","src":"13766:471:57","statements":[{"assignments":[5499],"declarations":[{"constant":false,"id":5499,"mutability":"mutable","name":"recoverableEDUAmount","nameLocation":"13784:20:57","nodeType":"VariableDeclaration","scope":5557,"src":"13776:28:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5498,"name":"uint256","nodeType":"ElementaryTypeName","src":"13776:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5509,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":5504,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"13835:4:57","typeDescriptions":{"typeIdentifier":"t_contract$_EDUCreditsManager_$5587","typeString":"contract EDUCreditsManager"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_EDUCreditsManager_$5587","typeString":"contract EDUCreditsManager"}],"id":5503,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"13827:7:57","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":5502,"name":"address","nodeType":"ElementaryTypeName","src":"13827:7:57","typeDescriptions":{}}},"id":5505,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13827:13:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":5500,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"13807:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":5501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13817:9:57","memberName":"balanceOf","nodeType":"MemberAccess","referencedDeclaration":3806,"src":"13807:19:57","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_address_$returns$_t_uint256_$","typeString":"function (address) view external returns (uint256)"}},"id":5506,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"13807:34:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"id":5507,"name":"totalDeposited","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4865,"src":"13844:14:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13807:51:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"13776:82:57"},{"assignments":[5511],"declarations":[{"constant":false,"id":5511,"mutability":"mutable","name":"eduAmount","nameLocation":"13876:9:57","nodeType":"VariableDeclaration","scope":5557,"src":"13868:17:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5510,"name":"uint256","nodeType":"ElementaryTypeName","src":"13868:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5512,"nodeType":"VariableDeclarationStatement","src":"13868:17:57"},{"body":{"id":5537,"nodeType":"Block","src":"13939:108:57","statements":[{"condition":{"commonType":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"},"id":5528,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"baseExpression":{"id":5524,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"13957:6:57","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":5526,"indexExpression":{"id":5525,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"13964:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"13957:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":5527,"name":"EDU_TOKEN","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4849,"src":"13970:9:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"src":"13957:22:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5536,"nodeType":"IfStatement","src":"13953:84:57","trueBody":{"id":5535,"nodeType":"Block","src":"13981:56:57","statements":[{"expression":{"id":5533,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":5529,"name":"eduAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"13999:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"baseExpression":{"id":5530,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"14012:7:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":5532,"indexExpression":{"id":5531,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"14020:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"14012:10:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13999:23:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5534,"nodeType":"ExpressionStatement","src":"13999:23:57"}]}}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5520,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5517,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"13915:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":5518,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"13919:6:57","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},"id":5519,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"13926:6:57","memberName":"length","nodeType":"MemberAccess","src":"13919:13:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"13915:17:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5538,"initializationExpression":{"assignments":[5514],"declarations":[{"constant":false,"id":5514,"mutability":"mutable","name":"i","nameLocation":"13908:1:57","nodeType":"VariableDeclaration","scope":5538,"src":"13900:9:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":5513,"name":"uint256","nodeType":"ElementaryTypeName","src":"13900:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":5516,"initialValue":{"hexValue":"30","id":5515,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"13912:1:57","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"13900:13:57"},"loopExpression":{"expression":{"id":5522,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"13934:3:57","subExpression":{"id":5521,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5514,"src":"13934:1:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5523,"nodeType":"ExpressionStatement","src":"13934:3:57"},"nodeType":"ForStatement","src":"13895:152:57"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":5541,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":5539,"name":"eduAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"14060:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":5540,"name":"recoverableEDUAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5499,"src":"14072:20:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"14060:32:57","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":5548,"nodeType":"IfStatement","src":"14056:119:57","trueBody":{"id":5547,"nodeType":"Block","src":"14094:81:57","statements":[{"errorCall":{"arguments":[{"id":5543,"name":"recoverableEDUAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5499,"src":"14132:20:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":5544,"name":"eduAmount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5511,"src":"14154:9:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":5542,"name":"UnrecoverableEDU","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":4946,"src":"14115:16:57","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":5545,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14115:49:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5546,"nodeType":"RevertStatement","src":"14108:56:57"}]}},{"expression":{"arguments":[{"id":5552,"name":"accounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5487,"src":"14204:8:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"}},{"id":5553,"name":"tokens","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5491,"src":"14214:6:57","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"}},{"id":5554,"name":"amounts","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":5494,"src":"14222:7:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[] calldata"},{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[] calldata"},{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":5549,"name":"super","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-25,"src":"14184:5:57","typeDescriptions":{"typeIdentifier":"t_type$_t_super$_EDUCreditsManager_$5587_$","typeString":"type(contract super EDUCreditsManager)"}},"id":5551,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14190:13:57","memberName":"recoverERC20s","nodeType":"MemberAccess","referencedDeclaration":1683,"src":"14184:19:57","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_array$_t_address_$dyn_calldata_ptr_$_t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr_$_t_array$_t_uint256_$dyn_calldata_ptr_$returns$__$","typeString":"function (address[] calldata,contract IERC20[] calldata,uint256[] calldata)"}},"id":5555,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14184:46:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":5556,"nodeType":"ExpressionStatement","src":"14184:46:57"}]},"documentation":{"id":5484,"nodeType":"StructuredDocumentation","src":"13349:282:57","text":"@inheritdoc TokenRecoveryBase\n @notice EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\n @dev Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract."},"functionSelector":"73c8a958","id":5558,"implemented":true,"kind":"function","modifiers":[],"name":"recoverERC20s","nameLocation":"13645:13:57","nodeType":"FunctionDefinition","overrides":{"id":5496,"nodeType":"OverrideSpecifier","overrides":[],"src":"13757:8:57"},"parameters":{"id":5495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5487,"mutability":"mutable","name":"accounts","nameLocation":"13678:8:57","nodeType":"VariableDeclaration","scope":5558,"src":"13659:27:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_calldata_ptr","typeString":"address[]"},"typeName":{"baseType":{"id":5485,"name":"address","nodeType":"ElementaryTypeName","src":"13659:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":5486,"nodeType":"ArrayTypeName","src":"13659:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_address_$dyn_storage_ptr","typeString":"address[]"}},"visibility":"internal"},{"constant":false,"id":5491,"mutability":"mutable","name":"tokens","nameLocation":"13706:6:57","nodeType":"VariableDeclaration","scope":5558,"src":"13688:24:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptr","typeString":"contract IERC20[]"},"typeName":{"baseType":{"id":5489,"nodeType":"UserDefinedTypeName","pathNode":{"id":5488,"name":"IERC20","nameLocations":["13688:6:57"],"nodeType":"IdentifierPath","referencedDeclaration":3849,"src":"13688:6:57"},"referencedDeclaration":3849,"src":"13688:6:57","typeDescriptions":{"typeIdentifier":"t_contract$_IERC20_$3849","typeString":"contract IERC20"}},"id":5490,"nodeType":"ArrayTypeName","src":"13688:8:57","typeDescriptions":{"typeIdentifier":"t_array$_t_contract$_IERC20_$3849_$dyn_storage_ptr","typeString":"contract IERC20[]"}},"visibility":"internal"},{"constant":false,"id":5494,"mutability":"mutable","name":"amounts","nameLocation":"13733:7:57","nodeType":"VariableDeclaration","scope":5558,"src":"13714:26:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":5492,"name":"uint256","nodeType":"ElementaryTypeName","src":"13714:7:57","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":5493,"nodeType":"ArrayTypeName","src":"13714:9:57","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"}],"src":"13658:83:57"},"returnParameters":{"id":5497,"nodeType":"ParameterList","parameters":[],"src":"13766:0:57"},"scope":5587,"src":"13636:601:57","stateMutability":"nonpayable","virtual":true,"visibility":"public"},{"baseFunctions":[1101,4603],"body":{"id":5571,"nodeType":"Block","src":"14402:65:57","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5567,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"14419:28:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1150_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":5568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14448:10:57","memberName":"_msgSender","nodeType":"MemberAccess","referencedDeclaration":1101,"src":"14419:39:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":5569,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14419:41:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":5566,"id":5570,"nodeType":"Return","src":"14412:48:57"}]},"documentation":{"id":5559,"nodeType":"StructuredDocumentation","src":"14243:44:57","text":"@inheritdoc ForwarderRegistryContextBase"},"id":5572,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"14301:10:57","nodeType":"FunctionDefinition","overrides":{"id":5563,"nodeType":"OverrideSpecifier","overrides":[{"id":5561,"name":"Context","nameLocations":["14345:7:57"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"14345:7:57"},{"id":5562,"name":"ForwarderRegistryContextBase","nameLocations":["14354:28:57"],"nodeType":"IdentifierPath","referencedDeclaration":1150,"src":"14354:28:57"}],"src":"14336:47:57"},"parameters":{"id":5560,"nodeType":"ParameterList","parameters":[],"src":"14311:2:57"},"returnParameters":{"id":5566,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5565,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5572,"src":"14393:7:57","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":5564,"name":"address","nodeType":"ElementaryTypeName","src":"14393:7:57","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"14392:9:57"},"scope":5587,"src":"14292:175:57","stateMutability":"view","virtual":true,"visibility":"internal"},{"baseFunctions":[1149,4612],"body":{"id":5585,"nodeType":"Block","src":"14637:63:57","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":5581,"name":"ForwarderRegistryContextBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1150,"src":"14654:28:57","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ForwarderRegistryContextBase_$1150_$","typeString":"type(contract ForwarderRegistryContextBase)"}},"id":5582,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"14683:8:57","memberName":"_msgData","nodeType":"MemberAccess","referencedDeclaration":1149,"src":"14654:37:57","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes_calldata_ptr_$","typeString":"function () view returns (bytes calldata)"}},"id":5583,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"14654:39:57","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":5580,"id":5584,"nodeType":"Return","src":"14647:46:57"}]},"documentation":{"id":5573,"nodeType":"StructuredDocumentation","src":"14473:44:57","text":"@inheritdoc ForwarderRegistryContextBase"},"id":5586,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"14531:8:57","nodeType":"FunctionDefinition","overrides":{"id":5577,"nodeType":"OverrideSpecifier","overrides":[{"id":5575,"name":"Context","nameLocations":["14573:7:57"],"nodeType":"IdentifierPath","referencedDeclaration":4613,"src":"14573:7:57"},{"id":5576,"name":"ForwarderRegistryContextBase","nameLocations":["14582:28:57"],"nodeType":"IdentifierPath","referencedDeclaration":1150,"src":"14582:28:57"}],"src":"14564:47:57"},"parameters":{"id":5574,"nodeType":"ParameterList","parameters":[],"src":"14539:2:57"},"returnParameters":{"id":5580,"nodeType":"ParameterList","parameters":[{"constant":false,"id":5579,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":5586,"src":"14621:14:57","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":5578,"name":"bytes","nodeType":"ElementaryTypeName","src":"14621:5:57","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"14620:16:57"},"scope":5587,"src":"14522:178:57","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":5588,"src":"2313:12389:57","usedErrors":[7,233,249,868,1304,4903,4910,4913,4918,4923,4930,4939,4946],"usedEvents":[268,277,288,1312,4870,4885,4898]}],"src":"32:14671:57"},"id":57}},"contracts":{"@animoca/ethereum-contracts/contracts/access/AccessControl.sol":{"AccessControl":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Access control via roles management (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","owner()":"8da5cb5b","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Access control via roles management (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":\"AccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x21c3e803ed9ae31e2f165a260feba7f311686d83cf46a6eece90fb96605d1e88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) {\\n            revert NotTargetContractRoleHolder(targetContract, role, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e330c26f28436ae28d7f418331748fd0b3a64fc0f130b84a14b2eb013b3668\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"owner()":{"notice":"Gets the address of the contract owner."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol":{"AccessControlBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}]},"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}}},"title":"Access control via roles management (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}}},\"title\":\"Access control via roles management (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}]},\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":\"AccessControlBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) {\\n            revert NotTargetContractRoleHolder(targetContract, role, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e330c26f28436ae28d7f418331748fd0b3a64fc0f130b84a14b2eb013b3668\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}]},"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol":{"IAccessControlEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"}],"devdoc":{"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{},"title":"Access control via roles management (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Access control via roles management (events)\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":\"IAccessControlEvents\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol":{"IERC173Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{},"title":"ERC-173 Contract Ownership Standard (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC-173 Contract Ownership Standard (events)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":\"IERC173Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol":{"IAccessControl":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"events":{"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}}},"title":"Access control via roles management (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"hasRole(bytes32,address)":"91d14854","renounceRole(bytes32)":"8bb9c5bf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}}},\"title\":\"Access control via roles management (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":\"IAccessControl\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol":{"AccessControlStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122077c05c2b5659737b0503f5e53c2272568d884a0719669994056788b54541b79b64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xC05C2B5659737B0503F5E53C2272568D884A071966999405 PUSH8 0x88B54541B79B6473 PUSH16 0x6C634300081500330000000000000000 ","sourceMap":"297:4098:11:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;297:4098:11;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122077c05c2b5659737b0503f5e53c2272568d884a0719669994056788b54541b79b64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH24 0xC05C2B5659737B0503F5E53C2272568D884A071966999405 PUSH8 0x88B54541B79B6473 PUSH16 0x6C634300081500330000000000000000 ","sourceMap":"297:4098:11:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"enforceHasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","enforceHasTargetContractRole(address,bytes32,address)":"infinite","grantRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite","hasRole(struct AccessControlStorage.Layout storage pointer,bytes32,address)":"infinite","hasTargetContractRole(address,bytes32,address)":"infinite","layout()":"infinite","renounceRole(struct AccessControlStorage.Layout storage pointer,address,bytes32)":"infinite","revokeRole(struct AccessControlStorage.Layout storage pointer,bytes32,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":\"AccessControlStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) {\\n            revert NotTargetContractRoleHolder(targetContract, role, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e330c26f28436ae28d7f418331748fd0b3a64fc0f130b84a14b2eb013b3668\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ccc1c87410df222989f9bf5ed61d39aca7443a1cdb23047b277c2e1fa2d8124564736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC1 0xC8 PUSH21 0x10DF222989F9BF5ED61D39ACA7443A1CDB23047B27 PUSH29 0x2E1FA2D8124564736F6C63430008150033000000000000000000000000 ","sourceMap":"461:4580:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;461:4580:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ccc1c87410df222989f9bf5ed61d39aca7443a1cdb23047b277c2e1fa2d8124564736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCC 0xC1 0xC8 PUSH21 0x10DF222989F9BF5ED61D39ACA7443A1CDB23047B27 PUSH29 0x2E1FA2D8124564736F6C63430008150033000000000000000000000000 ","sourceMap":"461:4580:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f68009d3988b0dbf69f49a9d8b11edba6b9ee066a9164aece3d892524356ee6e64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 DUP1 MULMOD 0xD3 SWAP9 DUP12 0xD 0xBF PUSH10 0xF49A9D8B11EDBA6B9EE0 PUSH7 0xA9164AECE3D892 MSTORE NUMBER JUMP 0xEE PUSH15 0x64736F6C6343000815003300000000 ","sourceMap":"189:1692:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f68009d3988b0dbf69f49a9d8b11edba6b9ee066a9164aece3d892524356ee6e64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xF6 DUP1 MULMOD 0xD3 SWAP9 DUP12 0xD 0xBF PUSH10 0xF49A9D8B11EDBA6B9EE0 PUSH7 0xA9164AECE3D892 MSTORE NUMBER JUMP 0xEE PUSH15 0x64736F6C6343000815003300000000 ","sourceMap":"189:1692:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol":{"ForwarderRegistryContext":{"abi":[{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}}},"title":"Meta-Transactions Forwarder Registry Context (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"forwarderRegistry()":"2b4c9f16","isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Meta-Transactions Forwarder Registry Context (immutable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":\"ForwarderRegistryContext\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol":{"ForwarderRegistryContextBase":{"abi":[],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{},"title":"Meta-Transactions Forwarder Registry Context (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{},\"title\":\"Meta-Transactions Forwarder Registry Context (proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":\"ForwarderRegistryContextBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol":{"IERC2771":{"abi":[{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"isTrusted","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"isTrusted":"True if `forwarder` is trusted, false if not."}}},"title":"Secure Protocol for Native Meta Transactions.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isTrustedForwarder(address)":"572b6c05"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isTrusted\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"isTrusted\":\"True if `forwarder` is trusted, false if not.\"}}},\"title\":\"Secure Protocol for Native Meta Transactions.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":\"IERC2771\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol":{"IForwarderRegistry":{"abi":[{"inputs":[{"internalType":"address","name":"sender","type":"address"},{"internalType":"address","name":"forwarder","type":"address"}],"name":"isApprovedForwarder","outputs":[{"internalType":"bool","name":"isApproved","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)","kind":"dev","methods":{"isApprovedForwarder(address,address)":{"params":{"forwarder":"The forwarder account.","sender":"The sender account."},"returns":{"isApproved":"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise."}}},"title":"Universal Meta-Transactions Forwarder Registry.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isApprovedForwarder(address,address)":"8929a8ca"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isApprovedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isApproved\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\",\"kind\":\"dev\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"params\":{\"forwarder\":\"The forwarder account.\",\"sender\":\"The sender account.\"},\"returns\":{\"isApproved\":\"True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\"}}},\"title\":\"Universal Meta-Transactions Forwarder Registry.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"isApprovedForwarder(address,address)\":{\"notice\":\"Checks whether an account is as an approved meta-transaction forwarder for a sender account.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":\"IForwarderRegistry\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"isApprovedForwarder(address,address)":{"notice":"Checks whether an account is as an approved meta-transaction forwarder for a sender account."}},"version":1}}},"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol":{"ERC2771Calldata":{"abi":[],"devdoc":{"details":"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ba6678e14c5361206aefebd466c03bda406dc0e21716fa0db4da2c236cb9a5ea64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH7 0x78E14C5361206A 0xEF 0xEB 0xD4 PUSH7 0xC03BDA406DC0E2 OR AND STATICCALL 0xD 0xB4 0xDA 0x2C 0x23 PUSH13 0xB9A5EA64736F6C634300081500 CALLER ","sourceMap":"202:568:21:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:568:21;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220ba6678e14c5361206aefebd466c03bda406dc0e21716fa0db4da2c236cb9a5ea64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBA PUSH7 0x78E14C5361206A 0xEF 0xEB 0xD4 PUSH7 0xC03BDA406DC0E2 OR AND STATICCALL 0xD 0xB4 0xDA 0x2C 0x23 PUSH13 0xB9A5EA64736F6C634300081500 CALLER ","sourceMap":"202:568:21:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"msgData()":"infinite","msgSender()":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)See https://eips.ethereum.org/EIPS/eip-2771\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":\"ERC2771Calldata\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol":{"PayoutWallet":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"constructor":{"details":"Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"initialPayoutWallet":"The initial payout wallet."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Payout wallet (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","payoutWallet()":"8488bb4e","setPayoutWallet(address)":"6b8f9c43","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"initialPayoutWallet\":\"The initial payout wallet.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Payout wallet (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial payout wallet.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":\"PayoutWallet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {PayoutWalletStorage} from \\\"./libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWalletBase} from \\\"./base/PayoutWalletBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Payout wallet (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    constructor(address payable initialPayoutWallet) {\\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\\n    }\\n}\\n\",\"keccak256\":\"0x47cf847059ae6d8d00aa1b5c96e57e5bb51cac404bd832bfca9a88d532b03253\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xff1e9d711b9fb91092e75c7d75c0fdfb649bb98ccfcb371e6137e22e576a420a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7e506a858cc1f73c8b0607073a29192ceba1b37ce3377cf1cb7da363f7e5bba1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet is IPayoutWalletEvents {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0xa039277ccdb071a84badace43ead4200bb0eacd7f2ba152e657ff7281be34704\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x085ce624a3817a478398de616d035acd6a762636cce19cff02a6466b1c070e2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial payout wallet."},"owner()":{"notice":"Gets the address of the contract owner."},"payoutWallet()":{"notice":"Gets the payout wallet."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol":{"PayoutWalletBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}}},"title":"Payout wallet (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"payoutWallet()":"8488bb4e","setPayoutWallet(address)":"6b8f9c43"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}}},\"title\":\"Payout wallet (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}]},\"events\":{\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":\"PayoutWalletBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xff1e9d711b9fb91092e75c7d75c0fdfb649bb98ccfcb371e6137e22e576a420a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7e506a858cc1f73c8b0607073a29192ceba1b37ce3377cf1cb7da363f7e5bba1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet is IPayoutWalletEvents {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0xa039277ccdb071a84badace43ead4200bb0eacd7f2ba152e657ff7281be34704\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x085ce624a3817a478398de616d035acd6a762636cce19cff02a6466b1c070e2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}]},"events":{"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"payoutWallet()":{"notice":"Gets the payout wallet."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol":{"IPayoutWalletEvents":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"}],"devdoc":{"events":{"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{},"title":"Payout wallet (events)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"}],\"devdoc\":{\"events\":{\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"Payout wallet (events)\",\"version\":1},\"userdoc\":{\"events\":{\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":\"IPayoutWalletEvents\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol":{"IPayoutWallet":{"abi":[{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"}],"devdoc":{"events":{"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}}},"kind":"dev","methods":{"payoutWallet()":{"returns":{"wallet":"The payout wallet."}}},"title":"Payout wallet (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"payoutWallet()":"8488bb4e"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}}},\"kind\":\"dev\",\"methods\":{\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}}},\"title\":\"Payout wallet (functions)\",\"version\":1},\"userdoc\":{\"events\":{\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"}},\"kind\":\"user\",\"methods\":{\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":\"IPayoutWallet\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet is IPayoutWalletEvents {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0xa039277ccdb071a84badace43ead4200bb0eacd7f2ba152e657ff7281be34704\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."}},"kind":"user","methods":{"payoutWallet()":{"notice":"Gets the payout wallet."}},"version":1}}},"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol":{"PayoutWalletStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122055c1f16c14b4fa7264613d826a5fffd6634f5b53c81259af0d268f2101a13acb64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xC1 CALL PUSH13 0x14B4FA7264613D826A5FFFD663 0x4F JUMPDEST MSTORE8 0xC8 SLT MSIZE 0xAF 0xD 0x26 DUP16 0x21 ADD LOG1 GASPRICE 0xCB PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"293:2644:27:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;293:2644:27;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122055c1f16c14b4fa7264613d826a5fffd6634f5b53c81259af0d268f2101a13acb64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 SSTORE 0xC1 CALL PUSH13 0x14B4FA7264613D826A5FFFD663 0x4F JUMPDEST MSTORE8 0xC8 SLT MSIZE 0xAF 0xD 0x26 DUP16 0x21 ADD LOG1 GASPRICE 0xCB PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"293:2644:27:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"constructorInit(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite","layout()":"infinite","payoutWallet(struct PayoutWalletStorage.Layout storage pointer)":"infinite","proxyInit(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite","setPayoutWallet(struct PayoutWalletStorage.Layout storage pointer,address payable)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":\"PayoutWalletStorage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7e506a858cc1f73c8b0607073a29192ceba1b37ce3377cf1cb7da363f7e5bba1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x085ce624a3817a478398de616d035acd6a762636cce19cff02a6466b1c070e2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cff424eb7ed06848b3e4bbb18ffed0ad16c9a0dae98b1ad9ff0eaec7e527a77f64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DELEGATECALL 0x24 0xEB PUSH31 0xD06848B3E4BBB18FFED0AD16C9A0DAE98B1AD9FF0EAEC7E527A77F64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"319:712:29:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:29;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220cff424eb7ed06848b3e4bbb18ffed0ad16c9a0dae98b1ad9ff0eaec7e527a77f64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCF DELEGATECALL 0x24 0xEB PUSH31 0xD06848B3E4BBB18FFED0AD16C9A0DAE98B1AD9FF0EAEC7E527A77F64736F6C PUSH4 0x43000815 STOP CALLER ","sourceMap":"319:712:29:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol":{"TokenRecovery":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":\"TokenRecovery\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb245a212ba820a98cd4626cd5e85b9a1a80b70e8eba9a35c2ecd26306d801193\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol":{"TokenRecoveryBase":{"abi":[{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"kind":"dev","methods":{"recoverERC20s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}}},"title":"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC173 (Contract Ownership standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"kind\":\"dev\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.Reverts if one of the ERC20 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}}},\"title\":\"Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"kind\":\"user\",\"methods\":{\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":\"TokenRecoveryBase\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb245a212ba820a98cd4626cd5e85b9a1a80b70e8eba9a35c2ecd26306d801193\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"kind":"user","methods":{"recoverERC20s(address[],address[],uint256[])":{"notice":"Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol":{"ERC20Receiver":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) implementation.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC20 Fungible Token Standard, Receiver (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859","supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC20 Fungible Token Standard, Receiver (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}]},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Marks the following ERC165 interface(s) as supported: ERC20Receiver.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":\"ERC20Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6509d98dc0a49fadcc87bba2320dc224eb17add644fbf3fd4c86889e13f0c131\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc21b04865b45722ebc6fc2dcef2c327d43c2e5c28273ce2b68d1a5124317c76e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}]},"kind":"user","methods":{"constructor":{"notice":"Marks the following ERC165 interface(s) as supported: ERC20Receiver."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol":{"IERC20Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.","events":{"Approval(address,address,uint256)":{"params":{"owner":"The account granting an allowance to `spender`.","spender":"The account being granted an allowance from `owner`.","value":"The allowance amount being granted."}},"Transfer(address,address,uint256)":{"params":{"from":"The account where the transferred tokens are withdrawn from.","to":"The account where the transferred tokens are deposited to.","value":"The amount of tokens being transferred."}}},"kind":"dev","methods":{},"title":"ERC20 Token Standard, basic interface (events).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account granting an allowance to `spender`.\",\"spender\":\"The account being granted an allowance from `owner`.\",\"value\":\"The allowance amount being granted.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account where the transferred tokens are withdrawn from.\",\"to\":\"The account where the transferred tokens are deposited to.\",\"value\":\"The amount of tokens being transferred.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC20 Token Standard, basic interface (events).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":\"IERC20Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20Events {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd756847860b666bca19696c98b79222c0731a4b415cf68182124c8b8b5de2c88\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"supply","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.","events":{"Approval(address,address,uint256)":{"params":{"owner":"The account granting an allowance to `spender`.","spender":"The account being granted an allowance from `owner`.","value":"The allowance amount being granted."}},"Transfer(address,address,uint256)":{"params":{"from":"The account where the transferred tokens are withdrawn from.","to":"The account where the transferred tokens are deposited to.","value":"The amount of tokens being transferred."}}},"kind":"dev","methods":{"allowance(address,address)":{"params":{"owner":"The account that has granted an allowance to `spender`.","spender":"The account that was granted an allowance by `owner`."},"returns":{"value":"The amount which `spender` is allowed to spend on behalf of `owner`."}},"approve(address,uint256)":{"details":"Reverts if `spender` is the zero address.Emits an {Approval} event.","params":{"spender":"The account being granted the allowance by the message caller.","value":"The allowance amount to grant."},"returns":{"result":"Whether the operation succeeded."}},"balanceOf(address)":{"params":{"owner":"The account whose balance will be returned."},"returns":{"balance":"The account balance."}},"totalSupply()":{"returns":{"supply":"The total token supply."}},"transfer(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.","params":{"to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"transferFrom(address,address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"supply\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: The ERC-165 identifier for this interface is 0x36372b07.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"owner\":\"The account granting an allowance to `spender`.\",\"spender\":\"The account being granted an allowance from `owner`.\",\"value\":\"The allowance amount being granted.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The account where the transferred tokens are withdrawn from.\",\"to\":\"The account where the transferred tokens are deposited to.\",\"value\":\"The amount of tokens being transferred.\"}}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"params\":{\"owner\":\"The account that has granted an allowance to `spender`.\",\"spender\":\"The account that was granted an allowance by `owner`.\"},\"returns\":{\"value\":\"The amount which `spender` is allowed to spend on behalf of `owner`.\"}},\"approve(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Emits an {Approval} event.\",\"params\":{\"spender\":\"The account being granted the allowance by the message caller.\",\"value\":\"The allowance amount to grant.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The account whose balance will be returned.\"},\"returns\":{\"balance\":\"The account balance.\"}},\"totalSupply()\":{\"returns\":{\"supply\":\"The total token supply.\"}},\"transfer(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Emits a {Transfer} event.\",\"params\":{\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits a {Transfer} event.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when an approval is set.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when tokens are transferred, including zero value transfers.\"}},\"kind\":\"user\",\"methods\":{\"allowance(address,address)\":{\"notice\":\"Gets the amount that an account is allowed to spend on behalf of another.\"},\"approve(address,uint256)\":{\"notice\":\"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"balanceOf(address)\":{\"notice\":\"Gets an account balance.\"},\"totalSupply()\":{\"notice\":\"Gets the total token supply.\"},\"transfer(address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20Events {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd756847860b666bca19696c98b79222c0731a4b415cf68182124c8b8b5de2c88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 is IERC20Events {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xb93b440da9fea1bb92e63be35d086275a8cddd439acc2927f906f31e39339a77\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when an approval is set."},"Transfer(address,address,uint256)":{"notice":"Emitted when tokens are transferred, including zero value transfers."}},"kind":"user","methods":{"allowance(address,address)":{"notice":"Gets the amount that an account is allowed to spend on behalf of another."},"approve(address,uint256)":{"notice":"Sets the allowance to an account from the sender.Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729"},"balanceOf(address)":{"notice":"Gets an account balance."},"totalSupply()":{"notice":"Gets the total token supply."},"transfer(address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from the sender."},"transferFrom(address,address,uint256)":{"notice":"Transfers an amount of tokens to a recipient from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol":{"IERC20Allowance":{"abi":[{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"decreaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"increaseAllowance","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x9d075186.","kind":"dev","methods":{"decreaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being decreased.","value":"The allowance amount decrease."},"returns":{"result":"Whether the operation succeeded."}},"increaseAllowance(address,uint256)":{"details":"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.","params":{"spender":"The account whose allowance is being increased.","value":"The allowance amount increase."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Allowance.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"decreaseAllowance(address,uint256)":"a457c2d7","increaseAllowance(address,uint256)":"39509351"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x9d075186.\",\"kind\":\"dev\",\"methods\":{\"decreaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender` does not have at least `value` of allowance by the sender.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being decreased.\",\"value\":\"The allowance amount decrease.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Reverts if `spender` is the zero address.Reverts if `spender`'s allowance by the sender overflows.Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\",\"params\":{\"spender\":\"The account whose allowance is being increased.\",\"value\":\"The allowance amount increase.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Allowance.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"decreaseAllowance(address,uint256)\":{\"notice\":\"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"},\"increaseAllowance(address,uint256)\":{\"notice\":\"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":\"IERC20Allowance\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x5f28474e1cc281778da25e0fec62b5bb78d15111624f6ddb85b6d9dd0bb53f3e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"decreaseAllowance(address,uint256)":{"notice":"Decreases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."},"increaseAllowance(address,uint256)":{"notice":"Increases the allowance granted to an account by the sender.This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol":{"IERC20BatchTransfers":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xc05327e6.","kind":"dev","methods":{"batchTransfer(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.","params":{"recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"result":"Whether the operation succeeded."}},"batchTransferFrom(address,address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account which owns the tokens to be transferred.","recipients":"The list of accounts to transfer the tokens to.","values":"The list of amounts of tokens to transfer to each of `recipients`."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Batch Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchTransfer(address[],uint256[])":"88d695b2","batchTransferFrom(address,address[],uint256[])":"4885b254"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0xc05327e6.\",\"kind\":\"dev\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the sender does not have at least `sum(values)` of balance.Emits an {IERC20-Transfer} event for each transfer.\",\"params\":{\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"batchTransferFrom(address,address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if `from` does not have at least `sum(values)` of balance.Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.Emits an {IERC20-Transfer} event for each transfer.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account which owns the tokens to be transferred.\",\"recipients\":\"The list of accounts to transfer the tokens to.\",\"values\":\"The list of amounts of tokens to transfer to each of `recipients`.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Batch Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchTransfer(address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from the sender.\"},\"batchTransferFrom(address,address[],uint256[])\":{\"notice\":\"Transfers multiple amounts of tokens to multiple recipients from a specified address.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":\"IERC20BatchTransfers\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x26135c28fa1f75999151a5853283e3265b7104680e6427e56bac7c1f7db0afff\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchTransfer(address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from the sender."},"batchTransferFrom(address,address[],uint256[])":{"notice":"Transfers multiple amounts of tokens to multiple recipients from a specified address."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol":{"IERC20Burnable":{"abi":[{"inputs":[{"internalType":"address[]","name":"owners","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchBurnFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burn","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"burnFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.","kind":"dev","methods":{"batchBurnFrom(address[],uint256[])":{"details":"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).","params":{"owners":"The list of accounts to burn the tokens from.","values":"The list of amounts of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}},"burn(uint256)":{"details":"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.","params":{"value":"The amount of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}},"burnFrom(address,uint256)":{"details":"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).","params":{"from":"The account to burn the tokens from.","value":"The amount of tokens to burn."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Burnable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchBurnFrom(address[],uint256[])":"1b9a7529","burn(uint256)":"42966c68","burnFrom(address,uint256)":"79cc6790"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchBurnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\",\"kind\":\"dev\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"details\":\"Reverts if `owners` and `values` have different lengths.Reverts if an `owner` does not have at least the corresponding `value` of balance.Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\",\"params\":{\"owners\":\"The list of accounts to burn the tokens from.\",\"values\":\"The list of amounts of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"burn(uint256)\":{\"details\":\"Reverts if the sender does not have at least `value` of balance.Emits an {IERC20-Transfer} event with `to` set to the zero address.\",\"params\":{\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"burnFrom(address,uint256)\":{\"details\":\"Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Emits an {IERC20-Transfer} event with `to` set to the zero address.Optionally emits an {Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"from\":\"The account to burn the tokens from.\",\"value\":\"The amount of tokens to burn.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Burnable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchBurnFrom(address[],uint256[])\":{\"notice\":\"Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\"},\"burn(uint256)\":{\"notice\":\"Burns an amount of tokens from the sender, decreasing the total supply.\"},\"burnFrom(address,uint256)\":{\"notice\":\"Burns an amount of tokens from a specified address, decreasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":\"IERC20Burnable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xacc9d72ff27c4b58be9941f321f83a4b4437facd6c89c12c534e3525230519cb\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchBurnFrom(address[],uint256[])":{"notice":"Burns multiple amounts of tokens from multiple owners, decreasing the total supply."},"burn(uint256)":{"notice":"Burns an amount of tokens from the sender, decreasing the total supply."},"burnFrom(address,uint256)":{"notice":"Burns an amount of tokens from a specified address, decreasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol":{"IERC20Mintable":{"abi":[{"inputs":[{"internalType":"address[]","name":"recipients","type":"address[]"},{"internalType":"uint256[]","name":"values","type":"uint256[]"}],"name":"batchMint","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"}],"name":"mint","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.","kind":"dev","methods":{"batchMint(address[],uint256[])":{"details":"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.","params":{"recipients":"The list of accounts to mint the tokens to.","values":"The list of amounts of tokens to mint to each of `recipients`."}},"mint(address,uint256)":{"details":"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.","params":{"to":"The account to mint the tokens to.","value":"The amount of tokens to mint."}}},"title":"ERC20 Token Standard, optional extension: Mintable.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchMint(address[],uint256[])":"68573107","mint(address,uint256)":"40c10f19"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"recipients\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"values\",\"type\":\"uint256[]\"}],\"name\":\"batchMint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x28963e1e.\",\"kind\":\"dev\",\"methods\":{\"batchMint(address[],uint256[])\":{\"details\":\"Reverts if `recipients` and `values` have different lengths.Reverts if one of `recipients` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\",\"params\":{\"recipients\":\"The list of accounts to mint the tokens to.\",\"values\":\"The list of amounts of tokens to mint to each of `recipients`.\"}},\"mint(address,uint256)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the total supply overflows.Emits an {IERC20-Transfer} event with `from` set to the zero address.\",\"params\":{\"to\":\"The account to mint the tokens to.\",\"value\":\"The amount of tokens to mint.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Mintable.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"batchMint(address[],uint256[])\":{\"notice\":\"Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\"},\"mint(address,uint256)\":{\"notice\":\"Mints an amount of tokens to a recipient, increasing the total supply.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":\"IERC20Mintable\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x5d68d1fa4d138d13effe6a29a704277daefa379dead9053db79ac33d32a607fe\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"batchMint(address[],uint256[])":{"notice":"Mints multiple amounts of tokens to multiple recipients, increasing the total supply."},"mint(address,uint256)":{"notice":"Mints an amount of tokens to a recipient, increasing the total supply."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol":{"IERC20Receiver":{"abi":[{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.","kind":"dev","methods":{"onERC20Received(address,address,uint256,bytes)":{"details":"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}}},"title":"ERC20 Token Standard, Tokens Receiver.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"onERC20Received(address,address,uint256,bytes)":"4fc35859"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x4fc35859.\",\"kind\":\"dev\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}}},\"title\":\"ERC20 Token Standard, Tokens Receiver.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Handles the receipt of ERC20 tokens.\"}},\"notice\":\"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":\"IERC20Receiver\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc21b04865b45722ebc6fc2dcef2c327d43c2e5c28273ce2b68d1a5124317c76e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"onERC20Received(address,address,uint256,bytes)":{"notice":"Handles the receipt of ERC20 tokens."}},"notice":"Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.","version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol":{"IERC20SafeTransfers":{"abi":[{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransfer","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[{"internalType":"bool","name":"result","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.","kind":"dev","methods":{"safeTransfer(address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).","params":{"data":"Optional additional data with no specified format, to be passed to the receiver contract.","from":"The account which owns the tokens to transfer.","to":"The account to transfer the tokens to.","value":"The amount of tokens to transfer."},"returns":{"result":"Whether the operation succeeded."}}},"title":"ERC20 Token Standard, optional extension: Safe Transfers.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"safeTransfer(address,uint256,bytes)":"eb795549","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"result\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-20Note: the ERC-165 identifier for this interface is 0x53f41a97.\",\"kind\":\"dev\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if the sender does not have at least `value` of balance.Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Reverts if `to` is the zero address.Reverts if `from` does not have at least `value` of balance.Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.Emits an {IERC20-Transfer} event.Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\",\"params\":{\"data\":\"Optional additional data with no specified format, to be passed to the receiver contract.\",\"from\":\"The account which owns the tokens to transfer.\",\"to\":\"The account to transfer the tokens to.\",\"value\":\"The amount of tokens to transfer.\"},\"returns\":{\"result\":\"Whether the operation succeeded.\"}}},\"title\":\"ERC20 Token Standard, optional extension: Safe Transfers.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"safeTransfer(address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":\"IERC20SafeTransfers\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x235ae3d1109ae591904ad298c3cd6fea07b399baae4da6992f1a01eb66815a34\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"safeTransfer(address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it."}},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol":{"ERC20Storage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122075cea508bc8834edabc92aeaa550b4dedaf0d4607e6d7637500a3eb0abe3210a64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xCEA508BC8834EDABC92AEAA550B4DEDAF0D4607E6D76 CALLDATACOPY POP EXP RETURNDATACOPY 0xB0 0xAB 0xE3 0x21 EXP PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1512:27007:46:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1512:27007:46;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea264697066735822122075cea508bc8834edabc92aeaa550b4dedaf0d4607e6d7637500a3eb0abe3210a64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH22 0xCEA508BC8834EDABC92AEAA550B4DEDAF0D4607E6D76 CALLDATACOPY POP EXP RETURNDATACOPY 0xB0 0xAB 0xE3 0x21 EXP PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"1512:27007:46:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"_callOnERC20Received(address,address,address,uint256,bytes memory)":"infinite","allowance(struct ERC20Storage.Layout storage pointer,address,address)":"infinite","approve(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","balanceOf(struct ERC20Storage.Layout storage pointer,address)":"infinite","batchBurnFrom(struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)":"infinite","batchMint(struct ERC20Storage.Layout storage pointer,address[] memory,uint256[] memory)":"infinite","batchTransfer(struct ERC20Storage.Layout storage pointer,address,address[] calldata,uint256[] calldata)":"infinite","batchTransferFrom(struct ERC20Storage.Layout storage pointer,address,address,address[] calldata,uint256[] calldata)":"infinite","burn(struct ERC20Storage.Layout storage pointer,address,uint256)":"infinite","burnFrom(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","decreaseAllowance(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","increaseAllowance(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","init()":"infinite","initERC20BatchTransfers()":"infinite","initERC20Burnable()":"infinite","initERC20Mintable()":"infinite","initERC20SafeTransfers()":"infinite","initWithAllocations(address[] memory,uint256[] memory)":"infinite","layout()":"infinite","mint(struct ERC20Storage.Layout storage pointer,address,uint256)":"infinite","safeTransfer(struct ERC20Storage.Layout storage pointer,address,address,uint256,bytes calldata)":"infinite","safeTransferFrom(struct ERC20Storage.Layout storage pointer,address,address,address,uint256,bytes calldata)":"infinite","totalSupply(struct ERC20Storage.Layout storage pointer)":"infinite","transfer(struct ERC20Storage.Layout storage pointer,address,address,uint256)":"infinite","transferFrom(struct ERC20Storage.Layout storage pointer,address,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":\"ERC20Storage\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x02c49c65dc1b9a602bd4c2aae19caaf2d4a632c1860dfa0d45663e476040ff3f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0xb8261bef4a8bcb930a73cb36ce32585d8d4d3f1e3e5330a67f1078b9792f5710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x9224eb85f85f9fe58bda9cd7b48fb78f1e56772315bd1ec84e9ad38f55b55dbe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x050233c30decfad7c35c8e133b0e8073562c8f4f8776799d16179b2e5a08b850\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x805977a4ecd8fb4d39cbb9b3c1bb273e32c0af20da1c1f506e73701bef528c9d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20Events {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd756847860b666bca19696c98b79222c0731a4b415cf68182124c8b8b5de2c88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 is IERC20Events {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xb93b440da9fea1bb92e63be35d086275a8cddd439acc2927f906f31e39339a77\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x5f28474e1cc281778da25e0fec62b5bb78d15111624f6ddb85b6d9dd0bb53f3e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x26135c28fa1f75999151a5853283e3265b7104680e6427e56bac7c1f7db0afff\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xacc9d72ff27c4b58be9941f321f83a4b4437facd6c89c12c534e3525230519cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x5d68d1fa4d138d13effe6a29a704277daefa379dead9053db79ac33d32a607fe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc21b04865b45722ebc6fc2dcef2c327d43c2e5c28273ce2b68d1a5124317c76e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x235ae3d1109ae591904ad298c3cd6fea07b399baae4da6992f1a01eb66815a34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit IERC20Events.Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit IERC20Events.Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit IERC20Events.Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit IERC20Events.Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0x16e76f920a4b863bb99baa5ba98fe591512b2907da927e87af9ec1483a88a7e0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol":{"IERC721Events":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard events, see IERC721 for the functions.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{},"title":"ERC721 Non-Fungible Token Standard, basic interface (events).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard events, see IERC721 for the functions.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (events).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":\"IERC721Events\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol":{"IERC721":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"approved","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"operator","type":"address"},{"indexed":false,"internalType":"bool","name":"approved","type":"bool"}],"name":"ApprovalForAll","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":true,"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"approve","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"balance","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"getApproved","outputs":[{"internalType":"address","name":"approved","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"operator","type":"address"}],"name":"isApprovedForAll","outputs":[{"internalType":"bool","name":"approvedForAll","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"ownerOf","outputs":[{"internalType":"address","name":"tokenOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"name":"safeTransferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"operator","type":"address"},{"internalType":"bool","name":"approved","type":"bool"}],"name":"setApprovalForAll","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"tokenId","type":"uint256"}],"name":"transferFrom","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.","events":{"Approval(address,address,uint256)":{"params":{"approved":"The approved address.","owner":"The token owner.","tokenId":"The approved token identifier."}},"ApprovalForAll(address,address,bool)":{"params":{"approved":"True when then approval is set, false when it is unset.","operator":"The approved address.","owner":"The tokens owner."}},"Transfer(address,address,uint256)":{"params":{"from":"The previous token owner.","to":"The new token owner.","tokenId":"The transferred token identifier."}}},"kind":"dev","methods":{"approve(address,uint256)":{"details":"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.","params":{"to":"The address to approve, or the zero address to remove any existing approval.","tokenId":"The token identifier to give approval for."}},"balanceOf(address)":{"details":"Reverts if `owner` is the zero address.","params":{"owner":"The address to query the balance of."},"returns":{"balance":"The amount owned by the owner."}},"getApproved(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the approval of."},"returns":{"approved":"The approved address for the token identifier, or the zero address if no approval is set."}},"isApprovedForAll(address,address)":{"params":{"operator":"The address which receives the approval for all tokens.","owner":"The address which gives the approval for all tokens."},"returns":{"approvedForAll":"Whether the operator is approved for all tokens by the owner."}},"ownerOf(uint256)":{"details":"Reverts if `tokenId` does not exist.","params":{"tokenId":"The token identifier to query the owner of."},"returns":{"tokenOwner":"The owner of the token identifier."}},"safeTransferFrom(address,address,uint256)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"safeTransferFrom(address,address,uint256,bytes)":{"details":"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.","params":{"data":"Optional data to send along to a receiver contract.","from":"The current token owner.","to":"The recipient of the token transfer.","tokenId":"The identifier of the token to transfer."}},"setApprovalForAll(address,bool)":{"details":"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.","params":{"approved":"True to set an approval for all tokens, false to unset it.","operator":"The address to approve for all tokens."}},"transferFrom(address,address,uint256)":{"details":"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.","params":{"from":"The current token owner.","to":"The recipient of the token transfer. Self-transfers are possible.","tokenId":"The identifier of the token to transfer."}}},"title":"ERC721 Non-Fungible Token Standard, basic interface (functions).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","getApproved(uint256)":"081812fc","isApprovedForAll(address,address)":"e985e9c5","ownerOf(uint256)":"6352211e","safeTransferFrom(address,address,uint256)":"42842e0e","safeTransferFrom(address,address,uint256,bytes)":"b88d4fde","setApprovalForAll(address,bool)":"a22cb465","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"approvedForAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"tokenOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-721This interface only contains the standard functions. See IERC721Events for the events.Note: The ERC-165 identifier for this interface is 0x80ac58cd.\",\"events\":{\"Approval(address,address,uint256)\":{\"params\":{\"approved\":\"The approved address.\",\"owner\":\"The token owner.\",\"tokenId\":\"The approved token identifier.\"}},\"ApprovalForAll(address,address,bool)\":{\"params\":{\"approved\":\"True when then approval is set, false when it is unset.\",\"operator\":\"The approved address.\",\"owner\":\"The tokens owner.\"}},\"Transfer(address,address,uint256)\":{\"params\":{\"from\":\"The previous token owner.\",\"to\":\"The new token owner.\",\"tokenId\":\"The transferred token identifier.\"}}},\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"Note: There can only be one approved address per token at a given time.Note: A token approval gets reset when this token is transferred, including a self-transfer.Reverts if `tokenId` does not exist.Reverts if `to` is the token owner.Reverts if the sender is not the token owner and has not been approved by the token owner.Emits an {Approval} event.\",\"params\":{\"to\":\"The address to approve, or the zero address to remove any existing approval.\",\"tokenId\":\"The token identifier to give approval for.\"}},\"balanceOf(address)\":{\"details\":\"Reverts if `owner` is the zero address.\",\"params\":{\"owner\":\"The address to query the balance of.\"},\"returns\":{\"balance\":\"The amount owned by the owner.\"}},\"getApproved(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the approval of.\"},\"returns\":{\"approved\":\"The approved address for the token identifier, or the zero address if no approval is set.\"}},\"isApprovedForAll(address,address)\":{\"params\":{\"operator\":\"The address which receives the approval for all tokens.\",\"owner\":\"The address which gives the approval for all tokens.\"},\"returns\":{\"approvedForAll\":\"Whether the operator is approved for all tokens by the owner.\"}},\"ownerOf(uint256)\":{\"details\":\"Reverts if `tokenId` does not exist.\",\"params\":{\"tokenId\":\"The token identifier to query the owner of.\"},\"returns\":{\"tokenOwner\":\"The owner of the token identifier.\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.Emits a {Transfer} event.\",\"params\":{\"data\":\"Optional data to send along to a receiver contract.\",\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer.\",\"tokenId\":\"The identifier of the token to transfer.\"}},\"setApprovalForAll(address,bool)\":{\"details\":\"Reverts if the sender is the same as `operator`.Emits an {ApprovalForAll} event.\",\"params\":{\"approved\":\"True to set an approval for all tokens, false to unset it.\",\"operator\":\"The address to approve for all tokens.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.Resets the token approval for `tokenId`.Reverts if `to` is the zero address.Reverts if `from` is not the owner of `tokenId`.Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.Emits a {Transfer} event.\",\"params\":{\"from\":\"The current token owner.\",\"to\":\"The recipient of the token transfer. Self-transfers are possible.\",\"tokenId\":\"The identifier of the token to transfer.\"}}},\"title\":\"ERC721 Non-Fungible Token Standard, basic interface (functions).\",\"version\":1},\"userdoc\":{\"events\":{\"Approval(address,address,uint256)\":{\"notice\":\"Emitted when a single token approval is set.\"},\"ApprovalForAll(address,address,bool)\":{\"notice\":\"Emitted when an approval for all tokens is set or unset.\"},\"Transfer(address,address,uint256)\":{\"notice\":\"Emitted when a token is transferred.\"}},\"kind\":\"user\",\"methods\":{\"approve(address,uint256)\":{\"notice\":\"Sets or unsets an approval to transfer a single token on behalf of its owner.\"},\"balanceOf(address)\":{\"notice\":\"Gets the balance of an address.\"},\"getApproved(uint256)\":{\"notice\":\"Gets the approved address for a token.\"},\"isApprovedForAll(address,address)\":{\"notice\":\"Gets whether an operator is approved for all tokens by an owner.\"},\"ownerOf(uint256)\":{\"notice\":\"Gets the owner of a token.\"},\"safeTransferFrom(address,address,uint256)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"notice\":\"Safely transfers the ownership of a token to a recipient.\"},\"setApprovalForAll(address,bool)\":{\"notice\":\"Sets or unsets an approval to transfer all tokens on behalf of their owner.\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Unsafely transfers the ownership of a token to a recipient.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":\"IERC721\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"events":{"Approval(address,address,uint256)":{"notice":"Emitted when a single token approval is set."},"ApprovalForAll(address,address,bool)":{"notice":"Emitted when an approval for all tokens is set or unset."},"Transfer(address,address,uint256)":{"notice":"Emitted when a token is transferred."}},"kind":"user","methods":{"approve(address,uint256)":{"notice":"Sets or unsets an approval to transfer a single token on behalf of its owner."},"balanceOf(address)":{"notice":"Gets the balance of an address."},"getApproved(uint256)":{"notice":"Gets the approved address for a token."},"isApprovedForAll(address,address)":{"notice":"Gets whether an operator is approved for all tokens by an owner."},"ownerOf(uint256)":{"notice":"Gets the owner of a token."},"safeTransferFrom(address,address,uint256)":{"notice":"Safely transfers the ownership of a token to a recipient."},"safeTransferFrom(address,address,uint256,bytes)":{"notice":"Safely transfers the ownership of a token to a recipient."},"setApprovalForAll(address,bool)":{"notice":"Sets or unsets an approval to transfer all tokens on behalf of their owner."},"transferFrom(address,address,uint256)":{"notice":"Unsafely transfers the ownership of a token to a recipient."}},"version":1}}},"@openzeppelin/contracts/token/ERC20/IERC20.sol":{"IERC20":{"abi":[{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"owner","type":"address"},{"indexed":true,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Approval","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"from","type":"address"},{"indexed":true,"internalType":"address","name":"to","type":"address"},{"indexed":false,"internalType":"uint256","name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"}],"name":"allowance","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"balanceOf","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalSupply","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transfer","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"from","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"transferFrom","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 standard as defined in the EIP.","events":{"Approval(address,address,uint256)":{"details":"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."},"Transfer(address,address,uint256)":{"details":"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."}},"kind":"dev","methods":{"allowance(address,address)":{"details":"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called."},"approve(address,uint256)":{"details":"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event."},"balanceOf(address)":{"details":"Returns the amount of tokens owned by `account`."},"totalSupply()":{"details":"Returns the amount of tokens in existence."},"transfer(address,uint256)":{"details":"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."},"transferFrom(address,address,uint256)":{"details":"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"allowance(address,address)":"dd62ed3e","approve(address,uint256)":"095ea7b3","balanceOf(address)":"70a08231","totalSupply()":"18160ddd","transfer(address,uint256)":"a9059cbb","transferFrom(address,address,uint256)":"23b872dd"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 standard as defined in the EIP.\",\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"Returns the remaining number of tokens that `spender` will be allowed to spend on behalf of `owner` through {transferFrom}. This is zero by default. This value changes when {approve} or {transferFrom} are called.\"},\"approve(address,uint256)\":{\"details\":\"Sets `amount` as the allowance of `spender` over the caller's tokens. Returns a boolean value indicating whether the operation succeeded. IMPORTANT: Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729 Emits an {Approval} event.\"},\"balanceOf(address)\":{\"details\":\"Returns the amount of tokens owned by `account`.\"},\"totalSupply()\":{\"details\":\"Returns the amount of tokens in existence.\"},\"transfer(address,uint256)\":{\"details\":\"Moves `amount` tokens from the caller's account to `to`. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"Moves `amount` tokens from `from` to `to` using the allowance mechanism. `amount` is then deducted from the caller's allowance. Returns a boolean value indicating whether the operation succeeded. Emits a {Transfer} event.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":\"IERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol":{"IERC20Permit":{"abi":[{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"}],"name":"nonces","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"owner","type":"address"},{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"uint256","name":"deadline","type":"uint256"},{"internalType":"uint8","name":"v","type":"uint8"},{"internalType":"bytes32","name":"r","type":"bytes32"},{"internalType":"bytes32","name":"s","type":"bytes32"}],"name":"permit","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.","kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"details":"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}."},"nonces(address)":{"details":"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times."},"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":{"details":"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]."}},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","nonces(address)":"7ecebe00","permit(address,address,uint256,uint256,uint8,bytes32,bytes32)":"d505accf"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in https://eips.ethereum.org/EIPS/eip-2612[EIP-2612]. Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't need to send a transaction, and thus is not required to hold Ether at all.\",\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section].\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":\"IERC20Permit\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol":{"SafeERC20":{"abi":[],"devdoc":{"details":"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.","kind":"dev","methods":{},"title":"SafeERC20","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220eb701b07532c7153be495dd39c7080dc1cd2c7177fa85b5cf6acb42a2714fafa64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB PUSH17 0x1B07532C7153BE495DD39C7080DC1CD2C7 OR PUSH32 0xA85B5CF6ACB42A2714FAFA64736F6C6343000815003300000000000000000000 ","sourceMap":"701:6234:52:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;701:6234:52;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220eb701b07532c7153be495dd39c7080dc1cd2c7177fa85b5cf6acb42a2714fafa64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEB PUSH17 0x1B07532C7153BE495DD39C7080DC1CD2C7 OR PUSH32 0xA85B5CF6ACB42A2714FAFA64736F6C6343000815003300000000000000000000 ","sourceMap":"701:6234:52:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"_callOptionalReturn(contract IERC20,bytes memory)":"infinite","_callOptionalReturnBool(contract IERC20,bytes memory)":"infinite","forceApprove(contract IERC20,address,uint256)":"infinite","safeApprove(contract IERC20,address,uint256)":"infinite","safeDecreaseAllowance(contract IERC20,address,uint256)":"infinite","safeIncreaseAllowance(contract IERC20,address,uint256)":"infinite","safePermit(contract IERC20Permit,address,address,uint256,uint256,uint8,bytes32,bytes32)":"infinite","safeTransfer(contract IERC20,address,uint256)":"infinite","safeTransferFrom(contract IERC20,address,address,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Wrappers around ERC20 operations that throw on failure (when the token contract returns false). Tokens that return no value (and instead revert or throw on failure) are also supported, non-reverting calls are assumed to be successful. To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract, which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"SafeERC20\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":\"SafeERC20\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f5c6eaf6d9fb688d94852b7bd434b9ffe0c21d350800658be86ba20f1064c82d64736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xC6 0xEA 0xF6 0xD9 0xFB PUSH9 0x8D94852B7BD434B9FF 0xE0 0xC2 SAR CALLDATALOAD ADDMOD STOP PUSH6 0x8BE86BA20F10 PUSH5 0xC82D64736F PUSH13 0x63430008150033000000000000 ","sourceMap":"194:9169:53:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:53;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220f5c6eaf6d9fb688d94852b7bd434b9ffe0c21d350800658be86ba20f1064c82d64736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 CREATE2 0xC6 0xEA 0xF6 0xD9 0xFB PUSH9 0x8D94852B7BD434B9FF 0xE0 0xC2 SAR CALLDATALOAD ADDMOD STOP PUSH6 0x8BE86BA20F10 PUSH5 0xC82D64736F PUSH13 0x63430008150033000000000000 ","sourceMap":"194:9169:53:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d8bf8f813c35ea0903c2447db4998a6e0858917a9265ddb2fbc52f2ac608ee9364736f6c63430008150033","opcodes":"PUSH1 0x55 PUSH1 0x32 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH0 BYTE PUSH1 0x73 EQ PUSH1 0x26 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST ADDRESS PUSH0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBF DUP16 DUP2 EXTCODECOPY CALLDATALOAD 0xEA MULMOD SUB 0xC2 PREVRANDAO PUSH30 0xB4998A6E0858917A9265DDB2FBC52F2AC608EE9364736F6C634300081500 CALLER ","sourceMap":"1420:2685:55:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:55;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220d8bf8f813c35ea0903c2447db4998a6e0858917a9265ddb2fbc52f2ac608ee9364736f6c63430008150033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD8 0xBF DUP16 DUP2 EXTCODECOPY CALLDATALOAD 0xEA MULMOD SUB 0xC2 PREVRANDAO PUSH30 0xB4998A6E0858917A9265DDB2FBC52F2AC608EE9364736F6C634300081500 CALLER ","sourceMap":"1420:2685:55:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17000","executionCost":"96","totalCost":"17096"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/mocks/payment/EDUCreditsManagerMock.sol":{"EDUCreditsManagerMock":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"eduToken","type":"address"},{"internalType":"address payable","name":"payoutWallet","type":"address"},{"internalType":"address","name":"unclaimedEDUHolder","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InsufficientCredits","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[{"internalType":"uint256","name":"expectedPhase","type":"uint256"},{"internalType":"uint256","name":"actualPhase","type":"uint256"}],"name":"OnlyDuringPhase","type":"error"},{"inputs":[{"internalType":"uint256","name":"phase","type":"uint256"}],"name":"SettingInvalidPhase","type":"error"},{"inputs":[{"internalType":"uint256","name":"recoverable","type":"uint256"},{"internalType":"uint256","name":"recovering","type":"uint256"}],"name":"UnrecoverableEDU","type":"error"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"UserCreditsAlreadySet","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"inputs":[],"name":"ZeroAddressUser","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"user","type":"address"}],"name":"ZeroSpendAmount","type":"error"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"ZeroValueUnclaimedCredits","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"bonusSpent","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unclaimedSpent","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositedSpent","type":"uint256"}],"name":"CreditsSpent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"users","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"unclaimed","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"bonus","type":"uint256[]"},{"indexed":false,"internalType":"bool[]","name":"diamondHands","type":"bool[]"}],"name":"InitialCreditsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"phase","type":"uint256"}],"name":"PhaseSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEPOSIT_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EDU_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INIT_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SALE_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SPENDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UNCLAIMED_EDU_HOLDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WITHDRAW_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"__msgData","outputs":[{"internalType":"bytes","name":"","type":"bytes"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentPhase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"uint256[]","name":"unclaimedCredits","type":"uint256[]"},{"internalType":"uint256[]","name":"bonusCredits","type":"uint256[]"},{"internalType":"bool[]","name":"diamondHands","type":"bool[]"}],"name":"setInitialCredits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"phase","type":"uint256"}],"name":"setPhase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"spend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalCredits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDeposited","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userCredits","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"},{"internalType":"uint256","name":"bonus","type":"uint256"},{"internalType":"uint256","name":"deposited","type":"uint256"},{"internalType":"bool","name":"diamondHand","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"InsufficientCredits(address,address,uint256)":[{"params":{"amount":"the amount of credits to spend.","spender":"the spender of the credits.","user":"the user whose credits are spent."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"OnlyDuringPhase(uint256,uint256)":[{"params":{"actualPhase":"the actual phase.","expectedPhase":"the expected phase."}}],"SettingInvalidPhase(uint256)":[{"params":{"phase":"the invalid phase."}}],"UserCreditsAlreadySet(address)":[{"params":{"user":"the user whose credits are set."}}],"ZeroSpendAmount(address,address)":[{"params":{"spender":"the spender of the credits.","user":"the user whose credits are spent."}}],"ZeroValueUnclaimedCredits(address)":[{"params":{"user":"the user whose credits are set."}}]},"events":{"CreditsSpent(address,address,uint256,uint256,uint256)":{"params":{"bonusSpent":"the amount of bonus credits spent.","depositedSpent":"the amount of deposited credits spent.","spender":"the spender of the credits.","unclaimedSpent":"the amount of unclaimed credits spent.","user":"the user whose credits are spent."}},"InitialCreditsSet(address[],uint256[],uint256[],bool[])":{"params":{"bonus":"the bonus EDU credits.","diamondHands":"whether the users are a diamond hand.","unclaimed":"the unclaimed EDU credits.","users":"the users whose credits are set."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}},"PhaseSet(uint256)":{"params":{"phase":"the phase set."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC20Received(address,address,uint256,bytes)":{"details":"Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"setInitialCredits(address[],uint256[],uint256[],bool[])":{"details":"Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.Reverts with {OnlyDuringPhase} if the current phase is not the init phase.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressUser} if one of `users` is the zero address.Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.Emits a {InitialCreditsSet} event.","params":{"bonusCredits":"the bonus EDU credits.","diamondHands":"whether the users are a diamond hand.","unclaimedCredits":"the unclaimed EDU credits.","users":"the users whose credits are set."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}},"setPhase(uint256)":{"details":"Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PhaseSet} event.","params":{"phase":"the phase to set."}},"spend(address,uint256)":{"details":"Reverts with {ZeroSpendAmount} if `amount` is zero.Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.Reverts with {NotRoleHolder} if the sender is not a spender.Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.Emits a {EDUSpent} event.","params":{"amount":"the amount of EDU tokens to spend.","user":"the user whose EDU tokens are spent."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw()":{"details":"Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase."}},"version":1},"evm":{"bytecode":{"functionDebugData":{"@_1004":{"entryPoint":null,"id":1004,"parameterSlots":1,"returnSlots":0},"@_1051":{"entryPoint":null,"id":1051,"parameterSlots":1,"returnSlots":0},"@_1237":{"entryPoint":null,"id":1237,"parameterSlots":1,"returnSlots":0},"@_1788":{"entryPoint":null,"id":1788,"parameterSlots":0,"returnSlots":0},"@_4753":{"entryPoint":null,"id":4753,"parameterSlots":4,"returnSlots":0},"@_4983":{"entryPoint":null,"id":4983,"parameterSlots":4,"returnSlots":0},"@_51":{"entryPoint":null,"id":51,"parameterSlots":1,"returnSlots":0},"@constructorInit_1384":{"entryPoint":445,"id":1384,"parameterSlots":2,"returnSlots":0},"@constructorInit_682":{"entryPoint":284,"id":682,"parameterSlots":2,"returnSlots":0},"@layout_1464":{"entryPoint":398,"id":1464,"parameterSlots":0,"returnSlots":1},"@layout_832":{"entryPoint":231,"id":832,"parameterSlots":0,"returnSlots":1},"@layout_980":{"entryPoint":457,"id":980,"parameterSlots":0,"returnSlots":1},"@setPayoutWallet_1439":{"entryPoint":596,"id":1439,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_934":{"entryPoint":504,"id":934,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory":{"entryPoint":742,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":843,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":718,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1524:58","nodeType":"YulBlock","src":"0:1524:58","statements":[{"nativeSrc":"6:3:58","nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nativeSrc":"67:86:58","nodeType":"YulBlock","src":"67:86:58","statements":[{"body":{"nativeSrc":"131:16:58","nodeType":"YulBlock","src":"131:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:58","nodeType":"YulLiteral","src":"140:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:58","nodeType":"YulLiteral","src":"143:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:58","nodeType":"YulIdentifier","src":"133:6:58"},"nativeSrc":"133:12:58","nodeType":"YulFunctionCall","src":"133:12:58"},"nativeSrc":"133:12:58","nodeType":"YulExpressionStatement","src":"133:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:58","nodeType":"YulIdentifier","src":"90:5:58"},{"arguments":[{"name":"value","nativeSrc":"101:5:58","nodeType":"YulIdentifier","src":"101:5:58"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:58","nodeType":"YulLiteral","src":"116:3:58","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:58","nodeType":"YulLiteral","src":"121:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:58","nodeType":"YulIdentifier","src":"112:3:58"},"nativeSrc":"112:11:58","nodeType":"YulFunctionCall","src":"112:11:58"},{"kind":"number","nativeSrc":"125:1:58","nodeType":"YulLiteral","src":"125:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:58","nodeType":"YulIdentifier","src":"108:3:58"},"nativeSrc":"108:19:58","nodeType":"YulFunctionCall","src":"108:19:58"}],"functionName":{"name":"and","nativeSrc":"97:3:58","nodeType":"YulIdentifier","src":"97:3:58"},"nativeSrc":"97:31:58","nodeType":"YulFunctionCall","src":"97:31:58"}],"functionName":{"name":"eq","nativeSrc":"87:2:58","nodeType":"YulIdentifier","src":"87:2:58"},"nativeSrc":"87:42:58","nodeType":"YulFunctionCall","src":"87:42:58"}],"functionName":{"name":"iszero","nativeSrc":"80:6:58","nodeType":"YulIdentifier","src":"80:6:58"},"nativeSrc":"80:50:58","nodeType":"YulFunctionCall","src":"80:50:58"},"nativeSrc":"77:70:58","nodeType":"YulIf","src":"77:70:58"}]},"name":"validator_revert_contract_IERC20","nativeSrc":"14:139:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:58","nodeType":"YulTypedName","src":"56:5:58","type":""}],"src":"14:139:58"},{"body":{"nativeSrc":"340:554:58","nodeType":"YulBlock","src":"340:554:58","statements":[{"body":{"nativeSrc":"387:16:58","nodeType":"YulBlock","src":"387:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"396:1:58","nodeType":"YulLiteral","src":"396:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"399:1:58","nodeType":"YulLiteral","src":"399:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"389:6:58","nodeType":"YulIdentifier","src":"389:6:58"},"nativeSrc":"389:12:58","nodeType":"YulFunctionCall","src":"389:12:58"},"nativeSrc":"389:12:58","nodeType":"YulExpressionStatement","src":"389:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"361:7:58","nodeType":"YulIdentifier","src":"361:7:58"},{"name":"headStart","nativeSrc":"370:9:58","nodeType":"YulIdentifier","src":"370:9:58"}],"functionName":{"name":"sub","nativeSrc":"357:3:58","nodeType":"YulIdentifier","src":"357:3:58"},"nativeSrc":"357:23:58","nodeType":"YulFunctionCall","src":"357:23:58"},{"kind":"number","nativeSrc":"382:3:58","nodeType":"YulLiteral","src":"382:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"353:3:58","nodeType":"YulIdentifier","src":"353:3:58"},"nativeSrc":"353:33:58","nodeType":"YulFunctionCall","src":"353:33:58"},"nativeSrc":"350:53:58","nodeType":"YulIf","src":"350:53:58"},{"nativeSrc":"412:29:58","nodeType":"YulVariableDeclaration","src":"412:29:58","value":{"arguments":[{"name":"headStart","nativeSrc":"431:9:58","nodeType":"YulIdentifier","src":"431:9:58"}],"functionName":{"name":"mload","nativeSrc":"425:5:58","nodeType":"YulIdentifier","src":"425:5:58"},"nativeSrc":"425:16:58","nodeType":"YulFunctionCall","src":"425:16:58"},"variables":[{"name":"value","nativeSrc":"416:5:58","nodeType":"YulTypedName","src":"416:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"483:5:58","nodeType":"YulIdentifier","src":"483:5:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"450:32:58","nodeType":"YulIdentifier","src":"450:32:58"},"nativeSrc":"450:39:58","nodeType":"YulFunctionCall","src":"450:39:58"},"nativeSrc":"450:39:58","nodeType":"YulExpressionStatement","src":"450:39:58"},{"nativeSrc":"498:15:58","nodeType":"YulAssignment","src":"498:15:58","value":{"name":"value","nativeSrc":"508:5:58","nodeType":"YulIdentifier","src":"508:5:58"},"variableNames":[{"name":"value0","nativeSrc":"498:6:58","nodeType":"YulIdentifier","src":"498:6:58"}]},{"nativeSrc":"522:40:58","nodeType":"YulVariableDeclaration","src":"522:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"547:9:58","nodeType":"YulIdentifier","src":"547:9:58"},{"kind":"number","nativeSrc":"558:2:58","nodeType":"YulLiteral","src":"558:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"543:3:58","nodeType":"YulIdentifier","src":"543:3:58"},"nativeSrc":"543:18:58","nodeType":"YulFunctionCall","src":"543:18:58"}],"functionName":{"name":"mload","nativeSrc":"537:5:58","nodeType":"YulIdentifier","src":"537:5:58"},"nativeSrc":"537:25:58","nodeType":"YulFunctionCall","src":"537:25:58"},"variables":[{"name":"value_1","nativeSrc":"526:7:58","nodeType":"YulTypedName","src":"526:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"604:7:58","nodeType":"YulIdentifier","src":"604:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"571:32:58","nodeType":"YulIdentifier","src":"571:32:58"},"nativeSrc":"571:41:58","nodeType":"YulFunctionCall","src":"571:41:58"},"nativeSrc":"571:41:58","nodeType":"YulExpressionStatement","src":"571:41:58"},{"nativeSrc":"621:17:58","nodeType":"YulAssignment","src":"621:17:58","value":{"name":"value_1","nativeSrc":"631:7:58","nodeType":"YulIdentifier","src":"631:7:58"},"variableNames":[{"name":"value1","nativeSrc":"621:6:58","nodeType":"YulIdentifier","src":"621:6:58"}]},{"nativeSrc":"647:40:58","nodeType":"YulVariableDeclaration","src":"647:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"672:9:58","nodeType":"YulIdentifier","src":"672:9:58"},{"kind":"number","nativeSrc":"683:2:58","nodeType":"YulLiteral","src":"683:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"668:3:58","nodeType":"YulIdentifier","src":"668:3:58"},"nativeSrc":"668:18:58","nodeType":"YulFunctionCall","src":"668:18:58"}],"functionName":{"name":"mload","nativeSrc":"662:5:58","nodeType":"YulIdentifier","src":"662:5:58"},"nativeSrc":"662:25:58","nodeType":"YulFunctionCall","src":"662:25:58"},"variables":[{"name":"value_2","nativeSrc":"651:7:58","nodeType":"YulTypedName","src":"651:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"729:7:58","nodeType":"YulIdentifier","src":"729:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"696:32:58","nodeType":"YulIdentifier","src":"696:32:58"},"nativeSrc":"696:41:58","nodeType":"YulFunctionCall","src":"696:41:58"},"nativeSrc":"696:41:58","nodeType":"YulExpressionStatement","src":"696:41:58"},{"nativeSrc":"746:17:58","nodeType":"YulAssignment","src":"746:17:58","value":{"name":"value_2","nativeSrc":"756:7:58","nodeType":"YulIdentifier","src":"756:7:58"},"variableNames":[{"name":"value2","nativeSrc":"746:6:58","nodeType":"YulIdentifier","src":"746:6:58"}]},{"nativeSrc":"772:40:58","nodeType":"YulVariableDeclaration","src":"772:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"797:9:58","nodeType":"YulIdentifier","src":"797:9:58"},{"kind":"number","nativeSrc":"808:2:58","nodeType":"YulLiteral","src":"808:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"793:3:58","nodeType":"YulIdentifier","src":"793:3:58"},"nativeSrc":"793:18:58","nodeType":"YulFunctionCall","src":"793:18:58"}],"functionName":{"name":"mload","nativeSrc":"787:5:58","nodeType":"YulIdentifier","src":"787:5:58"},"nativeSrc":"787:25:58","nodeType":"YulFunctionCall","src":"787:25:58"},"variables":[{"name":"value_3","nativeSrc":"776:7:58","nodeType":"YulTypedName","src":"776:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"854:7:58","nodeType":"YulIdentifier","src":"854:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"821:32:58","nodeType":"YulIdentifier","src":"821:32:58"},"nativeSrc":"821:41:58","nodeType":"YulFunctionCall","src":"821:41:58"},"nativeSrc":"821:41:58","nodeType":"YulExpressionStatement","src":"821:41:58"},{"nativeSrc":"871:17:58","nodeType":"YulAssignment","src":"871:17:58","value":{"name":"value_3","nativeSrc":"881:7:58","nodeType":"YulIdentifier","src":"881:7:58"},"variableNames":[{"name":"value3","nativeSrc":"871:6:58","nodeType":"YulIdentifier","src":"871:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory","nativeSrc":"158:736:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"282:9:58","nodeType":"YulTypedName","src":"282:9:58","type":""},{"name":"dataEnd","nativeSrc":"293:7:58","nodeType":"YulTypedName","src":"293:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"305:6:58","nodeType":"YulTypedName","src":"305:6:58","type":""},{"name":"value1","nativeSrc":"313:6:58","nodeType":"YulTypedName","src":"313:6:58","type":""},{"name":"value2","nativeSrc":"321:6:58","nodeType":"YulTypedName","src":"321:6:58","type":""},{"name":"value3","nativeSrc":"329:6:58","nodeType":"YulTypedName","src":"329:6:58","type":""}],"src":"158:736:58"},{"body":{"nativeSrc":"1000:76:58","nodeType":"YulBlock","src":"1000:76:58","statements":[{"nativeSrc":"1010:26:58","nodeType":"YulAssignment","src":"1010:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1022:9:58","nodeType":"YulIdentifier","src":"1022:9:58"},{"kind":"number","nativeSrc":"1033:2:58","nodeType":"YulLiteral","src":"1033:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1018:3:58","nodeType":"YulIdentifier","src":"1018:3:58"},"nativeSrc":"1018:18:58","nodeType":"YulFunctionCall","src":"1018:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1010:4:58","nodeType":"YulIdentifier","src":"1010:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1052:9:58","nodeType":"YulIdentifier","src":"1052:9:58"},{"name":"value0","nativeSrc":"1063:6:58","nodeType":"YulIdentifier","src":"1063:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1045:6:58","nodeType":"YulIdentifier","src":"1045:6:58"},"nativeSrc":"1045:25:58","nodeType":"YulFunctionCall","src":"1045:25:58"},"nativeSrc":"1045:25:58","nodeType":"YulExpressionStatement","src":"1045:25:58"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"899:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"969:9:58","nodeType":"YulTypedName","src":"969:9:58","type":""},{"name":"value0","nativeSrc":"980:6:58","nodeType":"YulTypedName","src":"980:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"991:4:58","nodeType":"YulTypedName","src":"991:4:58","type":""}],"src":"899:177:58"},{"body":{"nativeSrc":"1130:176:58","nodeType":"YulBlock","src":"1130:176:58","statements":[{"nativeSrc":"1140:17:58","nodeType":"YulAssignment","src":"1140:17:58","value":{"arguments":[{"name":"x","nativeSrc":"1152:1:58","nodeType":"YulIdentifier","src":"1152:1:58"},{"name":"y","nativeSrc":"1155:1:58","nodeType":"YulIdentifier","src":"1155:1:58"}],"functionName":{"name":"sub","nativeSrc":"1148:3:58","nodeType":"YulIdentifier","src":"1148:3:58"},"nativeSrc":"1148:9:58","nodeType":"YulFunctionCall","src":"1148:9:58"},"variableNames":[{"name":"diff","nativeSrc":"1140:4:58","nodeType":"YulIdentifier","src":"1140:4:58"}]},{"body":{"nativeSrc":"1189:111:58","nodeType":"YulBlock","src":"1189:111:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1210:1:58","nodeType":"YulLiteral","src":"1210:1:58","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1217:3:58","nodeType":"YulLiteral","src":"1217:3:58","type":"","value":"224"},{"kind":"number","nativeSrc":"1222:10:58","nodeType":"YulLiteral","src":"1222:10:58","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1213:3:58","nodeType":"YulIdentifier","src":"1213:3:58"},"nativeSrc":"1213:20:58","nodeType":"YulFunctionCall","src":"1213:20:58"}],"functionName":{"name":"mstore","nativeSrc":"1203:6:58","nodeType":"YulIdentifier","src":"1203:6:58"},"nativeSrc":"1203:31:58","nodeType":"YulFunctionCall","src":"1203:31:58"},"nativeSrc":"1203:31:58","nodeType":"YulExpressionStatement","src":"1203:31:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1254:1:58","nodeType":"YulLiteral","src":"1254:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"1257:4:58","nodeType":"YulLiteral","src":"1257:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1247:6:58","nodeType":"YulIdentifier","src":"1247:6:58"},"nativeSrc":"1247:15:58","nodeType":"YulFunctionCall","src":"1247:15:58"},"nativeSrc":"1247:15:58","nodeType":"YulExpressionStatement","src":"1247:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1282:1:58","nodeType":"YulLiteral","src":"1282:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1285:4:58","nodeType":"YulLiteral","src":"1285:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1275:6:58","nodeType":"YulIdentifier","src":"1275:6:58"},"nativeSrc":"1275:15:58","nodeType":"YulFunctionCall","src":"1275:15:58"},"nativeSrc":"1275:15:58","nodeType":"YulExpressionStatement","src":"1275:15:58"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1172:4:58","nodeType":"YulIdentifier","src":"1172:4:58"},{"name":"x","nativeSrc":"1178:1:58","nodeType":"YulIdentifier","src":"1178:1:58"}],"functionName":{"name":"gt","nativeSrc":"1169:2:58","nodeType":"YulIdentifier","src":"1169:2:58"},"nativeSrc":"1169:11:58","nodeType":"YulFunctionCall","src":"1169:11:58"},"nativeSrc":"1166:134:58","nodeType":"YulIf","src":"1166:134:58"}]},"name":"checked_sub_t_uint256","nativeSrc":"1081:225:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1112:1:58","nodeType":"YulTypedName","src":"1112:1:58","type":""},{"name":"y","nativeSrc":"1115:1:58","nodeType":"YulTypedName","src":"1115:1:58","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1121:4:58","nodeType":"YulTypedName","src":"1121:4:58","type":""}],"src":"1081:225:58"},{"body":{"nativeSrc":"1420:102:58","nodeType":"YulBlock","src":"1420:102:58","statements":[{"nativeSrc":"1430:26:58","nodeType":"YulAssignment","src":"1430:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1442:9:58","nodeType":"YulIdentifier","src":"1442:9:58"},{"kind":"number","nativeSrc":"1453:2:58","nodeType":"YulLiteral","src":"1453:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1438:3:58","nodeType":"YulIdentifier","src":"1438:3:58"},"nativeSrc":"1438:18:58","nodeType":"YulFunctionCall","src":"1438:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1430:4:58","nodeType":"YulIdentifier","src":"1430:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1472:9:58","nodeType":"YulIdentifier","src":"1472:9:58"},{"arguments":[{"name":"value0","nativeSrc":"1487:6:58","nodeType":"YulIdentifier","src":"1487:6:58"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1503:3:58","nodeType":"YulLiteral","src":"1503:3:58","type":"","value":"160"},{"kind":"number","nativeSrc":"1508:1:58","nodeType":"YulLiteral","src":"1508:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1499:3:58","nodeType":"YulIdentifier","src":"1499:3:58"},"nativeSrc":"1499:11:58","nodeType":"YulFunctionCall","src":"1499:11:58"},{"kind":"number","nativeSrc":"1512:1:58","nodeType":"YulLiteral","src":"1512:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1495:3:58","nodeType":"YulIdentifier","src":"1495:3:58"},"nativeSrc":"1495:19:58","nodeType":"YulFunctionCall","src":"1495:19:58"}],"functionName":{"name":"and","nativeSrc":"1483:3:58","nodeType":"YulIdentifier","src":"1483:3:58"},"nativeSrc":"1483:32:58","nodeType":"YulFunctionCall","src":"1483:32:58"}],"functionName":{"name":"mstore","nativeSrc":"1465:6:58","nodeType":"YulIdentifier","src":"1465:6:58"},"nativeSrc":"1465:51:58","nodeType":"YulFunctionCall","src":"1465:51:58"},"nativeSrc":"1465:51:58","nodeType":"YulExpressionStatement","src":"1465:51:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"1311:211:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1389:9:58","nodeType":"YulTypedName","src":"1389:9:58","type":""},{"name":"value0","nativeSrc":"1400:6:58","nodeType":"YulTypedName","src":"1400:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1411:4:58","nodeType":"YulTypedName","src":"1411:4:58","type":""}],"src":"1311:211:58"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20(value_2)\n        value2 := value_2\n        let value_3 := mload(add(headStart, 96))\n        validator_revert_contract_IERC20(value_3)\n        value3 := value_3\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040525f805534801562000013575f80fd5b5060405162002f9d38038062002f9d8339810160408190526200003691620002e6565b838383838080843362000054816200004d620000e7565b906200011c565b506200006b81620000646200018e565b90620001bd565b506200008c634fc3585960e01b600162000084620001c9565b9190620001f8565b6001600160a01b0390811660805285811660a052831660c052506040515f81527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a150505050505050506200036b565b5f806200011660017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200034b565b92915050565b6001600160a01b03811615620001725781546001600160a01b0319166001600160a01b03821690811783556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200018a6307f5828d60e41b600162000084620001c9565b5050565b5f806200011660017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae6200034b565b6200018a828262000254565b5f806200011660017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200034b565b600160e01b6001600160e01b031983160162000227576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b0319919091165f9081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b0381166200027c576040516340b539cf60e01b815260040160405180910390fd5b81546001600160a01b0319166001600160a01b03821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b6001600160a01b0381168114620002e3575f80fd5b50565b5f805f8060808587031215620002fa575f80fd5b84516200030781620002ce565b60208601519094506200031a81620002ce565b60408601519093506200032d81620002ce565b60608601519092506200034081620002ce565b939692955090935050565b818103818111156200011657634e487b7160e01b5f52601160045260245ffd5b60805160a05160c051612bba620003e35f395f818161035601526106cd01525f81816103ca01528181610704015281816107e601528181610cb001528181610d3201526111e601525f81816102820152818161038801528181611ead01528181611f3501528181611fe401526120220152612bba5ff3fe608060405234801561000f575f80fd5b50600436106101dc575f3560e01c806372c16a2411610109578063ad6b333b1161009e578063d547741f1161006e578063d547741f146104c8578063f2fde38b146104db578063f7ba94bd146104ee578063ff50abdc14610501575f80fd5b8063ad6b333b14610491578063af7d6ca314610499578063b5bd3eb9146104ac578063c3666c36146104b5575f80fd5b80638bb9c5bf116100d95780638bb9c5bf1461045c5780638da5cb5b1461046f5780638de17b741461047757806391d148541461047e575f80fd5b806372c16a241461041257806373c8a958146104395780638488bb4e1461044c5780638b785d4914610454575f80fd5b806331e66e1e1161017f578063572b6c051161014f578063572b6c05146103785780635df2dcbc146103c5578063687f34e0146103ec5780636b8f9c43146103ff575f80fd5b806331e66e1e146102ef5780633ccfd60b146103055780634fc358591461030d5780635188730214610351575f80fd5b806320babb92116101ba57806320babb92146102265780632b4c9f16146102805780632cc82655146102c75780632f2ff15d146102dc575f80fd5b806301ffc9a7146101e0578063055ad42e14610208578063148c2b5a1461021e575b5f80fd5b6101f36101ee3660046124e7565b61050a565b60405190151581526020015b60405180910390f35b6102105f5481565b6040519081526020016101ff565b610210600281565b61025e610234366004612547565b600160208190525f9182526040909120805491810154600282015460039092015490919060ff1684565b60408051948552602085019390935291830152151560608201526080016101ff565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b6102da6102d5366004612562565b610523565b005b6102da6102ea366004612579565b6105ba565b6102f76105ec565b6040516101ff9291906125a7565b6102da6105fe565b61032061031b3660046125f3565b610858565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101ff565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6101f3610386366004612547565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6102da6103fa3660046126d2565b61093b565b6102da61040d366004612547565b610c47565b6102107f7370656e6465720000000000000000000000000000000000000000000000000081565b6102da61044736600461278d565b610c67565b6102a2610e3f565b610210600381565b6102da61046a366004612562565b610e6a565b6102a2610e85565b6102105f81565b6101f361048c366004612579565b610e91565b610210600181565b6102da6104a7366004612820565b610eda565b61021060025481565b6102da6104c336600461278d565b61130d565b6102da6104d6366004612579565b61147e565b6102da6104e9366004612547565b6114ab565b6102da6104fc36600461284a565b6114c6565b61021060035481565b5f61051d82610517611583565b906115b0565b92915050565b61053c61052e611687565b610536611690565b906116bd565b600381111561057f576040517f96666719000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b5f819055604051600181527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a150565b5f6105c3611687565b90506105d181610536611690565b6105e78383836105df61172c565b929190611759565b505050565b365f6105f661182d565b915091509091565b60035f5414610646575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600360048201526024810191909152604401610576565b5f61064f611687565b90505f60015f61065d611687565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040015f2080549091508015610770575f82556040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528481166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303815f875af115801561074a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076e91906128be565b505b60028201548015610852575f83600201819055508060035f8282546107959190612906565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561082c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085091906128be565b505b50505050565b5f60015f54146108a1575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600160048201526024810191909152604401610576565b73ffffffffffffffffffffffffffffffffffffffff85165f908152600160205260408120600281018054919287926108da908490612919565b925050819055508460035f8282546108f29190612919565b925050819055508460025f82825461090a9190612919565b909155507f4fc358590000000000000000000000000000000000000000000000000000000098975050505050505050565b86858114158061094b5750808414155b806109565750808214155b1561098d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f54156109d2575f80546040517f7c9bb66300000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610576565b6109dd61052e611687565b5f5b818114610bf6575f8a8a838181106109f9576109f961292c565b9050602002016020810190610a0e9190612547565b905073ffffffffffffffffffffffffffffffffffffffff8116610a5d576040517f9c89d57f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f898984818110610a7057610a7061292c565b905060200201359050805f03610aca576040517fd49c192700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610576565b73ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020805415610b3f576040517f6dbaa9b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610576565b5f898986818110610b5257610b5261292c565b85855560200291909101356001840181905591508890508786818110610b7a57610b7a61292c565b9050602002016020810190610b8f9190612959565b6003830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610bca8184612919565b60025f828254610bda9190612919565b925050819055505050505080610bef90612974565b90506109df565b507f44fbb8621bc7a734e344e0d7f6b84824cf97e0d8d611f9f8502e42ff0b1dee438989898989898989604051610c349897969594939291906129f4565b60405180910390a1505050505050505050565b610c5261052e611687565b610c6481610c5e611837565b90611864565b50565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cf5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d199190612ab9565b610d239190612906565b90505f805b85811015610de2577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16878783818110610d7957610d7961292c565b9050602002016020810190610d8e9190612547565b73ffffffffffffffffffffffffffffffffffffffff1603610dd057848482818110610dbb57610dbb61292c565b9050602002013582610dcd9190612919565b91505b80610dda81612974565b915050610d28565b5081811115610e27576040517f7ce4d19d0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610576565b610e35888888888888611928565b5050505050505050565b5f610e65610e4b611837565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610c64610e75611687565b82610e7e61172c565b9190611a12565b5f610e65610e4b611690565b5f610ed38383610e9f61172c565b5f9283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b5f610ee3611687565b9050815f03610f3e576040517f09bc7f2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015284166024820152604401610576565b60025f5414610f86575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600260048201526024810191909152604401610576565b610fba7f7370656e6465720000000000000000000000000000000000000000000000000082610fb361172c565b9190611ab5565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160208190526040822090810154909190801561108f578481106110795784836001015f8282546110079190612906565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff8087168252881660208201529081018690525f6060820181905260808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a1505050505050565b5f60018401556110898186612906565b94508091505b82545f908015611139578681106111265786855f015f8282546110b29190612906565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff80891682528a166020820152908101859052606081018890525f60808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a15050505050505050565b5f85556111338188612906565b96508091505b60028501548781101561119f576040517f1734392500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80891660048301528a16602482015260448101899052606401610576565b87866002015f8282546111b29190612906565b925050819055508760035f8282546111ca9190612906565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb611216610e4b611837565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018b90526044016020604051808303815f875af1158015611285573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a991906128be565b506040805173ffffffffffffffffffffffffffffffffffffffff808a1682528b16602082015290810186905260608101849052608081018990527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a001610c34565b61131861052e611687565b8483811415806113285750808214155b1561135f576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e355785858281811061137a5761137a61292c565b905060200201602081019061138f9190612547565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106113bd576113bd61292c565b90506020020160208101906113d29190612547565b8787868181106113e4576113e461292c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561145d575f80fd5b505af115801561146f573d5f803e3d5ffd5b50505050806001019050611361565b5f611487611687565b905061149581610536611690565b6105e78383836114a361172c565b929190611b3a565b610c646114b6611687565b826114bf611690565b9190611c02565b6114d161052e611687565b8281811461150b576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461157b576115738484838181106115295761152961292c565b905060200201358787848181106115425761154261292c565b90506020020160208101906115579190612547565b73ffffffffffffffffffffffffffffffffffffffff1690611d15565b60010161150d565b505050505050565b5f8061051d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e612906565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016115fe57505f61051d565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161164f5750600161051d565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610e65611e6b565b5f8061051d60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd612906565b815473ffffffffffffffffffffffffffffffffffffffff828116911614611728576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610576565b5050565b5f8061051d60017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23612906565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16610852575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b365f6105f6611faf565b5f8061051d60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae612906565b73ffffffffffffffffffffffffffffffffffffffff81166118b1576040517f40b539cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b61193361052e611687565b8483811415806119435750808214155b1561197a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e3557611a0a8888838181106119985761199861292c565b90506020020160208101906119ad9190612547565b8585848181106119bf576119bf61292c565b905060200201358888858181106119d8576119d861292c565b90506020020160208101906119ed9190612547565b73ffffffffffffffffffffffffffffffffffffffff169190612114565b60010161197c565b611a1d838284611ab5565b5f8181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b5f8281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166105e7576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610576565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1615610852575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600161181f565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c6f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610576565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108525783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350505050565b80471015611d7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610576565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611dd5576040519150601f19603f3d011682016040523d82523d5f602084013e611dda565b606091505b50509050806105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610576565b5f33321480611e7a5750601836105b15611e8457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611f9e57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f7a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f9e91906128be565b15611fa857919050565b3391505090565b365f33321480611fbf5750601836105b15611fcc57505f91369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806120ff575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156120db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120ff91906128be565b1561210c576105f66121a1565b505f91369150565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105e79084906121d1565b365f6105f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481612ad0565b5f612232826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122de9092919063ffffffff16565b905080515f148061225257508080602001905181019061225291906128be565b6105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610576565b60606122ec84845f856122f4565b949350505050565b606082471015612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610576565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516123ae9190612b19565b5f6040518083038185875af1925050503d805f81146123e8576040519150601f19603f3d011682016040523d82523d5f602084013e6123ed565b606091505b50915091506123fe87838387612409565b979650505050505050565b6060831561249e5782515f036124975773ffffffffffffffffffffffffffffffffffffffff85163b612497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b50816122ec565b6122ec83838151156124b35781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105769190612b34565b5f602082840312156124f7575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ed3575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c64575f80fd5b5f60208284031215612557575f80fd5b8135610ed381612526565b5f60208284031215612572575f80fd5b5035919050565b5f806040838503121561258a575f80fd5b82359150602083013561259c81612526565b809150509250929050565b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b5f805f805f60808688031215612607575f80fd5b853561261281612526565b9450602086013561262281612526565b935060408601359250606086013567ffffffffffffffff80821115612645575f80fd5b818801915088601f830112612658575f80fd5b813581811115612666575f80fd5b896020828501011115612677575f80fd5b9699959850939650602001949392505050565b5f8083601f84011261269a575f80fd5b50813567ffffffffffffffff8111156126b1575f80fd5b6020830191508360208260051b85010111156126cb575f80fd5b9250929050565b5f805f805f805f806080898b0312156126e9575f80fd5b883567ffffffffffffffff80821115612700575f80fd5b61270c8c838d0161268a565b909a50985060208b0135915080821115612724575f80fd5b6127308c838d0161268a565b909850965060408b0135915080821115612748575f80fd5b6127548c838d0161268a565b909650945060608b013591508082111561276c575f80fd5b506127798b828c0161268a565b999c989b5096995094979396929594505050565b5f805f805f80606087890312156127a2575f80fd5b863567ffffffffffffffff808211156127b9575f80fd5b6127c58a838b0161268a565b909850965060208901359150808211156127dd575f80fd5b6127e98a838b0161268a565b90965094506040890135915080821115612801575f80fd5b5061280e89828a0161268a565b979a9699509497509295939492505050565b5f8060408385031215612831575f80fd5b823561283c81612526565b946020939093013593505050565b5f805f806040858703121561285d575f80fd5b843567ffffffffffffffff80821115612874575f80fd5b6128808883890161268a565b90965094506020870135915080821115612898575f80fd5b506128a58782880161268a565b95989497509550505050565b8015158114610c64575f80fd5b5f602082840312156128ce575f80fd5b8151610ed3816128b1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561051d5761051d6128d9565b8082018082111561051d5761051d6128d9565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612969575f80fd5b8135610ed3816128b1565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129a4576129a46128d9565b5060010190565b8183525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129db575f80fd5b8260051b80836020870137939093016020019392505050565b608080825281018890525f8960a08301825b8b811015612a43578235612a1981612526565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101612a06565b506020915083810382850152612a5a818a8c6129ab565b90508381036040850152612a6f81888a6129ab565b848103606086015285815286915082015f5b86811015612aa8578235612a94816128b1565b151582529183019190830190600101612a81565b509c9b505050505050505050505050565b5f60208284031215612ac9575f80fd5b5051919050565b5f8085851115612ade575f80fd5b83861115612aea575f80fd5b5050820193919092039150565b5f5b83811015612b11578181015183820152602001612af9565b50505f910152565b5f8251612b2a818460208701612af7565b9190910192915050565b602081525f8251806020840152612b52816040850160208701612af7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212200a153026d6329e9320e87981377a1febfce47f160facb235e19385eafcb98cd864736f6c63430008150033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE PUSH0 DUP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2F9D CODESIZE SUB DUP1 PUSH3 0x2F9D DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x36 SWAP2 PUSH3 0x2E6 JUMP JUMPDEST DUP4 DUP4 DUP4 DUP4 DUP1 DUP1 DUP5 CALLER PUSH3 0x54 DUP2 PUSH3 0x4D PUSH3 0xE7 JUMP JUMPDEST SWAP1 PUSH3 0x11C JUMP JUMPDEST POP PUSH3 0x6B DUP2 PUSH3 0x64 PUSH3 0x18E JUMP JUMPDEST SWAP1 PUSH3 0x1BD JUMP JUMPDEST POP PUSH3 0x8C PUSH4 0x4FC35859 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x84 PUSH3 0x1C9 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1F8 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP6 DUP2 AND PUSH1 0xA0 MSTORE DUP4 AND PUSH1 0xC0 MSTORE POP PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP PUSH3 0x36B JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x116 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x34B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x172 JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x18A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x84 PUSH3 0x1C9 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x116 PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH3 0x34B JUMP JUMPDEST PUSH3 0x18A DUP3 DUP3 PUSH3 0x254 JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x116 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x34B JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x227 JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x27C JUMPI PUSH1 0x40 MLOAD PUSH4 0x40B539CF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2E3 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x2FA JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x307 DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x31A DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x32D DUP2 PUSH3 0x2CE JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x340 DUP2 PUSH3 0x2CE JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x116 JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x2BBA PUSH3 0x3E3 PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x356 ADD MSTORE PUSH2 0x6CD ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x3CA ADD MSTORE DUP2 DUP2 PUSH2 0x704 ADD MSTORE DUP2 DUP2 PUSH2 0x7E6 ADD MSTORE DUP2 DUP2 PUSH2 0xCB0 ADD MSTORE DUP2 DUP2 PUSH2 0xD32 ADD MSTORE PUSH2 0x11E6 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x282 ADD MSTORE DUP2 DUP2 PUSH2 0x388 ADD MSTORE DUP2 DUP2 PUSH2 0x1EAD ADD MSTORE DUP2 DUP2 PUSH2 0x1F35 ADD MSTORE DUP2 DUP2 PUSH2 0x1FE4 ADD MSTORE PUSH2 0x2022 ADD MSTORE PUSH2 0x2BBA PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1DC JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x72C16A24 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0xAD6B333B GT PUSH2 0x9E JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xFF50ABDC EQ PUSH2 0x501 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD6B333B EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xAF7D6CA3 EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xB5BD3EB9 EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x4B5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x8DE17B74 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x47E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x72C16A24 EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x8B785D49 EQ PUSH2 0x454 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x572B6C05 GT PUSH2 0x14F JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x5DF2DCBC EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x687F34E0 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x3FF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x51887302 EQ PUSH2 0x351 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x20BABB92 GT PUSH2 0x1BA JUMPI DUP1 PUSH4 0x20BABB92 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x2CC82655 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x55AD42E EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x148C2B5A EQ PUSH2 0x21E JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x210 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x25E PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DA PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP3 SWAP2 SWAP1 PUSH2 0x25A7 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x25F3 JUMP JUMPDEST PUSH2 0x858 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A2 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x386 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2A2 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x26D2 JUMP JUMPDEST PUSH2 0x93B JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH2 0xC47 JUMP JUMPDEST PUSH2 0x210 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x278D JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0xE3F JUMP JUMPDEST PUSH2 0x210 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0xE6A JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0xE85 JUMP JUMPDEST PUSH2 0x210 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0xE91 JUMP JUMPDEST PUSH2 0x210 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2820 JUMP JUMPDEST PUSH2 0xEDA JUMP JUMPDEST PUSH2 0x210 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x130D JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4FC CALLDATASIZE PUSH1 0x4 PUSH2 0x284A JUMP JUMPDEST PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x210 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH2 0x51D DUP3 PUSH2 0x517 PUSH2 0x1583 JUMP JUMPDEST SWAP1 PUSH2 0x15B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST SWAP1 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9666671900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5C3 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D1 DUP2 PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x5E7 DUP4 DUP4 DUP4 PUSH2 0x5DF PUSH2 0x172C JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1759 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH2 0x182D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x3 PUSH0 SLOAD EQ PUSH2 0x646 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 PUSH2 0x64F PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 PUSH0 PUSH2 0x65D PUSH2 0x1687 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x770 JUMPI PUSH0 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x74A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x852 JUMPI PUSH0 DUP4 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 SLOAD EQ PUSH2 0x8A1 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP8 SWAP3 PUSH2 0x8DA SWAP1 DUP5 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8F2 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x90A SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 DUP2 EQ ISZERO DUP1 PUSH2 0x94B JUMPI POP DUP1 DUP5 EQ ISZERO JUMPDEST DUP1 PUSH2 0x956 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x98D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD ISZERO PUSH2 0x9D2 JUMPI PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0x9DD PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xBF6 JUMPI PUSH0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9F9 JUMPI PUSH2 0x9F9 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA0E SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C89D57F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH0 SUB PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH32 0xD49C192700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DBAA9B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0xB52 JUMPI PUSH2 0xB52 PUSH2 0x292C JUMP JUMPDEST DUP6 DUP6 SSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 DUP5 ADD DUP2 SWAP1 SSTORE SWAP2 POP DUP9 SWAP1 POP DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB7A JUMPI PUSH2 0xB7A PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x2959 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xBCA DUP2 DUP5 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBDA SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP DUP1 PUSH2 0xBEF SWAP1 PUSH2 0x2974 JUMP JUMPDEST SWAP1 POP PUSH2 0x9DF JUMP JUMPDEST POP PUSH32 0x44FBB8621BC7A734E344E0D7F6B84824CF97E0D8D611F9F8502E42FF0B1DEE43 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xC34 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC52 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH2 0xC64 DUP2 PUSH2 0xC5E PUSH2 0x1837 JUMP JUMPDEST SWAP1 PUSH2 0x1864 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF5 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD19 SWAP2 SWAP1 PUSH2 0x2AB9 JUMP JUMPDEST PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xDE2 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD8E SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDD0 JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xDBB JUMPI PUSH2 0xDBB PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xDCD SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0xDDA DUP2 PUSH2 0x2974 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD28 JUMP JUMPDEST POP DUP2 DUP2 GT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CE4D19D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0xE35 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1928 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0xE4B PUSH2 0x1837 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC64 PUSH2 0xE75 PUSH2 0x1687 JUMP JUMPDEST DUP3 PUSH2 0xE7E PUSH2 0x172C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A12 JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0xE4B PUSH2 0x1690 JUMP JUMPDEST PUSH0 PUSH2 0xED3 DUP4 DUP4 PUSH2 0xE9F PUSH2 0x172C JUMP JUMPDEST PUSH0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEE3 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP DUP2 PUSH0 SUB PUSH2 0xF3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BC7F2B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0xF86 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0xFBA PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xFB3 PUSH2 0x172C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1AB5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x108F JUMPI DUP5 DUP2 LT PUSH2 0x1079 JUMPI DUP5 DUP4 PUSH1 0x1 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1007 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP3 MSTORE DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x1089 DUP2 DUP7 PUSH2 0x2906 JUMP JUMPDEST SWAP5 POP DUP1 SWAP2 POP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x1139 JUMPI DUP7 DUP2 LT PUSH2 0x1126 JUMPI DUP7 DUP6 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x10B2 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP3 MSTORE DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP6 SSTORE PUSH2 0x1133 DUP2 DUP9 PUSH2 0x2906 JUMP JUMPDEST SWAP7 POP DUP1 SWAP2 POP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD DUP8 DUP2 LT ISZERO PUSH2 0x119F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1734392500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST DUP8 DUP7 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x11B2 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xA9059CBB PUSH2 0x1216 PUSH2 0xE4B PUSH2 0x1837 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1285 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A9 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH2 0xC34 JUMP JUMPDEST PUSH2 0x1318 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1328 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x135F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE35 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x137A JUMPI PUSH2 0x137A PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x138F SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x13BD JUMPI PUSH2 0x13BD PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x13D2 SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x13E4 JUMPI PUSH2 0x13E4 PUSH2 0x292C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x145D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x146F JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1361 JUMP JUMPDEST PUSH0 PUSH2 0x1487 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH2 0x1495 DUP2 PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x5E7 DUP4 DUP4 DUP4 PUSH2 0x14A3 PUSH2 0x172C JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0xC64 PUSH2 0x14B6 PUSH2 0x1687 JUMP JUMPDEST DUP3 PUSH2 0x14BF PUSH2 0x1690 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C02 JUMP JUMPDEST PUSH2 0x14D1 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x150B JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x157B JUMPI PUSH2 0x1573 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1529 JUMPI PUSH2 0x1529 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1542 JUMPI PUSH2 0x1542 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1557 SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x150D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2906 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x15FE JUMPI POP PUSH0 PUSH2 0x51D JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x164F JUMPI POP PUSH1 0x1 PUSH2 0x51D JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0x1E6B JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2906 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1728 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2906 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x852 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH2 0x1FAF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x2906 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1933 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1943 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x197A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE35 JUMPI PUSH2 0x1A0A DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x1998 JUMPI PUSH2 0x1998 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19AD SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x19BF JUMPI PUSH2 0x19BF PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x19D8 JUMPI PUSH2 0x19D8 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19ED SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x2114 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x197C JUMP JUMPDEST PUSH2 0x1A1D DUP4 DUP3 DUP5 PUSH2 0x1AB5 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x852 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x181F JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C6F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x852 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1D7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1DD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E7A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E84 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1F9E JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F7A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9E SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST ISZERO PUSH2 0x1FA8 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1FBF JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1FCC JUMPI POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x20FF JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20DB JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20FF SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST ISZERO PUSH2 0x210C JUMPI PUSH2 0x5F6 PUSH2 0x21A1 JUMP JUMPDEST POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x5E7 SWAP1 DUP5 SWAP1 PUSH2 0x21D1 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x2AD0 JUMP JUMPDEST PUSH0 PUSH2 0x2232 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22DE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0x2252 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2252 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22EC DUP5 DUP5 PUSH0 DUP6 PUSH2 0x22F4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2386 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x23AE SWAP2 SWAP1 PUSH2 0x2B19 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x23E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x23FE DUP8 DUP4 DUP4 DUP8 PUSH2 0x2409 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x249E JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x2497 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x2497 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST POP DUP2 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0x22EC DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x24B3 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xED3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC64 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2557 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED3 DUP2 PUSH2 0x2526 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2572 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x258A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x259C DUP2 PUSH2 0x2526 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2607 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2612 DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2622 DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2645 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2658 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2666 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2677 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x269A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B1 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x26CB JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x26E9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2700 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x270C DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2724 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2730 DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2748 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2754 DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x276C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2779 DUP12 DUP3 DUP13 ADD PUSH2 0x268A JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x27A2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x27B9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x27C5 DUP11 DUP4 DUP12 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x27DD JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x27E9 DUP11 DUP4 DUP12 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2801 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x280E DUP10 DUP3 DUP11 ADD PUSH2 0x268A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x283C DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x285D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2874 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2880 DUP9 DUP4 DUP10 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2898 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x28A5 DUP8 DUP3 DUP9 ADD PUSH2 0x268A JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC64 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28CE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED3 DUP2 PUSH2 0x28B1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51D JUMPI PUSH2 0x51D PUSH2 0x28D9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51D JUMPI PUSH2 0x51D PUSH2 0x28D9 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2969 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED3 DUP2 PUSH2 0x28B1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x29A4 JUMPI PUSH2 0x29A4 PUSH2 0x28D9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x29DB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 DUP10 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2A43 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A19 DUP2 PUSH2 0x2526 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A06 JUMP JUMPDEST POP PUSH1 0x20 SWAP2 POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2A5A DUP2 DUP11 DUP13 PUSH2 0x29AB JUMP JUMPDEST SWAP1 POP DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2A6F DUP2 DUP9 DUP11 PUSH2 0x29AB JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP7 SWAP2 POP DUP3 ADD PUSH0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2AA8 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A94 DUP2 PUSH2 0x28B1 JUMP JUMPDEST ISZERO ISZERO DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A81 JUMP JUMPDEST POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AC9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2ADE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2AEA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B11 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x2B2A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2AF7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B52 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2AF7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP ISZERO ADDRESS 0x26 0xD6 ORIGIN SWAP15 SWAP4 KECCAK256 0xE8 PUSH26 0x81377A1FEBFCE47F160FACB235E19385EAFCB98CD864736F6C63 NUMBER STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"317:406:56:-:0;;;3070:1:57;3308:40;;375:246:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;556:8;566:12;580:18;600:17;;;566:12;6685:10:57;1008:63:2;6685:10:57;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;881:65:22;926:19;881:28;:26;:28::i;:::-;:44;;:65::i;:::-;-1:-1:-1;736:96:32;-1:-1:-1;;;827:4:32;736:34;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;622:39:18;;;;;6751:20:57;;::::3;;::::0;6781:41;::::3;;::::0;-1:-1:-1;6837:20:57::3;::::0;3070:1:::3;1045:25:58::0;;6837:20:57::3;::::0;1033:2:58;1018:18;6837:20:57::3;;;;;;;6477:387:::0;;;;375:246:56;;;;317:406;;4865:174:12;4906:16;;761:71;831:1;769:58;761:71;:::i;:::-;753:80;4865:174;-1:-1:-1;;4865:174:12:o;1402:355::-;-1:-1:-1;;;;;1490:26:12;;;1486:166;;1532:30;;-1:-1:-1;;;;;;1532:30:12;-1:-1:-1;;;;;1532:30:12;;;;;;;1581:60;;-1:-1:-1;;1581:60:12;;-1:-1:-1;;1581:60:12;1486:166;1661:89;-1:-1:-1;;;1745:4:12;1661:34;:32;:34::i;:89::-;1402:355;;:::o;2761:174:27:-;2802:16;;505:67;571:1;513:54;505:67;:::i;1121:144::-;1220:38;:1;1238:19;1220:17;:38::i;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:16;;;877:68;;925:20;;-1:-1:-1;;;925:20:16;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:16;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:16;;;;;;;;;;773:235::o;2283:272:27:-;-1:-1:-1;;;;;2382:29:27;;2378:67;;2420:25;;-1:-1:-1;;;2420:25:27;;;;;;;;;;;2378:67;2455:26;;-1:-1:-1;;;;;;2455:26:27;-1:-1:-1;;;;;2455:26:27;;;;;;;2496:52;;1465:51:58;;;2496:52:27;;1453:2:58;1438:18;2496:52:27;;;;;;;2283:272;;:::o;14:139:58:-;-1:-1:-1;;;;;97:31:58;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:736::-;305:6;313;321;329;382:3;370:9;361:7;357:23;353:33;350:53;;;399:1;396;389:12;350:53;431:9;425:16;450:39;483:5;450:39;:::i;:::-;558:2;543:18;;537:25;508:5;;-1:-1:-1;571:41:58;537:25;571:41;:::i;:::-;683:2;668:18;;662:25;631:7;;-1:-1:-1;696:41:58;662:25;696:41;:::i;:::-;808:2;793:18;;787:25;756:7;;-1:-1:-1;821:41:58;787:25;821:41;:::i;:::-;158:736;;;;-1:-1:-1;158:736:58;;-1:-1:-1;;158:736:58:o;1081:225::-;1148:9;;;1169:11;;;1166:134;;;1222:10;1217:3;1213:20;1210:1;1203:31;1257:4;1254:1;1247:15;1285:4;1282:1;1275:15;1311:211;317:406:56;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEPOSIT_PHASE_4840":{"entryPoint":null,"id":4840,"parameterSlots":0,"returnSlots":0},"@EDU_TOKEN_4849":{"entryPoint":null,"id":4849,"parameterSlots":0,"returnSlots":0},"@INIT_PHASE_4837":{"entryPoint":null,"id":4837,"parameterSlots":0,"returnSlots":0},"@SALE_PHASE_4843":{"entryPoint":null,"id":4843,"parameterSlots":0,"returnSlots":0},"@SPENDER_ROLE_4834":{"entryPoint":null,"id":4834,"parameterSlots":0,"returnSlots":0},"@UNCLAIMED_EDU_HOLDER_4851":{"entryPoint":null,"id":4851,"parameterSlots":0,"returnSlots":0},"@WITHDRAW_PHASE_4846":{"entryPoint":null,"id":4846,"parameterSlots":0,"returnSlots":0},"@__msgData_4762":{"entryPoint":1516,"id":4762,"parameterSlots":0,"returnSlots":2},"@_callOptionalReturn_4212":{"entryPoint":8657,"id":4212,"parameterSlots":2,"returnSlots":0},"@_msgData_1149":{"entryPoint":8111,"id":1149,"parameterSlots":0,"returnSlots":2},"@_msgData_5586":{"entryPoint":6189,"id":5586,"parameterSlots":0,"returnSlots":2},"@_msgSender_1101":{"entryPoint":7787,"id":1101,"parameterSlots":0,"returnSlots":1},"@_msgSender_5572":{"entryPoint":5767,"id":5572,"parameterSlots":0,"returnSlots":1},"@_revert_4590":{"entryPoint":null,"id":4590,"parameterSlots":2,"returnSlots":0},"@currentPhase_4854":{"entryPoint":null,"id":4854,"parameterSlots":0,"returnSlots":0},"@enforceHasRole_548":{"entryPoint":6837,"id":548,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_799":{"entryPoint":5821,"id":799,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1013":{"entryPoint":null,"id":1013,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_4415":{"entryPoint":8948,"id":4415,"parameterSlots":4,"returnSlots":1},"@functionCall_4351":{"entryPoint":8926,"id":4351,"parameterSlots":3,"returnSlots":1},"@grantRole_107":{"entryPoint":1466,"id":107,"parameterSlots":2,"returnSlots":0},"@grantRole_406":{"entryPoint":5977,"id":406,"parameterSlots":4,"returnSlots":0},"@hasRole_175":{"entryPoint":3729,"id":175,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@isContract_4279":{"entryPoint":null,"id":4279,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_1029":{"entryPoint":null,"id":1029,"parameterSlots":1,"returnSlots":1},"@layout_1464":{"entryPoint":6199,"id":1464,"parameterSlots":0,"returnSlots":1},"@layout_585":{"entryPoint":5932,"id":585,"parameterSlots":0,"returnSlots":1},"@layout_832":{"entryPoint":5776,"id":832,"parameterSlots":0,"returnSlots":1},"@layout_980":{"entryPoint":5507,"id":980,"parameterSlots":0,"returnSlots":1},"@msgData_1204":{"entryPoint":8609,"id":1204,"parameterSlots":0,"returnSlots":2},"@msgSender_1187":{"entryPoint":null,"id":1187,"parameterSlots":0,"returnSlots":1},"@onERC20Received_5217":{"entryPoint":2136,"id":5217,"parameterSlots":5,"returnSlots":1},"@owner_206":{"entryPoint":3717,"id":206,"parameterSlots":0,"returnSlots":1},"@owner_761":{"entryPoint":null,"id":761,"parameterSlots":1,"returnSlots":1},"@payoutWallet_1298":{"entryPoint":3647,"id":1298,"parameterSlots":0,"returnSlots":1},"@payoutWallet_1452":{"entryPoint":null,"id":1452,"parameterSlots":1,"returnSlots":1},"@recoverERC20s_1683":{"entryPoint":6440,"id":1683,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_5558":{"entryPoint":3175,"id":5558,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1753":{"entryPoint":4877,"id":1753,"parameterSlots":6,"returnSlots":0},"@recoverETH_1617":{"entryPoint":5318,"id":1617,"parameterSlots":4,"returnSlots":0},"@renounceRole_156":{"entryPoint":3690,"id":156,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":6674,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_139":{"entryPoint":5246,"id":139,"parameterSlots":2,"returnSlots":0},"@revokeRole_445":{"entryPoint":6970,"id":445,"parameterSlots":4,"returnSlots":0},"@safeTransfer_3918":{"entryPoint":8468,"id":3918,"parameterSlots":3,"returnSlots":0},"@sendValue_4313":{"entryPoint":7445,"id":4313,"parameterSlots":2,"returnSlots":0},"@setInitialCredits_5169":{"entryPoint":2363,"id":5169,"parameterSlots":8,"returnSlots":0},"@setPayoutWallet_1285":{"entryPoint":3143,"id":1285,"parameterSlots":1,"returnSlots":0},"@setPayoutWallet_1439":{"entryPoint":6244,"id":1439,"parameterSlots":2,"returnSlots":0},"@setPhase_5015":{"entryPoint":1315,"id":5015,"parameterSlots":1,"returnSlots":0},"@spend_5405":{"entryPoint":3802,"id":5405,"parameterSlots":2,"returnSlots":0},"@supportsInterface_862":{"entryPoint":1290,"id":862,"parameterSlots":1,"returnSlots":1},"@supportsInterface_968":{"entryPoint":5552,"id":968,"parameterSlots":2,"returnSlots":1},"@totalCredits_4862":{"entryPoint":null,"id":4862,"parameterSlots":0,"returnSlots":0},"@totalDeposited_4865":{"entryPoint":null,"id":4865,"parameterSlots":0,"returnSlots":0},"@transferOwnership_223":{"entryPoint":5291,"id":223,"parameterSlots":1,"returnSlots":0},"@transferOwnership_748":{"entryPoint":7170,"id":748,"parameterSlots":3,"returnSlots":0},"@userCredits_4859":{"entryPoint":null,"id":4859,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_4546":{"entryPoint":9225,"id":4546,"parameterSlots":4,"returnSlots":1},"@withdraw_5483":{"entryPoint":1534,"id":5483,"parameterSlots":0,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":9866,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":9543,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9715,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":10272,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":10125,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr":{"entryPoint":9938,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":10314,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool":{"entryPoint":10585,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":10430,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9593,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":9447,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$3849":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$3768":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9570,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10937,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":10667,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":11033,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10740,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed":{"entryPoint":9639,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":11060,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"calldata_array_index_range_access_t_bytes_calldata_ptr":{"entryPoint":10960,"id":null,"parameterSlots":4,"returnSlots":2},"checked_add_t_uint256":{"entryPoint":10521,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":10502,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10999,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":10612,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":10457,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":10540,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":9510,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":10417,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:22475:58","nodeType":"YulBlock","src":"0:22475:58","statements":[{"nativeSrc":"6:3:58","nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nativeSrc":"83:263:58","nodeType":"YulBlock","src":"83:263:58","statements":[{"body":{"nativeSrc":"129:16:58","nodeType":"YulBlock","src":"129:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:58","nodeType":"YulLiteral","src":"138:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:58","nodeType":"YulLiteral","src":"141:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:58","nodeType":"YulIdentifier","src":"131:6:58"},"nativeSrc":"131:12:58","nodeType":"YulFunctionCall","src":"131:12:58"},"nativeSrc":"131:12:58","nodeType":"YulExpressionStatement","src":"131:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:58","nodeType":"YulIdentifier","src":"104:7:58"},{"name":"headStart","nativeSrc":"113:9:58","nodeType":"YulIdentifier","src":"113:9:58"}],"functionName":{"name":"sub","nativeSrc":"100:3:58","nodeType":"YulIdentifier","src":"100:3:58"},"nativeSrc":"100:23:58","nodeType":"YulFunctionCall","src":"100:23:58"},{"kind":"number","nativeSrc":"125:2:58","nodeType":"YulLiteral","src":"125:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:58","nodeType":"YulIdentifier","src":"96:3:58"},"nativeSrc":"96:32:58","nodeType":"YulFunctionCall","src":"96:32:58"},"nativeSrc":"93:52:58","nodeType":"YulIf","src":"93:52:58"},{"nativeSrc":"154:36:58","nodeType":"YulVariableDeclaration","src":"154:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:58","nodeType":"YulIdentifier","src":"180:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:58","nodeType":"YulIdentifier","src":"167:12:58"},"nativeSrc":"167:23:58","nodeType":"YulFunctionCall","src":"167:23:58"},"variables":[{"name":"value","nativeSrc":"158:5:58","nodeType":"YulTypedName","src":"158:5:58","type":""}]},{"body":{"nativeSrc":"300:16:58","nodeType":"YulBlock","src":"300:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:58","nodeType":"YulLiteral","src":"309:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:58","nodeType":"YulLiteral","src":"312:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:58","nodeType":"YulIdentifier","src":"302:6:58"},"nativeSrc":"302:12:58","nodeType":"YulFunctionCall","src":"302:12:58"},"nativeSrc":"302:12:58","nodeType":"YulExpressionStatement","src":"302:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:58","nodeType":"YulIdentifier","src":"212:5:58"},{"arguments":[{"name":"value","nativeSrc":"223:5:58","nodeType":"YulIdentifier","src":"223:5:58"},{"kind":"number","nativeSrc":"230:66:58","nodeType":"YulLiteral","src":"230:66:58","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:58","nodeType":"YulIdentifier","src":"219:3:58"},"nativeSrc":"219:78:58","nodeType":"YulFunctionCall","src":"219:78:58"}],"functionName":{"name":"eq","nativeSrc":"209:2:58","nodeType":"YulIdentifier","src":"209:2:58"},"nativeSrc":"209:89:58","nodeType":"YulFunctionCall","src":"209:89:58"}],"functionName":{"name":"iszero","nativeSrc":"202:6:58","nodeType":"YulIdentifier","src":"202:6:58"},"nativeSrc":"202:97:58","nodeType":"YulFunctionCall","src":"202:97:58"},"nativeSrc":"199:117:58","nodeType":"YulIf","src":"199:117:58"},{"nativeSrc":"325:15:58","nodeType":"YulAssignment","src":"325:15:58","value":{"name":"value","nativeSrc":"335:5:58","nodeType":"YulIdentifier","src":"335:5:58"},"variableNames":[{"name":"value0","nativeSrc":"325:6:58","nodeType":"YulIdentifier","src":"325:6:58"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:58","nodeType":"YulTypedName","src":"49:9:58","type":""},{"name":"dataEnd","nativeSrc":"60:7:58","nodeType":"YulTypedName","src":"60:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:58","nodeType":"YulTypedName","src":"72:6:58","type":""}],"src":"14:332:58"},{"body":{"nativeSrc":"446:92:58","nodeType":"YulBlock","src":"446:92:58","statements":[{"nativeSrc":"456:26:58","nodeType":"YulAssignment","src":"456:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:58","nodeType":"YulIdentifier","src":"468:9:58"},{"kind":"number","nativeSrc":"479:2:58","nodeType":"YulLiteral","src":"479:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:58","nodeType":"YulIdentifier","src":"464:3:58"},"nativeSrc":"464:18:58","nodeType":"YulFunctionCall","src":"464:18:58"},"variableNames":[{"name":"tail","nativeSrc":"456:4:58","nodeType":"YulIdentifier","src":"456:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:58","nodeType":"YulIdentifier","src":"498:9:58"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:58","nodeType":"YulIdentifier","src":"523:6:58"}],"functionName":{"name":"iszero","nativeSrc":"516:6:58","nodeType":"YulIdentifier","src":"516:6:58"},"nativeSrc":"516:14:58","nodeType":"YulFunctionCall","src":"516:14:58"}],"functionName":{"name":"iszero","nativeSrc":"509:6:58","nodeType":"YulIdentifier","src":"509:6:58"},"nativeSrc":"509:22:58","nodeType":"YulFunctionCall","src":"509:22:58"}],"functionName":{"name":"mstore","nativeSrc":"491:6:58","nodeType":"YulIdentifier","src":"491:6:58"},"nativeSrc":"491:41:58","nodeType":"YulFunctionCall","src":"491:41:58"},"nativeSrc":"491:41:58","nodeType":"YulExpressionStatement","src":"491:41:58"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:58","nodeType":"YulTypedName","src":"415:9:58","type":""},{"name":"value0","nativeSrc":"426:6:58","nodeType":"YulTypedName","src":"426:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:58","nodeType":"YulTypedName","src":"437:4:58","type":""}],"src":"351:187:58"},{"body":{"nativeSrc":"644:76:58","nodeType":"YulBlock","src":"644:76:58","statements":[{"nativeSrc":"654:26:58","nodeType":"YulAssignment","src":"654:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:58","nodeType":"YulIdentifier","src":"666:9:58"},{"kind":"number","nativeSrc":"677:2:58","nodeType":"YulLiteral","src":"677:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:58","nodeType":"YulIdentifier","src":"662:3:58"},"nativeSrc":"662:18:58","nodeType":"YulFunctionCall","src":"662:18:58"},"variableNames":[{"name":"tail","nativeSrc":"654:4:58","nodeType":"YulIdentifier","src":"654:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:58","nodeType":"YulIdentifier","src":"696:9:58"},{"name":"value0","nativeSrc":"707:6:58","nodeType":"YulIdentifier","src":"707:6:58"}],"functionName":{"name":"mstore","nativeSrc":"689:6:58","nodeType":"YulIdentifier","src":"689:6:58"},"nativeSrc":"689:25:58","nodeType":"YulFunctionCall","src":"689:25:58"},"nativeSrc":"689:25:58","nodeType":"YulExpressionStatement","src":"689:25:58"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:58","nodeType":"YulTypedName","src":"613:9:58","type":""},{"name":"value0","nativeSrc":"624:6:58","nodeType":"YulTypedName","src":"624:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:58","nodeType":"YulTypedName","src":"635:4:58","type":""}],"src":"543:177:58"},{"body":{"nativeSrc":"770:109:58","nodeType":"YulBlock","src":"770:109:58","statements":[{"body":{"nativeSrc":"857:16:58","nodeType":"YulBlock","src":"857:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"866:1:58","nodeType":"YulLiteral","src":"866:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"869:1:58","nodeType":"YulLiteral","src":"869:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"859:6:58","nodeType":"YulIdentifier","src":"859:6:58"},"nativeSrc":"859:12:58","nodeType":"YulFunctionCall","src":"859:12:58"},"nativeSrc":"859:12:58","nodeType":"YulExpressionStatement","src":"859:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"793:5:58","nodeType":"YulIdentifier","src":"793:5:58"},{"arguments":[{"name":"value","nativeSrc":"804:5:58","nodeType":"YulIdentifier","src":"804:5:58"},{"kind":"number","nativeSrc":"811:42:58","nodeType":"YulLiteral","src":"811:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"800:3:58","nodeType":"YulIdentifier","src":"800:3:58"},"nativeSrc":"800:54:58","nodeType":"YulFunctionCall","src":"800:54:58"}],"functionName":{"name":"eq","nativeSrc":"790:2:58","nodeType":"YulIdentifier","src":"790:2:58"},"nativeSrc":"790:65:58","nodeType":"YulFunctionCall","src":"790:65:58"}],"functionName":{"name":"iszero","nativeSrc":"783:6:58","nodeType":"YulIdentifier","src":"783:6:58"},"nativeSrc":"783:73:58","nodeType":"YulFunctionCall","src":"783:73:58"},"nativeSrc":"780:93:58","nodeType":"YulIf","src":"780:93:58"}]},"name":"validator_revert_address","nativeSrc":"725:154:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"759:5:58","nodeType":"YulTypedName","src":"759:5:58","type":""}],"src":"725:154:58"},{"body":{"nativeSrc":"954:177:58","nodeType":"YulBlock","src":"954:177:58","statements":[{"body":{"nativeSrc":"1000:16:58","nodeType":"YulBlock","src":"1000:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1009:1:58","nodeType":"YulLiteral","src":"1009:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1012:1:58","nodeType":"YulLiteral","src":"1012:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1002:6:58","nodeType":"YulIdentifier","src":"1002:6:58"},"nativeSrc":"1002:12:58","nodeType":"YulFunctionCall","src":"1002:12:58"},"nativeSrc":"1002:12:58","nodeType":"YulExpressionStatement","src":"1002:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"975:7:58","nodeType":"YulIdentifier","src":"975:7:58"},{"name":"headStart","nativeSrc":"984:9:58","nodeType":"YulIdentifier","src":"984:9:58"}],"functionName":{"name":"sub","nativeSrc":"971:3:58","nodeType":"YulIdentifier","src":"971:3:58"},"nativeSrc":"971:23:58","nodeType":"YulFunctionCall","src":"971:23:58"},{"kind":"number","nativeSrc":"996:2:58","nodeType":"YulLiteral","src":"996:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"967:3:58","nodeType":"YulIdentifier","src":"967:3:58"},"nativeSrc":"967:32:58","nodeType":"YulFunctionCall","src":"967:32:58"},"nativeSrc":"964:52:58","nodeType":"YulIf","src":"964:52:58"},{"nativeSrc":"1025:36:58","nodeType":"YulVariableDeclaration","src":"1025:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1051:9:58","nodeType":"YulIdentifier","src":"1051:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"1038:12:58","nodeType":"YulIdentifier","src":"1038:12:58"},"nativeSrc":"1038:23:58","nodeType":"YulFunctionCall","src":"1038:23:58"},"variables":[{"name":"value","nativeSrc":"1029:5:58","nodeType":"YulTypedName","src":"1029:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1095:5:58","nodeType":"YulIdentifier","src":"1095:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1070:24:58","nodeType":"YulIdentifier","src":"1070:24:58"},"nativeSrc":"1070:31:58","nodeType":"YulFunctionCall","src":"1070:31:58"},"nativeSrc":"1070:31:58","nodeType":"YulExpressionStatement","src":"1070:31:58"},{"nativeSrc":"1110:15:58","nodeType":"YulAssignment","src":"1110:15:58","value":{"name":"value","nativeSrc":"1120:5:58","nodeType":"YulIdentifier","src":"1120:5:58"},"variableNames":[{"name":"value0","nativeSrc":"1110:6:58","nodeType":"YulIdentifier","src":"1110:6:58"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"884:247:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"920:9:58","nodeType":"YulTypedName","src":"920:9:58","type":""},{"name":"dataEnd","nativeSrc":"931:7:58","nodeType":"YulTypedName","src":"931:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"943:6:58","nodeType":"YulTypedName","src":"943:6:58","type":""}],"src":"884:247:58"},{"body":{"nativeSrc":"1315:222:58","nodeType":"YulBlock","src":"1315:222:58","statements":[{"nativeSrc":"1325:27:58","nodeType":"YulAssignment","src":"1325:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1337:9:58","nodeType":"YulIdentifier","src":"1337:9:58"},{"kind":"number","nativeSrc":"1348:3:58","nodeType":"YulLiteral","src":"1348:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1333:3:58","nodeType":"YulIdentifier","src":"1333:3:58"},"nativeSrc":"1333:19:58","nodeType":"YulFunctionCall","src":"1333:19:58"},"variableNames":[{"name":"tail","nativeSrc":"1325:4:58","nodeType":"YulIdentifier","src":"1325:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1368:9:58","nodeType":"YulIdentifier","src":"1368:9:58"},{"name":"value0","nativeSrc":"1379:6:58","nodeType":"YulIdentifier","src":"1379:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1361:6:58","nodeType":"YulIdentifier","src":"1361:6:58"},"nativeSrc":"1361:25:58","nodeType":"YulFunctionCall","src":"1361:25:58"},"nativeSrc":"1361:25:58","nodeType":"YulExpressionStatement","src":"1361:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1406:9:58","nodeType":"YulIdentifier","src":"1406:9:58"},{"kind":"number","nativeSrc":"1417:2:58","nodeType":"YulLiteral","src":"1417:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1402:3:58","nodeType":"YulIdentifier","src":"1402:3:58"},"nativeSrc":"1402:18:58","nodeType":"YulFunctionCall","src":"1402:18:58"},{"name":"value1","nativeSrc":"1422:6:58","nodeType":"YulIdentifier","src":"1422:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1395:6:58","nodeType":"YulIdentifier","src":"1395:6:58"},"nativeSrc":"1395:34:58","nodeType":"YulFunctionCall","src":"1395:34:58"},"nativeSrc":"1395:34:58","nodeType":"YulExpressionStatement","src":"1395:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1449:9:58","nodeType":"YulIdentifier","src":"1449:9:58"},{"kind":"number","nativeSrc":"1460:2:58","nodeType":"YulLiteral","src":"1460:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1445:3:58","nodeType":"YulIdentifier","src":"1445:3:58"},"nativeSrc":"1445:18:58","nodeType":"YulFunctionCall","src":"1445:18:58"},{"name":"value2","nativeSrc":"1465:6:58","nodeType":"YulIdentifier","src":"1465:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1438:6:58","nodeType":"YulIdentifier","src":"1438:6:58"},"nativeSrc":"1438:34:58","nodeType":"YulFunctionCall","src":"1438:34:58"},"nativeSrc":"1438:34:58","nodeType":"YulExpressionStatement","src":"1438:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1492:9:58","nodeType":"YulIdentifier","src":"1492:9:58"},{"kind":"number","nativeSrc":"1503:2:58","nodeType":"YulLiteral","src":"1503:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1488:3:58","nodeType":"YulIdentifier","src":"1488:3:58"},"nativeSrc":"1488:18:58","nodeType":"YulFunctionCall","src":"1488:18:58"},{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"1522:6:58","nodeType":"YulIdentifier","src":"1522:6:58"}],"functionName":{"name":"iszero","nativeSrc":"1515:6:58","nodeType":"YulIdentifier","src":"1515:6:58"},"nativeSrc":"1515:14:58","nodeType":"YulFunctionCall","src":"1515:14:58"}],"functionName":{"name":"iszero","nativeSrc":"1508:6:58","nodeType":"YulIdentifier","src":"1508:6:58"},"nativeSrc":"1508:22:58","nodeType":"YulFunctionCall","src":"1508:22:58"}],"functionName":{"name":"mstore","nativeSrc":"1481:6:58","nodeType":"YulIdentifier","src":"1481:6:58"},"nativeSrc":"1481:50:58","nodeType":"YulFunctionCall","src":"1481:50:58"},"nativeSrc":"1481:50:58","nodeType":"YulExpressionStatement","src":"1481:50:58"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nativeSrc":"1136:401:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1260:9:58","nodeType":"YulTypedName","src":"1260:9:58","type":""},{"name":"value3","nativeSrc":"1271:6:58","nodeType":"YulTypedName","src":"1271:6:58","type":""},{"name":"value2","nativeSrc":"1279:6:58","nodeType":"YulTypedName","src":"1279:6:58","type":""},{"name":"value1","nativeSrc":"1287:6:58","nodeType":"YulTypedName","src":"1287:6:58","type":""},{"name":"value0","nativeSrc":"1295:6:58","nodeType":"YulTypedName","src":"1295:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1306:4:58","nodeType":"YulTypedName","src":"1306:4:58","type":""}],"src":"1136:401:58"},{"body":{"nativeSrc":"1670:125:58","nodeType":"YulBlock","src":"1670:125:58","statements":[{"nativeSrc":"1680:26:58","nodeType":"YulAssignment","src":"1680:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1692:9:58","nodeType":"YulIdentifier","src":"1692:9:58"},{"kind":"number","nativeSrc":"1703:2:58","nodeType":"YulLiteral","src":"1703:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1688:3:58","nodeType":"YulIdentifier","src":"1688:3:58"},"nativeSrc":"1688:18:58","nodeType":"YulFunctionCall","src":"1688:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1680:4:58","nodeType":"YulIdentifier","src":"1680:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1722:9:58","nodeType":"YulIdentifier","src":"1722:9:58"},{"arguments":[{"name":"value0","nativeSrc":"1737:6:58","nodeType":"YulIdentifier","src":"1737:6:58"},{"kind":"number","nativeSrc":"1745:42:58","nodeType":"YulLiteral","src":"1745:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1733:3:58","nodeType":"YulIdentifier","src":"1733:3:58"},"nativeSrc":"1733:55:58","nodeType":"YulFunctionCall","src":"1733:55:58"}],"functionName":{"name":"mstore","nativeSrc":"1715:6:58","nodeType":"YulIdentifier","src":"1715:6:58"},"nativeSrc":"1715:74:58","nodeType":"YulFunctionCall","src":"1715:74:58"},"nativeSrc":"1715:74:58","nodeType":"YulExpressionStatement","src":"1715:74:58"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed","nativeSrc":"1542:253:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1639:9:58","nodeType":"YulTypedName","src":"1639:9:58","type":""},{"name":"value0","nativeSrc":"1650:6:58","nodeType":"YulTypedName","src":"1650:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1661:4:58","nodeType":"YulTypedName","src":"1661:4:58","type":""}],"src":"1542:253:58"},{"body":{"nativeSrc":"1870:110:58","nodeType":"YulBlock","src":"1870:110:58","statements":[{"body":{"nativeSrc":"1916:16:58","nodeType":"YulBlock","src":"1916:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1925:1:58","nodeType":"YulLiteral","src":"1925:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1928:1:58","nodeType":"YulLiteral","src":"1928:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1918:6:58","nodeType":"YulIdentifier","src":"1918:6:58"},"nativeSrc":"1918:12:58","nodeType":"YulFunctionCall","src":"1918:12:58"},"nativeSrc":"1918:12:58","nodeType":"YulExpressionStatement","src":"1918:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1891:7:58","nodeType":"YulIdentifier","src":"1891:7:58"},{"name":"headStart","nativeSrc":"1900:9:58","nodeType":"YulIdentifier","src":"1900:9:58"}],"functionName":{"name":"sub","nativeSrc":"1887:3:58","nodeType":"YulIdentifier","src":"1887:3:58"},"nativeSrc":"1887:23:58","nodeType":"YulFunctionCall","src":"1887:23:58"},{"kind":"number","nativeSrc":"1912:2:58","nodeType":"YulLiteral","src":"1912:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1883:3:58","nodeType":"YulIdentifier","src":"1883:3:58"},"nativeSrc":"1883:32:58","nodeType":"YulFunctionCall","src":"1883:32:58"},"nativeSrc":"1880:52:58","nodeType":"YulIf","src":"1880:52:58"},{"nativeSrc":"1941:33:58","nodeType":"YulAssignment","src":"1941:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1964:9:58","nodeType":"YulIdentifier","src":"1964:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"1951:12:58","nodeType":"YulIdentifier","src":"1951:12:58"},"nativeSrc":"1951:23:58","nodeType":"YulFunctionCall","src":"1951:23:58"},"variableNames":[{"name":"value0","nativeSrc":"1941:6:58","nodeType":"YulIdentifier","src":"1941:6:58"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1800:180:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1836:9:58","nodeType":"YulTypedName","src":"1836:9:58","type":""},{"name":"dataEnd","nativeSrc":"1847:7:58","nodeType":"YulTypedName","src":"1847:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1859:6:58","nodeType":"YulTypedName","src":"1859:6:58","type":""}],"src":"1800:180:58"},{"body":{"nativeSrc":"2072:228:58","nodeType":"YulBlock","src":"2072:228:58","statements":[{"body":{"nativeSrc":"2118:16:58","nodeType":"YulBlock","src":"2118:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2127:1:58","nodeType":"YulLiteral","src":"2127:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"2130:1:58","nodeType":"YulLiteral","src":"2130:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2120:6:58","nodeType":"YulIdentifier","src":"2120:6:58"},"nativeSrc":"2120:12:58","nodeType":"YulFunctionCall","src":"2120:12:58"},"nativeSrc":"2120:12:58","nodeType":"YulExpressionStatement","src":"2120:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2093:7:58","nodeType":"YulIdentifier","src":"2093:7:58"},{"name":"headStart","nativeSrc":"2102:9:58","nodeType":"YulIdentifier","src":"2102:9:58"}],"functionName":{"name":"sub","nativeSrc":"2089:3:58","nodeType":"YulIdentifier","src":"2089:3:58"},"nativeSrc":"2089:23:58","nodeType":"YulFunctionCall","src":"2089:23:58"},{"kind":"number","nativeSrc":"2114:2:58","nodeType":"YulLiteral","src":"2114:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2085:3:58","nodeType":"YulIdentifier","src":"2085:3:58"},"nativeSrc":"2085:32:58","nodeType":"YulFunctionCall","src":"2085:32:58"},"nativeSrc":"2082:52:58","nodeType":"YulIf","src":"2082:52:58"},{"nativeSrc":"2143:33:58","nodeType":"YulAssignment","src":"2143:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"2166:9:58","nodeType":"YulIdentifier","src":"2166:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"2153:12:58","nodeType":"YulIdentifier","src":"2153:12:58"},"nativeSrc":"2153:23:58","nodeType":"YulFunctionCall","src":"2153:23:58"},"variableNames":[{"name":"value0","nativeSrc":"2143:6:58","nodeType":"YulIdentifier","src":"2143:6:58"}]},{"nativeSrc":"2185:45:58","nodeType":"YulVariableDeclaration","src":"2185:45:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2215:9:58","nodeType":"YulIdentifier","src":"2215:9:58"},{"kind":"number","nativeSrc":"2226:2:58","nodeType":"YulLiteral","src":"2226:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2211:3:58","nodeType":"YulIdentifier","src":"2211:3:58"},"nativeSrc":"2211:18:58","nodeType":"YulFunctionCall","src":"2211:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"2198:12:58","nodeType":"YulIdentifier","src":"2198:12:58"},"nativeSrc":"2198:32:58","nodeType":"YulFunctionCall","src":"2198:32:58"},"variables":[{"name":"value","nativeSrc":"2189:5:58","nodeType":"YulTypedName","src":"2189:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2264:5:58","nodeType":"YulIdentifier","src":"2264:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2239:24:58","nodeType":"YulIdentifier","src":"2239:24:58"},"nativeSrc":"2239:31:58","nodeType":"YulFunctionCall","src":"2239:31:58"},"nativeSrc":"2239:31:58","nodeType":"YulExpressionStatement","src":"2239:31:58"},{"nativeSrc":"2279:15:58","nodeType":"YulAssignment","src":"2279:15:58","value":{"name":"value","nativeSrc":"2289:5:58","nodeType":"YulIdentifier","src":"2289:5:58"},"variableNames":[{"name":"value1","nativeSrc":"2279:6:58","nodeType":"YulIdentifier","src":"2279:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"1985:315:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2030:9:58","nodeType":"YulTypedName","src":"2030:9:58","type":""},{"name":"dataEnd","nativeSrc":"2041:7:58","nodeType":"YulTypedName","src":"2041:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2053:6:58","nodeType":"YulTypedName","src":"2053:6:58","type":""},{"name":"value1","nativeSrc":"2061:6:58","nodeType":"YulTypedName","src":"2061:6:58","type":""}],"src":"1985:315:58"},{"body":{"nativeSrc":"2434:318:58","nodeType":"YulBlock","src":"2434:318:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"2451:9:58","nodeType":"YulIdentifier","src":"2451:9:58"},{"kind":"number","nativeSrc":"2462:2:58","nodeType":"YulLiteral","src":"2462:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"2444:6:58","nodeType":"YulIdentifier","src":"2444:6:58"},"nativeSrc":"2444:21:58","nodeType":"YulFunctionCall","src":"2444:21:58"},"nativeSrc":"2444:21:58","nodeType":"YulExpressionStatement","src":"2444:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2485:9:58","nodeType":"YulIdentifier","src":"2485:9:58"},{"kind":"number","nativeSrc":"2496:2:58","nodeType":"YulLiteral","src":"2496:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2481:3:58","nodeType":"YulIdentifier","src":"2481:3:58"},"nativeSrc":"2481:18:58","nodeType":"YulFunctionCall","src":"2481:18:58"},{"name":"value1","nativeSrc":"2501:6:58","nodeType":"YulIdentifier","src":"2501:6:58"}],"functionName":{"name":"mstore","nativeSrc":"2474:6:58","nodeType":"YulIdentifier","src":"2474:6:58"},"nativeSrc":"2474:34:58","nodeType":"YulFunctionCall","src":"2474:34:58"},"nativeSrc":"2474:34:58","nodeType":"YulExpressionStatement","src":"2474:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2534:9:58","nodeType":"YulIdentifier","src":"2534:9:58"},{"kind":"number","nativeSrc":"2545:2:58","nodeType":"YulLiteral","src":"2545:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2530:3:58","nodeType":"YulIdentifier","src":"2530:3:58"},"nativeSrc":"2530:18:58","nodeType":"YulFunctionCall","src":"2530:18:58"},{"name":"value0","nativeSrc":"2550:6:58","nodeType":"YulIdentifier","src":"2550:6:58"},{"name":"value1","nativeSrc":"2558:6:58","nodeType":"YulIdentifier","src":"2558:6:58"}],"functionName":{"name":"calldatacopy","nativeSrc":"2517:12:58","nodeType":"YulIdentifier","src":"2517:12:58"},"nativeSrc":"2517:48:58","nodeType":"YulFunctionCall","src":"2517:48:58"},"nativeSrc":"2517:48:58","nodeType":"YulExpressionStatement","src":"2517:48:58"},{"expression":{"arguments":[{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2589:9:58","nodeType":"YulIdentifier","src":"2589:9:58"},{"name":"value1","nativeSrc":"2600:6:58","nodeType":"YulIdentifier","src":"2600:6:58"}],"functionName":{"name":"add","nativeSrc":"2585:3:58","nodeType":"YulIdentifier","src":"2585:3:58"},"nativeSrc":"2585:22:58","nodeType":"YulFunctionCall","src":"2585:22:58"},{"kind":"number","nativeSrc":"2609:2:58","nodeType":"YulLiteral","src":"2609:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2581:3:58","nodeType":"YulIdentifier","src":"2581:3:58"},"nativeSrc":"2581:31:58","nodeType":"YulFunctionCall","src":"2581:31:58"},{"kind":"number","nativeSrc":"2614:1:58","nodeType":"YulLiteral","src":"2614:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"2574:6:58","nodeType":"YulIdentifier","src":"2574:6:58"},"nativeSrc":"2574:42:58","nodeType":"YulFunctionCall","src":"2574:42:58"},"nativeSrc":"2574:42:58","nodeType":"YulExpressionStatement","src":"2574:42:58"},{"nativeSrc":"2625:121:58","nodeType":"YulAssignment","src":"2625:121:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2641:9:58","nodeType":"YulIdentifier","src":"2641:9:58"},{"arguments":[{"arguments":[{"name":"value1","nativeSrc":"2660:6:58","nodeType":"YulIdentifier","src":"2660:6:58"},{"kind":"number","nativeSrc":"2668:2:58","nodeType":"YulLiteral","src":"2668:2:58","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"2656:3:58","nodeType":"YulIdentifier","src":"2656:3:58"},"nativeSrc":"2656:15:58","nodeType":"YulFunctionCall","src":"2656:15:58"},{"kind":"number","nativeSrc":"2673:66:58","nodeType":"YulLiteral","src":"2673:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"2652:3:58","nodeType":"YulIdentifier","src":"2652:3:58"},"nativeSrc":"2652:88:58","nodeType":"YulFunctionCall","src":"2652:88:58"}],"functionName":{"name":"add","nativeSrc":"2637:3:58","nodeType":"YulIdentifier","src":"2637:3:58"},"nativeSrc":"2637:104:58","nodeType":"YulFunctionCall","src":"2637:104:58"},{"kind":"number","nativeSrc":"2743:2:58","nodeType":"YulLiteral","src":"2743:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2633:3:58","nodeType":"YulIdentifier","src":"2633:3:58"},"nativeSrc":"2633:113:58","nodeType":"YulFunctionCall","src":"2633:113:58"},"variableNames":[{"name":"tail","nativeSrc":"2625:4:58","nodeType":"YulIdentifier","src":"2625:4:58"}]}]},"name":"abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed","nativeSrc":"2305:447:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2395:9:58","nodeType":"YulTypedName","src":"2395:9:58","type":""},{"name":"value1","nativeSrc":"2406:6:58","nodeType":"YulTypedName","src":"2406:6:58","type":""},{"name":"value0","nativeSrc":"2414:6:58","nodeType":"YulTypedName","src":"2414:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"2425:4:58","nodeType":"YulTypedName","src":"2425:4:58","type":""}],"src":"2305:447:58"},{"body":{"nativeSrc":"2897:796:58","nodeType":"YulBlock","src":"2897:796:58","statements":[{"body":{"nativeSrc":"2944:16:58","nodeType":"YulBlock","src":"2944:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2953:1:58","nodeType":"YulLiteral","src":"2953:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"2956:1:58","nodeType":"YulLiteral","src":"2956:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2946:6:58","nodeType":"YulIdentifier","src":"2946:6:58"},"nativeSrc":"2946:12:58","nodeType":"YulFunctionCall","src":"2946:12:58"},"nativeSrc":"2946:12:58","nodeType":"YulExpressionStatement","src":"2946:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2918:7:58","nodeType":"YulIdentifier","src":"2918:7:58"},{"name":"headStart","nativeSrc":"2927:9:58","nodeType":"YulIdentifier","src":"2927:9:58"}],"functionName":{"name":"sub","nativeSrc":"2914:3:58","nodeType":"YulIdentifier","src":"2914:3:58"},"nativeSrc":"2914:23:58","nodeType":"YulFunctionCall","src":"2914:23:58"},{"kind":"number","nativeSrc":"2939:3:58","nodeType":"YulLiteral","src":"2939:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2910:3:58","nodeType":"YulIdentifier","src":"2910:3:58"},"nativeSrc":"2910:33:58","nodeType":"YulFunctionCall","src":"2910:33:58"},"nativeSrc":"2907:53:58","nodeType":"YulIf","src":"2907:53:58"},{"nativeSrc":"2969:36:58","nodeType":"YulVariableDeclaration","src":"2969:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"2995:9:58","nodeType":"YulIdentifier","src":"2995:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"2982:12:58","nodeType":"YulIdentifier","src":"2982:12:58"},"nativeSrc":"2982:23:58","nodeType":"YulFunctionCall","src":"2982:23:58"},"variables":[{"name":"value","nativeSrc":"2973:5:58","nodeType":"YulTypedName","src":"2973:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"3039:5:58","nodeType":"YulIdentifier","src":"3039:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3014:24:58","nodeType":"YulIdentifier","src":"3014:24:58"},"nativeSrc":"3014:31:58","nodeType":"YulFunctionCall","src":"3014:31:58"},"nativeSrc":"3014:31:58","nodeType":"YulExpressionStatement","src":"3014:31:58"},{"nativeSrc":"3054:15:58","nodeType":"YulAssignment","src":"3054:15:58","value":{"name":"value","nativeSrc":"3064:5:58","nodeType":"YulIdentifier","src":"3064:5:58"},"variableNames":[{"name":"value0","nativeSrc":"3054:6:58","nodeType":"YulIdentifier","src":"3054:6:58"}]},{"nativeSrc":"3078:47:58","nodeType":"YulVariableDeclaration","src":"3078:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3110:9:58","nodeType":"YulIdentifier","src":"3110:9:58"},{"kind":"number","nativeSrc":"3121:2:58","nodeType":"YulLiteral","src":"3121:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3106:3:58","nodeType":"YulIdentifier","src":"3106:3:58"},"nativeSrc":"3106:18:58","nodeType":"YulFunctionCall","src":"3106:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"3093:12:58","nodeType":"YulIdentifier","src":"3093:12:58"},"nativeSrc":"3093:32:58","nodeType":"YulFunctionCall","src":"3093:32:58"},"variables":[{"name":"value_1","nativeSrc":"3082:7:58","nodeType":"YulTypedName","src":"3082:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"3159:7:58","nodeType":"YulIdentifier","src":"3159:7:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"3134:24:58","nodeType":"YulIdentifier","src":"3134:24:58"},"nativeSrc":"3134:33:58","nodeType":"YulFunctionCall","src":"3134:33:58"},"nativeSrc":"3134:33:58","nodeType":"YulExpressionStatement","src":"3134:33:58"},{"nativeSrc":"3176:17:58","nodeType":"YulAssignment","src":"3176:17:58","value":{"name":"value_1","nativeSrc":"3186:7:58","nodeType":"YulIdentifier","src":"3186:7:58"},"variableNames":[{"name":"value1","nativeSrc":"3176:6:58","nodeType":"YulIdentifier","src":"3176:6:58"}]},{"nativeSrc":"3202:42:58","nodeType":"YulAssignment","src":"3202:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3229:9:58","nodeType":"YulIdentifier","src":"3229:9:58"},{"kind":"number","nativeSrc":"3240:2:58","nodeType":"YulLiteral","src":"3240:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3225:3:58","nodeType":"YulIdentifier","src":"3225:3:58"},"nativeSrc":"3225:18:58","nodeType":"YulFunctionCall","src":"3225:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"3212:12:58","nodeType":"YulIdentifier","src":"3212:12:58"},"nativeSrc":"3212:32:58","nodeType":"YulFunctionCall","src":"3212:32:58"},"variableNames":[{"name":"value2","nativeSrc":"3202:6:58","nodeType":"YulIdentifier","src":"3202:6:58"}]},{"nativeSrc":"3253:46:58","nodeType":"YulVariableDeclaration","src":"3253:46:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3284:9:58","nodeType":"YulIdentifier","src":"3284:9:58"},{"kind":"number","nativeSrc":"3295:2:58","nodeType":"YulLiteral","src":"3295:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3280:3:58","nodeType":"YulIdentifier","src":"3280:3:58"},"nativeSrc":"3280:18:58","nodeType":"YulFunctionCall","src":"3280:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"3267:12:58","nodeType":"YulIdentifier","src":"3267:12:58"},"nativeSrc":"3267:32:58","nodeType":"YulFunctionCall","src":"3267:32:58"},"variables":[{"name":"offset","nativeSrc":"3257:6:58","nodeType":"YulTypedName","src":"3257:6:58","type":""}]},{"nativeSrc":"3308:28:58","nodeType":"YulVariableDeclaration","src":"3308:28:58","value":{"kind":"number","nativeSrc":"3318:18:58","nodeType":"YulLiteral","src":"3318:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"3312:2:58","nodeType":"YulTypedName","src":"3312:2:58","type":""}]},{"body":{"nativeSrc":"3363:16:58","nodeType":"YulBlock","src":"3363:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3372:1:58","nodeType":"YulLiteral","src":"3372:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3375:1:58","nodeType":"YulLiteral","src":"3375:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3365:6:58","nodeType":"YulIdentifier","src":"3365:6:58"},"nativeSrc":"3365:12:58","nodeType":"YulFunctionCall","src":"3365:12:58"},"nativeSrc":"3365:12:58","nodeType":"YulExpressionStatement","src":"3365:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"3351:6:58","nodeType":"YulIdentifier","src":"3351:6:58"},{"name":"_1","nativeSrc":"3359:2:58","nodeType":"YulIdentifier","src":"3359:2:58"}],"functionName":{"name":"gt","nativeSrc":"3348:2:58","nodeType":"YulIdentifier","src":"3348:2:58"},"nativeSrc":"3348:14:58","nodeType":"YulFunctionCall","src":"3348:14:58"},"nativeSrc":"3345:34:58","nodeType":"YulIf","src":"3345:34:58"},{"nativeSrc":"3388:32:58","nodeType":"YulVariableDeclaration","src":"3388:32:58","value":{"arguments":[{"name":"headStart","nativeSrc":"3402:9:58","nodeType":"YulIdentifier","src":"3402:9:58"},{"name":"offset","nativeSrc":"3413:6:58","nodeType":"YulIdentifier","src":"3413:6:58"}],"functionName":{"name":"add","nativeSrc":"3398:3:58","nodeType":"YulIdentifier","src":"3398:3:58"},"nativeSrc":"3398:22:58","nodeType":"YulFunctionCall","src":"3398:22:58"},"variables":[{"name":"_2","nativeSrc":"3392:2:58","nodeType":"YulTypedName","src":"3392:2:58","type":""}]},{"body":{"nativeSrc":"3468:16:58","nodeType":"YulBlock","src":"3468:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3477:1:58","nodeType":"YulLiteral","src":"3477:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3480:1:58","nodeType":"YulLiteral","src":"3480:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3470:6:58","nodeType":"YulIdentifier","src":"3470:6:58"},"nativeSrc":"3470:12:58","nodeType":"YulFunctionCall","src":"3470:12:58"},"nativeSrc":"3470:12:58","nodeType":"YulExpressionStatement","src":"3470:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3447:2:58","nodeType":"YulIdentifier","src":"3447:2:58"},{"kind":"number","nativeSrc":"3451:4:58","nodeType":"YulLiteral","src":"3451:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"3443:3:58","nodeType":"YulIdentifier","src":"3443:3:58"},"nativeSrc":"3443:13:58","nodeType":"YulFunctionCall","src":"3443:13:58"},{"name":"dataEnd","nativeSrc":"3458:7:58","nodeType":"YulIdentifier","src":"3458:7:58"}],"functionName":{"name":"slt","nativeSrc":"3439:3:58","nodeType":"YulIdentifier","src":"3439:3:58"},"nativeSrc":"3439:27:58","nodeType":"YulFunctionCall","src":"3439:27:58"}],"functionName":{"name":"iszero","nativeSrc":"3432:6:58","nodeType":"YulIdentifier","src":"3432:6:58"},"nativeSrc":"3432:35:58","nodeType":"YulFunctionCall","src":"3432:35:58"},"nativeSrc":"3429:55:58","nodeType":"YulIf","src":"3429:55:58"},{"nativeSrc":"3493:30:58","nodeType":"YulVariableDeclaration","src":"3493:30:58","value":{"arguments":[{"name":"_2","nativeSrc":"3520:2:58","nodeType":"YulIdentifier","src":"3520:2:58"}],"functionName":{"name":"calldataload","nativeSrc":"3507:12:58","nodeType":"YulIdentifier","src":"3507:12:58"},"nativeSrc":"3507:16:58","nodeType":"YulFunctionCall","src":"3507:16:58"},"variables":[{"name":"length","nativeSrc":"3497:6:58","nodeType":"YulTypedName","src":"3497:6:58","type":""}]},{"body":{"nativeSrc":"3550:16:58","nodeType":"YulBlock","src":"3550:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3559:1:58","nodeType":"YulLiteral","src":"3559:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3562:1:58","nodeType":"YulLiteral","src":"3562:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3552:6:58","nodeType":"YulIdentifier","src":"3552:6:58"},"nativeSrc":"3552:12:58","nodeType":"YulFunctionCall","src":"3552:12:58"},"nativeSrc":"3552:12:58","nodeType":"YulExpressionStatement","src":"3552:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3538:6:58","nodeType":"YulIdentifier","src":"3538:6:58"},{"name":"_1","nativeSrc":"3546:2:58","nodeType":"YulIdentifier","src":"3546:2:58"}],"functionName":{"name":"gt","nativeSrc":"3535:2:58","nodeType":"YulIdentifier","src":"3535:2:58"},"nativeSrc":"3535:14:58","nodeType":"YulFunctionCall","src":"3535:14:58"},"nativeSrc":"3532:34:58","nodeType":"YulIf","src":"3532:34:58"},{"body":{"nativeSrc":"3616:16:58","nodeType":"YulBlock","src":"3616:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3625:1:58","nodeType":"YulLiteral","src":"3625:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3628:1:58","nodeType":"YulLiteral","src":"3628:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3618:6:58","nodeType":"YulIdentifier","src":"3618:6:58"},"nativeSrc":"3618:12:58","nodeType":"YulFunctionCall","src":"3618:12:58"},"nativeSrc":"3618:12:58","nodeType":"YulExpressionStatement","src":"3618:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3589:2:58","nodeType":"YulIdentifier","src":"3589:2:58"},{"name":"length","nativeSrc":"3593:6:58","nodeType":"YulIdentifier","src":"3593:6:58"}],"functionName":{"name":"add","nativeSrc":"3585:3:58","nodeType":"YulIdentifier","src":"3585:3:58"},"nativeSrc":"3585:15:58","nodeType":"YulFunctionCall","src":"3585:15:58"},{"kind":"number","nativeSrc":"3602:2:58","nodeType":"YulLiteral","src":"3602:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3581:3:58","nodeType":"YulIdentifier","src":"3581:3:58"},"nativeSrc":"3581:24:58","nodeType":"YulFunctionCall","src":"3581:24:58"},{"name":"dataEnd","nativeSrc":"3607:7:58","nodeType":"YulIdentifier","src":"3607:7:58"}],"functionName":{"name":"gt","nativeSrc":"3578:2:58","nodeType":"YulIdentifier","src":"3578:2:58"},"nativeSrc":"3578:37:58","nodeType":"YulFunctionCall","src":"3578:37:58"},"nativeSrc":"3575:57:58","nodeType":"YulIf","src":"3575:57:58"},{"nativeSrc":"3641:21:58","nodeType":"YulAssignment","src":"3641:21:58","value":{"arguments":[{"name":"_2","nativeSrc":"3655:2:58","nodeType":"YulIdentifier","src":"3655:2:58"},{"kind":"number","nativeSrc":"3659:2:58","nodeType":"YulLiteral","src":"3659:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3651:3:58","nodeType":"YulIdentifier","src":"3651:3:58"},"nativeSrc":"3651:11:58","nodeType":"YulFunctionCall","src":"3651:11:58"},"variableNames":[{"name":"value3","nativeSrc":"3641:6:58","nodeType":"YulIdentifier","src":"3641:6:58"}]},{"nativeSrc":"3671:16:58","nodeType":"YulAssignment","src":"3671:16:58","value":{"name":"length","nativeSrc":"3681:6:58","nodeType":"YulIdentifier","src":"3681:6:58"},"variableNames":[{"name":"value4","nativeSrc":"3671:6:58","nodeType":"YulIdentifier","src":"3671:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"2757:936:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2831:9:58","nodeType":"YulTypedName","src":"2831:9:58","type":""},{"name":"dataEnd","nativeSrc":"2842:7:58","nodeType":"YulTypedName","src":"2842:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2854:6:58","nodeType":"YulTypedName","src":"2854:6:58","type":""},{"name":"value1","nativeSrc":"2862:6:58","nodeType":"YulTypedName","src":"2862:6:58","type":""},{"name":"value2","nativeSrc":"2870:6:58","nodeType":"YulTypedName","src":"2870:6:58","type":""},{"name":"value3","nativeSrc":"2878:6:58","nodeType":"YulTypedName","src":"2878:6:58","type":""},{"name":"value4","nativeSrc":"2886:6:58","nodeType":"YulTypedName","src":"2886:6:58","type":""}],"src":"2757:936:58"},{"body":{"nativeSrc":"3797:149:58","nodeType":"YulBlock","src":"3797:149:58","statements":[{"nativeSrc":"3807:26:58","nodeType":"YulAssignment","src":"3807:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"3819:9:58","nodeType":"YulIdentifier","src":"3819:9:58"},{"kind":"number","nativeSrc":"3830:2:58","nodeType":"YulLiteral","src":"3830:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3815:3:58","nodeType":"YulIdentifier","src":"3815:3:58"},"nativeSrc":"3815:18:58","nodeType":"YulFunctionCall","src":"3815:18:58"},"variableNames":[{"name":"tail","nativeSrc":"3807:4:58","nodeType":"YulIdentifier","src":"3807:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3849:9:58","nodeType":"YulIdentifier","src":"3849:9:58"},{"arguments":[{"name":"value0","nativeSrc":"3864:6:58","nodeType":"YulIdentifier","src":"3864:6:58"},{"kind":"number","nativeSrc":"3872:66:58","nodeType":"YulLiteral","src":"3872:66:58","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3860:3:58","nodeType":"YulIdentifier","src":"3860:3:58"},"nativeSrc":"3860:79:58","nodeType":"YulFunctionCall","src":"3860:79:58"}],"functionName":{"name":"mstore","nativeSrc":"3842:6:58","nodeType":"YulIdentifier","src":"3842:6:58"},"nativeSrc":"3842:98:58","nodeType":"YulFunctionCall","src":"3842:98:58"},"nativeSrc":"3842:98:58","nodeType":"YulExpressionStatement","src":"3842:98:58"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3698:248:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3766:9:58","nodeType":"YulTypedName","src":"3766:9:58","type":""},{"name":"value0","nativeSrc":"3777:6:58","nodeType":"YulTypedName","src":"3777:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3788:4:58","nodeType":"YulTypedName","src":"3788:4:58","type":""}],"src":"3698:248:58"},{"body":{"nativeSrc":"4052:125:58","nodeType":"YulBlock","src":"4052:125:58","statements":[{"nativeSrc":"4062:26:58","nodeType":"YulAssignment","src":"4062:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"4074:9:58","nodeType":"YulIdentifier","src":"4074:9:58"},{"kind":"number","nativeSrc":"4085:2:58","nodeType":"YulLiteral","src":"4085:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4070:3:58","nodeType":"YulIdentifier","src":"4070:3:58"},"nativeSrc":"4070:18:58","nodeType":"YulFunctionCall","src":"4070:18:58"},"variableNames":[{"name":"tail","nativeSrc":"4062:4:58","nodeType":"YulIdentifier","src":"4062:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4104:9:58","nodeType":"YulIdentifier","src":"4104:9:58"},{"arguments":[{"name":"value0","nativeSrc":"4119:6:58","nodeType":"YulIdentifier","src":"4119:6:58"},{"kind":"number","nativeSrc":"4127:42:58","nodeType":"YulLiteral","src":"4127:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4115:3:58","nodeType":"YulIdentifier","src":"4115:3:58"},"nativeSrc":"4115:55:58","nodeType":"YulFunctionCall","src":"4115:55:58"}],"functionName":{"name":"mstore","nativeSrc":"4097:6:58","nodeType":"YulIdentifier","src":"4097:6:58"},"nativeSrc":"4097:74:58","nodeType":"YulFunctionCall","src":"4097:74:58"},"nativeSrc":"4097:74:58","nodeType":"YulExpressionStatement","src":"4097:74:58"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3951:226:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4021:9:58","nodeType":"YulTypedName","src":"4021:9:58","type":""},{"name":"value0","nativeSrc":"4032:6:58","nodeType":"YulTypedName","src":"4032:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4043:4:58","nodeType":"YulTypedName","src":"4043:4:58","type":""}],"src":"3951:226:58"},{"body":{"nativeSrc":"4298:125:58","nodeType":"YulBlock","src":"4298:125:58","statements":[{"nativeSrc":"4308:26:58","nodeType":"YulAssignment","src":"4308:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"4320:9:58","nodeType":"YulIdentifier","src":"4320:9:58"},{"kind":"number","nativeSrc":"4331:2:58","nodeType":"YulLiteral","src":"4331:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4316:3:58","nodeType":"YulIdentifier","src":"4316:3:58"},"nativeSrc":"4316:18:58","nodeType":"YulFunctionCall","src":"4316:18:58"},"variableNames":[{"name":"tail","nativeSrc":"4308:4:58","nodeType":"YulIdentifier","src":"4308:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4350:9:58","nodeType":"YulIdentifier","src":"4350:9:58"},{"arguments":[{"name":"value0","nativeSrc":"4365:6:58","nodeType":"YulIdentifier","src":"4365:6:58"},{"kind":"number","nativeSrc":"4373:42:58","nodeType":"YulLiteral","src":"4373:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4361:3:58","nodeType":"YulIdentifier","src":"4361:3:58"},"nativeSrc":"4361:55:58","nodeType":"YulFunctionCall","src":"4361:55:58"}],"functionName":{"name":"mstore","nativeSrc":"4343:6:58","nodeType":"YulIdentifier","src":"4343:6:58"},"nativeSrc":"4343:74:58","nodeType":"YulFunctionCall","src":"4343:74:58"},"nativeSrc":"4343:74:58","nodeType":"YulExpressionStatement","src":"4343:74:58"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed","nativeSrc":"4182:241:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4267:9:58","nodeType":"YulTypedName","src":"4267:9:58","type":""},{"name":"value0","nativeSrc":"4278:6:58","nodeType":"YulTypedName","src":"4278:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4289:4:58","nodeType":"YulTypedName","src":"4289:4:58","type":""}],"src":"4182:241:58"},{"body":{"nativeSrc":"4512:283:58","nodeType":"YulBlock","src":"4512:283:58","statements":[{"body":{"nativeSrc":"4561:16:58","nodeType":"YulBlock","src":"4561:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4570:1:58","nodeType":"YulLiteral","src":"4570:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4573:1:58","nodeType":"YulLiteral","src":"4573:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4563:6:58","nodeType":"YulIdentifier","src":"4563:6:58"},"nativeSrc":"4563:12:58","nodeType":"YulFunctionCall","src":"4563:12:58"},"nativeSrc":"4563:12:58","nodeType":"YulExpressionStatement","src":"4563:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4540:6:58","nodeType":"YulIdentifier","src":"4540:6:58"},{"kind":"number","nativeSrc":"4548:4:58","nodeType":"YulLiteral","src":"4548:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4536:3:58","nodeType":"YulIdentifier","src":"4536:3:58"},"nativeSrc":"4536:17:58","nodeType":"YulFunctionCall","src":"4536:17:58"},{"name":"end","nativeSrc":"4555:3:58","nodeType":"YulIdentifier","src":"4555:3:58"}],"functionName":{"name":"slt","nativeSrc":"4532:3:58","nodeType":"YulIdentifier","src":"4532:3:58"},"nativeSrc":"4532:27:58","nodeType":"YulFunctionCall","src":"4532:27:58"}],"functionName":{"name":"iszero","nativeSrc":"4525:6:58","nodeType":"YulIdentifier","src":"4525:6:58"},"nativeSrc":"4525:35:58","nodeType":"YulFunctionCall","src":"4525:35:58"},"nativeSrc":"4522:55:58","nodeType":"YulIf","src":"4522:55:58"},{"nativeSrc":"4586:30:58","nodeType":"YulAssignment","src":"4586:30:58","value":{"arguments":[{"name":"offset","nativeSrc":"4609:6:58","nodeType":"YulIdentifier","src":"4609:6:58"}],"functionName":{"name":"calldataload","nativeSrc":"4596:12:58","nodeType":"YulIdentifier","src":"4596:12:58"},"nativeSrc":"4596:20:58","nodeType":"YulFunctionCall","src":"4596:20:58"},"variableNames":[{"name":"length","nativeSrc":"4586:6:58","nodeType":"YulIdentifier","src":"4586:6:58"}]},{"body":{"nativeSrc":"4659:16:58","nodeType":"YulBlock","src":"4659:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4668:1:58","nodeType":"YulLiteral","src":"4668:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4671:1:58","nodeType":"YulLiteral","src":"4671:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4661:6:58","nodeType":"YulIdentifier","src":"4661:6:58"},"nativeSrc":"4661:12:58","nodeType":"YulFunctionCall","src":"4661:12:58"},"nativeSrc":"4661:12:58","nodeType":"YulExpressionStatement","src":"4661:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4631:6:58","nodeType":"YulIdentifier","src":"4631:6:58"},{"kind":"number","nativeSrc":"4639:18:58","nodeType":"YulLiteral","src":"4639:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4628:2:58","nodeType":"YulIdentifier","src":"4628:2:58"},"nativeSrc":"4628:30:58","nodeType":"YulFunctionCall","src":"4628:30:58"},"nativeSrc":"4625:50:58","nodeType":"YulIf","src":"4625:50:58"},{"nativeSrc":"4684:29:58","nodeType":"YulAssignment","src":"4684:29:58","value":{"arguments":[{"name":"offset","nativeSrc":"4700:6:58","nodeType":"YulIdentifier","src":"4700:6:58"},{"kind":"number","nativeSrc":"4708:4:58","nodeType":"YulLiteral","src":"4708:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4696:3:58","nodeType":"YulIdentifier","src":"4696:3:58"},"nativeSrc":"4696:17:58","nodeType":"YulFunctionCall","src":"4696:17:58"},"variableNames":[{"name":"arrayPos","nativeSrc":"4684:8:58","nodeType":"YulIdentifier","src":"4684:8:58"}]},{"body":{"nativeSrc":"4773:16:58","nodeType":"YulBlock","src":"4773:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4782:1:58","nodeType":"YulLiteral","src":"4782:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4785:1:58","nodeType":"YulLiteral","src":"4785:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4775:6:58","nodeType":"YulIdentifier","src":"4775:6:58"},"nativeSrc":"4775:12:58","nodeType":"YulFunctionCall","src":"4775:12:58"},"nativeSrc":"4775:12:58","nodeType":"YulExpressionStatement","src":"4775:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4736:6:58","nodeType":"YulIdentifier","src":"4736:6:58"},{"arguments":[{"kind":"number","nativeSrc":"4748:1:58","nodeType":"YulLiteral","src":"4748:1:58","type":"","value":"5"},{"name":"length","nativeSrc":"4751:6:58","nodeType":"YulIdentifier","src":"4751:6:58"}],"functionName":{"name":"shl","nativeSrc":"4744:3:58","nodeType":"YulIdentifier","src":"4744:3:58"},"nativeSrc":"4744:14:58","nodeType":"YulFunctionCall","src":"4744:14:58"}],"functionName":{"name":"add","nativeSrc":"4732:3:58","nodeType":"YulIdentifier","src":"4732:3:58"},"nativeSrc":"4732:27:58","nodeType":"YulFunctionCall","src":"4732:27:58"},{"kind":"number","nativeSrc":"4761:4:58","nodeType":"YulLiteral","src":"4761:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4728:3:58","nodeType":"YulIdentifier","src":"4728:3:58"},"nativeSrc":"4728:38:58","nodeType":"YulFunctionCall","src":"4728:38:58"},{"name":"end","nativeSrc":"4768:3:58","nodeType":"YulIdentifier","src":"4768:3:58"}],"functionName":{"name":"gt","nativeSrc":"4725:2:58","nodeType":"YulIdentifier","src":"4725:2:58"},"nativeSrc":"4725:47:58","nodeType":"YulFunctionCall","src":"4725:47:58"},"nativeSrc":"4722:67:58","nodeType":"YulIf","src":"4722:67:58"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4428:367:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4475:6:58","nodeType":"YulTypedName","src":"4475:6:58","type":""},{"name":"end","nativeSrc":"4483:3:58","nodeType":"YulTypedName","src":"4483:3:58","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4491:8:58","nodeType":"YulTypedName","src":"4491:8:58","type":""},{"name":"length","nativeSrc":"4501:6:58","nodeType":"YulTypedName","src":"4501:6:58","type":""}],"src":"4428:367:58"},{"body":{"nativeSrc":"5058:1143:58","nodeType":"YulBlock","src":"5058:1143:58","statements":[{"body":{"nativeSrc":"5105:16:58","nodeType":"YulBlock","src":"5105:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5114:1:58","nodeType":"YulLiteral","src":"5114:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5117:1:58","nodeType":"YulLiteral","src":"5117:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5107:6:58","nodeType":"YulIdentifier","src":"5107:6:58"},"nativeSrc":"5107:12:58","nodeType":"YulFunctionCall","src":"5107:12:58"},"nativeSrc":"5107:12:58","nodeType":"YulExpressionStatement","src":"5107:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5079:7:58","nodeType":"YulIdentifier","src":"5079:7:58"},{"name":"headStart","nativeSrc":"5088:9:58","nodeType":"YulIdentifier","src":"5088:9:58"}],"functionName":{"name":"sub","nativeSrc":"5075:3:58","nodeType":"YulIdentifier","src":"5075:3:58"},"nativeSrc":"5075:23:58","nodeType":"YulFunctionCall","src":"5075:23:58"},{"kind":"number","nativeSrc":"5100:3:58","nodeType":"YulLiteral","src":"5100:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"5071:3:58","nodeType":"YulIdentifier","src":"5071:3:58"},"nativeSrc":"5071:33:58","nodeType":"YulFunctionCall","src":"5071:33:58"},"nativeSrc":"5068:53:58","nodeType":"YulIf","src":"5068:53:58"},{"nativeSrc":"5130:37:58","nodeType":"YulVariableDeclaration","src":"5130:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"5157:9:58","nodeType":"YulIdentifier","src":"5157:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"5144:12:58","nodeType":"YulIdentifier","src":"5144:12:58"},"nativeSrc":"5144:23:58","nodeType":"YulFunctionCall","src":"5144:23:58"},"variables":[{"name":"offset","nativeSrc":"5134:6:58","nodeType":"YulTypedName","src":"5134:6:58","type":""}]},{"nativeSrc":"5176:28:58","nodeType":"YulVariableDeclaration","src":"5176:28:58","value":{"kind":"number","nativeSrc":"5186:18:58","nodeType":"YulLiteral","src":"5186:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"5180:2:58","nodeType":"YulTypedName","src":"5180:2:58","type":""}]},{"body":{"nativeSrc":"5231:16:58","nodeType":"YulBlock","src":"5231:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5240:1:58","nodeType":"YulLiteral","src":"5240:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5243:1:58","nodeType":"YulLiteral","src":"5243:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5233:6:58","nodeType":"YulIdentifier","src":"5233:6:58"},"nativeSrc":"5233:12:58","nodeType":"YulFunctionCall","src":"5233:12:58"},"nativeSrc":"5233:12:58","nodeType":"YulExpressionStatement","src":"5233:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"5219:6:58","nodeType":"YulIdentifier","src":"5219:6:58"},{"name":"_1","nativeSrc":"5227:2:58","nodeType":"YulIdentifier","src":"5227:2:58"}],"functionName":{"name":"gt","nativeSrc":"5216:2:58","nodeType":"YulIdentifier","src":"5216:2:58"},"nativeSrc":"5216:14:58","nodeType":"YulFunctionCall","src":"5216:14:58"},"nativeSrc":"5213:34:58","nodeType":"YulIf","src":"5213:34:58"},{"nativeSrc":"5256:96:58","nodeType":"YulVariableDeclaration","src":"5256:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5324:9:58","nodeType":"YulIdentifier","src":"5324:9:58"},{"name":"offset","nativeSrc":"5335:6:58","nodeType":"YulIdentifier","src":"5335:6:58"}],"functionName":{"name":"add","nativeSrc":"5320:3:58","nodeType":"YulIdentifier","src":"5320:3:58"},"nativeSrc":"5320:22:58","nodeType":"YulFunctionCall","src":"5320:22:58"},{"name":"dataEnd","nativeSrc":"5344:7:58","nodeType":"YulIdentifier","src":"5344:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5282:37:58","nodeType":"YulIdentifier","src":"5282:37:58"},"nativeSrc":"5282:70:58","nodeType":"YulFunctionCall","src":"5282:70:58"},"variables":[{"name":"value0_1","nativeSrc":"5260:8:58","nodeType":"YulTypedName","src":"5260:8:58","type":""},{"name":"value1_1","nativeSrc":"5270:8:58","nodeType":"YulTypedName","src":"5270:8:58","type":""}]},{"nativeSrc":"5361:18:58","nodeType":"YulAssignment","src":"5361:18:58","value":{"name":"value0_1","nativeSrc":"5371:8:58","nodeType":"YulIdentifier","src":"5371:8:58"},"variableNames":[{"name":"value0","nativeSrc":"5361:6:58","nodeType":"YulIdentifier","src":"5361:6:58"}]},{"nativeSrc":"5388:18:58","nodeType":"YulAssignment","src":"5388:18:58","value":{"name":"value1_1","nativeSrc":"5398:8:58","nodeType":"YulIdentifier","src":"5398:8:58"},"variableNames":[{"name":"value1","nativeSrc":"5388:6:58","nodeType":"YulIdentifier","src":"5388:6:58"}]},{"nativeSrc":"5415:48:58","nodeType":"YulVariableDeclaration","src":"5415:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5448:9:58","nodeType":"YulIdentifier","src":"5448:9:58"},{"kind":"number","nativeSrc":"5459:2:58","nodeType":"YulLiteral","src":"5459:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5444:3:58","nodeType":"YulIdentifier","src":"5444:3:58"},"nativeSrc":"5444:18:58","nodeType":"YulFunctionCall","src":"5444:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"5431:12:58","nodeType":"YulIdentifier","src":"5431:12:58"},"nativeSrc":"5431:32:58","nodeType":"YulFunctionCall","src":"5431:32:58"},"variables":[{"name":"offset_1","nativeSrc":"5419:8:58","nodeType":"YulTypedName","src":"5419:8:58","type":""}]},{"body":{"nativeSrc":"5492:16:58","nodeType":"YulBlock","src":"5492:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5501:1:58","nodeType":"YulLiteral","src":"5501:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5504:1:58","nodeType":"YulLiteral","src":"5504:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5494:6:58","nodeType":"YulIdentifier","src":"5494:6:58"},"nativeSrc":"5494:12:58","nodeType":"YulFunctionCall","src":"5494:12:58"},"nativeSrc":"5494:12:58","nodeType":"YulExpressionStatement","src":"5494:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5478:8:58","nodeType":"YulIdentifier","src":"5478:8:58"},{"name":"_1","nativeSrc":"5488:2:58","nodeType":"YulIdentifier","src":"5488:2:58"}],"functionName":{"name":"gt","nativeSrc":"5475:2:58","nodeType":"YulIdentifier","src":"5475:2:58"},"nativeSrc":"5475:16:58","nodeType":"YulFunctionCall","src":"5475:16:58"},"nativeSrc":"5472:36:58","nodeType":"YulIf","src":"5472:36:58"},{"nativeSrc":"5517:98:58","nodeType":"YulVariableDeclaration","src":"5517:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5585:9:58","nodeType":"YulIdentifier","src":"5585:9:58"},{"name":"offset_1","nativeSrc":"5596:8:58","nodeType":"YulIdentifier","src":"5596:8:58"}],"functionName":{"name":"add","nativeSrc":"5581:3:58","nodeType":"YulIdentifier","src":"5581:3:58"},"nativeSrc":"5581:24:58","nodeType":"YulFunctionCall","src":"5581:24:58"},{"name":"dataEnd","nativeSrc":"5607:7:58","nodeType":"YulIdentifier","src":"5607:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5543:37:58","nodeType":"YulIdentifier","src":"5543:37:58"},"nativeSrc":"5543:72:58","nodeType":"YulFunctionCall","src":"5543:72:58"},"variables":[{"name":"value2_1","nativeSrc":"5521:8:58","nodeType":"YulTypedName","src":"5521:8:58","type":""},{"name":"value3_1","nativeSrc":"5531:8:58","nodeType":"YulTypedName","src":"5531:8:58","type":""}]},{"nativeSrc":"5624:18:58","nodeType":"YulAssignment","src":"5624:18:58","value":{"name":"value2_1","nativeSrc":"5634:8:58","nodeType":"YulIdentifier","src":"5634:8:58"},"variableNames":[{"name":"value2","nativeSrc":"5624:6:58","nodeType":"YulIdentifier","src":"5624:6:58"}]},{"nativeSrc":"5651:18:58","nodeType":"YulAssignment","src":"5651:18:58","value":{"name":"value3_1","nativeSrc":"5661:8:58","nodeType":"YulIdentifier","src":"5661:8:58"},"variableNames":[{"name":"value3","nativeSrc":"5651:6:58","nodeType":"YulIdentifier","src":"5651:6:58"}]},{"nativeSrc":"5678:48:58","nodeType":"YulVariableDeclaration","src":"5678:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5711:9:58","nodeType":"YulIdentifier","src":"5711:9:58"},{"kind":"number","nativeSrc":"5722:2:58","nodeType":"YulLiteral","src":"5722:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5707:3:58","nodeType":"YulIdentifier","src":"5707:3:58"},"nativeSrc":"5707:18:58","nodeType":"YulFunctionCall","src":"5707:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"5694:12:58","nodeType":"YulIdentifier","src":"5694:12:58"},"nativeSrc":"5694:32:58","nodeType":"YulFunctionCall","src":"5694:32:58"},"variables":[{"name":"offset_2","nativeSrc":"5682:8:58","nodeType":"YulTypedName","src":"5682:8:58","type":""}]},{"body":{"nativeSrc":"5755:16:58","nodeType":"YulBlock","src":"5755:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5764:1:58","nodeType":"YulLiteral","src":"5764:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5767:1:58","nodeType":"YulLiteral","src":"5767:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5757:6:58","nodeType":"YulIdentifier","src":"5757:6:58"},"nativeSrc":"5757:12:58","nodeType":"YulFunctionCall","src":"5757:12:58"},"nativeSrc":"5757:12:58","nodeType":"YulExpressionStatement","src":"5757:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5741:8:58","nodeType":"YulIdentifier","src":"5741:8:58"},{"name":"_1","nativeSrc":"5751:2:58","nodeType":"YulIdentifier","src":"5751:2:58"}],"functionName":{"name":"gt","nativeSrc":"5738:2:58","nodeType":"YulIdentifier","src":"5738:2:58"},"nativeSrc":"5738:16:58","nodeType":"YulFunctionCall","src":"5738:16:58"},"nativeSrc":"5735:36:58","nodeType":"YulIf","src":"5735:36:58"},{"nativeSrc":"5780:98:58","nodeType":"YulVariableDeclaration","src":"5780:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5848:9:58","nodeType":"YulIdentifier","src":"5848:9:58"},{"name":"offset_2","nativeSrc":"5859:8:58","nodeType":"YulIdentifier","src":"5859:8:58"}],"functionName":{"name":"add","nativeSrc":"5844:3:58","nodeType":"YulIdentifier","src":"5844:3:58"},"nativeSrc":"5844:24:58","nodeType":"YulFunctionCall","src":"5844:24:58"},{"name":"dataEnd","nativeSrc":"5870:7:58","nodeType":"YulIdentifier","src":"5870:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5806:37:58","nodeType":"YulIdentifier","src":"5806:37:58"},"nativeSrc":"5806:72:58","nodeType":"YulFunctionCall","src":"5806:72:58"},"variables":[{"name":"value4_1","nativeSrc":"5784:8:58","nodeType":"YulTypedName","src":"5784:8:58","type":""},{"name":"value5_1","nativeSrc":"5794:8:58","nodeType":"YulTypedName","src":"5794:8:58","type":""}]},{"nativeSrc":"5887:18:58","nodeType":"YulAssignment","src":"5887:18:58","value":{"name":"value4_1","nativeSrc":"5897:8:58","nodeType":"YulIdentifier","src":"5897:8:58"},"variableNames":[{"name":"value4","nativeSrc":"5887:6:58","nodeType":"YulIdentifier","src":"5887:6:58"}]},{"nativeSrc":"5914:18:58","nodeType":"YulAssignment","src":"5914:18:58","value":{"name":"value5_1","nativeSrc":"5924:8:58","nodeType":"YulIdentifier","src":"5924:8:58"},"variableNames":[{"name":"value5","nativeSrc":"5914:6:58","nodeType":"YulIdentifier","src":"5914:6:58"}]},{"nativeSrc":"5941:48:58","nodeType":"YulVariableDeclaration","src":"5941:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5974:9:58","nodeType":"YulIdentifier","src":"5974:9:58"},{"kind":"number","nativeSrc":"5985:2:58","nodeType":"YulLiteral","src":"5985:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5970:3:58","nodeType":"YulIdentifier","src":"5970:3:58"},"nativeSrc":"5970:18:58","nodeType":"YulFunctionCall","src":"5970:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"5957:12:58","nodeType":"YulIdentifier","src":"5957:12:58"},"nativeSrc":"5957:32:58","nodeType":"YulFunctionCall","src":"5957:32:58"},"variables":[{"name":"offset_3","nativeSrc":"5945:8:58","nodeType":"YulTypedName","src":"5945:8:58","type":""}]},{"body":{"nativeSrc":"6018:16:58","nodeType":"YulBlock","src":"6018:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6027:1:58","nodeType":"YulLiteral","src":"6027:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6030:1:58","nodeType":"YulLiteral","src":"6030:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6020:6:58","nodeType":"YulIdentifier","src":"6020:6:58"},"nativeSrc":"6020:12:58","nodeType":"YulFunctionCall","src":"6020:12:58"},"nativeSrc":"6020:12:58","nodeType":"YulExpressionStatement","src":"6020:12:58"}]},"condition":{"arguments":[{"name":"offset_3","nativeSrc":"6004:8:58","nodeType":"YulIdentifier","src":"6004:8:58"},{"name":"_1","nativeSrc":"6014:2:58","nodeType":"YulIdentifier","src":"6014:2:58"}],"functionName":{"name":"gt","nativeSrc":"6001:2:58","nodeType":"YulIdentifier","src":"6001:2:58"},"nativeSrc":"6001:16:58","nodeType":"YulFunctionCall","src":"6001:16:58"},"nativeSrc":"5998:36:58","nodeType":"YulIf","src":"5998:36:58"},{"nativeSrc":"6043:98:58","nodeType":"YulVariableDeclaration","src":"6043:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6111:9:58","nodeType":"YulIdentifier","src":"6111:9:58"},{"name":"offset_3","nativeSrc":"6122:8:58","nodeType":"YulIdentifier","src":"6122:8:58"}],"functionName":{"name":"add","nativeSrc":"6107:3:58","nodeType":"YulIdentifier","src":"6107:3:58"},"nativeSrc":"6107:24:58","nodeType":"YulFunctionCall","src":"6107:24:58"},{"name":"dataEnd","nativeSrc":"6133:7:58","nodeType":"YulIdentifier","src":"6133:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"6069:37:58","nodeType":"YulIdentifier","src":"6069:37:58"},"nativeSrc":"6069:72:58","nodeType":"YulFunctionCall","src":"6069:72:58"},"variables":[{"name":"value6_1","nativeSrc":"6047:8:58","nodeType":"YulTypedName","src":"6047:8:58","type":""},{"name":"value7_1","nativeSrc":"6057:8:58","nodeType":"YulTypedName","src":"6057:8:58","type":""}]},{"nativeSrc":"6150:18:58","nodeType":"YulAssignment","src":"6150:18:58","value":{"name":"value6_1","nativeSrc":"6160:8:58","nodeType":"YulIdentifier","src":"6160:8:58"},"variableNames":[{"name":"value6","nativeSrc":"6150:6:58","nodeType":"YulIdentifier","src":"6150:6:58"}]},{"nativeSrc":"6177:18:58","nodeType":"YulAssignment","src":"6177:18:58","value":{"name":"value7_1","nativeSrc":"6187:8:58","nodeType":"YulIdentifier","src":"6187:8:58"},"variableNames":[{"name":"value7","nativeSrc":"6177:6:58","nodeType":"YulIdentifier","src":"6177:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr","nativeSrc":"4800:1401:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4968:9:58","nodeType":"YulTypedName","src":"4968:9:58","type":""},{"name":"dataEnd","nativeSrc":"4979:7:58","nodeType":"YulTypedName","src":"4979:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4991:6:58","nodeType":"YulTypedName","src":"4991:6:58","type":""},{"name":"value1","nativeSrc":"4999:6:58","nodeType":"YulTypedName","src":"4999:6:58","type":""},{"name":"value2","nativeSrc":"5007:6:58","nodeType":"YulTypedName","src":"5007:6:58","type":""},{"name":"value3","nativeSrc":"5015:6:58","nodeType":"YulTypedName","src":"5015:6:58","type":""},{"name":"value4","nativeSrc":"5023:6:58","nodeType":"YulTypedName","src":"5023:6:58","type":""},{"name":"value5","nativeSrc":"5031:6:58","nodeType":"YulTypedName","src":"5031:6:58","type":""},{"name":"value6","nativeSrc":"5039:6:58","nodeType":"YulTypedName","src":"5039:6:58","type":""},{"name":"value7","nativeSrc":"5047:6:58","nodeType":"YulTypedName","src":"5047:6:58","type":""}],"src":"4800:1401:58"},{"body":{"nativeSrc":"6284:177:58","nodeType":"YulBlock","src":"6284:177:58","statements":[{"body":{"nativeSrc":"6330:16:58","nodeType":"YulBlock","src":"6330:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6339:1:58","nodeType":"YulLiteral","src":"6339:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6342:1:58","nodeType":"YulLiteral","src":"6342:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6332:6:58","nodeType":"YulIdentifier","src":"6332:6:58"},"nativeSrc":"6332:12:58","nodeType":"YulFunctionCall","src":"6332:12:58"},"nativeSrc":"6332:12:58","nodeType":"YulExpressionStatement","src":"6332:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6305:7:58","nodeType":"YulIdentifier","src":"6305:7:58"},{"name":"headStart","nativeSrc":"6314:9:58","nodeType":"YulIdentifier","src":"6314:9:58"}],"functionName":{"name":"sub","nativeSrc":"6301:3:58","nodeType":"YulIdentifier","src":"6301:3:58"},"nativeSrc":"6301:23:58","nodeType":"YulFunctionCall","src":"6301:23:58"},{"kind":"number","nativeSrc":"6326:2:58","nodeType":"YulLiteral","src":"6326:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"6297:3:58","nodeType":"YulIdentifier","src":"6297:3:58"},"nativeSrc":"6297:32:58","nodeType":"YulFunctionCall","src":"6297:32:58"},"nativeSrc":"6294:52:58","nodeType":"YulIf","src":"6294:52:58"},{"nativeSrc":"6355:36:58","nodeType":"YulVariableDeclaration","src":"6355:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"6381:9:58","nodeType":"YulIdentifier","src":"6381:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"6368:12:58","nodeType":"YulIdentifier","src":"6368:12:58"},"nativeSrc":"6368:23:58","nodeType":"YulFunctionCall","src":"6368:23:58"},"variables":[{"name":"value","nativeSrc":"6359:5:58","nodeType":"YulTypedName","src":"6359:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"6425:5:58","nodeType":"YulIdentifier","src":"6425:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"6400:24:58","nodeType":"YulIdentifier","src":"6400:24:58"},"nativeSrc":"6400:31:58","nodeType":"YulFunctionCall","src":"6400:31:58"},"nativeSrc":"6400:31:58","nodeType":"YulExpressionStatement","src":"6400:31:58"},{"nativeSrc":"6440:15:58","nodeType":"YulAssignment","src":"6440:15:58","value":{"name":"value","nativeSrc":"6450:5:58","nodeType":"YulIdentifier","src":"6450:5:58"},"variableNames":[{"name":"value0","nativeSrc":"6440:6:58","nodeType":"YulIdentifier","src":"6440:6:58"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"6206:255:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6250:9:58","nodeType":"YulTypedName","src":"6250:9:58","type":""},{"name":"dataEnd","nativeSrc":"6261:7:58","nodeType":"YulTypedName","src":"6261:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6273:6:58","nodeType":"YulTypedName","src":"6273:6:58","type":""}],"src":"6206:255:58"},{"body":{"nativeSrc":"6567:76:58","nodeType":"YulBlock","src":"6567:76:58","statements":[{"nativeSrc":"6577:26:58","nodeType":"YulAssignment","src":"6577:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"6589:9:58","nodeType":"YulIdentifier","src":"6589:9:58"},{"kind":"number","nativeSrc":"6600:2:58","nodeType":"YulLiteral","src":"6600:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6585:3:58","nodeType":"YulIdentifier","src":"6585:3:58"},"nativeSrc":"6585:18:58","nodeType":"YulFunctionCall","src":"6585:18:58"},"variableNames":[{"name":"tail","nativeSrc":"6577:4:58","nodeType":"YulIdentifier","src":"6577:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6619:9:58","nodeType":"YulIdentifier","src":"6619:9:58"},{"name":"value0","nativeSrc":"6630:6:58","nodeType":"YulIdentifier","src":"6630:6:58"}],"functionName":{"name":"mstore","nativeSrc":"6612:6:58","nodeType":"YulIdentifier","src":"6612:6:58"},"nativeSrc":"6612:25:58","nodeType":"YulFunctionCall","src":"6612:25:58"},"nativeSrc":"6612:25:58","nodeType":"YulExpressionStatement","src":"6612:25:58"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"6466:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6536:9:58","nodeType":"YulTypedName","src":"6536:9:58","type":""},{"name":"value0","nativeSrc":"6547:6:58","nodeType":"YulTypedName","src":"6547:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6558:4:58","nodeType":"YulTypedName","src":"6558:4:58","type":""}],"src":"6466:177:58"},{"body":{"nativeSrc":"6872:879:58","nodeType":"YulBlock","src":"6872:879:58","statements":[{"body":{"nativeSrc":"6918:16:58","nodeType":"YulBlock","src":"6918:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6927:1:58","nodeType":"YulLiteral","src":"6927:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6930:1:58","nodeType":"YulLiteral","src":"6930:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6920:6:58","nodeType":"YulIdentifier","src":"6920:6:58"},"nativeSrc":"6920:12:58","nodeType":"YulFunctionCall","src":"6920:12:58"},"nativeSrc":"6920:12:58","nodeType":"YulExpressionStatement","src":"6920:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6893:7:58","nodeType":"YulIdentifier","src":"6893:7:58"},{"name":"headStart","nativeSrc":"6902:9:58","nodeType":"YulIdentifier","src":"6902:9:58"}],"functionName":{"name":"sub","nativeSrc":"6889:3:58","nodeType":"YulIdentifier","src":"6889:3:58"},"nativeSrc":"6889:23:58","nodeType":"YulFunctionCall","src":"6889:23:58"},{"kind":"number","nativeSrc":"6914:2:58","nodeType":"YulLiteral","src":"6914:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6885:3:58","nodeType":"YulIdentifier","src":"6885:3:58"},"nativeSrc":"6885:32:58","nodeType":"YulFunctionCall","src":"6885:32:58"},"nativeSrc":"6882:52:58","nodeType":"YulIf","src":"6882:52:58"},{"nativeSrc":"6943:37:58","nodeType":"YulVariableDeclaration","src":"6943:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"6970:9:58","nodeType":"YulIdentifier","src":"6970:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"6957:12:58","nodeType":"YulIdentifier","src":"6957:12:58"},"nativeSrc":"6957:23:58","nodeType":"YulFunctionCall","src":"6957:23:58"},"variables":[{"name":"offset","nativeSrc":"6947:6:58","nodeType":"YulTypedName","src":"6947:6:58","type":""}]},{"nativeSrc":"6989:28:58","nodeType":"YulVariableDeclaration","src":"6989:28:58","value":{"kind":"number","nativeSrc":"6999:18:58","nodeType":"YulLiteral","src":"6999:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6993:2:58","nodeType":"YulTypedName","src":"6993:2:58","type":""}]},{"body":{"nativeSrc":"7044:16:58","nodeType":"YulBlock","src":"7044:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7053:1:58","nodeType":"YulLiteral","src":"7053:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7056:1:58","nodeType":"YulLiteral","src":"7056:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7046:6:58","nodeType":"YulIdentifier","src":"7046:6:58"},"nativeSrc":"7046:12:58","nodeType":"YulFunctionCall","src":"7046:12:58"},"nativeSrc":"7046:12:58","nodeType":"YulExpressionStatement","src":"7046:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"7032:6:58","nodeType":"YulIdentifier","src":"7032:6:58"},{"name":"_1","nativeSrc":"7040:2:58","nodeType":"YulIdentifier","src":"7040:2:58"}],"functionName":{"name":"gt","nativeSrc":"7029:2:58","nodeType":"YulIdentifier","src":"7029:2:58"},"nativeSrc":"7029:14:58","nodeType":"YulFunctionCall","src":"7029:14:58"},"nativeSrc":"7026:34:58","nodeType":"YulIf","src":"7026:34:58"},{"nativeSrc":"7069:96:58","nodeType":"YulVariableDeclaration","src":"7069:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7137:9:58","nodeType":"YulIdentifier","src":"7137:9:58"},{"name":"offset","nativeSrc":"7148:6:58","nodeType":"YulIdentifier","src":"7148:6:58"}],"functionName":{"name":"add","nativeSrc":"7133:3:58","nodeType":"YulIdentifier","src":"7133:3:58"},"nativeSrc":"7133:22:58","nodeType":"YulFunctionCall","src":"7133:22:58"},{"name":"dataEnd","nativeSrc":"7157:7:58","nodeType":"YulIdentifier","src":"7157:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7095:37:58","nodeType":"YulIdentifier","src":"7095:37:58"},"nativeSrc":"7095:70:58","nodeType":"YulFunctionCall","src":"7095:70:58"},"variables":[{"name":"value0_1","nativeSrc":"7073:8:58","nodeType":"YulTypedName","src":"7073:8:58","type":""},{"name":"value1_1","nativeSrc":"7083:8:58","nodeType":"YulTypedName","src":"7083:8:58","type":""}]},{"nativeSrc":"7174:18:58","nodeType":"YulAssignment","src":"7174:18:58","value":{"name":"value0_1","nativeSrc":"7184:8:58","nodeType":"YulIdentifier","src":"7184:8:58"},"variableNames":[{"name":"value0","nativeSrc":"7174:6:58","nodeType":"YulIdentifier","src":"7174:6:58"}]},{"nativeSrc":"7201:18:58","nodeType":"YulAssignment","src":"7201:18:58","value":{"name":"value1_1","nativeSrc":"7211:8:58","nodeType":"YulIdentifier","src":"7211:8:58"},"variableNames":[{"name":"value1","nativeSrc":"7201:6:58","nodeType":"YulIdentifier","src":"7201:6:58"}]},{"nativeSrc":"7228:48:58","nodeType":"YulVariableDeclaration","src":"7228:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7261:9:58","nodeType":"YulIdentifier","src":"7261:9:58"},{"kind":"number","nativeSrc":"7272:2:58","nodeType":"YulLiteral","src":"7272:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7257:3:58","nodeType":"YulIdentifier","src":"7257:3:58"},"nativeSrc":"7257:18:58","nodeType":"YulFunctionCall","src":"7257:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"7244:12:58","nodeType":"YulIdentifier","src":"7244:12:58"},"nativeSrc":"7244:32:58","nodeType":"YulFunctionCall","src":"7244:32:58"},"variables":[{"name":"offset_1","nativeSrc":"7232:8:58","nodeType":"YulTypedName","src":"7232:8:58","type":""}]},{"body":{"nativeSrc":"7305:16:58","nodeType":"YulBlock","src":"7305:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7314:1:58","nodeType":"YulLiteral","src":"7314:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7317:1:58","nodeType":"YulLiteral","src":"7317:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7307:6:58","nodeType":"YulIdentifier","src":"7307:6:58"},"nativeSrc":"7307:12:58","nodeType":"YulFunctionCall","src":"7307:12:58"},"nativeSrc":"7307:12:58","nodeType":"YulExpressionStatement","src":"7307:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"7291:8:58","nodeType":"YulIdentifier","src":"7291:8:58"},{"name":"_1","nativeSrc":"7301:2:58","nodeType":"YulIdentifier","src":"7301:2:58"}],"functionName":{"name":"gt","nativeSrc":"7288:2:58","nodeType":"YulIdentifier","src":"7288:2:58"},"nativeSrc":"7288:16:58","nodeType":"YulFunctionCall","src":"7288:16:58"},"nativeSrc":"7285:36:58","nodeType":"YulIf","src":"7285:36:58"},{"nativeSrc":"7330:98:58","nodeType":"YulVariableDeclaration","src":"7330:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7398:9:58","nodeType":"YulIdentifier","src":"7398:9:58"},{"name":"offset_1","nativeSrc":"7409:8:58","nodeType":"YulIdentifier","src":"7409:8:58"}],"functionName":{"name":"add","nativeSrc":"7394:3:58","nodeType":"YulIdentifier","src":"7394:3:58"},"nativeSrc":"7394:24:58","nodeType":"YulFunctionCall","src":"7394:24:58"},{"name":"dataEnd","nativeSrc":"7420:7:58","nodeType":"YulIdentifier","src":"7420:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7356:37:58","nodeType":"YulIdentifier","src":"7356:37:58"},"nativeSrc":"7356:72:58","nodeType":"YulFunctionCall","src":"7356:72:58"},"variables":[{"name":"value2_1","nativeSrc":"7334:8:58","nodeType":"YulTypedName","src":"7334:8:58","type":""},{"name":"value3_1","nativeSrc":"7344:8:58","nodeType":"YulTypedName","src":"7344:8:58","type":""}]},{"nativeSrc":"7437:18:58","nodeType":"YulAssignment","src":"7437:18:58","value":{"name":"value2_1","nativeSrc":"7447:8:58","nodeType":"YulIdentifier","src":"7447:8:58"},"variableNames":[{"name":"value2","nativeSrc":"7437:6:58","nodeType":"YulIdentifier","src":"7437:6:58"}]},{"nativeSrc":"7464:18:58","nodeType":"YulAssignment","src":"7464:18:58","value":{"name":"value3_1","nativeSrc":"7474:8:58","nodeType":"YulIdentifier","src":"7474:8:58"},"variableNames":[{"name":"value3","nativeSrc":"7464:6:58","nodeType":"YulIdentifier","src":"7464:6:58"}]},{"nativeSrc":"7491:48:58","nodeType":"YulVariableDeclaration","src":"7491:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7524:9:58","nodeType":"YulIdentifier","src":"7524:9:58"},{"kind":"number","nativeSrc":"7535:2:58","nodeType":"YulLiteral","src":"7535:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7520:3:58","nodeType":"YulIdentifier","src":"7520:3:58"},"nativeSrc":"7520:18:58","nodeType":"YulFunctionCall","src":"7520:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"7507:12:58","nodeType":"YulIdentifier","src":"7507:12:58"},"nativeSrc":"7507:32:58","nodeType":"YulFunctionCall","src":"7507:32:58"},"variables":[{"name":"offset_2","nativeSrc":"7495:8:58","nodeType":"YulTypedName","src":"7495:8:58","type":""}]},{"body":{"nativeSrc":"7568:16:58","nodeType":"YulBlock","src":"7568:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7577:1:58","nodeType":"YulLiteral","src":"7577:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7580:1:58","nodeType":"YulLiteral","src":"7580:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7570:6:58","nodeType":"YulIdentifier","src":"7570:6:58"},"nativeSrc":"7570:12:58","nodeType":"YulFunctionCall","src":"7570:12:58"},"nativeSrc":"7570:12:58","nodeType":"YulExpressionStatement","src":"7570:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7554:8:58","nodeType":"YulIdentifier","src":"7554:8:58"},{"name":"_1","nativeSrc":"7564:2:58","nodeType":"YulIdentifier","src":"7564:2:58"}],"functionName":{"name":"gt","nativeSrc":"7551:2:58","nodeType":"YulIdentifier","src":"7551:2:58"},"nativeSrc":"7551:16:58","nodeType":"YulFunctionCall","src":"7551:16:58"},"nativeSrc":"7548:36:58","nodeType":"YulIf","src":"7548:36:58"},{"nativeSrc":"7593:98:58","nodeType":"YulVariableDeclaration","src":"7593:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7661:9:58","nodeType":"YulIdentifier","src":"7661:9:58"},{"name":"offset_2","nativeSrc":"7672:8:58","nodeType":"YulIdentifier","src":"7672:8:58"}],"functionName":{"name":"add","nativeSrc":"7657:3:58","nodeType":"YulIdentifier","src":"7657:3:58"},"nativeSrc":"7657:24:58","nodeType":"YulFunctionCall","src":"7657:24:58"},{"name":"dataEnd","nativeSrc":"7683:7:58","nodeType":"YulIdentifier","src":"7683:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7619:37:58","nodeType":"YulIdentifier","src":"7619:37:58"},"nativeSrc":"7619:72:58","nodeType":"YulFunctionCall","src":"7619:72:58"},"variables":[{"name":"value4_1","nativeSrc":"7597:8:58","nodeType":"YulTypedName","src":"7597:8:58","type":""},{"name":"value5_1","nativeSrc":"7607:8:58","nodeType":"YulTypedName","src":"7607:8:58","type":""}]},{"nativeSrc":"7700:18:58","nodeType":"YulAssignment","src":"7700:18:58","value":{"name":"value4_1","nativeSrc":"7710:8:58","nodeType":"YulIdentifier","src":"7710:8:58"},"variableNames":[{"name":"value4","nativeSrc":"7700:6:58","nodeType":"YulIdentifier","src":"7700:6:58"}]},{"nativeSrc":"7727:18:58","nodeType":"YulAssignment","src":"7727:18:58","value":{"name":"value5_1","nativeSrc":"7737:8:58","nodeType":"YulIdentifier","src":"7737:8:58"},"variableNames":[{"name":"value5","nativeSrc":"7727:6:58","nodeType":"YulIdentifier","src":"7727:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6648:1103:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6798:9:58","nodeType":"YulTypedName","src":"6798:9:58","type":""},{"name":"dataEnd","nativeSrc":"6809:7:58","nodeType":"YulTypedName","src":"6809:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6821:6:58","nodeType":"YulTypedName","src":"6821:6:58","type":""},{"name":"value1","nativeSrc":"6829:6:58","nodeType":"YulTypedName","src":"6829:6:58","type":""},{"name":"value2","nativeSrc":"6837:6:58","nodeType":"YulTypedName","src":"6837:6:58","type":""},{"name":"value3","nativeSrc":"6845:6:58","nodeType":"YulTypedName","src":"6845:6:58","type":""},{"name":"value4","nativeSrc":"6853:6:58","nodeType":"YulTypedName","src":"6853:6:58","type":""},{"name":"value5","nativeSrc":"6861:6:58","nodeType":"YulTypedName","src":"6861:6:58","type":""}],"src":"6648:1103:58"},{"body":{"nativeSrc":"7873:125:58","nodeType":"YulBlock","src":"7873:125:58","statements":[{"nativeSrc":"7883:26:58","nodeType":"YulAssignment","src":"7883:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"7895:9:58","nodeType":"YulIdentifier","src":"7895:9:58"},{"kind":"number","nativeSrc":"7906:2:58","nodeType":"YulLiteral","src":"7906:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7891:3:58","nodeType":"YulIdentifier","src":"7891:3:58"},"nativeSrc":"7891:18:58","nodeType":"YulFunctionCall","src":"7891:18:58"},"variableNames":[{"name":"tail","nativeSrc":"7883:4:58","nodeType":"YulIdentifier","src":"7883:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7925:9:58","nodeType":"YulIdentifier","src":"7925:9:58"},{"arguments":[{"name":"value0","nativeSrc":"7940:6:58","nodeType":"YulIdentifier","src":"7940:6:58"},{"kind":"number","nativeSrc":"7948:42:58","nodeType":"YulLiteral","src":"7948:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7936:3:58","nodeType":"YulIdentifier","src":"7936:3:58"},"nativeSrc":"7936:55:58","nodeType":"YulFunctionCall","src":"7936:55:58"}],"functionName":{"name":"mstore","nativeSrc":"7918:6:58","nodeType":"YulIdentifier","src":"7918:6:58"},"nativeSrc":"7918:74:58","nodeType":"YulFunctionCall","src":"7918:74:58"},"nativeSrc":"7918:74:58","nodeType":"YulExpressionStatement","src":"7918:74:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nativeSrc":"7756:242:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7842:9:58","nodeType":"YulTypedName","src":"7842:9:58","type":""},{"name":"value0","nativeSrc":"7853:6:58","nodeType":"YulTypedName","src":"7853:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7864:4:58","nodeType":"YulTypedName","src":"7864:4:58","type":""}],"src":"7756:242:58"},{"body":{"nativeSrc":"8073:110:58","nodeType":"YulBlock","src":"8073:110:58","statements":[{"body":{"nativeSrc":"8119:16:58","nodeType":"YulBlock","src":"8119:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8128:1:58","nodeType":"YulLiteral","src":"8128:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8131:1:58","nodeType":"YulLiteral","src":"8131:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8121:6:58","nodeType":"YulIdentifier","src":"8121:6:58"},"nativeSrc":"8121:12:58","nodeType":"YulFunctionCall","src":"8121:12:58"},"nativeSrc":"8121:12:58","nodeType":"YulExpressionStatement","src":"8121:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8094:7:58","nodeType":"YulIdentifier","src":"8094:7:58"},{"name":"headStart","nativeSrc":"8103:9:58","nodeType":"YulIdentifier","src":"8103:9:58"}],"functionName":{"name":"sub","nativeSrc":"8090:3:58","nodeType":"YulIdentifier","src":"8090:3:58"},"nativeSrc":"8090:23:58","nodeType":"YulFunctionCall","src":"8090:23:58"},{"kind":"number","nativeSrc":"8115:2:58","nodeType":"YulLiteral","src":"8115:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"8086:3:58","nodeType":"YulIdentifier","src":"8086:3:58"},"nativeSrc":"8086:32:58","nodeType":"YulFunctionCall","src":"8086:32:58"},"nativeSrc":"8083:52:58","nodeType":"YulIf","src":"8083:52:58"},{"nativeSrc":"8144:33:58","nodeType":"YulAssignment","src":"8144:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"8167:9:58","nodeType":"YulIdentifier","src":"8167:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"8154:12:58","nodeType":"YulIdentifier","src":"8154:12:58"},"nativeSrc":"8154:23:58","nodeType":"YulFunctionCall","src":"8154:23:58"},"variableNames":[{"name":"value0","nativeSrc":"8144:6:58","nodeType":"YulIdentifier","src":"8144:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"8003:180:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8039:9:58","nodeType":"YulTypedName","src":"8039:9:58","type":""},{"name":"dataEnd","nativeSrc":"8050:7:58","nodeType":"YulTypedName","src":"8050:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8062:6:58","nodeType":"YulTypedName","src":"8062:6:58","type":""}],"src":"8003:180:58"},{"body":{"nativeSrc":"8275:228:58","nodeType":"YulBlock","src":"8275:228:58","statements":[{"body":{"nativeSrc":"8321:16:58","nodeType":"YulBlock","src":"8321:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8330:1:58","nodeType":"YulLiteral","src":"8330:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8333:1:58","nodeType":"YulLiteral","src":"8333:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8323:6:58","nodeType":"YulIdentifier","src":"8323:6:58"},"nativeSrc":"8323:12:58","nodeType":"YulFunctionCall","src":"8323:12:58"},"nativeSrc":"8323:12:58","nodeType":"YulExpressionStatement","src":"8323:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8296:7:58","nodeType":"YulIdentifier","src":"8296:7:58"},{"name":"headStart","nativeSrc":"8305:9:58","nodeType":"YulIdentifier","src":"8305:9:58"}],"functionName":{"name":"sub","nativeSrc":"8292:3:58","nodeType":"YulIdentifier","src":"8292:3:58"},"nativeSrc":"8292:23:58","nodeType":"YulFunctionCall","src":"8292:23:58"},{"kind":"number","nativeSrc":"8317:2:58","nodeType":"YulLiteral","src":"8317:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"8288:3:58","nodeType":"YulIdentifier","src":"8288:3:58"},"nativeSrc":"8288:32:58","nodeType":"YulFunctionCall","src":"8288:32:58"},"nativeSrc":"8285:52:58","nodeType":"YulIf","src":"8285:52:58"},{"nativeSrc":"8346:36:58","nodeType":"YulVariableDeclaration","src":"8346:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"8372:9:58","nodeType":"YulIdentifier","src":"8372:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"8359:12:58","nodeType":"YulIdentifier","src":"8359:12:58"},"nativeSrc":"8359:23:58","nodeType":"YulFunctionCall","src":"8359:23:58"},"variables":[{"name":"value","nativeSrc":"8350:5:58","nodeType":"YulTypedName","src":"8350:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"8416:5:58","nodeType":"YulIdentifier","src":"8416:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"8391:24:58","nodeType":"YulIdentifier","src":"8391:24:58"},"nativeSrc":"8391:31:58","nodeType":"YulFunctionCall","src":"8391:31:58"},"nativeSrc":"8391:31:58","nodeType":"YulExpressionStatement","src":"8391:31:58"},{"nativeSrc":"8431:15:58","nodeType":"YulAssignment","src":"8431:15:58","value":{"name":"value","nativeSrc":"8441:5:58","nodeType":"YulIdentifier","src":"8441:5:58"},"variableNames":[{"name":"value0","nativeSrc":"8431:6:58","nodeType":"YulIdentifier","src":"8431:6:58"}]},{"nativeSrc":"8455:42:58","nodeType":"YulAssignment","src":"8455:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8482:9:58","nodeType":"YulIdentifier","src":"8482:9:58"},{"kind":"number","nativeSrc":"8493:2:58","nodeType":"YulLiteral","src":"8493:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8478:3:58","nodeType":"YulIdentifier","src":"8478:3:58"},"nativeSrc":"8478:18:58","nodeType":"YulFunctionCall","src":"8478:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"8465:12:58","nodeType":"YulIdentifier","src":"8465:12:58"},"nativeSrc":"8465:32:58","nodeType":"YulFunctionCall","src":"8465:32:58"},"variableNames":[{"name":"value1","nativeSrc":"8455:6:58","nodeType":"YulIdentifier","src":"8455:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"8188:315:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8233:9:58","nodeType":"YulTypedName","src":"8233:9:58","type":""},{"name":"dataEnd","nativeSrc":"8244:7:58","nodeType":"YulTypedName","src":"8244:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8256:6:58","nodeType":"YulTypedName","src":"8256:6:58","type":""},{"name":"value1","nativeSrc":"8264:6:58","nodeType":"YulTypedName","src":"8264:6:58","type":""}],"src":"8188:315:58"},{"body":{"nativeSrc":"8733:879:58","nodeType":"YulBlock","src":"8733:879:58","statements":[{"body":{"nativeSrc":"8779:16:58","nodeType":"YulBlock","src":"8779:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8788:1:58","nodeType":"YulLiteral","src":"8788:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8791:1:58","nodeType":"YulLiteral","src":"8791:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8781:6:58","nodeType":"YulIdentifier","src":"8781:6:58"},"nativeSrc":"8781:12:58","nodeType":"YulFunctionCall","src":"8781:12:58"},"nativeSrc":"8781:12:58","nodeType":"YulExpressionStatement","src":"8781:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8754:7:58","nodeType":"YulIdentifier","src":"8754:7:58"},{"name":"headStart","nativeSrc":"8763:9:58","nodeType":"YulIdentifier","src":"8763:9:58"}],"functionName":{"name":"sub","nativeSrc":"8750:3:58","nodeType":"YulIdentifier","src":"8750:3:58"},"nativeSrc":"8750:23:58","nodeType":"YulFunctionCall","src":"8750:23:58"},{"kind":"number","nativeSrc":"8775:2:58","nodeType":"YulLiteral","src":"8775:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"8746:3:58","nodeType":"YulIdentifier","src":"8746:3:58"},"nativeSrc":"8746:32:58","nodeType":"YulFunctionCall","src":"8746:32:58"},"nativeSrc":"8743:52:58","nodeType":"YulIf","src":"8743:52:58"},{"nativeSrc":"8804:37:58","nodeType":"YulVariableDeclaration","src":"8804:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"8831:9:58","nodeType":"YulIdentifier","src":"8831:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"8818:12:58","nodeType":"YulIdentifier","src":"8818:12:58"},"nativeSrc":"8818:23:58","nodeType":"YulFunctionCall","src":"8818:23:58"},"variables":[{"name":"offset","nativeSrc":"8808:6:58","nodeType":"YulTypedName","src":"8808:6:58","type":""}]},{"nativeSrc":"8850:28:58","nodeType":"YulVariableDeclaration","src":"8850:28:58","value":{"kind":"number","nativeSrc":"8860:18:58","nodeType":"YulLiteral","src":"8860:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8854:2:58","nodeType":"YulTypedName","src":"8854:2:58","type":""}]},{"body":{"nativeSrc":"8905:16:58","nodeType":"YulBlock","src":"8905:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8914:1:58","nodeType":"YulLiteral","src":"8914:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8917:1:58","nodeType":"YulLiteral","src":"8917:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8907:6:58","nodeType":"YulIdentifier","src":"8907:6:58"},"nativeSrc":"8907:12:58","nodeType":"YulFunctionCall","src":"8907:12:58"},"nativeSrc":"8907:12:58","nodeType":"YulExpressionStatement","src":"8907:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8893:6:58","nodeType":"YulIdentifier","src":"8893:6:58"},{"name":"_1","nativeSrc":"8901:2:58","nodeType":"YulIdentifier","src":"8901:2:58"}],"functionName":{"name":"gt","nativeSrc":"8890:2:58","nodeType":"YulIdentifier","src":"8890:2:58"},"nativeSrc":"8890:14:58","nodeType":"YulFunctionCall","src":"8890:14:58"},"nativeSrc":"8887:34:58","nodeType":"YulIf","src":"8887:34:58"},{"nativeSrc":"8930:96:58","nodeType":"YulVariableDeclaration","src":"8930:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8998:9:58","nodeType":"YulIdentifier","src":"8998:9:58"},{"name":"offset","nativeSrc":"9009:6:58","nodeType":"YulIdentifier","src":"9009:6:58"}],"functionName":{"name":"add","nativeSrc":"8994:3:58","nodeType":"YulIdentifier","src":"8994:3:58"},"nativeSrc":"8994:22:58","nodeType":"YulFunctionCall","src":"8994:22:58"},{"name":"dataEnd","nativeSrc":"9018:7:58","nodeType":"YulIdentifier","src":"9018:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8956:37:58","nodeType":"YulIdentifier","src":"8956:37:58"},"nativeSrc":"8956:70:58","nodeType":"YulFunctionCall","src":"8956:70:58"},"variables":[{"name":"value0_1","nativeSrc":"8934:8:58","nodeType":"YulTypedName","src":"8934:8:58","type":""},{"name":"value1_1","nativeSrc":"8944:8:58","nodeType":"YulTypedName","src":"8944:8:58","type":""}]},{"nativeSrc":"9035:18:58","nodeType":"YulAssignment","src":"9035:18:58","value":{"name":"value0_1","nativeSrc":"9045:8:58","nodeType":"YulIdentifier","src":"9045:8:58"},"variableNames":[{"name":"value0","nativeSrc":"9035:6:58","nodeType":"YulIdentifier","src":"9035:6:58"}]},{"nativeSrc":"9062:18:58","nodeType":"YulAssignment","src":"9062:18:58","value":{"name":"value1_1","nativeSrc":"9072:8:58","nodeType":"YulIdentifier","src":"9072:8:58"},"variableNames":[{"name":"value1","nativeSrc":"9062:6:58","nodeType":"YulIdentifier","src":"9062:6:58"}]},{"nativeSrc":"9089:48:58","nodeType":"YulVariableDeclaration","src":"9089:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9122:9:58","nodeType":"YulIdentifier","src":"9122:9:58"},{"kind":"number","nativeSrc":"9133:2:58","nodeType":"YulLiteral","src":"9133:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9118:3:58","nodeType":"YulIdentifier","src":"9118:3:58"},"nativeSrc":"9118:18:58","nodeType":"YulFunctionCall","src":"9118:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"9105:12:58","nodeType":"YulIdentifier","src":"9105:12:58"},"nativeSrc":"9105:32:58","nodeType":"YulFunctionCall","src":"9105:32:58"},"variables":[{"name":"offset_1","nativeSrc":"9093:8:58","nodeType":"YulTypedName","src":"9093:8:58","type":""}]},{"body":{"nativeSrc":"9166:16:58","nodeType":"YulBlock","src":"9166:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9175:1:58","nodeType":"YulLiteral","src":"9175:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9178:1:58","nodeType":"YulLiteral","src":"9178:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9168:6:58","nodeType":"YulIdentifier","src":"9168:6:58"},"nativeSrc":"9168:12:58","nodeType":"YulFunctionCall","src":"9168:12:58"},"nativeSrc":"9168:12:58","nodeType":"YulExpressionStatement","src":"9168:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"9152:8:58","nodeType":"YulIdentifier","src":"9152:8:58"},{"name":"_1","nativeSrc":"9162:2:58","nodeType":"YulIdentifier","src":"9162:2:58"}],"functionName":{"name":"gt","nativeSrc":"9149:2:58","nodeType":"YulIdentifier","src":"9149:2:58"},"nativeSrc":"9149:16:58","nodeType":"YulFunctionCall","src":"9149:16:58"},"nativeSrc":"9146:36:58","nodeType":"YulIf","src":"9146:36:58"},{"nativeSrc":"9191:98:58","nodeType":"YulVariableDeclaration","src":"9191:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9259:9:58","nodeType":"YulIdentifier","src":"9259:9:58"},{"name":"offset_1","nativeSrc":"9270:8:58","nodeType":"YulIdentifier","src":"9270:8:58"}],"functionName":{"name":"add","nativeSrc":"9255:3:58","nodeType":"YulIdentifier","src":"9255:3:58"},"nativeSrc":"9255:24:58","nodeType":"YulFunctionCall","src":"9255:24:58"},{"name":"dataEnd","nativeSrc":"9281:7:58","nodeType":"YulIdentifier","src":"9281:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"9217:37:58","nodeType":"YulIdentifier","src":"9217:37:58"},"nativeSrc":"9217:72:58","nodeType":"YulFunctionCall","src":"9217:72:58"},"variables":[{"name":"value2_1","nativeSrc":"9195:8:58","nodeType":"YulTypedName","src":"9195:8:58","type":""},{"name":"value3_1","nativeSrc":"9205:8:58","nodeType":"YulTypedName","src":"9205:8:58","type":""}]},{"nativeSrc":"9298:18:58","nodeType":"YulAssignment","src":"9298:18:58","value":{"name":"value2_1","nativeSrc":"9308:8:58","nodeType":"YulIdentifier","src":"9308:8:58"},"variableNames":[{"name":"value2","nativeSrc":"9298:6:58","nodeType":"YulIdentifier","src":"9298:6:58"}]},{"nativeSrc":"9325:18:58","nodeType":"YulAssignment","src":"9325:18:58","value":{"name":"value3_1","nativeSrc":"9335:8:58","nodeType":"YulIdentifier","src":"9335:8:58"},"variableNames":[{"name":"value3","nativeSrc":"9325:6:58","nodeType":"YulIdentifier","src":"9325:6:58"}]},{"nativeSrc":"9352:48:58","nodeType":"YulVariableDeclaration","src":"9352:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9385:9:58","nodeType":"YulIdentifier","src":"9385:9:58"},{"kind":"number","nativeSrc":"9396:2:58","nodeType":"YulLiteral","src":"9396:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"9381:3:58","nodeType":"YulIdentifier","src":"9381:3:58"},"nativeSrc":"9381:18:58","nodeType":"YulFunctionCall","src":"9381:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"9368:12:58","nodeType":"YulIdentifier","src":"9368:12:58"},"nativeSrc":"9368:32:58","nodeType":"YulFunctionCall","src":"9368:32:58"},"variables":[{"name":"offset_2","nativeSrc":"9356:8:58","nodeType":"YulTypedName","src":"9356:8:58","type":""}]},{"body":{"nativeSrc":"9429:16:58","nodeType":"YulBlock","src":"9429:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9438:1:58","nodeType":"YulLiteral","src":"9438:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9441:1:58","nodeType":"YulLiteral","src":"9441:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9431:6:58","nodeType":"YulIdentifier","src":"9431:6:58"},"nativeSrc":"9431:12:58","nodeType":"YulFunctionCall","src":"9431:12:58"},"nativeSrc":"9431:12:58","nodeType":"YulExpressionStatement","src":"9431:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"9415:8:58","nodeType":"YulIdentifier","src":"9415:8:58"},{"name":"_1","nativeSrc":"9425:2:58","nodeType":"YulIdentifier","src":"9425:2:58"}],"functionName":{"name":"gt","nativeSrc":"9412:2:58","nodeType":"YulIdentifier","src":"9412:2:58"},"nativeSrc":"9412:16:58","nodeType":"YulFunctionCall","src":"9412:16:58"},"nativeSrc":"9409:36:58","nodeType":"YulIf","src":"9409:36:58"},{"nativeSrc":"9454:98:58","nodeType":"YulVariableDeclaration","src":"9454:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9522:9:58","nodeType":"YulIdentifier","src":"9522:9:58"},{"name":"offset_2","nativeSrc":"9533:8:58","nodeType":"YulIdentifier","src":"9533:8:58"}],"functionName":{"name":"add","nativeSrc":"9518:3:58","nodeType":"YulIdentifier","src":"9518:3:58"},"nativeSrc":"9518:24:58","nodeType":"YulFunctionCall","src":"9518:24:58"},{"name":"dataEnd","nativeSrc":"9544:7:58","nodeType":"YulIdentifier","src":"9544:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"9480:37:58","nodeType":"YulIdentifier","src":"9480:37:58"},"nativeSrc":"9480:72:58","nodeType":"YulFunctionCall","src":"9480:72:58"},"variables":[{"name":"value4_1","nativeSrc":"9458:8:58","nodeType":"YulTypedName","src":"9458:8:58","type":""},{"name":"value5_1","nativeSrc":"9468:8:58","nodeType":"YulTypedName","src":"9468:8:58","type":""}]},{"nativeSrc":"9561:18:58","nodeType":"YulAssignment","src":"9561:18:58","value":{"name":"value4_1","nativeSrc":"9571:8:58","nodeType":"YulIdentifier","src":"9571:8:58"},"variableNames":[{"name":"value4","nativeSrc":"9561:6:58","nodeType":"YulIdentifier","src":"9561:6:58"}]},{"nativeSrc":"9588:18:58","nodeType":"YulAssignment","src":"9588:18:58","value":{"name":"value5_1","nativeSrc":"9598:8:58","nodeType":"YulIdentifier","src":"9598:8:58"},"variableNames":[{"name":"value5","nativeSrc":"9588:6:58","nodeType":"YulIdentifier","src":"9588:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"8508:1104:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8659:9:58","nodeType":"YulTypedName","src":"8659:9:58","type":""},{"name":"dataEnd","nativeSrc":"8670:7:58","nodeType":"YulTypedName","src":"8670:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8682:6:58","nodeType":"YulTypedName","src":"8682:6:58","type":""},{"name":"value1","nativeSrc":"8690:6:58","nodeType":"YulTypedName","src":"8690:6:58","type":""},{"name":"value2","nativeSrc":"8698:6:58","nodeType":"YulTypedName","src":"8698:6:58","type":""},{"name":"value3","nativeSrc":"8706:6:58","nodeType":"YulTypedName","src":"8706:6:58","type":""},{"name":"value4","nativeSrc":"8714:6:58","nodeType":"YulTypedName","src":"8714:6:58","type":""},{"name":"value5","nativeSrc":"8722:6:58","nodeType":"YulTypedName","src":"8722:6:58","type":""}],"src":"8508:1104:58"},{"body":{"nativeSrc":"9782:616:58","nodeType":"YulBlock","src":"9782:616:58","statements":[{"body":{"nativeSrc":"9828:16:58","nodeType":"YulBlock","src":"9828:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9837:1:58","nodeType":"YulLiteral","src":"9837:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9840:1:58","nodeType":"YulLiteral","src":"9840:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9830:6:58","nodeType":"YulIdentifier","src":"9830:6:58"},"nativeSrc":"9830:12:58","nodeType":"YulFunctionCall","src":"9830:12:58"},"nativeSrc":"9830:12:58","nodeType":"YulExpressionStatement","src":"9830:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9803:7:58","nodeType":"YulIdentifier","src":"9803:7:58"},{"name":"headStart","nativeSrc":"9812:9:58","nodeType":"YulIdentifier","src":"9812:9:58"}],"functionName":{"name":"sub","nativeSrc":"9799:3:58","nodeType":"YulIdentifier","src":"9799:3:58"},"nativeSrc":"9799:23:58","nodeType":"YulFunctionCall","src":"9799:23:58"},{"kind":"number","nativeSrc":"9824:2:58","nodeType":"YulLiteral","src":"9824:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"9795:3:58","nodeType":"YulIdentifier","src":"9795:3:58"},"nativeSrc":"9795:32:58","nodeType":"YulFunctionCall","src":"9795:32:58"},"nativeSrc":"9792:52:58","nodeType":"YulIf","src":"9792:52:58"},{"nativeSrc":"9853:37:58","nodeType":"YulVariableDeclaration","src":"9853:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"9880:9:58","nodeType":"YulIdentifier","src":"9880:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"9867:12:58","nodeType":"YulIdentifier","src":"9867:12:58"},"nativeSrc":"9867:23:58","nodeType":"YulFunctionCall","src":"9867:23:58"},"variables":[{"name":"offset","nativeSrc":"9857:6:58","nodeType":"YulTypedName","src":"9857:6:58","type":""}]},{"nativeSrc":"9899:28:58","nodeType":"YulVariableDeclaration","src":"9899:28:58","value":{"kind":"number","nativeSrc":"9909:18:58","nodeType":"YulLiteral","src":"9909:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9903:2:58","nodeType":"YulTypedName","src":"9903:2:58","type":""}]},{"body":{"nativeSrc":"9954:16:58","nodeType":"YulBlock","src":"9954:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9963:1:58","nodeType":"YulLiteral","src":"9963:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9966:1:58","nodeType":"YulLiteral","src":"9966:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9956:6:58","nodeType":"YulIdentifier","src":"9956:6:58"},"nativeSrc":"9956:12:58","nodeType":"YulFunctionCall","src":"9956:12:58"},"nativeSrc":"9956:12:58","nodeType":"YulExpressionStatement","src":"9956:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9942:6:58","nodeType":"YulIdentifier","src":"9942:6:58"},{"name":"_1","nativeSrc":"9950:2:58","nodeType":"YulIdentifier","src":"9950:2:58"}],"functionName":{"name":"gt","nativeSrc":"9939:2:58","nodeType":"YulIdentifier","src":"9939:2:58"},"nativeSrc":"9939:14:58","nodeType":"YulFunctionCall","src":"9939:14:58"},"nativeSrc":"9936:34:58","nodeType":"YulIf","src":"9936:34:58"},{"nativeSrc":"9979:96:58","nodeType":"YulVariableDeclaration","src":"9979:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10047:9:58","nodeType":"YulIdentifier","src":"10047:9:58"},{"name":"offset","nativeSrc":"10058:6:58","nodeType":"YulIdentifier","src":"10058:6:58"}],"functionName":{"name":"add","nativeSrc":"10043:3:58","nodeType":"YulIdentifier","src":"10043:3:58"},"nativeSrc":"10043:22:58","nodeType":"YulFunctionCall","src":"10043:22:58"},{"name":"dataEnd","nativeSrc":"10067:7:58","nodeType":"YulIdentifier","src":"10067:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"10005:37:58","nodeType":"YulIdentifier","src":"10005:37:58"},"nativeSrc":"10005:70:58","nodeType":"YulFunctionCall","src":"10005:70:58"},"variables":[{"name":"value0_1","nativeSrc":"9983:8:58","nodeType":"YulTypedName","src":"9983:8:58","type":""},{"name":"value1_1","nativeSrc":"9993:8:58","nodeType":"YulTypedName","src":"9993:8:58","type":""}]},{"nativeSrc":"10084:18:58","nodeType":"YulAssignment","src":"10084:18:58","value":{"name":"value0_1","nativeSrc":"10094:8:58","nodeType":"YulIdentifier","src":"10094:8:58"},"variableNames":[{"name":"value0","nativeSrc":"10084:6:58","nodeType":"YulIdentifier","src":"10084:6:58"}]},{"nativeSrc":"10111:18:58","nodeType":"YulAssignment","src":"10111:18:58","value":{"name":"value1_1","nativeSrc":"10121:8:58","nodeType":"YulIdentifier","src":"10121:8:58"},"variableNames":[{"name":"value1","nativeSrc":"10111:6:58","nodeType":"YulIdentifier","src":"10111:6:58"}]},{"nativeSrc":"10138:48:58","nodeType":"YulVariableDeclaration","src":"10138:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10171:9:58","nodeType":"YulIdentifier","src":"10171:9:58"},{"kind":"number","nativeSrc":"10182:2:58","nodeType":"YulLiteral","src":"10182:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10167:3:58","nodeType":"YulIdentifier","src":"10167:3:58"},"nativeSrc":"10167:18:58","nodeType":"YulFunctionCall","src":"10167:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"10154:12:58","nodeType":"YulIdentifier","src":"10154:12:58"},"nativeSrc":"10154:32:58","nodeType":"YulFunctionCall","src":"10154:32:58"},"variables":[{"name":"offset_1","nativeSrc":"10142:8:58","nodeType":"YulTypedName","src":"10142:8:58","type":""}]},{"body":{"nativeSrc":"10215:16:58","nodeType":"YulBlock","src":"10215:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10224:1:58","nodeType":"YulLiteral","src":"10224:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"10227:1:58","nodeType":"YulLiteral","src":"10227:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10217:6:58","nodeType":"YulIdentifier","src":"10217:6:58"},"nativeSrc":"10217:12:58","nodeType":"YulFunctionCall","src":"10217:12:58"},"nativeSrc":"10217:12:58","nodeType":"YulExpressionStatement","src":"10217:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"10201:8:58","nodeType":"YulIdentifier","src":"10201:8:58"},{"name":"_1","nativeSrc":"10211:2:58","nodeType":"YulIdentifier","src":"10211:2:58"}],"functionName":{"name":"gt","nativeSrc":"10198:2:58","nodeType":"YulIdentifier","src":"10198:2:58"},"nativeSrc":"10198:16:58","nodeType":"YulFunctionCall","src":"10198:16:58"},"nativeSrc":"10195:36:58","nodeType":"YulIf","src":"10195:36:58"},{"nativeSrc":"10240:98:58","nodeType":"YulVariableDeclaration","src":"10240:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10308:9:58","nodeType":"YulIdentifier","src":"10308:9:58"},{"name":"offset_1","nativeSrc":"10319:8:58","nodeType":"YulIdentifier","src":"10319:8:58"}],"functionName":{"name":"add","nativeSrc":"10304:3:58","nodeType":"YulIdentifier","src":"10304:3:58"},"nativeSrc":"10304:24:58","nodeType":"YulFunctionCall","src":"10304:24:58"},{"name":"dataEnd","nativeSrc":"10330:7:58","nodeType":"YulIdentifier","src":"10330:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"10266:37:58","nodeType":"YulIdentifier","src":"10266:37:58"},"nativeSrc":"10266:72:58","nodeType":"YulFunctionCall","src":"10266:72:58"},"variables":[{"name":"value2_1","nativeSrc":"10244:8:58","nodeType":"YulTypedName","src":"10244:8:58","type":""},{"name":"value3_1","nativeSrc":"10254:8:58","nodeType":"YulTypedName","src":"10254:8:58","type":""}]},{"nativeSrc":"10347:18:58","nodeType":"YulAssignment","src":"10347:18:58","value":{"name":"value2_1","nativeSrc":"10357:8:58","nodeType":"YulIdentifier","src":"10357:8:58"},"variableNames":[{"name":"value2","nativeSrc":"10347:6:58","nodeType":"YulIdentifier","src":"10347:6:58"}]},{"nativeSrc":"10374:18:58","nodeType":"YulAssignment","src":"10374:18:58","value":{"name":"value3_1","nativeSrc":"10384:8:58","nodeType":"YulIdentifier","src":"10384:8:58"},"variableNames":[{"name":"value3","nativeSrc":"10374:6:58","nodeType":"YulIdentifier","src":"10374:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"9617:781:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9724:9:58","nodeType":"YulTypedName","src":"9724:9:58","type":""},{"name":"dataEnd","nativeSrc":"9735:7:58","nodeType":"YulTypedName","src":"9735:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9747:6:58","nodeType":"YulTypedName","src":"9747:6:58","type":""},{"name":"value1","nativeSrc":"9755:6:58","nodeType":"YulTypedName","src":"9755:6:58","type":""},{"name":"value2","nativeSrc":"9763:6:58","nodeType":"YulTypedName","src":"9763:6:58","type":""},{"name":"value3","nativeSrc":"9771:6:58","nodeType":"YulTypedName","src":"9771:6:58","type":""}],"src":"9617:781:58"},{"body":{"nativeSrc":"10532:119:58","nodeType":"YulBlock","src":"10532:119:58","statements":[{"nativeSrc":"10542:26:58","nodeType":"YulAssignment","src":"10542:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"10554:9:58","nodeType":"YulIdentifier","src":"10554:9:58"},{"kind":"number","nativeSrc":"10565:2:58","nodeType":"YulLiteral","src":"10565:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10550:3:58","nodeType":"YulIdentifier","src":"10550:3:58"},"nativeSrc":"10550:18:58","nodeType":"YulFunctionCall","src":"10550:18:58"},"variableNames":[{"name":"tail","nativeSrc":"10542:4:58","nodeType":"YulIdentifier","src":"10542:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10584:9:58","nodeType":"YulIdentifier","src":"10584:9:58"},{"name":"value0","nativeSrc":"10595:6:58","nodeType":"YulIdentifier","src":"10595:6:58"}],"functionName":{"name":"mstore","nativeSrc":"10577:6:58","nodeType":"YulIdentifier","src":"10577:6:58"},"nativeSrc":"10577:25:58","nodeType":"YulFunctionCall","src":"10577:25:58"},"nativeSrc":"10577:25:58","nodeType":"YulExpressionStatement","src":"10577:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10622:9:58","nodeType":"YulIdentifier","src":"10622:9:58"},{"kind":"number","nativeSrc":"10633:2:58","nodeType":"YulLiteral","src":"10633:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10618:3:58","nodeType":"YulIdentifier","src":"10618:3:58"},"nativeSrc":"10618:18:58","nodeType":"YulFunctionCall","src":"10618:18:58"},{"name":"value1","nativeSrc":"10638:6:58","nodeType":"YulIdentifier","src":"10638:6:58"}],"functionName":{"name":"mstore","nativeSrc":"10611:6:58","nodeType":"YulIdentifier","src":"10611:6:58"},"nativeSrc":"10611:34:58","nodeType":"YulFunctionCall","src":"10611:34:58"},"nativeSrc":"10611:34:58","nodeType":"YulExpressionStatement","src":"10611:34:58"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"10403:248:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10493:9:58","nodeType":"YulTypedName","src":"10493:9:58","type":""},{"name":"value1","nativeSrc":"10504:6:58","nodeType":"YulTypedName","src":"10504:6:58","type":""},{"name":"value0","nativeSrc":"10512:6:58","nodeType":"YulTypedName","src":"10512:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10523:4:58","nodeType":"YulTypedName","src":"10523:4:58","type":""}],"src":"10403:248:58"},{"body":{"nativeSrc":"10813:241:58","nodeType":"YulBlock","src":"10813:241:58","statements":[{"nativeSrc":"10823:26:58","nodeType":"YulAssignment","src":"10823:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"10835:9:58","nodeType":"YulIdentifier","src":"10835:9:58"},{"kind":"number","nativeSrc":"10846:2:58","nodeType":"YulLiteral","src":"10846:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10831:3:58","nodeType":"YulIdentifier","src":"10831:3:58"},"nativeSrc":"10831:18:58","nodeType":"YulFunctionCall","src":"10831:18:58"},"variableNames":[{"name":"tail","nativeSrc":"10823:4:58","nodeType":"YulIdentifier","src":"10823:4:58"}]},{"nativeSrc":"10858:52:58","nodeType":"YulVariableDeclaration","src":"10858:52:58","value":{"kind":"number","nativeSrc":"10868:42:58","nodeType":"YulLiteral","src":"10868:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"10862:2:58","nodeType":"YulTypedName","src":"10862:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10926:9:58","nodeType":"YulIdentifier","src":"10926:9:58"},{"arguments":[{"name":"value0","nativeSrc":"10941:6:58","nodeType":"YulIdentifier","src":"10941:6:58"},{"name":"_1","nativeSrc":"10949:2:58","nodeType":"YulIdentifier","src":"10949:2:58"}],"functionName":{"name":"and","nativeSrc":"10937:3:58","nodeType":"YulIdentifier","src":"10937:3:58"},"nativeSrc":"10937:15:58","nodeType":"YulFunctionCall","src":"10937:15:58"}],"functionName":{"name":"mstore","nativeSrc":"10919:6:58","nodeType":"YulIdentifier","src":"10919:6:58"},"nativeSrc":"10919:34:58","nodeType":"YulFunctionCall","src":"10919:34:58"},"nativeSrc":"10919:34:58","nodeType":"YulExpressionStatement","src":"10919:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10973:9:58","nodeType":"YulIdentifier","src":"10973:9:58"},{"kind":"number","nativeSrc":"10984:2:58","nodeType":"YulLiteral","src":"10984:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10969:3:58","nodeType":"YulIdentifier","src":"10969:3:58"},"nativeSrc":"10969:18:58","nodeType":"YulFunctionCall","src":"10969:18:58"},{"arguments":[{"name":"value1","nativeSrc":"10993:6:58","nodeType":"YulIdentifier","src":"10993:6:58"},{"name":"_1","nativeSrc":"11001:2:58","nodeType":"YulIdentifier","src":"11001:2:58"}],"functionName":{"name":"and","nativeSrc":"10989:3:58","nodeType":"YulIdentifier","src":"10989:3:58"},"nativeSrc":"10989:15:58","nodeType":"YulFunctionCall","src":"10989:15:58"}],"functionName":{"name":"mstore","nativeSrc":"10962:6:58","nodeType":"YulIdentifier","src":"10962:6:58"},"nativeSrc":"10962:43:58","nodeType":"YulFunctionCall","src":"10962:43:58"},"nativeSrc":"10962:43:58","nodeType":"YulExpressionStatement","src":"10962:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11025:9:58","nodeType":"YulIdentifier","src":"11025:9:58"},{"kind":"number","nativeSrc":"11036:2:58","nodeType":"YulLiteral","src":"11036:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11021:3:58","nodeType":"YulIdentifier","src":"11021:3:58"},"nativeSrc":"11021:18:58","nodeType":"YulFunctionCall","src":"11021:18:58"},{"name":"value2","nativeSrc":"11041:6:58","nodeType":"YulIdentifier","src":"11041:6:58"}],"functionName":{"name":"mstore","nativeSrc":"11014:6:58","nodeType":"YulIdentifier","src":"11014:6:58"},"nativeSrc":"11014:34:58","nodeType":"YulFunctionCall","src":"11014:34:58"},"nativeSrc":"11014:34:58","nodeType":"YulExpressionStatement","src":"11014:34:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"10656:398:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10766:9:58","nodeType":"YulTypedName","src":"10766:9:58","type":""},{"name":"value2","nativeSrc":"10777:6:58","nodeType":"YulTypedName","src":"10777:6:58","type":""},{"name":"value1","nativeSrc":"10785:6:58","nodeType":"YulTypedName","src":"10785:6:58","type":""},{"name":"value0","nativeSrc":"10793:6:58","nodeType":"YulTypedName","src":"10793:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10804:4:58","nodeType":"YulTypedName","src":"10804:4:58","type":""}],"src":"10656:398:58"},{"body":{"nativeSrc":"11101:76:58","nodeType":"YulBlock","src":"11101:76:58","statements":[{"body":{"nativeSrc":"11155:16:58","nodeType":"YulBlock","src":"11155:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11164:1:58","nodeType":"YulLiteral","src":"11164:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11167:1:58","nodeType":"YulLiteral","src":"11167:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11157:6:58","nodeType":"YulIdentifier","src":"11157:6:58"},"nativeSrc":"11157:12:58","nodeType":"YulFunctionCall","src":"11157:12:58"},"nativeSrc":"11157:12:58","nodeType":"YulExpressionStatement","src":"11157:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11124:5:58","nodeType":"YulIdentifier","src":"11124:5:58"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"11145:5:58","nodeType":"YulIdentifier","src":"11145:5:58"}],"functionName":{"name":"iszero","nativeSrc":"11138:6:58","nodeType":"YulIdentifier","src":"11138:6:58"},"nativeSrc":"11138:13:58","nodeType":"YulFunctionCall","src":"11138:13:58"}],"functionName":{"name":"iszero","nativeSrc":"11131:6:58","nodeType":"YulIdentifier","src":"11131:6:58"},"nativeSrc":"11131:21:58","nodeType":"YulFunctionCall","src":"11131:21:58"}],"functionName":{"name":"eq","nativeSrc":"11121:2:58","nodeType":"YulIdentifier","src":"11121:2:58"},"nativeSrc":"11121:32:58","nodeType":"YulFunctionCall","src":"11121:32:58"}],"functionName":{"name":"iszero","nativeSrc":"11114:6:58","nodeType":"YulIdentifier","src":"11114:6:58"},"nativeSrc":"11114:40:58","nodeType":"YulFunctionCall","src":"11114:40:58"},"nativeSrc":"11111:60:58","nodeType":"YulIf","src":"11111:60:58"}]},"name":"validator_revert_bool","nativeSrc":"11059:118:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"11090:5:58","nodeType":"YulTypedName","src":"11090:5:58","type":""}],"src":"11059:118:58"},{"body":{"nativeSrc":"11260:167:58","nodeType":"YulBlock","src":"11260:167:58","statements":[{"body":{"nativeSrc":"11306:16:58","nodeType":"YulBlock","src":"11306:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11315:1:58","nodeType":"YulLiteral","src":"11315:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11318:1:58","nodeType":"YulLiteral","src":"11318:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"11308:6:58","nodeType":"YulIdentifier","src":"11308:6:58"},"nativeSrc":"11308:12:58","nodeType":"YulFunctionCall","src":"11308:12:58"},"nativeSrc":"11308:12:58","nodeType":"YulExpressionStatement","src":"11308:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"11281:7:58","nodeType":"YulIdentifier","src":"11281:7:58"},{"name":"headStart","nativeSrc":"11290:9:58","nodeType":"YulIdentifier","src":"11290:9:58"}],"functionName":{"name":"sub","nativeSrc":"11277:3:58","nodeType":"YulIdentifier","src":"11277:3:58"},"nativeSrc":"11277:23:58","nodeType":"YulFunctionCall","src":"11277:23:58"},{"kind":"number","nativeSrc":"11302:2:58","nodeType":"YulLiteral","src":"11302:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"11273:3:58","nodeType":"YulIdentifier","src":"11273:3:58"},"nativeSrc":"11273:32:58","nodeType":"YulFunctionCall","src":"11273:32:58"},"nativeSrc":"11270:52:58","nodeType":"YulIf","src":"11270:52:58"},{"nativeSrc":"11331:29:58","nodeType":"YulVariableDeclaration","src":"11331:29:58","value":{"arguments":[{"name":"headStart","nativeSrc":"11350:9:58","nodeType":"YulIdentifier","src":"11350:9:58"}],"functionName":{"name":"mload","nativeSrc":"11344:5:58","nodeType":"YulIdentifier","src":"11344:5:58"},"nativeSrc":"11344:16:58","nodeType":"YulFunctionCall","src":"11344:16:58"},"variables":[{"name":"value","nativeSrc":"11335:5:58","nodeType":"YulTypedName","src":"11335:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"11391:5:58","nodeType":"YulIdentifier","src":"11391:5:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"11369:21:58","nodeType":"YulIdentifier","src":"11369:21:58"},"nativeSrc":"11369:28:58","nodeType":"YulFunctionCall","src":"11369:28:58"},"nativeSrc":"11369:28:58","nodeType":"YulExpressionStatement","src":"11369:28:58"},{"nativeSrc":"11406:15:58","nodeType":"YulAssignment","src":"11406:15:58","value":{"name":"value","nativeSrc":"11416:5:58","nodeType":"YulIdentifier","src":"11416:5:58"},"variableNames":[{"name":"value0","nativeSrc":"11406:6:58","nodeType":"YulIdentifier","src":"11406:6:58"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"11182:245:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11226:9:58","nodeType":"YulTypedName","src":"11226:9:58","type":""},{"name":"dataEnd","nativeSrc":"11237:7:58","nodeType":"YulTypedName","src":"11237:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11249:6:58","nodeType":"YulTypedName","src":"11249:6:58","type":""}],"src":"11182:245:58"},{"body":{"nativeSrc":"11464:152:58","nodeType":"YulBlock","src":"11464:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11481:1:58","nodeType":"YulLiteral","src":"11481:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11484:77:58","nodeType":"YulLiteral","src":"11484:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11474:6:58","nodeType":"YulIdentifier","src":"11474:6:58"},"nativeSrc":"11474:88:58","nodeType":"YulFunctionCall","src":"11474:88:58"},"nativeSrc":"11474:88:58","nodeType":"YulExpressionStatement","src":"11474:88:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11578:1:58","nodeType":"YulLiteral","src":"11578:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"11581:4:58","nodeType":"YulLiteral","src":"11581:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"11571:6:58","nodeType":"YulIdentifier","src":"11571:6:58"},"nativeSrc":"11571:15:58","nodeType":"YulFunctionCall","src":"11571:15:58"},"nativeSrc":"11571:15:58","nodeType":"YulExpressionStatement","src":"11571:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11602:1:58","nodeType":"YulLiteral","src":"11602:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11605:4:58","nodeType":"YulLiteral","src":"11605:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11595:6:58","nodeType":"YulIdentifier","src":"11595:6:58"},"nativeSrc":"11595:15:58","nodeType":"YulFunctionCall","src":"11595:15:58"},"nativeSrc":"11595:15:58","nodeType":"YulExpressionStatement","src":"11595:15:58"}]},"name":"panic_error_0x11","nativeSrc":"11432:184:58","nodeType":"YulFunctionDefinition","src":"11432:184:58"},{"body":{"nativeSrc":"11670:79:58","nodeType":"YulBlock","src":"11670:79:58","statements":[{"nativeSrc":"11680:17:58","nodeType":"YulAssignment","src":"11680:17:58","value":{"arguments":[{"name":"x","nativeSrc":"11692:1:58","nodeType":"YulIdentifier","src":"11692:1:58"},{"name":"y","nativeSrc":"11695:1:58","nodeType":"YulIdentifier","src":"11695:1:58"}],"functionName":{"name":"sub","nativeSrc":"11688:3:58","nodeType":"YulIdentifier","src":"11688:3:58"},"nativeSrc":"11688:9:58","nodeType":"YulFunctionCall","src":"11688:9:58"},"variableNames":[{"name":"diff","nativeSrc":"11680:4:58","nodeType":"YulIdentifier","src":"11680:4:58"}]},{"body":{"nativeSrc":"11721:22:58","nodeType":"YulBlock","src":"11721:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11723:16:58","nodeType":"YulIdentifier","src":"11723:16:58"},"nativeSrc":"11723:18:58","nodeType":"YulFunctionCall","src":"11723:18:58"},"nativeSrc":"11723:18:58","nodeType":"YulExpressionStatement","src":"11723:18:58"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"11712:4:58","nodeType":"YulIdentifier","src":"11712:4:58"},{"name":"x","nativeSrc":"11718:1:58","nodeType":"YulIdentifier","src":"11718:1:58"}],"functionName":{"name":"gt","nativeSrc":"11709:2:58","nodeType":"YulIdentifier","src":"11709:2:58"},"nativeSrc":"11709:11:58","nodeType":"YulFunctionCall","src":"11709:11:58"},"nativeSrc":"11706:37:58","nodeType":"YulIf","src":"11706:37:58"}]},"name":"checked_sub_t_uint256","nativeSrc":"11621:128:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11652:1:58","nodeType":"YulTypedName","src":"11652:1:58","type":""},{"name":"y","nativeSrc":"11655:1:58","nodeType":"YulTypedName","src":"11655:1:58","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"11661:4:58","nodeType":"YulTypedName","src":"11661:4:58","type":""}],"src":"11621:128:58"},{"body":{"nativeSrc":"11883:168:58","nodeType":"YulBlock","src":"11883:168:58","statements":[{"nativeSrc":"11893:26:58","nodeType":"YulAssignment","src":"11893:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"11905:9:58","nodeType":"YulIdentifier","src":"11905:9:58"},{"kind":"number","nativeSrc":"11916:2:58","nodeType":"YulLiteral","src":"11916:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11901:3:58","nodeType":"YulIdentifier","src":"11901:3:58"},"nativeSrc":"11901:18:58","nodeType":"YulFunctionCall","src":"11901:18:58"},"variableNames":[{"name":"tail","nativeSrc":"11893:4:58","nodeType":"YulIdentifier","src":"11893:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11935:9:58","nodeType":"YulIdentifier","src":"11935:9:58"},{"arguments":[{"name":"value0","nativeSrc":"11950:6:58","nodeType":"YulIdentifier","src":"11950:6:58"},{"kind":"number","nativeSrc":"11958:42:58","nodeType":"YulLiteral","src":"11958:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11946:3:58","nodeType":"YulIdentifier","src":"11946:3:58"},"nativeSrc":"11946:55:58","nodeType":"YulFunctionCall","src":"11946:55:58"}],"functionName":{"name":"mstore","nativeSrc":"11928:6:58","nodeType":"YulIdentifier","src":"11928:6:58"},"nativeSrc":"11928:74:58","nodeType":"YulFunctionCall","src":"11928:74:58"},"nativeSrc":"11928:74:58","nodeType":"YulExpressionStatement","src":"11928:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"12022:9:58","nodeType":"YulIdentifier","src":"12022:9:58"},{"kind":"number","nativeSrc":"12033:2:58","nodeType":"YulLiteral","src":"12033:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"12018:3:58","nodeType":"YulIdentifier","src":"12018:3:58"},"nativeSrc":"12018:18:58","nodeType":"YulFunctionCall","src":"12018:18:58"},{"name":"value1","nativeSrc":"12038:6:58","nodeType":"YulIdentifier","src":"12038:6:58"}],"functionName":{"name":"mstore","nativeSrc":"12011:6:58","nodeType":"YulIdentifier","src":"12011:6:58"},"nativeSrc":"12011:34:58","nodeType":"YulFunctionCall","src":"12011:34:58"},"nativeSrc":"12011:34:58","nodeType":"YulExpressionStatement","src":"12011:34:58"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"11754:297:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11844:9:58","nodeType":"YulTypedName","src":"11844:9:58","type":""},{"name":"value1","nativeSrc":"11855:6:58","nodeType":"YulTypedName","src":"11855:6:58","type":""},{"name":"value0","nativeSrc":"11863:6:58","nodeType":"YulTypedName","src":"11863:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11874:4:58","nodeType":"YulTypedName","src":"11874:4:58","type":""}],"src":"11754:297:58"},{"body":{"nativeSrc":"12104:77:58","nodeType":"YulBlock","src":"12104:77:58","statements":[{"nativeSrc":"12114:16:58","nodeType":"YulAssignment","src":"12114:16:58","value":{"arguments":[{"name":"x","nativeSrc":"12125:1:58","nodeType":"YulIdentifier","src":"12125:1:58"},{"name":"y","nativeSrc":"12128:1:58","nodeType":"YulIdentifier","src":"12128:1:58"}],"functionName":{"name":"add","nativeSrc":"12121:3:58","nodeType":"YulIdentifier","src":"12121:3:58"},"nativeSrc":"12121:9:58","nodeType":"YulFunctionCall","src":"12121:9:58"},"variableNames":[{"name":"sum","nativeSrc":"12114:3:58","nodeType":"YulIdentifier","src":"12114:3:58"}]},{"body":{"nativeSrc":"12153:22:58","nodeType":"YulBlock","src":"12153:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"12155:16:58","nodeType":"YulIdentifier","src":"12155:16:58"},"nativeSrc":"12155:18:58","nodeType":"YulFunctionCall","src":"12155:18:58"},"nativeSrc":"12155:18:58","nodeType":"YulExpressionStatement","src":"12155:18:58"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"12145:1:58","nodeType":"YulIdentifier","src":"12145:1:58"},{"name":"sum","nativeSrc":"12148:3:58","nodeType":"YulIdentifier","src":"12148:3:58"}],"functionName":{"name":"gt","nativeSrc":"12142:2:58","nodeType":"YulIdentifier","src":"12142:2:58"},"nativeSrc":"12142:10:58","nodeType":"YulFunctionCall","src":"12142:10:58"},"nativeSrc":"12139:36:58","nodeType":"YulIf","src":"12139:36:58"}]},"name":"checked_add_t_uint256","nativeSrc":"12056:125:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"12087:1:58","nodeType":"YulTypedName","src":"12087:1:58","type":""},{"name":"y","nativeSrc":"12090:1:58","nodeType":"YulTypedName","src":"12090:1:58","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"12096:3:58","nodeType":"YulTypedName","src":"12096:3:58","type":""}],"src":"12056:125:58"},{"body":{"nativeSrc":"12218:152:58","nodeType":"YulBlock","src":"12218:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12235:1:58","nodeType":"YulLiteral","src":"12235:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"12238:77:58","nodeType":"YulLiteral","src":"12238:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"12228:6:58","nodeType":"YulIdentifier","src":"12228:6:58"},"nativeSrc":"12228:88:58","nodeType":"YulFunctionCall","src":"12228:88:58"},"nativeSrc":"12228:88:58","nodeType":"YulExpressionStatement","src":"12228:88:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12332:1:58","nodeType":"YulLiteral","src":"12332:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"12335:4:58","nodeType":"YulLiteral","src":"12335:4:58","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"12325:6:58","nodeType":"YulIdentifier","src":"12325:6:58"},"nativeSrc":"12325:15:58","nodeType":"YulFunctionCall","src":"12325:15:58"},"nativeSrc":"12325:15:58","nodeType":"YulExpressionStatement","src":"12325:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"12356:1:58","nodeType":"YulLiteral","src":"12356:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"12359:4:58","nodeType":"YulLiteral","src":"12359:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"12349:6:58","nodeType":"YulIdentifier","src":"12349:6:58"},"nativeSrc":"12349:15:58","nodeType":"YulFunctionCall","src":"12349:15:58"},"nativeSrc":"12349:15:58","nodeType":"YulExpressionStatement","src":"12349:15:58"}]},"name":"panic_error_0x32","nativeSrc":"12186:184:58","nodeType":"YulFunctionDefinition","src":"12186:184:58"},{"body":{"nativeSrc":"12442:174:58","nodeType":"YulBlock","src":"12442:174:58","statements":[{"body":{"nativeSrc":"12488:16:58","nodeType":"YulBlock","src":"12488:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12497:1:58","nodeType":"YulLiteral","src":"12497:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"12500:1:58","nodeType":"YulLiteral","src":"12500:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12490:6:58","nodeType":"YulIdentifier","src":"12490:6:58"},"nativeSrc":"12490:12:58","nodeType":"YulFunctionCall","src":"12490:12:58"},"nativeSrc":"12490:12:58","nodeType":"YulExpressionStatement","src":"12490:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12463:7:58","nodeType":"YulIdentifier","src":"12463:7:58"},{"name":"headStart","nativeSrc":"12472:9:58","nodeType":"YulIdentifier","src":"12472:9:58"}],"functionName":{"name":"sub","nativeSrc":"12459:3:58","nodeType":"YulIdentifier","src":"12459:3:58"},"nativeSrc":"12459:23:58","nodeType":"YulFunctionCall","src":"12459:23:58"},{"kind":"number","nativeSrc":"12484:2:58","nodeType":"YulLiteral","src":"12484:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12455:3:58","nodeType":"YulIdentifier","src":"12455:3:58"},"nativeSrc":"12455:32:58","nodeType":"YulFunctionCall","src":"12455:32:58"},"nativeSrc":"12452:52:58","nodeType":"YulIf","src":"12452:52:58"},{"nativeSrc":"12513:36:58","nodeType":"YulVariableDeclaration","src":"12513:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"12539:9:58","nodeType":"YulIdentifier","src":"12539:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"12526:12:58","nodeType":"YulIdentifier","src":"12526:12:58"},"nativeSrc":"12526:23:58","nodeType":"YulFunctionCall","src":"12526:23:58"},"variables":[{"name":"value","nativeSrc":"12517:5:58","nodeType":"YulTypedName","src":"12517:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12580:5:58","nodeType":"YulIdentifier","src":"12580:5:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"12558:21:58","nodeType":"YulIdentifier","src":"12558:21:58"},"nativeSrc":"12558:28:58","nodeType":"YulFunctionCall","src":"12558:28:58"},"nativeSrc":"12558:28:58","nodeType":"YulExpressionStatement","src":"12558:28:58"},{"nativeSrc":"12595:15:58","nodeType":"YulAssignment","src":"12595:15:58","value":{"name":"value","nativeSrc":"12605:5:58","nodeType":"YulIdentifier","src":"12605:5:58"},"variableNames":[{"name":"value0","nativeSrc":"12595:6:58","nodeType":"YulIdentifier","src":"12595:6:58"}]}]},"name":"abi_decode_tuple_t_bool","nativeSrc":"12375:241:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"12408:9:58","nodeType":"YulTypedName","src":"12408:9:58","type":""},{"name":"dataEnd","nativeSrc":"12419:7:58","nodeType":"YulTypedName","src":"12419:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"12431:6:58","nodeType":"YulTypedName","src":"12431:6:58","type":""}],"src":"12375:241:58"},{"body":{"nativeSrc":"12668:148:58","nodeType":"YulBlock","src":"12668:148:58","statements":[{"body":{"nativeSrc":"12759:22:58","nodeType":"YulBlock","src":"12759:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"12761:16:58","nodeType":"YulIdentifier","src":"12761:16:58"},"nativeSrc":"12761:18:58","nodeType":"YulFunctionCall","src":"12761:18:58"},"nativeSrc":"12761:18:58","nodeType":"YulExpressionStatement","src":"12761:18:58"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"12684:5:58","nodeType":"YulIdentifier","src":"12684:5:58"},{"kind":"number","nativeSrc":"12691:66:58","nodeType":"YulLiteral","src":"12691:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"12681:2:58","nodeType":"YulIdentifier","src":"12681:2:58"},"nativeSrc":"12681:77:58","nodeType":"YulFunctionCall","src":"12681:77:58"},"nativeSrc":"12678:103:58","nodeType":"YulIf","src":"12678:103:58"},{"nativeSrc":"12790:20:58","nodeType":"YulAssignment","src":"12790:20:58","value":{"arguments":[{"name":"value","nativeSrc":"12801:5:58","nodeType":"YulIdentifier","src":"12801:5:58"},{"kind":"number","nativeSrc":"12808:1:58","nodeType":"YulLiteral","src":"12808:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12797:3:58","nodeType":"YulIdentifier","src":"12797:3:58"},"nativeSrc":"12797:13:58","nodeType":"YulFunctionCall","src":"12797:13:58"},"variableNames":[{"name":"ret","nativeSrc":"12790:3:58","nodeType":"YulIdentifier","src":"12790:3:58"}]}]},"name":"increment_t_uint256","nativeSrc":"12621:195:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12650:5:58","nodeType":"YulTypedName","src":"12650:5:58","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"12660:3:58","nodeType":"YulTypedName","src":"12660:3:58","type":""}],"src":"12621:195:58"},{"body":{"nativeSrc":"12899:280:58","nodeType":"YulBlock","src":"12899:280:58","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"12916:3:58","nodeType":"YulIdentifier","src":"12916:3:58"},{"name":"length","nativeSrc":"12921:6:58","nodeType":"YulIdentifier","src":"12921:6:58"}],"functionName":{"name":"mstore","nativeSrc":"12909:6:58","nodeType":"YulIdentifier","src":"12909:6:58"},"nativeSrc":"12909:19:58","nodeType":"YulFunctionCall","src":"12909:19:58"},"nativeSrc":"12909:19:58","nodeType":"YulExpressionStatement","src":"12909:19:58"},{"body":{"nativeSrc":"13019:16:58","nodeType":"YulBlock","src":"13019:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"13028:1:58","nodeType":"YulLiteral","src":"13028:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"13031:1:58","nodeType":"YulLiteral","src":"13031:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"13021:6:58","nodeType":"YulIdentifier","src":"13021:6:58"},"nativeSrc":"13021:12:58","nodeType":"YulFunctionCall","src":"13021:12:58"},"nativeSrc":"13021:12:58","nodeType":"YulExpressionStatement","src":"13021:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"12943:6:58","nodeType":"YulIdentifier","src":"12943:6:58"},{"kind":"number","nativeSrc":"12951:66:58","nodeType":"YulLiteral","src":"12951:66:58","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"12940:2:58","nodeType":"YulIdentifier","src":"12940:2:58"},"nativeSrc":"12940:78:58","nodeType":"YulFunctionCall","src":"12940:78:58"},"nativeSrc":"12937:98:58","nodeType":"YulIf","src":"12937:98:58"},{"nativeSrc":"13044:30:58","nodeType":"YulVariableDeclaration","src":"13044:30:58","value":{"arguments":[{"kind":"number","nativeSrc":"13064:1:58","nodeType":"YulLiteral","src":"13064:1:58","type":"","value":"5"},{"name":"length","nativeSrc":"13067:6:58","nodeType":"YulIdentifier","src":"13067:6:58"}],"functionName":{"name":"shl","nativeSrc":"13060:3:58","nodeType":"YulIdentifier","src":"13060:3:58"},"nativeSrc":"13060:14:58","nodeType":"YulFunctionCall","src":"13060:14:58"},"variables":[{"name":"length_1","nativeSrc":"13048:8:58","nodeType":"YulTypedName","src":"13048:8:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"13100:3:58","nodeType":"YulIdentifier","src":"13100:3:58"},{"kind":"number","nativeSrc":"13105:4:58","nodeType":"YulLiteral","src":"13105:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13096:3:58","nodeType":"YulIdentifier","src":"13096:3:58"},"nativeSrc":"13096:14:58","nodeType":"YulFunctionCall","src":"13096:14:58"},{"name":"start","nativeSrc":"13112:5:58","nodeType":"YulIdentifier","src":"13112:5:58"},{"name":"length_1","nativeSrc":"13119:8:58","nodeType":"YulIdentifier","src":"13119:8:58"}],"functionName":{"name":"calldatacopy","nativeSrc":"13083:12:58","nodeType":"YulIdentifier","src":"13083:12:58"},"nativeSrc":"13083:45:58","nodeType":"YulFunctionCall","src":"13083:45:58"},"nativeSrc":"13083:45:58","nodeType":"YulExpressionStatement","src":"13083:45:58"},{"nativeSrc":"13137:36:58","nodeType":"YulAssignment","src":"13137:36:58","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"13152:3:58","nodeType":"YulIdentifier","src":"13152:3:58"},{"name":"length_1","nativeSrc":"13157:8:58","nodeType":"YulIdentifier","src":"13157:8:58"}],"functionName":{"name":"add","nativeSrc":"13148:3:58","nodeType":"YulIdentifier","src":"13148:3:58"},"nativeSrc":"13148:18:58","nodeType":"YulFunctionCall","src":"13148:18:58"},{"kind":"number","nativeSrc":"13168:4:58","nodeType":"YulLiteral","src":"13168:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"13144:3:58","nodeType":"YulIdentifier","src":"13144:3:58"},"nativeSrc":"13144:29:58","nodeType":"YulFunctionCall","src":"13144:29:58"},"variableNames":[{"name":"end","nativeSrc":"13137:3:58","nodeType":"YulIdentifier","src":"13137:3:58"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"12821:358:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"12868:5:58","nodeType":"YulTypedName","src":"12868:5:58","type":""},{"name":"length","nativeSrc":"12875:6:58","nodeType":"YulTypedName","src":"12875:6:58","type":""},{"name":"pos","nativeSrc":"12883:3:58","nodeType":"YulTypedName","src":"12883:3:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12891:3:58","nodeType":"YulTypedName","src":"12891:3:58","type":""}],"src":"12821:358:58"},{"body":{"nativeSrc":"13603:1381:58","nodeType":"YulBlock","src":"13603:1381:58","statements":[{"nativeSrc":"13613:33:58","nodeType":"YulVariableDeclaration","src":"13613:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"13631:9:58","nodeType":"YulIdentifier","src":"13631:9:58"},{"kind":"number","nativeSrc":"13642:3:58","nodeType":"YulLiteral","src":"13642:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13627:3:58","nodeType":"YulIdentifier","src":"13627:3:58"},"nativeSrc":"13627:19:58","nodeType":"YulFunctionCall","src":"13627:19:58"},"variables":[{"name":"tail_1","nativeSrc":"13617:6:58","nodeType":"YulTypedName","src":"13617:6:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13662:9:58","nodeType":"YulIdentifier","src":"13662:9:58"},{"kind":"number","nativeSrc":"13673:3:58","nodeType":"YulLiteral","src":"13673:3:58","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"13655:6:58","nodeType":"YulIdentifier","src":"13655:6:58"},"nativeSrc":"13655:22:58","nodeType":"YulFunctionCall","src":"13655:22:58"},"nativeSrc":"13655:22:58","nodeType":"YulExpressionStatement","src":"13655:22:58"},{"nativeSrc":"13686:17:58","nodeType":"YulVariableDeclaration","src":"13686:17:58","value":{"name":"tail_1","nativeSrc":"13697:6:58","nodeType":"YulIdentifier","src":"13697:6:58"},"variables":[{"name":"pos","nativeSrc":"13690:3:58","nodeType":"YulTypedName","src":"13690:3:58","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"13719:6:58","nodeType":"YulIdentifier","src":"13719:6:58"},{"name":"value1","nativeSrc":"13727:6:58","nodeType":"YulIdentifier","src":"13727:6:58"}],"functionName":{"name":"mstore","nativeSrc":"13712:6:58","nodeType":"YulIdentifier","src":"13712:6:58"},"nativeSrc":"13712:22:58","nodeType":"YulFunctionCall","src":"13712:22:58"},"nativeSrc":"13712:22:58","nodeType":"YulExpressionStatement","src":"13712:22:58"},{"nativeSrc":"13743:26:58","nodeType":"YulAssignment","src":"13743:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"13754:9:58","nodeType":"YulIdentifier","src":"13754:9:58"},{"kind":"number","nativeSrc":"13765:3:58","nodeType":"YulLiteral","src":"13765:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"13750:3:58","nodeType":"YulIdentifier","src":"13750:3:58"},"nativeSrc":"13750:19:58","nodeType":"YulFunctionCall","src":"13750:19:58"},"variableNames":[{"name":"pos","nativeSrc":"13743:3:58","nodeType":"YulIdentifier","src":"13743:3:58"}]},{"nativeSrc":"13778:20:58","nodeType":"YulVariableDeclaration","src":"13778:20:58","value":{"name":"value0","nativeSrc":"13792:6:58","nodeType":"YulIdentifier","src":"13792:6:58"},"variables":[{"name":"srcPtr","nativeSrc":"13782:6:58","nodeType":"YulTypedName","src":"13782:6:58","type":""}]},{"nativeSrc":"13807:10:58","nodeType":"YulVariableDeclaration","src":"13807:10:58","value":{"kind":"number","nativeSrc":"13816:1:58","nodeType":"YulLiteral","src":"13816:1:58","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"13811:1:58","nodeType":"YulTypedName","src":"13811:1:58","type":""}]},{"body":{"nativeSrc":"13875:278:58","nodeType":"YulBlock","src":"13875:278:58","statements":[{"nativeSrc":"13889:33:58","nodeType":"YulVariableDeclaration","src":"13889:33:58","value":{"arguments":[{"name":"srcPtr","nativeSrc":"13915:6:58","nodeType":"YulIdentifier","src":"13915:6:58"}],"functionName":{"name":"calldataload","nativeSrc":"13902:12:58","nodeType":"YulIdentifier","src":"13902:12:58"},"nativeSrc":"13902:20:58","nodeType":"YulFunctionCall","src":"13902:20:58"},"variables":[{"name":"value","nativeSrc":"13893:5:58","nodeType":"YulTypedName","src":"13893:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13960:5:58","nodeType":"YulIdentifier","src":"13960:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"13935:24:58","nodeType":"YulIdentifier","src":"13935:24:58"},"nativeSrc":"13935:31:58","nodeType":"YulFunctionCall","src":"13935:31:58"},"nativeSrc":"13935:31:58","nodeType":"YulExpressionStatement","src":"13935:31:58"},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13986:3:58","nodeType":"YulIdentifier","src":"13986:3:58"},{"arguments":[{"name":"value","nativeSrc":"13995:5:58","nodeType":"YulIdentifier","src":"13995:5:58"},{"kind":"number","nativeSrc":"14002:42:58","nodeType":"YulLiteral","src":"14002:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13991:3:58","nodeType":"YulIdentifier","src":"13991:3:58"},"nativeSrc":"13991:54:58","nodeType":"YulFunctionCall","src":"13991:54:58"}],"functionName":{"name":"mstore","nativeSrc":"13979:6:58","nodeType":"YulIdentifier","src":"13979:6:58"},"nativeSrc":"13979:67:58","nodeType":"YulFunctionCall","src":"13979:67:58"},"nativeSrc":"13979:67:58","nodeType":"YulExpressionStatement","src":"13979:67:58"},{"nativeSrc":"14059:14:58","nodeType":"YulVariableDeclaration","src":"14059:14:58","value":{"kind":"number","nativeSrc":"14069:4:58","nodeType":"YulLiteral","src":"14069:4:58","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"14063:2:58","nodeType":"YulTypedName","src":"14063:2:58","type":""}]},{"nativeSrc":"14086:19:58","nodeType":"YulAssignment","src":"14086:19:58","value":{"arguments":[{"name":"pos","nativeSrc":"14097:3:58","nodeType":"YulIdentifier","src":"14097:3:58"},{"name":"_1","nativeSrc":"14102:2:58","nodeType":"YulIdentifier","src":"14102:2:58"}],"functionName":{"name":"add","nativeSrc":"14093:3:58","nodeType":"YulIdentifier","src":"14093:3:58"},"nativeSrc":"14093:12:58","nodeType":"YulFunctionCall","src":"14093:12:58"},"variableNames":[{"name":"pos","nativeSrc":"14086:3:58","nodeType":"YulIdentifier","src":"14086:3:58"}]},{"nativeSrc":"14118:25:58","nodeType":"YulAssignment","src":"14118:25:58","value":{"arguments":[{"name":"srcPtr","nativeSrc":"14132:6:58","nodeType":"YulIdentifier","src":"14132:6:58"},{"name":"_1","nativeSrc":"14140:2:58","nodeType":"YulIdentifier","src":"14140:2:58"}],"functionName":{"name":"add","nativeSrc":"14128:3:58","nodeType":"YulIdentifier","src":"14128:3:58"},"nativeSrc":"14128:15:58","nodeType":"YulFunctionCall","src":"14128:15:58"},"variableNames":[{"name":"srcPtr","nativeSrc":"14118:6:58","nodeType":"YulIdentifier","src":"14118:6:58"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"13837:1:58","nodeType":"YulIdentifier","src":"13837:1:58"},{"name":"value1","nativeSrc":"13840:6:58","nodeType":"YulIdentifier","src":"13840:6:58"}],"functionName":{"name":"lt","nativeSrc":"13834:2:58","nodeType":"YulIdentifier","src":"13834:2:58"},"nativeSrc":"13834:13:58","nodeType":"YulFunctionCall","src":"13834:13:58"},"nativeSrc":"13826:327:58","nodeType":"YulForLoop","post":{"nativeSrc":"13848:18:58","nodeType":"YulBlock","src":"13848:18:58","statements":[{"nativeSrc":"13850:14:58","nodeType":"YulAssignment","src":"13850:14:58","value":{"arguments":[{"name":"i","nativeSrc":"13859:1:58","nodeType":"YulIdentifier","src":"13859:1:58"},{"kind":"number","nativeSrc":"13862:1:58","nodeType":"YulLiteral","src":"13862:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13855:3:58","nodeType":"YulIdentifier","src":"13855:3:58"},"nativeSrc":"13855:9:58","nodeType":"YulFunctionCall","src":"13855:9:58"},"variableNames":[{"name":"i","nativeSrc":"13850:1:58","nodeType":"YulIdentifier","src":"13850:1:58"}]}]},"pre":{"nativeSrc":"13830:3:58","nodeType":"YulBlock","src":"13830:3:58","statements":[]},"src":"13826:327:58"},{"nativeSrc":"14162:14:58","nodeType":"YulVariableDeclaration","src":"14162:14:58","value":{"kind":"number","nativeSrc":"14172:4:58","nodeType":"YulLiteral","src":"14172:4:58","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"14166:2:58","nodeType":"YulTypedName","src":"14166:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14196:9:58","nodeType":"YulIdentifier","src":"14196:9:58"},{"name":"_2","nativeSrc":"14207:2:58","nodeType":"YulIdentifier","src":"14207:2:58"}],"functionName":{"name":"add","nativeSrc":"14192:3:58","nodeType":"YulIdentifier","src":"14192:3:58"},"nativeSrc":"14192:18:58","nodeType":"YulFunctionCall","src":"14192:18:58"},{"arguments":[{"name":"pos","nativeSrc":"14216:3:58","nodeType":"YulIdentifier","src":"14216:3:58"},{"name":"headStart","nativeSrc":"14221:9:58","nodeType":"YulIdentifier","src":"14221:9:58"}],"functionName":{"name":"sub","nativeSrc":"14212:3:58","nodeType":"YulIdentifier","src":"14212:3:58"},"nativeSrc":"14212:19:58","nodeType":"YulFunctionCall","src":"14212:19:58"}],"functionName":{"name":"mstore","nativeSrc":"14185:6:58","nodeType":"YulIdentifier","src":"14185:6:58"},"nativeSrc":"14185:47:58","nodeType":"YulFunctionCall","src":"14185:47:58"},"nativeSrc":"14185:47:58","nodeType":"YulExpressionStatement","src":"14185:47:58"},{"nativeSrc":"14241:72:58","nodeType":"YulVariableDeclaration","src":"14241:72:58","value":{"arguments":[{"name":"value2","nativeSrc":"14293:6:58","nodeType":"YulIdentifier","src":"14293:6:58"},{"name":"value3","nativeSrc":"14301:6:58","nodeType":"YulIdentifier","src":"14301:6:58"},{"name":"pos","nativeSrc":"14309:3:58","nodeType":"YulIdentifier","src":"14309:3:58"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"14255:37:58","nodeType":"YulIdentifier","src":"14255:37:58"},"nativeSrc":"14255:58:58","nodeType":"YulFunctionCall","src":"14255:58:58"},"variables":[{"name":"tail_2","nativeSrc":"14245:6:58","nodeType":"YulTypedName","src":"14245:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14333:9:58","nodeType":"YulIdentifier","src":"14333:9:58"},{"kind":"number","nativeSrc":"14344:2:58","nodeType":"YulLiteral","src":"14344:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"14329:3:58","nodeType":"YulIdentifier","src":"14329:3:58"},"nativeSrc":"14329:18:58","nodeType":"YulFunctionCall","src":"14329:18:58"},{"arguments":[{"name":"tail_2","nativeSrc":"14353:6:58","nodeType":"YulIdentifier","src":"14353:6:58"},{"name":"headStart","nativeSrc":"14361:9:58","nodeType":"YulIdentifier","src":"14361:9:58"}],"functionName":{"name":"sub","nativeSrc":"14349:3:58","nodeType":"YulIdentifier","src":"14349:3:58"},"nativeSrc":"14349:22:58","nodeType":"YulFunctionCall","src":"14349:22:58"}],"functionName":{"name":"mstore","nativeSrc":"14322:6:58","nodeType":"YulIdentifier","src":"14322:6:58"},"nativeSrc":"14322:50:58","nodeType":"YulFunctionCall","src":"14322:50:58"},"nativeSrc":"14322:50:58","nodeType":"YulExpressionStatement","src":"14322:50:58"},{"nativeSrc":"14381:75:58","nodeType":"YulVariableDeclaration","src":"14381:75:58","value":{"arguments":[{"name":"value4","nativeSrc":"14433:6:58","nodeType":"YulIdentifier","src":"14433:6:58"},{"name":"value5","nativeSrc":"14441:6:58","nodeType":"YulIdentifier","src":"14441:6:58"},{"name":"tail_2","nativeSrc":"14449:6:58","nodeType":"YulIdentifier","src":"14449:6:58"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"14395:37:58","nodeType":"YulIdentifier","src":"14395:37:58"},"nativeSrc":"14395:61:58","nodeType":"YulFunctionCall","src":"14395:61:58"},"variables":[{"name":"tail_3","nativeSrc":"14385:6:58","nodeType":"YulTypedName","src":"14385:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14476:9:58","nodeType":"YulIdentifier","src":"14476:9:58"},{"kind":"number","nativeSrc":"14487:2:58","nodeType":"YulLiteral","src":"14487:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14472:3:58","nodeType":"YulIdentifier","src":"14472:3:58"},"nativeSrc":"14472:18:58","nodeType":"YulFunctionCall","src":"14472:18:58"},{"arguments":[{"name":"tail_3","nativeSrc":"14496:6:58","nodeType":"YulIdentifier","src":"14496:6:58"},{"name":"headStart","nativeSrc":"14504:9:58","nodeType":"YulIdentifier","src":"14504:9:58"}],"functionName":{"name":"sub","nativeSrc":"14492:3:58","nodeType":"YulIdentifier","src":"14492:3:58"},"nativeSrc":"14492:22:58","nodeType":"YulFunctionCall","src":"14492:22:58"}],"functionName":{"name":"mstore","nativeSrc":"14465:6:58","nodeType":"YulIdentifier","src":"14465:6:58"},"nativeSrc":"14465:50:58","nodeType":"YulFunctionCall","src":"14465:50:58"},"nativeSrc":"14465:50:58","nodeType":"YulExpressionStatement","src":"14465:50:58"},{"nativeSrc":"14524:19:58","nodeType":"YulVariableDeclaration","src":"14524:19:58","value":{"name":"tail_3","nativeSrc":"14537:6:58","nodeType":"YulIdentifier","src":"14537:6:58"},"variables":[{"name":"pos_1","nativeSrc":"14528:5:58","nodeType":"YulTypedName","src":"14528:5:58","type":""}]},{"expression":{"arguments":[{"name":"tail_3","nativeSrc":"14559:6:58","nodeType":"YulIdentifier","src":"14559:6:58"},{"name":"value7","nativeSrc":"14567:6:58","nodeType":"YulIdentifier","src":"14567:6:58"}],"functionName":{"name":"mstore","nativeSrc":"14552:6:58","nodeType":"YulIdentifier","src":"14552:6:58"},"nativeSrc":"14552:22:58","nodeType":"YulFunctionCall","src":"14552:22:58"},"nativeSrc":"14552:22:58","nodeType":"YulExpressionStatement","src":"14552:22:58"},{"nativeSrc":"14583:24:58","nodeType":"YulAssignment","src":"14583:24:58","value":{"arguments":[{"name":"tail_3","nativeSrc":"14596:6:58","nodeType":"YulIdentifier","src":"14596:6:58"},{"name":"_2","nativeSrc":"14604:2:58","nodeType":"YulIdentifier","src":"14604:2:58"}],"functionName":{"name":"add","nativeSrc":"14592:3:58","nodeType":"YulIdentifier","src":"14592:3:58"},"nativeSrc":"14592:15:58","nodeType":"YulFunctionCall","src":"14592:15:58"},"variableNames":[{"name":"pos_1","nativeSrc":"14583:5:58","nodeType":"YulIdentifier","src":"14583:5:58"}]},{"nativeSrc":"14616:22:58","nodeType":"YulVariableDeclaration","src":"14616:22:58","value":{"name":"value6","nativeSrc":"14632:6:58","nodeType":"YulIdentifier","src":"14632:6:58"},"variables":[{"name":"srcPtr_1","nativeSrc":"14620:8:58","nodeType":"YulTypedName","src":"14620:8:58","type":""}]},{"nativeSrc":"14647:12:58","nodeType":"YulVariableDeclaration","src":"14647:12:58","value":{"kind":"number","nativeSrc":"14658:1:58","nodeType":"YulLiteral","src":"14658:1:58","type":"","value":"0"},"variables":[{"name":"i_1","nativeSrc":"14651:3:58","nodeType":"YulTypedName","src":"14651:3:58","type":""}]},{"body":{"nativeSrc":"14723:233:58","nodeType":"YulBlock","src":"14723:233:58","statements":[{"nativeSrc":"14737:37:58","nodeType":"YulVariableDeclaration","src":"14737:37:58","value":{"arguments":[{"name":"srcPtr_1","nativeSrc":"14765:8:58","nodeType":"YulIdentifier","src":"14765:8:58"}],"functionName":{"name":"calldataload","nativeSrc":"14752:12:58","nodeType":"YulIdentifier","src":"14752:12:58"},"nativeSrc":"14752:22:58","nodeType":"YulFunctionCall","src":"14752:22:58"},"variables":[{"name":"value_1","nativeSrc":"14741:7:58","nodeType":"YulTypedName","src":"14741:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"14809:7:58","nodeType":"YulIdentifier","src":"14809:7:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"14787:21:58","nodeType":"YulIdentifier","src":"14787:21:58"},"nativeSrc":"14787:30:58","nodeType":"YulFunctionCall","src":"14787:30:58"},"nativeSrc":"14787:30:58","nodeType":"YulExpressionStatement","src":"14787:30:58"},{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"14837:5:58","nodeType":"YulIdentifier","src":"14837:5:58"},{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"14858:7:58","nodeType":"YulIdentifier","src":"14858:7:58"}],"functionName":{"name":"iszero","nativeSrc":"14851:6:58","nodeType":"YulIdentifier","src":"14851:6:58"},"nativeSrc":"14851:15:58","nodeType":"YulFunctionCall","src":"14851:15:58"}],"functionName":{"name":"iszero","nativeSrc":"14844:6:58","nodeType":"YulIdentifier","src":"14844:6:58"},"nativeSrc":"14844:23:58","nodeType":"YulFunctionCall","src":"14844:23:58"}],"functionName":{"name":"mstore","nativeSrc":"14830:6:58","nodeType":"YulIdentifier","src":"14830:6:58"},"nativeSrc":"14830:38:58","nodeType":"YulFunctionCall","src":"14830:38:58"},"nativeSrc":"14830:38:58","nodeType":"YulExpressionStatement","src":"14830:38:58"},{"nativeSrc":"14881:23:58","nodeType":"YulAssignment","src":"14881:23:58","value":{"arguments":[{"name":"pos_1","nativeSrc":"14894:5:58","nodeType":"YulIdentifier","src":"14894:5:58"},{"name":"_2","nativeSrc":"14901:2:58","nodeType":"YulIdentifier","src":"14901:2:58"}],"functionName":{"name":"add","nativeSrc":"14890:3:58","nodeType":"YulIdentifier","src":"14890:3:58"},"nativeSrc":"14890:14:58","nodeType":"YulFunctionCall","src":"14890:14:58"},"variableNames":[{"name":"pos_1","nativeSrc":"14881:5:58","nodeType":"YulIdentifier","src":"14881:5:58"}]},{"nativeSrc":"14917:29:58","nodeType":"YulAssignment","src":"14917:29:58","value":{"arguments":[{"name":"srcPtr_1","nativeSrc":"14933:8:58","nodeType":"YulIdentifier","src":"14933:8:58"},{"name":"_2","nativeSrc":"14943:2:58","nodeType":"YulIdentifier","src":"14943:2:58"}],"functionName":{"name":"add","nativeSrc":"14929:3:58","nodeType":"YulIdentifier","src":"14929:3:58"},"nativeSrc":"14929:17:58","nodeType":"YulFunctionCall","src":"14929:17:58"},"variableNames":[{"name":"srcPtr_1","nativeSrc":"14917:8:58","nodeType":"YulIdentifier","src":"14917:8:58"}]}]},"condition":{"arguments":[{"name":"i_1","nativeSrc":"14679:3:58","nodeType":"YulIdentifier","src":"14679:3:58"},{"name":"value7","nativeSrc":"14684:6:58","nodeType":"YulIdentifier","src":"14684:6:58"}],"functionName":{"name":"lt","nativeSrc":"14676:2:58","nodeType":"YulIdentifier","src":"14676:2:58"},"nativeSrc":"14676:15:58","nodeType":"YulFunctionCall","src":"14676:15:58"},"nativeSrc":"14668:288:58","nodeType":"YulForLoop","post":{"nativeSrc":"14692:22:58","nodeType":"YulBlock","src":"14692:22:58","statements":[{"nativeSrc":"14694:18:58","nodeType":"YulAssignment","src":"14694:18:58","value":{"arguments":[{"name":"i_1","nativeSrc":"14705:3:58","nodeType":"YulIdentifier","src":"14705:3:58"},{"kind":"number","nativeSrc":"14710:1:58","nodeType":"YulLiteral","src":"14710:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14701:3:58","nodeType":"YulIdentifier","src":"14701:3:58"},"nativeSrc":"14701:11:58","nodeType":"YulFunctionCall","src":"14701:11:58"},"variableNames":[{"name":"i_1","nativeSrc":"14694:3:58","nodeType":"YulIdentifier","src":"14694:3:58"}]}]},"pre":{"nativeSrc":"14672:3:58","nodeType":"YulBlock","src":"14672:3:58","statements":[]},"src":"14668:288:58"},{"nativeSrc":"14965:13:58","nodeType":"YulAssignment","src":"14965:13:58","value":{"name":"pos_1","nativeSrc":"14973:5:58","nodeType":"YulIdentifier","src":"14973:5:58"},"variableNames":[{"name":"tail","nativeSrc":"14965:4:58","nodeType":"YulIdentifier","src":"14965:4:58"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"13184:1800:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13516:9:58","nodeType":"YulTypedName","src":"13516:9:58","type":""},{"name":"value7","nativeSrc":"13527:6:58","nodeType":"YulTypedName","src":"13527:6:58","type":""},{"name":"value6","nativeSrc":"13535:6:58","nodeType":"YulTypedName","src":"13535:6:58","type":""},{"name":"value5","nativeSrc":"13543:6:58","nodeType":"YulTypedName","src":"13543:6:58","type":""},{"name":"value4","nativeSrc":"13551:6:58","nodeType":"YulTypedName","src":"13551:6:58","type":""},{"name":"value3","nativeSrc":"13559:6:58","nodeType":"YulTypedName","src":"13559:6:58","type":""},{"name":"value2","nativeSrc":"13567:6:58","nodeType":"YulTypedName","src":"13567:6:58","type":""},{"name":"value1","nativeSrc":"13575:6:58","nodeType":"YulTypedName","src":"13575:6:58","type":""},{"name":"value0","nativeSrc":"13583:6:58","nodeType":"YulTypedName","src":"13583:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13594:4:58","nodeType":"YulTypedName","src":"13594:4:58","type":""}],"src":"13184:1800:58"},{"body":{"nativeSrc":"15070:103:58","nodeType":"YulBlock","src":"15070:103:58","statements":[{"body":{"nativeSrc":"15116:16:58","nodeType":"YulBlock","src":"15116:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15125:1:58","nodeType":"YulLiteral","src":"15125:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"15128:1:58","nodeType":"YulLiteral","src":"15128:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15118:6:58","nodeType":"YulIdentifier","src":"15118:6:58"},"nativeSrc":"15118:12:58","nodeType":"YulFunctionCall","src":"15118:12:58"},"nativeSrc":"15118:12:58","nodeType":"YulExpressionStatement","src":"15118:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15091:7:58","nodeType":"YulIdentifier","src":"15091:7:58"},{"name":"headStart","nativeSrc":"15100:9:58","nodeType":"YulIdentifier","src":"15100:9:58"}],"functionName":{"name":"sub","nativeSrc":"15087:3:58","nodeType":"YulIdentifier","src":"15087:3:58"},"nativeSrc":"15087:23:58","nodeType":"YulFunctionCall","src":"15087:23:58"},{"kind":"number","nativeSrc":"15112:2:58","nodeType":"YulLiteral","src":"15112:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"15083:3:58","nodeType":"YulIdentifier","src":"15083:3:58"},"nativeSrc":"15083:32:58","nodeType":"YulFunctionCall","src":"15083:32:58"},"nativeSrc":"15080:52:58","nodeType":"YulIf","src":"15080:52:58"},{"nativeSrc":"15141:26:58","nodeType":"YulAssignment","src":"15141:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"15157:9:58","nodeType":"YulIdentifier","src":"15157:9:58"}],"functionName":{"name":"mload","nativeSrc":"15151:5:58","nodeType":"YulIdentifier","src":"15151:5:58"},"nativeSrc":"15151:16:58","nodeType":"YulFunctionCall","src":"15151:16:58"},"variableNames":[{"name":"value0","nativeSrc":"15141:6:58","nodeType":"YulIdentifier","src":"15141:6:58"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"14989:184:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15036:9:58","nodeType":"YulTypedName","src":"15036:9:58","type":""},{"name":"dataEnd","nativeSrc":"15047:7:58","nodeType":"YulTypedName","src":"15047:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15059:6:58","nodeType":"YulTypedName","src":"15059:6:58","type":""}],"src":"14989:184:58"},{"body":{"nativeSrc":"15263:177:58","nodeType":"YulBlock","src":"15263:177:58","statements":[{"body":{"nativeSrc":"15309:16:58","nodeType":"YulBlock","src":"15309:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"15318:1:58","nodeType":"YulLiteral","src":"15318:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"15321:1:58","nodeType":"YulLiteral","src":"15321:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"15311:6:58","nodeType":"YulIdentifier","src":"15311:6:58"},"nativeSrc":"15311:12:58","nodeType":"YulFunctionCall","src":"15311:12:58"},"nativeSrc":"15311:12:58","nodeType":"YulExpressionStatement","src":"15311:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"15284:7:58","nodeType":"YulIdentifier","src":"15284:7:58"},{"name":"headStart","nativeSrc":"15293:9:58","nodeType":"YulIdentifier","src":"15293:9:58"}],"functionName":{"name":"sub","nativeSrc":"15280:3:58","nodeType":"YulIdentifier","src":"15280:3:58"},"nativeSrc":"15280:23:58","nodeType":"YulFunctionCall","src":"15280:23:58"},{"kind":"number","nativeSrc":"15305:2:58","nodeType":"YulLiteral","src":"15305:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"15276:3:58","nodeType":"YulIdentifier","src":"15276:3:58"},"nativeSrc":"15276:32:58","nodeType":"YulFunctionCall","src":"15276:32:58"},"nativeSrc":"15273:52:58","nodeType":"YulIf","src":"15273:52:58"},{"nativeSrc":"15334:36:58","nodeType":"YulVariableDeclaration","src":"15334:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"15360:9:58","nodeType":"YulIdentifier","src":"15360:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"15347:12:58","nodeType":"YulIdentifier","src":"15347:12:58"},"nativeSrc":"15347:23:58","nodeType":"YulFunctionCall","src":"15347:23:58"},"variables":[{"name":"value","nativeSrc":"15338:5:58","nodeType":"YulTypedName","src":"15338:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"15404:5:58","nodeType":"YulIdentifier","src":"15404:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"15379:24:58","nodeType":"YulIdentifier","src":"15379:24:58"},"nativeSrc":"15379:31:58","nodeType":"YulFunctionCall","src":"15379:31:58"},"nativeSrc":"15379:31:58","nodeType":"YulExpressionStatement","src":"15379:31:58"},{"nativeSrc":"15419:15:58","nodeType":"YulAssignment","src":"15419:15:58","value":{"name":"value","nativeSrc":"15429:5:58","nodeType":"YulIdentifier","src":"15429:5:58"},"variableNames":[{"name":"value0","nativeSrc":"15419:6:58","nodeType":"YulIdentifier","src":"15419:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3849","nativeSrc":"15178:262:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15229:9:58","nodeType":"YulTypedName","src":"15229:9:58","type":""},{"name":"dataEnd","nativeSrc":"15240:7:58","nodeType":"YulTypedName","src":"15240:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"15252:6:58","nodeType":"YulTypedName","src":"15252:6:58","type":""}],"src":"15178:262:58"},{"body":{"nativeSrc":"15574:198:58","nodeType":"YulBlock","src":"15574:198:58","statements":[{"nativeSrc":"15584:26:58","nodeType":"YulAssignment","src":"15584:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"15596:9:58","nodeType":"YulIdentifier","src":"15596:9:58"},{"kind":"number","nativeSrc":"15607:2:58","nodeType":"YulLiteral","src":"15607:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15592:3:58","nodeType":"YulIdentifier","src":"15592:3:58"},"nativeSrc":"15592:18:58","nodeType":"YulFunctionCall","src":"15592:18:58"},"variableNames":[{"name":"tail","nativeSrc":"15584:4:58","nodeType":"YulIdentifier","src":"15584:4:58"}]},{"nativeSrc":"15619:52:58","nodeType":"YulVariableDeclaration","src":"15619:52:58","value":{"kind":"number","nativeSrc":"15629:42:58","nodeType":"YulLiteral","src":"15629:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"15623:2:58","nodeType":"YulTypedName","src":"15623:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15687:9:58","nodeType":"YulIdentifier","src":"15687:9:58"},{"arguments":[{"name":"value0","nativeSrc":"15702:6:58","nodeType":"YulIdentifier","src":"15702:6:58"},{"name":"_1","nativeSrc":"15710:2:58","nodeType":"YulIdentifier","src":"15710:2:58"}],"functionName":{"name":"and","nativeSrc":"15698:3:58","nodeType":"YulIdentifier","src":"15698:3:58"},"nativeSrc":"15698:15:58","nodeType":"YulFunctionCall","src":"15698:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15680:6:58","nodeType":"YulIdentifier","src":"15680:6:58"},"nativeSrc":"15680:34:58","nodeType":"YulFunctionCall","src":"15680:34:58"},"nativeSrc":"15680:34:58","nodeType":"YulExpressionStatement","src":"15680:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15734:9:58","nodeType":"YulIdentifier","src":"15734:9:58"},{"kind":"number","nativeSrc":"15745:2:58","nodeType":"YulLiteral","src":"15745:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15730:3:58","nodeType":"YulIdentifier","src":"15730:3:58"},"nativeSrc":"15730:18:58","nodeType":"YulFunctionCall","src":"15730:18:58"},{"arguments":[{"name":"value1","nativeSrc":"15754:6:58","nodeType":"YulIdentifier","src":"15754:6:58"},{"name":"_1","nativeSrc":"15762:2:58","nodeType":"YulIdentifier","src":"15762:2:58"}],"functionName":{"name":"and","nativeSrc":"15750:3:58","nodeType":"YulIdentifier","src":"15750:3:58"},"nativeSrc":"15750:15:58","nodeType":"YulFunctionCall","src":"15750:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15723:6:58","nodeType":"YulIdentifier","src":"15723:6:58"},"nativeSrc":"15723:43:58","nodeType":"YulFunctionCall","src":"15723:43:58"},"nativeSrc":"15723:43:58","nodeType":"YulExpressionStatement","src":"15723:43:58"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"15445:327:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15535:9:58","nodeType":"YulTypedName","src":"15535:9:58","type":""},{"name":"value1","nativeSrc":"15546:6:58","nodeType":"YulTypedName","src":"15546:6:58","type":""},{"name":"value0","nativeSrc":"15554:6:58","nodeType":"YulTypedName","src":"15554:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15565:4:58","nodeType":"YulTypedName","src":"15565:4:58","type":""}],"src":"15445:327:58"},{"body":{"nativeSrc":"16006:329:58","nodeType":"YulBlock","src":"16006:329:58","statements":[{"nativeSrc":"16016:27:58","nodeType":"YulAssignment","src":"16016:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"16028:9:58","nodeType":"YulIdentifier","src":"16028:9:58"},{"kind":"number","nativeSrc":"16039:3:58","nodeType":"YulLiteral","src":"16039:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16024:3:58","nodeType":"YulIdentifier","src":"16024:3:58"},"nativeSrc":"16024:19:58","nodeType":"YulFunctionCall","src":"16024:19:58"},"variableNames":[{"name":"tail","nativeSrc":"16016:4:58","nodeType":"YulIdentifier","src":"16016:4:58"}]},{"nativeSrc":"16052:52:58","nodeType":"YulVariableDeclaration","src":"16052:52:58","value":{"kind":"number","nativeSrc":"16062:42:58","nodeType":"YulLiteral","src":"16062:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16056:2:58","nodeType":"YulTypedName","src":"16056:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16120:9:58","nodeType":"YulIdentifier","src":"16120:9:58"},{"arguments":[{"name":"value0","nativeSrc":"16135:6:58","nodeType":"YulIdentifier","src":"16135:6:58"},{"name":"_1","nativeSrc":"16143:2:58","nodeType":"YulIdentifier","src":"16143:2:58"}],"functionName":{"name":"and","nativeSrc":"16131:3:58","nodeType":"YulIdentifier","src":"16131:3:58"},"nativeSrc":"16131:15:58","nodeType":"YulFunctionCall","src":"16131:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16113:6:58","nodeType":"YulIdentifier","src":"16113:6:58"},"nativeSrc":"16113:34:58","nodeType":"YulFunctionCall","src":"16113:34:58"},"nativeSrc":"16113:34:58","nodeType":"YulExpressionStatement","src":"16113:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16167:9:58","nodeType":"YulIdentifier","src":"16167:9:58"},{"kind":"number","nativeSrc":"16178:2:58","nodeType":"YulLiteral","src":"16178:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16163:3:58","nodeType":"YulIdentifier","src":"16163:3:58"},"nativeSrc":"16163:18:58","nodeType":"YulFunctionCall","src":"16163:18:58"},{"arguments":[{"name":"value1","nativeSrc":"16187:6:58","nodeType":"YulIdentifier","src":"16187:6:58"},{"name":"_1","nativeSrc":"16195:2:58","nodeType":"YulIdentifier","src":"16195:2:58"}],"functionName":{"name":"and","nativeSrc":"16183:3:58","nodeType":"YulIdentifier","src":"16183:3:58"},"nativeSrc":"16183:15:58","nodeType":"YulFunctionCall","src":"16183:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16156:6:58","nodeType":"YulIdentifier","src":"16156:6:58"},"nativeSrc":"16156:43:58","nodeType":"YulFunctionCall","src":"16156:43:58"},"nativeSrc":"16156:43:58","nodeType":"YulExpressionStatement","src":"16156:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16219:9:58","nodeType":"YulIdentifier","src":"16219:9:58"},{"kind":"number","nativeSrc":"16230:2:58","nodeType":"YulLiteral","src":"16230:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16215:3:58","nodeType":"YulIdentifier","src":"16215:3:58"},"nativeSrc":"16215:18:58","nodeType":"YulFunctionCall","src":"16215:18:58"},{"name":"value2","nativeSrc":"16235:6:58","nodeType":"YulIdentifier","src":"16235:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16208:6:58","nodeType":"YulIdentifier","src":"16208:6:58"},"nativeSrc":"16208:34:58","nodeType":"YulFunctionCall","src":"16208:34:58"},"nativeSrc":"16208:34:58","nodeType":"YulExpressionStatement","src":"16208:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16262:9:58","nodeType":"YulIdentifier","src":"16262:9:58"},{"kind":"number","nativeSrc":"16273:2:58","nodeType":"YulLiteral","src":"16273:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16258:3:58","nodeType":"YulIdentifier","src":"16258:3:58"},"nativeSrc":"16258:18:58","nodeType":"YulFunctionCall","src":"16258:18:58"},{"name":"value3","nativeSrc":"16278:6:58","nodeType":"YulIdentifier","src":"16278:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16251:6:58","nodeType":"YulIdentifier","src":"16251:6:58"},"nativeSrc":"16251:34:58","nodeType":"YulFunctionCall","src":"16251:34:58"},"nativeSrc":"16251:34:58","nodeType":"YulExpressionStatement","src":"16251:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16305:9:58","nodeType":"YulIdentifier","src":"16305:9:58"},{"kind":"number","nativeSrc":"16316:3:58","nodeType":"YulLiteral","src":"16316:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16301:3:58","nodeType":"YulIdentifier","src":"16301:3:58"},"nativeSrc":"16301:19:58","nodeType":"YulFunctionCall","src":"16301:19:58"},{"name":"value4","nativeSrc":"16322:6:58","nodeType":"YulIdentifier","src":"16322:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16294:6:58","nodeType":"YulIdentifier","src":"16294:6:58"},"nativeSrc":"16294:35:58","nodeType":"YulFunctionCall","src":"16294:35:58"},"nativeSrc":"16294:35:58","nodeType":"YulExpressionStatement","src":"16294:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"15777:558:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15943:9:58","nodeType":"YulTypedName","src":"15943:9:58","type":""},{"name":"value4","nativeSrc":"15954:6:58","nodeType":"YulTypedName","src":"15954:6:58","type":""},{"name":"value3","nativeSrc":"15962:6:58","nodeType":"YulTypedName","src":"15962:6:58","type":""},{"name":"value2","nativeSrc":"15970:6:58","nodeType":"YulTypedName","src":"15970:6:58","type":""},{"name":"value1","nativeSrc":"15978:6:58","nodeType":"YulTypedName","src":"15978:6:58","type":""},{"name":"value0","nativeSrc":"15986:6:58","nodeType":"YulTypedName","src":"15986:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15997:4:58","nodeType":"YulTypedName","src":"15997:4:58","type":""}],"src":"15777:558:58"},{"body":{"nativeSrc":"16561:329:58","nodeType":"YulBlock","src":"16561:329:58","statements":[{"nativeSrc":"16571:27:58","nodeType":"YulAssignment","src":"16571:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"16583:9:58","nodeType":"YulIdentifier","src":"16583:9:58"},{"kind":"number","nativeSrc":"16594:3:58","nodeType":"YulLiteral","src":"16594:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16579:3:58","nodeType":"YulIdentifier","src":"16579:3:58"},"nativeSrc":"16579:19:58","nodeType":"YulFunctionCall","src":"16579:19:58"},"variableNames":[{"name":"tail","nativeSrc":"16571:4:58","nodeType":"YulIdentifier","src":"16571:4:58"}]},{"nativeSrc":"16607:52:58","nodeType":"YulVariableDeclaration","src":"16607:52:58","value":{"kind":"number","nativeSrc":"16617:42:58","nodeType":"YulLiteral","src":"16617:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16611:2:58","nodeType":"YulTypedName","src":"16611:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16675:9:58","nodeType":"YulIdentifier","src":"16675:9:58"},{"arguments":[{"name":"value0","nativeSrc":"16690:6:58","nodeType":"YulIdentifier","src":"16690:6:58"},{"name":"_1","nativeSrc":"16698:2:58","nodeType":"YulIdentifier","src":"16698:2:58"}],"functionName":{"name":"and","nativeSrc":"16686:3:58","nodeType":"YulIdentifier","src":"16686:3:58"},"nativeSrc":"16686:15:58","nodeType":"YulFunctionCall","src":"16686:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16668:6:58","nodeType":"YulIdentifier","src":"16668:6:58"},"nativeSrc":"16668:34:58","nodeType":"YulFunctionCall","src":"16668:34:58"},"nativeSrc":"16668:34:58","nodeType":"YulExpressionStatement","src":"16668:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16722:9:58","nodeType":"YulIdentifier","src":"16722:9:58"},{"kind":"number","nativeSrc":"16733:2:58","nodeType":"YulLiteral","src":"16733:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16718:3:58","nodeType":"YulIdentifier","src":"16718:3:58"},"nativeSrc":"16718:18:58","nodeType":"YulFunctionCall","src":"16718:18:58"},{"arguments":[{"name":"value1","nativeSrc":"16742:6:58","nodeType":"YulIdentifier","src":"16742:6:58"},{"name":"_1","nativeSrc":"16750:2:58","nodeType":"YulIdentifier","src":"16750:2:58"}],"functionName":{"name":"and","nativeSrc":"16738:3:58","nodeType":"YulIdentifier","src":"16738:3:58"},"nativeSrc":"16738:15:58","nodeType":"YulFunctionCall","src":"16738:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16711:6:58","nodeType":"YulIdentifier","src":"16711:6:58"},"nativeSrc":"16711:43:58","nodeType":"YulFunctionCall","src":"16711:43:58"},"nativeSrc":"16711:43:58","nodeType":"YulExpressionStatement","src":"16711:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16774:9:58","nodeType":"YulIdentifier","src":"16774:9:58"},{"kind":"number","nativeSrc":"16785:2:58","nodeType":"YulLiteral","src":"16785:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16770:3:58","nodeType":"YulIdentifier","src":"16770:3:58"},"nativeSrc":"16770:18:58","nodeType":"YulFunctionCall","src":"16770:18:58"},{"name":"value2","nativeSrc":"16790:6:58","nodeType":"YulIdentifier","src":"16790:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16763:6:58","nodeType":"YulIdentifier","src":"16763:6:58"},"nativeSrc":"16763:34:58","nodeType":"YulFunctionCall","src":"16763:34:58"},"nativeSrc":"16763:34:58","nodeType":"YulExpressionStatement","src":"16763:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16817:9:58","nodeType":"YulIdentifier","src":"16817:9:58"},{"kind":"number","nativeSrc":"16828:2:58","nodeType":"YulLiteral","src":"16828:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16813:3:58","nodeType":"YulIdentifier","src":"16813:3:58"},"nativeSrc":"16813:18:58","nodeType":"YulFunctionCall","src":"16813:18:58"},{"name":"value3","nativeSrc":"16833:6:58","nodeType":"YulIdentifier","src":"16833:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16806:6:58","nodeType":"YulIdentifier","src":"16806:6:58"},"nativeSrc":"16806:34:58","nodeType":"YulFunctionCall","src":"16806:34:58"},"nativeSrc":"16806:34:58","nodeType":"YulExpressionStatement","src":"16806:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16860:9:58","nodeType":"YulIdentifier","src":"16860:9:58"},{"kind":"number","nativeSrc":"16871:3:58","nodeType":"YulLiteral","src":"16871:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16856:3:58","nodeType":"YulIdentifier","src":"16856:3:58"},"nativeSrc":"16856:19:58","nodeType":"YulFunctionCall","src":"16856:19:58"},{"name":"value4","nativeSrc":"16877:6:58","nodeType":"YulIdentifier","src":"16877:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16849:6:58","nodeType":"YulIdentifier","src":"16849:6:58"},"nativeSrc":"16849:35:58","nodeType":"YulFunctionCall","src":"16849:35:58"},"nativeSrc":"16849:35:58","nodeType":"YulExpressionStatement","src":"16849:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"16340:550:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16498:9:58","nodeType":"YulTypedName","src":"16498:9:58","type":""},{"name":"value4","nativeSrc":"16509:6:58","nodeType":"YulTypedName","src":"16509:6:58","type":""},{"name":"value3","nativeSrc":"16517:6:58","nodeType":"YulTypedName","src":"16517:6:58","type":""},{"name":"value2","nativeSrc":"16525:6:58","nodeType":"YulTypedName","src":"16525:6:58","type":""},{"name":"value1","nativeSrc":"16533:6:58","nodeType":"YulTypedName","src":"16533:6:58","type":""},{"name":"value0","nativeSrc":"16541:6:58","nodeType":"YulTypedName","src":"16541:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16552:4:58","nodeType":"YulTypedName","src":"16552:4:58","type":""}],"src":"16340:550:58"},{"body":{"nativeSrc":"17032:168:58","nodeType":"YulBlock","src":"17032:168:58","statements":[{"nativeSrc":"17042:26:58","nodeType":"YulAssignment","src":"17042:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"17054:9:58","nodeType":"YulIdentifier","src":"17054:9:58"},{"kind":"number","nativeSrc":"17065:2:58","nodeType":"YulLiteral","src":"17065:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17050:3:58","nodeType":"YulIdentifier","src":"17050:3:58"},"nativeSrc":"17050:18:58","nodeType":"YulFunctionCall","src":"17050:18:58"},"variableNames":[{"name":"tail","nativeSrc":"17042:4:58","nodeType":"YulIdentifier","src":"17042:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17084:9:58","nodeType":"YulIdentifier","src":"17084:9:58"},{"arguments":[{"name":"value0","nativeSrc":"17099:6:58","nodeType":"YulIdentifier","src":"17099:6:58"},{"kind":"number","nativeSrc":"17107:42:58","nodeType":"YulLiteral","src":"17107:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"17095:3:58","nodeType":"YulIdentifier","src":"17095:3:58"},"nativeSrc":"17095:55:58","nodeType":"YulFunctionCall","src":"17095:55:58"}],"functionName":{"name":"mstore","nativeSrc":"17077:6:58","nodeType":"YulIdentifier","src":"17077:6:58"},"nativeSrc":"17077:74:58","nodeType":"YulFunctionCall","src":"17077:74:58"},"nativeSrc":"17077:74:58","nodeType":"YulExpressionStatement","src":"17077:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17171:9:58","nodeType":"YulIdentifier","src":"17171:9:58"},{"kind":"number","nativeSrc":"17182:2:58","nodeType":"YulLiteral","src":"17182:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17167:3:58","nodeType":"YulIdentifier","src":"17167:3:58"},"nativeSrc":"17167:18:58","nodeType":"YulFunctionCall","src":"17167:18:58"},{"name":"value1","nativeSrc":"17187:6:58","nodeType":"YulIdentifier","src":"17187:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17160:6:58","nodeType":"YulIdentifier","src":"17160:6:58"},"nativeSrc":"17160:34:58","nodeType":"YulFunctionCall","src":"17160:34:58"},"nativeSrc":"17160:34:58","nodeType":"YulExpressionStatement","src":"17160:34:58"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"16895:305:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16993:9:58","nodeType":"YulTypedName","src":"16993:9:58","type":""},{"name":"value1","nativeSrc":"17004:6:58","nodeType":"YulTypedName","src":"17004:6:58","type":""},{"name":"value0","nativeSrc":"17012:6:58","nodeType":"YulTypedName","src":"17012:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17023:4:58","nodeType":"YulTypedName","src":"17023:4:58","type":""}],"src":"16895:305:58"},{"body":{"nativeSrc":"17418:329:58","nodeType":"YulBlock","src":"17418:329:58","statements":[{"nativeSrc":"17428:27:58","nodeType":"YulAssignment","src":"17428:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"17440:9:58","nodeType":"YulIdentifier","src":"17440:9:58"},{"kind":"number","nativeSrc":"17451:3:58","nodeType":"YulLiteral","src":"17451:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"17436:3:58","nodeType":"YulIdentifier","src":"17436:3:58"},"nativeSrc":"17436:19:58","nodeType":"YulFunctionCall","src":"17436:19:58"},"variableNames":[{"name":"tail","nativeSrc":"17428:4:58","nodeType":"YulIdentifier","src":"17428:4:58"}]},{"nativeSrc":"17464:52:58","nodeType":"YulVariableDeclaration","src":"17464:52:58","value":{"kind":"number","nativeSrc":"17474:42:58","nodeType":"YulLiteral","src":"17474:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17468:2:58","nodeType":"YulTypedName","src":"17468:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17532:9:58","nodeType":"YulIdentifier","src":"17532:9:58"},{"arguments":[{"name":"value0","nativeSrc":"17547:6:58","nodeType":"YulIdentifier","src":"17547:6:58"},{"name":"_1","nativeSrc":"17555:2:58","nodeType":"YulIdentifier","src":"17555:2:58"}],"functionName":{"name":"and","nativeSrc":"17543:3:58","nodeType":"YulIdentifier","src":"17543:3:58"},"nativeSrc":"17543:15:58","nodeType":"YulFunctionCall","src":"17543:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17525:6:58","nodeType":"YulIdentifier","src":"17525:6:58"},"nativeSrc":"17525:34:58","nodeType":"YulFunctionCall","src":"17525:34:58"},"nativeSrc":"17525:34:58","nodeType":"YulExpressionStatement","src":"17525:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17579:9:58","nodeType":"YulIdentifier","src":"17579:9:58"},{"kind":"number","nativeSrc":"17590:2:58","nodeType":"YulLiteral","src":"17590:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17575:3:58","nodeType":"YulIdentifier","src":"17575:3:58"},"nativeSrc":"17575:18:58","nodeType":"YulFunctionCall","src":"17575:18:58"},{"arguments":[{"name":"value1","nativeSrc":"17599:6:58","nodeType":"YulIdentifier","src":"17599:6:58"},{"name":"_1","nativeSrc":"17607:2:58","nodeType":"YulIdentifier","src":"17607:2:58"}],"functionName":{"name":"and","nativeSrc":"17595:3:58","nodeType":"YulIdentifier","src":"17595:3:58"},"nativeSrc":"17595:15:58","nodeType":"YulFunctionCall","src":"17595:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17568:6:58","nodeType":"YulIdentifier","src":"17568:6:58"},"nativeSrc":"17568:43:58","nodeType":"YulFunctionCall","src":"17568:43:58"},"nativeSrc":"17568:43:58","nodeType":"YulExpressionStatement","src":"17568:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17631:9:58","nodeType":"YulIdentifier","src":"17631:9:58"},{"kind":"number","nativeSrc":"17642:2:58","nodeType":"YulLiteral","src":"17642:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17627:3:58","nodeType":"YulIdentifier","src":"17627:3:58"},"nativeSrc":"17627:18:58","nodeType":"YulFunctionCall","src":"17627:18:58"},{"name":"value2","nativeSrc":"17647:6:58","nodeType":"YulIdentifier","src":"17647:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17620:6:58","nodeType":"YulIdentifier","src":"17620:6:58"},"nativeSrc":"17620:34:58","nodeType":"YulFunctionCall","src":"17620:34:58"},"nativeSrc":"17620:34:58","nodeType":"YulExpressionStatement","src":"17620:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17674:9:58","nodeType":"YulIdentifier","src":"17674:9:58"},{"kind":"number","nativeSrc":"17685:2:58","nodeType":"YulLiteral","src":"17685:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17670:3:58","nodeType":"YulIdentifier","src":"17670:3:58"},"nativeSrc":"17670:18:58","nodeType":"YulFunctionCall","src":"17670:18:58"},{"name":"value3","nativeSrc":"17690:6:58","nodeType":"YulIdentifier","src":"17690:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17663:6:58","nodeType":"YulIdentifier","src":"17663:6:58"},"nativeSrc":"17663:34:58","nodeType":"YulFunctionCall","src":"17663:34:58"},"nativeSrc":"17663:34:58","nodeType":"YulExpressionStatement","src":"17663:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17717:9:58","nodeType":"YulIdentifier","src":"17717:9:58"},{"kind":"number","nativeSrc":"17728:3:58","nodeType":"YulLiteral","src":"17728:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17713:3:58","nodeType":"YulIdentifier","src":"17713:3:58"},"nativeSrc":"17713:19:58","nodeType":"YulFunctionCall","src":"17713:19:58"},{"name":"value4","nativeSrc":"17734:6:58","nodeType":"YulIdentifier","src":"17734:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17706:6:58","nodeType":"YulIdentifier","src":"17706:6:58"},"nativeSrc":"17706:35:58","nodeType":"YulFunctionCall","src":"17706:35:58"},"nativeSrc":"17706:35:58","nodeType":"YulExpressionStatement","src":"17706:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"17205:542:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17355:9:58","nodeType":"YulTypedName","src":"17355:9:58","type":""},{"name":"value4","nativeSrc":"17366:6:58","nodeType":"YulTypedName","src":"17366:6:58","type":""},{"name":"value3","nativeSrc":"17374:6:58","nodeType":"YulTypedName","src":"17374:6:58","type":""},{"name":"value2","nativeSrc":"17382:6:58","nodeType":"YulTypedName","src":"17382:6:58","type":""},{"name":"value1","nativeSrc":"17390:6:58","nodeType":"YulTypedName","src":"17390:6:58","type":""},{"name":"value0","nativeSrc":"17398:6:58","nodeType":"YulTypedName","src":"17398:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17409:4:58","nodeType":"YulTypedName","src":"17409:4:58","type":""}],"src":"17205:542:58"},{"body":{"nativeSrc":"17838:177:58","nodeType":"YulBlock","src":"17838:177:58","statements":[{"body":{"nativeSrc":"17884:16:58","nodeType":"YulBlock","src":"17884:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17893:1:58","nodeType":"YulLiteral","src":"17893:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"17896:1:58","nodeType":"YulLiteral","src":"17896:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17886:6:58","nodeType":"YulIdentifier","src":"17886:6:58"},"nativeSrc":"17886:12:58","nodeType":"YulFunctionCall","src":"17886:12:58"},"nativeSrc":"17886:12:58","nodeType":"YulExpressionStatement","src":"17886:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17859:7:58","nodeType":"YulIdentifier","src":"17859:7:58"},{"name":"headStart","nativeSrc":"17868:9:58","nodeType":"YulIdentifier","src":"17868:9:58"}],"functionName":{"name":"sub","nativeSrc":"17855:3:58","nodeType":"YulIdentifier","src":"17855:3:58"},"nativeSrc":"17855:23:58","nodeType":"YulFunctionCall","src":"17855:23:58"},{"kind":"number","nativeSrc":"17880:2:58","nodeType":"YulLiteral","src":"17880:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17851:3:58","nodeType":"YulIdentifier","src":"17851:3:58"},"nativeSrc":"17851:32:58","nodeType":"YulFunctionCall","src":"17851:32:58"},"nativeSrc":"17848:52:58","nodeType":"YulIf","src":"17848:52:58"},{"nativeSrc":"17909:36:58","nodeType":"YulVariableDeclaration","src":"17909:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"17935:9:58","nodeType":"YulIdentifier","src":"17935:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"17922:12:58","nodeType":"YulIdentifier","src":"17922:12:58"},"nativeSrc":"17922:23:58","nodeType":"YulFunctionCall","src":"17922:23:58"},"variables":[{"name":"value","nativeSrc":"17913:5:58","nodeType":"YulTypedName","src":"17913:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"17979:5:58","nodeType":"YulIdentifier","src":"17979:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"17954:24:58","nodeType":"YulIdentifier","src":"17954:24:58"},"nativeSrc":"17954:31:58","nodeType":"YulFunctionCall","src":"17954:31:58"},"nativeSrc":"17954:31:58","nodeType":"YulExpressionStatement","src":"17954:31:58"},{"nativeSrc":"17994:15:58","nodeType":"YulAssignment","src":"17994:15:58","value":{"name":"value","nativeSrc":"18004:5:58","nodeType":"YulIdentifier","src":"18004:5:58"},"variableNames":[{"name":"value0","nativeSrc":"17994:6:58","nodeType":"YulIdentifier","src":"17994:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$3768","nativeSrc":"17752:263:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17804:9:58","nodeType":"YulTypedName","src":"17804:9:58","type":""},{"name":"dataEnd","nativeSrc":"17815:7:58","nodeType":"YulTypedName","src":"17815:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17827:6:58","nodeType":"YulTypedName","src":"17827:6:58","type":""}],"src":"17752:263:58"},{"body":{"nativeSrc":"18177:241:58","nodeType":"YulBlock","src":"18177:241:58","statements":[{"nativeSrc":"18187:26:58","nodeType":"YulAssignment","src":"18187:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18199:9:58","nodeType":"YulIdentifier","src":"18199:9:58"},{"kind":"number","nativeSrc":"18210:2:58","nodeType":"YulLiteral","src":"18210:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18195:3:58","nodeType":"YulIdentifier","src":"18195:3:58"},"nativeSrc":"18195:18:58","nodeType":"YulFunctionCall","src":"18195:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18187:4:58","nodeType":"YulIdentifier","src":"18187:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18229:9:58","nodeType":"YulIdentifier","src":"18229:9:58"},{"name":"value0","nativeSrc":"18240:6:58","nodeType":"YulIdentifier","src":"18240:6:58"}],"functionName":{"name":"mstore","nativeSrc":"18222:6:58","nodeType":"YulIdentifier","src":"18222:6:58"},"nativeSrc":"18222:25:58","nodeType":"YulFunctionCall","src":"18222:25:58"},"nativeSrc":"18222:25:58","nodeType":"YulExpressionStatement","src":"18222:25:58"},{"nativeSrc":"18256:52:58","nodeType":"YulVariableDeclaration","src":"18256:52:58","value":{"kind":"number","nativeSrc":"18266:42:58","nodeType":"YulLiteral","src":"18266:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"18260:2:58","nodeType":"YulTypedName","src":"18260:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18328:9:58","nodeType":"YulIdentifier","src":"18328:9:58"},{"kind":"number","nativeSrc":"18339:2:58","nodeType":"YulLiteral","src":"18339:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18324:3:58","nodeType":"YulIdentifier","src":"18324:3:58"},"nativeSrc":"18324:18:58","nodeType":"YulFunctionCall","src":"18324:18:58"},{"arguments":[{"name":"value1","nativeSrc":"18348:6:58","nodeType":"YulIdentifier","src":"18348:6:58"},{"name":"_1","nativeSrc":"18356:2:58","nodeType":"YulIdentifier","src":"18356:2:58"}],"functionName":{"name":"and","nativeSrc":"18344:3:58","nodeType":"YulIdentifier","src":"18344:3:58"},"nativeSrc":"18344:15:58","nodeType":"YulFunctionCall","src":"18344:15:58"}],"functionName":{"name":"mstore","nativeSrc":"18317:6:58","nodeType":"YulIdentifier","src":"18317:6:58"},"nativeSrc":"18317:43:58","nodeType":"YulFunctionCall","src":"18317:43:58"},"nativeSrc":"18317:43:58","nodeType":"YulExpressionStatement","src":"18317:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18380:9:58","nodeType":"YulIdentifier","src":"18380:9:58"},{"kind":"number","nativeSrc":"18391:2:58","nodeType":"YulLiteral","src":"18391:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18376:3:58","nodeType":"YulIdentifier","src":"18376:3:58"},"nativeSrc":"18376:18:58","nodeType":"YulFunctionCall","src":"18376:18:58"},{"arguments":[{"name":"value2","nativeSrc":"18400:6:58","nodeType":"YulIdentifier","src":"18400:6:58"},{"name":"_1","nativeSrc":"18408:2:58","nodeType":"YulIdentifier","src":"18408:2:58"}],"functionName":{"name":"and","nativeSrc":"18396:3:58","nodeType":"YulIdentifier","src":"18396:3:58"},"nativeSrc":"18396:15:58","nodeType":"YulFunctionCall","src":"18396:15:58"}],"functionName":{"name":"mstore","nativeSrc":"18369:6:58","nodeType":"YulIdentifier","src":"18369:6:58"},"nativeSrc":"18369:43:58","nodeType":"YulFunctionCall","src":"18369:43:58"},"nativeSrc":"18369:43:58","nodeType":"YulExpressionStatement","src":"18369:43:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"18020:398:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18130:9:58","nodeType":"YulTypedName","src":"18130:9:58","type":""},{"name":"value2","nativeSrc":"18141:6:58","nodeType":"YulTypedName","src":"18141:6:58","type":""},{"name":"value1","nativeSrc":"18149:6:58","nodeType":"YulTypedName","src":"18149:6:58","type":""},{"name":"value0","nativeSrc":"18157:6:58","nodeType":"YulTypedName","src":"18157:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18168:4:58","nodeType":"YulTypedName","src":"18168:4:58","type":""}],"src":"18020:398:58"},{"body":{"nativeSrc":"18532:125:58","nodeType":"YulBlock","src":"18532:125:58","statements":[{"nativeSrc":"18542:26:58","nodeType":"YulAssignment","src":"18542:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18554:9:58","nodeType":"YulIdentifier","src":"18554:9:58"},{"kind":"number","nativeSrc":"18565:2:58","nodeType":"YulLiteral","src":"18565:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18550:3:58","nodeType":"YulIdentifier","src":"18550:3:58"},"nativeSrc":"18550:18:58","nodeType":"YulFunctionCall","src":"18550:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18542:4:58","nodeType":"YulIdentifier","src":"18542:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18584:9:58","nodeType":"YulIdentifier","src":"18584:9:58"},{"arguments":[{"name":"value0","nativeSrc":"18599:6:58","nodeType":"YulIdentifier","src":"18599:6:58"},{"kind":"number","nativeSrc":"18607:42:58","nodeType":"YulLiteral","src":"18607:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"18595:3:58","nodeType":"YulIdentifier","src":"18595:3:58"},"nativeSrc":"18595:55:58","nodeType":"YulFunctionCall","src":"18595:55:58"}],"functionName":{"name":"mstore","nativeSrc":"18577:6:58","nodeType":"YulIdentifier","src":"18577:6:58"},"nativeSrc":"18577:74:58","nodeType":"YulFunctionCall","src":"18577:74:58"},"nativeSrc":"18577:74:58","nodeType":"YulExpressionStatement","src":"18577:74:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"18423:234:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18501:9:58","nodeType":"YulTypedName","src":"18501:9:58","type":""},{"name":"value0","nativeSrc":"18512:6:58","nodeType":"YulTypedName","src":"18512:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18523:4:58","nodeType":"YulTypedName","src":"18523:4:58","type":""}],"src":"18423:234:58"},{"body":{"nativeSrc":"18791:168:58","nodeType":"YulBlock","src":"18791:168:58","statements":[{"nativeSrc":"18801:26:58","nodeType":"YulAssignment","src":"18801:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18813:9:58","nodeType":"YulIdentifier","src":"18813:9:58"},{"kind":"number","nativeSrc":"18824:2:58","nodeType":"YulLiteral","src":"18824:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18809:3:58","nodeType":"YulIdentifier","src":"18809:3:58"},"nativeSrc":"18809:18:58","nodeType":"YulFunctionCall","src":"18809:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18801:4:58","nodeType":"YulIdentifier","src":"18801:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18843:9:58","nodeType":"YulIdentifier","src":"18843:9:58"},{"name":"value0","nativeSrc":"18854:6:58","nodeType":"YulIdentifier","src":"18854:6:58"}],"functionName":{"name":"mstore","nativeSrc":"18836:6:58","nodeType":"YulIdentifier","src":"18836:6:58"},"nativeSrc":"18836:25:58","nodeType":"YulFunctionCall","src":"18836:25:58"},"nativeSrc":"18836:25:58","nodeType":"YulExpressionStatement","src":"18836:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18881:9:58","nodeType":"YulIdentifier","src":"18881:9:58"},{"kind":"number","nativeSrc":"18892:2:58","nodeType":"YulLiteral","src":"18892:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18877:3:58","nodeType":"YulIdentifier","src":"18877:3:58"},"nativeSrc":"18877:18:58","nodeType":"YulFunctionCall","src":"18877:18:58"},{"arguments":[{"name":"value1","nativeSrc":"18901:6:58","nodeType":"YulIdentifier","src":"18901:6:58"},{"kind":"number","nativeSrc":"18909:42:58","nodeType":"YulLiteral","src":"18909:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"18897:3:58","nodeType":"YulIdentifier","src":"18897:3:58"},"nativeSrc":"18897:55:58","nodeType":"YulFunctionCall","src":"18897:55:58"}],"functionName":{"name":"mstore","nativeSrc":"18870:6:58","nodeType":"YulIdentifier","src":"18870:6:58"},"nativeSrc":"18870:83:58","nodeType":"YulFunctionCall","src":"18870:83:58"},"nativeSrc":"18870:83:58","nodeType":"YulExpressionStatement","src":"18870:83:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"18662:297:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18752:9:58","nodeType":"YulTypedName","src":"18752:9:58","type":""},{"name":"value1","nativeSrc":"18763:6:58","nodeType":"YulTypedName","src":"18763:6:58","type":""},{"name":"value0","nativeSrc":"18771:6:58","nodeType":"YulTypedName","src":"18771:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18782:4:58","nodeType":"YulTypedName","src":"18782:4:58","type":""}],"src":"18662:297:58"},{"body":{"nativeSrc":"19138:179:58","nodeType":"YulBlock","src":"19138:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19155:9:58","nodeType":"YulIdentifier","src":"19155:9:58"},{"kind":"number","nativeSrc":"19166:2:58","nodeType":"YulLiteral","src":"19166:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19148:6:58","nodeType":"YulIdentifier","src":"19148:6:58"},"nativeSrc":"19148:21:58","nodeType":"YulFunctionCall","src":"19148:21:58"},"nativeSrc":"19148:21:58","nodeType":"YulExpressionStatement","src":"19148:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19189:9:58","nodeType":"YulIdentifier","src":"19189:9:58"},{"kind":"number","nativeSrc":"19200:2:58","nodeType":"YulLiteral","src":"19200:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19185:3:58","nodeType":"YulIdentifier","src":"19185:3:58"},"nativeSrc":"19185:18:58","nodeType":"YulFunctionCall","src":"19185:18:58"},{"kind":"number","nativeSrc":"19205:2:58","nodeType":"YulLiteral","src":"19205:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"19178:6:58","nodeType":"YulIdentifier","src":"19178:6:58"},"nativeSrc":"19178:30:58","nodeType":"YulFunctionCall","src":"19178:30:58"},"nativeSrc":"19178:30:58","nodeType":"YulExpressionStatement","src":"19178:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19228:9:58","nodeType":"YulIdentifier","src":"19228:9:58"},{"kind":"number","nativeSrc":"19239:2:58","nodeType":"YulLiteral","src":"19239:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19224:3:58","nodeType":"YulIdentifier","src":"19224:3:58"},"nativeSrc":"19224:18:58","nodeType":"YulFunctionCall","src":"19224:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"19244:31:58","nodeType":"YulLiteral","src":"19244:31:58","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"19217:6:58","nodeType":"YulIdentifier","src":"19217:6:58"},"nativeSrc":"19217:59:58","nodeType":"YulFunctionCall","src":"19217:59:58"},"nativeSrc":"19217:59:58","nodeType":"YulExpressionStatement","src":"19217:59:58"},{"nativeSrc":"19285:26:58","nodeType":"YulAssignment","src":"19285:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"19297:9:58","nodeType":"YulIdentifier","src":"19297:9:58"},{"kind":"number","nativeSrc":"19308:2:58","nodeType":"YulLiteral","src":"19308:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19293:3:58","nodeType":"YulIdentifier","src":"19293:3:58"},"nativeSrc":"19293:18:58","nodeType":"YulFunctionCall","src":"19293:18:58"},"variableNames":[{"name":"tail","nativeSrc":"19285:4:58","nodeType":"YulIdentifier","src":"19285:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18964:353:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19115:9:58","nodeType":"YulTypedName","src":"19115:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19129:4:58","nodeType":"YulTypedName","src":"19129:4:58","type":""}],"src":"18964:353:58"},{"body":{"nativeSrc":"19513:14:58","nodeType":"YulBlock","src":"19513:14:58","statements":[{"nativeSrc":"19515:10:58","nodeType":"YulAssignment","src":"19515:10:58","value":{"name":"pos","nativeSrc":"19522:3:58","nodeType":"YulIdentifier","src":"19522:3:58"},"variableNames":[{"name":"end","nativeSrc":"19515:3:58","nodeType":"YulIdentifier","src":"19515:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"19322:205:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19497:3:58","nodeType":"YulTypedName","src":"19497:3:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19505:3:58","nodeType":"YulTypedName","src":"19505:3:58","type":""}],"src":"19322:205:58"},{"body":{"nativeSrc":"19706:248:58","nodeType":"YulBlock","src":"19706:248:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19723:9:58","nodeType":"YulIdentifier","src":"19723:9:58"},{"kind":"number","nativeSrc":"19734:2:58","nodeType":"YulLiteral","src":"19734:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19716:6:58","nodeType":"YulIdentifier","src":"19716:6:58"},"nativeSrc":"19716:21:58","nodeType":"YulFunctionCall","src":"19716:21:58"},"nativeSrc":"19716:21:58","nodeType":"YulExpressionStatement","src":"19716:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19757:9:58","nodeType":"YulIdentifier","src":"19757:9:58"},{"kind":"number","nativeSrc":"19768:2:58","nodeType":"YulLiteral","src":"19768:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19753:3:58","nodeType":"YulIdentifier","src":"19753:3:58"},"nativeSrc":"19753:18:58","nodeType":"YulFunctionCall","src":"19753:18:58"},{"kind":"number","nativeSrc":"19773:2:58","nodeType":"YulLiteral","src":"19773:2:58","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"19746:6:58","nodeType":"YulIdentifier","src":"19746:6:58"},"nativeSrc":"19746:30:58","nodeType":"YulFunctionCall","src":"19746:30:58"},"nativeSrc":"19746:30:58","nodeType":"YulExpressionStatement","src":"19746:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19796:9:58","nodeType":"YulIdentifier","src":"19796:9:58"},{"kind":"number","nativeSrc":"19807:2:58","nodeType":"YulLiteral","src":"19807:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19792:3:58","nodeType":"YulIdentifier","src":"19792:3:58"},"nativeSrc":"19792:18:58","nodeType":"YulFunctionCall","src":"19792:18:58"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"19812:34:58","nodeType":"YulLiteral","src":"19812:34:58","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"19785:6:58","nodeType":"YulIdentifier","src":"19785:6:58"},"nativeSrc":"19785:62:58","nodeType":"YulFunctionCall","src":"19785:62:58"},"nativeSrc":"19785:62:58","nodeType":"YulExpressionStatement","src":"19785:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19867:9:58","nodeType":"YulIdentifier","src":"19867:9:58"},{"kind":"number","nativeSrc":"19878:2:58","nodeType":"YulLiteral","src":"19878:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19863:3:58","nodeType":"YulIdentifier","src":"19863:3:58"},"nativeSrc":"19863:18:58","nodeType":"YulFunctionCall","src":"19863:18:58"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"19883:28:58","nodeType":"YulLiteral","src":"19883:28:58","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"19856:6:58","nodeType":"YulIdentifier","src":"19856:6:58"},"nativeSrc":"19856:56:58","nodeType":"YulFunctionCall","src":"19856:56:58"},"nativeSrc":"19856:56:58","nodeType":"YulExpressionStatement","src":"19856:56:58"},{"nativeSrc":"19921:27:58","nodeType":"YulAssignment","src":"19921:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"19933:9:58","nodeType":"YulIdentifier","src":"19933:9:58"},{"kind":"number","nativeSrc":"19944:3:58","nodeType":"YulLiteral","src":"19944:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19929:3:58","nodeType":"YulIdentifier","src":"19929:3:58"},"nativeSrc":"19929:19:58","nodeType":"YulFunctionCall","src":"19929:19:58"},"variableNames":[{"name":"tail","nativeSrc":"19921:4:58","nodeType":"YulIdentifier","src":"19921:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19532:422:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19683:9:58","nodeType":"YulTypedName","src":"19683:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19697:4:58","nodeType":"YulTypedName","src":"19697:4:58","type":""}],"src":"19532:422:58"},{"body":{"nativeSrc":"20089:201:58","nodeType":"YulBlock","src":"20089:201:58","statements":[{"body":{"nativeSrc":"20127:16:58","nodeType":"YulBlock","src":"20127:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20136:1:58","nodeType":"YulLiteral","src":"20136:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"20139:1:58","nodeType":"YulLiteral","src":"20139:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"20129:6:58","nodeType":"YulIdentifier","src":"20129:6:58"},"nativeSrc":"20129:12:58","nodeType":"YulFunctionCall","src":"20129:12:58"},"nativeSrc":"20129:12:58","nodeType":"YulExpressionStatement","src":"20129:12:58"}]},"condition":{"arguments":[{"name":"startIndex","nativeSrc":"20105:10:58","nodeType":"YulIdentifier","src":"20105:10:58"},{"name":"endIndex","nativeSrc":"20117:8:58","nodeType":"YulIdentifier","src":"20117:8:58"}],"functionName":{"name":"gt","nativeSrc":"20102:2:58","nodeType":"YulIdentifier","src":"20102:2:58"},"nativeSrc":"20102:24:58","nodeType":"YulFunctionCall","src":"20102:24:58"},"nativeSrc":"20099:44:58","nodeType":"YulIf","src":"20099:44:58"},{"body":{"nativeSrc":"20176:16:58","nodeType":"YulBlock","src":"20176:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"20185:1:58","nodeType":"YulLiteral","src":"20185:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"20188:1:58","nodeType":"YulLiteral","src":"20188:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"20178:6:58","nodeType":"YulIdentifier","src":"20178:6:58"},"nativeSrc":"20178:12:58","nodeType":"YulFunctionCall","src":"20178:12:58"},"nativeSrc":"20178:12:58","nodeType":"YulExpressionStatement","src":"20178:12:58"}]},"condition":{"arguments":[{"name":"endIndex","nativeSrc":"20158:8:58","nodeType":"YulIdentifier","src":"20158:8:58"},{"name":"length","nativeSrc":"20168:6:58","nodeType":"YulIdentifier","src":"20168:6:58"}],"functionName":{"name":"gt","nativeSrc":"20155:2:58","nodeType":"YulIdentifier","src":"20155:2:58"},"nativeSrc":"20155:20:58","nodeType":"YulFunctionCall","src":"20155:20:58"},"nativeSrc":"20152:40:58","nodeType":"YulIf","src":"20152:40:58"},{"nativeSrc":"20201:36:58","nodeType":"YulAssignment","src":"20201:36:58","value":{"arguments":[{"name":"offset","nativeSrc":"20218:6:58","nodeType":"YulIdentifier","src":"20218:6:58"},{"name":"startIndex","nativeSrc":"20226:10:58","nodeType":"YulIdentifier","src":"20226:10:58"}],"functionName":{"name":"add","nativeSrc":"20214:3:58","nodeType":"YulIdentifier","src":"20214:3:58"},"nativeSrc":"20214:23:58","nodeType":"YulFunctionCall","src":"20214:23:58"},"variableNames":[{"name":"offsetOut","nativeSrc":"20201:9:58","nodeType":"YulIdentifier","src":"20201:9:58"}]},{"nativeSrc":"20246:38:58","nodeType":"YulAssignment","src":"20246:38:58","value":{"arguments":[{"name":"endIndex","nativeSrc":"20263:8:58","nodeType":"YulIdentifier","src":"20263:8:58"},{"name":"startIndex","nativeSrc":"20273:10:58","nodeType":"YulIdentifier","src":"20273:10:58"}],"functionName":{"name":"sub","nativeSrc":"20259:3:58","nodeType":"YulIdentifier","src":"20259:3:58"},"nativeSrc":"20259:25:58","nodeType":"YulFunctionCall","src":"20259:25:58"},"variableNames":[{"name":"lengthOut","nativeSrc":"20246:9:58","nodeType":"YulIdentifier","src":"20246:9:58"}]}]},"name":"calldata_array_index_range_access_t_bytes_calldata_ptr","nativeSrc":"19959:331:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"20023:6:58","nodeType":"YulTypedName","src":"20023:6:58","type":""},{"name":"length","nativeSrc":"20031:6:58","nodeType":"YulTypedName","src":"20031:6:58","type":""},{"name":"startIndex","nativeSrc":"20039:10:58","nodeType":"YulTypedName","src":"20039:10:58","type":""},{"name":"endIndex","nativeSrc":"20051:8:58","nodeType":"YulTypedName","src":"20051:8:58","type":""}],"returnVariables":[{"name":"offsetOut","nativeSrc":"20064:9:58","nodeType":"YulTypedName","src":"20064:9:58","type":""},{"name":"lengthOut","nativeSrc":"20075:9:58","nodeType":"YulTypedName","src":"20075:9:58","type":""}],"src":"19959:331:58"},{"body":{"nativeSrc":"20469:232:58","nodeType":"YulBlock","src":"20469:232:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20486:9:58","nodeType":"YulIdentifier","src":"20486:9:58"},{"kind":"number","nativeSrc":"20497:2:58","nodeType":"YulLiteral","src":"20497:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20479:6:58","nodeType":"YulIdentifier","src":"20479:6:58"},"nativeSrc":"20479:21:58","nodeType":"YulFunctionCall","src":"20479:21:58"},"nativeSrc":"20479:21:58","nodeType":"YulExpressionStatement","src":"20479:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20520:9:58","nodeType":"YulIdentifier","src":"20520:9:58"},{"kind":"number","nativeSrc":"20531:2:58","nodeType":"YulLiteral","src":"20531:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20516:3:58","nodeType":"YulIdentifier","src":"20516:3:58"},"nativeSrc":"20516:18:58","nodeType":"YulFunctionCall","src":"20516:18:58"},{"kind":"number","nativeSrc":"20536:2:58","nodeType":"YulLiteral","src":"20536:2:58","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"20509:6:58","nodeType":"YulIdentifier","src":"20509:6:58"},"nativeSrc":"20509:30:58","nodeType":"YulFunctionCall","src":"20509:30:58"},"nativeSrc":"20509:30:58","nodeType":"YulExpressionStatement","src":"20509:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20559:9:58","nodeType":"YulIdentifier","src":"20559:9:58"},{"kind":"number","nativeSrc":"20570:2:58","nodeType":"YulLiteral","src":"20570:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20555:3:58","nodeType":"YulIdentifier","src":"20555:3:58"},"nativeSrc":"20555:18:58","nodeType":"YulFunctionCall","src":"20555:18:58"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"20575:34:58","nodeType":"YulLiteral","src":"20575:34:58","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"20548:6:58","nodeType":"YulIdentifier","src":"20548:6:58"},"nativeSrc":"20548:62:58","nodeType":"YulFunctionCall","src":"20548:62:58"},"nativeSrc":"20548:62:58","nodeType":"YulExpressionStatement","src":"20548:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20630:9:58","nodeType":"YulIdentifier","src":"20630:9:58"},{"kind":"number","nativeSrc":"20641:2:58","nodeType":"YulLiteral","src":"20641:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20626:3:58","nodeType":"YulIdentifier","src":"20626:3:58"},"nativeSrc":"20626:18:58","nodeType":"YulFunctionCall","src":"20626:18:58"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"20646:12:58","nodeType":"YulLiteral","src":"20646:12:58","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"20619:6:58","nodeType":"YulIdentifier","src":"20619:6:58"},"nativeSrc":"20619:40:58","nodeType":"YulFunctionCall","src":"20619:40:58"},"nativeSrc":"20619:40:58","nodeType":"YulExpressionStatement","src":"20619:40:58"},{"nativeSrc":"20668:27:58","nodeType":"YulAssignment","src":"20668:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"20680:9:58","nodeType":"YulIdentifier","src":"20680:9:58"},{"kind":"number","nativeSrc":"20691:3:58","nodeType":"YulLiteral","src":"20691:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20676:3:58","nodeType":"YulIdentifier","src":"20676:3:58"},"nativeSrc":"20676:19:58","nodeType":"YulFunctionCall","src":"20676:19:58"},"variableNames":[{"name":"tail","nativeSrc":"20668:4:58","nodeType":"YulIdentifier","src":"20668:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20295:406:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20446:9:58","nodeType":"YulTypedName","src":"20446:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20460:4:58","nodeType":"YulTypedName","src":"20460:4:58","type":""}],"src":"20295:406:58"},{"body":{"nativeSrc":"20880:228:58","nodeType":"YulBlock","src":"20880:228:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20897:9:58","nodeType":"YulIdentifier","src":"20897:9:58"},{"kind":"number","nativeSrc":"20908:2:58","nodeType":"YulLiteral","src":"20908:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20890:6:58","nodeType":"YulIdentifier","src":"20890:6:58"},"nativeSrc":"20890:21:58","nodeType":"YulFunctionCall","src":"20890:21:58"},"nativeSrc":"20890:21:58","nodeType":"YulExpressionStatement","src":"20890:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20931:9:58","nodeType":"YulIdentifier","src":"20931:9:58"},{"kind":"number","nativeSrc":"20942:2:58","nodeType":"YulLiteral","src":"20942:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20927:3:58","nodeType":"YulIdentifier","src":"20927:3:58"},"nativeSrc":"20927:18:58","nodeType":"YulFunctionCall","src":"20927:18:58"},{"kind":"number","nativeSrc":"20947:2:58","nodeType":"YulLiteral","src":"20947:2:58","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"20920:6:58","nodeType":"YulIdentifier","src":"20920:6:58"},"nativeSrc":"20920:30:58","nodeType":"YulFunctionCall","src":"20920:30:58"},"nativeSrc":"20920:30:58","nodeType":"YulExpressionStatement","src":"20920:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20970:9:58","nodeType":"YulIdentifier","src":"20970:9:58"},{"kind":"number","nativeSrc":"20981:2:58","nodeType":"YulLiteral","src":"20981:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20966:3:58","nodeType":"YulIdentifier","src":"20966:3:58"},"nativeSrc":"20966:18:58","nodeType":"YulFunctionCall","src":"20966:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"20986:34:58","nodeType":"YulLiteral","src":"20986:34:58","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"20959:6:58","nodeType":"YulIdentifier","src":"20959:6:58"},"nativeSrc":"20959:62:58","nodeType":"YulFunctionCall","src":"20959:62:58"},"nativeSrc":"20959:62:58","nodeType":"YulExpressionStatement","src":"20959:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21041:9:58","nodeType":"YulIdentifier","src":"21041:9:58"},{"kind":"number","nativeSrc":"21052:2:58","nodeType":"YulLiteral","src":"21052:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21037:3:58","nodeType":"YulIdentifier","src":"21037:3:58"},"nativeSrc":"21037:18:58","nodeType":"YulFunctionCall","src":"21037:18:58"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"21057:8:58","nodeType":"YulLiteral","src":"21057:8:58","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"21030:6:58","nodeType":"YulIdentifier","src":"21030:6:58"},"nativeSrc":"21030:36:58","nodeType":"YulFunctionCall","src":"21030:36:58"},"nativeSrc":"21030:36:58","nodeType":"YulExpressionStatement","src":"21030:36:58"},{"nativeSrc":"21075:27:58","nodeType":"YulAssignment","src":"21075:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"21087:9:58","nodeType":"YulIdentifier","src":"21087:9:58"},{"kind":"number","nativeSrc":"21098:3:58","nodeType":"YulLiteral","src":"21098:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"21083:3:58","nodeType":"YulIdentifier","src":"21083:3:58"},"nativeSrc":"21083:19:58","nodeType":"YulFunctionCall","src":"21083:19:58"},"variableNames":[{"name":"tail","nativeSrc":"21075:4:58","nodeType":"YulIdentifier","src":"21075:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20706:402:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20857:9:58","nodeType":"YulTypedName","src":"20857:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20871:4:58","nodeType":"YulTypedName","src":"20871:4:58","type":""}],"src":"20706:402:58"},{"body":{"nativeSrc":"21179:184:58","nodeType":"YulBlock","src":"21179:184:58","statements":[{"nativeSrc":"21189:10:58","nodeType":"YulVariableDeclaration","src":"21189:10:58","value":{"kind":"number","nativeSrc":"21198:1:58","nodeType":"YulLiteral","src":"21198:1:58","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"21193:1:58","nodeType":"YulTypedName","src":"21193:1:58","type":""}]},{"body":{"nativeSrc":"21258:63:58","nodeType":"YulBlock","src":"21258:63:58","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"21283:3:58","nodeType":"YulIdentifier","src":"21283:3:58"},{"name":"i","nativeSrc":"21288:1:58","nodeType":"YulIdentifier","src":"21288:1:58"}],"functionName":{"name":"add","nativeSrc":"21279:3:58","nodeType":"YulIdentifier","src":"21279:3:58"},"nativeSrc":"21279:11:58","nodeType":"YulFunctionCall","src":"21279:11:58"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"21302:3:58","nodeType":"YulIdentifier","src":"21302:3:58"},{"name":"i","nativeSrc":"21307:1:58","nodeType":"YulIdentifier","src":"21307:1:58"}],"functionName":{"name":"add","nativeSrc":"21298:3:58","nodeType":"YulIdentifier","src":"21298:3:58"},"nativeSrc":"21298:11:58","nodeType":"YulFunctionCall","src":"21298:11:58"}],"functionName":{"name":"mload","nativeSrc":"21292:5:58","nodeType":"YulIdentifier","src":"21292:5:58"},"nativeSrc":"21292:18:58","nodeType":"YulFunctionCall","src":"21292:18:58"}],"functionName":{"name":"mstore","nativeSrc":"21272:6:58","nodeType":"YulIdentifier","src":"21272:6:58"},"nativeSrc":"21272:39:58","nodeType":"YulFunctionCall","src":"21272:39:58"},"nativeSrc":"21272:39:58","nodeType":"YulExpressionStatement","src":"21272:39:58"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"21219:1:58","nodeType":"YulIdentifier","src":"21219:1:58"},{"name":"length","nativeSrc":"21222:6:58","nodeType":"YulIdentifier","src":"21222:6:58"}],"functionName":{"name":"lt","nativeSrc":"21216:2:58","nodeType":"YulIdentifier","src":"21216:2:58"},"nativeSrc":"21216:13:58","nodeType":"YulFunctionCall","src":"21216:13:58"},"nativeSrc":"21208:113:58","nodeType":"YulForLoop","post":{"nativeSrc":"21230:19:58","nodeType":"YulBlock","src":"21230:19:58","statements":[{"nativeSrc":"21232:15:58","nodeType":"YulAssignment","src":"21232:15:58","value":{"arguments":[{"name":"i","nativeSrc":"21241:1:58","nodeType":"YulIdentifier","src":"21241:1:58"},{"kind":"number","nativeSrc":"21244:2:58","nodeType":"YulLiteral","src":"21244:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21237:3:58","nodeType":"YulIdentifier","src":"21237:3:58"},"nativeSrc":"21237:10:58","nodeType":"YulFunctionCall","src":"21237:10:58"},"variableNames":[{"name":"i","nativeSrc":"21232:1:58","nodeType":"YulIdentifier","src":"21232:1:58"}]}]},"pre":{"nativeSrc":"21212:3:58","nodeType":"YulBlock","src":"21212:3:58","statements":[]},"src":"21208:113:58"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"21341:3:58","nodeType":"YulIdentifier","src":"21341:3:58"},{"name":"length","nativeSrc":"21346:6:58","nodeType":"YulIdentifier","src":"21346:6:58"}],"functionName":{"name":"add","nativeSrc":"21337:3:58","nodeType":"YulIdentifier","src":"21337:3:58"},"nativeSrc":"21337:16:58","nodeType":"YulFunctionCall","src":"21337:16:58"},{"kind":"number","nativeSrc":"21355:1:58","nodeType":"YulLiteral","src":"21355:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"21330:6:58","nodeType":"YulIdentifier","src":"21330:6:58"},"nativeSrc":"21330:27:58","nodeType":"YulFunctionCall","src":"21330:27:58"},"nativeSrc":"21330:27:58","nodeType":"YulExpressionStatement","src":"21330:27:58"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21113:250:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"21157:3:58","nodeType":"YulTypedName","src":"21157:3:58","type":""},{"name":"dst","nativeSrc":"21162:3:58","nodeType":"YulTypedName","src":"21162:3:58","type":""},{"name":"length","nativeSrc":"21167:6:58","nodeType":"YulTypedName","src":"21167:6:58","type":""}],"src":"21113:250:58"},{"body":{"nativeSrc":"21505:150:58","nodeType":"YulBlock","src":"21505:150:58","statements":[{"nativeSrc":"21515:27:58","nodeType":"YulVariableDeclaration","src":"21515:27:58","value":{"arguments":[{"name":"value0","nativeSrc":"21535:6:58","nodeType":"YulIdentifier","src":"21535:6:58"}],"functionName":{"name":"mload","nativeSrc":"21529:5:58","nodeType":"YulIdentifier","src":"21529:5:58"},"nativeSrc":"21529:13:58","nodeType":"YulFunctionCall","src":"21529:13:58"},"variables":[{"name":"length","nativeSrc":"21519:6:58","nodeType":"YulTypedName","src":"21519:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"21590:6:58","nodeType":"YulIdentifier","src":"21590:6:58"},{"kind":"number","nativeSrc":"21598:4:58","nodeType":"YulLiteral","src":"21598:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"21586:3:58","nodeType":"YulIdentifier","src":"21586:3:58"},"nativeSrc":"21586:17:58","nodeType":"YulFunctionCall","src":"21586:17:58"},{"name":"pos","nativeSrc":"21605:3:58","nodeType":"YulIdentifier","src":"21605:3:58"},{"name":"length","nativeSrc":"21610:6:58","nodeType":"YulIdentifier","src":"21610:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21551:34:58","nodeType":"YulIdentifier","src":"21551:34:58"},"nativeSrc":"21551:66:58","nodeType":"YulFunctionCall","src":"21551:66:58"},"nativeSrc":"21551:66:58","nodeType":"YulExpressionStatement","src":"21551:66:58"},{"nativeSrc":"21626:23:58","nodeType":"YulAssignment","src":"21626:23:58","value":{"arguments":[{"name":"pos","nativeSrc":"21637:3:58","nodeType":"YulIdentifier","src":"21637:3:58"},{"name":"length","nativeSrc":"21642:6:58","nodeType":"YulIdentifier","src":"21642:6:58"}],"functionName":{"name":"add","nativeSrc":"21633:3:58","nodeType":"YulIdentifier","src":"21633:3:58"},"nativeSrc":"21633:16:58","nodeType":"YulFunctionCall","src":"21633:16:58"},"variableNames":[{"name":"end","nativeSrc":"21626:3:58","nodeType":"YulIdentifier","src":"21626:3:58"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"21368:287:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"21481:3:58","nodeType":"YulTypedName","src":"21481:3:58","type":""},{"name":"value0","nativeSrc":"21486:6:58","nodeType":"YulTypedName","src":"21486:6:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"21497:3:58","nodeType":"YulTypedName","src":"21497:3:58","type":""}],"src":"21368:287:58"},{"body":{"nativeSrc":"21834:179:58","nodeType":"YulBlock","src":"21834:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21851:9:58","nodeType":"YulIdentifier","src":"21851:9:58"},{"kind":"number","nativeSrc":"21862:2:58","nodeType":"YulLiteral","src":"21862:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21844:6:58","nodeType":"YulIdentifier","src":"21844:6:58"},"nativeSrc":"21844:21:58","nodeType":"YulFunctionCall","src":"21844:21:58"},"nativeSrc":"21844:21:58","nodeType":"YulExpressionStatement","src":"21844:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21885:9:58","nodeType":"YulIdentifier","src":"21885:9:58"},{"kind":"number","nativeSrc":"21896:2:58","nodeType":"YulLiteral","src":"21896:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21881:3:58","nodeType":"YulIdentifier","src":"21881:3:58"},"nativeSrc":"21881:18:58","nodeType":"YulFunctionCall","src":"21881:18:58"},{"kind":"number","nativeSrc":"21901:2:58","nodeType":"YulLiteral","src":"21901:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"21874:6:58","nodeType":"YulIdentifier","src":"21874:6:58"},"nativeSrc":"21874:30:58","nodeType":"YulFunctionCall","src":"21874:30:58"},"nativeSrc":"21874:30:58","nodeType":"YulExpressionStatement","src":"21874:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21924:9:58","nodeType":"YulIdentifier","src":"21924:9:58"},{"kind":"number","nativeSrc":"21935:2:58","nodeType":"YulLiteral","src":"21935:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21920:3:58","nodeType":"YulIdentifier","src":"21920:3:58"},"nativeSrc":"21920:18:58","nodeType":"YulFunctionCall","src":"21920:18:58"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"21940:31:58","nodeType":"YulLiteral","src":"21940:31:58","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"21913:6:58","nodeType":"YulIdentifier","src":"21913:6:58"},"nativeSrc":"21913:59:58","nodeType":"YulFunctionCall","src":"21913:59:58"},"nativeSrc":"21913:59:58","nodeType":"YulExpressionStatement","src":"21913:59:58"},{"nativeSrc":"21981:26:58","nodeType":"YulAssignment","src":"21981:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"21993:9:58","nodeType":"YulIdentifier","src":"21993:9:58"},{"kind":"number","nativeSrc":"22004:2:58","nodeType":"YulLiteral","src":"22004:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21989:3:58","nodeType":"YulIdentifier","src":"21989:3:58"},"nativeSrc":"21989:18:58","nodeType":"YulFunctionCall","src":"21989:18:58"},"variableNames":[{"name":"tail","nativeSrc":"21981:4:58","nodeType":"YulIdentifier","src":"21981:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21660:353:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21811:9:58","nodeType":"YulTypedName","src":"21811:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21825:4:58","nodeType":"YulTypedName","src":"21825:4:58","type":""}],"src":"21660:353:58"},{"body":{"nativeSrc":"22139:334:58","nodeType":"YulBlock","src":"22139:334:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"22156:9:58","nodeType":"YulIdentifier","src":"22156:9:58"},{"kind":"number","nativeSrc":"22167:2:58","nodeType":"YulLiteral","src":"22167:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"22149:6:58","nodeType":"YulIdentifier","src":"22149:6:58"},"nativeSrc":"22149:21:58","nodeType":"YulFunctionCall","src":"22149:21:58"},"nativeSrc":"22149:21:58","nodeType":"YulExpressionStatement","src":"22149:21:58"},{"nativeSrc":"22179:27:58","nodeType":"YulVariableDeclaration","src":"22179:27:58","value":{"arguments":[{"name":"value0","nativeSrc":"22199:6:58","nodeType":"YulIdentifier","src":"22199:6:58"}],"functionName":{"name":"mload","nativeSrc":"22193:5:58","nodeType":"YulIdentifier","src":"22193:5:58"},"nativeSrc":"22193:13:58","nodeType":"YulFunctionCall","src":"22193:13:58"},"variables":[{"name":"length","nativeSrc":"22183:6:58","nodeType":"YulTypedName","src":"22183:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22226:9:58","nodeType":"YulIdentifier","src":"22226:9:58"},{"kind":"number","nativeSrc":"22237:2:58","nodeType":"YulLiteral","src":"22237:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22222:3:58","nodeType":"YulIdentifier","src":"22222:3:58"},"nativeSrc":"22222:18:58","nodeType":"YulFunctionCall","src":"22222:18:58"},{"name":"length","nativeSrc":"22242:6:58","nodeType":"YulIdentifier","src":"22242:6:58"}],"functionName":{"name":"mstore","nativeSrc":"22215:6:58","nodeType":"YulIdentifier","src":"22215:6:58"},"nativeSrc":"22215:34:58","nodeType":"YulFunctionCall","src":"22215:34:58"},"nativeSrc":"22215:34:58","nodeType":"YulExpressionStatement","src":"22215:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"22297:6:58","nodeType":"YulIdentifier","src":"22297:6:58"},{"kind":"number","nativeSrc":"22305:2:58","nodeType":"YulLiteral","src":"22305:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"22293:3:58","nodeType":"YulIdentifier","src":"22293:3:58"},"nativeSrc":"22293:15:58","nodeType":"YulFunctionCall","src":"22293:15:58"},{"arguments":[{"name":"headStart","nativeSrc":"22314:9:58","nodeType":"YulIdentifier","src":"22314:9:58"},{"kind":"number","nativeSrc":"22325:2:58","nodeType":"YulLiteral","src":"22325:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22310:3:58","nodeType":"YulIdentifier","src":"22310:3:58"},"nativeSrc":"22310:18:58","nodeType":"YulFunctionCall","src":"22310:18:58"},{"name":"length","nativeSrc":"22330:6:58","nodeType":"YulIdentifier","src":"22330:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"22258:34:58","nodeType":"YulIdentifier","src":"22258:34:58"},"nativeSrc":"22258:79:58","nodeType":"YulFunctionCall","src":"22258:79:58"},"nativeSrc":"22258:79:58","nodeType":"YulExpressionStatement","src":"22258:79:58"},{"nativeSrc":"22346:121:58","nodeType":"YulAssignment","src":"22346:121:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"22362:9:58","nodeType":"YulIdentifier","src":"22362:9:58"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"22381:6:58","nodeType":"YulIdentifier","src":"22381:6:58"},{"kind":"number","nativeSrc":"22389:2:58","nodeType":"YulLiteral","src":"22389:2:58","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"22377:3:58","nodeType":"YulIdentifier","src":"22377:3:58"},"nativeSrc":"22377:15:58","nodeType":"YulFunctionCall","src":"22377:15:58"},{"kind":"number","nativeSrc":"22394:66:58","nodeType":"YulLiteral","src":"22394:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"22373:3:58","nodeType":"YulIdentifier","src":"22373:3:58"},"nativeSrc":"22373:88:58","nodeType":"YulFunctionCall","src":"22373:88:58"}],"functionName":{"name":"add","nativeSrc":"22358:3:58","nodeType":"YulIdentifier","src":"22358:3:58"},"nativeSrc":"22358:104:58","nodeType":"YulFunctionCall","src":"22358:104:58"},{"kind":"number","nativeSrc":"22464:2:58","nodeType":"YulLiteral","src":"22464:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"22354:3:58","nodeType":"YulIdentifier","src":"22354:3:58"},"nativeSrc":"22354:113:58","nodeType":"YulFunctionCall","src":"22354:113:58"},"variableNames":[{"name":"tail","nativeSrc":"22346:4:58","nodeType":"YulIdentifier","src":"22346:4:58"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"22018:455:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"22108:9:58","nodeType":"YulTypedName","src":"22108:9:58","type":""},{"name":"value0","nativeSrc":"22119:6:58","nodeType":"YulTypedName","src":"22119:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"22130:4:58","nodeType":"YulTypedName","src":"22130:4:58","type":""}],"src":"22018:455:58"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_encode_tuple_t_bytes_calldata_ptr__to_t_bytes_memory_ptr__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), value1)\n        calldatacopy(add(headStart, 64), value0, value1)\n        mstore(add(add(headStart, value1), 64), 0)\n        tail := add(add(headStart, and(add(value1, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_3), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        mstore(headStart, 128)\n        let pos := tail_1\n        mstore(tail_1, value1)\n        pos := add(headStart, 160)\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            let value := calldataload(srcPtr)\n            validator_revert_address(value)\n            mstore(pos, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        let _2 := 0x20\n        mstore(add(headStart, _2), sub(pos, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_calldata(value2, value3, pos)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        let tail_3 := abi_encode_array_uint256_dyn_calldata(value4, value5, tail_2)\n        mstore(add(headStart, 96), sub(tail_3, headStart))\n        let pos_1 := tail_3\n        mstore(tail_3, value7)\n        pos_1 := add(tail_3, _2)\n        let srcPtr_1 := value6\n        let i_1 := 0\n        for { } lt(i_1, value7) { i_1 := add(i_1, 1) }\n        {\n            let value_1 := calldataload(srcPtr_1)\n            validator_revert_bool(value_1)\n            mstore(pos_1, iszero(iszero(value_1)))\n            pos_1 := add(pos_1, _2)\n            srcPtr_1 := add(srcPtr_1, _2)\n        }\n        tail := pos_1\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3849(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$3768(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function calldata_array_index_range_access_t_bytes_calldata_ptr(offset, length, startIndex, endIndex) -> offsetOut, lengthOut\n    {\n        if gt(startIndex, endIndex) { revert(0, 0) }\n        if gt(endIndex, length) { revert(0, 0) }\n        offsetOut := add(offset, startIndex)\n        lengthOut := sub(endIndex, startIndex)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1040":[{"length":32,"start":642},{"length":32,"start":904},{"length":32,"start":7853},{"length":32,"start":7989},{"length":32,"start":8164},{"length":32,"start":8226}],"4849":[{"length":32,"start":970},{"length":32,"start":1796},{"length":32,"start":2022},{"length":32,"start":3248},{"length":32,"start":3378},{"length":32,"start":4582}],"4851":[{"length":32,"start":854},{"length":32,"start":1741}]},"linkReferences":{},"object":"608060405234801561000f575f80fd5b50600436106101dc575f3560e01c806372c16a2411610109578063ad6b333b1161009e578063d547741f1161006e578063d547741f146104c8578063f2fde38b146104db578063f7ba94bd146104ee578063ff50abdc14610501575f80fd5b8063ad6b333b14610491578063af7d6ca314610499578063b5bd3eb9146104ac578063c3666c36146104b5575f80fd5b80638bb9c5bf116100d95780638bb9c5bf1461045c5780638da5cb5b1461046f5780638de17b741461047757806391d148541461047e575f80fd5b806372c16a241461041257806373c8a958146104395780638488bb4e1461044c5780638b785d4914610454575f80fd5b806331e66e1e1161017f578063572b6c051161014f578063572b6c05146103785780635df2dcbc146103c5578063687f34e0146103ec5780636b8f9c43146103ff575f80fd5b806331e66e1e146102ef5780633ccfd60b146103055780634fc358591461030d5780635188730214610351575f80fd5b806320babb92116101ba57806320babb92146102265780632b4c9f16146102805780632cc82655146102c75780632f2ff15d146102dc575f80fd5b806301ffc9a7146101e0578063055ad42e14610208578063148c2b5a1461021e575b5f80fd5b6101f36101ee3660046124e7565b61050a565b60405190151581526020015b60405180910390f35b6102105f5481565b6040519081526020016101ff565b610210600281565b61025e610234366004612547565b600160208190525f9182526040909120805491810154600282015460039092015490919060ff1684565b60408051948552602085019390935291830152151560608201526080016101ff565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101ff565b6102da6102d5366004612562565b610523565b005b6102da6102ea366004612579565b6105ba565b6102f76105ec565b6040516101ff9291906125a7565b6102da6105fe565b61032061031b3660046125f3565b610858565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101ff565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6101f3610386366004612547565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102a27f000000000000000000000000000000000000000000000000000000000000000081565b6102da6103fa3660046126d2565b61093b565b6102da61040d366004612547565b610c47565b6102107f7370656e6465720000000000000000000000000000000000000000000000000081565b6102da61044736600461278d565b610c67565b6102a2610e3f565b610210600381565b6102da61046a366004612562565b610e6a565b6102a2610e85565b6102105f81565b6101f361048c366004612579565b610e91565b610210600181565b6102da6104a7366004612820565b610eda565b61021060025481565b6102da6104c336600461278d565b61130d565b6102da6104d6366004612579565b61147e565b6102da6104e9366004612547565b6114ab565b6102da6104fc36600461284a565b6114c6565b61021060035481565b5f61051d82610517611583565b906115b0565b92915050565b61053c61052e611687565b610536611690565b906116bd565b600381111561057f576040517f96666719000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b5f819055604051600181527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a150565b5f6105c3611687565b90506105d181610536611690565b6105e78383836105df61172c565b929190611759565b505050565b365f6105f661182d565b915091509091565b60035f5414610646575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600360048201526024810191909152604401610576565b5f61064f611687565b90505f60015f61065d611687565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040015f2080549091508015610770575f82556040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528481166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303815f875af115801561074a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061076e91906128be565b505b60028201548015610852575f83600201819055508060035f8282546107959190612906565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af115801561082c573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061085091906128be565b505b50505050565b5f60015f54146108a1575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600160048201526024810191909152604401610576565b73ffffffffffffffffffffffffffffffffffffffff85165f908152600160205260408120600281018054919287926108da908490612919565b925050819055508460035f8282546108f29190612919565b925050819055508460025f82825461090a9190612919565b909155507f4fc358590000000000000000000000000000000000000000000000000000000098975050505050505050565b86858114158061094b5750808414155b806109565750808214155b1561098d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f54156109d2575f80546040517f7c9bb66300000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610576565b6109dd61052e611687565b5f5b818114610bf6575f8a8a838181106109f9576109f961292c565b9050602002016020810190610a0e9190612547565b905073ffffffffffffffffffffffffffffffffffffffff8116610a5d576040517f9c89d57f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f898984818110610a7057610a7061292c565b905060200201359050805f03610aca576040517fd49c192700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610576565b73ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020805415610b3f576040517f6dbaa9b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610576565b5f898986818110610b5257610b5261292c565b85855560200291909101356001840181905591508890508786818110610b7a57610b7a61292c565b9050602002016020810190610b8f9190612959565b6003830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610bca8184612919565b60025f828254610bda9190612919565b925050819055505050505080610bef90612974565b90506109df565b507f44fbb8621bc7a734e344e0d7f6b84824cf97e0d8d611f9f8502e42ff0b1dee438989898989898989604051610c349897969594939291906129f4565b60405180910390a1505050505050505050565b610c5261052e611687565b610c6481610c5e611837565b90611864565b50565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cf5573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610d199190612ab9565b610d239190612906565b90505f805b85811015610de2577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16878783818110610d7957610d7961292c565b9050602002016020810190610d8e9190612547565b73ffffffffffffffffffffffffffffffffffffffff1603610dd057848482818110610dbb57610dbb61292c565b9050602002013582610dcd9190612919565b91505b80610dda81612974565b915050610d28565b5081811115610e27576040517f7ce4d19d0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610576565b610e35888888888888611928565b5050505050505050565b5f610e65610e4b611837565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610c64610e75611687565b82610e7e61172c565b9190611a12565b5f610e65610e4b611690565b5f610ed38383610e9f61172c565b5f9283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b5f610ee3611687565b9050815f03610f3e576040517f09bc7f2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015284166024820152604401610576565b60025f5414610f86575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600260048201526024810191909152604401610576565b610fba7f7370656e6465720000000000000000000000000000000000000000000000000082610fb361172c565b9190611ab5565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160208190526040822090810154909190801561108f578481106110795784836001015f8282546110079190612906565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff8087168252881660208201529081018690525f6060820181905260808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a1505050505050565b5f60018401556110898186612906565b94508091505b82545f908015611139578681106111265786855f015f8282546110b29190612906565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff80891682528a166020820152908101859052606081018890525f60808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a15050505050505050565b5f85556111338188612906565b96508091505b60028501548781101561119f576040517f1734392500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80891660048301528a16602482015260448101899052606401610576565b87866002015f8282546111b29190612906565b925050819055508760035f8282546111ca9190612906565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb611216610e4b611837565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018b90526044016020604051808303815f875af1158015611285573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906112a991906128be565b506040805173ffffffffffffffffffffffffffffffffffffffff808a1682528b16602082015290810186905260608101849052608081018990527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a001610c34565b61131861052e611687565b8483811415806113285750808214155b1561135f576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e355785858281811061137a5761137a61292c565b905060200201602081019061138f9190612547565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a858181106113bd576113bd61292c565b90506020020160208101906113d29190612547565b8787868181106113e4576113e461292c565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561145d575f80fd5b505af115801561146f573d5f803e3d5ffd5b50505050806001019050611361565b5f611487611687565b905061149581610536611690565b6105e78383836114a361172c565b929190611b3a565b610c646114b6611687565b826114bf611690565b9190611c02565b6114d161052e611687565b8281811461150b576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b81811461157b576115738484838181106115295761152961292c565b905060200201358787848181106115425761154261292c565b90506020020160208101906115579190612547565b73ffffffffffffffffffffffffffffffffffffffff1690611d15565b60010161150d565b505050505050565b5f8061051d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e612906565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016115fe57505f61051d565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161164f5750600161051d565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610e65611e6b565b5f8061051d60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd612906565b815473ffffffffffffffffffffffffffffffffffffffff828116911614611728576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610576565b5050565b5f8061051d60017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b23612906565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff16610852575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b365f6105f6611faf565b5f8061051d60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae612906565b73ffffffffffffffffffffffffffffffffffffffff81166118b1576040517f40b539cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b61193361052e611687565b8483811415806119435750808214155b1561197a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e3557611a0a8888838181106119985761199861292c565b90506020020160208101906119ad9190612547565b8585848181106119bf576119bf61292c565b905060200201358888858181106119d8576119d861292c565b90506020020160208101906119ed9190612547565b73ffffffffffffffffffffffffffffffffffffffff169190612114565b60010161197c565b611a1d838284611ab5565b5f8181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b5f8281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166105e7576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610576565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1615610852575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600161181f565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c6f576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610576565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146108525783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350505050565b80471015611d7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610576565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611dd5576040519150601f19603f3d011682016040523d82523d5f602084013e611dda565b606091505b50509050806105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610576565b5f33321480611e7a5750601836105b15611e8457503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611f9e57506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f7a573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f9e91906128be565b15611fa857919050565b3391505090565b365f33321480611fbf5750601836105b15611fcc57505f91369150565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614806120ff575073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016638929a8ca367fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec013560601c6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152336024820152604401602060405180830381865afa1580156120db573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906120ff91906128be565b1561210c576105f66121a1565b505f91369150565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb000000000000000000000000000000000000000000000000000000001790526105e79084906121d1565b365f6105f67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec8301828481612ad0565b5f612232826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166122de9092919063ffffffff16565b905080515f148061225257508080602001905181019061225291906128be565b6105e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610576565b60606122ec84845f856122f4565b949350505050565b606082471015612386576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610576565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516123ae9190612b19565b5f6040518083038185875af1925050503d805f81146123e8576040519150601f19603f3d011682016040523d82523d5f602084013e6123ed565b606091505b50915091506123fe87838387612409565b979650505050505050565b6060831561249e5782515f036124975773ffffffffffffffffffffffffffffffffffffffff85163b612497576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610576565b50816122ec565b6122ec83838151156124b35781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105769190612b34565b5f602082840312156124f7575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ed3575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c64575f80fd5b5f60208284031215612557575f80fd5b8135610ed381612526565b5f60208284031215612572575f80fd5b5035919050565b5f806040838503121561258a575f80fd5b82359150602083013561259c81612526565b809150509250929050565b60208152816020820152818360408301375f818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b5f805f805f60808688031215612607575f80fd5b853561261281612526565b9450602086013561262281612526565b935060408601359250606086013567ffffffffffffffff80821115612645575f80fd5b818801915088601f830112612658575f80fd5b813581811115612666575f80fd5b896020828501011115612677575f80fd5b9699959850939650602001949392505050565b5f8083601f84011261269a575f80fd5b50813567ffffffffffffffff8111156126b1575f80fd5b6020830191508360208260051b85010111156126cb575f80fd5b9250929050565b5f805f805f805f806080898b0312156126e9575f80fd5b883567ffffffffffffffff80821115612700575f80fd5b61270c8c838d0161268a565b909a50985060208b0135915080821115612724575f80fd5b6127308c838d0161268a565b909850965060408b0135915080821115612748575f80fd5b6127548c838d0161268a565b909650945060608b013591508082111561276c575f80fd5b506127798b828c0161268a565b999c989b5096995094979396929594505050565b5f805f805f80606087890312156127a2575f80fd5b863567ffffffffffffffff808211156127b9575f80fd5b6127c58a838b0161268a565b909850965060208901359150808211156127dd575f80fd5b6127e98a838b0161268a565b90965094506040890135915080821115612801575f80fd5b5061280e89828a0161268a565b979a9699509497509295939492505050565b5f8060408385031215612831575f80fd5b823561283c81612526565b946020939093013593505050565b5f805f806040858703121561285d575f80fd5b843567ffffffffffffffff80821115612874575f80fd5b6128808883890161268a565b90965094506020870135915080821115612898575f80fd5b506128a58782880161268a565b95989497509550505050565b8015158114610c64575f80fd5b5f602082840312156128ce575f80fd5b8151610ed3816128b1565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b8181038181111561051d5761051d6128d9565b8082018082111561051d5761051d6128d9565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612969575f80fd5b8135610ed3816128b1565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036129a4576129a46128d9565b5060010190565b8183525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156129db575f80fd5b8260051b80836020870137939093016020019392505050565b608080825281018890525f8960a08301825b8b811015612a43578235612a1981612526565b73ffffffffffffffffffffffffffffffffffffffff16825260209283019290910190600101612a06565b506020915083810382850152612a5a818a8c6129ab565b90508381036040850152612a6f81888a6129ab565b848103606086015285815286915082015f5b86811015612aa8578235612a94816128b1565b151582529183019190830190600101612a81565b509c9b505050505050505050505050565b5f60208284031215612ac9575f80fd5b5051919050565b5f8085851115612ade575f80fd5b83861115612aea575f80fd5b5050820193919092039150565b5f5b83811015612b11578181015183820152602001612af9565b50505f910152565b5f8251612b2a818460208701612af7565b9190910192915050565b602081525f8251806020840152612b52816040850160208701612af7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212200a153026d6329e9320e87981377a1febfce47f160facb235e19385eafcb98cd864736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1DC JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x72C16A24 GT PUSH2 0x109 JUMPI DUP1 PUSH4 0xAD6B333B GT PUSH2 0x9E JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4C8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4DB JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x4EE JUMPI DUP1 PUSH4 0xFF50ABDC EQ PUSH2 0x501 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD6B333B EQ PUSH2 0x491 JUMPI DUP1 PUSH4 0xAF7D6CA3 EQ PUSH2 0x499 JUMPI DUP1 PUSH4 0xB5BD3EB9 EQ PUSH2 0x4AC JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x4B5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x45C JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x46F JUMPI DUP1 PUSH4 0x8DE17B74 EQ PUSH2 0x477 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x47E JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x72C16A24 EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x439 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x44C JUMPI DUP1 PUSH4 0x8B785D49 EQ PUSH2 0x454 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E GT PUSH2 0x17F JUMPI DUP1 PUSH4 0x572B6C05 GT PUSH2 0x14F JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x378 JUMPI DUP1 PUSH4 0x5DF2DCBC EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x687F34E0 EQ PUSH2 0x3EC JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x3FF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x31E66E1E EQ PUSH2 0x2EF JUMPI DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x305 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x30D JUMPI DUP1 PUSH4 0x51887302 EQ PUSH2 0x351 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x20BABB92 GT PUSH2 0x1BA JUMPI DUP1 PUSH4 0x20BABB92 EQ PUSH2 0x226 JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x2CC82655 EQ PUSH2 0x2C7 JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2DC JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1E0 JUMPI DUP1 PUSH4 0x55AD42E EQ PUSH2 0x208 JUMPI DUP1 PUSH4 0x148C2B5A EQ PUSH2 0x21E JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1F3 PUSH2 0x1EE CALLDATASIZE PUSH1 0x4 PUSH2 0x24E7 JUMP JUMPDEST PUSH2 0x50A JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x210 PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x210 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x25E PUSH2 0x234 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x2D5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0x523 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2DA PUSH2 0x2EA CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x5BA JUMP JUMPDEST PUSH2 0x2F7 PUSH2 0x5EC JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x1FF SWAP3 SWAP2 SWAP1 PUSH2 0x25A7 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x5FE JUMP JUMPDEST PUSH2 0x320 PUSH2 0x31B CALLDATASIZE PUSH1 0x4 PUSH2 0x25F3 JUMP JUMPDEST PUSH2 0x858 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1FF JUMP JUMPDEST PUSH2 0x2A2 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x386 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x2A2 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x3FA CALLDATASIZE PUSH1 0x4 PUSH2 0x26D2 JUMP JUMPDEST PUSH2 0x93B JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH2 0xC47 JUMP JUMPDEST PUSH2 0x210 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x447 CALLDATASIZE PUSH1 0x4 PUSH2 0x278D JUMP JUMPDEST PUSH2 0xC67 JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0xE3F JUMP JUMPDEST PUSH2 0x210 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x46A CALLDATASIZE PUSH1 0x4 PUSH2 0x2562 JUMP JUMPDEST PUSH2 0xE6A JUMP JUMPDEST PUSH2 0x2A2 PUSH2 0xE85 JUMP JUMPDEST PUSH2 0x210 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x1F3 PUSH2 0x48C CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0xE91 JUMP JUMPDEST PUSH2 0x210 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4A7 CALLDATASIZE PUSH1 0x4 PUSH2 0x2820 JUMP JUMPDEST PUSH2 0xEDA JUMP JUMPDEST PUSH2 0x210 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4C3 CALLDATASIZE PUSH1 0x4 PUSH2 0x278D JUMP JUMPDEST PUSH2 0x130D JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4D6 CALLDATASIZE PUSH1 0x4 PUSH2 0x2579 JUMP JUMPDEST PUSH2 0x147E JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4E9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2547 JUMP JUMPDEST PUSH2 0x14AB JUMP JUMPDEST PUSH2 0x2DA PUSH2 0x4FC CALLDATASIZE PUSH1 0x4 PUSH2 0x284A JUMP JUMPDEST PUSH2 0x14C6 JUMP JUMPDEST PUSH2 0x210 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH2 0x51D DUP3 PUSH2 0x517 PUSH2 0x1583 JUMP JUMPDEST SWAP1 PUSH2 0x15B0 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x53C PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST SWAP1 PUSH2 0x16BD JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x57F JUMPI PUSH1 0x40 MLOAD PUSH32 0x9666671900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5C3 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH2 0x5D1 DUP2 PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x5E7 DUP4 DUP4 DUP4 PUSH2 0x5DF PUSH2 0x172C JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1759 JUMP JUMPDEST POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH2 0x182D JUMP JUMPDEST SWAP2 POP SWAP2 POP SWAP1 SWAP2 JUMP JUMPDEST PUSH1 0x3 PUSH0 SLOAD EQ PUSH2 0x646 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 PUSH2 0x64F PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 PUSH0 PUSH2 0x65D PUSH2 0x1687 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x770 JUMPI PUSH0 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x74A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x76E SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x852 JUMPI PUSH0 DUP4 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x795 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x82C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x850 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 SLOAD EQ PUSH2 0x8A1 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP8 SWAP3 PUSH2 0x8DA SWAP1 DUP5 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8F2 SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x90A SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 DUP2 EQ ISZERO DUP1 PUSH2 0x94B JUMPI POP DUP1 DUP5 EQ ISZERO JUMPDEST DUP1 PUSH2 0x956 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x98D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD ISZERO PUSH2 0x9D2 JUMPI PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0x9DD PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xBF6 JUMPI PUSH0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9F9 JUMPI PUSH2 0x9F9 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xA0E SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA5D JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C89D57F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xA70 JUMPI PUSH2 0xA70 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH0 SUB PUSH2 0xACA JUMPI PUSH1 0x40 MLOAD PUSH32 0xD49C192700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xB3F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DBAA9B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0xB52 JUMPI PUSH2 0xB52 PUSH2 0x292C JUMP JUMPDEST DUP6 DUP6 SSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 DUP5 ADD DUP2 SWAP1 SSTORE SWAP2 POP DUP9 SWAP1 POP DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB7A JUMPI PUSH2 0xB7A PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB8F SWAP2 SWAP1 PUSH2 0x2959 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xBCA DUP2 DUP5 PUSH2 0x2919 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBDA SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP DUP1 PUSH2 0xBEF SWAP1 PUSH2 0x2974 JUMP JUMPDEST SWAP1 POP PUSH2 0x9DF JUMP JUMPDEST POP PUSH32 0x44FBB8621BC7A734E344E0D7F6B84824CF97E0D8D611F9F8502E42FF0B1DEE43 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xC34 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x29F4 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC52 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST PUSH2 0xC64 DUP2 PUSH2 0xC5E PUSH2 0x1837 JUMP JUMPDEST SWAP1 PUSH2 0x1864 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCF5 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xD19 SWAP2 SWAP1 PUSH2 0x2AB9 JUMP JUMPDEST PUSH2 0xD23 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xDE2 JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0xD79 JUMPI PUSH2 0xD79 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD8E SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xDD0 JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xDBB JUMPI PUSH2 0xDBB PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xDCD SWAP2 SWAP1 PUSH2 0x2919 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0xDDA DUP2 PUSH2 0x2974 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xD28 JUMP JUMPDEST POP DUP2 DUP2 GT ISZERO PUSH2 0xE27 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CE4D19D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0xE35 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x1928 JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0xE4B PUSH2 0x1837 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC64 PUSH2 0xE75 PUSH2 0x1687 JUMP JUMPDEST DUP3 PUSH2 0xE7E PUSH2 0x172C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A12 JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0xE4B PUSH2 0x1690 JUMP JUMPDEST PUSH0 PUSH2 0xED3 DUP4 DUP4 PUSH2 0xE9F PUSH2 0x172C JUMP JUMPDEST PUSH0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEE3 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP DUP2 PUSH0 SUB PUSH2 0xF3E JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BC7F2B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0xF86 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH2 0xFBA PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xFB3 PUSH2 0x172C JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1AB5 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x108F JUMPI DUP5 DUP2 LT PUSH2 0x1079 JUMPI DUP5 DUP4 PUSH1 0x1 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1007 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP3 MSTORE DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x1089 DUP2 DUP7 PUSH2 0x2906 JUMP JUMPDEST SWAP5 POP DUP1 SWAP2 POP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x1139 JUMPI DUP7 DUP2 LT PUSH2 0x1126 JUMPI DUP7 DUP6 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x10B2 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP3 MSTORE DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP6 SSTORE PUSH2 0x1133 DUP2 DUP9 PUSH2 0x2906 JUMP JUMPDEST SWAP7 POP DUP1 SWAP2 POP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD DUP8 DUP2 LT ISZERO PUSH2 0x119F JUMPI PUSH1 0x40 MLOAD PUSH32 0x1734392500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST DUP8 DUP7 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x11B2 SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x11CA SWAP2 SWAP1 PUSH2 0x2906 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xA9059CBB PUSH2 0x1216 PUSH2 0xE4B PUSH2 0x1837 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1285 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x12A9 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH2 0xC34 JUMP JUMPDEST PUSH2 0x1318 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1328 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x135F JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE35 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x137A JUMPI PUSH2 0x137A PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x138F SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x13BD JUMPI PUSH2 0x13BD PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x13D2 SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x13E4 JUMPI PUSH2 0x13E4 PUSH2 0x292C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x145D JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x146F JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x1361 JUMP JUMPDEST PUSH0 PUSH2 0x1487 PUSH2 0x1687 JUMP JUMPDEST SWAP1 POP PUSH2 0x1495 DUP2 PUSH2 0x536 PUSH2 0x1690 JUMP JUMPDEST PUSH2 0x5E7 DUP4 DUP4 DUP4 PUSH2 0x14A3 PUSH2 0x172C JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1B3A JUMP JUMPDEST PUSH2 0xC64 PUSH2 0x14B6 PUSH2 0x1687 JUMP JUMPDEST DUP3 PUSH2 0x14BF PUSH2 0x1690 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1C02 JUMP JUMPDEST PUSH2 0x14D1 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x150B JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x157B JUMPI PUSH2 0x1573 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x1529 JUMPI PUSH2 0x1529 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x1542 JUMPI PUSH2 0x1542 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1557 SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x1D15 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x150D JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x2906 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x15FE JUMPI POP PUSH0 PUSH2 0x51D JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x164F JUMPI POP PUSH1 0x1 PUSH2 0x51D JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE65 PUSH2 0x1E6B JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x2906 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x1728 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x2906 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x852 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH2 0x1FAF JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x51D PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x2906 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x18B1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x1933 PUSH2 0x52E PUSH2 0x1687 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1943 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x197A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE35 JUMPI PUSH2 0x1A0A DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x1998 JUMPI PUSH2 0x1998 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19AD SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x19BF JUMPI PUSH2 0x19BF PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x19D8 JUMPI PUSH2 0x19D8 PUSH2 0x292C JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19ED SWAP2 SWAP1 PUSH2 0x2547 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x2114 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x197C JUMP JUMPDEST PUSH2 0x1A1D DUP4 DUP3 DUP5 PUSH2 0x1AB5 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x852 JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x181F JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C6F JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x576 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x852 JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1D7F JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1DD5 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1DDA JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E7A JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E84 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1F9E JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F7A JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F9E SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST ISZERO PUSH2 0x1FA8 JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST CALLDATASIZE PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1FBF JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1FCC JUMPI POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST CALLER PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND EQ DUP1 PUSH2 0x20FF JUMPI POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0x8929A8CA CALLDATASIZE PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC ADD CALLDATALOAD PUSH1 0x60 SHR PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE CALLER PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x20DB JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x20FF SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST ISZERO PUSH2 0x210C JUMPI PUSH2 0x5F6 PUSH2 0x21A1 JUMP JUMPDEST POP PUSH0 SWAP2 CALLDATASIZE SWAP2 POP JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP1 DUP3 ADD DUP5 SWAP1 MSTORE DUP3 MLOAD DUP1 DUP4 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP2 ADD SWAP1 SWAP2 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE PUSH2 0x5E7 SWAP1 DUP5 SWAP1 PUSH2 0x21D1 JUMP JUMPDEST CALLDATASIZE PUSH0 PUSH2 0x5F6 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC DUP4 ADD DUP3 DUP5 DUP2 PUSH2 0x2AD0 JUMP JUMPDEST PUSH0 PUSH2 0x2232 DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH2 0x22DE SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0x2252 JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x2252 SWAP2 SWAP1 PUSH2 0x28BE JUMP JUMPDEST PUSH2 0x5E7 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x22EC DUP5 DUP5 PUSH0 DUP6 PUSH2 0x22F4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2386 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x576 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x23AE SWAP2 SWAP1 PUSH2 0x2B19 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x23E8 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x23ED JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x23FE DUP8 DUP4 DUP4 DUP8 PUSH2 0x2409 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x249E JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x2497 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x2497 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x576 JUMP JUMPDEST POP DUP2 PUSH2 0x22EC JUMP JUMPDEST PUSH2 0x22EC DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x24B3 JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x576 SWAP2 SWAP1 PUSH2 0x2B34 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x24F7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xED3 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC64 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2557 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED3 DUP2 PUSH2 0x2526 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2572 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x258A JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x259C DUP2 PUSH2 0x2526 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE DUP2 PUSH1 0x20 DUP3 ADD MSTORE DUP2 DUP4 PUSH1 0x40 DUP4 ADD CALLDATACOPY PUSH0 DUP2 DUP4 ADD PUSH1 0x40 SWAP1 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x1F SWAP1 SWAP3 ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND ADD ADD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x2607 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x2612 DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x2622 DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2645 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2658 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2666 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2677 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x269A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x26B1 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x26CB JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x26E9 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2700 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x270C DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2724 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2730 DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2748 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2754 DUP13 DUP4 DUP14 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x276C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2779 DUP12 DUP3 DUP13 ADD PUSH2 0x268A JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x27A2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x27B9 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x27C5 DUP11 DUP4 DUP12 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x27DD JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x27E9 DUP11 DUP4 DUP12 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2801 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x280E DUP10 DUP3 DUP11 ADD PUSH2 0x268A JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2831 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x283C DUP2 PUSH2 0x2526 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x285D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2874 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2880 DUP9 DUP4 DUP10 ADD PUSH2 0x268A JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2898 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x28A5 DUP8 DUP3 DUP9 ADD PUSH2 0x268A JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC64 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x28CE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xED3 DUP2 PUSH2 0x28B1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x51D JUMPI PUSH2 0x51D PUSH2 0x28D9 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x51D JUMPI PUSH2 0x51D PUSH2 0x28D9 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2969 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xED3 DUP2 PUSH2 0x28B1 JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x29A4 JUMPI PUSH2 0x29A4 PUSH2 0x28D9 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x29DB JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 DUP10 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2A43 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A19 DUP2 PUSH2 0x2526 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A06 JUMP JUMPDEST POP PUSH1 0x20 SWAP2 POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2A5A DUP2 DUP11 DUP13 PUSH2 0x29AB JUMP JUMPDEST SWAP1 POP DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x2A6F DUP2 DUP9 DUP11 PUSH2 0x29AB JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP7 SWAP2 POP DUP3 ADD PUSH0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2AA8 JUMPI DUP3 CALLDATALOAD PUSH2 0x2A94 DUP2 PUSH2 0x28B1 JUMP JUMPDEST ISZERO ISZERO DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x2A81 JUMP JUMPDEST POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2AC9 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 DUP6 DUP6 GT ISZERO PUSH2 0x2ADE JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP4 DUP7 GT ISZERO PUSH2 0x2AEA JUMPI PUSH0 DUP1 REVERT JUMPDEST POP POP DUP3 ADD SWAP4 SWAP2 SWAP1 SWAP3 SUB SWAP2 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x2B11 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2AF9 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x2B2A DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x2AF7 JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x2B52 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x2AF7 JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 EXP ISZERO ADDRESS 0x26 0xD6 ORIGIN SWAP15 SWAP4 KECCAK256 0xE8 PUSH26 0x81377A1FEBFCE47F160FACB235E19385EAFCB98CD864736F6C63 NUMBER STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"317:406:56:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:13;;;;;;:::i;:::-;;:::i;:::-;;;516:14:58;;509:22;491:41;;479:2;464:18;542:165:13;;;;;;;;3308:40:57;;;;;;;;;689:25:58;;;677:2;662:18;3308:40:57;543:177:58;3124:38:57;;3161:1;3124:38;;3355:50;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1361:25:58;;;1417:2;1402:18;;1395:34;;;;1445:18;;;1438:34;1515:14;1508:22;1503:2;1488:18;;1481:50;1348:3;1333:19;3355:50:57;1136:401:58;728:115:17;817:19;728:115;;;1745:42:58;1733:55;;;1715:74;;1703:2;1688:18;728:115:17;1542:253:58;7167:268:57;;;;;;:::i;:::-;;:::i;:::-;;1116:257:3;;;;;;:::i;:::-;;:::i;627:94:56:-;;;:::i;:::-;;;;;;;;:::i;12697:646:57:-;;;:::i;9803:420::-;;;;;;:::i;:::-;;:::i;:::-;;;3872:66:58;3860:79;;;3842:98;;3830:2;3815:18;9803:420:57;3698:248:58;3256:45:57;;;;;878:149:17;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;3217:33:57;;;;;8266:1285;;;;;;:::i;:::-;;:::i;1085:225:23:-;;;;;;:::i;:::-;;:::i;2978:48:57:-;;;;;13636:601;;;;;;:::i;:::-;;:::i;1398:138:23:-;;;:::i;3168:42:57:-;;3209:1;3168:42;;1994:124:3;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;3033:38:57:-;;3070:1;3033:38;;2159:162:3;;;;;;:::i;:::-;;:::i;3077:41:57:-;;3117:1;3077:41;;10904:1614;;;;;;:::i;:::-;;:::i;3593:27::-;;;;;;4441:536:31;;;;;;:::i;:::-;;:::i;1694:259:3:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;1942:445:31:-;;;;;;:::i;:::-;;:::i;3793:29:57:-;;;;;;542:165:13;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:13:o;7167:268:57:-;7219:70;7276:12;:10;:12::i;:::-;7219:33;:31;:33::i;:::-;:56;;:70::i;:::-;3209:1;7303:5;:22;7299:61;;;7334:26;;;;;;;;689:25:58;;;662:18;;7334:26:57;;;;;;;;7299:61;7370:12;:20;;;7405:23;;3117:1;689:25:58;;7405:23:57;;677:2:58;662:18;7405:23:57;;;;;;;7167:268;:::o;1116:257:3:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:66::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;627:94:56:-;671:14;;704:10;:8;:10::i;:::-;697:17;;;;627:94;;:::o;12697:646:57:-;3209:1;12740:12;;:30;12736:88;;12811:12;;12779:45;;;;;3209:1;12779:45;;;10577:25:58;10618:18;;;10611:34;;;;10550:18;;12779:45:57;10403:248:58;12736:88:57;12834:12;12849;:10;:12::i;:::-;12834:27;;12871;12901:11;:25;12913:12;:10;:12::i;:::-;12901:25;;;;;;;;;;;;;-1:-1:-1;12901:25:57;12956:17;;12901:25;;-1:-1:-1;12987:14:57;;12983:141;;13037:1;13017:21;;13052:61;;;;;:22;13075:20;10937:15:58;;13052:61:57;;;10919:34:58;10989:15;;;10969:18;;;10962:43;11021:18;;;11014:34;;;13052:9:57;:22;;;;10831:18:58;;13052:61:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12983:141;13154:17;;;;13185:14;;13181:156;;13235:1;13215:7;:17;;:21;;;;13268:9;13250:14;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;;13291:35:57;;;;;:18;11946:55:58;;;13291:35:57;;;11928:74:58;12018:18;;;12011:34;;;13291:9:57;:18;;;;11901::58;;13291:35:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;13181:156;12726:617;;;;12697:646::o;9803:420::-;9900:17;3117:1;9933:12;;:29;9929:86;;10002:12;;9971:44;;;;;3117:1;9971:44;;;10577:25:58;10618:18;;;10611:34;;;;10550:18;;9971:44:57;10403:248:58;9929:86:57;10055:17;;;10025:27;10055:17;;;:11;:17;;;;;10082;;;:26;;10055:17;;10103:5;;10082:26;;10103:5;;10082:26;:::i;:::-;;;;;;;;10136:5;10118:14;;:23;;;;;;;:::i;:::-;;;;;;;;10167:5;10151:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;2155:39:46;;9803:420:57;-1:-1:-1;;;;;;;;9803:420:57:o;8266:1285::-;8493:5;8519:33;;;;;:66;;-1:-1:-1;8556:29:57;;;;8519:66;:99;;;-1:-1:-1;8589:29:57;;;;8519:99;8515:138;;;8627:26;;;;;;;;;;;;;;8515:138;3070:1;8667:12;:26;8663:80;;3070:1;8730:12;;8702:41;;;;;;;;10577:25:58;;;;10618:18;;;10611:34;10550:18;;8702:41:57;10403:248:58;8663:80:57;8753:70;8810:12;:10;:12::i;8753:70::-;8838:9;8833:627;8854:6;8849:1;:11;8833:627;;8881:12;8896:5;;8902:1;8896:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8881:23;-1:-1:-1;8922:18:57;;;8918:48;;8949:17;;;;;;;;;;;;;;8918:48;8980:17;9000:16;;9017:1;9000:19;;;;;;;:::i;:::-;;;;;;;8980:39;;9037:9;9050:1;9037:14;9033:58;;9060:31;;;;;1745:42:58;1733:55;;9060:31:57;;;1715:74:58;1688:18;;9060:31:57;1542:253:58;9033:58:57;9135:17;;;9105:27;9135:17;;;:11;:17;;;;;9170;;:22;9166:62;;9201:27;;;;;1745:42:58;1733:55;;9201:27:57;;;1715:74:58;1688:18;;9201:27:57;1542:253:58;9166:62:57;9242:13;9258:12;;9271:1;9258:15;;;;;;;:::i;:::-;9287:29;;;9258:15;;;;;;;9330:13;;;:21;;;9258:15;-1:-1:-1;9387:12:57;;-1:-1:-1;9387:12:57;9400:1;9387:15;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9365:19;;;:37;;;;;;;;;;;;;9432:17;9444:5;9432:9;:17;:::i;:::-;9416:12;;:33;;;;;;;:::i;:::-;;;;;;;;8867:593;;;;8862:3;;;;:::i;:::-;;;8833:627;;;;9474:70;9492:5;;9499:16;;9517:12;;9531;;9474:70;;;;;;;;;;;;;:::i;:::-;;;;;;;;8466:1085;8266:1285;;;;;;;;:::o;1085:225:23:-;1162:70;1219:12;:10;:12::i;1162:70::-;1242:61;1287:15;1242:28;:26;:28::i;:::-;:44;;:61::i;:::-;1085:225;:::o;13636:601:57:-;13844:14;;13807:34;;;;;13835:4;13807:34;;;1715:74:58;13776:28:57;;13844:14;13807:19;:9;:19;;;;1688:18:58;;13807:34:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;;;:::i;:::-;13776:82;-1:-1:-1;13868:17:57;;13895:152;13915:17;;;13895:152;;;13970:9;13957:22;;:6;;13964:1;13957:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;13953:84;;14012:7;;14020:1;14012:10;;;;;;;:::i;:::-;;;;;;;13999:23;;;;;:::i;:::-;;;13953:84;13934:3;;;;:::i;:::-;;;;13895:152;;;;14072:20;14060:9;:32;14056:119;;;14115:49;;;;;;;;10577:25:58;;;10618:18;;;10611:34;;;10550:18;;14115:49:57;10403:248:58;14056:119:57;14184:46;14204:8;;14214:6;;14222:7;;14184:19;:46::i;:::-;13766:471;;13636:601;;;;;;:::o;1398:138:23:-;1445:22;1486:43;:28;:26;:28::i;:::-;2740:8:27;;;;2643:112;1486:43:23;1479:50;;1398:138;:::o;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;710:120:4:-;756:7;782:41;:33;:31;:33::i;2159:162:3:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2675:13:11;2707;;;;;;;;;;;:22;;;;;;;;;;;;;;;2586:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;10904:1614:57:-;10968:15;10986:12;:10;:12::i;:::-;10968:30;;11012:6;11022:1;11012:11;11008:54;;11032:30;;;;;15629:42:58;15698:15;;;11032:30:57;;;15680:34:58;15750:15;;15730:18;;;15723:43;15592:18;;11032:30:57;15445:327:58;11008:54:57;3161:1;11076:12;;:26;11072:80;;11139:12;;11111:41;;;;;3161:1;11111:41;;;10577:25:58;10618:18;;;10611:34;;;;10550:18;;11111:41:57;10403:248:58;11072:80:57;11162:67;11207:12;11221:7;11162:29;:27;:29::i;:::-;:44;:67;:44;:67::i;:::-;11269:17;;;11239:27;11269:17;;;:11;:17;;;;;;;11341:13;;;;11269:17;;11239:27;11368:10;;11364:330;;11407:6;11398:5;:15;11394:290;;11450:6;11433:7;:13;;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;;11479:41:57;;;16062:42:58;16131:15;;;16113:34;;16183:15;;16178:2;16163:18;;16156:43;16215:18;;;16208:34;;;11515:1:57;16273:2:58;16258:18;;16251:34;;;16316:3;16301:19;;16294:35;11479:41:57;;16039:3:58;16024:19;11479:41:57;;;;;;;11538:7;;;;10904:1614;;:::o;11394:290::-;11599:1;11583:13;;;:17;11618:15;11628:5;11618:15;;:::i;:::-;;;11664:5;11651:18;;11394:290;11756:17;;11704:22;;11787:14;;11783:367;;11834:6;11821:9;:19;11817:323;;11881:6;11860:7;:17;;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;;11910:50:57;;;16062:42:58;16131:15;;;16113:34;;16183:15;;16178:2;16163:18;;16156:43;16215:18;;;16208:34;;;16273:2;16258:18;;16251:34;;;11958:1:57;16316:3:58;16301:19;;16294:35;11910:50:57;;16039:3:58;16024:19;11910:50:57;;;;;;;11978:7;;;;;;10904:1614;;:::o;11817:323::-;12043:1;12023:21;;12062:19;12072:9;12062:19;;:::i;:::-;;;12116:9;12099:26;;11817:323;12180:17;;;;12211:18;;;12207:73;;;12238:42;;;;;10868::58;10937:15;;;12238:42:57;;;10919:34:58;10989:15;;10969:18;;;10962:43;11021:18;;;11014:34;;;10831:18;;12238:42:57;10656:398:58;12207:73:57;12312:6;12291:7;:17;;;:27;;;;;;;:::i;:::-;;;;;;;;12346:6;12328:14;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;;12362:18:57;:9;:18;;12381:43;:28;:26;:28::i;:43::-;12362:71;;;;;;;;;;11958:42:58;11946:55;;;12362:71:57;;;11928:74:58;12018:18;;;12011:34;;;11901:18;;12362:71:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;12448:63:57;;;16062:42:58;16131:15;;;16113:34;;16183:15;;16178:2;16163:18;;16156:43;16215:18;;;16208:34;;;16273:2;16258:18;;16251:34;;;16316:3;16301:19;;16294:35;;;12448:63:57;;16039:3:58;16024:19;12448:63:57;15777:558:58;4441:536:31;4578:70;4635:12;:10;:12::i;4578:70::-;4675:8;4704:26;;;;;:55;;-1:-1:-1;4734:25:31;;;;4704:55;4700:94;;;4768:26;;;;;;;;;;;;;;4700:94;4833:9;4828:133;4849:6;4844:1;:11;4828:133;;4880:9;;4890:1;4880:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4914:4;4921:8;;4930:1;4921:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4934:8;;4943:1;4934:11;;;;;;;:::i;:::-;4880:66;;;;;;;;;;10868:42:58;10937:15;;;4880:66:31;;;10919:34:58;10989:15;;;;10969:18;;;10962:43;-1:-1:-1;4934:11:31;;;;;;11021:18:58;;;11014:34;10831:18;;4880:66:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4857:3;;;;;4828:133;;1694:259:3;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1942:445:31:-;2052:70;2109:12;:10;:12::i;2052:70::-;2149:8;2178:24;;;2174:63;;2211:26;;;;;;;;;;;;;;2174:63;2276:9;2271:100;2292:6;2287:1;:11;2271:100;;2323:33;2345:7;;2353:1;2345:10;;;;;;;:::i;:::-;;;;;;;2323:8;;2332:1;2323:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2300:3;;2271:100;;;;2042:345;1942:445;;;;:::o;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:16;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:16;1620:11;;1560:82;-1:-1:-1;1658:34:16;;:21;:34;;;;;;;;;;;;;;;1359:340::o;14292:175:57:-;14393:7;14419:41;:39;:41::i;4865:174:12:-;4906:16;;761:71;831:1;769:58;761:71;:::i;4189:162::-;4295:15;;;4284:26;;;4295:15;;4284:26;4280:64;;4319:25;;;;;1745:42:58;1733:55;;4319:25:12;;;1715:74:58;1688:18;;4319:25:12;1542:253:58;4280:64:12;4189:162;;:::o;4219:174:11:-;4260:16;;540:67;606:1;548:54;540:67;:::i;989:272::-;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;1094:161;;1139:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1164:4;1139:29;;;1187:57;;18222:25:58;;;18324:18;;;18317:43;18396:15;;;18376:18;;;18369:43;;;;1187:57:11;;18210:2:58;18195:18;1187:57:11;;;;;;;;989:272;;;;:::o;14522:178:57:-;14621:14;;14654:39;:37;:39::i;2761:174:27:-;2802:16;;505:67;571:1;513:54;505:67;:::i;2283:272::-;2382:29;;;2378:67;;2420:25;;;;;;;;;;;;;;2378:67;2455:26;;;;;;;;;;;;2496:52;;1715:74:58;;;2496:52:27;;1703:2:58;1688:18;2496:52:27;;;;;;;2283:272;;:::o;3156:507:31:-;3287:70;3344:12;:10;:12::i;3287:70::-;3384:8;3413:23;;;;;:51;;-1:-1:-1;3440:24:31;;;;3413:51;3409:90;;;3473:26;;;;;;;;;;;;;;3409:90;3538:9;3533:114;3554:6;3549:1;:11;3533:114;;3585:47;3608:8;;3617:1;3608:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3621:7;;3629:1;3621:10;;;;;;;:::i;:::-;;;;;;;3585:6;;3592:1;3585:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3562:3;;3533:114;;2168:234:11;2257:30;:1;2274:4;2280:6;2257:16;:30::i;:::-;2321:5;2297:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2341:54;;18222:25:58;;;18324:18;;;18317:43;;;18376:18;;18369:43;;;;2341:54:11;;18210:2:58;18195:18;2341:54:11;;;;;;;2168:234;;;:::o;3459:170::-;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;3556:66;;3594:28;;;;;;;;18836:25:58;;;18909:42;18897:55;;18877:18;;;18870:83;18809:18;;3594:28:11;18662:297:58;1639:273:11;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;1745:161;;;1814:5;1789:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1838:57;;18222:25:58;;;18324:18;;;18317:43;18396:15;;;18376:18;;;18369:43;;;;1838:57:11;;18210:2:58;18195:18;1838:57:11;18020:398:58;2909:383:12;3031:15;;;;;;;3060:23;;;;3056:60;;3092:24;;;;;1745:42:58;1733:55;;3092:24:12;;;1715:74:58;1688:18;;3092:24:12;1542:253:58;3056:60:12;3147:8;3130:25;;:13;:25;;;3126:160;;3171:26;;;;;;;;;;;;;3216:59;;;;;;;;-1:-1:-1;;3216:59:12;2997:295;2909:383;;;:::o;2647:312:53:-;2761:6;2736:21;:31;;2728:73;;;;;;;19166:2:58;2728:73:53;;;19148:21:58;19205:2;19185:18;;;19178:30;19244:31;19224:18;;;19217:59;19293:18;;2728:73:53;18964:353:58;2728:73:53;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;19734:2:58;2874:78:53;;;19716:21:58;19773:2;19753:18;;;19746:30;19812:34;19792:18;;;19785:62;19883:28;19863:18;;;19856:56;19929:19;;2874:78:53;19532:422:58;784:745:18;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:18;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:18;;784:745::o;1043:95::-;462:23:21;466:14;462:23;449:37;445:2;441:46;1372:19:18;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:18;;;;;:39;15698:15:58;;;1396:59:18;;;15680:34:58;1444:10:18;15730:18:58;;;15723:43;1396:19:18;:39;;;;15592:18:58;;1396:59:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:18:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;1643:735::-;1694:14;;1911:10;1925:9;1911:23;;:47;;-1:-1:-1;1956:2:18;1938:8;:20;1911:47;1907:93;;;-1:-1:-1;1981:8:18;;;;-1:-1:-1;1643:735:18:o;1907:93::-;2161:10;:42;2183:19;2161:42;;;:126;;-1:-1:-1;2207:39:18;:19;:39;;466:14:21;462:23;;449:37;445:2;441:46;2207:80:18;;;;;;;;;;15629:42:58;15698:15;;;2207:80:18;;;15680:34:58;2276:10:18;15730:18:58;;;15723:43;15592:18;;2207:80:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2157:189;;;2310:25;:23;:25::i;2157:189::-;-1:-1:-1;2363:8:18;;;;-1:-1:-1;1643:735:18:o;941:175:52:-;1050:58;;;11958:42:58;11946:55;;1050:58:52;;;11928:74:58;12018:18;;;;12011:34;;;1050:58:52;;;;;;;;;;11901:18:58;;;;1050:58:52;;;;;;;;;;1073:23;1050:58;;;1023:86;;1043:5;;1023:19;:86::i;616:152:21:-;658:19;;720:31;730:20;;;658:19;;;720:31;:::i;5196:642:52:-;5615:23;5641:69;5669:4;5641:69;;;;;;;;;;;;;;;;;5649:5;5641:27;;;;:69;;;;;:::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;20497:2:58;5720:111:52;;;20479:21:58;20536:2;20516:18;;;20509:30;20575:34;20555:18;;;20548:62;20646:12;20626:18;;;20619:40;20676:19;;5720:111:52;20295:406:58;4108:223:53;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:53:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;20908:2:58;5354:81:53;;;20890:21:58;20947:2;20927:18;;;20920:30;20986:34;20966:18;;;20959:62;21057:8;21037:18;;;21030:36;21083:19;;5354:81:53;20706:402:58;5354:81:53;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:53:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;21862:2:58;8113:60:53;;;21844:21:58;21901:2;21881:18;;;21874:30;21940:31;21920:18;;;21913:59;21989:18;;8113:60:53;21660:353:58;8113:60:53;-1:-1:-1;8208:10:53;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:58:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:154;811:42;804:5;800:54;793:5;790:65;780:93;;869:1;866;859:12;884:247;943:6;996:2;984:9;975:7;971:23;967:32;964:52;;;1012:1;1009;1002:12;964:52;1051:9;1038:23;1070:31;1095:5;1070:31;:::i;1800:180::-;1859:6;1912:2;1900:9;1891:7;1887:23;1883:32;1880:52;;;1928:1;1925;1918:12;1880:52;-1:-1:-1;1951:23:58;;1800:180;-1:-1:-1;1800:180:58:o;1985:315::-;2053:6;2061;2114:2;2102:9;2093:7;2089:23;2085:32;2082:52;;;2130:1;2127;2120:12;2082:52;2166:9;2153:23;2143:33;;2226:2;2215:9;2211:18;2198:32;2239:31;2264:5;2239:31;:::i;:::-;2289:5;2279:15;;;1985:315;;;;;:::o;2305:447::-;2462:2;2451:9;2444:21;2501:6;2496:2;2485:9;2481:18;2474:34;2558:6;2550;2545:2;2534:9;2530:18;2517:48;2614:1;2585:22;;;2609:2;2581:31;;;2574:42;;;;2668:2;2656:15;;;2673:66;2652:88;2637:104;2633:113;;2305:447;-1:-1:-1;2305:447:58:o;2757:936::-;2854:6;2862;2870;2878;2886;2939:3;2927:9;2918:7;2914:23;2910:33;2907:53;;;2956:1;2953;2946:12;2907:53;2995:9;2982:23;3014:31;3039:5;3014:31;:::i;:::-;3064:5;-1:-1:-1;3121:2:58;3106:18;;3093:32;3134:33;3093:32;3134:33;:::i;:::-;3186:7;-1:-1:-1;3240:2:58;3225:18;;3212:32;;-1:-1:-1;3295:2:58;3280:18;;3267:32;3318:18;3348:14;;;3345:34;;;3375:1;3372;3365:12;3345:34;3413:6;3402:9;3398:22;3388:32;;3458:7;3451:4;3447:2;3443:13;3439:27;3429:55;;3480:1;3477;3470:12;3429:55;3520:2;3507:16;3546:2;3538:6;3535:14;3532:34;;;3562:1;3559;3552:12;3532:34;3607:7;3602:2;3593:6;3589:2;3585:15;3581:24;3578:37;3575:57;;;3628:1;3625;3618:12;3575:57;2757:936;;;;-1:-1:-1;2757:936:58;;-1:-1:-1;3659:2:58;3651:11;;3681:6;2757:936;-1:-1:-1;;;2757:936:58:o;4428:367::-;4491:8;4501:6;4555:3;4548:4;4540:6;4536:17;4532:27;4522:55;;4573:1;4570;4563:12;4522:55;-1:-1:-1;4596:20:58;;4639:18;4628:30;;4625:50;;;4671:1;4668;4661:12;4625:50;4708:4;4700:6;4696:17;4684:29;;4768:3;4761:4;4751:6;4748:1;4744:14;4736:6;4732:27;4728:38;4725:47;4722:67;;;4785:1;4782;4775:12;4722:67;4428:367;;;;;:::o;4800:1401::-;4991:6;4999;5007;5015;5023;5031;5039;5047;5100:3;5088:9;5079:7;5075:23;5071:33;5068:53;;;5117:1;5114;5107:12;5068:53;5157:9;5144:23;5186:18;5227:2;5219:6;5216:14;5213:34;;;5243:1;5240;5233:12;5213:34;5282:70;5344:7;5335:6;5324:9;5320:22;5282:70;:::i;:::-;5371:8;;-1:-1:-1;5256:96:58;-1:-1:-1;5459:2:58;5444:18;;5431:32;;-1:-1:-1;5475:16:58;;;5472:36;;;5504:1;5501;5494:12;5472:36;5543:72;5607:7;5596:8;5585:9;5581:24;5543:72;:::i;:::-;5634:8;;-1:-1:-1;5517:98:58;-1:-1:-1;5722:2:58;5707:18;;5694:32;;-1:-1:-1;5738:16:58;;;5735:36;;;5767:1;5764;5757:12;5735:36;5806:72;5870:7;5859:8;5848:9;5844:24;5806:72;:::i;:::-;5897:8;;-1:-1:-1;5780:98:58;-1:-1:-1;5985:2:58;5970:18;;5957:32;;-1:-1:-1;6001:16:58;;;5998:36;;;6030:1;6027;6020:12;5998:36;;6069:72;6133:7;6122:8;6111:9;6107:24;6069:72;:::i;:::-;4800:1401;;;;-1:-1:-1;4800:1401:58;;-1:-1:-1;4800:1401:58;;;;;;6160:8;-1:-1:-1;;;4800:1401:58:o;6648:1103::-;6821:6;6829;6837;6845;6853;6861;6914:2;6902:9;6893:7;6889:23;6885:32;6882:52;;;6930:1;6927;6920:12;6882:52;6970:9;6957:23;6999:18;7040:2;7032:6;7029:14;7026:34;;;7056:1;7053;7046:12;7026:34;7095:70;7157:7;7148:6;7137:9;7133:22;7095:70;:::i;:::-;7184:8;;-1:-1:-1;7069:96:58;-1:-1:-1;7272:2:58;7257:18;;7244:32;;-1:-1:-1;7288:16:58;;;7285:36;;;7317:1;7314;7307:12;7285:36;7356:72;7420:7;7409:8;7398:9;7394:24;7356:72;:::i;:::-;7447:8;;-1:-1:-1;7330:98:58;-1:-1:-1;7535:2:58;7520:18;;7507:32;;-1:-1:-1;7551:16:58;;;7548:36;;;7580:1;7577;7570:12;7548:36;;7619:72;7683:7;7672:8;7661:9;7657:24;7619:72;:::i;:::-;6648:1103;;;;-1:-1:-1;6648:1103:58;;-1:-1:-1;6648:1103:58;;7710:8;;6648:1103;-1:-1:-1;;;6648:1103:58:o;8188:315::-;8256:6;8264;8317:2;8305:9;8296:7;8292:23;8288:32;8285:52;;;8333:1;8330;8323:12;8285:52;8372:9;8359:23;8391:31;8416:5;8391:31;:::i;:::-;8441:5;8493:2;8478:18;;;;8465:32;;-1:-1:-1;;;8188:315:58:o;9617:781::-;9747:6;9755;9763;9771;9824:2;9812:9;9803:7;9799:23;9795:32;9792:52;;;9840:1;9837;9830:12;9792:52;9880:9;9867:23;9909:18;9950:2;9942:6;9939:14;9936:34;;;9966:1;9963;9956:12;9936:34;10005:70;10067:7;10058:6;10047:9;10043:22;10005:70;:::i;:::-;10094:8;;-1:-1:-1;9979:96:58;-1:-1:-1;10182:2:58;10167:18;;10154:32;;-1:-1:-1;10198:16:58;;;10195:36;;;10227:1;10224;10217:12;10195:36;;10266:72;10330:7;10319:8;10308:9;10304:24;10266:72;:::i;:::-;9617:781;;;;-1:-1:-1;10357:8:58;-1:-1:-1;;;;9617:781:58:o;11059:118::-;11145:5;11138:13;11131:21;11124:5;11121:32;11111:60;;11167:1;11164;11157:12;11182:245;11249:6;11302:2;11290:9;11281:7;11277:23;11273:32;11270:52;;;11318:1;11315;11308:12;11270:52;11350:9;11344:16;11369:28;11391:5;11369:28;:::i;11432:184::-;11484:77;11481:1;11474:88;11581:4;11578:1;11571:15;11605:4;11602:1;11595:15;11621:128;11688:9;;;11709:11;;;11706:37;;;11723:18;;:::i;12056:125::-;12121:9;;;12142:10;;;12139:36;;;12155:18;;:::i;12186:184::-;12238:77;12235:1;12228:88;12335:4;12332:1;12325:15;12359:4;12356:1;12349:15;12375:241;12431:6;12484:2;12472:9;12463:7;12459:23;12455:32;12452:52;;;12500:1;12497;12490:12;12452:52;12539:9;12526:23;12558:28;12580:5;12558:28;:::i;12621:195::-;12660:3;12691:66;12684:5;12681:77;12678:103;;12761:18;;:::i;:::-;-1:-1:-1;12808:1:58;12797:13;;12621:195::o;12821:358::-;12921:6;12916:3;12909:19;12891:3;12951:66;12943:6;12940:78;12937:98;;;13031:1;13028;13021:12;12937:98;13067:6;13064:1;13060:14;13119:8;13112:5;13105:4;13100:3;13096:14;13083:45;13148:18;;;;13168:4;13144:29;;12821:358;-1:-1:-1;;;12821:358:58:o;13184:1800::-;13642:3;13655:22;;;13627:19;;13712:22;;;13594:4;13792:6;13765:3;13750:19;;13594:4;13826:327;13840:6;13837:1;13834:13;13826:327;;;13915:6;13902:20;13935:31;13960:5;13935:31;:::i;:::-;14002:42;13991:54;13979:67;;14069:4;14128:15;;;;14093:12;;;;13862:1;13855:9;13826:327;;;13830:3;14172:4;14162:14;;14221:9;14216:3;14212:19;14207:2;14196:9;14192:18;14185:47;14255:58;14309:3;14301:6;14293;14255:58;:::i;:::-;14241:72;;14361:9;14353:6;14349:22;14344:2;14333:9;14329:18;14322:50;14395:61;14449:6;14441;14433;14395:61;:::i;:::-;14492:22;;;14487:2;14472:18;;14465:50;14552:22;;;14632:6;;-1:-1:-1;14592:15:58;;14658:1;14668:288;14684:6;14679:3;14676:15;14668:288;;;14765:8;14752:22;14787:30;14809:7;14787:30;:::i;:::-;14851:15;14844:23;14830:38;;14929:17;;;;14890:14;;;;14710:1;14701:11;14668:288;;;-1:-1:-1;14973:5:58;13184:1800;-1:-1:-1;;;;;;;;;;;;13184:1800:58:o;14989:184::-;15059:6;15112:2;15100:9;15091:7;15087:23;15083:32;15080:52;;;15128:1;15125;15118:12;15080:52;-1:-1:-1;15151:16:58;;14989:184;-1:-1:-1;14989:184:58:o;19959:331::-;20064:9;20075;20117:8;20105:10;20102:24;20099:44;;;20139:1;20136;20129:12;20099:44;20168:6;20158:8;20155:20;20152:40;;;20188:1;20185;20178:12;20152:40;-1:-1:-1;;20214:23:58;;;20259:25;;;;;-1:-1:-1;19959:331:58:o;21113:250::-;21198:1;21208:113;21222:6;21219:1;21216:13;21208:113;;;21298:11;;;21292:18;21279:11;;;21272:39;21244:2;21237:10;21208:113;;;-1:-1:-1;;21355:1:58;21337:16;;21330:27;21113:250::o;21368:287::-;21497:3;21535:6;21529:13;21551:66;21610:6;21605:3;21598:4;21590:6;21586:17;21551:66;:::i;:::-;21633:16;;;;;21368:287;-1:-1:-1;;21368:287:58:o;22018:455::-;22167:2;22156:9;22149:21;22130:4;22199:6;22193:13;22242:6;22237:2;22226:9;22222:18;22215:34;22258:79;22330:6;22325:2;22314:9;22310:18;22305:2;22297:6;22293:15;22258:79;:::i;:::-;22389:2;22377:15;22394:66;22373:88;22358:104;;;;22464:2;22354:113;;22018:455;-1:-1:-1;;22018:455:58:o"},"gasEstimates":{"creation":{"codeDepositCost":"2238800","executionCost":"infinite","totalCost":"infinite"},"external":{"DEPOSIT_PHASE()":"239","EDU_TOKEN()":"infinite","INIT_PHASE()":"282","SALE_PHASE()":"285","SPENDER_ROLE()":"240","UNCLAIMED_EDU_HOLDER()":"infinite","WITHDRAW_PHASE()":"306","__msgData()":"infinite","currentPhase()":"2362","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","payoutWallet()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","setInitialCredits(address[],uint256[],uint256[],bool[])":"infinite","setPayoutWallet(address)":"infinite","setPhase(uint256)":"infinite","spend(address,uint256)":"infinite","supportsInterface(bytes4)":"infinite","totalCredits()":"2383","totalDeposited()":"2404","transferOwnership(address)":"infinite","userCredits(address)":"8964","withdraw()":"infinite"}},"methodIdentifiers":{"DEPOSIT_PHASE()":"ad6b333b","EDU_TOKEN()":"5df2dcbc","INIT_PHASE()":"8de17b74","SALE_PHASE()":"148c2b5a","SPENDER_ROLE()":"72c16a24","UNCLAIMED_EDU_HOLDER()":"51887302","WITHDRAW_PHASE()":"8b785d49","__msgData()":"31e66e1e","currentPhase()":"055ad42e","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","payoutWallet()":"8488bb4e","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","setInitialCredits(address[],uint256[],uint256[],bool[])":"687f34e0","setPayoutWallet(address)":"6b8f9c43","setPhase(uint256)":"2cc82655","spend(address,uint256)":"af7d6ca3","supportsInterface(bytes4)":"01ffc9a7","totalCredits()":"b5bd3eb9","totalDeposited()":"ff50abdc","transferOwnership(address)":"f2fde38b","userCredits(address)":"20babb92","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"eduToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"payoutWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unclaimedEDUHolder\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientCredits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPhase\",\"type\":\"uint256\"}],\"name\":\"OnlyDuringPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"SettingInvalidPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recoverable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recovering\",\"type\":\"uint256\"}],\"name\":\"UnrecoverableEDU\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserCreditsAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZeroSpendAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZeroValueUnclaimedCredits\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedSpent\",\"type\":\"uint256\"}],\"name\":\"CreditsSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unclaimed\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonus\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"diamondHands\",\"type\":\"bool[]\"}],\"name\":\"InitialCreditsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"PhaseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDU_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPENDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNCLAIMED_EDU_HOLDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"__msgData\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unclaimedCredits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusCredits\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"diamondHands\",\"type\":\"bool[]\"}],\"name\":\"setInitialCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"diamondHand\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientCredits(address,address,uint256)\":[{\"params\":{\"amount\":\"the amount of credits to spend.\",\"spender\":\"the spender of the credits.\",\"user\":\"the user whose credits are spent.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"OnlyDuringPhase(uint256,uint256)\":[{\"params\":{\"actualPhase\":\"the actual phase.\",\"expectedPhase\":\"the expected phase.\"}}],\"SettingInvalidPhase(uint256)\":[{\"params\":{\"phase\":\"the invalid phase.\"}}],\"UserCreditsAlreadySet(address)\":[{\"params\":{\"user\":\"the user whose credits are set.\"}}],\"ZeroSpendAmount(address,address)\":[{\"params\":{\"spender\":\"the spender of the credits.\",\"user\":\"the user whose credits are spent.\"}}],\"ZeroValueUnclaimedCredits(address)\":[{\"params\":{\"user\":\"the user whose credits are set.\"}}]},\"events\":{\"CreditsSpent(address,address,uint256,uint256,uint256)\":{\"params\":{\"bonusSpent\":\"the amount of bonus credits spent.\",\"depositedSpent\":\"the amount of deposited credits spent.\",\"spender\":\"the spender of the credits.\",\"unclaimedSpent\":\"the amount of unclaimed credits spent.\",\"user\":\"the user whose credits are spent.\"}},\"InitialCreditsSet(address[],uint256[],uint256[],bool[])\":{\"params\":{\"bonus\":\"the bonus EDU credits.\",\"diamondHands\":\"whether the users are a diamond hand.\",\"unclaimed\":\"the unclaimed EDU credits.\",\"users\":\"the users whose credits are set.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}},\"PhaseSet(uint256)\":{\"params\":{\"phase\":\"the phase set.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"setInitialCredits(address[],uint256[],uint256[],bool[])\":{\"details\":\"Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.Reverts with {OnlyDuringPhase} if the current phase is not the init phase.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressUser} if one of `users` is the zero address.Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.Emits a {InitialCreditsSet} event.\",\"params\":{\"bonusCredits\":\"the bonus EDU credits.\",\"diamondHands\":\"whether the users are a diamond hand.\",\"unclaimedCredits\":\"the unclaimed EDU credits.\",\"users\":\"the users whose credits are set.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}},\"setPhase(uint256)\":{\"details\":\"Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PhaseSet} event.\",\"params\":{\"phase\":\"the phase to set.\"}},\"spend(address,uint256)\":{\"details\":\"Reverts with {ZeroSpendAmount} if `amount` is zero.Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.Reverts with {NotRoleHolder} if the sender is not a spender.Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.Emits a {EDUSpent} event.\",\"params\":{\"amount\":\"the amount of EDU tokens to spend.\",\"user\":\"the user whose EDU tokens are spent.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw()\":{\"details\":\"Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase.\"}},\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"InsufficientCredits(address,address,uint256)\":[{\"notice\":\"Thrown when trying to spend more credits than the user has.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"OnlyDuringPhase(uint256,uint256)\":[{\"notice\":\"Thrown when an action is performed during the wrong phase.\"}],\"SettingInvalidPhase(uint256)\":[{\"notice\":\"Thrown when the phase being set is invalid.\"}],\"UnrecoverableEDU(uint256,uint256)\":[{\"notice\":\"Thrown when trying to recover more EDU tokens than accidentally sent to this contract.\"}],\"UserCreditsAlreadySet(address)\":[{\"notice\":\"Thrown when setting the initial credits for a user whose credits have already been set.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}],\"ZeroAddressUser()\":[{\"notice\":\"Thrown when setting the initial credits for a zero address user.\"}],\"ZeroSpendAmount(address,address)\":[{\"notice\":\"Thrown when trying to spend zero credits.\"}],\"ZeroValueUnclaimedCredits(address)\":[{\"notice\":\"Thrown when setting the initial credits for a user with zero unclaimed credits.\"}]},\"events\":{\"CreditsSpent(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when credits are spent.\"},\"InitialCreditsSet(address[],uint256[],uint256[],bool[])\":{\"notice\":\"Emitted when the initial credits are set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"},\"PhaseSet(uint256)\":{\"notice\":\"Emitted when the current phase is set.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"setInitialCredits(address[],uint256[],uint256[],bool[])\":{\"notice\":\"Sets the unclaimed and bonus EDU credits for a list of users.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"},\"setPhase(uint256)\":{\"notice\":\"Sets the current phase.\"},\"spend(address,uint256)\":{\"notice\":\"Spends EDU tokens from the user's balance by a spender account.The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalCredits()\":{\"notice\":\"The total credits is the sum of all unclaimed, bonus and deposited credits.The total credits does not decrease when credits are spent or withdrawn.\"},\"totalDeposited()\":{\"notice\":\"The total deposited is the sum of all deposited credits.The total deposited decreases when unclaimed credits are spent or withdrawn.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw()\":{\"notice\":\"Withdraws all the remaining unclaimed and deposited EDU credits.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/mocks/payment/EDUCreditsManagerMock.sol\":\"EDUCreditsManagerMock\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x21c3e803ed9ae31e2f165a260feba7f311686d83cf46a6eece90fb96605d1e88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) {\\n            revert NotTargetContractRoleHolder(targetContract, role, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e330c26f28436ae28d7f418331748fd0b3a64fc0f130b84a14b2eb013b3668\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {PayoutWalletStorage} from \\\"./libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWalletBase} from \\\"./base/PayoutWalletBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Payout wallet (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    constructor(address payable initialPayoutWallet) {\\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\\n    }\\n}\\n\",\"keccak256\":\"0x47cf847059ae6d8d00aa1b5c96e57e5bb51cac404bd832bfca9a88d532b03253\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xff1e9d711b9fb91092e75c7d75c0fdfb649bb98ccfcb371e6137e22e576a420a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7e506a858cc1f73c8b0607073a29192ceba1b37ce3377cf1cb7da363f7e5bba1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet is IPayoutWalletEvents {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0xa039277ccdb071a84badace43ead4200bb0eacd7f2ba152e657ff7281be34704\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x085ce624a3817a478398de616d035acd6a762636cce19cff02a6466b1c070e2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb245a212ba820a98cd4626cd5e85b9a1a80b70e8eba9a35c2ecd26306d801193\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6509d98dc0a49fadcc87bba2320dc224eb17add644fbf3fd4c86889e13f0c131\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x02c49c65dc1b9a602bd4c2aae19caaf2d4a632c1860dfa0d45663e476040ff3f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0xb8261bef4a8bcb930a73cb36ce32585d8d4d3f1e3e5330a67f1078b9792f5710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x9224eb85f85f9fe58bda9cd7b48fb78f1e56772315bd1ec84e9ad38f55b55dbe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x050233c30decfad7c35c8e133b0e8073562c8f4f8776799d16179b2e5a08b850\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x805977a4ecd8fb4d39cbb9b3c1bb273e32c0af20da1c1f506e73701bef528c9d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20Events {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd756847860b666bca19696c98b79222c0731a4b415cf68182124c8b8b5de2c88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 is IERC20Events {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xb93b440da9fea1bb92e63be35d086275a8cddd439acc2927f906f31e39339a77\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x5f28474e1cc281778da25e0fec62b5bb78d15111624f6ddb85b6d9dd0bb53f3e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x26135c28fa1f75999151a5853283e3265b7104680e6427e56bac7c1f7db0afff\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xacc9d72ff27c4b58be9941f321f83a4b4437facd6c89c12c534e3525230519cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x5d68d1fa4d138d13effe6a29a704277daefa379dead9053db79ac33d32a607fe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc21b04865b45722ebc6fc2dcef2c327d43c2e5c28273ce2b68d1a5124317c76e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x235ae3d1109ae591904ad298c3cd6fea07b399baae4da6992f1a01eb66815a34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit IERC20Events.Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit IERC20Events.Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit IERC20Events.Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit IERC20Events.Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0x16e76f920a4b863bb99baa5ba98fe591512b2907da927e87af9ec1483a88a7e0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/mocks/payment/EDUCreditsManagerMock.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {EDUCreditsManager} from \\\"./../../payment/EDUCreditsManager.sol\\\";\\n\\ncontract EDUCreditsManagerMock is EDUCreditsManager {\\n    constructor(\\n        IERC20 eduToken,\\n        address payable payoutWallet,\\n        address unclaimedEDUHolder,\\n        IForwarderRegistry forwarderRegistry\\n    ) EDUCreditsManager(eduToken, payoutWallet, unclaimedEDUHolder, forwarderRegistry) {}\\n\\n    function __msgData() external view returns (bytes calldata) {\\n        return _msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xc9dd78ff114b45dfe51b2d9c83bebe44cebee6edaf027bac9a170fd37ea6f8ee\",\"license\":\"MIT\"},\"contracts/payment/EDUCreditsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\\\";\\nimport {ERC20Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\\\";\\nimport {PayoutWallet} from \\\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {TokenRecoveryBase} from \\\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\n/// @title DepositManager\\n/// @notice Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).\\n/// @notice Handles the deposit of EDU tokens by users (during the deposit phase).\\n/// @notice Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).\\n/// @notice Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase).\\ncontract EDUCreditsManager is PayoutWallet, ERC20Receiver, AccessControl, TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct UserCredits {\\n        uint256 unclaimed; // unclaimed EDU credits from the genesis mint\\n        uint256 bonus; // bonus EDU credits from the genesis mint\\n        uint256 deposited; // deposited EDU credits from the user\\n        bool diamondHand; // whether the user is a diamond hand, ie. didn't claim any from the genesis mint\\n    }\\n\\n    bytes32 public constant SPENDER_ROLE = \\\"spender\\\";\\n\\n    uint256 public constant INIT_PHASE = 0;\\n    uint256 public constant DEPOSIT_PHASE = 1;\\n    uint256 public constant SALE_PHASE = 2;\\n    uint256 public constant WITHDRAW_PHASE = 3;\\n\\n    IERC20 public immutable EDU_TOKEN;\\n    address public immutable UNCLAIMED_EDU_HOLDER;\\n\\n    uint256 public currentPhase = INIT_PHASE;\\n\\n    mapping(address => UserCredits) public userCredits;\\n\\n    /// @notice The total credits is the sum of all unclaimed, bonus and deposited credits.\\n    /// @notice The total credits does not decrease when credits are spent or withdrawn.\\n    uint256 public totalCredits;\\n\\n    /// @notice The total deposited is the sum of all deposited credits.\\n    /// @notice The total deposited decreases when unclaimed credits are spent or withdrawn.\\n    uint256 public totalDeposited;\\n\\n    /// @notice Emitted when the current phase is set.\\n    /// @param phase the phase set.\\n    event PhaseSet(uint256 phase);\\n\\n    /// @notice Emitted when the initial credits are set.\\n    /// @param users the users whose credits are set.\\n    /// @param unclaimed the unclaimed EDU credits.\\n    /// @param bonus the bonus EDU credits.\\n    /// @param diamondHands whether the users are a diamond hand.\\n    event InitialCreditsSet(address[] users, uint256[] unclaimed, uint256[] bonus, bool[] diamondHands);\\n\\n    /// @notice Emitted when credits are spent.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    /// @param bonusSpent the amount of bonus credits spent.\\n    /// @param unclaimedSpent the amount of unclaimed credits spent.\\n    /// @param depositedSpent the amount of deposited credits spent.\\n    event CreditsSpent(address spender, address user, uint256 bonusSpent, uint256 unclaimedSpent, uint256 depositedSpent);\\n\\n    /// @notice Thrown when the phase being set is invalid.\\n    /// @param phase the invalid phase.\\n    error SettingInvalidPhase(uint256 phase);\\n\\n    /// @notice Thrown when an action is performed during the wrong phase.\\n    /// @param expectedPhase the expected phase.\\n    /// @param actualPhase the actual phase.\\n    error OnlyDuringPhase(uint256 expectedPhase, uint256 actualPhase);\\n\\n    /// @notice Thrown when setting the initial credits for a zero address user.\\n    error ZeroAddressUser();\\n\\n    /// @notice Thrown when setting the initial credits for a user with zero unclaimed credits.\\n    /// @param user the user whose credits are set.\\n    error ZeroValueUnclaimedCredits(address user);\\n\\n    /// @notice Thrown when setting the initial credits for a user whose credits have already been set.\\n    /// @param user the user whose credits are set.\\n    error UserCreditsAlreadySet(address user);\\n\\n    /// @notice Thrown when trying to spend zero credits.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    error ZeroSpendAmount(address spender, address user);\\n\\n    /// @notice Thrown when trying to spend more credits than the user has.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    /// @param amount the amount of credits to spend.\\n    error InsufficientCredits(address spender, address user, uint256 amount);\\n\\n    /// @notice Thrown when trying to recover more EDU tokens than accidentally sent to this contract.\\n    error UnrecoverableEDU(uint256 recoverable, uint256 recovering);\\n\\n    /// @dev Emits a {PhaseSet} to INIT_PHASE event.\\n    constructor(\\n        IERC20 eduToken,\\n        address payable payoutWallet,\\n        address unclaimedEDUHolder,\\n        IForwarderRegistry forwarderRegistry\\n    ) PayoutWallet(payoutWallet) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        EDU_TOKEN = eduToken;\\n        UNCLAIMED_EDU_HOLDER = unclaimedEDUHolder;\\n        emit PhaseSet(INIT_PHASE);\\n    }\\n\\n    /// @notice Sets the current phase.\\n    /// @dev Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {PhaseSet} event.\\n    /// @param phase the phase to set.\\n    function setPhase(uint256 phase) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (phase > WITHDRAW_PHASE) revert SettingInvalidPhase(phase);\\n        currentPhase = phase;\\n        emit PhaseSet(DEPOSIT_PHASE);\\n    }\\n\\n    /// @notice Sets the unclaimed and bonus EDU credits for a list of users.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the init phase.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressUser} if one of `users` is the zero address.\\n    /// @dev Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.\\n    /// @dev Emits a {InitialCreditsSet} event.\\n    /// @param users the users whose credits are set.\\n    /// @param unclaimedCredits the unclaimed EDU credits.\\n    /// @param bonusCredits the bonus EDU credits.\\n    /// @param diamondHands whether the users are a diamond hand.\\n    function setInitialCredits(\\n        address[] calldata users,\\n        uint256[] calldata unclaimedCredits,\\n        uint256[] calldata bonusCredits,\\n        bool[] calldata diamondHands\\n    ) external {\\n        uint256 length = users.length;\\n        if (length != unclaimedCredits.length || length != bonusCredits.length || length != diamondHands.length) revert InconsistentArrayLengths();\\n        if (currentPhase != INIT_PHASE) revert OnlyDuringPhase(INIT_PHASE, currentPhase);\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        for (uint256 i; i != length; ++i) {\\n            address user = users[i];\\n            if (user == address(0)) revert ZeroAddressUser();\\n            uint256 unclaimed = unclaimedCredits[i];\\n            if (unclaimed == 0) revert ZeroValueUnclaimedCredits(user);\\n            UserCredits storage credits = userCredits[user];\\n            if (credits.unclaimed != 0) revert UserCreditsAlreadySet(user);\\n            uint256 bonus = bonusCredits[i];\\n            credits.unclaimed = unclaimed;\\n            credits.bonus = bonus;\\n            credits.diamondHand = diamondHands[i];\\n            totalCredits += unclaimed + bonus;\\n        }\\n        emit InitialCreditsSet(users, unclaimedCredits, bonusCredits, diamondHands);\\n    }\\n\\n    /// @inheritdoc IERC20Receiver\\n    /// @notice Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external returns (bytes4 magicValue) {\\n        if (currentPhase != DEPOSIT_PHASE) revert OnlyDuringPhase(DEPOSIT_PHASE, currentPhase);\\n        UserCredits storage credits = userCredits[from];\\n        credits.deposited += value;\\n        totalDeposited += value;\\n        totalCredits += value;\\n        return ERC20Storage.ERC20_RECEIVED;\\n    }\\n\\n    /// @notice Spends EDU tokens from the user's balance by a spender account.\\n    /// @notice The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\\n    /// @dev Reverts with {ZeroSpendAmount} if `amount` is zero.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.\\n    /// @dev Reverts with {NotRoleHolder} if the sender is not a spender.\\n    /// @dev Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.\\n    /// @dev Emits a {EDUSpent} event.\\n    /// @param user the user whose EDU tokens are spent.\\n    /// @param amount the amount of EDU tokens to spend.\\n    function spend(address user, uint256 amount) external {\\n        address spender = _msgSender();\\n        if (amount == 0) revert ZeroSpendAmount(spender, user);\\n        if (currentPhase != SALE_PHASE) revert OnlyDuringPhase(SALE_PHASE, currentPhase);\\n        AccessControlStorage.layout().enforceHasRole(SPENDER_ROLE, spender);\\n        UserCredits storage credits = userCredits[user];\\n\\n        uint256 bonusSpent;\\n        uint256 bonus = credits.bonus;\\n        if (bonus != 0) {\\n            if (bonus >= amount) {\\n                credits.bonus -= amount;\\n                emit CreditsSpent(spender, user, amount, 0, 0);\\n                return;\\n            } else {\\n                credits.bonus = 0;\\n                amount -= bonus;\\n                bonusSpent = bonus;\\n            }\\n        }\\n\\n        uint256 unclaimedSpent;\\n        uint256 unclaimed = credits.unclaimed;\\n        if (unclaimed != 0) {\\n            if (unclaimed >= amount) {\\n                credits.unclaimed -= amount;\\n                emit CreditsSpent(spender, user, bonusSpent, amount, 0);\\n                return;\\n            } else {\\n                credits.unclaimed = 0;\\n                amount -= unclaimed;\\n                unclaimedSpent = unclaimed;\\n            }\\n        }\\n\\n        uint256 deposited = credits.deposited;\\n        if (deposited < amount) revert InsufficientCredits(spender, user, amount);\\n\\n        credits.deposited -= amount;\\n        totalDeposited -= amount;\\n        EDU_TOKEN.transfer(PayoutWalletStorage.layout().payoutWallet(), amount);\\n        emit CreditsSpent(spender, user, bonusSpent, unclaimedSpent, amount);\\n    }\\n\\n    /// @notice Withdraws all the remaining unclaimed and deposited EDU credits.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase.\\n    function withdraw() external {\\n        if (currentPhase != WITHDRAW_PHASE) revert OnlyDuringPhase(WITHDRAW_PHASE, currentPhase);\\n        address user = _msgSender();\\n        UserCredits storage credits = userCredits[_msgSender()];\\n        uint256 unclaimed = credits.unclaimed;\\n        if (unclaimed != 0) {\\n            credits.unclaimed = 0;\\n            EDU_TOKEN.transferFrom(UNCLAIMED_EDU_HOLDER, user, unclaimed);\\n        }\\n\\n        uint256 deposited = credits.deposited;\\n        if (deposited != 0) {\\n            credits.deposited = 0;\\n            totalDeposited -= deposited;\\n            EDU_TOKEN.transfer(user, deposited);\\n        }\\n    }\\n\\n    /// @inheritdoc TokenRecoveryBase\\n    /// @notice EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\\n    /// @dev Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\\n        uint256 recoverableEDUAmount = EDU_TOKEN.balanceOf(address(this)) - totalDeposited;\\n        uint256 eduAmount;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == EDU_TOKEN) {\\n                eduAmount += amounts[i];\\n            }\\n        }\\n        if (eduAmount > recoverableEDUAmount) {\\n            revert UnrecoverableEDU(recoverableEDUAmount, eduAmount);\\n        }\\n        super.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xfac60c05525cf8c78f0b8a3dcb01386cd2c90fa1ab1f74c805b2f544476aed8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4854,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"currentPhase","offset":0,"slot":"0","type":"t_uint256"},{"astId":4859,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"userCredits","offset":0,"slot":"1","type":"t_mapping(t_address,t_struct(UserCredits)4831_storage)"},{"astId":4862,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"totalCredits","offset":0,"slot":"2","type":"t_uint256"},{"astId":4865,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"totalDeposited","offset":0,"slot":"3","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(UserCredits)4831_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EDUCreditsManager.UserCredits)","numberOfBytes":"32","value":"t_struct(UserCredits)4831_storage"},"t_struct(UserCredits)4831_storage":{"encoding":"inplace","label":"struct EDUCreditsManager.UserCredits","members":[{"astId":4824,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"unclaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":4826,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"bonus","offset":0,"slot":"1","type":"t_uint256"},{"astId":4828,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"deposited","offset":0,"slot":"2","type":"t_uint256"},{"astId":4830,"contract":"contracts/mocks/payment/EDUCreditsManagerMock.sol:EDUCreditsManagerMock","label":"diamondHand","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"InsufficientCredits(address,address,uint256)":[{"notice":"Thrown when trying to spend more credits than the user has."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"OnlyDuringPhase(uint256,uint256)":[{"notice":"Thrown when an action is performed during the wrong phase."}],"SettingInvalidPhase(uint256)":[{"notice":"Thrown when the phase being set is invalid."}],"UnrecoverableEDU(uint256,uint256)":[{"notice":"Thrown when trying to recover more EDU tokens than accidentally sent to this contract."}],"UserCreditsAlreadySet(address)":[{"notice":"Thrown when setting the initial credits for a user whose credits have already been set."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}],"ZeroAddressUser()":[{"notice":"Thrown when setting the initial credits for a zero address user."}],"ZeroSpendAmount(address,address)":[{"notice":"Thrown when trying to spend zero credits."}],"ZeroValueUnclaimedCredits(address)":[{"notice":"Thrown when setting the initial credits for a user with zero unclaimed credits."}]},"events":{"CreditsSpent(address,address,uint256,uint256,uint256)":{"notice":"Emitted when credits are spent."},"InitialCreditsSet(address[],uint256[],uint256[],bool[])":{"notice":"Emitted when the initial credits are set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."},"PhaseSet(uint256)":{"notice":"Emitted when the current phase is set."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount."},"owner()":{"notice":"Gets the address of the contract owner."},"payoutWallet()":{"notice":"Gets the payout wallet."},"recoverERC20s(address[],address[],uint256[])":{"notice":"EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"setInitialCredits(address[],uint256[],uint256[],bool[])":{"notice":"Sets the unclaimed and bonus EDU credits for a list of users."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."},"setPhase(uint256)":{"notice":"Sets the current phase."},"spend(address,uint256)":{"notice":"Spends EDU tokens from the user's balance by a spender account.The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalCredits()":{"notice":"The total credits is the sum of all unclaimed, bonus and deposited credits.The total credits does not decrease when credits are spent or withdrawn."},"totalDeposited()":{"notice":"The total deposited is the sum of all deposited credits.The total deposited decreases when unclaimed credits are spent or withdrawn."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw()":{"notice":"Withdraws all the remaining unclaimed and deposited EDU credits."}},"version":1}}},"contracts/payment/EDUCreditsManager.sol":{"EDUCreditsManager":{"abi":[{"inputs":[{"internalType":"contract IERC20","name":"eduToken","type":"address"},{"internalType":"address payable","name":"payoutWallet","type":"address"},{"internalType":"address","name":"unclaimedEDUHolder","type":"address"},{"internalType":"contract IForwarderRegistry","name":"forwarderRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InconsistentArrayLengths","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"InsufficientCredits","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"NotRoleHolder","type":"error"},{"inputs":[{"internalType":"uint256","name":"expectedPhase","type":"uint256"},{"internalType":"uint256","name":"actualPhase","type":"uint256"}],"name":"OnlyDuringPhase","type":"error"},{"inputs":[{"internalType":"uint256","name":"phase","type":"uint256"}],"name":"SettingInvalidPhase","type":"error"},{"inputs":[{"internalType":"uint256","name":"recoverable","type":"uint256"},{"internalType":"uint256","name":"recovering","type":"uint256"}],"name":"UnrecoverableEDU","type":"error"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"UserCreditsAlreadySet","type":"error"},{"inputs":[],"name":"ZeroAddressPayoutWallet","type":"error"},{"inputs":[],"name":"ZeroAddressUser","type":"error"},{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"address","name":"user","type":"address"}],"name":"ZeroSpendAmount","type":"error"},{"inputs":[{"internalType":"address","name":"user","type":"address"}],"name":"ZeroValueUnclaimedCredits","type":"error"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"spender","type":"address"},{"indexed":false,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"bonusSpent","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"unclaimedSpent","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"depositedSpent","type":"uint256"}],"name":"CreditsSpent","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address[]","name":"users","type":"address[]"},{"indexed":false,"internalType":"uint256[]","name":"unclaimed","type":"uint256[]"},{"indexed":false,"internalType":"uint256[]","name":"bonus","type":"uint256[]"},{"indexed":false,"internalType":"bool[]","name":"diamondHands","type":"bool[]"}],"name":"InitialCreditsSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"payoutWallet","type":"address"}],"name":"PayoutWalletSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint256","name":"phase","type":"uint256"}],"name":"PhaseSet","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleGranted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"bytes32","name":"role","type":"bytes32"},{"indexed":false,"internalType":"address","name":"account","type":"address"},{"indexed":false,"internalType":"address","name":"operator","type":"address"}],"name":"RoleRevoked","type":"event"},{"inputs":[],"name":"DEPOSIT_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"EDU_TOKEN","outputs":[{"internalType":"contract IERC20","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"INIT_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SALE_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"SPENDER_ROLE","outputs":[{"internalType":"bytes32","name":"","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"UNCLAIMED_EDU_HOLDER","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"WITHDRAW_PHASE","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"currentPhase","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"forwarderRegistry","outputs":[{"internalType":"contract IForwarderRegistry","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"grantRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"hasRole","outputs":[{"internalType":"bool","name":"hasRole_","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"forwarder","type":"address"}],"name":"isTrustedForwarder","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"},{"internalType":"address","name":"from","type":"address"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"","type":"bytes"}],"name":"onERC20Received","outputs":[{"internalType":"bytes4","name":"magicValue","type":"bytes4"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"payoutWallet","outputs":[{"internalType":"address payable","name":"wallet","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC20[]","name":"tokens","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverERC20s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"accounts","type":"address[]"},{"internalType":"contract IERC721[]","name":"contracts","type":"address[]"},{"internalType":"uint256[]","name":"tokenIds","type":"uint256[]"}],"name":"recoverERC721s","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable[]","name":"accounts","type":"address[]"},{"internalType":"uint256[]","name":"amounts","type":"uint256[]"}],"name":"recoverETH","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"}],"name":"renounceRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"role","type":"bytes32"},{"internalType":"address","name":"account","type":"address"}],"name":"revokeRole","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address[]","name":"users","type":"address[]"},{"internalType":"uint256[]","name":"unclaimedCredits","type":"uint256[]"},{"internalType":"uint256[]","name":"bonusCredits","type":"uint256[]"},{"internalType":"bool[]","name":"diamondHands","type":"bool[]"}],"name":"setInitialCredits","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address payable","name":"newPayoutWallet","type":"address"}],"name":"setPayoutWallet","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"phase","type":"uint256"}],"name":"setPhase","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"user","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"spend","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalCredits","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"totalDeposited","outputs":[{"internalType":"uint256","name":"","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"userCredits","outputs":[{"internalType":"uint256","name":"unclaimed","type":"uint256"},{"internalType":"uint256","name":"bonus","type":"uint256"},{"internalType":"uint256","name":"deposited","type":"uint256"},{"internalType":"bool","name":"diamondHand","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"withdraw","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"InsufficientCredits(address,address,uint256)":[{"params":{"amount":"the amount of credits to spend.","spender":"the spender of the credits.","user":"the user whose credits are spent."}}],"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}],"NotRoleHolder(bytes32,address)":[{"params":{"account":"The account that was checked.","role":"The role the caller is missing."}}],"OnlyDuringPhase(uint256,uint256)":[{"params":{"actualPhase":"the actual phase.","expectedPhase":"the expected phase."}}],"SettingInvalidPhase(uint256)":[{"params":{"phase":"the invalid phase."}}],"UserCreditsAlreadySet(address)":[{"params":{"user":"the user whose credits are set."}}],"ZeroSpendAmount(address,address)":[{"params":{"spender":"the spender of the credits.","user":"the user whose credits are spent."}}],"ZeroValueUnclaimedCredits(address)":[{"params":{"user":"the user whose credits are set."}}]},"events":{"CreditsSpent(address,address,uint256,uint256,uint256)":{"params":{"bonusSpent":"the amount of bonus credits spent.","depositedSpent":"the amount of deposited credits spent.","spender":"the spender of the credits.","unclaimedSpent":"the amount of unclaimed credits spent.","user":"the user whose credits are spent."}},"InitialCreditsSet(address[],uint256[],uint256[],bool[])":{"params":{"bonus":"the bonus EDU credits.","diamondHands":"whether the users are a diamond hand.","unclaimed":"the unclaimed EDU credits.","users":"the users whose credits are set."}},"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"PayoutWalletSet(address)":{"params":{"payoutWallet":"the new payout wallet address."}},"PhaseSet(uint256)":{"params":{"phase":"the phase set."}},"RoleGranted(bytes32,address,address)":{"params":{"account":"The account that has been granted the role.","operator":"The account that granted the role.","role":"The role that has been granted."}},"RoleRevoked(bytes32,address,address)":{"params":{"account":"The account that has been revoked the role.","operator":"The account that revoked the role.","role":"The role that has been revoked."}}},"kind":"dev","methods":{"constructor":{"details":"Emits a {PhaseSet} to INIT_PHASE event."},"grantRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.","params":{"account":"The account to grant the role to.","role":"The role to grant."}},"hasRole(bytes32,address)":{"params":{"account":"The account.","role":"The role."},"returns":{"hasRole_":"Whether `account` has `role`."}},"isTrustedForwarder(address)":{"params":{"forwarder":"The forwarder to check."},"returns":{"_0":"True if `forwarder` is trusted, false if not."}},"onERC20Received(address,address,uint256,bytes)":{"details":"Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.","params":{"data":"Optional additional data with no specified format.","from":"The previous tokens owner.","operator":"The initiator of the safe transfer.","value":"The amount of tokens transferred."},"returns":{"magicValue":"`bytes4(keccak256(\"onERC20Received(address,address,uint256,bytes)\"))` (`0x4fc35859`) to accept, any other value to refuse."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"payoutWallet()":{"returns":{"wallet":"The payout wallet."}},"recoverERC20s(address[],address[],uint256[])":{"details":"Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer.","tokens":"the list of ERC20 token addresses."}},"recoverERC721s(address[],address[],uint256[])":{"details":"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","contracts":"the list of ERC721 contract addresses.","tokenIds":"the list of token ids to transfer."}},"recoverETH(address[],uint256[])":{"details":"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.","params":{"accounts":"the list of accounts to transfer the tokens to.","amounts":"the list of token amounts to transfer."}},"renounceRole(bytes32)":{"details":"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.","params":{"role":"The role to renounce."}},"revokeRole(bytes32,address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.","params":{"account":"The account to revoke the role from.","role":"The role to revoke."}},"setInitialCredits(address[],uint256[],uint256[],bool[])":{"details":"Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.Reverts with {OnlyDuringPhase} if the current phase is not the init phase.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressUser} if one of `users` is the zero address.Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.Emits a {InitialCreditsSet} event.","params":{"bonusCredits":"the bonus EDU credits.","diamondHands":"whether the users are a diamond hand.","unclaimedCredits":"the unclaimed EDU credits.","users":"the users whose credits are set."}},"setPayoutWallet(address)":{"details":"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.","params":{"newPayoutWallet":"The payout wallet."}},"setPhase(uint256)":{"details":"Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PhaseSet} event.","params":{"phase":"the phase to set."}},"spend(address,uint256)":{"details":"Reverts with {ZeroSpendAmount} if `amount` is zero.Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.Reverts with {NotRoleHolder} if the sender is not a spender.Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.Emits a {EDUSpent} event.","params":{"amount":"the amount of EDU tokens to spend.","user":"the user whose EDU tokens are spent."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}},"withdraw()":{"details":"Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase."}},"title":"DepositManager","version":1},"evm":{"bytecode":{"functionDebugData":{"@_1004":{"entryPoint":null,"id":1004,"parameterSlots":1,"returnSlots":0},"@_1051":{"entryPoint":null,"id":1051,"parameterSlots":1,"returnSlots":0},"@_1237":{"entryPoint":null,"id":1237,"parameterSlots":1,"returnSlots":0},"@_1788":{"entryPoint":null,"id":1788,"parameterSlots":0,"returnSlots":0},"@_4983":{"entryPoint":null,"id":4983,"parameterSlots":4,"returnSlots":0},"@_51":{"entryPoint":null,"id":51,"parameterSlots":1,"returnSlots":0},"@constructorInit_1384":{"entryPoint":437,"id":1384,"parameterSlots":2,"returnSlots":0},"@constructorInit_682":{"entryPoint":276,"id":682,"parameterSlots":2,"returnSlots":0},"@layout_1464":{"entryPoint":390,"id":1464,"parameterSlots":0,"returnSlots":1},"@layout_832":{"entryPoint":223,"id":832,"parameterSlots":0,"returnSlots":1},"@layout_980":{"entryPoint":449,"id":980,"parameterSlots":0,"returnSlots":1},"@setPayoutWallet_1439":{"entryPoint":588,"id":1439,"parameterSlots":2,"returnSlots":0},"@setSupportedInterface_934":{"entryPoint":496,"id":934,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory":{"entryPoint":734,"id":null,"parameterSlots":2,"returnSlots":4},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":835,"id":null,"parameterSlots":2,"returnSlots":1},"validator_revert_contract_IERC20":{"entryPoint":710,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:1524:58","nodeType":"YulBlock","src":"0:1524:58","statements":[{"nativeSrc":"6:3:58","nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nativeSrc":"67:86:58","nodeType":"YulBlock","src":"67:86:58","statements":[{"body":{"nativeSrc":"131:16:58","nodeType":"YulBlock","src":"131:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"140:1:58","nodeType":"YulLiteral","src":"140:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"143:1:58","nodeType":"YulLiteral","src":"143:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"133:6:58","nodeType":"YulIdentifier","src":"133:6:58"},"nativeSrc":"133:12:58","nodeType":"YulFunctionCall","src":"133:12:58"},"nativeSrc":"133:12:58","nodeType":"YulExpressionStatement","src":"133:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"90:5:58","nodeType":"YulIdentifier","src":"90:5:58"},{"arguments":[{"name":"value","nativeSrc":"101:5:58","nodeType":"YulIdentifier","src":"101:5:58"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"116:3:58","nodeType":"YulLiteral","src":"116:3:58","type":"","value":"160"},{"kind":"number","nativeSrc":"121:1:58","nodeType":"YulLiteral","src":"121:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"112:3:58","nodeType":"YulIdentifier","src":"112:3:58"},"nativeSrc":"112:11:58","nodeType":"YulFunctionCall","src":"112:11:58"},{"kind":"number","nativeSrc":"125:1:58","nodeType":"YulLiteral","src":"125:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"108:3:58","nodeType":"YulIdentifier","src":"108:3:58"},"nativeSrc":"108:19:58","nodeType":"YulFunctionCall","src":"108:19:58"}],"functionName":{"name":"and","nativeSrc":"97:3:58","nodeType":"YulIdentifier","src":"97:3:58"},"nativeSrc":"97:31:58","nodeType":"YulFunctionCall","src":"97:31:58"}],"functionName":{"name":"eq","nativeSrc":"87:2:58","nodeType":"YulIdentifier","src":"87:2:58"},"nativeSrc":"87:42:58","nodeType":"YulFunctionCall","src":"87:42:58"}],"functionName":{"name":"iszero","nativeSrc":"80:6:58","nodeType":"YulIdentifier","src":"80:6:58"},"nativeSrc":"80:50:58","nodeType":"YulFunctionCall","src":"80:50:58"},"nativeSrc":"77:70:58","nodeType":"YulIf","src":"77:70:58"}]},"name":"validator_revert_contract_IERC20","nativeSrc":"14:139:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"56:5:58","nodeType":"YulTypedName","src":"56:5:58","type":""}],"src":"14:139:58"},{"body":{"nativeSrc":"340:554:58","nodeType":"YulBlock","src":"340:554:58","statements":[{"body":{"nativeSrc":"387:16:58","nodeType":"YulBlock","src":"387:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"396:1:58","nodeType":"YulLiteral","src":"396:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"399:1:58","nodeType":"YulLiteral","src":"399:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"389:6:58","nodeType":"YulIdentifier","src":"389:6:58"},"nativeSrc":"389:12:58","nodeType":"YulFunctionCall","src":"389:12:58"},"nativeSrc":"389:12:58","nodeType":"YulExpressionStatement","src":"389:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"361:7:58","nodeType":"YulIdentifier","src":"361:7:58"},{"name":"headStart","nativeSrc":"370:9:58","nodeType":"YulIdentifier","src":"370:9:58"}],"functionName":{"name":"sub","nativeSrc":"357:3:58","nodeType":"YulIdentifier","src":"357:3:58"},"nativeSrc":"357:23:58","nodeType":"YulFunctionCall","src":"357:23:58"},{"kind":"number","nativeSrc":"382:3:58","nodeType":"YulLiteral","src":"382:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"353:3:58","nodeType":"YulIdentifier","src":"353:3:58"},"nativeSrc":"353:33:58","nodeType":"YulFunctionCall","src":"353:33:58"},"nativeSrc":"350:53:58","nodeType":"YulIf","src":"350:53:58"},{"nativeSrc":"412:29:58","nodeType":"YulVariableDeclaration","src":"412:29:58","value":{"arguments":[{"name":"headStart","nativeSrc":"431:9:58","nodeType":"YulIdentifier","src":"431:9:58"}],"functionName":{"name":"mload","nativeSrc":"425:5:58","nodeType":"YulIdentifier","src":"425:5:58"},"nativeSrc":"425:16:58","nodeType":"YulFunctionCall","src":"425:16:58"},"variables":[{"name":"value","nativeSrc":"416:5:58","nodeType":"YulTypedName","src":"416:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"483:5:58","nodeType":"YulIdentifier","src":"483:5:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"450:32:58","nodeType":"YulIdentifier","src":"450:32:58"},"nativeSrc":"450:39:58","nodeType":"YulFunctionCall","src":"450:39:58"},"nativeSrc":"450:39:58","nodeType":"YulExpressionStatement","src":"450:39:58"},{"nativeSrc":"498:15:58","nodeType":"YulAssignment","src":"498:15:58","value":{"name":"value","nativeSrc":"508:5:58","nodeType":"YulIdentifier","src":"508:5:58"},"variableNames":[{"name":"value0","nativeSrc":"498:6:58","nodeType":"YulIdentifier","src":"498:6:58"}]},{"nativeSrc":"522:40:58","nodeType":"YulVariableDeclaration","src":"522:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"547:9:58","nodeType":"YulIdentifier","src":"547:9:58"},{"kind":"number","nativeSrc":"558:2:58","nodeType":"YulLiteral","src":"558:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"543:3:58","nodeType":"YulIdentifier","src":"543:3:58"},"nativeSrc":"543:18:58","nodeType":"YulFunctionCall","src":"543:18:58"}],"functionName":{"name":"mload","nativeSrc":"537:5:58","nodeType":"YulIdentifier","src":"537:5:58"},"nativeSrc":"537:25:58","nodeType":"YulFunctionCall","src":"537:25:58"},"variables":[{"name":"value_1","nativeSrc":"526:7:58","nodeType":"YulTypedName","src":"526:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"604:7:58","nodeType":"YulIdentifier","src":"604:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"571:32:58","nodeType":"YulIdentifier","src":"571:32:58"},"nativeSrc":"571:41:58","nodeType":"YulFunctionCall","src":"571:41:58"},"nativeSrc":"571:41:58","nodeType":"YulExpressionStatement","src":"571:41:58"},{"nativeSrc":"621:17:58","nodeType":"YulAssignment","src":"621:17:58","value":{"name":"value_1","nativeSrc":"631:7:58","nodeType":"YulIdentifier","src":"631:7:58"},"variableNames":[{"name":"value1","nativeSrc":"621:6:58","nodeType":"YulIdentifier","src":"621:6:58"}]},{"nativeSrc":"647:40:58","nodeType":"YulVariableDeclaration","src":"647:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"672:9:58","nodeType":"YulIdentifier","src":"672:9:58"},{"kind":"number","nativeSrc":"683:2:58","nodeType":"YulLiteral","src":"683:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"668:3:58","nodeType":"YulIdentifier","src":"668:3:58"},"nativeSrc":"668:18:58","nodeType":"YulFunctionCall","src":"668:18:58"}],"functionName":{"name":"mload","nativeSrc":"662:5:58","nodeType":"YulIdentifier","src":"662:5:58"},"nativeSrc":"662:25:58","nodeType":"YulFunctionCall","src":"662:25:58"},"variables":[{"name":"value_2","nativeSrc":"651:7:58","nodeType":"YulTypedName","src":"651:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_2","nativeSrc":"729:7:58","nodeType":"YulIdentifier","src":"729:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"696:32:58","nodeType":"YulIdentifier","src":"696:32:58"},"nativeSrc":"696:41:58","nodeType":"YulFunctionCall","src":"696:41:58"},"nativeSrc":"696:41:58","nodeType":"YulExpressionStatement","src":"696:41:58"},{"nativeSrc":"746:17:58","nodeType":"YulAssignment","src":"746:17:58","value":{"name":"value_2","nativeSrc":"756:7:58","nodeType":"YulIdentifier","src":"756:7:58"},"variableNames":[{"name":"value2","nativeSrc":"746:6:58","nodeType":"YulIdentifier","src":"746:6:58"}]},{"nativeSrc":"772:40:58","nodeType":"YulVariableDeclaration","src":"772:40:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"797:9:58","nodeType":"YulIdentifier","src":"797:9:58"},{"kind":"number","nativeSrc":"808:2:58","nodeType":"YulLiteral","src":"808:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"793:3:58","nodeType":"YulIdentifier","src":"793:3:58"},"nativeSrc":"793:18:58","nodeType":"YulFunctionCall","src":"793:18:58"}],"functionName":{"name":"mload","nativeSrc":"787:5:58","nodeType":"YulIdentifier","src":"787:5:58"},"nativeSrc":"787:25:58","nodeType":"YulFunctionCall","src":"787:25:58"},"variables":[{"name":"value_3","nativeSrc":"776:7:58","nodeType":"YulTypedName","src":"776:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_3","nativeSrc":"854:7:58","nodeType":"YulIdentifier","src":"854:7:58"}],"functionName":{"name":"validator_revert_contract_IERC20","nativeSrc":"821:32:58","nodeType":"YulIdentifier","src":"821:32:58"},"nativeSrc":"821:41:58","nodeType":"YulFunctionCall","src":"821:41:58"},"nativeSrc":"821:41:58","nodeType":"YulExpressionStatement","src":"821:41:58"},{"nativeSrc":"871:17:58","nodeType":"YulAssignment","src":"871:17:58","value":{"name":"value_3","nativeSrc":"881:7:58","nodeType":"YulIdentifier","src":"881:7:58"},"variableNames":[{"name":"value3","nativeSrc":"871:6:58","nodeType":"YulIdentifier","src":"871:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory","nativeSrc":"158:736:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"282:9:58","nodeType":"YulTypedName","src":"282:9:58","type":""},{"name":"dataEnd","nativeSrc":"293:7:58","nodeType":"YulTypedName","src":"293:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"305:6:58","nodeType":"YulTypedName","src":"305:6:58","type":""},{"name":"value1","nativeSrc":"313:6:58","nodeType":"YulTypedName","src":"313:6:58","type":""},{"name":"value2","nativeSrc":"321:6:58","nodeType":"YulTypedName","src":"321:6:58","type":""},{"name":"value3","nativeSrc":"329:6:58","nodeType":"YulTypedName","src":"329:6:58","type":""}],"src":"158:736:58"},{"body":{"nativeSrc":"1000:76:58","nodeType":"YulBlock","src":"1000:76:58","statements":[{"nativeSrc":"1010:26:58","nodeType":"YulAssignment","src":"1010:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1022:9:58","nodeType":"YulIdentifier","src":"1022:9:58"},{"kind":"number","nativeSrc":"1033:2:58","nodeType":"YulLiteral","src":"1033:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1018:3:58","nodeType":"YulIdentifier","src":"1018:3:58"},"nativeSrc":"1018:18:58","nodeType":"YulFunctionCall","src":"1018:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1010:4:58","nodeType":"YulIdentifier","src":"1010:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1052:9:58","nodeType":"YulIdentifier","src":"1052:9:58"},{"name":"value0","nativeSrc":"1063:6:58","nodeType":"YulIdentifier","src":"1063:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1045:6:58","nodeType":"YulIdentifier","src":"1045:6:58"},"nativeSrc":"1045:25:58","nodeType":"YulFunctionCall","src":"1045:25:58"},"nativeSrc":"1045:25:58","nodeType":"YulExpressionStatement","src":"1045:25:58"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"899:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"969:9:58","nodeType":"YulTypedName","src":"969:9:58","type":""},{"name":"value0","nativeSrc":"980:6:58","nodeType":"YulTypedName","src":"980:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"991:4:58","nodeType":"YulTypedName","src":"991:4:58","type":""}],"src":"899:177:58"},{"body":{"nativeSrc":"1130:176:58","nodeType":"YulBlock","src":"1130:176:58","statements":[{"nativeSrc":"1140:17:58","nodeType":"YulAssignment","src":"1140:17:58","value":{"arguments":[{"name":"x","nativeSrc":"1152:1:58","nodeType":"YulIdentifier","src":"1152:1:58"},{"name":"y","nativeSrc":"1155:1:58","nodeType":"YulIdentifier","src":"1155:1:58"}],"functionName":{"name":"sub","nativeSrc":"1148:3:58","nodeType":"YulIdentifier","src":"1148:3:58"},"nativeSrc":"1148:9:58","nodeType":"YulFunctionCall","src":"1148:9:58"},"variableNames":[{"name":"diff","nativeSrc":"1140:4:58","nodeType":"YulIdentifier","src":"1140:4:58"}]},{"body":{"nativeSrc":"1189:111:58","nodeType":"YulBlock","src":"1189:111:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1210:1:58","nodeType":"YulLiteral","src":"1210:1:58","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"1217:3:58","nodeType":"YulLiteral","src":"1217:3:58","type":"","value":"224"},{"kind":"number","nativeSrc":"1222:10:58","nodeType":"YulLiteral","src":"1222:10:58","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"1213:3:58","nodeType":"YulIdentifier","src":"1213:3:58"},"nativeSrc":"1213:20:58","nodeType":"YulFunctionCall","src":"1213:20:58"}],"functionName":{"name":"mstore","nativeSrc":"1203:6:58","nodeType":"YulIdentifier","src":"1203:6:58"},"nativeSrc":"1203:31:58","nodeType":"YulFunctionCall","src":"1203:31:58"},"nativeSrc":"1203:31:58","nodeType":"YulExpressionStatement","src":"1203:31:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1254:1:58","nodeType":"YulLiteral","src":"1254:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"1257:4:58","nodeType":"YulLiteral","src":"1257:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"1247:6:58","nodeType":"YulIdentifier","src":"1247:6:58"},"nativeSrc":"1247:15:58","nodeType":"YulFunctionCall","src":"1247:15:58"},"nativeSrc":"1247:15:58","nodeType":"YulExpressionStatement","src":"1247:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1282:1:58","nodeType":"YulLiteral","src":"1282:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1285:4:58","nodeType":"YulLiteral","src":"1285:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"1275:6:58","nodeType":"YulIdentifier","src":"1275:6:58"},"nativeSrc":"1275:15:58","nodeType":"YulFunctionCall","src":"1275:15:58"},"nativeSrc":"1275:15:58","nodeType":"YulExpressionStatement","src":"1275:15:58"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"1172:4:58","nodeType":"YulIdentifier","src":"1172:4:58"},{"name":"x","nativeSrc":"1178:1:58","nodeType":"YulIdentifier","src":"1178:1:58"}],"functionName":{"name":"gt","nativeSrc":"1169:2:58","nodeType":"YulIdentifier","src":"1169:2:58"},"nativeSrc":"1169:11:58","nodeType":"YulFunctionCall","src":"1169:11:58"},"nativeSrc":"1166:134:58","nodeType":"YulIf","src":"1166:134:58"}]},"name":"checked_sub_t_uint256","nativeSrc":"1081:225:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"1112:1:58","nodeType":"YulTypedName","src":"1112:1:58","type":""},{"name":"y","nativeSrc":"1115:1:58","nodeType":"YulTypedName","src":"1115:1:58","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"1121:4:58","nodeType":"YulTypedName","src":"1121:4:58","type":""}],"src":"1081:225:58"},{"body":{"nativeSrc":"1420:102:58","nodeType":"YulBlock","src":"1420:102:58","statements":[{"nativeSrc":"1430:26:58","nodeType":"YulAssignment","src":"1430:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1442:9:58","nodeType":"YulIdentifier","src":"1442:9:58"},{"kind":"number","nativeSrc":"1453:2:58","nodeType":"YulLiteral","src":"1453:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1438:3:58","nodeType":"YulIdentifier","src":"1438:3:58"},"nativeSrc":"1438:18:58","nodeType":"YulFunctionCall","src":"1438:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1430:4:58","nodeType":"YulIdentifier","src":"1430:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1472:9:58","nodeType":"YulIdentifier","src":"1472:9:58"},{"arguments":[{"name":"value0","nativeSrc":"1487:6:58","nodeType":"YulIdentifier","src":"1487:6:58"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"1503:3:58","nodeType":"YulLiteral","src":"1503:3:58","type":"","value":"160"},{"kind":"number","nativeSrc":"1508:1:58","nodeType":"YulLiteral","src":"1508:1:58","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"1499:3:58","nodeType":"YulIdentifier","src":"1499:3:58"},"nativeSrc":"1499:11:58","nodeType":"YulFunctionCall","src":"1499:11:58"},{"kind":"number","nativeSrc":"1512:1:58","nodeType":"YulLiteral","src":"1512:1:58","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"1495:3:58","nodeType":"YulIdentifier","src":"1495:3:58"},"nativeSrc":"1495:19:58","nodeType":"YulFunctionCall","src":"1495:19:58"}],"functionName":{"name":"and","nativeSrc":"1483:3:58","nodeType":"YulIdentifier","src":"1483:3:58"},"nativeSrc":"1483:32:58","nodeType":"YulFunctionCall","src":"1483:32:58"}],"functionName":{"name":"mstore","nativeSrc":"1465:6:58","nodeType":"YulIdentifier","src":"1465:6:58"},"nativeSrc":"1465:51:58","nodeType":"YulFunctionCall","src":"1465:51:58"},"nativeSrc":"1465:51:58","nodeType":"YulExpressionStatement","src":"1465:51:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"1311:211:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1389:9:58","nodeType":"YulTypedName","src":"1389:9:58","type":""},{"name":"value0","nativeSrc":"1400:6:58","nodeType":"YulTypedName","src":"1400:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1411:4:58","nodeType":"YulTypedName","src":"1411:4:58","type":""}],"src":"1311:211:58"}]},"contents":"{\n    { }\n    function validator_revert_contract_IERC20(value)\n    {\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3849t_address_payablet_addresst_contract$_IForwarderRegistry_$1176_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_contract_IERC20(value)\n        value0 := value\n        let value_1 := mload(add(headStart, 32))\n        validator_revert_contract_IERC20(value_1)\n        value1 := value_1\n        let value_2 := mload(add(headStart, 64))\n        validator_revert_contract_IERC20(value_2)\n        value2 := value_2\n        let value_3 := mload(add(headStart, 96))\n        validator_revert_contract_IERC20(value_3)\n        value3 := value_3\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040525f805534801562000013575f80fd5b5060405162002d1e38038062002d1e8339810160408190526200003691620002de565b80808433620000508162000049620000df565b9062000114565b5062000067816200006062000186565b90620001b5565b5062000088634fc3585960e01b600162000080620001c1565b9190620001f0565b6001600160a01b0390811660805285811660a052831660c052506040515f81527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a15050505062000363565b5f806200010e60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd62000343565b92915050565b6001600160a01b038116156200016a5781546001600160a01b0319166001600160a01b03821690811783556040515f907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b620001826307f5828d60e41b600162000080620001c1565b5050565b5f806200010e60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae62000343565b6200018282826200024c565b5f806200010e60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e62000343565b600160e01b6001600160e01b03198316016200021f576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b0319919091165f9081526020929092526040909120805460ff1916911515919091179055565b6001600160a01b03811662000274576040516340b539cf60e01b815260040160405180910390fd5b81546001600160a01b0319166001600160a01b03821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b6001600160a01b0381168114620002db575f80fd5b50565b5f805f8060808587031215620002f2575f80fd5b8451620002ff81620002c6565b60208601519094506200031281620002c6565b60408601519093506200032581620002c6565b60608601519092506200033881620002c6565b939692955090935050565b818103818111156200010e57634e487b7160e01b5f52601160045260245ffd5b60805160a05160c051612951620003cd5f395f8181610335015261069a01525f81816103a9015281816106d1015281816107b301528181610c7d01528181610cff01526111b301525f81816102770152818161036701528181611e700152611ef801526129515ff3fe608060405234801561000f575f80fd5b50600436106101d1575f3560e01c806373c8a958116100fe578063ad6b333b1161009e578063d547741f1161006e578063d547741f146104a7578063f2fde38b146104ba578063f7ba94bd146104cd578063ff50abdc146104e0575f80fd5b8063ad6b333b14610470578063af7d6ca314610478578063b5bd3eb91461048b578063c3666c3614610494575f80fd5b80638bb9c5bf116100d95780638bb9c5bf1461043b5780638da5cb5b1461044e5780638de17b741461045657806391d148541461045d575f80fd5b806373c8a958146104185780638488bb4e1461042b5780638b785d4914610433575f80fd5b80633ccfd60b116101745780635df2dcbc116101445780635df2dcbc146103a4578063687f34e0146103cb5780636b8f9c43146103de57806372c16a24146103f1575f80fd5b80633ccfd60b146102e45780634fc35859146102ec5780635188730214610330578063572b6c0514610357575f80fd5b806320babb92116101af57806320babb921461021b5780632b4c9f16146102755780632cc82655146102bc5780632f2ff15d146102d1575f80fd5b806301ffc9a7146101d5578063055ad42e146101fd578063148c2b5a14610213575b5f80fd5b6101e86101e33660046122f1565b6104e9565b60405190151581526020015b60405180910390f35b6102055f5481565b6040519081526020016101f4565b610205600281565b610253610229366004612351565b600160208190525f9182526040909120805491810154600282015460039092015490919060ff1684565b60408051948552602085019390935291830152151560608201526080016101f4565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f4565b6102cf6102ca36600461236c565b610502565b005b6102cf6102df366004612383565b610599565b6102cf6105cb565b6102ff6102fa3660046123b1565b610825565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101f4565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b6101e8610365366004612351565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b6102cf6103d9366004612490565b610908565b6102cf6103ec366004612351565b610c14565b6102057f7370656e6465720000000000000000000000000000000000000000000000000081565b6102cf61042636600461254b565b610c34565b610297610e0c565b610205600381565b6102cf61044936600461236c565b610e37565b610297610e52565b6102055f81565b6101e861046b366004612383565b610e5e565b610205600181565b6102cf6104863660046125de565b610ea7565b61020560025481565b6102cf6104a236600461254b565b6112da565b6102cf6104b5366004612383565b61144b565b6102cf6104c8366004612351565b611478565b6102cf6104db366004612608565b611493565b61020560035481565b5f6104fc826104f6611550565b9061157d565b92915050565b61051b61050d611654565b61051561165d565b9061168a565b600381111561055e576040517f96666719000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b5f819055604051600181527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a150565b5f6105a2611654565b90506105b08161051561165d565b6105c68383836105be6116f9565b929190611726565b505050565b60035f5414610613575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600360048201526024810191909152604401610555565b5f61061c611654565b90505f60015f61062a611654565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040015f208054909150801561073d575f82556040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528481166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303815f875af1158015610717573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073b919061267c565b505b6002820154801561081f575f83600201819055508060035f82825461076291906126c4565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af11580156107f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081d919061267c565b505b50505050565b5f60015f541461086e575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600160048201526024810191909152604401610555565b73ffffffffffffffffffffffffffffffffffffffff85165f908152600160205260408120600281018054919287926108a79084906126d7565b925050819055508460035f8282546108bf91906126d7565b925050819055508460025f8282546108d791906126d7565b909155507f4fc358590000000000000000000000000000000000000000000000000000000098975050505050505050565b8685811415806109185750808414155b806109235750808214155b1561095a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f541561099f575f80546040517f7c9bb66300000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610555565b6109aa61050d611654565b5f5b818114610bc3575f8a8a838181106109c6576109c66126ea565b90506020020160208101906109db9190612351565b905073ffffffffffffffffffffffffffffffffffffffff8116610a2a576040517f9c89d57f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f898984818110610a3d57610a3d6126ea565b905060200201359050805f03610a97576040517fd49c192700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610555565b73ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020805415610b0c576040517f6dbaa9b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610555565b5f898986818110610b1f57610b1f6126ea565b85855560200291909101356001840181905591508890508786818110610b4757610b476126ea565b9050602002016020810190610b5c9190612717565b6003830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610b9781846126d7565b60025f828254610ba791906126d7565b925050819055505050505080610bbc90612732565b90506109ac565b507f44fbb8621bc7a734e344e0d7f6b84824cf97e0d8d611f9f8502e42ff0b1dee438989898989898989604051610c019897969594939291906127b2565b60405180910390a1505050505050505050565b610c1f61050d611654565b610c3181610c2b6117fa565b90611827565b50565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce69190612877565b610cf091906126c4565b90505f805b85811015610daf577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16878783818110610d4657610d466126ea565b9050602002016020810190610d5b9190612351565b73ffffffffffffffffffffffffffffffffffffffff1603610d9d57848482818110610d8857610d886126ea565b9050602002013582610d9a91906126d7565b91505b80610da781612732565b915050610cf5565b5081811115610df4576040517f7ce4d19d0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610555565b610e028888888888886118eb565b5050505050505050565b5f610e32610e186117fa565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610c31610e42611654565b82610e4b6116f9565b91906119d5565b5f610e32610e1861165d565b5f610ea08383610e6c6116f9565b5f9283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b5f610eb0611654565b9050815f03610f0b576040517f09bc7f2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015284166024820152604401610555565b60025f5414610f53575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600260048201526024810191909152604401610555565b610f877f7370656e6465720000000000000000000000000000000000000000000000000082610f806116f9565b9190611a78565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160208190526040822090810154909190801561105c578481106110465784836001015f828254610fd491906126c4565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff8087168252881660208201529081018690525f6060820181905260808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a1505050505050565b5f600184015561105681866126c4565b94508091505b82545f908015611106578681106110f35786855f015f82825461107f91906126c4565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff80891682528a166020820152908101859052606081018890525f60808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a15050505050505050565b5f855561110081886126c4565b96508091505b60028501548781101561116c576040517f1734392500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80891660048301528a16602482015260448101899052606401610555565b87866002015f82825461117f91906126c4565b925050819055508760035f82825461119791906126c4565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb6111e3610e186117fa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018b90526044016020604051808303815f875af1158015611252573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611276919061267c565b506040805173ffffffffffffffffffffffffffffffffffffffff808a1682528b16602082015290810186905260608101849052608081018990527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a001610c01565b6112e561050d611654565b8483811415806112f55750808214155b1561132c576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e0257858582818110611347576113476126ea565b905060200201602081019061135c9190612351565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061138a5761138a6126ea565b905060200201602081019061139f9190612351565b8787868181106113b1576113b16126ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561142a575f80fd5b505af115801561143c573d5f803e3d5ffd5b5050505080600101905061132e565b5f611454611654565b90506114628161051561165d565b6105c68383836114706116f9565b929190611afd565b610c31611483611654565b8261148c61165d565b9190611bc5565b61149e61050d611654565b828181146114d8576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114611548576115408484838181106114f6576114f66126ea565b9050602002013587878481811061150f5761150f6126ea565b90506020020160208101906115249190612351565b73ffffffffffffffffffffffffffffffffffffffff1690611cd8565b6001016114da565b505050505050565b5f806104fc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6126c4565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016115cb57505f6104fc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161161c575060016104fc565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610e32611e2e565b5f806104fc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6126c4565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146116f5576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610555565b5050565b5f806104fc60017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236126c4565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661081f575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b5f806104fc60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae6126c4565b73ffffffffffffffffffffffffffffffffffffffff8116611874576040517f40b539cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b6118f661050d611654565b8483811415806119065750808214155b1561193d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e02576119cd88888381811061195b5761195b6126ea565b90506020020160208101906119709190612351565b858584818110611982576119826126ea565b9050602002013588888581811061199b5761199b6126ea565b90506020020160208101906119b09190612351565b73ffffffffffffffffffffffffffffffffffffffff169190611f72565b60010161193f565b6119e0838284611a78565b5f8181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b5f8281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166105c6576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610555565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561081f575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016117ec565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c32576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610555565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461081f5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350505050565b80471015611d42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610555565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611d98576040519150601f19603f3d011682016040523d82523d5f602084013e611d9d565b606091505b50509050806105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610555565b5f33321480611e3d5750601836105b15611e4757503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611f6157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f3d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f61919061267c565b15611f6b57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526105c6928692915f9161203c9185169084906120e8565b905080515f148061205c57508080602001905181019061205c919061267c565b6105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610555565b60606120f684845f856120fe565b949350505050565b606082471015612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610555565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516121b891906128b0565b5f6040518083038185875af1925050503d805f81146121f2576040519150601f19603f3d011682016040523d82523d5f602084013e6121f7565b606091505b509150915061220887838387612213565b979650505050505050565b606083156122a85782515f036122a15773ffffffffffffffffffffffffffffffffffffffff85163b6122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610555565b50816120f6565b6120f683838151156122bd5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055591906128cb565b5f60208284031215612301575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ea0575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c31575f80fd5b5f60208284031215612361575f80fd5b8135610ea081612330565b5f6020828403121561237c575f80fd5b5035919050565b5f8060408385031215612394575f80fd5b8235915060208301356123a681612330565b809150509250929050565b5f805f805f608086880312156123c5575f80fd5b85356123d081612330565b945060208601356123e081612330565b935060408601359250606086013567ffffffffffffffff80821115612403575f80fd5b818801915088601f830112612416575f80fd5b813581811115612424575f80fd5b896020828501011115612435575f80fd5b9699959850939650602001949392505050565b5f8083601f840112612458575f80fd5b50813567ffffffffffffffff81111561246f575f80fd5b6020830191508360208260051b8501011115612489575f80fd5b9250929050565b5f805f805f805f806080898b0312156124a7575f80fd5b883567ffffffffffffffff808211156124be575f80fd5b6124ca8c838d01612448565b909a50985060208b01359150808211156124e2575f80fd5b6124ee8c838d01612448565b909850965060408b0135915080821115612506575f80fd5b6125128c838d01612448565b909650945060608b013591508082111561252a575f80fd5b506125378b828c01612448565b999c989b5096995094979396929594505050565b5f805f805f8060608789031215612560575f80fd5b863567ffffffffffffffff80821115612577575f80fd5b6125838a838b01612448565b9098509650602089013591508082111561259b575f80fd5b6125a78a838b01612448565b909650945060408901359150808211156125bf575f80fd5b506125cc89828a01612448565b979a9699509497509295939492505050565b5f80604083850312156125ef575f80fd5b82356125fa81612330565b946020939093013593505050565b5f805f806040858703121561261b575f80fd5b843567ffffffffffffffff80821115612632575f80fd5b61263e88838901612448565b90965094506020870135915080821115612656575f80fd5b5061266387828801612448565b95989497509550505050565b8015158114610c31575f80fd5b5f6020828403121561268c575f80fd5b8151610ea08161266f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104fc576104fc612697565b808201808211156104fc576104fc612697565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612727575f80fd5b8135610ea08161266f565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361276257612762612697565b5060010190565b8183525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612799575f80fd5b8260051b80836020870137939093016020019392505050565b608080825281018890525f8960a08301825b8b8110156128015782356127d781612330565b73ffffffffffffffffffffffffffffffffffffffff168252602092830192909101906001016127c4565b506020915083810382850152612818818a8c612769565b9050838103604085015261282d81888a612769565b848103606086015285815286915082015f5b868110156128665782356128528161266f565b15158252918301919083019060010161283f565b509c9b505050505050505050505050565b5f60208284031215612887575f80fd5b5051919050565b5f5b838110156128a8578181015183820152602001612890565b50505f910152565b5f82516128c181846020870161288e565b9190910192915050565b602081525f82518060208401526128e981604085016020870161288e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122000856c3252ca394439aa1c15ac238579093e5e8e5a5e9f0c99539bcdc40f150264736f6c63430008150033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE PUSH0 DUP1 SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x13 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x2D1E CODESIZE SUB DUP1 PUSH3 0x2D1E DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x36 SWAP2 PUSH3 0x2DE JUMP JUMPDEST DUP1 DUP1 DUP5 CALLER PUSH3 0x50 DUP2 PUSH3 0x49 PUSH3 0xDF JUMP JUMPDEST SWAP1 PUSH3 0x114 JUMP JUMPDEST POP PUSH3 0x67 DUP2 PUSH3 0x60 PUSH3 0x186 JUMP JUMPDEST SWAP1 PUSH3 0x1B5 JUMP JUMPDEST POP PUSH3 0x88 PUSH4 0x4FC35859 PUSH1 0xE0 SHL PUSH1 0x1 PUSH3 0x80 PUSH3 0x1C1 JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1F0 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 DUP2 AND PUSH1 0x80 MSTORE DUP6 DUP2 AND PUSH1 0xA0 MSTORE DUP4 AND PUSH1 0xC0 MSTORE POP PUSH1 0x40 MLOAD PUSH0 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP PUSH3 0x363 JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x10E PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x343 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x16A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x182 PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x80 PUSH3 0x1C1 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x10E PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH3 0x343 JUMP JUMPDEST PUSH3 0x182 DUP3 DUP3 PUSH3 0x24C JUMP JUMPDEST PUSH0 DUP1 PUSH3 0x10E PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x343 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x21F JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH3 0x274 JUMPI PUSH1 0x40 MLOAD PUSH4 0x40B539CF PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x2DB JUMPI PUSH0 DUP1 REVERT JUMPDEST POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH3 0x2F2 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 MLOAD PUSH3 0x2FF DUP2 PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD SWAP1 SWAP5 POP PUSH3 0x312 DUP2 PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x40 DUP7 ADD MLOAD SWAP1 SWAP4 POP PUSH3 0x325 DUP2 PUSH3 0x2C6 JUMP JUMPDEST PUSH1 0x60 DUP7 ADD MLOAD SWAP1 SWAP3 POP PUSH3 0x338 DUP2 PUSH3 0x2C6 JUMP JUMPDEST SWAP4 SWAP7 SWAP3 SWAP6 POP SWAP1 SWAP4 POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x10E JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x2951 PUSH3 0x3CD PUSH0 CODECOPY PUSH0 DUP2 DUP2 PUSH2 0x335 ADD MSTORE PUSH2 0x69A ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x3A9 ADD MSTORE DUP2 DUP2 PUSH2 0x6D1 ADD MSTORE DUP2 DUP2 PUSH2 0x7B3 ADD MSTORE DUP2 DUP2 PUSH2 0xC7D ADD MSTORE DUP2 DUP2 PUSH2 0xCFF ADD MSTORE PUSH2 0x11B3 ADD MSTORE PUSH0 DUP2 DUP2 PUSH2 0x277 ADD MSTORE DUP2 DUP2 PUSH2 0x367 ADD MSTORE DUP2 DUP2 PUSH2 0x1E70 ADD MSTORE PUSH2 0x1EF8 ADD MSTORE PUSH2 0x2951 PUSH0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0xFE JUMPI DUP1 PUSH4 0xAD6B333B GT PUSH2 0x9E JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4BA JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xFF50ABDC EQ PUSH2 0x4E0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD6B333B EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xAF7D6CA3 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0xB5BD3EB9 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x494 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x43B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x8DE17B74 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x45D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x8B785D49 EQ PUSH2 0x433 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x174 JUMPI DUP1 PUSH4 0x5DF2DCBC GT PUSH2 0x144 JUMPI DUP1 PUSH4 0x5DF2DCBC EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x687F34E0 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0x72C16A24 EQ PUSH2 0x3F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0x51887302 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x357 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x20BABB92 GT PUSH2 0x1AF JUMPI DUP1 PUSH4 0x20BABB92 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x2CC82655 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2D1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x55AD42E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x148C2B5A EQ PUSH2 0x213 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E8 PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F1 JUMP JUMPDEST PUSH2 0x4E9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x253 PUSH2 0x229 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CF PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2FA CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x297 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x297 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2490 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH2 0xC14 JUMP JUMPDEST PUSH2 0x205 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x254B JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST PUSH2 0x297 PUSH2 0xE0C JUMP JUMPDEST PUSH2 0x205 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x449 CALLDATASIZE PUSH1 0x4 PUSH2 0x236C JUMP JUMPDEST PUSH2 0xE37 JUMP JUMPDEST PUSH2 0x297 PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x205 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x46B CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0xE5E JUMP JUMPDEST PUSH2 0x205 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x486 CALLDATASIZE PUSH1 0x4 PUSH2 0x25DE JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x254B JUMP JUMPDEST PUSH2 0x12DA JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0x144B JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH2 0x1478 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x2608 JUMP JUMPDEST PUSH2 0x1493 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH2 0x4FC DUP3 PUSH2 0x4F6 PUSH2 0x1550 JUMP JUMPDEST SWAP1 PUSH2 0x157D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x51B PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST SWAP1 PUSH2 0x168A JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x9666671900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5A2 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH2 0x5B0 DUP2 PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST PUSH2 0x5C6 DUP4 DUP4 DUP4 PUSH2 0x5BE PUSH2 0x16F9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1726 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH0 SLOAD EQ PUSH2 0x613 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 PUSH2 0x61C PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 PUSH0 PUSH2 0x62A PUSH2 0x1654 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x73D JUMPI PUSH0 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73B SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x81F JUMPI PUSH0 DUP4 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F9 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81D SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 SLOAD EQ PUSH2 0x86E JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP8 SWAP3 PUSH2 0x8A7 SWAP1 DUP5 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8BF SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8D7 SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 DUP2 EQ ISZERO DUP1 PUSH2 0x918 JUMPI POP DUP1 DUP5 EQ ISZERO JUMPDEST DUP1 PUSH2 0x923 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD ISZERO PUSH2 0x99F JUMPI PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0x9AA PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xBC3 JUMPI PUSH0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9C6 JUMPI PUSH2 0x9C6 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C89D57F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xA3D JUMPI PUSH2 0xA3D PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH0 SUB PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD49C192700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xB0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DBAA9B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x26EA JUMP JUMPDEST DUP6 DUP6 SSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 DUP5 ADD DUP2 SWAP1 SSTORE SWAP2 POP DUP9 SWAP1 POP DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB47 JUMPI PUSH2 0xB47 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB97 DUP2 DUP5 PUSH2 0x26D7 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBA7 SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP DUP1 PUSH2 0xBBC SWAP1 PUSH2 0x2732 JUMP JUMPDEST SWAP1 POP PUSH2 0x9AC JUMP JUMPDEST POP PUSH32 0x44FBB8621BC7A734E344E0D7F6B84824CF97E0D8D611F9F8502E42FF0B1DEE43 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xC01 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC1F PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH2 0xC31 DUP2 PUSH2 0xC2B PUSH2 0x17FA JUMP JUMPDEST SWAP1 PUSH2 0x1827 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE6 SWAP2 SWAP1 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0xCF0 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xDAF JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0xD46 JUMPI PUSH2 0xD46 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD5B SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD9D JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xD88 JUMPI PUSH2 0xD88 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xD9A SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0xDA7 DUP2 PUSH2 0x2732 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCF5 JUMP JUMPDEST POP DUP2 DUP2 GT ISZERO PUSH2 0xDF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CE4D19D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0xE02 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x18EB JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0xE18 PUSH2 0x17FA JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC31 PUSH2 0xE42 PUSH2 0x1654 JUMP JUMPDEST DUP3 PUSH2 0xE4B PUSH2 0x16F9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19D5 JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0xE18 PUSH2 0x165D JUMP JUMPDEST PUSH0 PUSH2 0xEA0 DUP4 DUP4 PUSH2 0xE6C PUSH2 0x16F9 JUMP JUMPDEST PUSH0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB0 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP DUP2 PUSH0 SUB PUSH2 0xF0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BC7F2B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0xF53 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0xF87 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xF80 PUSH2 0x16F9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x105C JUMPI DUP5 DUP2 LT PUSH2 0x1046 JUMPI DUP5 DUP4 PUSH1 0x1 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP3 MSTORE DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x1056 DUP2 DUP7 PUSH2 0x26C4 JUMP JUMPDEST SWAP5 POP DUP1 SWAP2 POP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x1106 JUMPI DUP7 DUP2 LT PUSH2 0x10F3 JUMPI DUP7 DUP6 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x107F SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP3 MSTORE DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP6 SSTORE PUSH2 0x1100 DUP2 DUP9 PUSH2 0x26C4 JUMP JUMPDEST SWAP7 POP DUP1 SWAP2 POP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD DUP8 DUP2 LT ISZERO PUSH2 0x116C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1734392500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST DUP8 DUP7 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x117F SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1197 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xA9059CBB PUSH2 0x11E3 PUSH2 0xE18 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1252 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1276 SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x12E5 PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x12F5 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x132C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE02 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1347 JUMPI PUSH2 0x1347 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x135C SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x138A JUMPI PUSH2 0x138A PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x139F SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x13B1 JUMPI PUSH2 0x13B1 PUSH2 0x26EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x143C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x132E JUMP JUMPDEST PUSH0 PUSH2 0x1454 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH2 0x1462 DUP2 PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST PUSH2 0x5C6 DUP4 DUP4 DUP4 PUSH2 0x1470 PUSH2 0x16F9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1AFD JUMP JUMPDEST PUSH2 0xC31 PUSH2 0x1483 PUSH2 0x1654 JUMP JUMPDEST DUP3 PUSH2 0x148C PUSH2 0x165D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH2 0x149E PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x14D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1548 JUMPI PUSH2 0x1540 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x14F6 JUMPI PUSH2 0x14F6 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x150F JUMPI PUSH2 0x150F PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1524 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x14DA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x26C4 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x15CB JUMPI POP PUSH0 PUSH2 0x4FC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x161C JUMPI POP PUSH1 0x1 PUSH2 0x4FC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0x1E2E JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x26C4 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x16F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x26C4 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x81F JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x26C4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x18F6 PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1906 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x193D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE02 JUMPI PUSH2 0x19CD DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x195B JUMPI PUSH2 0x195B PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1970 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x1982 JUMPI PUSH2 0x1982 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x199B JUMPI PUSH2 0x199B PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19B0 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x193F JUMP JUMPDEST PUSH2 0x19E0 DUP4 DUP3 DUP5 PUSH2 0x1A78 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x81F JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x17EC JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x81F JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1D42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1D98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E3D JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E47 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1F61 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F3D JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F61 SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST ISZERO PUSH2 0x1F6B JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x5C6 SWAP3 DUP7 SWAP3 SWAP2 PUSH0 SWAP2 PUSH2 0x203C SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x20E8 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0x205C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x205C SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F6 DUP5 DUP5 PUSH0 DUP6 PUSH2 0x20FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2190 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x28B0 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x21F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2208 DUP8 DUP4 DUP4 DUP8 PUSH2 0x2213 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x22A8 JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x22A1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x22A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST POP DUP2 PUSH2 0x20F6 JUMP JUMPDEST PUSH2 0x20F6 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x22BD JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP2 SWAP1 PUSH2 0x28CB JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2301 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEA0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC31 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2361 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEA0 DUP2 PUSH2 0x2330 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x237C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2394 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x23A6 DUP2 PUSH2 0x2330 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x23C5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x23D0 DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x23E0 DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2403 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2416 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2424 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2435 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x246F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2489 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x24A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x24BE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24CA DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24E2 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24EE DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2506 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2512 DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x252A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2537 DUP12 DUP3 DUP13 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2560 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2577 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2583 DUP11 DUP4 DUP12 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x259B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x25A7 DUP11 DUP4 DUP12 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x25CC DUP10 DUP3 DUP11 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25EF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25FA DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x261B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2632 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x263E DUP9 DUP4 DUP10 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2656 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2663 DUP8 DUP3 DUP9 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC31 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x268C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEA0 DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4FC PUSH2 0x2697 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4FC PUSH2 0x2697 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2727 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEA0 DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2762 JUMPI PUSH2 0x2762 PUSH2 0x2697 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2799 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 DUP10 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2801 JUMPI DUP3 CALLDATALOAD PUSH2 0x27D7 DUP2 PUSH2 0x2330 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x27C4 JUMP JUMPDEST POP PUSH1 0x20 SWAP2 POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2818 DUP2 DUP11 DUP13 PUSH2 0x2769 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x282D DUP2 DUP9 DUP11 PUSH2 0x2769 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP7 SWAP2 POP DUP3 ADD PUSH0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2866 JUMPI DUP3 CALLDATALOAD PUSH2 0x2852 DUP2 PUSH2 0x266F JUMP JUMPDEST ISZERO ISZERO DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x283F JUMP JUMPDEST POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2887 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28A8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2890 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x28C1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x288E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x28E9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x288E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP DUP6 PUSH13 0x3252CA394439AA1C15AC238579 MULMOD RETURNDATACOPY 0x5E DUP15 GAS 0x5E SWAP16 0xC SWAP10 MSTORE8 SWAP12 0xCD 0xC4 0xF ISZERO MUL PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"2313:12389:57:-:0;;;3070:1;3308:40;;6477:387;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6722:17;;6653:12;6685:10;1008:63:2;6685:10:57;1008:33:2;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;881:65:22;926:19;881:28;:26;:28::i;:::-;:44;;:65::i;:::-;-1:-1:-1;736:96:32;-1:-1:-1;;;827:4:32;736:34;:32;:34::i;:::-;:56;:96;:56;:96::i;:::-;-1:-1:-1;;;;;622:39:18;;;;;6751:20:57;;::::3;;::::0;6781:41;::::3;;::::0;-1:-1:-1;6837:20:57::3;::::0;3070:1:::3;1045:25:58::0;;6837:20:57::3;::::0;1033:2:58;1018:18;6837:20:57::3;;;;;;;6477:387:::0;;;;2313:12389;;4865:174:12;4906:16;;761:71;831:1;769:58;761:71;:::i;:::-;753:80;4865:174;-1:-1:-1;;4865:174:12:o;1402:355::-;-1:-1:-1;;;;;1490:26:12;;;1486:166;;1532:30;;-1:-1:-1;;;;;;1532:30:12;-1:-1:-1;;;;;1532:30:12;;;;;;;1581:60;;-1:-1:-1;;1581:60:12;;-1:-1:-1;;1581:60:12;1486:166;1661:89;-1:-1:-1;;;1745:4:12;1661:34;:32;:34::i;:89::-;1402:355;;:::o;2761:174:27:-;2802:16;;505:67;571:1;513:54;505:67;:::i;1121:144::-;1220:38;:1;1238:19;1220:17;:38::i;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:16;;;877:68;;925:20;;-1:-1:-1;;;925:20:16;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:16;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:16;;;;;;;;;;773:235::o;2283:272:27:-;-1:-1:-1;;;;;2382:29:27;;2378:67;;2420:25;;-1:-1:-1;;;2420:25:27;;;;;;;;;;;2378:67;2455:26;;-1:-1:-1;;;;;;2455:26:27;-1:-1:-1;;;;;2455:26:27;;;;;;;2496:52;;1465:51:58;;;2496:52:27;;1453:2:58;1438:18;2496:52:27;;;;;;;2283:272;;:::o;14:139:58:-;-1:-1:-1;;;;;97:31:58;;87:42;;77:70;;143:1;140;133:12;77:70;14:139;:::o;158:736::-;305:6;313;321;329;382:3;370:9;361:7;357:23;353:33;350:53;;;399:1;396;389:12;350:53;431:9;425:16;450:39;483:5;450:39;:::i;:::-;558:2;543:18;;537:25;508:5;;-1:-1:-1;571:41:58;537:25;571:41;:::i;:::-;683:2;668:18;;662:25;631:7;;-1:-1:-1;696:41:58;662:25;696:41;:::i;:::-;808:2;793:18;;787:25;756:7;;-1:-1:-1;821:41:58;787:25;821:41;:::i;:::-;158:736;;;;-1:-1:-1;158:736:58;;-1:-1:-1;;158:736:58:o;1081:225::-;1148:9;;;1169:11;;;1166:134;;;1222:10;1217:3;1213:20;1210:1;1203:31;1257:4;1254:1;1247:15;1285:4;1282:1;1275:15;1311:211;2313:12389:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DEPOSIT_PHASE_4840":{"entryPoint":null,"id":4840,"parameterSlots":0,"returnSlots":0},"@EDU_TOKEN_4849":{"entryPoint":null,"id":4849,"parameterSlots":0,"returnSlots":0},"@INIT_PHASE_4837":{"entryPoint":null,"id":4837,"parameterSlots":0,"returnSlots":0},"@SALE_PHASE_4843":{"entryPoint":null,"id":4843,"parameterSlots":0,"returnSlots":0},"@SPENDER_ROLE_4834":{"entryPoint":null,"id":4834,"parameterSlots":0,"returnSlots":0},"@UNCLAIMED_EDU_HOLDER_4851":{"entryPoint":null,"id":4851,"parameterSlots":0,"returnSlots":0},"@WITHDRAW_PHASE_4846":{"entryPoint":null,"id":4846,"parameterSlots":0,"returnSlots":0},"@_callOptionalReturn_4212":{"entryPoint":null,"id":4212,"parameterSlots":2,"returnSlots":0},"@_msgSender_1101":{"entryPoint":7726,"id":1101,"parameterSlots":0,"returnSlots":1},"@_msgSender_5572":{"entryPoint":5716,"id":5572,"parameterSlots":0,"returnSlots":1},"@_revert_4590":{"entryPoint":null,"id":4590,"parameterSlots":2,"returnSlots":0},"@currentPhase_4854":{"entryPoint":null,"id":4854,"parameterSlots":0,"returnSlots":0},"@enforceHasRole_548":{"entryPoint":6776,"id":548,"parameterSlots":3,"returnSlots":0},"@enforceIsContractOwner_799":{"entryPoint":5770,"id":799,"parameterSlots":2,"returnSlots":0},"@forwarderRegistry_1013":{"entryPoint":null,"id":1013,"parameterSlots":0,"returnSlots":1},"@functionCallWithValue_4415":{"entryPoint":8446,"id":4415,"parameterSlots":4,"returnSlots":1},"@functionCall_4351":{"entryPoint":8424,"id":4351,"parameterSlots":3,"returnSlots":1},"@grantRole_107":{"entryPoint":1433,"id":107,"parameterSlots":2,"returnSlots":0},"@grantRole_406":{"entryPoint":5926,"id":406,"parameterSlots":4,"returnSlots":0},"@hasRole_175":{"entryPoint":3678,"id":175,"parameterSlots":2,"returnSlots":1},"@hasRole_503":{"entryPoint":null,"id":503,"parameterSlots":3,"returnSlots":1},"@isContract_4279":{"entryPoint":null,"id":4279,"parameterSlots":1,"returnSlots":1},"@isTrustedForwarder_1029":{"entryPoint":null,"id":1029,"parameterSlots":1,"returnSlots":1},"@layout_1464":{"entryPoint":6138,"id":1464,"parameterSlots":0,"returnSlots":1},"@layout_585":{"entryPoint":5881,"id":585,"parameterSlots":0,"returnSlots":1},"@layout_832":{"entryPoint":5725,"id":832,"parameterSlots":0,"returnSlots":1},"@layout_980":{"entryPoint":5456,"id":980,"parameterSlots":0,"returnSlots":1},"@msgSender_1187":{"entryPoint":null,"id":1187,"parameterSlots":0,"returnSlots":1},"@onERC20Received_5217":{"entryPoint":2085,"id":5217,"parameterSlots":5,"returnSlots":1},"@owner_206":{"entryPoint":3666,"id":206,"parameterSlots":0,"returnSlots":1},"@owner_761":{"entryPoint":null,"id":761,"parameterSlots":1,"returnSlots":1},"@payoutWallet_1298":{"entryPoint":3596,"id":1298,"parameterSlots":0,"returnSlots":1},"@payoutWallet_1452":{"entryPoint":null,"id":1452,"parameterSlots":1,"returnSlots":1},"@recoverERC20s_1683":{"entryPoint":6379,"id":1683,"parameterSlots":6,"returnSlots":0},"@recoverERC20s_5558":{"entryPoint":3124,"id":5558,"parameterSlots":6,"returnSlots":0},"@recoverERC721s_1753":{"entryPoint":4826,"id":1753,"parameterSlots":6,"returnSlots":0},"@recoverETH_1617":{"entryPoint":5267,"id":1617,"parameterSlots":4,"returnSlots":0},"@renounceRole_156":{"entryPoint":3639,"id":156,"parameterSlots":1,"returnSlots":0},"@renounceRole_482":{"entryPoint":6613,"id":482,"parameterSlots":3,"returnSlots":0},"@revokeRole_139":{"entryPoint":5195,"id":139,"parameterSlots":2,"returnSlots":0},"@revokeRole_445":{"entryPoint":6909,"id":445,"parameterSlots":4,"returnSlots":0},"@safeTransfer_3918":{"entryPoint":8050,"id":3918,"parameterSlots":3,"returnSlots":0},"@sendValue_4313":{"entryPoint":7384,"id":4313,"parameterSlots":2,"returnSlots":0},"@setInitialCredits_5169":{"entryPoint":2312,"id":5169,"parameterSlots":8,"returnSlots":0},"@setPayoutWallet_1285":{"entryPoint":3092,"id":1285,"parameterSlots":1,"returnSlots":0},"@setPayoutWallet_1439":{"entryPoint":6183,"id":1439,"parameterSlots":2,"returnSlots":0},"@setPhase_5015":{"entryPoint":1282,"id":5015,"parameterSlots":1,"returnSlots":0},"@spend_5405":{"entryPoint":3751,"id":5405,"parameterSlots":2,"returnSlots":0},"@supportsInterface_862":{"entryPoint":1257,"id":862,"parameterSlots":1,"returnSlots":1},"@supportsInterface_968":{"entryPoint":5501,"id":968,"parameterSlots":2,"returnSlots":1},"@totalCredits_4862":{"entryPoint":null,"id":4862,"parameterSlots":0,"returnSlots":0},"@totalDeposited_4865":{"entryPoint":null,"id":4865,"parameterSlots":0,"returnSlots":0},"@transferOwnership_223":{"entryPoint":5240,"id":223,"parameterSlots":1,"returnSlots":0},"@transferOwnership_748":{"entryPoint":7109,"id":748,"parameterSlots":3,"returnSlots":0},"@userCredits_4859":{"entryPoint":null,"id":4859,"parameterSlots":0,"returnSlots":0},"@verifyCallResultFromTarget_4546":{"entryPoint":8723,"id":4546,"parameterSlots":4,"returnSlots":1},"@withdraw_5483":{"entryPoint":1483,"id":5483,"parameterSlots":0,"returnSlots":0},"abi_decode_array_address_dyn_calldata":{"entryPoint":9288,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":9041,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_address_payable":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr":{"entryPoint":9137,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_addresst_uint256":{"entryPoint":9694,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9547,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":6},"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr":{"entryPoint":9360,"id":null,"parameterSlots":2,"returnSlots":8},"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr":{"entryPoint":9736,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bool":{"entryPoint":10007,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":9852,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_address":{"entryPoint":9091,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes4":{"entryPoint":8945,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC20_$3849":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_contract$_IERC721_$3768":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256":{"entryPoint":9068,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_uint256_fromMemory":{"entryPoint":10359,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_array_uint256_dyn_calldata":{"entryPoint":10089,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":10416,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":6,"returnSlots":1},"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed":{"entryPoint":10162,"id":null,"parameterSlots":9,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":10443,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_add_t_uint256":{"entryPoint":9943,"id":null,"parameterSlots":2,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":9924,"id":null,"parameterSlots":2,"returnSlots":1},"copy_memory_to_memory_with_cleanup":{"entryPoint":10382,"id":null,"parameterSlots":3,"returnSlots":0},"increment_t_uint256":{"entryPoint":10034,"id":null,"parameterSlots":1,"returnSlots":1},"panic_error_0x11":{"entryPoint":9879,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":9962,"id":null,"parameterSlots":0,"returnSlots":0},"validator_revert_address":{"entryPoint":9008,"id":null,"parameterSlots":1,"returnSlots":0},"validator_revert_bool":{"entryPoint":9839,"id":null,"parameterSlots":1,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:21687:58","nodeType":"YulBlock","src":"0:21687:58","statements":[{"nativeSrc":"6:3:58","nodeType":"YulBlock","src":"6:3:58","statements":[]},{"body":{"nativeSrc":"83:263:58","nodeType":"YulBlock","src":"83:263:58","statements":[{"body":{"nativeSrc":"129:16:58","nodeType":"YulBlock","src":"129:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:58","nodeType":"YulLiteral","src":"138:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:58","nodeType":"YulLiteral","src":"141:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:58","nodeType":"YulIdentifier","src":"131:6:58"},"nativeSrc":"131:12:58","nodeType":"YulFunctionCall","src":"131:12:58"},"nativeSrc":"131:12:58","nodeType":"YulExpressionStatement","src":"131:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:58","nodeType":"YulIdentifier","src":"104:7:58"},{"name":"headStart","nativeSrc":"113:9:58","nodeType":"YulIdentifier","src":"113:9:58"}],"functionName":{"name":"sub","nativeSrc":"100:3:58","nodeType":"YulIdentifier","src":"100:3:58"},"nativeSrc":"100:23:58","nodeType":"YulFunctionCall","src":"100:23:58"},{"kind":"number","nativeSrc":"125:2:58","nodeType":"YulLiteral","src":"125:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:58","nodeType":"YulIdentifier","src":"96:3:58"},"nativeSrc":"96:32:58","nodeType":"YulFunctionCall","src":"96:32:58"},"nativeSrc":"93:52:58","nodeType":"YulIf","src":"93:52:58"},{"nativeSrc":"154:36:58","nodeType":"YulVariableDeclaration","src":"154:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:58","nodeType":"YulIdentifier","src":"180:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:58","nodeType":"YulIdentifier","src":"167:12:58"},"nativeSrc":"167:23:58","nodeType":"YulFunctionCall","src":"167:23:58"},"variables":[{"name":"value","nativeSrc":"158:5:58","nodeType":"YulTypedName","src":"158:5:58","type":""}]},{"body":{"nativeSrc":"300:16:58","nodeType":"YulBlock","src":"300:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:58","nodeType":"YulLiteral","src":"309:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:58","nodeType":"YulLiteral","src":"312:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:58","nodeType":"YulIdentifier","src":"302:6:58"},"nativeSrc":"302:12:58","nodeType":"YulFunctionCall","src":"302:12:58"},"nativeSrc":"302:12:58","nodeType":"YulExpressionStatement","src":"302:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:58","nodeType":"YulIdentifier","src":"212:5:58"},{"arguments":[{"name":"value","nativeSrc":"223:5:58","nodeType":"YulIdentifier","src":"223:5:58"},{"kind":"number","nativeSrc":"230:66:58","nodeType":"YulLiteral","src":"230:66:58","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:58","nodeType":"YulIdentifier","src":"219:3:58"},"nativeSrc":"219:78:58","nodeType":"YulFunctionCall","src":"219:78:58"}],"functionName":{"name":"eq","nativeSrc":"209:2:58","nodeType":"YulIdentifier","src":"209:2:58"},"nativeSrc":"209:89:58","nodeType":"YulFunctionCall","src":"209:89:58"}],"functionName":{"name":"iszero","nativeSrc":"202:6:58","nodeType":"YulIdentifier","src":"202:6:58"},"nativeSrc":"202:97:58","nodeType":"YulFunctionCall","src":"202:97:58"},"nativeSrc":"199:117:58","nodeType":"YulIf","src":"199:117:58"},{"nativeSrc":"325:15:58","nodeType":"YulAssignment","src":"325:15:58","value":{"name":"value","nativeSrc":"335:5:58","nodeType":"YulIdentifier","src":"335:5:58"},"variableNames":[{"name":"value0","nativeSrc":"325:6:58","nodeType":"YulIdentifier","src":"325:6:58"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:58","nodeType":"YulTypedName","src":"49:9:58","type":""},{"name":"dataEnd","nativeSrc":"60:7:58","nodeType":"YulTypedName","src":"60:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:58","nodeType":"YulTypedName","src":"72:6:58","type":""}],"src":"14:332:58"},{"body":{"nativeSrc":"446:92:58","nodeType":"YulBlock","src":"446:92:58","statements":[{"nativeSrc":"456:26:58","nodeType":"YulAssignment","src":"456:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:58","nodeType":"YulIdentifier","src":"468:9:58"},{"kind":"number","nativeSrc":"479:2:58","nodeType":"YulLiteral","src":"479:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:58","nodeType":"YulIdentifier","src":"464:3:58"},"nativeSrc":"464:18:58","nodeType":"YulFunctionCall","src":"464:18:58"},"variableNames":[{"name":"tail","nativeSrc":"456:4:58","nodeType":"YulIdentifier","src":"456:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:58","nodeType":"YulIdentifier","src":"498:9:58"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:58","nodeType":"YulIdentifier","src":"523:6:58"}],"functionName":{"name":"iszero","nativeSrc":"516:6:58","nodeType":"YulIdentifier","src":"516:6:58"},"nativeSrc":"516:14:58","nodeType":"YulFunctionCall","src":"516:14:58"}],"functionName":{"name":"iszero","nativeSrc":"509:6:58","nodeType":"YulIdentifier","src":"509:6:58"},"nativeSrc":"509:22:58","nodeType":"YulFunctionCall","src":"509:22:58"}],"functionName":{"name":"mstore","nativeSrc":"491:6:58","nodeType":"YulIdentifier","src":"491:6:58"},"nativeSrc":"491:41:58","nodeType":"YulFunctionCall","src":"491:41:58"},"nativeSrc":"491:41:58","nodeType":"YulExpressionStatement","src":"491:41:58"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:58","nodeType":"YulTypedName","src":"415:9:58","type":""},{"name":"value0","nativeSrc":"426:6:58","nodeType":"YulTypedName","src":"426:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:58","nodeType":"YulTypedName","src":"437:4:58","type":""}],"src":"351:187:58"},{"body":{"nativeSrc":"644:76:58","nodeType":"YulBlock","src":"644:76:58","statements":[{"nativeSrc":"654:26:58","nodeType":"YulAssignment","src":"654:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:58","nodeType":"YulIdentifier","src":"666:9:58"},{"kind":"number","nativeSrc":"677:2:58","nodeType":"YulLiteral","src":"677:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:58","nodeType":"YulIdentifier","src":"662:3:58"},"nativeSrc":"662:18:58","nodeType":"YulFunctionCall","src":"662:18:58"},"variableNames":[{"name":"tail","nativeSrc":"654:4:58","nodeType":"YulIdentifier","src":"654:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:58","nodeType":"YulIdentifier","src":"696:9:58"},{"name":"value0","nativeSrc":"707:6:58","nodeType":"YulIdentifier","src":"707:6:58"}],"functionName":{"name":"mstore","nativeSrc":"689:6:58","nodeType":"YulIdentifier","src":"689:6:58"},"nativeSrc":"689:25:58","nodeType":"YulFunctionCall","src":"689:25:58"},"nativeSrc":"689:25:58","nodeType":"YulExpressionStatement","src":"689:25:58"}]},"name":"abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed","nativeSrc":"543:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:58","nodeType":"YulTypedName","src":"613:9:58","type":""},{"name":"value0","nativeSrc":"624:6:58","nodeType":"YulTypedName","src":"624:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:58","nodeType":"YulTypedName","src":"635:4:58","type":""}],"src":"543:177:58"},{"body":{"nativeSrc":"770:109:58","nodeType":"YulBlock","src":"770:109:58","statements":[{"body":{"nativeSrc":"857:16:58","nodeType":"YulBlock","src":"857:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"866:1:58","nodeType":"YulLiteral","src":"866:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"869:1:58","nodeType":"YulLiteral","src":"869:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"859:6:58","nodeType":"YulIdentifier","src":"859:6:58"},"nativeSrc":"859:12:58","nodeType":"YulFunctionCall","src":"859:12:58"},"nativeSrc":"859:12:58","nodeType":"YulExpressionStatement","src":"859:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"793:5:58","nodeType":"YulIdentifier","src":"793:5:58"},{"arguments":[{"name":"value","nativeSrc":"804:5:58","nodeType":"YulIdentifier","src":"804:5:58"},{"kind":"number","nativeSrc":"811:42:58","nodeType":"YulLiteral","src":"811:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"800:3:58","nodeType":"YulIdentifier","src":"800:3:58"},"nativeSrc":"800:54:58","nodeType":"YulFunctionCall","src":"800:54:58"}],"functionName":{"name":"eq","nativeSrc":"790:2:58","nodeType":"YulIdentifier","src":"790:2:58"},"nativeSrc":"790:65:58","nodeType":"YulFunctionCall","src":"790:65:58"}],"functionName":{"name":"iszero","nativeSrc":"783:6:58","nodeType":"YulIdentifier","src":"783:6:58"},"nativeSrc":"783:73:58","nodeType":"YulFunctionCall","src":"783:73:58"},"nativeSrc":"780:93:58","nodeType":"YulIf","src":"780:93:58"}]},"name":"validator_revert_address","nativeSrc":"725:154:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"759:5:58","nodeType":"YulTypedName","src":"759:5:58","type":""}],"src":"725:154:58"},{"body":{"nativeSrc":"954:177:58","nodeType":"YulBlock","src":"954:177:58","statements":[{"body":{"nativeSrc":"1000:16:58","nodeType":"YulBlock","src":"1000:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1009:1:58","nodeType":"YulLiteral","src":"1009:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1012:1:58","nodeType":"YulLiteral","src":"1012:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1002:6:58","nodeType":"YulIdentifier","src":"1002:6:58"},"nativeSrc":"1002:12:58","nodeType":"YulFunctionCall","src":"1002:12:58"},"nativeSrc":"1002:12:58","nodeType":"YulExpressionStatement","src":"1002:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"975:7:58","nodeType":"YulIdentifier","src":"975:7:58"},{"name":"headStart","nativeSrc":"984:9:58","nodeType":"YulIdentifier","src":"984:9:58"}],"functionName":{"name":"sub","nativeSrc":"971:3:58","nodeType":"YulIdentifier","src":"971:3:58"},"nativeSrc":"971:23:58","nodeType":"YulFunctionCall","src":"971:23:58"},{"kind":"number","nativeSrc":"996:2:58","nodeType":"YulLiteral","src":"996:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"967:3:58","nodeType":"YulIdentifier","src":"967:3:58"},"nativeSrc":"967:32:58","nodeType":"YulFunctionCall","src":"967:32:58"},"nativeSrc":"964:52:58","nodeType":"YulIf","src":"964:52:58"},{"nativeSrc":"1025:36:58","nodeType":"YulVariableDeclaration","src":"1025:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1051:9:58","nodeType":"YulIdentifier","src":"1051:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"1038:12:58","nodeType":"YulIdentifier","src":"1038:12:58"},"nativeSrc":"1038:23:58","nodeType":"YulFunctionCall","src":"1038:23:58"},"variables":[{"name":"value","nativeSrc":"1029:5:58","nodeType":"YulTypedName","src":"1029:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"1095:5:58","nodeType":"YulIdentifier","src":"1095:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"1070:24:58","nodeType":"YulIdentifier","src":"1070:24:58"},"nativeSrc":"1070:31:58","nodeType":"YulFunctionCall","src":"1070:31:58"},"nativeSrc":"1070:31:58","nodeType":"YulExpressionStatement","src":"1070:31:58"},{"nativeSrc":"1110:15:58","nodeType":"YulAssignment","src":"1110:15:58","value":{"name":"value","nativeSrc":"1120:5:58","nodeType":"YulIdentifier","src":"1120:5:58"},"variableNames":[{"name":"value0","nativeSrc":"1110:6:58","nodeType":"YulIdentifier","src":"1110:6:58"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"884:247:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"920:9:58","nodeType":"YulTypedName","src":"920:9:58","type":""},{"name":"dataEnd","nativeSrc":"931:7:58","nodeType":"YulTypedName","src":"931:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"943:6:58","nodeType":"YulTypedName","src":"943:6:58","type":""}],"src":"884:247:58"},{"body":{"nativeSrc":"1315:222:58","nodeType":"YulBlock","src":"1315:222:58","statements":[{"nativeSrc":"1325:27:58","nodeType":"YulAssignment","src":"1325:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1337:9:58","nodeType":"YulIdentifier","src":"1337:9:58"},{"kind":"number","nativeSrc":"1348:3:58","nodeType":"YulLiteral","src":"1348:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"1333:3:58","nodeType":"YulIdentifier","src":"1333:3:58"},"nativeSrc":"1333:19:58","nodeType":"YulFunctionCall","src":"1333:19:58"},"variableNames":[{"name":"tail","nativeSrc":"1325:4:58","nodeType":"YulIdentifier","src":"1325:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1368:9:58","nodeType":"YulIdentifier","src":"1368:9:58"},{"name":"value0","nativeSrc":"1379:6:58","nodeType":"YulIdentifier","src":"1379:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1361:6:58","nodeType":"YulIdentifier","src":"1361:6:58"},"nativeSrc":"1361:25:58","nodeType":"YulFunctionCall","src":"1361:25:58"},"nativeSrc":"1361:25:58","nodeType":"YulExpressionStatement","src":"1361:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1406:9:58","nodeType":"YulIdentifier","src":"1406:9:58"},{"kind":"number","nativeSrc":"1417:2:58","nodeType":"YulLiteral","src":"1417:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1402:3:58","nodeType":"YulIdentifier","src":"1402:3:58"},"nativeSrc":"1402:18:58","nodeType":"YulFunctionCall","src":"1402:18:58"},{"name":"value1","nativeSrc":"1422:6:58","nodeType":"YulIdentifier","src":"1422:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1395:6:58","nodeType":"YulIdentifier","src":"1395:6:58"},"nativeSrc":"1395:34:58","nodeType":"YulFunctionCall","src":"1395:34:58"},"nativeSrc":"1395:34:58","nodeType":"YulExpressionStatement","src":"1395:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1449:9:58","nodeType":"YulIdentifier","src":"1449:9:58"},{"kind":"number","nativeSrc":"1460:2:58","nodeType":"YulLiteral","src":"1460:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1445:3:58","nodeType":"YulIdentifier","src":"1445:3:58"},"nativeSrc":"1445:18:58","nodeType":"YulFunctionCall","src":"1445:18:58"},{"name":"value2","nativeSrc":"1465:6:58","nodeType":"YulIdentifier","src":"1465:6:58"}],"functionName":{"name":"mstore","nativeSrc":"1438:6:58","nodeType":"YulIdentifier","src":"1438:6:58"},"nativeSrc":"1438:34:58","nodeType":"YulFunctionCall","src":"1438:34:58"},"nativeSrc":"1438:34:58","nodeType":"YulExpressionStatement","src":"1438:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1492:9:58","nodeType":"YulIdentifier","src":"1492:9:58"},{"kind":"number","nativeSrc":"1503:2:58","nodeType":"YulLiteral","src":"1503:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"1488:3:58","nodeType":"YulIdentifier","src":"1488:3:58"},"nativeSrc":"1488:18:58","nodeType":"YulFunctionCall","src":"1488:18:58"},{"arguments":[{"arguments":[{"name":"value3","nativeSrc":"1522:6:58","nodeType":"YulIdentifier","src":"1522:6:58"}],"functionName":{"name":"iszero","nativeSrc":"1515:6:58","nodeType":"YulIdentifier","src":"1515:6:58"},"nativeSrc":"1515:14:58","nodeType":"YulFunctionCall","src":"1515:14:58"}],"functionName":{"name":"iszero","nativeSrc":"1508:6:58","nodeType":"YulIdentifier","src":"1508:6:58"},"nativeSrc":"1508:22:58","nodeType":"YulFunctionCall","src":"1508:22:58"}],"functionName":{"name":"mstore","nativeSrc":"1481:6:58","nodeType":"YulIdentifier","src":"1481:6:58"},"nativeSrc":"1481:50:58","nodeType":"YulFunctionCall","src":"1481:50:58"},"nativeSrc":"1481:50:58","nodeType":"YulExpressionStatement","src":"1481:50:58"}]},"name":"abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed","nativeSrc":"1136:401:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1260:9:58","nodeType":"YulTypedName","src":"1260:9:58","type":""},{"name":"value3","nativeSrc":"1271:6:58","nodeType":"YulTypedName","src":"1271:6:58","type":""},{"name":"value2","nativeSrc":"1279:6:58","nodeType":"YulTypedName","src":"1279:6:58","type":""},{"name":"value1","nativeSrc":"1287:6:58","nodeType":"YulTypedName","src":"1287:6:58","type":""},{"name":"value0","nativeSrc":"1295:6:58","nodeType":"YulTypedName","src":"1295:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1306:4:58","nodeType":"YulTypedName","src":"1306:4:58","type":""}],"src":"1136:401:58"},{"body":{"nativeSrc":"1670:125:58","nodeType":"YulBlock","src":"1670:125:58","statements":[{"nativeSrc":"1680:26:58","nodeType":"YulAssignment","src":"1680:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1692:9:58","nodeType":"YulIdentifier","src":"1692:9:58"},{"kind":"number","nativeSrc":"1703:2:58","nodeType":"YulLiteral","src":"1703:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1688:3:58","nodeType":"YulIdentifier","src":"1688:3:58"},"nativeSrc":"1688:18:58","nodeType":"YulFunctionCall","src":"1688:18:58"},"variableNames":[{"name":"tail","nativeSrc":"1680:4:58","nodeType":"YulIdentifier","src":"1680:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"1722:9:58","nodeType":"YulIdentifier","src":"1722:9:58"},{"arguments":[{"name":"value0","nativeSrc":"1737:6:58","nodeType":"YulIdentifier","src":"1737:6:58"},{"kind":"number","nativeSrc":"1745:42:58","nodeType":"YulLiteral","src":"1745:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"1733:3:58","nodeType":"YulIdentifier","src":"1733:3:58"},"nativeSrc":"1733:55:58","nodeType":"YulFunctionCall","src":"1733:55:58"}],"functionName":{"name":"mstore","nativeSrc":"1715:6:58","nodeType":"YulIdentifier","src":"1715:6:58"},"nativeSrc":"1715:74:58","nodeType":"YulFunctionCall","src":"1715:74:58"},"nativeSrc":"1715:74:58","nodeType":"YulExpressionStatement","src":"1715:74:58"}]},"name":"abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed","nativeSrc":"1542:253:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1639:9:58","nodeType":"YulTypedName","src":"1639:9:58","type":""},{"name":"value0","nativeSrc":"1650:6:58","nodeType":"YulTypedName","src":"1650:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"1661:4:58","nodeType":"YulTypedName","src":"1661:4:58","type":""}],"src":"1542:253:58"},{"body":{"nativeSrc":"1870:110:58","nodeType":"YulBlock","src":"1870:110:58","statements":[{"body":{"nativeSrc":"1916:16:58","nodeType":"YulBlock","src":"1916:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1925:1:58","nodeType":"YulLiteral","src":"1925:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"1928:1:58","nodeType":"YulLiteral","src":"1928:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1918:6:58","nodeType":"YulIdentifier","src":"1918:6:58"},"nativeSrc":"1918:12:58","nodeType":"YulFunctionCall","src":"1918:12:58"},"nativeSrc":"1918:12:58","nodeType":"YulExpressionStatement","src":"1918:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1891:7:58","nodeType":"YulIdentifier","src":"1891:7:58"},{"name":"headStart","nativeSrc":"1900:9:58","nodeType":"YulIdentifier","src":"1900:9:58"}],"functionName":{"name":"sub","nativeSrc":"1887:3:58","nodeType":"YulIdentifier","src":"1887:3:58"},"nativeSrc":"1887:23:58","nodeType":"YulFunctionCall","src":"1887:23:58"},{"kind":"number","nativeSrc":"1912:2:58","nodeType":"YulLiteral","src":"1912:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"1883:3:58","nodeType":"YulIdentifier","src":"1883:3:58"},"nativeSrc":"1883:32:58","nodeType":"YulFunctionCall","src":"1883:32:58"},"nativeSrc":"1880:52:58","nodeType":"YulIf","src":"1880:52:58"},{"nativeSrc":"1941:33:58","nodeType":"YulAssignment","src":"1941:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"1964:9:58","nodeType":"YulIdentifier","src":"1964:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"1951:12:58","nodeType":"YulIdentifier","src":"1951:12:58"},"nativeSrc":"1951:23:58","nodeType":"YulFunctionCall","src":"1951:23:58"},"variableNames":[{"name":"value0","nativeSrc":"1941:6:58","nodeType":"YulIdentifier","src":"1941:6:58"}]}]},"name":"abi_decode_tuple_t_uint256","nativeSrc":"1800:180:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1836:9:58","nodeType":"YulTypedName","src":"1836:9:58","type":""},{"name":"dataEnd","nativeSrc":"1847:7:58","nodeType":"YulTypedName","src":"1847:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1859:6:58","nodeType":"YulTypedName","src":"1859:6:58","type":""}],"src":"1800:180:58"},{"body":{"nativeSrc":"2072:228:58","nodeType":"YulBlock","src":"2072:228:58","statements":[{"body":{"nativeSrc":"2118:16:58","nodeType":"YulBlock","src":"2118:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2127:1:58","nodeType":"YulLiteral","src":"2127:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"2130:1:58","nodeType":"YulLiteral","src":"2130:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2120:6:58","nodeType":"YulIdentifier","src":"2120:6:58"},"nativeSrc":"2120:12:58","nodeType":"YulFunctionCall","src":"2120:12:58"},"nativeSrc":"2120:12:58","nodeType":"YulExpressionStatement","src":"2120:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2093:7:58","nodeType":"YulIdentifier","src":"2093:7:58"},{"name":"headStart","nativeSrc":"2102:9:58","nodeType":"YulIdentifier","src":"2102:9:58"}],"functionName":{"name":"sub","nativeSrc":"2089:3:58","nodeType":"YulIdentifier","src":"2089:3:58"},"nativeSrc":"2089:23:58","nodeType":"YulFunctionCall","src":"2089:23:58"},{"kind":"number","nativeSrc":"2114:2:58","nodeType":"YulLiteral","src":"2114:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"2085:3:58","nodeType":"YulIdentifier","src":"2085:3:58"},"nativeSrc":"2085:32:58","nodeType":"YulFunctionCall","src":"2085:32:58"},"nativeSrc":"2082:52:58","nodeType":"YulIf","src":"2082:52:58"},{"nativeSrc":"2143:33:58","nodeType":"YulAssignment","src":"2143:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"2166:9:58","nodeType":"YulIdentifier","src":"2166:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"2153:12:58","nodeType":"YulIdentifier","src":"2153:12:58"},"nativeSrc":"2153:23:58","nodeType":"YulFunctionCall","src":"2153:23:58"},"variableNames":[{"name":"value0","nativeSrc":"2143:6:58","nodeType":"YulIdentifier","src":"2143:6:58"}]},{"nativeSrc":"2185:45:58","nodeType":"YulVariableDeclaration","src":"2185:45:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2215:9:58","nodeType":"YulIdentifier","src":"2215:9:58"},{"kind":"number","nativeSrc":"2226:2:58","nodeType":"YulLiteral","src":"2226:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2211:3:58","nodeType":"YulIdentifier","src":"2211:3:58"},"nativeSrc":"2211:18:58","nodeType":"YulFunctionCall","src":"2211:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"2198:12:58","nodeType":"YulIdentifier","src":"2198:12:58"},"nativeSrc":"2198:32:58","nodeType":"YulFunctionCall","src":"2198:32:58"},"variables":[{"name":"value","nativeSrc":"2189:5:58","nodeType":"YulTypedName","src":"2189:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2264:5:58","nodeType":"YulIdentifier","src":"2264:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2239:24:58","nodeType":"YulIdentifier","src":"2239:24:58"},"nativeSrc":"2239:31:58","nodeType":"YulFunctionCall","src":"2239:31:58"},"nativeSrc":"2239:31:58","nodeType":"YulExpressionStatement","src":"2239:31:58"},{"nativeSrc":"2279:15:58","nodeType":"YulAssignment","src":"2279:15:58","value":{"name":"value","nativeSrc":"2289:5:58","nodeType":"YulIdentifier","src":"2289:5:58"},"variableNames":[{"name":"value1","nativeSrc":"2279:6:58","nodeType":"YulIdentifier","src":"2279:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32t_address","nativeSrc":"1985:315:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2030:9:58","nodeType":"YulTypedName","src":"2030:9:58","type":""},{"name":"dataEnd","nativeSrc":"2041:7:58","nodeType":"YulTypedName","src":"2041:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2053:6:58","nodeType":"YulTypedName","src":"2053:6:58","type":""},{"name":"value1","nativeSrc":"2061:6:58","nodeType":"YulTypedName","src":"2061:6:58","type":""}],"src":"1985:315:58"},{"body":{"nativeSrc":"2445:796:58","nodeType":"YulBlock","src":"2445:796:58","statements":[{"body":{"nativeSrc":"2492:16:58","nodeType":"YulBlock","src":"2492:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2501:1:58","nodeType":"YulLiteral","src":"2501:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"2504:1:58","nodeType":"YulLiteral","src":"2504:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2494:6:58","nodeType":"YulIdentifier","src":"2494:6:58"},"nativeSrc":"2494:12:58","nodeType":"YulFunctionCall","src":"2494:12:58"},"nativeSrc":"2494:12:58","nodeType":"YulExpressionStatement","src":"2494:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2466:7:58","nodeType":"YulIdentifier","src":"2466:7:58"},{"name":"headStart","nativeSrc":"2475:9:58","nodeType":"YulIdentifier","src":"2475:9:58"}],"functionName":{"name":"sub","nativeSrc":"2462:3:58","nodeType":"YulIdentifier","src":"2462:3:58"},"nativeSrc":"2462:23:58","nodeType":"YulFunctionCall","src":"2462:23:58"},{"kind":"number","nativeSrc":"2487:3:58","nodeType":"YulLiteral","src":"2487:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"2458:3:58","nodeType":"YulIdentifier","src":"2458:3:58"},"nativeSrc":"2458:33:58","nodeType":"YulFunctionCall","src":"2458:33:58"},"nativeSrc":"2455:53:58","nodeType":"YulIf","src":"2455:53:58"},{"nativeSrc":"2517:36:58","nodeType":"YulVariableDeclaration","src":"2517:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"2543:9:58","nodeType":"YulIdentifier","src":"2543:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"2530:12:58","nodeType":"YulIdentifier","src":"2530:12:58"},"nativeSrc":"2530:23:58","nodeType":"YulFunctionCall","src":"2530:23:58"},"variables":[{"name":"value","nativeSrc":"2521:5:58","nodeType":"YulTypedName","src":"2521:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"2587:5:58","nodeType":"YulIdentifier","src":"2587:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2562:24:58","nodeType":"YulIdentifier","src":"2562:24:58"},"nativeSrc":"2562:31:58","nodeType":"YulFunctionCall","src":"2562:31:58"},"nativeSrc":"2562:31:58","nodeType":"YulExpressionStatement","src":"2562:31:58"},{"nativeSrc":"2602:15:58","nodeType":"YulAssignment","src":"2602:15:58","value":{"name":"value","nativeSrc":"2612:5:58","nodeType":"YulIdentifier","src":"2612:5:58"},"variableNames":[{"name":"value0","nativeSrc":"2602:6:58","nodeType":"YulIdentifier","src":"2602:6:58"}]},{"nativeSrc":"2626:47:58","nodeType":"YulVariableDeclaration","src":"2626:47:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2658:9:58","nodeType":"YulIdentifier","src":"2658:9:58"},{"kind":"number","nativeSrc":"2669:2:58","nodeType":"YulLiteral","src":"2669:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2654:3:58","nodeType":"YulIdentifier","src":"2654:3:58"},"nativeSrc":"2654:18:58","nodeType":"YulFunctionCall","src":"2654:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"2641:12:58","nodeType":"YulIdentifier","src":"2641:12:58"},"nativeSrc":"2641:32:58","nodeType":"YulFunctionCall","src":"2641:32:58"},"variables":[{"name":"value_1","nativeSrc":"2630:7:58","nodeType":"YulTypedName","src":"2630:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"2707:7:58","nodeType":"YulIdentifier","src":"2707:7:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"2682:24:58","nodeType":"YulIdentifier","src":"2682:24:58"},"nativeSrc":"2682:33:58","nodeType":"YulFunctionCall","src":"2682:33:58"},"nativeSrc":"2682:33:58","nodeType":"YulExpressionStatement","src":"2682:33:58"},{"nativeSrc":"2724:17:58","nodeType":"YulAssignment","src":"2724:17:58","value":{"name":"value_1","nativeSrc":"2734:7:58","nodeType":"YulIdentifier","src":"2734:7:58"},"variableNames":[{"name":"value1","nativeSrc":"2724:6:58","nodeType":"YulIdentifier","src":"2724:6:58"}]},{"nativeSrc":"2750:42:58","nodeType":"YulAssignment","src":"2750:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2777:9:58","nodeType":"YulIdentifier","src":"2777:9:58"},{"kind":"number","nativeSrc":"2788:2:58","nodeType":"YulLiteral","src":"2788:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2773:3:58","nodeType":"YulIdentifier","src":"2773:3:58"},"nativeSrc":"2773:18:58","nodeType":"YulFunctionCall","src":"2773:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"2760:12:58","nodeType":"YulIdentifier","src":"2760:12:58"},"nativeSrc":"2760:32:58","nodeType":"YulFunctionCall","src":"2760:32:58"},"variableNames":[{"name":"value2","nativeSrc":"2750:6:58","nodeType":"YulIdentifier","src":"2750:6:58"}]},{"nativeSrc":"2801:46:58","nodeType":"YulVariableDeclaration","src":"2801:46:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2832:9:58","nodeType":"YulIdentifier","src":"2832:9:58"},{"kind":"number","nativeSrc":"2843:2:58","nodeType":"YulLiteral","src":"2843:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"2828:3:58","nodeType":"YulIdentifier","src":"2828:3:58"},"nativeSrc":"2828:18:58","nodeType":"YulFunctionCall","src":"2828:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"2815:12:58","nodeType":"YulIdentifier","src":"2815:12:58"},"nativeSrc":"2815:32:58","nodeType":"YulFunctionCall","src":"2815:32:58"},"variables":[{"name":"offset","nativeSrc":"2805:6:58","nodeType":"YulTypedName","src":"2805:6:58","type":""}]},{"nativeSrc":"2856:28:58","nodeType":"YulVariableDeclaration","src":"2856:28:58","value":{"kind":"number","nativeSrc":"2866:18:58","nodeType":"YulLiteral","src":"2866:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2860:2:58","nodeType":"YulTypedName","src":"2860:2:58","type":""}]},{"body":{"nativeSrc":"2911:16:58","nodeType":"YulBlock","src":"2911:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2920:1:58","nodeType":"YulLiteral","src":"2920:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"2923:1:58","nodeType":"YulLiteral","src":"2923:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2913:6:58","nodeType":"YulIdentifier","src":"2913:6:58"},"nativeSrc":"2913:12:58","nodeType":"YulFunctionCall","src":"2913:12:58"},"nativeSrc":"2913:12:58","nodeType":"YulExpressionStatement","src":"2913:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2899:6:58","nodeType":"YulIdentifier","src":"2899:6:58"},{"name":"_1","nativeSrc":"2907:2:58","nodeType":"YulIdentifier","src":"2907:2:58"}],"functionName":{"name":"gt","nativeSrc":"2896:2:58","nodeType":"YulIdentifier","src":"2896:2:58"},"nativeSrc":"2896:14:58","nodeType":"YulFunctionCall","src":"2896:14:58"},"nativeSrc":"2893:34:58","nodeType":"YulIf","src":"2893:34:58"},{"nativeSrc":"2936:32:58","nodeType":"YulVariableDeclaration","src":"2936:32:58","value":{"arguments":[{"name":"headStart","nativeSrc":"2950:9:58","nodeType":"YulIdentifier","src":"2950:9:58"},{"name":"offset","nativeSrc":"2961:6:58","nodeType":"YulIdentifier","src":"2961:6:58"}],"functionName":{"name":"add","nativeSrc":"2946:3:58","nodeType":"YulIdentifier","src":"2946:3:58"},"nativeSrc":"2946:22:58","nodeType":"YulFunctionCall","src":"2946:22:58"},"variables":[{"name":"_2","nativeSrc":"2940:2:58","nodeType":"YulTypedName","src":"2940:2:58","type":""}]},{"body":{"nativeSrc":"3016:16:58","nodeType":"YulBlock","src":"3016:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3025:1:58","nodeType":"YulLiteral","src":"3025:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3028:1:58","nodeType":"YulLiteral","src":"3028:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3018:6:58","nodeType":"YulIdentifier","src":"3018:6:58"},"nativeSrc":"3018:12:58","nodeType":"YulFunctionCall","src":"3018:12:58"},"nativeSrc":"3018:12:58","nodeType":"YulExpressionStatement","src":"3018:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2995:2:58","nodeType":"YulIdentifier","src":"2995:2:58"},{"kind":"number","nativeSrc":"2999:4:58","nodeType":"YulLiteral","src":"2999:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2991:3:58","nodeType":"YulIdentifier","src":"2991:3:58"},"nativeSrc":"2991:13:58","nodeType":"YulFunctionCall","src":"2991:13:58"},{"name":"dataEnd","nativeSrc":"3006:7:58","nodeType":"YulIdentifier","src":"3006:7:58"}],"functionName":{"name":"slt","nativeSrc":"2987:3:58","nodeType":"YulIdentifier","src":"2987:3:58"},"nativeSrc":"2987:27:58","nodeType":"YulFunctionCall","src":"2987:27:58"}],"functionName":{"name":"iszero","nativeSrc":"2980:6:58","nodeType":"YulIdentifier","src":"2980:6:58"},"nativeSrc":"2980:35:58","nodeType":"YulFunctionCall","src":"2980:35:58"},"nativeSrc":"2977:55:58","nodeType":"YulIf","src":"2977:55:58"},{"nativeSrc":"3041:30:58","nodeType":"YulVariableDeclaration","src":"3041:30:58","value":{"arguments":[{"name":"_2","nativeSrc":"3068:2:58","nodeType":"YulIdentifier","src":"3068:2:58"}],"functionName":{"name":"calldataload","nativeSrc":"3055:12:58","nodeType":"YulIdentifier","src":"3055:12:58"},"nativeSrc":"3055:16:58","nodeType":"YulFunctionCall","src":"3055:16:58"},"variables":[{"name":"length","nativeSrc":"3045:6:58","nodeType":"YulTypedName","src":"3045:6:58","type":""}]},{"body":{"nativeSrc":"3098:16:58","nodeType":"YulBlock","src":"3098:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3107:1:58","nodeType":"YulLiteral","src":"3107:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3110:1:58","nodeType":"YulLiteral","src":"3110:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3100:6:58","nodeType":"YulIdentifier","src":"3100:6:58"},"nativeSrc":"3100:12:58","nodeType":"YulFunctionCall","src":"3100:12:58"},"nativeSrc":"3100:12:58","nodeType":"YulExpressionStatement","src":"3100:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"3086:6:58","nodeType":"YulIdentifier","src":"3086:6:58"},{"name":"_1","nativeSrc":"3094:2:58","nodeType":"YulIdentifier","src":"3094:2:58"}],"functionName":{"name":"gt","nativeSrc":"3083:2:58","nodeType":"YulIdentifier","src":"3083:2:58"},"nativeSrc":"3083:14:58","nodeType":"YulFunctionCall","src":"3083:14:58"},"nativeSrc":"3080:34:58","nodeType":"YulIf","src":"3080:34:58"},{"body":{"nativeSrc":"3164:16:58","nodeType":"YulBlock","src":"3164:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3173:1:58","nodeType":"YulLiteral","src":"3173:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"3176:1:58","nodeType":"YulLiteral","src":"3176:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3166:6:58","nodeType":"YulIdentifier","src":"3166:6:58"},"nativeSrc":"3166:12:58","nodeType":"YulFunctionCall","src":"3166:12:58"},"nativeSrc":"3166:12:58","nodeType":"YulExpressionStatement","src":"3166:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"3137:2:58","nodeType":"YulIdentifier","src":"3137:2:58"},{"name":"length","nativeSrc":"3141:6:58","nodeType":"YulIdentifier","src":"3141:6:58"}],"functionName":{"name":"add","nativeSrc":"3133:3:58","nodeType":"YulIdentifier","src":"3133:3:58"},"nativeSrc":"3133:15:58","nodeType":"YulFunctionCall","src":"3133:15:58"},{"kind":"number","nativeSrc":"3150:2:58","nodeType":"YulLiteral","src":"3150:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3129:3:58","nodeType":"YulIdentifier","src":"3129:3:58"},"nativeSrc":"3129:24:58","nodeType":"YulFunctionCall","src":"3129:24:58"},{"name":"dataEnd","nativeSrc":"3155:7:58","nodeType":"YulIdentifier","src":"3155:7:58"}],"functionName":{"name":"gt","nativeSrc":"3126:2:58","nodeType":"YulIdentifier","src":"3126:2:58"},"nativeSrc":"3126:37:58","nodeType":"YulFunctionCall","src":"3126:37:58"},"nativeSrc":"3123:57:58","nodeType":"YulIf","src":"3123:57:58"},{"nativeSrc":"3189:21:58","nodeType":"YulAssignment","src":"3189:21:58","value":{"arguments":[{"name":"_2","nativeSrc":"3203:2:58","nodeType":"YulIdentifier","src":"3203:2:58"},{"kind":"number","nativeSrc":"3207:2:58","nodeType":"YulLiteral","src":"3207:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3199:3:58","nodeType":"YulIdentifier","src":"3199:3:58"},"nativeSrc":"3199:11:58","nodeType":"YulFunctionCall","src":"3199:11:58"},"variableNames":[{"name":"value3","nativeSrc":"3189:6:58","nodeType":"YulIdentifier","src":"3189:6:58"}]},{"nativeSrc":"3219:16:58","nodeType":"YulAssignment","src":"3219:16:58","value":{"name":"length","nativeSrc":"3229:6:58","nodeType":"YulIdentifier","src":"3229:6:58"},"variableNames":[{"name":"value4","nativeSrc":"3219:6:58","nodeType":"YulIdentifier","src":"3219:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr","nativeSrc":"2305:936:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2379:9:58","nodeType":"YulTypedName","src":"2379:9:58","type":""},{"name":"dataEnd","nativeSrc":"2390:7:58","nodeType":"YulTypedName","src":"2390:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2402:6:58","nodeType":"YulTypedName","src":"2402:6:58","type":""},{"name":"value1","nativeSrc":"2410:6:58","nodeType":"YulTypedName","src":"2410:6:58","type":""},{"name":"value2","nativeSrc":"2418:6:58","nodeType":"YulTypedName","src":"2418:6:58","type":""},{"name":"value3","nativeSrc":"2426:6:58","nodeType":"YulTypedName","src":"2426:6:58","type":""},{"name":"value4","nativeSrc":"2434:6:58","nodeType":"YulTypedName","src":"2434:6:58","type":""}],"src":"2305:936:58"},{"body":{"nativeSrc":"3345:149:58","nodeType":"YulBlock","src":"3345:149:58","statements":[{"nativeSrc":"3355:26:58","nodeType":"YulAssignment","src":"3355:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"3367:9:58","nodeType":"YulIdentifier","src":"3367:9:58"},{"kind":"number","nativeSrc":"3378:2:58","nodeType":"YulLiteral","src":"3378:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3363:3:58","nodeType":"YulIdentifier","src":"3363:3:58"},"nativeSrc":"3363:18:58","nodeType":"YulFunctionCall","src":"3363:18:58"},"variableNames":[{"name":"tail","nativeSrc":"3355:4:58","nodeType":"YulIdentifier","src":"3355:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3397:9:58","nodeType":"YulIdentifier","src":"3397:9:58"},{"arguments":[{"name":"value0","nativeSrc":"3412:6:58","nodeType":"YulIdentifier","src":"3412:6:58"},{"kind":"number","nativeSrc":"3420:66:58","nodeType":"YulLiteral","src":"3420:66:58","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"3408:3:58","nodeType":"YulIdentifier","src":"3408:3:58"},"nativeSrc":"3408:79:58","nodeType":"YulFunctionCall","src":"3408:79:58"}],"functionName":{"name":"mstore","nativeSrc":"3390:6:58","nodeType":"YulIdentifier","src":"3390:6:58"},"nativeSrc":"3390:98:58","nodeType":"YulFunctionCall","src":"3390:98:58"},"nativeSrc":"3390:98:58","nodeType":"YulExpressionStatement","src":"3390:98:58"}]},"name":"abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed","nativeSrc":"3246:248:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3314:9:58","nodeType":"YulTypedName","src":"3314:9:58","type":""},{"name":"value0","nativeSrc":"3325:6:58","nodeType":"YulTypedName","src":"3325:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3336:4:58","nodeType":"YulTypedName","src":"3336:4:58","type":""}],"src":"3246:248:58"},{"body":{"nativeSrc":"3600:125:58","nodeType":"YulBlock","src":"3600:125:58","statements":[{"nativeSrc":"3610:26:58","nodeType":"YulAssignment","src":"3610:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"3622:9:58","nodeType":"YulIdentifier","src":"3622:9:58"},{"kind":"number","nativeSrc":"3633:2:58","nodeType":"YulLiteral","src":"3633:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3618:3:58","nodeType":"YulIdentifier","src":"3618:3:58"},"nativeSrc":"3618:18:58","nodeType":"YulFunctionCall","src":"3618:18:58"},"variableNames":[{"name":"tail","nativeSrc":"3610:4:58","nodeType":"YulIdentifier","src":"3610:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3652:9:58","nodeType":"YulIdentifier","src":"3652:9:58"},{"arguments":[{"name":"value0","nativeSrc":"3667:6:58","nodeType":"YulIdentifier","src":"3667:6:58"},{"kind":"number","nativeSrc":"3675:42:58","nodeType":"YulLiteral","src":"3675:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3663:3:58","nodeType":"YulIdentifier","src":"3663:3:58"},"nativeSrc":"3663:55:58","nodeType":"YulFunctionCall","src":"3663:55:58"}],"functionName":{"name":"mstore","nativeSrc":"3645:6:58","nodeType":"YulIdentifier","src":"3645:6:58"},"nativeSrc":"3645:74:58","nodeType":"YulFunctionCall","src":"3645:74:58"},"nativeSrc":"3645:74:58","nodeType":"YulExpressionStatement","src":"3645:74:58"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"3499:226:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3569:9:58","nodeType":"YulTypedName","src":"3569:9:58","type":""},{"name":"value0","nativeSrc":"3580:6:58","nodeType":"YulTypedName","src":"3580:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3591:4:58","nodeType":"YulTypedName","src":"3591:4:58","type":""}],"src":"3499:226:58"},{"body":{"nativeSrc":"3846:125:58","nodeType":"YulBlock","src":"3846:125:58","statements":[{"nativeSrc":"3856:26:58","nodeType":"YulAssignment","src":"3856:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"3868:9:58","nodeType":"YulIdentifier","src":"3868:9:58"},{"kind":"number","nativeSrc":"3879:2:58","nodeType":"YulLiteral","src":"3879:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3864:3:58","nodeType":"YulIdentifier","src":"3864:3:58"},"nativeSrc":"3864:18:58","nodeType":"YulFunctionCall","src":"3864:18:58"},"variableNames":[{"name":"tail","nativeSrc":"3856:4:58","nodeType":"YulIdentifier","src":"3856:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3898:9:58","nodeType":"YulIdentifier","src":"3898:9:58"},{"arguments":[{"name":"value0","nativeSrc":"3913:6:58","nodeType":"YulIdentifier","src":"3913:6:58"},{"kind":"number","nativeSrc":"3921:42:58","nodeType":"YulLiteral","src":"3921:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3909:3:58","nodeType":"YulIdentifier","src":"3909:3:58"},"nativeSrc":"3909:55:58","nodeType":"YulFunctionCall","src":"3909:55:58"}],"functionName":{"name":"mstore","nativeSrc":"3891:6:58","nodeType":"YulIdentifier","src":"3891:6:58"},"nativeSrc":"3891:74:58","nodeType":"YulFunctionCall","src":"3891:74:58"},"nativeSrc":"3891:74:58","nodeType":"YulExpressionStatement","src":"3891:74:58"}]},"name":"abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed","nativeSrc":"3730:241:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3815:9:58","nodeType":"YulTypedName","src":"3815:9:58","type":""},{"name":"value0","nativeSrc":"3826:6:58","nodeType":"YulTypedName","src":"3826:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3837:4:58","nodeType":"YulTypedName","src":"3837:4:58","type":""}],"src":"3730:241:58"},{"body":{"nativeSrc":"4060:283:58","nodeType":"YulBlock","src":"4060:283:58","statements":[{"body":{"nativeSrc":"4109:16:58","nodeType":"YulBlock","src":"4109:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4118:1:58","nodeType":"YulLiteral","src":"4118:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4121:1:58","nodeType":"YulLiteral","src":"4121:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4111:6:58","nodeType":"YulIdentifier","src":"4111:6:58"},"nativeSrc":"4111:12:58","nodeType":"YulFunctionCall","src":"4111:12:58"},"nativeSrc":"4111:12:58","nodeType":"YulExpressionStatement","src":"4111:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4088:6:58","nodeType":"YulIdentifier","src":"4088:6:58"},{"kind":"number","nativeSrc":"4096:4:58","nodeType":"YulLiteral","src":"4096:4:58","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"4084:3:58","nodeType":"YulIdentifier","src":"4084:3:58"},"nativeSrc":"4084:17:58","nodeType":"YulFunctionCall","src":"4084:17:58"},{"name":"end","nativeSrc":"4103:3:58","nodeType":"YulIdentifier","src":"4103:3:58"}],"functionName":{"name":"slt","nativeSrc":"4080:3:58","nodeType":"YulIdentifier","src":"4080:3:58"},"nativeSrc":"4080:27:58","nodeType":"YulFunctionCall","src":"4080:27:58"}],"functionName":{"name":"iszero","nativeSrc":"4073:6:58","nodeType":"YulIdentifier","src":"4073:6:58"},"nativeSrc":"4073:35:58","nodeType":"YulFunctionCall","src":"4073:35:58"},"nativeSrc":"4070:55:58","nodeType":"YulIf","src":"4070:55:58"},{"nativeSrc":"4134:30:58","nodeType":"YulAssignment","src":"4134:30:58","value":{"arguments":[{"name":"offset","nativeSrc":"4157:6:58","nodeType":"YulIdentifier","src":"4157:6:58"}],"functionName":{"name":"calldataload","nativeSrc":"4144:12:58","nodeType":"YulIdentifier","src":"4144:12:58"},"nativeSrc":"4144:20:58","nodeType":"YulFunctionCall","src":"4144:20:58"},"variableNames":[{"name":"length","nativeSrc":"4134:6:58","nodeType":"YulIdentifier","src":"4134:6:58"}]},{"body":{"nativeSrc":"4207:16:58","nodeType":"YulBlock","src":"4207:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4216:1:58","nodeType":"YulLiteral","src":"4216:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4219:1:58","nodeType":"YulLiteral","src":"4219:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4209:6:58","nodeType":"YulIdentifier","src":"4209:6:58"},"nativeSrc":"4209:12:58","nodeType":"YulFunctionCall","src":"4209:12:58"},"nativeSrc":"4209:12:58","nodeType":"YulExpressionStatement","src":"4209:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"4179:6:58","nodeType":"YulIdentifier","src":"4179:6:58"},{"kind":"number","nativeSrc":"4187:18:58","nodeType":"YulLiteral","src":"4187:18:58","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4176:2:58","nodeType":"YulIdentifier","src":"4176:2:58"},"nativeSrc":"4176:30:58","nodeType":"YulFunctionCall","src":"4176:30:58"},"nativeSrc":"4173:50:58","nodeType":"YulIf","src":"4173:50:58"},{"nativeSrc":"4232:29:58","nodeType":"YulAssignment","src":"4232:29:58","value":{"arguments":[{"name":"offset","nativeSrc":"4248:6:58","nodeType":"YulIdentifier","src":"4248:6:58"},{"kind":"number","nativeSrc":"4256:4:58","nodeType":"YulLiteral","src":"4256:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4244:3:58","nodeType":"YulIdentifier","src":"4244:3:58"},"nativeSrc":"4244:17:58","nodeType":"YulFunctionCall","src":"4244:17:58"},"variableNames":[{"name":"arrayPos","nativeSrc":"4232:8:58","nodeType":"YulIdentifier","src":"4232:8:58"}]},{"body":{"nativeSrc":"4321:16:58","nodeType":"YulBlock","src":"4321:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4330:1:58","nodeType":"YulLiteral","src":"4330:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4333:1:58","nodeType":"YulLiteral","src":"4333:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4323:6:58","nodeType":"YulIdentifier","src":"4323:6:58"},"nativeSrc":"4323:12:58","nodeType":"YulFunctionCall","src":"4323:12:58"},"nativeSrc":"4323:12:58","nodeType":"YulExpressionStatement","src":"4323:12:58"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"4284:6:58","nodeType":"YulIdentifier","src":"4284:6:58"},{"arguments":[{"kind":"number","nativeSrc":"4296:1:58","nodeType":"YulLiteral","src":"4296:1:58","type":"","value":"5"},{"name":"length","nativeSrc":"4299:6:58","nodeType":"YulIdentifier","src":"4299:6:58"}],"functionName":{"name":"shl","nativeSrc":"4292:3:58","nodeType":"YulIdentifier","src":"4292:3:58"},"nativeSrc":"4292:14:58","nodeType":"YulFunctionCall","src":"4292:14:58"}],"functionName":{"name":"add","nativeSrc":"4280:3:58","nodeType":"YulIdentifier","src":"4280:3:58"},"nativeSrc":"4280:27:58","nodeType":"YulFunctionCall","src":"4280:27:58"},{"kind":"number","nativeSrc":"4309:4:58","nodeType":"YulLiteral","src":"4309:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"4276:3:58","nodeType":"YulIdentifier","src":"4276:3:58"},"nativeSrc":"4276:38:58","nodeType":"YulFunctionCall","src":"4276:38:58"},{"name":"end","nativeSrc":"4316:3:58","nodeType":"YulIdentifier","src":"4316:3:58"}],"functionName":{"name":"gt","nativeSrc":"4273:2:58","nodeType":"YulIdentifier","src":"4273:2:58"},"nativeSrc":"4273:47:58","nodeType":"YulFunctionCall","src":"4273:47:58"},"nativeSrc":"4270:67:58","nodeType":"YulIf","src":"4270:67:58"}]},"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"3976:367:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"4023:6:58","nodeType":"YulTypedName","src":"4023:6:58","type":""},{"name":"end","nativeSrc":"4031:3:58","nodeType":"YulTypedName","src":"4031:3:58","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"4039:8:58","nodeType":"YulTypedName","src":"4039:8:58","type":""},{"name":"length","nativeSrc":"4049:6:58","nodeType":"YulTypedName","src":"4049:6:58","type":""}],"src":"3976:367:58"},{"body":{"nativeSrc":"4606:1143:58","nodeType":"YulBlock","src":"4606:1143:58","statements":[{"body":{"nativeSrc":"4653:16:58","nodeType":"YulBlock","src":"4653:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4662:1:58","nodeType":"YulLiteral","src":"4662:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4665:1:58","nodeType":"YulLiteral","src":"4665:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4655:6:58","nodeType":"YulIdentifier","src":"4655:6:58"},"nativeSrc":"4655:12:58","nodeType":"YulFunctionCall","src":"4655:12:58"},"nativeSrc":"4655:12:58","nodeType":"YulExpressionStatement","src":"4655:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4627:7:58","nodeType":"YulIdentifier","src":"4627:7:58"},{"name":"headStart","nativeSrc":"4636:9:58","nodeType":"YulIdentifier","src":"4636:9:58"}],"functionName":{"name":"sub","nativeSrc":"4623:3:58","nodeType":"YulIdentifier","src":"4623:3:58"},"nativeSrc":"4623:23:58","nodeType":"YulFunctionCall","src":"4623:23:58"},{"kind":"number","nativeSrc":"4648:3:58","nodeType":"YulLiteral","src":"4648:3:58","type":"","value":"128"}],"functionName":{"name":"slt","nativeSrc":"4619:3:58","nodeType":"YulIdentifier","src":"4619:3:58"},"nativeSrc":"4619:33:58","nodeType":"YulFunctionCall","src":"4619:33:58"},"nativeSrc":"4616:53:58","nodeType":"YulIf","src":"4616:53:58"},{"nativeSrc":"4678:37:58","nodeType":"YulVariableDeclaration","src":"4678:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"4705:9:58","nodeType":"YulIdentifier","src":"4705:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"4692:12:58","nodeType":"YulIdentifier","src":"4692:12:58"},"nativeSrc":"4692:23:58","nodeType":"YulFunctionCall","src":"4692:23:58"},"variables":[{"name":"offset","nativeSrc":"4682:6:58","nodeType":"YulTypedName","src":"4682:6:58","type":""}]},{"nativeSrc":"4724:28:58","nodeType":"YulVariableDeclaration","src":"4724:28:58","value":{"kind":"number","nativeSrc":"4734:18:58","nodeType":"YulLiteral","src":"4734:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"4728:2:58","nodeType":"YulTypedName","src":"4728:2:58","type":""}]},{"body":{"nativeSrc":"4779:16:58","nodeType":"YulBlock","src":"4779:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4788:1:58","nodeType":"YulLiteral","src":"4788:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"4791:1:58","nodeType":"YulLiteral","src":"4791:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4781:6:58","nodeType":"YulIdentifier","src":"4781:6:58"},"nativeSrc":"4781:12:58","nodeType":"YulFunctionCall","src":"4781:12:58"},"nativeSrc":"4781:12:58","nodeType":"YulExpressionStatement","src":"4781:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"4767:6:58","nodeType":"YulIdentifier","src":"4767:6:58"},{"name":"_1","nativeSrc":"4775:2:58","nodeType":"YulIdentifier","src":"4775:2:58"}],"functionName":{"name":"gt","nativeSrc":"4764:2:58","nodeType":"YulIdentifier","src":"4764:2:58"},"nativeSrc":"4764:14:58","nodeType":"YulFunctionCall","src":"4764:14:58"},"nativeSrc":"4761:34:58","nodeType":"YulIf","src":"4761:34:58"},{"nativeSrc":"4804:96:58","nodeType":"YulVariableDeclaration","src":"4804:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4872:9:58","nodeType":"YulIdentifier","src":"4872:9:58"},{"name":"offset","nativeSrc":"4883:6:58","nodeType":"YulIdentifier","src":"4883:6:58"}],"functionName":{"name":"add","nativeSrc":"4868:3:58","nodeType":"YulIdentifier","src":"4868:3:58"},"nativeSrc":"4868:22:58","nodeType":"YulFunctionCall","src":"4868:22:58"},{"name":"dataEnd","nativeSrc":"4892:7:58","nodeType":"YulIdentifier","src":"4892:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"4830:37:58","nodeType":"YulIdentifier","src":"4830:37:58"},"nativeSrc":"4830:70:58","nodeType":"YulFunctionCall","src":"4830:70:58"},"variables":[{"name":"value0_1","nativeSrc":"4808:8:58","nodeType":"YulTypedName","src":"4808:8:58","type":""},{"name":"value1_1","nativeSrc":"4818:8:58","nodeType":"YulTypedName","src":"4818:8:58","type":""}]},{"nativeSrc":"4909:18:58","nodeType":"YulAssignment","src":"4909:18:58","value":{"name":"value0_1","nativeSrc":"4919:8:58","nodeType":"YulIdentifier","src":"4919:8:58"},"variableNames":[{"name":"value0","nativeSrc":"4909:6:58","nodeType":"YulIdentifier","src":"4909:6:58"}]},{"nativeSrc":"4936:18:58","nodeType":"YulAssignment","src":"4936:18:58","value":{"name":"value1_1","nativeSrc":"4946:8:58","nodeType":"YulIdentifier","src":"4946:8:58"},"variableNames":[{"name":"value1","nativeSrc":"4936:6:58","nodeType":"YulIdentifier","src":"4936:6:58"}]},{"nativeSrc":"4963:48:58","nodeType":"YulVariableDeclaration","src":"4963:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4996:9:58","nodeType":"YulIdentifier","src":"4996:9:58"},{"kind":"number","nativeSrc":"5007:2:58","nodeType":"YulLiteral","src":"5007:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4992:3:58","nodeType":"YulIdentifier","src":"4992:3:58"},"nativeSrc":"4992:18:58","nodeType":"YulFunctionCall","src":"4992:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"4979:12:58","nodeType":"YulIdentifier","src":"4979:12:58"},"nativeSrc":"4979:32:58","nodeType":"YulFunctionCall","src":"4979:32:58"},"variables":[{"name":"offset_1","nativeSrc":"4967:8:58","nodeType":"YulTypedName","src":"4967:8:58","type":""}]},{"body":{"nativeSrc":"5040:16:58","nodeType":"YulBlock","src":"5040:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5049:1:58","nodeType":"YulLiteral","src":"5049:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5052:1:58","nodeType":"YulLiteral","src":"5052:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5042:6:58","nodeType":"YulIdentifier","src":"5042:6:58"},"nativeSrc":"5042:12:58","nodeType":"YulFunctionCall","src":"5042:12:58"},"nativeSrc":"5042:12:58","nodeType":"YulExpressionStatement","src":"5042:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"5026:8:58","nodeType":"YulIdentifier","src":"5026:8:58"},{"name":"_1","nativeSrc":"5036:2:58","nodeType":"YulIdentifier","src":"5036:2:58"}],"functionName":{"name":"gt","nativeSrc":"5023:2:58","nodeType":"YulIdentifier","src":"5023:2:58"},"nativeSrc":"5023:16:58","nodeType":"YulFunctionCall","src":"5023:16:58"},"nativeSrc":"5020:36:58","nodeType":"YulIf","src":"5020:36:58"},{"nativeSrc":"5065:98:58","nodeType":"YulVariableDeclaration","src":"5065:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5133:9:58","nodeType":"YulIdentifier","src":"5133:9:58"},{"name":"offset_1","nativeSrc":"5144:8:58","nodeType":"YulIdentifier","src":"5144:8:58"}],"functionName":{"name":"add","nativeSrc":"5129:3:58","nodeType":"YulIdentifier","src":"5129:3:58"},"nativeSrc":"5129:24:58","nodeType":"YulFunctionCall","src":"5129:24:58"},{"name":"dataEnd","nativeSrc":"5155:7:58","nodeType":"YulIdentifier","src":"5155:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5091:37:58","nodeType":"YulIdentifier","src":"5091:37:58"},"nativeSrc":"5091:72:58","nodeType":"YulFunctionCall","src":"5091:72:58"},"variables":[{"name":"value2_1","nativeSrc":"5069:8:58","nodeType":"YulTypedName","src":"5069:8:58","type":""},{"name":"value3_1","nativeSrc":"5079:8:58","nodeType":"YulTypedName","src":"5079:8:58","type":""}]},{"nativeSrc":"5172:18:58","nodeType":"YulAssignment","src":"5172:18:58","value":{"name":"value2_1","nativeSrc":"5182:8:58","nodeType":"YulIdentifier","src":"5182:8:58"},"variableNames":[{"name":"value2","nativeSrc":"5172:6:58","nodeType":"YulIdentifier","src":"5172:6:58"}]},{"nativeSrc":"5199:18:58","nodeType":"YulAssignment","src":"5199:18:58","value":{"name":"value3_1","nativeSrc":"5209:8:58","nodeType":"YulIdentifier","src":"5209:8:58"},"variableNames":[{"name":"value3","nativeSrc":"5199:6:58","nodeType":"YulIdentifier","src":"5199:6:58"}]},{"nativeSrc":"5226:48:58","nodeType":"YulVariableDeclaration","src":"5226:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5259:9:58","nodeType":"YulIdentifier","src":"5259:9:58"},{"kind":"number","nativeSrc":"5270:2:58","nodeType":"YulLiteral","src":"5270:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5255:3:58","nodeType":"YulIdentifier","src":"5255:3:58"},"nativeSrc":"5255:18:58","nodeType":"YulFunctionCall","src":"5255:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"5242:12:58","nodeType":"YulIdentifier","src":"5242:12:58"},"nativeSrc":"5242:32:58","nodeType":"YulFunctionCall","src":"5242:32:58"},"variables":[{"name":"offset_2","nativeSrc":"5230:8:58","nodeType":"YulTypedName","src":"5230:8:58","type":""}]},{"body":{"nativeSrc":"5303:16:58","nodeType":"YulBlock","src":"5303:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5312:1:58","nodeType":"YulLiteral","src":"5312:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5315:1:58","nodeType":"YulLiteral","src":"5315:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5305:6:58","nodeType":"YulIdentifier","src":"5305:6:58"},"nativeSrc":"5305:12:58","nodeType":"YulFunctionCall","src":"5305:12:58"},"nativeSrc":"5305:12:58","nodeType":"YulExpressionStatement","src":"5305:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"5289:8:58","nodeType":"YulIdentifier","src":"5289:8:58"},{"name":"_1","nativeSrc":"5299:2:58","nodeType":"YulIdentifier","src":"5299:2:58"}],"functionName":{"name":"gt","nativeSrc":"5286:2:58","nodeType":"YulIdentifier","src":"5286:2:58"},"nativeSrc":"5286:16:58","nodeType":"YulFunctionCall","src":"5286:16:58"},"nativeSrc":"5283:36:58","nodeType":"YulIf","src":"5283:36:58"},{"nativeSrc":"5328:98:58","nodeType":"YulVariableDeclaration","src":"5328:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5396:9:58","nodeType":"YulIdentifier","src":"5396:9:58"},{"name":"offset_2","nativeSrc":"5407:8:58","nodeType":"YulIdentifier","src":"5407:8:58"}],"functionName":{"name":"add","nativeSrc":"5392:3:58","nodeType":"YulIdentifier","src":"5392:3:58"},"nativeSrc":"5392:24:58","nodeType":"YulFunctionCall","src":"5392:24:58"},{"name":"dataEnd","nativeSrc":"5418:7:58","nodeType":"YulIdentifier","src":"5418:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5354:37:58","nodeType":"YulIdentifier","src":"5354:37:58"},"nativeSrc":"5354:72:58","nodeType":"YulFunctionCall","src":"5354:72:58"},"variables":[{"name":"value4_1","nativeSrc":"5332:8:58","nodeType":"YulTypedName","src":"5332:8:58","type":""},{"name":"value5_1","nativeSrc":"5342:8:58","nodeType":"YulTypedName","src":"5342:8:58","type":""}]},{"nativeSrc":"5435:18:58","nodeType":"YulAssignment","src":"5435:18:58","value":{"name":"value4_1","nativeSrc":"5445:8:58","nodeType":"YulIdentifier","src":"5445:8:58"},"variableNames":[{"name":"value4","nativeSrc":"5435:6:58","nodeType":"YulIdentifier","src":"5435:6:58"}]},{"nativeSrc":"5462:18:58","nodeType":"YulAssignment","src":"5462:18:58","value":{"name":"value5_1","nativeSrc":"5472:8:58","nodeType":"YulIdentifier","src":"5472:8:58"},"variableNames":[{"name":"value5","nativeSrc":"5462:6:58","nodeType":"YulIdentifier","src":"5462:6:58"}]},{"nativeSrc":"5489:48:58","nodeType":"YulVariableDeclaration","src":"5489:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5522:9:58","nodeType":"YulIdentifier","src":"5522:9:58"},{"kind":"number","nativeSrc":"5533:2:58","nodeType":"YulLiteral","src":"5533:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5518:3:58","nodeType":"YulIdentifier","src":"5518:3:58"},"nativeSrc":"5518:18:58","nodeType":"YulFunctionCall","src":"5518:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"5505:12:58","nodeType":"YulIdentifier","src":"5505:12:58"},"nativeSrc":"5505:32:58","nodeType":"YulFunctionCall","src":"5505:32:58"},"variables":[{"name":"offset_3","nativeSrc":"5493:8:58","nodeType":"YulTypedName","src":"5493:8:58","type":""}]},{"body":{"nativeSrc":"5566:16:58","nodeType":"YulBlock","src":"5566:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5575:1:58","nodeType":"YulLiteral","src":"5575:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5578:1:58","nodeType":"YulLiteral","src":"5578:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5568:6:58","nodeType":"YulIdentifier","src":"5568:6:58"},"nativeSrc":"5568:12:58","nodeType":"YulFunctionCall","src":"5568:12:58"},"nativeSrc":"5568:12:58","nodeType":"YulExpressionStatement","src":"5568:12:58"}]},"condition":{"arguments":[{"name":"offset_3","nativeSrc":"5552:8:58","nodeType":"YulIdentifier","src":"5552:8:58"},{"name":"_1","nativeSrc":"5562:2:58","nodeType":"YulIdentifier","src":"5562:2:58"}],"functionName":{"name":"gt","nativeSrc":"5549:2:58","nodeType":"YulIdentifier","src":"5549:2:58"},"nativeSrc":"5549:16:58","nodeType":"YulFunctionCall","src":"5549:16:58"},"nativeSrc":"5546:36:58","nodeType":"YulIf","src":"5546:36:58"},{"nativeSrc":"5591:98:58","nodeType":"YulVariableDeclaration","src":"5591:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5659:9:58","nodeType":"YulIdentifier","src":"5659:9:58"},{"name":"offset_3","nativeSrc":"5670:8:58","nodeType":"YulIdentifier","src":"5670:8:58"}],"functionName":{"name":"add","nativeSrc":"5655:3:58","nodeType":"YulIdentifier","src":"5655:3:58"},"nativeSrc":"5655:24:58","nodeType":"YulFunctionCall","src":"5655:24:58"},{"name":"dataEnd","nativeSrc":"5681:7:58","nodeType":"YulIdentifier","src":"5681:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"5617:37:58","nodeType":"YulIdentifier","src":"5617:37:58"},"nativeSrc":"5617:72:58","nodeType":"YulFunctionCall","src":"5617:72:58"},"variables":[{"name":"value6_1","nativeSrc":"5595:8:58","nodeType":"YulTypedName","src":"5595:8:58","type":""},{"name":"value7_1","nativeSrc":"5605:8:58","nodeType":"YulTypedName","src":"5605:8:58","type":""}]},{"nativeSrc":"5698:18:58","nodeType":"YulAssignment","src":"5698:18:58","value":{"name":"value6_1","nativeSrc":"5708:8:58","nodeType":"YulIdentifier","src":"5708:8:58"},"variableNames":[{"name":"value6","nativeSrc":"5698:6:58","nodeType":"YulIdentifier","src":"5698:6:58"}]},{"nativeSrc":"5725:18:58","nodeType":"YulAssignment","src":"5725:18:58","value":{"name":"value7_1","nativeSrc":"5735:8:58","nodeType":"YulIdentifier","src":"5735:8:58"},"variableNames":[{"name":"value7","nativeSrc":"5725:6:58","nodeType":"YulIdentifier","src":"5725:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr","nativeSrc":"4348:1401:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4516:9:58","nodeType":"YulTypedName","src":"4516:9:58","type":""},{"name":"dataEnd","nativeSrc":"4527:7:58","nodeType":"YulTypedName","src":"4527:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4539:6:58","nodeType":"YulTypedName","src":"4539:6:58","type":""},{"name":"value1","nativeSrc":"4547:6:58","nodeType":"YulTypedName","src":"4547:6:58","type":""},{"name":"value2","nativeSrc":"4555:6:58","nodeType":"YulTypedName","src":"4555:6:58","type":""},{"name":"value3","nativeSrc":"4563:6:58","nodeType":"YulTypedName","src":"4563:6:58","type":""},{"name":"value4","nativeSrc":"4571:6:58","nodeType":"YulTypedName","src":"4571:6:58","type":""},{"name":"value5","nativeSrc":"4579:6:58","nodeType":"YulTypedName","src":"4579:6:58","type":""},{"name":"value6","nativeSrc":"4587:6:58","nodeType":"YulTypedName","src":"4587:6:58","type":""},{"name":"value7","nativeSrc":"4595:6:58","nodeType":"YulTypedName","src":"4595:6:58","type":""}],"src":"4348:1401:58"},{"body":{"nativeSrc":"5832:177:58","nodeType":"YulBlock","src":"5832:177:58","statements":[{"body":{"nativeSrc":"5878:16:58","nodeType":"YulBlock","src":"5878:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5887:1:58","nodeType":"YulLiteral","src":"5887:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"5890:1:58","nodeType":"YulLiteral","src":"5890:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5880:6:58","nodeType":"YulIdentifier","src":"5880:6:58"},"nativeSrc":"5880:12:58","nodeType":"YulFunctionCall","src":"5880:12:58"},"nativeSrc":"5880:12:58","nodeType":"YulExpressionStatement","src":"5880:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"5853:7:58","nodeType":"YulIdentifier","src":"5853:7:58"},{"name":"headStart","nativeSrc":"5862:9:58","nodeType":"YulIdentifier","src":"5862:9:58"}],"functionName":{"name":"sub","nativeSrc":"5849:3:58","nodeType":"YulIdentifier","src":"5849:3:58"},"nativeSrc":"5849:23:58","nodeType":"YulFunctionCall","src":"5849:23:58"},{"kind":"number","nativeSrc":"5874:2:58","nodeType":"YulLiteral","src":"5874:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"5845:3:58","nodeType":"YulIdentifier","src":"5845:3:58"},"nativeSrc":"5845:32:58","nodeType":"YulFunctionCall","src":"5845:32:58"},"nativeSrc":"5842:52:58","nodeType":"YulIf","src":"5842:52:58"},{"nativeSrc":"5903:36:58","nodeType":"YulVariableDeclaration","src":"5903:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"5929:9:58","nodeType":"YulIdentifier","src":"5929:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"5916:12:58","nodeType":"YulIdentifier","src":"5916:12:58"},"nativeSrc":"5916:23:58","nodeType":"YulFunctionCall","src":"5916:23:58"},"variables":[{"name":"value","nativeSrc":"5907:5:58","nodeType":"YulTypedName","src":"5907:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"5973:5:58","nodeType":"YulIdentifier","src":"5973:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"5948:24:58","nodeType":"YulIdentifier","src":"5948:24:58"},"nativeSrc":"5948:31:58","nodeType":"YulFunctionCall","src":"5948:31:58"},"nativeSrc":"5948:31:58","nodeType":"YulExpressionStatement","src":"5948:31:58"},{"nativeSrc":"5988:15:58","nodeType":"YulAssignment","src":"5988:15:58","value":{"name":"value","nativeSrc":"5998:5:58","nodeType":"YulIdentifier","src":"5998:5:58"},"variableNames":[{"name":"value0","nativeSrc":"5988:6:58","nodeType":"YulIdentifier","src":"5988:6:58"}]}]},"name":"abi_decode_tuple_t_address_payable","nativeSrc":"5754:255:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5798:9:58","nodeType":"YulTypedName","src":"5798:9:58","type":""},{"name":"dataEnd","nativeSrc":"5809:7:58","nodeType":"YulTypedName","src":"5809:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"5821:6:58","nodeType":"YulTypedName","src":"5821:6:58","type":""}],"src":"5754:255:58"},{"body":{"nativeSrc":"6115:76:58","nodeType":"YulBlock","src":"6115:76:58","statements":[{"nativeSrc":"6125:26:58","nodeType":"YulAssignment","src":"6125:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"6137:9:58","nodeType":"YulIdentifier","src":"6137:9:58"},{"kind":"number","nativeSrc":"6148:2:58","nodeType":"YulLiteral","src":"6148:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6133:3:58","nodeType":"YulIdentifier","src":"6133:3:58"},"nativeSrc":"6133:18:58","nodeType":"YulFunctionCall","src":"6133:18:58"},"variableNames":[{"name":"tail","nativeSrc":"6125:4:58","nodeType":"YulIdentifier","src":"6125:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6167:9:58","nodeType":"YulIdentifier","src":"6167:9:58"},{"name":"value0","nativeSrc":"6178:6:58","nodeType":"YulIdentifier","src":"6178:6:58"}],"functionName":{"name":"mstore","nativeSrc":"6160:6:58","nodeType":"YulIdentifier","src":"6160:6:58"},"nativeSrc":"6160:25:58","nodeType":"YulFunctionCall","src":"6160:25:58"},"nativeSrc":"6160:25:58","nodeType":"YulExpressionStatement","src":"6160:25:58"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"6014:177:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6084:9:58","nodeType":"YulTypedName","src":"6084:9:58","type":""},{"name":"value0","nativeSrc":"6095:6:58","nodeType":"YulTypedName","src":"6095:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6106:4:58","nodeType":"YulTypedName","src":"6106:4:58","type":""}],"src":"6014:177:58"},{"body":{"nativeSrc":"6420:879:58","nodeType":"YulBlock","src":"6420:879:58","statements":[{"body":{"nativeSrc":"6466:16:58","nodeType":"YulBlock","src":"6466:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6475:1:58","nodeType":"YulLiteral","src":"6475:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6478:1:58","nodeType":"YulLiteral","src":"6478:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6468:6:58","nodeType":"YulIdentifier","src":"6468:6:58"},"nativeSrc":"6468:12:58","nodeType":"YulFunctionCall","src":"6468:12:58"},"nativeSrc":"6468:12:58","nodeType":"YulExpressionStatement","src":"6468:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"6441:7:58","nodeType":"YulIdentifier","src":"6441:7:58"},{"name":"headStart","nativeSrc":"6450:9:58","nodeType":"YulIdentifier","src":"6450:9:58"}],"functionName":{"name":"sub","nativeSrc":"6437:3:58","nodeType":"YulIdentifier","src":"6437:3:58"},"nativeSrc":"6437:23:58","nodeType":"YulFunctionCall","src":"6437:23:58"},{"kind":"number","nativeSrc":"6462:2:58","nodeType":"YulLiteral","src":"6462:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"6433:3:58","nodeType":"YulIdentifier","src":"6433:3:58"},"nativeSrc":"6433:32:58","nodeType":"YulFunctionCall","src":"6433:32:58"},"nativeSrc":"6430:52:58","nodeType":"YulIf","src":"6430:52:58"},{"nativeSrc":"6491:37:58","nodeType":"YulVariableDeclaration","src":"6491:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"6518:9:58","nodeType":"YulIdentifier","src":"6518:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"6505:12:58","nodeType":"YulIdentifier","src":"6505:12:58"},"nativeSrc":"6505:23:58","nodeType":"YulFunctionCall","src":"6505:23:58"},"variables":[{"name":"offset","nativeSrc":"6495:6:58","nodeType":"YulTypedName","src":"6495:6:58","type":""}]},{"nativeSrc":"6537:28:58","nodeType":"YulVariableDeclaration","src":"6537:28:58","value":{"kind":"number","nativeSrc":"6547:18:58","nodeType":"YulLiteral","src":"6547:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"6541:2:58","nodeType":"YulTypedName","src":"6541:2:58","type":""}]},{"body":{"nativeSrc":"6592:16:58","nodeType":"YulBlock","src":"6592:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6601:1:58","nodeType":"YulLiteral","src":"6601:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6604:1:58","nodeType":"YulLiteral","src":"6604:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6594:6:58","nodeType":"YulIdentifier","src":"6594:6:58"},"nativeSrc":"6594:12:58","nodeType":"YulFunctionCall","src":"6594:12:58"},"nativeSrc":"6594:12:58","nodeType":"YulExpressionStatement","src":"6594:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"6580:6:58","nodeType":"YulIdentifier","src":"6580:6:58"},{"name":"_1","nativeSrc":"6588:2:58","nodeType":"YulIdentifier","src":"6588:2:58"}],"functionName":{"name":"gt","nativeSrc":"6577:2:58","nodeType":"YulIdentifier","src":"6577:2:58"},"nativeSrc":"6577:14:58","nodeType":"YulFunctionCall","src":"6577:14:58"},"nativeSrc":"6574:34:58","nodeType":"YulIf","src":"6574:34:58"},{"nativeSrc":"6617:96:58","nodeType":"YulVariableDeclaration","src":"6617:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6685:9:58","nodeType":"YulIdentifier","src":"6685:9:58"},{"name":"offset","nativeSrc":"6696:6:58","nodeType":"YulIdentifier","src":"6696:6:58"}],"functionName":{"name":"add","nativeSrc":"6681:3:58","nodeType":"YulIdentifier","src":"6681:3:58"},"nativeSrc":"6681:22:58","nodeType":"YulFunctionCall","src":"6681:22:58"},{"name":"dataEnd","nativeSrc":"6705:7:58","nodeType":"YulIdentifier","src":"6705:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"6643:37:58","nodeType":"YulIdentifier","src":"6643:37:58"},"nativeSrc":"6643:70:58","nodeType":"YulFunctionCall","src":"6643:70:58"},"variables":[{"name":"value0_1","nativeSrc":"6621:8:58","nodeType":"YulTypedName","src":"6621:8:58","type":""},{"name":"value1_1","nativeSrc":"6631:8:58","nodeType":"YulTypedName","src":"6631:8:58","type":""}]},{"nativeSrc":"6722:18:58","nodeType":"YulAssignment","src":"6722:18:58","value":{"name":"value0_1","nativeSrc":"6732:8:58","nodeType":"YulIdentifier","src":"6732:8:58"},"variableNames":[{"name":"value0","nativeSrc":"6722:6:58","nodeType":"YulIdentifier","src":"6722:6:58"}]},{"nativeSrc":"6749:18:58","nodeType":"YulAssignment","src":"6749:18:58","value":{"name":"value1_1","nativeSrc":"6759:8:58","nodeType":"YulIdentifier","src":"6759:8:58"},"variableNames":[{"name":"value1","nativeSrc":"6749:6:58","nodeType":"YulIdentifier","src":"6749:6:58"}]},{"nativeSrc":"6776:48:58","nodeType":"YulVariableDeclaration","src":"6776:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6809:9:58","nodeType":"YulIdentifier","src":"6809:9:58"},{"kind":"number","nativeSrc":"6820:2:58","nodeType":"YulLiteral","src":"6820:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6805:3:58","nodeType":"YulIdentifier","src":"6805:3:58"},"nativeSrc":"6805:18:58","nodeType":"YulFunctionCall","src":"6805:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"6792:12:58","nodeType":"YulIdentifier","src":"6792:12:58"},"nativeSrc":"6792:32:58","nodeType":"YulFunctionCall","src":"6792:32:58"},"variables":[{"name":"offset_1","nativeSrc":"6780:8:58","nodeType":"YulTypedName","src":"6780:8:58","type":""}]},{"body":{"nativeSrc":"6853:16:58","nodeType":"YulBlock","src":"6853:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6862:1:58","nodeType":"YulLiteral","src":"6862:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"6865:1:58","nodeType":"YulLiteral","src":"6865:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"6855:6:58","nodeType":"YulIdentifier","src":"6855:6:58"},"nativeSrc":"6855:12:58","nodeType":"YulFunctionCall","src":"6855:12:58"},"nativeSrc":"6855:12:58","nodeType":"YulExpressionStatement","src":"6855:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"6839:8:58","nodeType":"YulIdentifier","src":"6839:8:58"},{"name":"_1","nativeSrc":"6849:2:58","nodeType":"YulIdentifier","src":"6849:2:58"}],"functionName":{"name":"gt","nativeSrc":"6836:2:58","nodeType":"YulIdentifier","src":"6836:2:58"},"nativeSrc":"6836:16:58","nodeType":"YulFunctionCall","src":"6836:16:58"},"nativeSrc":"6833:36:58","nodeType":"YulIf","src":"6833:36:58"},{"nativeSrc":"6878:98:58","nodeType":"YulVariableDeclaration","src":"6878:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6946:9:58","nodeType":"YulIdentifier","src":"6946:9:58"},{"name":"offset_1","nativeSrc":"6957:8:58","nodeType":"YulIdentifier","src":"6957:8:58"}],"functionName":{"name":"add","nativeSrc":"6942:3:58","nodeType":"YulIdentifier","src":"6942:3:58"},"nativeSrc":"6942:24:58","nodeType":"YulFunctionCall","src":"6942:24:58"},{"name":"dataEnd","nativeSrc":"6968:7:58","nodeType":"YulIdentifier","src":"6968:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"6904:37:58","nodeType":"YulIdentifier","src":"6904:37:58"},"nativeSrc":"6904:72:58","nodeType":"YulFunctionCall","src":"6904:72:58"},"variables":[{"name":"value2_1","nativeSrc":"6882:8:58","nodeType":"YulTypedName","src":"6882:8:58","type":""},{"name":"value3_1","nativeSrc":"6892:8:58","nodeType":"YulTypedName","src":"6892:8:58","type":""}]},{"nativeSrc":"6985:18:58","nodeType":"YulAssignment","src":"6985:18:58","value":{"name":"value2_1","nativeSrc":"6995:8:58","nodeType":"YulIdentifier","src":"6995:8:58"},"variableNames":[{"name":"value2","nativeSrc":"6985:6:58","nodeType":"YulIdentifier","src":"6985:6:58"}]},{"nativeSrc":"7012:18:58","nodeType":"YulAssignment","src":"7012:18:58","value":{"name":"value3_1","nativeSrc":"7022:8:58","nodeType":"YulIdentifier","src":"7022:8:58"},"variableNames":[{"name":"value3","nativeSrc":"7012:6:58","nodeType":"YulIdentifier","src":"7012:6:58"}]},{"nativeSrc":"7039:48:58","nodeType":"YulVariableDeclaration","src":"7039:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7072:9:58","nodeType":"YulIdentifier","src":"7072:9:58"},{"kind":"number","nativeSrc":"7083:2:58","nodeType":"YulLiteral","src":"7083:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7068:3:58","nodeType":"YulIdentifier","src":"7068:3:58"},"nativeSrc":"7068:18:58","nodeType":"YulFunctionCall","src":"7068:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"7055:12:58","nodeType":"YulIdentifier","src":"7055:12:58"},"nativeSrc":"7055:32:58","nodeType":"YulFunctionCall","src":"7055:32:58"},"variables":[{"name":"offset_2","nativeSrc":"7043:8:58","nodeType":"YulTypedName","src":"7043:8:58","type":""}]},{"body":{"nativeSrc":"7116:16:58","nodeType":"YulBlock","src":"7116:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7125:1:58","nodeType":"YulLiteral","src":"7125:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7128:1:58","nodeType":"YulLiteral","src":"7128:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7118:6:58","nodeType":"YulIdentifier","src":"7118:6:58"},"nativeSrc":"7118:12:58","nodeType":"YulFunctionCall","src":"7118:12:58"},"nativeSrc":"7118:12:58","nodeType":"YulExpressionStatement","src":"7118:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"7102:8:58","nodeType":"YulIdentifier","src":"7102:8:58"},{"name":"_1","nativeSrc":"7112:2:58","nodeType":"YulIdentifier","src":"7112:2:58"}],"functionName":{"name":"gt","nativeSrc":"7099:2:58","nodeType":"YulIdentifier","src":"7099:2:58"},"nativeSrc":"7099:16:58","nodeType":"YulFunctionCall","src":"7099:16:58"},"nativeSrc":"7096:36:58","nodeType":"YulIf","src":"7096:36:58"},{"nativeSrc":"7141:98:58","nodeType":"YulVariableDeclaration","src":"7141:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7209:9:58","nodeType":"YulIdentifier","src":"7209:9:58"},{"name":"offset_2","nativeSrc":"7220:8:58","nodeType":"YulIdentifier","src":"7220:8:58"}],"functionName":{"name":"add","nativeSrc":"7205:3:58","nodeType":"YulIdentifier","src":"7205:3:58"},"nativeSrc":"7205:24:58","nodeType":"YulFunctionCall","src":"7205:24:58"},{"name":"dataEnd","nativeSrc":"7231:7:58","nodeType":"YulIdentifier","src":"7231:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"7167:37:58","nodeType":"YulIdentifier","src":"7167:37:58"},"nativeSrc":"7167:72:58","nodeType":"YulFunctionCall","src":"7167:72:58"},"variables":[{"name":"value4_1","nativeSrc":"7145:8:58","nodeType":"YulTypedName","src":"7145:8:58","type":""},{"name":"value5_1","nativeSrc":"7155:8:58","nodeType":"YulTypedName","src":"7155:8:58","type":""}]},{"nativeSrc":"7248:18:58","nodeType":"YulAssignment","src":"7248:18:58","value":{"name":"value4_1","nativeSrc":"7258:8:58","nodeType":"YulIdentifier","src":"7258:8:58"},"variableNames":[{"name":"value4","nativeSrc":"7248:6:58","nodeType":"YulIdentifier","src":"7248:6:58"}]},{"nativeSrc":"7275:18:58","nodeType":"YulAssignment","src":"7275:18:58","value":{"name":"value5_1","nativeSrc":"7285:8:58","nodeType":"YulIdentifier","src":"7285:8:58"},"variableNames":[{"name":"value5","nativeSrc":"7275:6:58","nodeType":"YulIdentifier","src":"7275:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"6196:1103:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6346:9:58","nodeType":"YulTypedName","src":"6346:9:58","type":""},{"name":"dataEnd","nativeSrc":"6357:7:58","nodeType":"YulTypedName","src":"6357:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"6369:6:58","nodeType":"YulTypedName","src":"6369:6:58","type":""},{"name":"value1","nativeSrc":"6377:6:58","nodeType":"YulTypedName","src":"6377:6:58","type":""},{"name":"value2","nativeSrc":"6385:6:58","nodeType":"YulTypedName","src":"6385:6:58","type":""},{"name":"value3","nativeSrc":"6393:6:58","nodeType":"YulTypedName","src":"6393:6:58","type":""},{"name":"value4","nativeSrc":"6401:6:58","nodeType":"YulTypedName","src":"6401:6:58","type":""},{"name":"value5","nativeSrc":"6409:6:58","nodeType":"YulTypedName","src":"6409:6:58","type":""}],"src":"6196:1103:58"},{"body":{"nativeSrc":"7421:125:58","nodeType":"YulBlock","src":"7421:125:58","statements":[{"nativeSrc":"7431:26:58","nodeType":"YulAssignment","src":"7431:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"7443:9:58","nodeType":"YulIdentifier","src":"7443:9:58"},{"kind":"number","nativeSrc":"7454:2:58","nodeType":"YulLiteral","src":"7454:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7439:3:58","nodeType":"YulIdentifier","src":"7439:3:58"},"nativeSrc":"7439:18:58","nodeType":"YulFunctionCall","src":"7439:18:58"},"variableNames":[{"name":"tail","nativeSrc":"7431:4:58","nodeType":"YulIdentifier","src":"7431:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7473:9:58","nodeType":"YulIdentifier","src":"7473:9:58"},{"arguments":[{"name":"value0","nativeSrc":"7488:6:58","nodeType":"YulIdentifier","src":"7488:6:58"},{"kind":"number","nativeSrc":"7496:42:58","nodeType":"YulLiteral","src":"7496:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"7484:3:58","nodeType":"YulIdentifier","src":"7484:3:58"},"nativeSrc":"7484:55:58","nodeType":"YulFunctionCall","src":"7484:55:58"}],"functionName":{"name":"mstore","nativeSrc":"7466:6:58","nodeType":"YulIdentifier","src":"7466:6:58"},"nativeSrc":"7466:74:58","nodeType":"YulFunctionCall","src":"7466:74:58"},"nativeSrc":"7466:74:58","nodeType":"YulExpressionStatement","src":"7466:74:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed","nativeSrc":"7304:242:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7390:9:58","nodeType":"YulTypedName","src":"7390:9:58","type":""},{"name":"value0","nativeSrc":"7401:6:58","nodeType":"YulTypedName","src":"7401:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7412:4:58","nodeType":"YulTypedName","src":"7412:4:58","type":""}],"src":"7304:242:58"},{"body":{"nativeSrc":"7621:110:58","nodeType":"YulBlock","src":"7621:110:58","statements":[{"body":{"nativeSrc":"7667:16:58","nodeType":"YulBlock","src":"7667:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7676:1:58","nodeType":"YulLiteral","src":"7676:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7679:1:58","nodeType":"YulLiteral","src":"7679:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7669:6:58","nodeType":"YulIdentifier","src":"7669:6:58"},"nativeSrc":"7669:12:58","nodeType":"YulFunctionCall","src":"7669:12:58"},"nativeSrc":"7669:12:58","nodeType":"YulExpressionStatement","src":"7669:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7642:7:58","nodeType":"YulIdentifier","src":"7642:7:58"},{"name":"headStart","nativeSrc":"7651:9:58","nodeType":"YulIdentifier","src":"7651:9:58"}],"functionName":{"name":"sub","nativeSrc":"7638:3:58","nodeType":"YulIdentifier","src":"7638:3:58"},"nativeSrc":"7638:23:58","nodeType":"YulFunctionCall","src":"7638:23:58"},{"kind":"number","nativeSrc":"7663:2:58","nodeType":"YulLiteral","src":"7663:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"7634:3:58","nodeType":"YulIdentifier","src":"7634:3:58"},"nativeSrc":"7634:32:58","nodeType":"YulFunctionCall","src":"7634:32:58"},"nativeSrc":"7631:52:58","nodeType":"YulIf","src":"7631:52:58"},{"nativeSrc":"7692:33:58","nodeType":"YulAssignment","src":"7692:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"7715:9:58","nodeType":"YulIdentifier","src":"7715:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"7702:12:58","nodeType":"YulIdentifier","src":"7702:12:58"},"nativeSrc":"7702:23:58","nodeType":"YulFunctionCall","src":"7702:23:58"},"variableNames":[{"name":"value0","nativeSrc":"7692:6:58","nodeType":"YulIdentifier","src":"7692:6:58"}]}]},"name":"abi_decode_tuple_t_bytes32","nativeSrc":"7551:180:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7587:9:58","nodeType":"YulTypedName","src":"7587:9:58","type":""},{"name":"dataEnd","nativeSrc":"7598:7:58","nodeType":"YulTypedName","src":"7598:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7610:6:58","nodeType":"YulTypedName","src":"7610:6:58","type":""}],"src":"7551:180:58"},{"body":{"nativeSrc":"7823:228:58","nodeType":"YulBlock","src":"7823:228:58","statements":[{"body":{"nativeSrc":"7869:16:58","nodeType":"YulBlock","src":"7869:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7878:1:58","nodeType":"YulLiteral","src":"7878:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"7881:1:58","nodeType":"YulLiteral","src":"7881:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"7871:6:58","nodeType":"YulIdentifier","src":"7871:6:58"},"nativeSrc":"7871:12:58","nodeType":"YulFunctionCall","src":"7871:12:58"},"nativeSrc":"7871:12:58","nodeType":"YulExpressionStatement","src":"7871:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"7844:7:58","nodeType":"YulIdentifier","src":"7844:7:58"},{"name":"headStart","nativeSrc":"7853:9:58","nodeType":"YulIdentifier","src":"7853:9:58"}],"functionName":{"name":"sub","nativeSrc":"7840:3:58","nodeType":"YulIdentifier","src":"7840:3:58"},"nativeSrc":"7840:23:58","nodeType":"YulFunctionCall","src":"7840:23:58"},{"kind":"number","nativeSrc":"7865:2:58","nodeType":"YulLiteral","src":"7865:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"7836:3:58","nodeType":"YulIdentifier","src":"7836:3:58"},"nativeSrc":"7836:32:58","nodeType":"YulFunctionCall","src":"7836:32:58"},"nativeSrc":"7833:52:58","nodeType":"YulIf","src":"7833:52:58"},{"nativeSrc":"7894:36:58","nodeType":"YulVariableDeclaration","src":"7894:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"7920:9:58","nodeType":"YulIdentifier","src":"7920:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"7907:12:58","nodeType":"YulIdentifier","src":"7907:12:58"},"nativeSrc":"7907:23:58","nodeType":"YulFunctionCall","src":"7907:23:58"},"variables":[{"name":"value","nativeSrc":"7898:5:58","nodeType":"YulTypedName","src":"7898:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"7964:5:58","nodeType":"YulIdentifier","src":"7964:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"7939:24:58","nodeType":"YulIdentifier","src":"7939:24:58"},"nativeSrc":"7939:31:58","nodeType":"YulFunctionCall","src":"7939:31:58"},"nativeSrc":"7939:31:58","nodeType":"YulExpressionStatement","src":"7939:31:58"},{"nativeSrc":"7979:15:58","nodeType":"YulAssignment","src":"7979:15:58","value":{"name":"value","nativeSrc":"7989:5:58","nodeType":"YulIdentifier","src":"7989:5:58"},"variableNames":[{"name":"value0","nativeSrc":"7979:6:58","nodeType":"YulIdentifier","src":"7979:6:58"}]},{"nativeSrc":"8003:42:58","nodeType":"YulAssignment","src":"8003:42:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8030:9:58","nodeType":"YulIdentifier","src":"8030:9:58"},{"kind":"number","nativeSrc":"8041:2:58","nodeType":"YulLiteral","src":"8041:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8026:3:58","nodeType":"YulIdentifier","src":"8026:3:58"},"nativeSrc":"8026:18:58","nodeType":"YulFunctionCall","src":"8026:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"8013:12:58","nodeType":"YulIdentifier","src":"8013:12:58"},"nativeSrc":"8013:32:58","nodeType":"YulFunctionCall","src":"8013:32:58"},"variableNames":[{"name":"value1","nativeSrc":"8003:6:58","nodeType":"YulIdentifier","src":"8003:6:58"}]}]},"name":"abi_decode_tuple_t_addresst_uint256","nativeSrc":"7736:315:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7781:9:58","nodeType":"YulTypedName","src":"7781:9:58","type":""},{"name":"dataEnd","nativeSrc":"7792:7:58","nodeType":"YulTypedName","src":"7792:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"7804:6:58","nodeType":"YulTypedName","src":"7804:6:58","type":""},{"name":"value1","nativeSrc":"7812:6:58","nodeType":"YulTypedName","src":"7812:6:58","type":""}],"src":"7736:315:58"},{"body":{"nativeSrc":"8281:879:58","nodeType":"YulBlock","src":"8281:879:58","statements":[{"body":{"nativeSrc":"8327:16:58","nodeType":"YulBlock","src":"8327:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8336:1:58","nodeType":"YulLiteral","src":"8336:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8339:1:58","nodeType":"YulLiteral","src":"8339:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8329:6:58","nodeType":"YulIdentifier","src":"8329:6:58"},"nativeSrc":"8329:12:58","nodeType":"YulFunctionCall","src":"8329:12:58"},"nativeSrc":"8329:12:58","nodeType":"YulExpressionStatement","src":"8329:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"8302:7:58","nodeType":"YulIdentifier","src":"8302:7:58"},{"name":"headStart","nativeSrc":"8311:9:58","nodeType":"YulIdentifier","src":"8311:9:58"}],"functionName":{"name":"sub","nativeSrc":"8298:3:58","nodeType":"YulIdentifier","src":"8298:3:58"},"nativeSrc":"8298:23:58","nodeType":"YulFunctionCall","src":"8298:23:58"},{"kind":"number","nativeSrc":"8323:2:58","nodeType":"YulLiteral","src":"8323:2:58","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"8294:3:58","nodeType":"YulIdentifier","src":"8294:3:58"},"nativeSrc":"8294:32:58","nodeType":"YulFunctionCall","src":"8294:32:58"},"nativeSrc":"8291:52:58","nodeType":"YulIf","src":"8291:52:58"},{"nativeSrc":"8352:37:58","nodeType":"YulVariableDeclaration","src":"8352:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"8379:9:58","nodeType":"YulIdentifier","src":"8379:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"8366:12:58","nodeType":"YulIdentifier","src":"8366:12:58"},"nativeSrc":"8366:23:58","nodeType":"YulFunctionCall","src":"8366:23:58"},"variables":[{"name":"offset","nativeSrc":"8356:6:58","nodeType":"YulTypedName","src":"8356:6:58","type":""}]},{"nativeSrc":"8398:28:58","nodeType":"YulVariableDeclaration","src":"8398:28:58","value":{"kind":"number","nativeSrc":"8408:18:58","nodeType":"YulLiteral","src":"8408:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"8402:2:58","nodeType":"YulTypedName","src":"8402:2:58","type":""}]},{"body":{"nativeSrc":"8453:16:58","nodeType":"YulBlock","src":"8453:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8462:1:58","nodeType":"YulLiteral","src":"8462:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8465:1:58","nodeType":"YulLiteral","src":"8465:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8455:6:58","nodeType":"YulIdentifier","src":"8455:6:58"},"nativeSrc":"8455:12:58","nodeType":"YulFunctionCall","src":"8455:12:58"},"nativeSrc":"8455:12:58","nodeType":"YulExpressionStatement","src":"8455:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"8441:6:58","nodeType":"YulIdentifier","src":"8441:6:58"},{"name":"_1","nativeSrc":"8449:2:58","nodeType":"YulIdentifier","src":"8449:2:58"}],"functionName":{"name":"gt","nativeSrc":"8438:2:58","nodeType":"YulIdentifier","src":"8438:2:58"},"nativeSrc":"8438:14:58","nodeType":"YulFunctionCall","src":"8438:14:58"},"nativeSrc":"8435:34:58","nodeType":"YulIf","src":"8435:34:58"},{"nativeSrc":"8478:96:58","nodeType":"YulVariableDeclaration","src":"8478:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8546:9:58","nodeType":"YulIdentifier","src":"8546:9:58"},{"name":"offset","nativeSrc":"8557:6:58","nodeType":"YulIdentifier","src":"8557:6:58"}],"functionName":{"name":"add","nativeSrc":"8542:3:58","nodeType":"YulIdentifier","src":"8542:3:58"},"nativeSrc":"8542:22:58","nodeType":"YulFunctionCall","src":"8542:22:58"},{"name":"dataEnd","nativeSrc":"8566:7:58","nodeType":"YulIdentifier","src":"8566:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8504:37:58","nodeType":"YulIdentifier","src":"8504:37:58"},"nativeSrc":"8504:70:58","nodeType":"YulFunctionCall","src":"8504:70:58"},"variables":[{"name":"value0_1","nativeSrc":"8482:8:58","nodeType":"YulTypedName","src":"8482:8:58","type":""},{"name":"value1_1","nativeSrc":"8492:8:58","nodeType":"YulTypedName","src":"8492:8:58","type":""}]},{"nativeSrc":"8583:18:58","nodeType":"YulAssignment","src":"8583:18:58","value":{"name":"value0_1","nativeSrc":"8593:8:58","nodeType":"YulIdentifier","src":"8593:8:58"},"variableNames":[{"name":"value0","nativeSrc":"8583:6:58","nodeType":"YulIdentifier","src":"8583:6:58"}]},{"nativeSrc":"8610:18:58","nodeType":"YulAssignment","src":"8610:18:58","value":{"name":"value1_1","nativeSrc":"8620:8:58","nodeType":"YulIdentifier","src":"8620:8:58"},"variableNames":[{"name":"value1","nativeSrc":"8610:6:58","nodeType":"YulIdentifier","src":"8610:6:58"}]},{"nativeSrc":"8637:48:58","nodeType":"YulVariableDeclaration","src":"8637:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8670:9:58","nodeType":"YulIdentifier","src":"8670:9:58"},{"kind":"number","nativeSrc":"8681:2:58","nodeType":"YulLiteral","src":"8681:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"8666:3:58","nodeType":"YulIdentifier","src":"8666:3:58"},"nativeSrc":"8666:18:58","nodeType":"YulFunctionCall","src":"8666:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"8653:12:58","nodeType":"YulIdentifier","src":"8653:12:58"},"nativeSrc":"8653:32:58","nodeType":"YulFunctionCall","src":"8653:32:58"},"variables":[{"name":"offset_1","nativeSrc":"8641:8:58","nodeType":"YulTypedName","src":"8641:8:58","type":""}]},{"body":{"nativeSrc":"8714:16:58","nodeType":"YulBlock","src":"8714:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8723:1:58","nodeType":"YulLiteral","src":"8723:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8726:1:58","nodeType":"YulLiteral","src":"8726:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8716:6:58","nodeType":"YulIdentifier","src":"8716:6:58"},"nativeSrc":"8716:12:58","nodeType":"YulFunctionCall","src":"8716:12:58"},"nativeSrc":"8716:12:58","nodeType":"YulExpressionStatement","src":"8716:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"8700:8:58","nodeType":"YulIdentifier","src":"8700:8:58"},{"name":"_1","nativeSrc":"8710:2:58","nodeType":"YulIdentifier","src":"8710:2:58"}],"functionName":{"name":"gt","nativeSrc":"8697:2:58","nodeType":"YulIdentifier","src":"8697:2:58"},"nativeSrc":"8697:16:58","nodeType":"YulFunctionCall","src":"8697:16:58"},"nativeSrc":"8694:36:58","nodeType":"YulIf","src":"8694:36:58"},{"nativeSrc":"8739:98:58","nodeType":"YulVariableDeclaration","src":"8739:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8807:9:58","nodeType":"YulIdentifier","src":"8807:9:58"},{"name":"offset_1","nativeSrc":"8818:8:58","nodeType":"YulIdentifier","src":"8818:8:58"}],"functionName":{"name":"add","nativeSrc":"8803:3:58","nodeType":"YulIdentifier","src":"8803:3:58"},"nativeSrc":"8803:24:58","nodeType":"YulFunctionCall","src":"8803:24:58"},{"name":"dataEnd","nativeSrc":"8829:7:58","nodeType":"YulIdentifier","src":"8829:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"8765:37:58","nodeType":"YulIdentifier","src":"8765:37:58"},"nativeSrc":"8765:72:58","nodeType":"YulFunctionCall","src":"8765:72:58"},"variables":[{"name":"value2_1","nativeSrc":"8743:8:58","nodeType":"YulTypedName","src":"8743:8:58","type":""},{"name":"value3_1","nativeSrc":"8753:8:58","nodeType":"YulTypedName","src":"8753:8:58","type":""}]},{"nativeSrc":"8846:18:58","nodeType":"YulAssignment","src":"8846:18:58","value":{"name":"value2_1","nativeSrc":"8856:8:58","nodeType":"YulIdentifier","src":"8856:8:58"},"variableNames":[{"name":"value2","nativeSrc":"8846:6:58","nodeType":"YulIdentifier","src":"8846:6:58"}]},{"nativeSrc":"8873:18:58","nodeType":"YulAssignment","src":"8873:18:58","value":{"name":"value3_1","nativeSrc":"8883:8:58","nodeType":"YulIdentifier","src":"8883:8:58"},"variableNames":[{"name":"value3","nativeSrc":"8873:6:58","nodeType":"YulIdentifier","src":"8873:6:58"}]},{"nativeSrc":"8900:48:58","nodeType":"YulVariableDeclaration","src":"8900:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8933:9:58","nodeType":"YulIdentifier","src":"8933:9:58"},{"kind":"number","nativeSrc":"8944:2:58","nodeType":"YulLiteral","src":"8944:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8929:3:58","nodeType":"YulIdentifier","src":"8929:3:58"},"nativeSrc":"8929:18:58","nodeType":"YulFunctionCall","src":"8929:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"8916:12:58","nodeType":"YulIdentifier","src":"8916:12:58"},"nativeSrc":"8916:32:58","nodeType":"YulFunctionCall","src":"8916:32:58"},"variables":[{"name":"offset_2","nativeSrc":"8904:8:58","nodeType":"YulTypedName","src":"8904:8:58","type":""}]},{"body":{"nativeSrc":"8977:16:58","nodeType":"YulBlock","src":"8977:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"8986:1:58","nodeType":"YulLiteral","src":"8986:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"8989:1:58","nodeType":"YulLiteral","src":"8989:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"8979:6:58","nodeType":"YulIdentifier","src":"8979:6:58"},"nativeSrc":"8979:12:58","nodeType":"YulFunctionCall","src":"8979:12:58"},"nativeSrc":"8979:12:58","nodeType":"YulExpressionStatement","src":"8979:12:58"}]},"condition":{"arguments":[{"name":"offset_2","nativeSrc":"8963:8:58","nodeType":"YulIdentifier","src":"8963:8:58"},{"name":"_1","nativeSrc":"8973:2:58","nodeType":"YulIdentifier","src":"8973:2:58"}],"functionName":{"name":"gt","nativeSrc":"8960:2:58","nodeType":"YulIdentifier","src":"8960:2:58"},"nativeSrc":"8960:16:58","nodeType":"YulFunctionCall","src":"8960:16:58"},"nativeSrc":"8957:36:58","nodeType":"YulIf","src":"8957:36:58"},{"nativeSrc":"9002:98:58","nodeType":"YulVariableDeclaration","src":"9002:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9070:9:58","nodeType":"YulIdentifier","src":"9070:9:58"},{"name":"offset_2","nativeSrc":"9081:8:58","nodeType":"YulIdentifier","src":"9081:8:58"}],"functionName":{"name":"add","nativeSrc":"9066:3:58","nodeType":"YulIdentifier","src":"9066:3:58"},"nativeSrc":"9066:24:58","nodeType":"YulFunctionCall","src":"9066:24:58"},{"name":"dataEnd","nativeSrc":"9092:7:58","nodeType":"YulIdentifier","src":"9092:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"9028:37:58","nodeType":"YulIdentifier","src":"9028:37:58"},"nativeSrc":"9028:72:58","nodeType":"YulFunctionCall","src":"9028:72:58"},"variables":[{"name":"value4_1","nativeSrc":"9006:8:58","nodeType":"YulTypedName","src":"9006:8:58","type":""},{"name":"value5_1","nativeSrc":"9016:8:58","nodeType":"YulTypedName","src":"9016:8:58","type":""}]},{"nativeSrc":"9109:18:58","nodeType":"YulAssignment","src":"9109:18:58","value":{"name":"value4_1","nativeSrc":"9119:8:58","nodeType":"YulIdentifier","src":"9119:8:58"},"variableNames":[{"name":"value4","nativeSrc":"9109:6:58","nodeType":"YulIdentifier","src":"9109:6:58"}]},{"nativeSrc":"9136:18:58","nodeType":"YulAssignment","src":"9136:18:58","value":{"name":"value5_1","nativeSrc":"9146:8:58","nodeType":"YulIdentifier","src":"9146:8:58"},"variableNames":[{"name":"value5","nativeSrc":"9136:6:58","nodeType":"YulIdentifier","src":"9136:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"8056:1104:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"8207:9:58","nodeType":"YulTypedName","src":"8207:9:58","type":""},{"name":"dataEnd","nativeSrc":"8218:7:58","nodeType":"YulTypedName","src":"8218:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"8230:6:58","nodeType":"YulTypedName","src":"8230:6:58","type":""},{"name":"value1","nativeSrc":"8238:6:58","nodeType":"YulTypedName","src":"8238:6:58","type":""},{"name":"value2","nativeSrc":"8246:6:58","nodeType":"YulTypedName","src":"8246:6:58","type":""},{"name":"value3","nativeSrc":"8254:6:58","nodeType":"YulTypedName","src":"8254:6:58","type":""},{"name":"value4","nativeSrc":"8262:6:58","nodeType":"YulTypedName","src":"8262:6:58","type":""},{"name":"value5","nativeSrc":"8270:6:58","nodeType":"YulTypedName","src":"8270:6:58","type":""}],"src":"8056:1104:58"},{"body":{"nativeSrc":"9330:616:58","nodeType":"YulBlock","src":"9330:616:58","statements":[{"body":{"nativeSrc":"9376:16:58","nodeType":"YulBlock","src":"9376:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9385:1:58","nodeType":"YulLiteral","src":"9385:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9388:1:58","nodeType":"YulLiteral","src":"9388:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9378:6:58","nodeType":"YulIdentifier","src":"9378:6:58"},"nativeSrc":"9378:12:58","nodeType":"YulFunctionCall","src":"9378:12:58"},"nativeSrc":"9378:12:58","nodeType":"YulExpressionStatement","src":"9378:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"9351:7:58","nodeType":"YulIdentifier","src":"9351:7:58"},{"name":"headStart","nativeSrc":"9360:9:58","nodeType":"YulIdentifier","src":"9360:9:58"}],"functionName":{"name":"sub","nativeSrc":"9347:3:58","nodeType":"YulIdentifier","src":"9347:3:58"},"nativeSrc":"9347:23:58","nodeType":"YulFunctionCall","src":"9347:23:58"},{"kind":"number","nativeSrc":"9372:2:58","nodeType":"YulLiteral","src":"9372:2:58","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"9343:3:58","nodeType":"YulIdentifier","src":"9343:3:58"},"nativeSrc":"9343:32:58","nodeType":"YulFunctionCall","src":"9343:32:58"},"nativeSrc":"9340:52:58","nodeType":"YulIf","src":"9340:52:58"},{"nativeSrc":"9401:37:58","nodeType":"YulVariableDeclaration","src":"9401:37:58","value":{"arguments":[{"name":"headStart","nativeSrc":"9428:9:58","nodeType":"YulIdentifier","src":"9428:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"9415:12:58","nodeType":"YulIdentifier","src":"9415:12:58"},"nativeSrc":"9415:23:58","nodeType":"YulFunctionCall","src":"9415:23:58"},"variables":[{"name":"offset","nativeSrc":"9405:6:58","nodeType":"YulTypedName","src":"9405:6:58","type":""}]},{"nativeSrc":"9447:28:58","nodeType":"YulVariableDeclaration","src":"9447:28:58","value":{"kind":"number","nativeSrc":"9457:18:58","nodeType":"YulLiteral","src":"9457:18:58","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"9451:2:58","nodeType":"YulTypedName","src":"9451:2:58","type":""}]},{"body":{"nativeSrc":"9502:16:58","nodeType":"YulBlock","src":"9502:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9511:1:58","nodeType":"YulLiteral","src":"9511:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9514:1:58","nodeType":"YulLiteral","src":"9514:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9504:6:58","nodeType":"YulIdentifier","src":"9504:6:58"},"nativeSrc":"9504:12:58","nodeType":"YulFunctionCall","src":"9504:12:58"},"nativeSrc":"9504:12:58","nodeType":"YulExpressionStatement","src":"9504:12:58"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"9490:6:58","nodeType":"YulIdentifier","src":"9490:6:58"},{"name":"_1","nativeSrc":"9498:2:58","nodeType":"YulIdentifier","src":"9498:2:58"}],"functionName":{"name":"gt","nativeSrc":"9487:2:58","nodeType":"YulIdentifier","src":"9487:2:58"},"nativeSrc":"9487:14:58","nodeType":"YulFunctionCall","src":"9487:14:58"},"nativeSrc":"9484:34:58","nodeType":"YulIf","src":"9484:34:58"},{"nativeSrc":"9527:96:58","nodeType":"YulVariableDeclaration","src":"9527:96:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9595:9:58","nodeType":"YulIdentifier","src":"9595:9:58"},{"name":"offset","nativeSrc":"9606:6:58","nodeType":"YulIdentifier","src":"9606:6:58"}],"functionName":{"name":"add","nativeSrc":"9591:3:58","nodeType":"YulIdentifier","src":"9591:3:58"},"nativeSrc":"9591:22:58","nodeType":"YulFunctionCall","src":"9591:22:58"},{"name":"dataEnd","nativeSrc":"9615:7:58","nodeType":"YulIdentifier","src":"9615:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"9553:37:58","nodeType":"YulIdentifier","src":"9553:37:58"},"nativeSrc":"9553:70:58","nodeType":"YulFunctionCall","src":"9553:70:58"},"variables":[{"name":"value0_1","nativeSrc":"9531:8:58","nodeType":"YulTypedName","src":"9531:8:58","type":""},{"name":"value1_1","nativeSrc":"9541:8:58","nodeType":"YulTypedName","src":"9541:8:58","type":""}]},{"nativeSrc":"9632:18:58","nodeType":"YulAssignment","src":"9632:18:58","value":{"name":"value0_1","nativeSrc":"9642:8:58","nodeType":"YulIdentifier","src":"9642:8:58"},"variableNames":[{"name":"value0","nativeSrc":"9632:6:58","nodeType":"YulIdentifier","src":"9632:6:58"}]},{"nativeSrc":"9659:18:58","nodeType":"YulAssignment","src":"9659:18:58","value":{"name":"value1_1","nativeSrc":"9669:8:58","nodeType":"YulIdentifier","src":"9669:8:58"},"variableNames":[{"name":"value1","nativeSrc":"9659:6:58","nodeType":"YulIdentifier","src":"9659:6:58"}]},{"nativeSrc":"9686:48:58","nodeType":"YulVariableDeclaration","src":"9686:48:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9719:9:58","nodeType":"YulIdentifier","src":"9719:9:58"},{"kind":"number","nativeSrc":"9730:2:58","nodeType":"YulLiteral","src":"9730:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"9715:3:58","nodeType":"YulIdentifier","src":"9715:3:58"},"nativeSrc":"9715:18:58","nodeType":"YulFunctionCall","src":"9715:18:58"}],"functionName":{"name":"calldataload","nativeSrc":"9702:12:58","nodeType":"YulIdentifier","src":"9702:12:58"},"nativeSrc":"9702:32:58","nodeType":"YulFunctionCall","src":"9702:32:58"},"variables":[{"name":"offset_1","nativeSrc":"9690:8:58","nodeType":"YulTypedName","src":"9690:8:58","type":""}]},{"body":{"nativeSrc":"9763:16:58","nodeType":"YulBlock","src":"9763:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"9772:1:58","nodeType":"YulLiteral","src":"9772:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"9775:1:58","nodeType":"YulLiteral","src":"9775:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"9765:6:58","nodeType":"YulIdentifier","src":"9765:6:58"},"nativeSrc":"9765:12:58","nodeType":"YulFunctionCall","src":"9765:12:58"},"nativeSrc":"9765:12:58","nodeType":"YulExpressionStatement","src":"9765:12:58"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"9749:8:58","nodeType":"YulIdentifier","src":"9749:8:58"},{"name":"_1","nativeSrc":"9759:2:58","nodeType":"YulIdentifier","src":"9759:2:58"}],"functionName":{"name":"gt","nativeSrc":"9746:2:58","nodeType":"YulIdentifier","src":"9746:2:58"},"nativeSrc":"9746:16:58","nodeType":"YulFunctionCall","src":"9746:16:58"},"nativeSrc":"9743:36:58","nodeType":"YulIf","src":"9743:36:58"},{"nativeSrc":"9788:98:58","nodeType":"YulVariableDeclaration","src":"9788:98:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"9856:9:58","nodeType":"YulIdentifier","src":"9856:9:58"},{"name":"offset_1","nativeSrc":"9867:8:58","nodeType":"YulIdentifier","src":"9867:8:58"}],"functionName":{"name":"add","nativeSrc":"9852:3:58","nodeType":"YulIdentifier","src":"9852:3:58"},"nativeSrc":"9852:24:58","nodeType":"YulFunctionCall","src":"9852:24:58"},{"name":"dataEnd","nativeSrc":"9878:7:58","nodeType":"YulIdentifier","src":"9878:7:58"}],"functionName":{"name":"abi_decode_array_address_dyn_calldata","nativeSrc":"9814:37:58","nodeType":"YulIdentifier","src":"9814:37:58"},"nativeSrc":"9814:72:58","nodeType":"YulFunctionCall","src":"9814:72:58"},"variables":[{"name":"value2_1","nativeSrc":"9792:8:58","nodeType":"YulTypedName","src":"9792:8:58","type":""},{"name":"value3_1","nativeSrc":"9802:8:58","nodeType":"YulTypedName","src":"9802:8:58","type":""}]},{"nativeSrc":"9895:18:58","nodeType":"YulAssignment","src":"9895:18:58","value":{"name":"value2_1","nativeSrc":"9905:8:58","nodeType":"YulIdentifier","src":"9905:8:58"},"variableNames":[{"name":"value2","nativeSrc":"9895:6:58","nodeType":"YulIdentifier","src":"9895:6:58"}]},{"nativeSrc":"9922:18:58","nodeType":"YulAssignment","src":"9922:18:58","value":{"name":"value3_1","nativeSrc":"9932:8:58","nodeType":"YulIdentifier","src":"9932:8:58"},"variableNames":[{"name":"value3","nativeSrc":"9922:6:58","nodeType":"YulIdentifier","src":"9922:6:58"}]}]},"name":"abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr","nativeSrc":"9165:781:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"9272:9:58","nodeType":"YulTypedName","src":"9272:9:58","type":""},{"name":"dataEnd","nativeSrc":"9283:7:58","nodeType":"YulTypedName","src":"9283:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"9295:6:58","nodeType":"YulTypedName","src":"9295:6:58","type":""},{"name":"value1","nativeSrc":"9303:6:58","nodeType":"YulTypedName","src":"9303:6:58","type":""},{"name":"value2","nativeSrc":"9311:6:58","nodeType":"YulTypedName","src":"9311:6:58","type":""},{"name":"value3","nativeSrc":"9319:6:58","nodeType":"YulTypedName","src":"9319:6:58","type":""}],"src":"9165:781:58"},{"body":{"nativeSrc":"10080:119:58","nodeType":"YulBlock","src":"10080:119:58","statements":[{"nativeSrc":"10090:26:58","nodeType":"YulAssignment","src":"10090:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"10102:9:58","nodeType":"YulIdentifier","src":"10102:9:58"},{"kind":"number","nativeSrc":"10113:2:58","nodeType":"YulLiteral","src":"10113:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10098:3:58","nodeType":"YulIdentifier","src":"10098:3:58"},"nativeSrc":"10098:18:58","nodeType":"YulFunctionCall","src":"10098:18:58"},"variableNames":[{"name":"tail","nativeSrc":"10090:4:58","nodeType":"YulIdentifier","src":"10090:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10132:9:58","nodeType":"YulIdentifier","src":"10132:9:58"},{"name":"value0","nativeSrc":"10143:6:58","nodeType":"YulIdentifier","src":"10143:6:58"}],"functionName":{"name":"mstore","nativeSrc":"10125:6:58","nodeType":"YulIdentifier","src":"10125:6:58"},"nativeSrc":"10125:25:58","nodeType":"YulFunctionCall","src":"10125:25:58"},"nativeSrc":"10125:25:58","nodeType":"YulExpressionStatement","src":"10125:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10170:9:58","nodeType":"YulIdentifier","src":"10170:9:58"},{"kind":"number","nativeSrc":"10181:2:58","nodeType":"YulLiteral","src":"10181:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10166:3:58","nodeType":"YulIdentifier","src":"10166:3:58"},"nativeSrc":"10166:18:58","nodeType":"YulFunctionCall","src":"10166:18:58"},{"name":"value1","nativeSrc":"10186:6:58","nodeType":"YulIdentifier","src":"10186:6:58"}],"functionName":{"name":"mstore","nativeSrc":"10159:6:58","nodeType":"YulIdentifier","src":"10159:6:58"},"nativeSrc":"10159:34:58","nodeType":"YulFunctionCall","src":"10159:34:58"},"nativeSrc":"10159:34:58","nodeType":"YulExpressionStatement","src":"10159:34:58"}]},"name":"abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"9951:248:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10041:9:58","nodeType":"YulTypedName","src":"10041:9:58","type":""},{"name":"value1","nativeSrc":"10052:6:58","nodeType":"YulTypedName","src":"10052:6:58","type":""},{"name":"value0","nativeSrc":"10060:6:58","nodeType":"YulTypedName","src":"10060:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10071:4:58","nodeType":"YulTypedName","src":"10071:4:58","type":""}],"src":"9951:248:58"},{"body":{"nativeSrc":"10361:241:58","nodeType":"YulBlock","src":"10361:241:58","statements":[{"nativeSrc":"10371:26:58","nodeType":"YulAssignment","src":"10371:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"10383:9:58","nodeType":"YulIdentifier","src":"10383:9:58"},{"kind":"number","nativeSrc":"10394:2:58","nodeType":"YulLiteral","src":"10394:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"10379:3:58","nodeType":"YulIdentifier","src":"10379:3:58"},"nativeSrc":"10379:18:58","nodeType":"YulFunctionCall","src":"10379:18:58"},"variableNames":[{"name":"tail","nativeSrc":"10371:4:58","nodeType":"YulIdentifier","src":"10371:4:58"}]},{"nativeSrc":"10406:52:58","nodeType":"YulVariableDeclaration","src":"10406:52:58","value":{"kind":"number","nativeSrc":"10416:42:58","nodeType":"YulLiteral","src":"10416:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"10410:2:58","nodeType":"YulTypedName","src":"10410:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"10474:9:58","nodeType":"YulIdentifier","src":"10474:9:58"},{"arguments":[{"name":"value0","nativeSrc":"10489:6:58","nodeType":"YulIdentifier","src":"10489:6:58"},{"name":"_1","nativeSrc":"10497:2:58","nodeType":"YulIdentifier","src":"10497:2:58"}],"functionName":{"name":"and","nativeSrc":"10485:3:58","nodeType":"YulIdentifier","src":"10485:3:58"},"nativeSrc":"10485:15:58","nodeType":"YulFunctionCall","src":"10485:15:58"}],"functionName":{"name":"mstore","nativeSrc":"10467:6:58","nodeType":"YulIdentifier","src":"10467:6:58"},"nativeSrc":"10467:34:58","nodeType":"YulFunctionCall","src":"10467:34:58"},"nativeSrc":"10467:34:58","nodeType":"YulExpressionStatement","src":"10467:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10521:9:58","nodeType":"YulIdentifier","src":"10521:9:58"},{"kind":"number","nativeSrc":"10532:2:58","nodeType":"YulLiteral","src":"10532:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"10517:3:58","nodeType":"YulIdentifier","src":"10517:3:58"},"nativeSrc":"10517:18:58","nodeType":"YulFunctionCall","src":"10517:18:58"},{"arguments":[{"name":"value1","nativeSrc":"10541:6:58","nodeType":"YulIdentifier","src":"10541:6:58"},{"name":"_1","nativeSrc":"10549:2:58","nodeType":"YulIdentifier","src":"10549:2:58"}],"functionName":{"name":"and","nativeSrc":"10537:3:58","nodeType":"YulIdentifier","src":"10537:3:58"},"nativeSrc":"10537:15:58","nodeType":"YulFunctionCall","src":"10537:15:58"}],"functionName":{"name":"mstore","nativeSrc":"10510:6:58","nodeType":"YulIdentifier","src":"10510:6:58"},"nativeSrc":"10510:43:58","nodeType":"YulFunctionCall","src":"10510:43:58"},"nativeSrc":"10510:43:58","nodeType":"YulExpressionStatement","src":"10510:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"10573:9:58","nodeType":"YulIdentifier","src":"10573:9:58"},{"kind":"number","nativeSrc":"10584:2:58","nodeType":"YulLiteral","src":"10584:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"10569:3:58","nodeType":"YulIdentifier","src":"10569:3:58"},"nativeSrc":"10569:18:58","nodeType":"YulFunctionCall","src":"10569:18:58"},{"name":"value2","nativeSrc":"10589:6:58","nodeType":"YulIdentifier","src":"10589:6:58"}],"functionName":{"name":"mstore","nativeSrc":"10562:6:58","nodeType":"YulIdentifier","src":"10562:6:58"},"nativeSrc":"10562:34:58","nodeType":"YulFunctionCall","src":"10562:34:58"},"nativeSrc":"10562:34:58","nodeType":"YulExpressionStatement","src":"10562:34:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed","nativeSrc":"10204:398:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10314:9:58","nodeType":"YulTypedName","src":"10314:9:58","type":""},{"name":"value2","nativeSrc":"10325:6:58","nodeType":"YulTypedName","src":"10325:6:58","type":""},{"name":"value1","nativeSrc":"10333:6:58","nodeType":"YulTypedName","src":"10333:6:58","type":""},{"name":"value0","nativeSrc":"10341:6:58","nodeType":"YulTypedName","src":"10341:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"10352:4:58","nodeType":"YulTypedName","src":"10352:4:58","type":""}],"src":"10204:398:58"},{"body":{"nativeSrc":"10649:76:58","nodeType":"YulBlock","src":"10649:76:58","statements":[{"body":{"nativeSrc":"10703:16:58","nodeType":"YulBlock","src":"10703:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10712:1:58","nodeType":"YulLiteral","src":"10712:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"10715:1:58","nodeType":"YulLiteral","src":"10715:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10705:6:58","nodeType":"YulIdentifier","src":"10705:6:58"},"nativeSrc":"10705:12:58","nodeType":"YulFunctionCall","src":"10705:12:58"},"nativeSrc":"10705:12:58","nodeType":"YulExpressionStatement","src":"10705:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10672:5:58","nodeType":"YulIdentifier","src":"10672:5:58"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"10693:5:58","nodeType":"YulIdentifier","src":"10693:5:58"}],"functionName":{"name":"iszero","nativeSrc":"10686:6:58","nodeType":"YulIdentifier","src":"10686:6:58"},"nativeSrc":"10686:13:58","nodeType":"YulFunctionCall","src":"10686:13:58"}],"functionName":{"name":"iszero","nativeSrc":"10679:6:58","nodeType":"YulIdentifier","src":"10679:6:58"},"nativeSrc":"10679:21:58","nodeType":"YulFunctionCall","src":"10679:21:58"}],"functionName":{"name":"eq","nativeSrc":"10669:2:58","nodeType":"YulIdentifier","src":"10669:2:58"},"nativeSrc":"10669:32:58","nodeType":"YulFunctionCall","src":"10669:32:58"}],"functionName":{"name":"iszero","nativeSrc":"10662:6:58","nodeType":"YulIdentifier","src":"10662:6:58"},"nativeSrc":"10662:40:58","nodeType":"YulFunctionCall","src":"10662:40:58"},"nativeSrc":"10659:60:58","nodeType":"YulIf","src":"10659:60:58"}]},"name":"validator_revert_bool","nativeSrc":"10607:118:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"10638:5:58","nodeType":"YulTypedName","src":"10638:5:58","type":""}],"src":"10607:118:58"},{"body":{"nativeSrc":"10808:167:58","nodeType":"YulBlock","src":"10808:167:58","statements":[{"body":{"nativeSrc":"10854:16:58","nodeType":"YulBlock","src":"10854:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"10863:1:58","nodeType":"YulLiteral","src":"10863:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"10866:1:58","nodeType":"YulLiteral","src":"10866:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"10856:6:58","nodeType":"YulIdentifier","src":"10856:6:58"},"nativeSrc":"10856:12:58","nodeType":"YulFunctionCall","src":"10856:12:58"},"nativeSrc":"10856:12:58","nodeType":"YulExpressionStatement","src":"10856:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"10829:7:58","nodeType":"YulIdentifier","src":"10829:7:58"},{"name":"headStart","nativeSrc":"10838:9:58","nodeType":"YulIdentifier","src":"10838:9:58"}],"functionName":{"name":"sub","nativeSrc":"10825:3:58","nodeType":"YulIdentifier","src":"10825:3:58"},"nativeSrc":"10825:23:58","nodeType":"YulFunctionCall","src":"10825:23:58"},{"kind":"number","nativeSrc":"10850:2:58","nodeType":"YulLiteral","src":"10850:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"10821:3:58","nodeType":"YulIdentifier","src":"10821:3:58"},"nativeSrc":"10821:32:58","nodeType":"YulFunctionCall","src":"10821:32:58"},"nativeSrc":"10818:52:58","nodeType":"YulIf","src":"10818:52:58"},{"nativeSrc":"10879:29:58","nodeType":"YulVariableDeclaration","src":"10879:29:58","value":{"arguments":[{"name":"headStart","nativeSrc":"10898:9:58","nodeType":"YulIdentifier","src":"10898:9:58"}],"functionName":{"name":"mload","nativeSrc":"10892:5:58","nodeType":"YulIdentifier","src":"10892:5:58"},"nativeSrc":"10892:16:58","nodeType":"YulFunctionCall","src":"10892:16:58"},"variables":[{"name":"value","nativeSrc":"10883:5:58","nodeType":"YulTypedName","src":"10883:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"10939:5:58","nodeType":"YulIdentifier","src":"10939:5:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"10917:21:58","nodeType":"YulIdentifier","src":"10917:21:58"},"nativeSrc":"10917:28:58","nodeType":"YulFunctionCall","src":"10917:28:58"},"nativeSrc":"10917:28:58","nodeType":"YulExpressionStatement","src":"10917:28:58"},{"nativeSrc":"10954:15:58","nodeType":"YulAssignment","src":"10954:15:58","value":{"name":"value","nativeSrc":"10964:5:58","nodeType":"YulIdentifier","src":"10964:5:58"},"variableNames":[{"name":"value0","nativeSrc":"10954:6:58","nodeType":"YulIdentifier","src":"10954:6:58"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"10730:245:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"10774:9:58","nodeType":"YulTypedName","src":"10774:9:58","type":""},{"name":"dataEnd","nativeSrc":"10785:7:58","nodeType":"YulTypedName","src":"10785:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"10797:6:58","nodeType":"YulTypedName","src":"10797:6:58","type":""}],"src":"10730:245:58"},{"body":{"nativeSrc":"11012:152:58","nodeType":"YulBlock","src":"11012:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11029:1:58","nodeType":"YulLiteral","src":"11029:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11032:77:58","nodeType":"YulLiteral","src":"11032:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11022:6:58","nodeType":"YulIdentifier","src":"11022:6:58"},"nativeSrc":"11022:88:58","nodeType":"YulFunctionCall","src":"11022:88:58"},"nativeSrc":"11022:88:58","nodeType":"YulExpressionStatement","src":"11022:88:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11126:1:58","nodeType":"YulLiteral","src":"11126:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"11129:4:58","nodeType":"YulLiteral","src":"11129:4:58","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"11119:6:58","nodeType":"YulIdentifier","src":"11119:6:58"},"nativeSrc":"11119:15:58","nodeType":"YulFunctionCall","src":"11119:15:58"},"nativeSrc":"11119:15:58","nodeType":"YulExpressionStatement","src":"11119:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11150:1:58","nodeType":"YulLiteral","src":"11150:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11153:4:58","nodeType":"YulLiteral","src":"11153:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11143:6:58","nodeType":"YulIdentifier","src":"11143:6:58"},"nativeSrc":"11143:15:58","nodeType":"YulFunctionCall","src":"11143:15:58"},"nativeSrc":"11143:15:58","nodeType":"YulExpressionStatement","src":"11143:15:58"}]},"name":"panic_error_0x11","nativeSrc":"10980:184:58","nodeType":"YulFunctionDefinition","src":"10980:184:58"},{"body":{"nativeSrc":"11218:79:58","nodeType":"YulBlock","src":"11218:79:58","statements":[{"nativeSrc":"11228:17:58","nodeType":"YulAssignment","src":"11228:17:58","value":{"arguments":[{"name":"x","nativeSrc":"11240:1:58","nodeType":"YulIdentifier","src":"11240:1:58"},{"name":"y","nativeSrc":"11243:1:58","nodeType":"YulIdentifier","src":"11243:1:58"}],"functionName":{"name":"sub","nativeSrc":"11236:3:58","nodeType":"YulIdentifier","src":"11236:3:58"},"nativeSrc":"11236:9:58","nodeType":"YulFunctionCall","src":"11236:9:58"},"variableNames":[{"name":"diff","nativeSrc":"11228:4:58","nodeType":"YulIdentifier","src":"11228:4:58"}]},{"body":{"nativeSrc":"11269:22:58","nodeType":"YulBlock","src":"11269:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11271:16:58","nodeType":"YulIdentifier","src":"11271:16:58"},"nativeSrc":"11271:18:58","nodeType":"YulFunctionCall","src":"11271:18:58"},"nativeSrc":"11271:18:58","nodeType":"YulExpressionStatement","src":"11271:18:58"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"11260:4:58","nodeType":"YulIdentifier","src":"11260:4:58"},{"name":"x","nativeSrc":"11266:1:58","nodeType":"YulIdentifier","src":"11266:1:58"}],"functionName":{"name":"gt","nativeSrc":"11257:2:58","nodeType":"YulIdentifier","src":"11257:2:58"},"nativeSrc":"11257:11:58","nodeType":"YulFunctionCall","src":"11257:11:58"},"nativeSrc":"11254:37:58","nodeType":"YulIf","src":"11254:37:58"}]},"name":"checked_sub_t_uint256","nativeSrc":"11169:128:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11200:1:58","nodeType":"YulTypedName","src":"11200:1:58","type":""},{"name":"y","nativeSrc":"11203:1:58","nodeType":"YulTypedName","src":"11203:1:58","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"11209:4:58","nodeType":"YulTypedName","src":"11209:4:58","type":""}],"src":"11169:128:58"},{"body":{"nativeSrc":"11431:168:58","nodeType":"YulBlock","src":"11431:168:58","statements":[{"nativeSrc":"11441:26:58","nodeType":"YulAssignment","src":"11441:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"11453:9:58","nodeType":"YulIdentifier","src":"11453:9:58"},{"kind":"number","nativeSrc":"11464:2:58","nodeType":"YulLiteral","src":"11464:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"11449:3:58","nodeType":"YulIdentifier","src":"11449:3:58"},"nativeSrc":"11449:18:58","nodeType":"YulFunctionCall","src":"11449:18:58"},"variableNames":[{"name":"tail","nativeSrc":"11441:4:58","nodeType":"YulIdentifier","src":"11441:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"11483:9:58","nodeType":"YulIdentifier","src":"11483:9:58"},{"arguments":[{"name":"value0","nativeSrc":"11498:6:58","nodeType":"YulIdentifier","src":"11498:6:58"},{"kind":"number","nativeSrc":"11506:42:58","nodeType":"YulLiteral","src":"11506:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"11494:3:58","nodeType":"YulIdentifier","src":"11494:3:58"},"nativeSrc":"11494:55:58","nodeType":"YulFunctionCall","src":"11494:55:58"}],"functionName":{"name":"mstore","nativeSrc":"11476:6:58","nodeType":"YulIdentifier","src":"11476:6:58"},"nativeSrc":"11476:74:58","nodeType":"YulFunctionCall","src":"11476:74:58"},"nativeSrc":"11476:74:58","nodeType":"YulExpressionStatement","src":"11476:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"11570:9:58","nodeType":"YulIdentifier","src":"11570:9:58"},{"kind":"number","nativeSrc":"11581:2:58","nodeType":"YulLiteral","src":"11581:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"11566:3:58","nodeType":"YulIdentifier","src":"11566:3:58"},"nativeSrc":"11566:18:58","nodeType":"YulFunctionCall","src":"11566:18:58"},{"name":"value1","nativeSrc":"11586:6:58","nodeType":"YulIdentifier","src":"11586:6:58"}],"functionName":{"name":"mstore","nativeSrc":"11559:6:58","nodeType":"YulIdentifier","src":"11559:6:58"},"nativeSrc":"11559:34:58","nodeType":"YulFunctionCall","src":"11559:34:58"},"nativeSrc":"11559:34:58","nodeType":"YulExpressionStatement","src":"11559:34:58"}]},"name":"abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"11302:297:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11392:9:58","nodeType":"YulTypedName","src":"11392:9:58","type":""},{"name":"value1","nativeSrc":"11403:6:58","nodeType":"YulTypedName","src":"11403:6:58","type":""},{"name":"value0","nativeSrc":"11411:6:58","nodeType":"YulTypedName","src":"11411:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"11422:4:58","nodeType":"YulTypedName","src":"11422:4:58","type":""}],"src":"11302:297:58"},{"body":{"nativeSrc":"11652:77:58","nodeType":"YulBlock","src":"11652:77:58","statements":[{"nativeSrc":"11662:16:58","nodeType":"YulAssignment","src":"11662:16:58","value":{"arguments":[{"name":"x","nativeSrc":"11673:1:58","nodeType":"YulIdentifier","src":"11673:1:58"},{"name":"y","nativeSrc":"11676:1:58","nodeType":"YulIdentifier","src":"11676:1:58"}],"functionName":{"name":"add","nativeSrc":"11669:3:58","nodeType":"YulIdentifier","src":"11669:3:58"},"nativeSrc":"11669:9:58","nodeType":"YulFunctionCall","src":"11669:9:58"},"variableNames":[{"name":"sum","nativeSrc":"11662:3:58","nodeType":"YulIdentifier","src":"11662:3:58"}]},{"body":{"nativeSrc":"11701:22:58","nodeType":"YulBlock","src":"11701:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"11703:16:58","nodeType":"YulIdentifier","src":"11703:16:58"},"nativeSrc":"11703:18:58","nodeType":"YulFunctionCall","src":"11703:18:58"},"nativeSrc":"11703:18:58","nodeType":"YulExpressionStatement","src":"11703:18:58"}]},"condition":{"arguments":[{"name":"x","nativeSrc":"11693:1:58","nodeType":"YulIdentifier","src":"11693:1:58"},{"name":"sum","nativeSrc":"11696:3:58","nodeType":"YulIdentifier","src":"11696:3:58"}],"functionName":{"name":"gt","nativeSrc":"11690:2:58","nodeType":"YulIdentifier","src":"11690:2:58"},"nativeSrc":"11690:10:58","nodeType":"YulFunctionCall","src":"11690:10:58"},"nativeSrc":"11687:36:58","nodeType":"YulIf","src":"11687:36:58"}]},"name":"checked_add_t_uint256","nativeSrc":"11604:125:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"11635:1:58","nodeType":"YulTypedName","src":"11635:1:58","type":""},{"name":"y","nativeSrc":"11638:1:58","nodeType":"YulTypedName","src":"11638:1:58","type":""}],"returnVariables":[{"name":"sum","nativeSrc":"11644:3:58","nodeType":"YulTypedName","src":"11644:3:58","type":""}],"src":"11604:125:58"},{"body":{"nativeSrc":"11766:152:58","nodeType":"YulBlock","src":"11766:152:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"11783:1:58","nodeType":"YulLiteral","src":"11783:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11786:77:58","nodeType":"YulLiteral","src":"11786:77:58","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"11776:6:58","nodeType":"YulIdentifier","src":"11776:6:58"},"nativeSrc":"11776:88:58","nodeType":"YulFunctionCall","src":"11776:88:58"},"nativeSrc":"11776:88:58","nodeType":"YulExpressionStatement","src":"11776:88:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11880:1:58","nodeType":"YulLiteral","src":"11880:1:58","type":"","value":"4"},{"kind":"number","nativeSrc":"11883:4:58","nodeType":"YulLiteral","src":"11883:4:58","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"11873:6:58","nodeType":"YulIdentifier","src":"11873:6:58"},"nativeSrc":"11873:15:58","nodeType":"YulFunctionCall","src":"11873:15:58"},"nativeSrc":"11873:15:58","nodeType":"YulExpressionStatement","src":"11873:15:58"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"11904:1:58","nodeType":"YulLiteral","src":"11904:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"11907:4:58","nodeType":"YulLiteral","src":"11907:4:58","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"11897:6:58","nodeType":"YulIdentifier","src":"11897:6:58"},"nativeSrc":"11897:15:58","nodeType":"YulFunctionCall","src":"11897:15:58"},"nativeSrc":"11897:15:58","nodeType":"YulExpressionStatement","src":"11897:15:58"}]},"name":"panic_error_0x32","nativeSrc":"11734:184:58","nodeType":"YulFunctionDefinition","src":"11734:184:58"},{"body":{"nativeSrc":"11990:174:58","nodeType":"YulBlock","src":"11990:174:58","statements":[{"body":{"nativeSrc":"12036:16:58","nodeType":"YulBlock","src":"12036:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12045:1:58","nodeType":"YulLiteral","src":"12045:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"12048:1:58","nodeType":"YulLiteral","src":"12048:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12038:6:58","nodeType":"YulIdentifier","src":"12038:6:58"},"nativeSrc":"12038:12:58","nodeType":"YulFunctionCall","src":"12038:12:58"},"nativeSrc":"12038:12:58","nodeType":"YulExpressionStatement","src":"12038:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"12011:7:58","nodeType":"YulIdentifier","src":"12011:7:58"},{"name":"headStart","nativeSrc":"12020:9:58","nodeType":"YulIdentifier","src":"12020:9:58"}],"functionName":{"name":"sub","nativeSrc":"12007:3:58","nodeType":"YulIdentifier","src":"12007:3:58"},"nativeSrc":"12007:23:58","nodeType":"YulFunctionCall","src":"12007:23:58"},{"kind":"number","nativeSrc":"12032:2:58","nodeType":"YulLiteral","src":"12032:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"12003:3:58","nodeType":"YulIdentifier","src":"12003:3:58"},"nativeSrc":"12003:32:58","nodeType":"YulFunctionCall","src":"12003:32:58"},"nativeSrc":"12000:52:58","nodeType":"YulIf","src":"12000:52:58"},{"nativeSrc":"12061:36:58","nodeType":"YulVariableDeclaration","src":"12061:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"12087:9:58","nodeType":"YulIdentifier","src":"12087:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"12074:12:58","nodeType":"YulIdentifier","src":"12074:12:58"},"nativeSrc":"12074:23:58","nodeType":"YulFunctionCall","src":"12074:23:58"},"variables":[{"name":"value","nativeSrc":"12065:5:58","nodeType":"YulTypedName","src":"12065:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"12128:5:58","nodeType":"YulIdentifier","src":"12128:5:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"12106:21:58","nodeType":"YulIdentifier","src":"12106:21:58"},"nativeSrc":"12106:28:58","nodeType":"YulFunctionCall","src":"12106:28:58"},"nativeSrc":"12106:28:58","nodeType":"YulExpressionStatement","src":"12106:28:58"},{"nativeSrc":"12143:15:58","nodeType":"YulAssignment","src":"12143:15:58","value":{"name":"value","nativeSrc":"12153:5:58","nodeType":"YulIdentifier","src":"12153:5:58"},"variableNames":[{"name":"value0","nativeSrc":"12143:6:58","nodeType":"YulIdentifier","src":"12143:6:58"}]}]},"name":"abi_decode_tuple_t_bool","nativeSrc":"11923:241:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"11956:9:58","nodeType":"YulTypedName","src":"11956:9:58","type":""},{"name":"dataEnd","nativeSrc":"11967:7:58","nodeType":"YulTypedName","src":"11967:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"11979:6:58","nodeType":"YulTypedName","src":"11979:6:58","type":""}],"src":"11923:241:58"},{"body":{"nativeSrc":"12216:148:58","nodeType":"YulBlock","src":"12216:148:58","statements":[{"body":{"nativeSrc":"12307:22:58","nodeType":"YulBlock","src":"12307:22:58","statements":[{"expression":{"arguments":[],"functionName":{"name":"panic_error_0x11","nativeSrc":"12309:16:58","nodeType":"YulIdentifier","src":"12309:16:58"},"nativeSrc":"12309:18:58","nodeType":"YulFunctionCall","src":"12309:18:58"},"nativeSrc":"12309:18:58","nodeType":"YulExpressionStatement","src":"12309:18:58"}]},"condition":{"arguments":[{"name":"value","nativeSrc":"12232:5:58","nodeType":"YulIdentifier","src":"12232:5:58"},{"kind":"number","nativeSrc":"12239:66:58","nodeType":"YulLiteral","src":"12239:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"eq","nativeSrc":"12229:2:58","nodeType":"YulIdentifier","src":"12229:2:58"},"nativeSrc":"12229:77:58","nodeType":"YulFunctionCall","src":"12229:77:58"},"nativeSrc":"12226:103:58","nodeType":"YulIf","src":"12226:103:58"},{"nativeSrc":"12338:20:58","nodeType":"YulAssignment","src":"12338:20:58","value":{"arguments":[{"name":"value","nativeSrc":"12349:5:58","nodeType":"YulIdentifier","src":"12349:5:58"},{"kind":"number","nativeSrc":"12356:1:58","nodeType":"YulLiteral","src":"12356:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"12345:3:58","nodeType":"YulIdentifier","src":"12345:3:58"},"nativeSrc":"12345:13:58","nodeType":"YulFunctionCall","src":"12345:13:58"},"variableNames":[{"name":"ret","nativeSrc":"12338:3:58","nodeType":"YulIdentifier","src":"12338:3:58"}]}]},"name":"increment_t_uint256","nativeSrc":"12169:195:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"value","nativeSrc":"12198:5:58","nodeType":"YulTypedName","src":"12198:5:58","type":""}],"returnVariables":[{"name":"ret","nativeSrc":"12208:3:58","nodeType":"YulTypedName","src":"12208:3:58","type":""}],"src":"12169:195:58"},{"body":{"nativeSrc":"12447:280:58","nodeType":"YulBlock","src":"12447:280:58","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"12464:3:58","nodeType":"YulIdentifier","src":"12464:3:58"},{"name":"length","nativeSrc":"12469:6:58","nodeType":"YulIdentifier","src":"12469:6:58"}],"functionName":{"name":"mstore","nativeSrc":"12457:6:58","nodeType":"YulIdentifier","src":"12457:6:58"},"nativeSrc":"12457:19:58","nodeType":"YulFunctionCall","src":"12457:19:58"},"nativeSrc":"12457:19:58","nodeType":"YulExpressionStatement","src":"12457:19:58"},{"body":{"nativeSrc":"12567:16:58","nodeType":"YulBlock","src":"12567:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"12576:1:58","nodeType":"YulLiteral","src":"12576:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"12579:1:58","nodeType":"YulLiteral","src":"12579:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"12569:6:58","nodeType":"YulIdentifier","src":"12569:6:58"},"nativeSrc":"12569:12:58","nodeType":"YulFunctionCall","src":"12569:12:58"},"nativeSrc":"12569:12:58","nodeType":"YulExpressionStatement","src":"12569:12:58"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"12491:6:58","nodeType":"YulIdentifier","src":"12491:6:58"},{"kind":"number","nativeSrc":"12499:66:58","nodeType":"YulLiteral","src":"12499:66:58","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"12488:2:58","nodeType":"YulIdentifier","src":"12488:2:58"},"nativeSrc":"12488:78:58","nodeType":"YulFunctionCall","src":"12488:78:58"},"nativeSrc":"12485:98:58","nodeType":"YulIf","src":"12485:98:58"},{"nativeSrc":"12592:30:58","nodeType":"YulVariableDeclaration","src":"12592:30:58","value":{"arguments":[{"kind":"number","nativeSrc":"12612:1:58","nodeType":"YulLiteral","src":"12612:1:58","type":"","value":"5"},{"name":"length","nativeSrc":"12615:6:58","nodeType":"YulIdentifier","src":"12615:6:58"}],"functionName":{"name":"shl","nativeSrc":"12608:3:58","nodeType":"YulIdentifier","src":"12608:3:58"},"nativeSrc":"12608:14:58","nodeType":"YulFunctionCall","src":"12608:14:58"},"variables":[{"name":"length_1","nativeSrc":"12596:8:58","nodeType":"YulTypedName","src":"12596:8:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"12648:3:58","nodeType":"YulIdentifier","src":"12648:3:58"},{"kind":"number","nativeSrc":"12653:4:58","nodeType":"YulLiteral","src":"12653:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"12644:3:58","nodeType":"YulIdentifier","src":"12644:3:58"},"nativeSrc":"12644:14:58","nodeType":"YulFunctionCall","src":"12644:14:58"},{"name":"start","nativeSrc":"12660:5:58","nodeType":"YulIdentifier","src":"12660:5:58"},{"name":"length_1","nativeSrc":"12667:8:58","nodeType":"YulIdentifier","src":"12667:8:58"}],"functionName":{"name":"calldatacopy","nativeSrc":"12631:12:58","nodeType":"YulIdentifier","src":"12631:12:58"},"nativeSrc":"12631:45:58","nodeType":"YulFunctionCall","src":"12631:45:58"},"nativeSrc":"12631:45:58","nodeType":"YulExpressionStatement","src":"12631:45:58"},{"nativeSrc":"12685:36:58","nodeType":"YulAssignment","src":"12685:36:58","value":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"12700:3:58","nodeType":"YulIdentifier","src":"12700:3:58"},{"name":"length_1","nativeSrc":"12705:8:58","nodeType":"YulIdentifier","src":"12705:8:58"}],"functionName":{"name":"add","nativeSrc":"12696:3:58","nodeType":"YulIdentifier","src":"12696:3:58"},"nativeSrc":"12696:18:58","nodeType":"YulFunctionCall","src":"12696:18:58"},{"kind":"number","nativeSrc":"12716:4:58","nodeType":"YulLiteral","src":"12716:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"12692:3:58","nodeType":"YulIdentifier","src":"12692:3:58"},"nativeSrc":"12692:29:58","nodeType":"YulFunctionCall","src":"12692:29:58"},"variableNames":[{"name":"end","nativeSrc":"12685:3:58","nodeType":"YulIdentifier","src":"12685:3:58"}]}]},"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"12369:358:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"start","nativeSrc":"12416:5:58","nodeType":"YulTypedName","src":"12416:5:58","type":""},{"name":"length","nativeSrc":"12423:6:58","nodeType":"YulTypedName","src":"12423:6:58","type":""},{"name":"pos","nativeSrc":"12431:3:58","nodeType":"YulTypedName","src":"12431:3:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"12439:3:58","nodeType":"YulTypedName","src":"12439:3:58","type":""}],"src":"12369:358:58"},{"body":{"nativeSrc":"13151:1381:58","nodeType":"YulBlock","src":"13151:1381:58","statements":[{"nativeSrc":"13161:33:58","nodeType":"YulVariableDeclaration","src":"13161:33:58","value":{"arguments":[{"name":"headStart","nativeSrc":"13179:9:58","nodeType":"YulIdentifier","src":"13179:9:58"},{"kind":"number","nativeSrc":"13190:3:58","nodeType":"YulLiteral","src":"13190:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"13175:3:58","nodeType":"YulIdentifier","src":"13175:3:58"},"nativeSrc":"13175:19:58","nodeType":"YulFunctionCall","src":"13175:19:58"},"variables":[{"name":"tail_1","nativeSrc":"13165:6:58","nodeType":"YulTypedName","src":"13165:6:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"13210:9:58","nodeType":"YulIdentifier","src":"13210:9:58"},{"kind":"number","nativeSrc":"13221:3:58","nodeType":"YulLiteral","src":"13221:3:58","type":"","value":"128"}],"functionName":{"name":"mstore","nativeSrc":"13203:6:58","nodeType":"YulIdentifier","src":"13203:6:58"},"nativeSrc":"13203:22:58","nodeType":"YulFunctionCall","src":"13203:22:58"},"nativeSrc":"13203:22:58","nodeType":"YulExpressionStatement","src":"13203:22:58"},{"nativeSrc":"13234:17:58","nodeType":"YulVariableDeclaration","src":"13234:17:58","value":{"name":"tail_1","nativeSrc":"13245:6:58","nodeType":"YulIdentifier","src":"13245:6:58"},"variables":[{"name":"pos","nativeSrc":"13238:3:58","nodeType":"YulTypedName","src":"13238:3:58","type":""}]},{"expression":{"arguments":[{"name":"tail_1","nativeSrc":"13267:6:58","nodeType":"YulIdentifier","src":"13267:6:58"},{"name":"value1","nativeSrc":"13275:6:58","nodeType":"YulIdentifier","src":"13275:6:58"}],"functionName":{"name":"mstore","nativeSrc":"13260:6:58","nodeType":"YulIdentifier","src":"13260:6:58"},"nativeSrc":"13260:22:58","nodeType":"YulFunctionCall","src":"13260:22:58"},"nativeSrc":"13260:22:58","nodeType":"YulExpressionStatement","src":"13260:22:58"},{"nativeSrc":"13291:26:58","nodeType":"YulAssignment","src":"13291:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"13302:9:58","nodeType":"YulIdentifier","src":"13302:9:58"},{"kind":"number","nativeSrc":"13313:3:58","nodeType":"YulLiteral","src":"13313:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"13298:3:58","nodeType":"YulIdentifier","src":"13298:3:58"},"nativeSrc":"13298:19:58","nodeType":"YulFunctionCall","src":"13298:19:58"},"variableNames":[{"name":"pos","nativeSrc":"13291:3:58","nodeType":"YulIdentifier","src":"13291:3:58"}]},{"nativeSrc":"13326:20:58","nodeType":"YulVariableDeclaration","src":"13326:20:58","value":{"name":"value0","nativeSrc":"13340:6:58","nodeType":"YulIdentifier","src":"13340:6:58"},"variables":[{"name":"srcPtr","nativeSrc":"13330:6:58","nodeType":"YulTypedName","src":"13330:6:58","type":""}]},{"nativeSrc":"13355:10:58","nodeType":"YulVariableDeclaration","src":"13355:10:58","value":{"kind":"number","nativeSrc":"13364:1:58","nodeType":"YulLiteral","src":"13364:1:58","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"13359:1:58","nodeType":"YulTypedName","src":"13359:1:58","type":""}]},{"body":{"nativeSrc":"13423:278:58","nodeType":"YulBlock","src":"13423:278:58","statements":[{"nativeSrc":"13437:33:58","nodeType":"YulVariableDeclaration","src":"13437:33:58","value":{"arguments":[{"name":"srcPtr","nativeSrc":"13463:6:58","nodeType":"YulIdentifier","src":"13463:6:58"}],"functionName":{"name":"calldataload","nativeSrc":"13450:12:58","nodeType":"YulIdentifier","src":"13450:12:58"},"nativeSrc":"13450:20:58","nodeType":"YulFunctionCall","src":"13450:20:58"},"variables":[{"name":"value","nativeSrc":"13441:5:58","nodeType":"YulTypedName","src":"13441:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"13508:5:58","nodeType":"YulIdentifier","src":"13508:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"13483:24:58","nodeType":"YulIdentifier","src":"13483:24:58"},"nativeSrc":"13483:31:58","nodeType":"YulFunctionCall","src":"13483:31:58"},"nativeSrc":"13483:31:58","nodeType":"YulExpressionStatement","src":"13483:31:58"},{"expression":{"arguments":[{"name":"pos","nativeSrc":"13534:3:58","nodeType":"YulIdentifier","src":"13534:3:58"},{"arguments":[{"name":"value","nativeSrc":"13543:5:58","nodeType":"YulIdentifier","src":"13543:5:58"},{"kind":"number","nativeSrc":"13550:42:58","nodeType":"YulLiteral","src":"13550:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"13539:3:58","nodeType":"YulIdentifier","src":"13539:3:58"},"nativeSrc":"13539:54:58","nodeType":"YulFunctionCall","src":"13539:54:58"}],"functionName":{"name":"mstore","nativeSrc":"13527:6:58","nodeType":"YulIdentifier","src":"13527:6:58"},"nativeSrc":"13527:67:58","nodeType":"YulFunctionCall","src":"13527:67:58"},"nativeSrc":"13527:67:58","nodeType":"YulExpressionStatement","src":"13527:67:58"},{"nativeSrc":"13607:14:58","nodeType":"YulVariableDeclaration","src":"13607:14:58","value":{"kind":"number","nativeSrc":"13617:4:58","nodeType":"YulLiteral","src":"13617:4:58","type":"","value":"0x20"},"variables":[{"name":"_1","nativeSrc":"13611:2:58","nodeType":"YulTypedName","src":"13611:2:58","type":""}]},{"nativeSrc":"13634:19:58","nodeType":"YulAssignment","src":"13634:19:58","value":{"arguments":[{"name":"pos","nativeSrc":"13645:3:58","nodeType":"YulIdentifier","src":"13645:3:58"},{"name":"_1","nativeSrc":"13650:2:58","nodeType":"YulIdentifier","src":"13650:2:58"}],"functionName":{"name":"add","nativeSrc":"13641:3:58","nodeType":"YulIdentifier","src":"13641:3:58"},"nativeSrc":"13641:12:58","nodeType":"YulFunctionCall","src":"13641:12:58"},"variableNames":[{"name":"pos","nativeSrc":"13634:3:58","nodeType":"YulIdentifier","src":"13634:3:58"}]},{"nativeSrc":"13666:25:58","nodeType":"YulAssignment","src":"13666:25:58","value":{"arguments":[{"name":"srcPtr","nativeSrc":"13680:6:58","nodeType":"YulIdentifier","src":"13680:6:58"},{"name":"_1","nativeSrc":"13688:2:58","nodeType":"YulIdentifier","src":"13688:2:58"}],"functionName":{"name":"add","nativeSrc":"13676:3:58","nodeType":"YulIdentifier","src":"13676:3:58"},"nativeSrc":"13676:15:58","nodeType":"YulFunctionCall","src":"13676:15:58"},"variableNames":[{"name":"srcPtr","nativeSrc":"13666:6:58","nodeType":"YulIdentifier","src":"13666:6:58"}]}]},"condition":{"arguments":[{"name":"i","nativeSrc":"13385:1:58","nodeType":"YulIdentifier","src":"13385:1:58"},{"name":"value1","nativeSrc":"13388:6:58","nodeType":"YulIdentifier","src":"13388:6:58"}],"functionName":{"name":"lt","nativeSrc":"13382:2:58","nodeType":"YulIdentifier","src":"13382:2:58"},"nativeSrc":"13382:13:58","nodeType":"YulFunctionCall","src":"13382:13:58"},"nativeSrc":"13374:327:58","nodeType":"YulForLoop","post":{"nativeSrc":"13396:18:58","nodeType":"YulBlock","src":"13396:18:58","statements":[{"nativeSrc":"13398:14:58","nodeType":"YulAssignment","src":"13398:14:58","value":{"arguments":[{"name":"i","nativeSrc":"13407:1:58","nodeType":"YulIdentifier","src":"13407:1:58"},{"kind":"number","nativeSrc":"13410:1:58","nodeType":"YulLiteral","src":"13410:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"13403:3:58","nodeType":"YulIdentifier","src":"13403:3:58"},"nativeSrc":"13403:9:58","nodeType":"YulFunctionCall","src":"13403:9:58"},"variableNames":[{"name":"i","nativeSrc":"13398:1:58","nodeType":"YulIdentifier","src":"13398:1:58"}]}]},"pre":{"nativeSrc":"13378:3:58","nodeType":"YulBlock","src":"13378:3:58","statements":[]},"src":"13374:327:58"},{"nativeSrc":"13710:14:58","nodeType":"YulVariableDeclaration","src":"13710:14:58","value":{"kind":"number","nativeSrc":"13720:4:58","nodeType":"YulLiteral","src":"13720:4:58","type":"","value":"0x20"},"variables":[{"name":"_2","nativeSrc":"13714:2:58","nodeType":"YulTypedName","src":"13714:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13744:9:58","nodeType":"YulIdentifier","src":"13744:9:58"},{"name":"_2","nativeSrc":"13755:2:58","nodeType":"YulIdentifier","src":"13755:2:58"}],"functionName":{"name":"add","nativeSrc":"13740:3:58","nodeType":"YulIdentifier","src":"13740:3:58"},"nativeSrc":"13740:18:58","nodeType":"YulFunctionCall","src":"13740:18:58"},{"arguments":[{"name":"pos","nativeSrc":"13764:3:58","nodeType":"YulIdentifier","src":"13764:3:58"},{"name":"headStart","nativeSrc":"13769:9:58","nodeType":"YulIdentifier","src":"13769:9:58"}],"functionName":{"name":"sub","nativeSrc":"13760:3:58","nodeType":"YulIdentifier","src":"13760:3:58"},"nativeSrc":"13760:19:58","nodeType":"YulFunctionCall","src":"13760:19:58"}],"functionName":{"name":"mstore","nativeSrc":"13733:6:58","nodeType":"YulIdentifier","src":"13733:6:58"},"nativeSrc":"13733:47:58","nodeType":"YulFunctionCall","src":"13733:47:58"},"nativeSrc":"13733:47:58","nodeType":"YulExpressionStatement","src":"13733:47:58"},{"nativeSrc":"13789:72:58","nodeType":"YulVariableDeclaration","src":"13789:72:58","value":{"arguments":[{"name":"value2","nativeSrc":"13841:6:58","nodeType":"YulIdentifier","src":"13841:6:58"},{"name":"value3","nativeSrc":"13849:6:58","nodeType":"YulIdentifier","src":"13849:6:58"},{"name":"pos","nativeSrc":"13857:3:58","nodeType":"YulIdentifier","src":"13857:3:58"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"13803:37:58","nodeType":"YulIdentifier","src":"13803:37:58"},"nativeSrc":"13803:58:58","nodeType":"YulFunctionCall","src":"13803:58:58"},"variables":[{"name":"tail_2","nativeSrc":"13793:6:58","nodeType":"YulTypedName","src":"13793:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"13881:9:58","nodeType":"YulIdentifier","src":"13881:9:58"},{"kind":"number","nativeSrc":"13892:2:58","nodeType":"YulLiteral","src":"13892:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"13877:3:58","nodeType":"YulIdentifier","src":"13877:3:58"},"nativeSrc":"13877:18:58","nodeType":"YulFunctionCall","src":"13877:18:58"},{"arguments":[{"name":"tail_2","nativeSrc":"13901:6:58","nodeType":"YulIdentifier","src":"13901:6:58"},{"name":"headStart","nativeSrc":"13909:9:58","nodeType":"YulIdentifier","src":"13909:9:58"}],"functionName":{"name":"sub","nativeSrc":"13897:3:58","nodeType":"YulIdentifier","src":"13897:3:58"},"nativeSrc":"13897:22:58","nodeType":"YulFunctionCall","src":"13897:22:58"}],"functionName":{"name":"mstore","nativeSrc":"13870:6:58","nodeType":"YulIdentifier","src":"13870:6:58"},"nativeSrc":"13870:50:58","nodeType":"YulFunctionCall","src":"13870:50:58"},"nativeSrc":"13870:50:58","nodeType":"YulExpressionStatement","src":"13870:50:58"},{"nativeSrc":"13929:75:58","nodeType":"YulVariableDeclaration","src":"13929:75:58","value":{"arguments":[{"name":"value4","nativeSrc":"13981:6:58","nodeType":"YulIdentifier","src":"13981:6:58"},{"name":"value5","nativeSrc":"13989:6:58","nodeType":"YulIdentifier","src":"13989:6:58"},{"name":"tail_2","nativeSrc":"13997:6:58","nodeType":"YulIdentifier","src":"13997:6:58"}],"functionName":{"name":"abi_encode_array_uint256_dyn_calldata","nativeSrc":"13943:37:58","nodeType":"YulIdentifier","src":"13943:37:58"},"nativeSrc":"13943:61:58","nodeType":"YulFunctionCall","src":"13943:61:58"},"variables":[{"name":"tail_3","nativeSrc":"13933:6:58","nodeType":"YulTypedName","src":"13933:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"14024:9:58","nodeType":"YulIdentifier","src":"14024:9:58"},{"kind":"number","nativeSrc":"14035:2:58","nodeType":"YulLiteral","src":"14035:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"14020:3:58","nodeType":"YulIdentifier","src":"14020:3:58"},"nativeSrc":"14020:18:58","nodeType":"YulFunctionCall","src":"14020:18:58"},{"arguments":[{"name":"tail_3","nativeSrc":"14044:6:58","nodeType":"YulIdentifier","src":"14044:6:58"},{"name":"headStart","nativeSrc":"14052:9:58","nodeType":"YulIdentifier","src":"14052:9:58"}],"functionName":{"name":"sub","nativeSrc":"14040:3:58","nodeType":"YulIdentifier","src":"14040:3:58"},"nativeSrc":"14040:22:58","nodeType":"YulFunctionCall","src":"14040:22:58"}],"functionName":{"name":"mstore","nativeSrc":"14013:6:58","nodeType":"YulIdentifier","src":"14013:6:58"},"nativeSrc":"14013:50:58","nodeType":"YulFunctionCall","src":"14013:50:58"},"nativeSrc":"14013:50:58","nodeType":"YulExpressionStatement","src":"14013:50:58"},{"nativeSrc":"14072:19:58","nodeType":"YulVariableDeclaration","src":"14072:19:58","value":{"name":"tail_3","nativeSrc":"14085:6:58","nodeType":"YulIdentifier","src":"14085:6:58"},"variables":[{"name":"pos_1","nativeSrc":"14076:5:58","nodeType":"YulTypedName","src":"14076:5:58","type":""}]},{"expression":{"arguments":[{"name":"tail_3","nativeSrc":"14107:6:58","nodeType":"YulIdentifier","src":"14107:6:58"},{"name":"value7","nativeSrc":"14115:6:58","nodeType":"YulIdentifier","src":"14115:6:58"}],"functionName":{"name":"mstore","nativeSrc":"14100:6:58","nodeType":"YulIdentifier","src":"14100:6:58"},"nativeSrc":"14100:22:58","nodeType":"YulFunctionCall","src":"14100:22:58"},"nativeSrc":"14100:22:58","nodeType":"YulExpressionStatement","src":"14100:22:58"},{"nativeSrc":"14131:24:58","nodeType":"YulAssignment","src":"14131:24:58","value":{"arguments":[{"name":"tail_3","nativeSrc":"14144:6:58","nodeType":"YulIdentifier","src":"14144:6:58"},{"name":"_2","nativeSrc":"14152:2:58","nodeType":"YulIdentifier","src":"14152:2:58"}],"functionName":{"name":"add","nativeSrc":"14140:3:58","nodeType":"YulIdentifier","src":"14140:3:58"},"nativeSrc":"14140:15:58","nodeType":"YulFunctionCall","src":"14140:15:58"},"variableNames":[{"name":"pos_1","nativeSrc":"14131:5:58","nodeType":"YulIdentifier","src":"14131:5:58"}]},{"nativeSrc":"14164:22:58","nodeType":"YulVariableDeclaration","src":"14164:22:58","value":{"name":"value6","nativeSrc":"14180:6:58","nodeType":"YulIdentifier","src":"14180:6:58"},"variables":[{"name":"srcPtr_1","nativeSrc":"14168:8:58","nodeType":"YulTypedName","src":"14168:8:58","type":""}]},{"nativeSrc":"14195:12:58","nodeType":"YulVariableDeclaration","src":"14195:12:58","value":{"kind":"number","nativeSrc":"14206:1:58","nodeType":"YulLiteral","src":"14206:1:58","type":"","value":"0"},"variables":[{"name":"i_1","nativeSrc":"14199:3:58","nodeType":"YulTypedName","src":"14199:3:58","type":""}]},{"body":{"nativeSrc":"14271:233:58","nodeType":"YulBlock","src":"14271:233:58","statements":[{"nativeSrc":"14285:37:58","nodeType":"YulVariableDeclaration","src":"14285:37:58","value":{"arguments":[{"name":"srcPtr_1","nativeSrc":"14313:8:58","nodeType":"YulIdentifier","src":"14313:8:58"}],"functionName":{"name":"calldataload","nativeSrc":"14300:12:58","nodeType":"YulIdentifier","src":"14300:12:58"},"nativeSrc":"14300:22:58","nodeType":"YulFunctionCall","src":"14300:22:58"},"variables":[{"name":"value_1","nativeSrc":"14289:7:58","nodeType":"YulTypedName","src":"14289:7:58","type":""}]},{"expression":{"arguments":[{"name":"value_1","nativeSrc":"14357:7:58","nodeType":"YulIdentifier","src":"14357:7:58"}],"functionName":{"name":"validator_revert_bool","nativeSrc":"14335:21:58","nodeType":"YulIdentifier","src":"14335:21:58"},"nativeSrc":"14335:30:58","nodeType":"YulFunctionCall","src":"14335:30:58"},"nativeSrc":"14335:30:58","nodeType":"YulExpressionStatement","src":"14335:30:58"},{"expression":{"arguments":[{"name":"pos_1","nativeSrc":"14385:5:58","nodeType":"YulIdentifier","src":"14385:5:58"},{"arguments":[{"arguments":[{"name":"value_1","nativeSrc":"14406:7:58","nodeType":"YulIdentifier","src":"14406:7:58"}],"functionName":{"name":"iszero","nativeSrc":"14399:6:58","nodeType":"YulIdentifier","src":"14399:6:58"},"nativeSrc":"14399:15:58","nodeType":"YulFunctionCall","src":"14399:15:58"}],"functionName":{"name":"iszero","nativeSrc":"14392:6:58","nodeType":"YulIdentifier","src":"14392:6:58"},"nativeSrc":"14392:23:58","nodeType":"YulFunctionCall","src":"14392:23:58"}],"functionName":{"name":"mstore","nativeSrc":"14378:6:58","nodeType":"YulIdentifier","src":"14378:6:58"},"nativeSrc":"14378:38:58","nodeType":"YulFunctionCall","src":"14378:38:58"},"nativeSrc":"14378:38:58","nodeType":"YulExpressionStatement","src":"14378:38:58"},{"nativeSrc":"14429:23:58","nodeType":"YulAssignment","src":"14429:23:58","value":{"arguments":[{"name":"pos_1","nativeSrc":"14442:5:58","nodeType":"YulIdentifier","src":"14442:5:58"},{"name":"_2","nativeSrc":"14449:2:58","nodeType":"YulIdentifier","src":"14449:2:58"}],"functionName":{"name":"add","nativeSrc":"14438:3:58","nodeType":"YulIdentifier","src":"14438:3:58"},"nativeSrc":"14438:14:58","nodeType":"YulFunctionCall","src":"14438:14:58"},"variableNames":[{"name":"pos_1","nativeSrc":"14429:5:58","nodeType":"YulIdentifier","src":"14429:5:58"}]},{"nativeSrc":"14465:29:58","nodeType":"YulAssignment","src":"14465:29:58","value":{"arguments":[{"name":"srcPtr_1","nativeSrc":"14481:8:58","nodeType":"YulIdentifier","src":"14481:8:58"},{"name":"_2","nativeSrc":"14491:2:58","nodeType":"YulIdentifier","src":"14491:2:58"}],"functionName":{"name":"add","nativeSrc":"14477:3:58","nodeType":"YulIdentifier","src":"14477:3:58"},"nativeSrc":"14477:17:58","nodeType":"YulFunctionCall","src":"14477:17:58"},"variableNames":[{"name":"srcPtr_1","nativeSrc":"14465:8:58","nodeType":"YulIdentifier","src":"14465:8:58"}]}]},"condition":{"arguments":[{"name":"i_1","nativeSrc":"14227:3:58","nodeType":"YulIdentifier","src":"14227:3:58"},{"name":"value7","nativeSrc":"14232:6:58","nodeType":"YulIdentifier","src":"14232:6:58"}],"functionName":{"name":"lt","nativeSrc":"14224:2:58","nodeType":"YulIdentifier","src":"14224:2:58"},"nativeSrc":"14224:15:58","nodeType":"YulFunctionCall","src":"14224:15:58"},"nativeSrc":"14216:288:58","nodeType":"YulForLoop","post":{"nativeSrc":"14240:22:58","nodeType":"YulBlock","src":"14240:22:58","statements":[{"nativeSrc":"14242:18:58","nodeType":"YulAssignment","src":"14242:18:58","value":{"arguments":[{"name":"i_1","nativeSrc":"14253:3:58","nodeType":"YulIdentifier","src":"14253:3:58"},{"kind":"number","nativeSrc":"14258:1:58","nodeType":"YulLiteral","src":"14258:1:58","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"14249:3:58","nodeType":"YulIdentifier","src":"14249:3:58"},"nativeSrc":"14249:11:58","nodeType":"YulFunctionCall","src":"14249:11:58"},"variableNames":[{"name":"i_1","nativeSrc":"14242:3:58","nodeType":"YulIdentifier","src":"14242:3:58"}]}]},"pre":{"nativeSrc":"14220:3:58","nodeType":"YulBlock","src":"14220:3:58","statements":[]},"src":"14216:288:58"},{"nativeSrc":"14513:13:58","nodeType":"YulAssignment","src":"14513:13:58","value":{"name":"pos_1","nativeSrc":"14521:5:58","nodeType":"YulIdentifier","src":"14521:5:58"},"variableNames":[{"name":"tail","nativeSrc":"14513:4:58","nodeType":"YulIdentifier","src":"14513:4:58"}]}]},"name":"abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed","nativeSrc":"12732:1800:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"13064:9:58","nodeType":"YulTypedName","src":"13064:9:58","type":""},{"name":"value7","nativeSrc":"13075:6:58","nodeType":"YulTypedName","src":"13075:6:58","type":""},{"name":"value6","nativeSrc":"13083:6:58","nodeType":"YulTypedName","src":"13083:6:58","type":""},{"name":"value5","nativeSrc":"13091:6:58","nodeType":"YulTypedName","src":"13091:6:58","type":""},{"name":"value4","nativeSrc":"13099:6:58","nodeType":"YulTypedName","src":"13099:6:58","type":""},{"name":"value3","nativeSrc":"13107:6:58","nodeType":"YulTypedName","src":"13107:6:58","type":""},{"name":"value2","nativeSrc":"13115:6:58","nodeType":"YulTypedName","src":"13115:6:58","type":""},{"name":"value1","nativeSrc":"13123:6:58","nodeType":"YulTypedName","src":"13123:6:58","type":""},{"name":"value0","nativeSrc":"13131:6:58","nodeType":"YulTypedName","src":"13131:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"13142:4:58","nodeType":"YulTypedName","src":"13142:4:58","type":""}],"src":"12732:1800:58"},{"body":{"nativeSrc":"14618:103:58","nodeType":"YulBlock","src":"14618:103:58","statements":[{"body":{"nativeSrc":"14664:16:58","nodeType":"YulBlock","src":"14664:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14673:1:58","nodeType":"YulLiteral","src":"14673:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"14676:1:58","nodeType":"YulLiteral","src":"14676:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14666:6:58","nodeType":"YulIdentifier","src":"14666:6:58"},"nativeSrc":"14666:12:58","nodeType":"YulFunctionCall","src":"14666:12:58"},"nativeSrc":"14666:12:58","nodeType":"YulExpressionStatement","src":"14666:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14639:7:58","nodeType":"YulIdentifier","src":"14639:7:58"},{"name":"headStart","nativeSrc":"14648:9:58","nodeType":"YulIdentifier","src":"14648:9:58"}],"functionName":{"name":"sub","nativeSrc":"14635:3:58","nodeType":"YulIdentifier","src":"14635:3:58"},"nativeSrc":"14635:23:58","nodeType":"YulFunctionCall","src":"14635:23:58"},{"kind":"number","nativeSrc":"14660:2:58","nodeType":"YulLiteral","src":"14660:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14631:3:58","nodeType":"YulIdentifier","src":"14631:3:58"},"nativeSrc":"14631:32:58","nodeType":"YulFunctionCall","src":"14631:32:58"},"nativeSrc":"14628:52:58","nodeType":"YulIf","src":"14628:52:58"},{"nativeSrc":"14689:26:58","nodeType":"YulAssignment","src":"14689:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"14705:9:58","nodeType":"YulIdentifier","src":"14705:9:58"}],"functionName":{"name":"mload","nativeSrc":"14699:5:58","nodeType":"YulIdentifier","src":"14699:5:58"},"nativeSrc":"14699:16:58","nodeType":"YulFunctionCall","src":"14699:16:58"},"variableNames":[{"name":"value0","nativeSrc":"14689:6:58","nodeType":"YulIdentifier","src":"14689:6:58"}]}]},"name":"abi_decode_tuple_t_uint256_fromMemory","nativeSrc":"14537:184:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14584:9:58","nodeType":"YulTypedName","src":"14584:9:58","type":""},{"name":"dataEnd","nativeSrc":"14595:7:58","nodeType":"YulTypedName","src":"14595:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14607:6:58","nodeType":"YulTypedName","src":"14607:6:58","type":""}],"src":"14537:184:58"},{"body":{"nativeSrc":"14811:177:58","nodeType":"YulBlock","src":"14811:177:58","statements":[{"body":{"nativeSrc":"14857:16:58","nodeType":"YulBlock","src":"14857:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"14866:1:58","nodeType":"YulLiteral","src":"14866:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"14869:1:58","nodeType":"YulLiteral","src":"14869:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"14859:6:58","nodeType":"YulIdentifier","src":"14859:6:58"},"nativeSrc":"14859:12:58","nodeType":"YulFunctionCall","src":"14859:12:58"},"nativeSrc":"14859:12:58","nodeType":"YulExpressionStatement","src":"14859:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"14832:7:58","nodeType":"YulIdentifier","src":"14832:7:58"},{"name":"headStart","nativeSrc":"14841:9:58","nodeType":"YulIdentifier","src":"14841:9:58"}],"functionName":{"name":"sub","nativeSrc":"14828:3:58","nodeType":"YulIdentifier","src":"14828:3:58"},"nativeSrc":"14828:23:58","nodeType":"YulFunctionCall","src":"14828:23:58"},{"kind":"number","nativeSrc":"14853:2:58","nodeType":"YulLiteral","src":"14853:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"14824:3:58","nodeType":"YulIdentifier","src":"14824:3:58"},"nativeSrc":"14824:32:58","nodeType":"YulFunctionCall","src":"14824:32:58"},"nativeSrc":"14821:52:58","nodeType":"YulIf","src":"14821:52:58"},{"nativeSrc":"14882:36:58","nodeType":"YulVariableDeclaration","src":"14882:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"14908:9:58","nodeType":"YulIdentifier","src":"14908:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"14895:12:58","nodeType":"YulIdentifier","src":"14895:12:58"},"nativeSrc":"14895:23:58","nodeType":"YulFunctionCall","src":"14895:23:58"},"variables":[{"name":"value","nativeSrc":"14886:5:58","nodeType":"YulTypedName","src":"14886:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"14952:5:58","nodeType":"YulIdentifier","src":"14952:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"14927:24:58","nodeType":"YulIdentifier","src":"14927:24:58"},"nativeSrc":"14927:31:58","nodeType":"YulFunctionCall","src":"14927:31:58"},"nativeSrc":"14927:31:58","nodeType":"YulExpressionStatement","src":"14927:31:58"},{"nativeSrc":"14967:15:58","nodeType":"YulAssignment","src":"14967:15:58","value":{"name":"value","nativeSrc":"14977:5:58","nodeType":"YulIdentifier","src":"14977:5:58"},"variableNames":[{"name":"value0","nativeSrc":"14967:6:58","nodeType":"YulIdentifier","src":"14967:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC20_$3849","nativeSrc":"14726:262:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"14777:9:58","nodeType":"YulTypedName","src":"14777:9:58","type":""},{"name":"dataEnd","nativeSrc":"14788:7:58","nodeType":"YulTypedName","src":"14788:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"14800:6:58","nodeType":"YulTypedName","src":"14800:6:58","type":""}],"src":"14726:262:58"},{"body":{"nativeSrc":"15122:198:58","nodeType":"YulBlock","src":"15122:198:58","statements":[{"nativeSrc":"15132:26:58","nodeType":"YulAssignment","src":"15132:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"15144:9:58","nodeType":"YulIdentifier","src":"15144:9:58"},{"kind":"number","nativeSrc":"15155:2:58","nodeType":"YulLiteral","src":"15155:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15140:3:58","nodeType":"YulIdentifier","src":"15140:3:58"},"nativeSrc":"15140:18:58","nodeType":"YulFunctionCall","src":"15140:18:58"},"variableNames":[{"name":"tail","nativeSrc":"15132:4:58","nodeType":"YulIdentifier","src":"15132:4:58"}]},{"nativeSrc":"15167:52:58","nodeType":"YulVariableDeclaration","src":"15167:52:58","value":{"kind":"number","nativeSrc":"15177:42:58","nodeType":"YulLiteral","src":"15177:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"15171:2:58","nodeType":"YulTypedName","src":"15171:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15235:9:58","nodeType":"YulIdentifier","src":"15235:9:58"},{"arguments":[{"name":"value0","nativeSrc":"15250:6:58","nodeType":"YulIdentifier","src":"15250:6:58"},{"name":"_1","nativeSrc":"15258:2:58","nodeType":"YulIdentifier","src":"15258:2:58"}],"functionName":{"name":"and","nativeSrc":"15246:3:58","nodeType":"YulIdentifier","src":"15246:3:58"},"nativeSrc":"15246:15:58","nodeType":"YulFunctionCall","src":"15246:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15228:6:58","nodeType":"YulIdentifier","src":"15228:6:58"},"nativeSrc":"15228:34:58","nodeType":"YulFunctionCall","src":"15228:34:58"},"nativeSrc":"15228:34:58","nodeType":"YulExpressionStatement","src":"15228:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15282:9:58","nodeType":"YulIdentifier","src":"15282:9:58"},{"kind":"number","nativeSrc":"15293:2:58","nodeType":"YulLiteral","src":"15293:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15278:3:58","nodeType":"YulIdentifier","src":"15278:3:58"},"nativeSrc":"15278:18:58","nodeType":"YulFunctionCall","src":"15278:18:58"},{"arguments":[{"name":"value1","nativeSrc":"15302:6:58","nodeType":"YulIdentifier","src":"15302:6:58"},{"name":"_1","nativeSrc":"15310:2:58","nodeType":"YulIdentifier","src":"15310:2:58"}],"functionName":{"name":"and","nativeSrc":"15298:3:58","nodeType":"YulIdentifier","src":"15298:3:58"},"nativeSrc":"15298:15:58","nodeType":"YulFunctionCall","src":"15298:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15271:6:58","nodeType":"YulIdentifier","src":"15271:6:58"},"nativeSrc":"15271:43:58","nodeType":"YulFunctionCall","src":"15271:43:58"},"nativeSrc":"15271:43:58","nodeType":"YulExpressionStatement","src":"15271:43:58"}]},"name":"abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed","nativeSrc":"14993:327:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15083:9:58","nodeType":"YulTypedName","src":"15083:9:58","type":""},{"name":"value1","nativeSrc":"15094:6:58","nodeType":"YulTypedName","src":"15094:6:58","type":""},{"name":"value0","nativeSrc":"15102:6:58","nodeType":"YulTypedName","src":"15102:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15113:4:58","nodeType":"YulTypedName","src":"15113:4:58","type":""}],"src":"14993:327:58"},{"body":{"nativeSrc":"15554:329:58","nodeType":"YulBlock","src":"15554:329:58","statements":[{"nativeSrc":"15564:27:58","nodeType":"YulAssignment","src":"15564:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"15576:9:58","nodeType":"YulIdentifier","src":"15576:9:58"},{"kind":"number","nativeSrc":"15587:3:58","nodeType":"YulLiteral","src":"15587:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"15572:3:58","nodeType":"YulIdentifier","src":"15572:3:58"},"nativeSrc":"15572:19:58","nodeType":"YulFunctionCall","src":"15572:19:58"},"variableNames":[{"name":"tail","nativeSrc":"15564:4:58","nodeType":"YulIdentifier","src":"15564:4:58"}]},{"nativeSrc":"15600:52:58","nodeType":"YulVariableDeclaration","src":"15600:52:58","value":{"kind":"number","nativeSrc":"15610:42:58","nodeType":"YulLiteral","src":"15610:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"15604:2:58","nodeType":"YulTypedName","src":"15604:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"15668:9:58","nodeType":"YulIdentifier","src":"15668:9:58"},{"arguments":[{"name":"value0","nativeSrc":"15683:6:58","nodeType":"YulIdentifier","src":"15683:6:58"},{"name":"_1","nativeSrc":"15691:2:58","nodeType":"YulIdentifier","src":"15691:2:58"}],"functionName":{"name":"and","nativeSrc":"15679:3:58","nodeType":"YulIdentifier","src":"15679:3:58"},"nativeSrc":"15679:15:58","nodeType":"YulFunctionCall","src":"15679:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15661:6:58","nodeType":"YulIdentifier","src":"15661:6:58"},"nativeSrc":"15661:34:58","nodeType":"YulFunctionCall","src":"15661:34:58"},"nativeSrc":"15661:34:58","nodeType":"YulExpressionStatement","src":"15661:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15715:9:58","nodeType":"YulIdentifier","src":"15715:9:58"},{"kind":"number","nativeSrc":"15726:2:58","nodeType":"YulLiteral","src":"15726:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"15711:3:58","nodeType":"YulIdentifier","src":"15711:3:58"},"nativeSrc":"15711:18:58","nodeType":"YulFunctionCall","src":"15711:18:58"},{"arguments":[{"name":"value1","nativeSrc":"15735:6:58","nodeType":"YulIdentifier","src":"15735:6:58"},{"name":"_1","nativeSrc":"15743:2:58","nodeType":"YulIdentifier","src":"15743:2:58"}],"functionName":{"name":"and","nativeSrc":"15731:3:58","nodeType":"YulIdentifier","src":"15731:3:58"},"nativeSrc":"15731:15:58","nodeType":"YulFunctionCall","src":"15731:15:58"}],"functionName":{"name":"mstore","nativeSrc":"15704:6:58","nodeType":"YulIdentifier","src":"15704:6:58"},"nativeSrc":"15704:43:58","nodeType":"YulFunctionCall","src":"15704:43:58"},"nativeSrc":"15704:43:58","nodeType":"YulExpressionStatement","src":"15704:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15767:9:58","nodeType":"YulIdentifier","src":"15767:9:58"},{"kind":"number","nativeSrc":"15778:2:58","nodeType":"YulLiteral","src":"15778:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"15763:3:58","nodeType":"YulIdentifier","src":"15763:3:58"},"nativeSrc":"15763:18:58","nodeType":"YulFunctionCall","src":"15763:18:58"},{"name":"value2","nativeSrc":"15783:6:58","nodeType":"YulIdentifier","src":"15783:6:58"}],"functionName":{"name":"mstore","nativeSrc":"15756:6:58","nodeType":"YulIdentifier","src":"15756:6:58"},"nativeSrc":"15756:34:58","nodeType":"YulFunctionCall","src":"15756:34:58"},"nativeSrc":"15756:34:58","nodeType":"YulExpressionStatement","src":"15756:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15810:9:58","nodeType":"YulIdentifier","src":"15810:9:58"},{"kind":"number","nativeSrc":"15821:2:58","nodeType":"YulLiteral","src":"15821:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"15806:3:58","nodeType":"YulIdentifier","src":"15806:3:58"},"nativeSrc":"15806:18:58","nodeType":"YulFunctionCall","src":"15806:18:58"},{"name":"value3","nativeSrc":"15826:6:58","nodeType":"YulIdentifier","src":"15826:6:58"}],"functionName":{"name":"mstore","nativeSrc":"15799:6:58","nodeType":"YulIdentifier","src":"15799:6:58"},"nativeSrc":"15799:34:58","nodeType":"YulFunctionCall","src":"15799:34:58"},"nativeSrc":"15799:34:58","nodeType":"YulExpressionStatement","src":"15799:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"15853:9:58","nodeType":"YulIdentifier","src":"15853:9:58"},{"kind":"number","nativeSrc":"15864:3:58","nodeType":"YulLiteral","src":"15864:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"15849:3:58","nodeType":"YulIdentifier","src":"15849:3:58"},"nativeSrc":"15849:19:58","nodeType":"YulFunctionCall","src":"15849:19:58"},{"name":"value4","nativeSrc":"15870:6:58","nodeType":"YulIdentifier","src":"15870:6:58"}],"functionName":{"name":"mstore","nativeSrc":"15842:6:58","nodeType":"YulIdentifier","src":"15842:6:58"},"nativeSrc":"15842:35:58","nodeType":"YulFunctionCall","src":"15842:35:58"},"nativeSrc":"15842:35:58","nodeType":"YulExpressionStatement","src":"15842:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"15325:558:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"15491:9:58","nodeType":"YulTypedName","src":"15491:9:58","type":""},{"name":"value4","nativeSrc":"15502:6:58","nodeType":"YulTypedName","src":"15502:6:58","type":""},{"name":"value3","nativeSrc":"15510:6:58","nodeType":"YulTypedName","src":"15510:6:58","type":""},{"name":"value2","nativeSrc":"15518:6:58","nodeType":"YulTypedName","src":"15518:6:58","type":""},{"name":"value1","nativeSrc":"15526:6:58","nodeType":"YulTypedName","src":"15526:6:58","type":""},{"name":"value0","nativeSrc":"15534:6:58","nodeType":"YulTypedName","src":"15534:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"15545:4:58","nodeType":"YulTypedName","src":"15545:4:58","type":""}],"src":"15325:558:58"},{"body":{"nativeSrc":"16109:329:58","nodeType":"YulBlock","src":"16109:329:58","statements":[{"nativeSrc":"16119:27:58","nodeType":"YulAssignment","src":"16119:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"16131:9:58","nodeType":"YulIdentifier","src":"16131:9:58"},{"kind":"number","nativeSrc":"16142:3:58","nodeType":"YulLiteral","src":"16142:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16127:3:58","nodeType":"YulIdentifier","src":"16127:3:58"},"nativeSrc":"16127:19:58","nodeType":"YulFunctionCall","src":"16127:19:58"},"variableNames":[{"name":"tail","nativeSrc":"16119:4:58","nodeType":"YulIdentifier","src":"16119:4:58"}]},{"nativeSrc":"16155:52:58","nodeType":"YulVariableDeclaration","src":"16155:52:58","value":{"kind":"number","nativeSrc":"16165:42:58","nodeType":"YulLiteral","src":"16165:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"16159:2:58","nodeType":"YulTypedName","src":"16159:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16223:9:58","nodeType":"YulIdentifier","src":"16223:9:58"},{"arguments":[{"name":"value0","nativeSrc":"16238:6:58","nodeType":"YulIdentifier","src":"16238:6:58"},{"name":"_1","nativeSrc":"16246:2:58","nodeType":"YulIdentifier","src":"16246:2:58"}],"functionName":{"name":"and","nativeSrc":"16234:3:58","nodeType":"YulIdentifier","src":"16234:3:58"},"nativeSrc":"16234:15:58","nodeType":"YulFunctionCall","src":"16234:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16216:6:58","nodeType":"YulIdentifier","src":"16216:6:58"},"nativeSrc":"16216:34:58","nodeType":"YulFunctionCall","src":"16216:34:58"},"nativeSrc":"16216:34:58","nodeType":"YulExpressionStatement","src":"16216:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16270:9:58","nodeType":"YulIdentifier","src":"16270:9:58"},{"kind":"number","nativeSrc":"16281:2:58","nodeType":"YulLiteral","src":"16281:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16266:3:58","nodeType":"YulIdentifier","src":"16266:3:58"},"nativeSrc":"16266:18:58","nodeType":"YulFunctionCall","src":"16266:18:58"},{"arguments":[{"name":"value1","nativeSrc":"16290:6:58","nodeType":"YulIdentifier","src":"16290:6:58"},{"name":"_1","nativeSrc":"16298:2:58","nodeType":"YulIdentifier","src":"16298:2:58"}],"functionName":{"name":"and","nativeSrc":"16286:3:58","nodeType":"YulIdentifier","src":"16286:3:58"},"nativeSrc":"16286:15:58","nodeType":"YulFunctionCall","src":"16286:15:58"}],"functionName":{"name":"mstore","nativeSrc":"16259:6:58","nodeType":"YulIdentifier","src":"16259:6:58"},"nativeSrc":"16259:43:58","nodeType":"YulFunctionCall","src":"16259:43:58"},"nativeSrc":"16259:43:58","nodeType":"YulExpressionStatement","src":"16259:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16322:9:58","nodeType":"YulIdentifier","src":"16322:9:58"},{"kind":"number","nativeSrc":"16333:2:58","nodeType":"YulLiteral","src":"16333:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16318:3:58","nodeType":"YulIdentifier","src":"16318:3:58"},"nativeSrc":"16318:18:58","nodeType":"YulFunctionCall","src":"16318:18:58"},{"name":"value2","nativeSrc":"16338:6:58","nodeType":"YulIdentifier","src":"16338:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16311:6:58","nodeType":"YulIdentifier","src":"16311:6:58"},"nativeSrc":"16311:34:58","nodeType":"YulFunctionCall","src":"16311:34:58"},"nativeSrc":"16311:34:58","nodeType":"YulExpressionStatement","src":"16311:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16365:9:58","nodeType":"YulIdentifier","src":"16365:9:58"},{"kind":"number","nativeSrc":"16376:2:58","nodeType":"YulLiteral","src":"16376:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"16361:3:58","nodeType":"YulIdentifier","src":"16361:3:58"},"nativeSrc":"16361:18:58","nodeType":"YulFunctionCall","src":"16361:18:58"},{"name":"value3","nativeSrc":"16381:6:58","nodeType":"YulIdentifier","src":"16381:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16354:6:58","nodeType":"YulIdentifier","src":"16354:6:58"},"nativeSrc":"16354:34:58","nodeType":"YulFunctionCall","src":"16354:34:58"},"nativeSrc":"16354:34:58","nodeType":"YulExpressionStatement","src":"16354:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16408:9:58","nodeType":"YulIdentifier","src":"16408:9:58"},{"kind":"number","nativeSrc":"16419:3:58","nodeType":"YulLiteral","src":"16419:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"16404:3:58","nodeType":"YulIdentifier","src":"16404:3:58"},"nativeSrc":"16404:19:58","nodeType":"YulFunctionCall","src":"16404:19:58"},{"name":"value4","nativeSrc":"16425:6:58","nodeType":"YulIdentifier","src":"16425:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16397:6:58","nodeType":"YulIdentifier","src":"16397:6:58"},"nativeSrc":"16397:35:58","nodeType":"YulFunctionCall","src":"16397:35:58"},"nativeSrc":"16397:35:58","nodeType":"YulExpressionStatement","src":"16397:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"15888:550:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16046:9:58","nodeType":"YulTypedName","src":"16046:9:58","type":""},{"name":"value4","nativeSrc":"16057:6:58","nodeType":"YulTypedName","src":"16057:6:58","type":""},{"name":"value3","nativeSrc":"16065:6:58","nodeType":"YulTypedName","src":"16065:6:58","type":""},{"name":"value2","nativeSrc":"16073:6:58","nodeType":"YulTypedName","src":"16073:6:58","type":""},{"name":"value1","nativeSrc":"16081:6:58","nodeType":"YulTypedName","src":"16081:6:58","type":""},{"name":"value0","nativeSrc":"16089:6:58","nodeType":"YulTypedName","src":"16089:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16100:4:58","nodeType":"YulTypedName","src":"16100:4:58","type":""}],"src":"15888:550:58"},{"body":{"nativeSrc":"16580:168:58","nodeType":"YulBlock","src":"16580:168:58","statements":[{"nativeSrc":"16590:26:58","nodeType":"YulAssignment","src":"16590:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"16602:9:58","nodeType":"YulIdentifier","src":"16602:9:58"},{"kind":"number","nativeSrc":"16613:2:58","nodeType":"YulLiteral","src":"16613:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"16598:3:58","nodeType":"YulIdentifier","src":"16598:3:58"},"nativeSrc":"16598:18:58","nodeType":"YulFunctionCall","src":"16598:18:58"},"variableNames":[{"name":"tail","nativeSrc":"16590:4:58","nodeType":"YulIdentifier","src":"16590:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"16632:9:58","nodeType":"YulIdentifier","src":"16632:9:58"},{"arguments":[{"name":"value0","nativeSrc":"16647:6:58","nodeType":"YulIdentifier","src":"16647:6:58"},{"kind":"number","nativeSrc":"16655:42:58","nodeType":"YulLiteral","src":"16655:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"16643:3:58","nodeType":"YulIdentifier","src":"16643:3:58"},"nativeSrc":"16643:55:58","nodeType":"YulFunctionCall","src":"16643:55:58"}],"functionName":{"name":"mstore","nativeSrc":"16625:6:58","nodeType":"YulIdentifier","src":"16625:6:58"},"nativeSrc":"16625:74:58","nodeType":"YulFunctionCall","src":"16625:74:58"},"nativeSrc":"16625:74:58","nodeType":"YulExpressionStatement","src":"16625:74:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"16719:9:58","nodeType":"YulIdentifier","src":"16719:9:58"},{"kind":"number","nativeSrc":"16730:2:58","nodeType":"YulLiteral","src":"16730:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"16715:3:58","nodeType":"YulIdentifier","src":"16715:3:58"},"nativeSrc":"16715:18:58","nodeType":"YulFunctionCall","src":"16715:18:58"},{"name":"value1","nativeSrc":"16735:6:58","nodeType":"YulIdentifier","src":"16735:6:58"}],"functionName":{"name":"mstore","nativeSrc":"16708:6:58","nodeType":"YulIdentifier","src":"16708:6:58"},"nativeSrc":"16708:34:58","nodeType":"YulFunctionCall","src":"16708:34:58"},"nativeSrc":"16708:34:58","nodeType":"YulExpressionStatement","src":"16708:34:58"}]},"name":"abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed","nativeSrc":"16443:305:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16541:9:58","nodeType":"YulTypedName","src":"16541:9:58","type":""},{"name":"value1","nativeSrc":"16552:6:58","nodeType":"YulTypedName","src":"16552:6:58","type":""},{"name":"value0","nativeSrc":"16560:6:58","nodeType":"YulTypedName","src":"16560:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16571:4:58","nodeType":"YulTypedName","src":"16571:4:58","type":""}],"src":"16443:305:58"},{"body":{"nativeSrc":"16966:329:58","nodeType":"YulBlock","src":"16966:329:58","statements":[{"nativeSrc":"16976:27:58","nodeType":"YulAssignment","src":"16976:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"16988:9:58","nodeType":"YulIdentifier","src":"16988:9:58"},{"kind":"number","nativeSrc":"16999:3:58","nodeType":"YulLiteral","src":"16999:3:58","type":"","value":"160"}],"functionName":{"name":"add","nativeSrc":"16984:3:58","nodeType":"YulIdentifier","src":"16984:3:58"},"nativeSrc":"16984:19:58","nodeType":"YulFunctionCall","src":"16984:19:58"},"variableNames":[{"name":"tail","nativeSrc":"16976:4:58","nodeType":"YulIdentifier","src":"16976:4:58"}]},{"nativeSrc":"17012:52:58","nodeType":"YulVariableDeclaration","src":"17012:52:58","value":{"kind":"number","nativeSrc":"17022:42:58","nodeType":"YulLiteral","src":"17022:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17016:2:58","nodeType":"YulTypedName","src":"17016:2:58","type":""}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17080:9:58","nodeType":"YulIdentifier","src":"17080:9:58"},{"arguments":[{"name":"value0","nativeSrc":"17095:6:58","nodeType":"YulIdentifier","src":"17095:6:58"},{"name":"_1","nativeSrc":"17103:2:58","nodeType":"YulIdentifier","src":"17103:2:58"}],"functionName":{"name":"and","nativeSrc":"17091:3:58","nodeType":"YulIdentifier","src":"17091:3:58"},"nativeSrc":"17091:15:58","nodeType":"YulFunctionCall","src":"17091:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17073:6:58","nodeType":"YulIdentifier","src":"17073:6:58"},"nativeSrc":"17073:34:58","nodeType":"YulFunctionCall","src":"17073:34:58"},"nativeSrc":"17073:34:58","nodeType":"YulExpressionStatement","src":"17073:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17127:9:58","nodeType":"YulIdentifier","src":"17127:9:58"},{"kind":"number","nativeSrc":"17138:2:58","nodeType":"YulLiteral","src":"17138:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17123:3:58","nodeType":"YulIdentifier","src":"17123:3:58"},"nativeSrc":"17123:18:58","nodeType":"YulFunctionCall","src":"17123:18:58"},{"arguments":[{"name":"value1","nativeSrc":"17147:6:58","nodeType":"YulIdentifier","src":"17147:6:58"},{"name":"_1","nativeSrc":"17155:2:58","nodeType":"YulIdentifier","src":"17155:2:58"}],"functionName":{"name":"and","nativeSrc":"17143:3:58","nodeType":"YulIdentifier","src":"17143:3:58"},"nativeSrc":"17143:15:58","nodeType":"YulFunctionCall","src":"17143:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17116:6:58","nodeType":"YulIdentifier","src":"17116:6:58"},"nativeSrc":"17116:43:58","nodeType":"YulFunctionCall","src":"17116:43:58"},"nativeSrc":"17116:43:58","nodeType":"YulExpressionStatement","src":"17116:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17179:9:58","nodeType":"YulIdentifier","src":"17179:9:58"},{"kind":"number","nativeSrc":"17190:2:58","nodeType":"YulLiteral","src":"17190:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17175:3:58","nodeType":"YulIdentifier","src":"17175:3:58"},"nativeSrc":"17175:18:58","nodeType":"YulFunctionCall","src":"17175:18:58"},{"name":"value2","nativeSrc":"17195:6:58","nodeType":"YulIdentifier","src":"17195:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17168:6:58","nodeType":"YulIdentifier","src":"17168:6:58"},"nativeSrc":"17168:34:58","nodeType":"YulFunctionCall","src":"17168:34:58"},"nativeSrc":"17168:34:58","nodeType":"YulExpressionStatement","src":"17168:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17222:9:58","nodeType":"YulIdentifier","src":"17222:9:58"},{"kind":"number","nativeSrc":"17233:2:58","nodeType":"YulLiteral","src":"17233:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17218:3:58","nodeType":"YulIdentifier","src":"17218:3:58"},"nativeSrc":"17218:18:58","nodeType":"YulFunctionCall","src":"17218:18:58"},{"name":"value3","nativeSrc":"17238:6:58","nodeType":"YulIdentifier","src":"17238:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17211:6:58","nodeType":"YulIdentifier","src":"17211:6:58"},"nativeSrc":"17211:34:58","nodeType":"YulFunctionCall","src":"17211:34:58"},"nativeSrc":"17211:34:58","nodeType":"YulExpressionStatement","src":"17211:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17265:9:58","nodeType":"YulIdentifier","src":"17265:9:58"},{"kind":"number","nativeSrc":"17276:3:58","nodeType":"YulLiteral","src":"17276:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"17261:3:58","nodeType":"YulIdentifier","src":"17261:3:58"},"nativeSrc":"17261:19:58","nodeType":"YulFunctionCall","src":"17261:19:58"},{"name":"value4","nativeSrc":"17282:6:58","nodeType":"YulIdentifier","src":"17282:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17254:6:58","nodeType":"YulIdentifier","src":"17254:6:58"},"nativeSrc":"17254:35:58","nodeType":"YulFunctionCall","src":"17254:35:58"},"nativeSrc":"17254:35:58","nodeType":"YulExpressionStatement","src":"17254:35:58"}]},"name":"abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed","nativeSrc":"16753:542:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"16903:9:58","nodeType":"YulTypedName","src":"16903:9:58","type":""},{"name":"value4","nativeSrc":"16914:6:58","nodeType":"YulTypedName","src":"16914:6:58","type":""},{"name":"value3","nativeSrc":"16922:6:58","nodeType":"YulTypedName","src":"16922:6:58","type":""},{"name":"value2","nativeSrc":"16930:6:58","nodeType":"YulTypedName","src":"16930:6:58","type":""},{"name":"value1","nativeSrc":"16938:6:58","nodeType":"YulTypedName","src":"16938:6:58","type":""},{"name":"value0","nativeSrc":"16946:6:58","nodeType":"YulTypedName","src":"16946:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"16957:4:58","nodeType":"YulTypedName","src":"16957:4:58","type":""}],"src":"16753:542:58"},{"body":{"nativeSrc":"17386:177:58","nodeType":"YulBlock","src":"17386:177:58","statements":[{"body":{"nativeSrc":"17432:16:58","nodeType":"YulBlock","src":"17432:16:58","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"17441:1:58","nodeType":"YulLiteral","src":"17441:1:58","type":"","value":"0"},{"kind":"number","nativeSrc":"17444:1:58","nodeType":"YulLiteral","src":"17444:1:58","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"17434:6:58","nodeType":"YulIdentifier","src":"17434:6:58"},"nativeSrc":"17434:12:58","nodeType":"YulFunctionCall","src":"17434:12:58"},"nativeSrc":"17434:12:58","nodeType":"YulExpressionStatement","src":"17434:12:58"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"17407:7:58","nodeType":"YulIdentifier","src":"17407:7:58"},{"name":"headStart","nativeSrc":"17416:9:58","nodeType":"YulIdentifier","src":"17416:9:58"}],"functionName":{"name":"sub","nativeSrc":"17403:3:58","nodeType":"YulIdentifier","src":"17403:3:58"},"nativeSrc":"17403:23:58","nodeType":"YulFunctionCall","src":"17403:23:58"},{"kind":"number","nativeSrc":"17428:2:58","nodeType":"YulLiteral","src":"17428:2:58","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"17399:3:58","nodeType":"YulIdentifier","src":"17399:3:58"},"nativeSrc":"17399:32:58","nodeType":"YulFunctionCall","src":"17399:32:58"},"nativeSrc":"17396:52:58","nodeType":"YulIf","src":"17396:52:58"},{"nativeSrc":"17457:36:58","nodeType":"YulVariableDeclaration","src":"17457:36:58","value":{"arguments":[{"name":"headStart","nativeSrc":"17483:9:58","nodeType":"YulIdentifier","src":"17483:9:58"}],"functionName":{"name":"calldataload","nativeSrc":"17470:12:58","nodeType":"YulIdentifier","src":"17470:12:58"},"nativeSrc":"17470:23:58","nodeType":"YulFunctionCall","src":"17470:23:58"},"variables":[{"name":"value","nativeSrc":"17461:5:58","nodeType":"YulTypedName","src":"17461:5:58","type":""}]},{"expression":{"arguments":[{"name":"value","nativeSrc":"17527:5:58","nodeType":"YulIdentifier","src":"17527:5:58"}],"functionName":{"name":"validator_revert_address","nativeSrc":"17502:24:58","nodeType":"YulIdentifier","src":"17502:24:58"},"nativeSrc":"17502:31:58","nodeType":"YulFunctionCall","src":"17502:31:58"},"nativeSrc":"17502:31:58","nodeType":"YulExpressionStatement","src":"17502:31:58"},{"nativeSrc":"17542:15:58","nodeType":"YulAssignment","src":"17542:15:58","value":{"name":"value","nativeSrc":"17552:5:58","nodeType":"YulIdentifier","src":"17552:5:58"},"variableNames":[{"name":"value0","nativeSrc":"17542:6:58","nodeType":"YulIdentifier","src":"17542:6:58"}]}]},"name":"abi_decode_tuple_t_contract$_IERC721_$3768","nativeSrc":"17300:263:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17352:9:58","nodeType":"YulTypedName","src":"17352:9:58","type":""},{"name":"dataEnd","nativeSrc":"17363:7:58","nodeType":"YulTypedName","src":"17363:7:58","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"17375:6:58","nodeType":"YulTypedName","src":"17375:6:58","type":""}],"src":"17300:263:58"},{"body":{"nativeSrc":"17725:241:58","nodeType":"YulBlock","src":"17725:241:58","statements":[{"nativeSrc":"17735:26:58","nodeType":"YulAssignment","src":"17735:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"17747:9:58","nodeType":"YulIdentifier","src":"17747:9:58"},{"kind":"number","nativeSrc":"17758:2:58","nodeType":"YulLiteral","src":"17758:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"17743:3:58","nodeType":"YulIdentifier","src":"17743:3:58"},"nativeSrc":"17743:18:58","nodeType":"YulFunctionCall","src":"17743:18:58"},"variableNames":[{"name":"tail","nativeSrc":"17735:4:58","nodeType":"YulIdentifier","src":"17735:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"17777:9:58","nodeType":"YulIdentifier","src":"17777:9:58"},{"name":"value0","nativeSrc":"17788:6:58","nodeType":"YulIdentifier","src":"17788:6:58"}],"functionName":{"name":"mstore","nativeSrc":"17770:6:58","nodeType":"YulIdentifier","src":"17770:6:58"},"nativeSrc":"17770:25:58","nodeType":"YulFunctionCall","src":"17770:25:58"},"nativeSrc":"17770:25:58","nodeType":"YulExpressionStatement","src":"17770:25:58"},{"nativeSrc":"17804:52:58","nodeType":"YulVariableDeclaration","src":"17804:52:58","value":{"kind":"number","nativeSrc":"17814:42:58","nodeType":"YulLiteral","src":"17814:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"17808:2:58","nodeType":"YulTypedName","src":"17808:2:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17876:9:58","nodeType":"YulIdentifier","src":"17876:9:58"},{"kind":"number","nativeSrc":"17887:2:58","nodeType":"YulLiteral","src":"17887:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"17872:3:58","nodeType":"YulIdentifier","src":"17872:3:58"},"nativeSrc":"17872:18:58","nodeType":"YulFunctionCall","src":"17872:18:58"},{"arguments":[{"name":"value1","nativeSrc":"17896:6:58","nodeType":"YulIdentifier","src":"17896:6:58"},{"name":"_1","nativeSrc":"17904:2:58","nodeType":"YulIdentifier","src":"17904:2:58"}],"functionName":{"name":"and","nativeSrc":"17892:3:58","nodeType":"YulIdentifier","src":"17892:3:58"},"nativeSrc":"17892:15:58","nodeType":"YulFunctionCall","src":"17892:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17865:6:58","nodeType":"YulIdentifier","src":"17865:6:58"},"nativeSrc":"17865:43:58","nodeType":"YulFunctionCall","src":"17865:43:58"},"nativeSrc":"17865:43:58","nodeType":"YulExpressionStatement","src":"17865:43:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"17928:9:58","nodeType":"YulIdentifier","src":"17928:9:58"},{"kind":"number","nativeSrc":"17939:2:58","nodeType":"YulLiteral","src":"17939:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"17924:3:58","nodeType":"YulIdentifier","src":"17924:3:58"},"nativeSrc":"17924:18:58","nodeType":"YulFunctionCall","src":"17924:18:58"},{"arguments":[{"name":"value2","nativeSrc":"17948:6:58","nodeType":"YulIdentifier","src":"17948:6:58"},{"name":"_1","nativeSrc":"17956:2:58","nodeType":"YulIdentifier","src":"17956:2:58"}],"functionName":{"name":"and","nativeSrc":"17944:3:58","nodeType":"YulIdentifier","src":"17944:3:58"},"nativeSrc":"17944:15:58","nodeType":"YulFunctionCall","src":"17944:15:58"}],"functionName":{"name":"mstore","nativeSrc":"17917:6:58","nodeType":"YulIdentifier","src":"17917:6:58"},"nativeSrc":"17917:43:58","nodeType":"YulFunctionCall","src":"17917:43:58"},"nativeSrc":"17917:43:58","nodeType":"YulExpressionStatement","src":"17917:43:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed","nativeSrc":"17568:398:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"17678:9:58","nodeType":"YulTypedName","src":"17678:9:58","type":""},{"name":"value2","nativeSrc":"17689:6:58","nodeType":"YulTypedName","src":"17689:6:58","type":""},{"name":"value1","nativeSrc":"17697:6:58","nodeType":"YulTypedName","src":"17697:6:58","type":""},{"name":"value0","nativeSrc":"17705:6:58","nodeType":"YulTypedName","src":"17705:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"17716:4:58","nodeType":"YulTypedName","src":"17716:4:58","type":""}],"src":"17568:398:58"},{"body":{"nativeSrc":"18080:125:58","nodeType":"YulBlock","src":"18080:125:58","statements":[{"nativeSrc":"18090:26:58","nodeType":"YulAssignment","src":"18090:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18102:9:58","nodeType":"YulIdentifier","src":"18102:9:58"},{"kind":"number","nativeSrc":"18113:2:58","nodeType":"YulLiteral","src":"18113:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18098:3:58","nodeType":"YulIdentifier","src":"18098:3:58"},"nativeSrc":"18098:18:58","nodeType":"YulFunctionCall","src":"18098:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18090:4:58","nodeType":"YulIdentifier","src":"18090:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18132:9:58","nodeType":"YulIdentifier","src":"18132:9:58"},{"arguments":[{"name":"value0","nativeSrc":"18147:6:58","nodeType":"YulIdentifier","src":"18147:6:58"},{"kind":"number","nativeSrc":"18155:42:58","nodeType":"YulLiteral","src":"18155:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"18143:3:58","nodeType":"YulIdentifier","src":"18143:3:58"},"nativeSrc":"18143:55:58","nodeType":"YulFunctionCall","src":"18143:55:58"}],"functionName":{"name":"mstore","nativeSrc":"18125:6:58","nodeType":"YulIdentifier","src":"18125:6:58"},"nativeSrc":"18125:74:58","nodeType":"YulFunctionCall","src":"18125:74:58"},"nativeSrc":"18125:74:58","nodeType":"YulExpressionStatement","src":"18125:74:58"}]},"name":"abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed","nativeSrc":"17971:234:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18049:9:58","nodeType":"YulTypedName","src":"18049:9:58","type":""},{"name":"value0","nativeSrc":"18060:6:58","nodeType":"YulTypedName","src":"18060:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18071:4:58","nodeType":"YulTypedName","src":"18071:4:58","type":""}],"src":"17971:234:58"},{"body":{"nativeSrc":"18339:168:58","nodeType":"YulBlock","src":"18339:168:58","statements":[{"nativeSrc":"18349:26:58","nodeType":"YulAssignment","src":"18349:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18361:9:58","nodeType":"YulIdentifier","src":"18361:9:58"},{"kind":"number","nativeSrc":"18372:2:58","nodeType":"YulLiteral","src":"18372:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18357:3:58","nodeType":"YulIdentifier","src":"18357:3:58"},"nativeSrc":"18357:18:58","nodeType":"YulFunctionCall","src":"18357:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18349:4:58","nodeType":"YulIdentifier","src":"18349:4:58"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18391:9:58","nodeType":"YulIdentifier","src":"18391:9:58"},{"name":"value0","nativeSrc":"18402:6:58","nodeType":"YulIdentifier","src":"18402:6:58"}],"functionName":{"name":"mstore","nativeSrc":"18384:6:58","nodeType":"YulIdentifier","src":"18384:6:58"},"nativeSrc":"18384:25:58","nodeType":"YulFunctionCall","src":"18384:25:58"},"nativeSrc":"18384:25:58","nodeType":"YulExpressionStatement","src":"18384:25:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18429:9:58","nodeType":"YulIdentifier","src":"18429:9:58"},{"kind":"number","nativeSrc":"18440:2:58","nodeType":"YulLiteral","src":"18440:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18425:3:58","nodeType":"YulIdentifier","src":"18425:3:58"},"nativeSrc":"18425:18:58","nodeType":"YulFunctionCall","src":"18425:18:58"},{"arguments":[{"name":"value1","nativeSrc":"18449:6:58","nodeType":"YulIdentifier","src":"18449:6:58"},{"kind":"number","nativeSrc":"18457:42:58","nodeType":"YulLiteral","src":"18457:42:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"18445:3:58","nodeType":"YulIdentifier","src":"18445:3:58"},"nativeSrc":"18445:55:58","nodeType":"YulFunctionCall","src":"18445:55:58"}],"functionName":{"name":"mstore","nativeSrc":"18418:6:58","nodeType":"YulIdentifier","src":"18418:6:58"},"nativeSrc":"18418:83:58","nodeType":"YulFunctionCall","src":"18418:83:58"},"nativeSrc":"18418:83:58","nodeType":"YulExpressionStatement","src":"18418:83:58"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"18210:297:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18300:9:58","nodeType":"YulTypedName","src":"18300:9:58","type":""},{"name":"value1","nativeSrc":"18311:6:58","nodeType":"YulTypedName","src":"18311:6:58","type":""},{"name":"value0","nativeSrc":"18319:6:58","nodeType":"YulTypedName","src":"18319:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18330:4:58","nodeType":"YulTypedName","src":"18330:4:58","type":""}],"src":"18210:297:58"},{"body":{"nativeSrc":"18686:179:58","nodeType":"YulBlock","src":"18686:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"18703:9:58","nodeType":"YulIdentifier","src":"18703:9:58"},{"kind":"number","nativeSrc":"18714:2:58","nodeType":"YulLiteral","src":"18714:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"18696:6:58","nodeType":"YulIdentifier","src":"18696:6:58"},"nativeSrc":"18696:21:58","nodeType":"YulFunctionCall","src":"18696:21:58"},"nativeSrc":"18696:21:58","nodeType":"YulExpressionStatement","src":"18696:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18737:9:58","nodeType":"YulIdentifier","src":"18737:9:58"},{"kind":"number","nativeSrc":"18748:2:58","nodeType":"YulLiteral","src":"18748:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"18733:3:58","nodeType":"YulIdentifier","src":"18733:3:58"},"nativeSrc":"18733:18:58","nodeType":"YulFunctionCall","src":"18733:18:58"},{"kind":"number","nativeSrc":"18753:2:58","nodeType":"YulLiteral","src":"18753:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"18726:6:58","nodeType":"YulIdentifier","src":"18726:6:58"},"nativeSrc":"18726:30:58","nodeType":"YulFunctionCall","src":"18726:30:58"},"nativeSrc":"18726:30:58","nodeType":"YulExpressionStatement","src":"18726:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"18776:9:58","nodeType":"YulIdentifier","src":"18776:9:58"},{"kind":"number","nativeSrc":"18787:2:58","nodeType":"YulLiteral","src":"18787:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"18772:3:58","nodeType":"YulIdentifier","src":"18772:3:58"},"nativeSrc":"18772:18:58","nodeType":"YulFunctionCall","src":"18772:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","kind":"string","nativeSrc":"18792:31:58","nodeType":"YulLiteral","src":"18792:31:58","type":"","value":"Address: insufficient balance"}],"functionName":{"name":"mstore","nativeSrc":"18765:6:58","nodeType":"YulIdentifier","src":"18765:6:58"},"nativeSrc":"18765:59:58","nodeType":"YulFunctionCall","src":"18765:59:58"},"nativeSrc":"18765:59:58","nodeType":"YulExpressionStatement","src":"18765:59:58"},{"nativeSrc":"18833:26:58","nodeType":"YulAssignment","src":"18833:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"18845:9:58","nodeType":"YulIdentifier","src":"18845:9:58"},{"kind":"number","nativeSrc":"18856:2:58","nodeType":"YulLiteral","src":"18856:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"18841:3:58","nodeType":"YulIdentifier","src":"18841:3:58"},"nativeSrc":"18841:18:58","nodeType":"YulFunctionCall","src":"18841:18:58"},"variableNames":[{"name":"tail","nativeSrc":"18833:4:58","nodeType":"YulIdentifier","src":"18833:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"18512:353:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"18663:9:58","nodeType":"YulTypedName","src":"18663:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"18677:4:58","nodeType":"YulTypedName","src":"18677:4:58","type":""}],"src":"18512:353:58"},{"body":{"nativeSrc":"19061:14:58","nodeType":"YulBlock","src":"19061:14:58","statements":[{"nativeSrc":"19063:10:58","nodeType":"YulAssignment","src":"19063:10:58","value":{"name":"pos","nativeSrc":"19070:3:58","nodeType":"YulIdentifier","src":"19070:3:58"},"variableNames":[{"name":"end","nativeSrc":"19063:3:58","nodeType":"YulIdentifier","src":"19063:3:58"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"18870:205:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"19045:3:58","nodeType":"YulTypedName","src":"19045:3:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"19053:3:58","nodeType":"YulTypedName","src":"19053:3:58","type":""}],"src":"18870:205:58"},{"body":{"nativeSrc":"19254:248:58","nodeType":"YulBlock","src":"19254:248:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19271:9:58","nodeType":"YulIdentifier","src":"19271:9:58"},{"kind":"number","nativeSrc":"19282:2:58","nodeType":"YulLiteral","src":"19282:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19264:6:58","nodeType":"YulIdentifier","src":"19264:6:58"},"nativeSrc":"19264:21:58","nodeType":"YulFunctionCall","src":"19264:21:58"},"nativeSrc":"19264:21:58","nodeType":"YulExpressionStatement","src":"19264:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19305:9:58","nodeType":"YulIdentifier","src":"19305:9:58"},{"kind":"number","nativeSrc":"19316:2:58","nodeType":"YulLiteral","src":"19316:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19301:3:58","nodeType":"YulIdentifier","src":"19301:3:58"},"nativeSrc":"19301:18:58","nodeType":"YulFunctionCall","src":"19301:18:58"},{"kind":"number","nativeSrc":"19321:2:58","nodeType":"YulLiteral","src":"19321:2:58","type":"","value":"58"}],"functionName":{"name":"mstore","nativeSrc":"19294:6:58","nodeType":"YulIdentifier","src":"19294:6:58"},"nativeSrc":"19294:30:58","nodeType":"YulFunctionCall","src":"19294:30:58"},"nativeSrc":"19294:30:58","nodeType":"YulExpressionStatement","src":"19294:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19344:9:58","nodeType":"YulIdentifier","src":"19344:9:58"},{"kind":"number","nativeSrc":"19355:2:58","nodeType":"YulLiteral","src":"19355:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19340:3:58","nodeType":"YulIdentifier","src":"19340:3:58"},"nativeSrc":"19340:18:58","nodeType":"YulFunctionCall","src":"19340:18:58"},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c2072","kind":"string","nativeSrc":"19360:34:58","nodeType":"YulLiteral","src":"19360:34:58","type":"","value":"Address: unable to send value, r"}],"functionName":{"name":"mstore","nativeSrc":"19333:6:58","nodeType":"YulIdentifier","src":"19333:6:58"},"nativeSrc":"19333:62:58","nodeType":"YulFunctionCall","src":"19333:62:58"},"nativeSrc":"19333:62:58","nodeType":"YulExpressionStatement","src":"19333:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19415:9:58","nodeType":"YulIdentifier","src":"19415:9:58"},{"kind":"number","nativeSrc":"19426:2:58","nodeType":"YulLiteral","src":"19426:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19411:3:58","nodeType":"YulIdentifier","src":"19411:3:58"},"nativeSrc":"19411:18:58","nodeType":"YulFunctionCall","src":"19411:18:58"},{"hexValue":"6563697069656e74206d61792068617665207265766572746564","kind":"string","nativeSrc":"19431:28:58","nodeType":"YulLiteral","src":"19431:28:58","type":"","value":"ecipient may have reverted"}],"functionName":{"name":"mstore","nativeSrc":"19404:6:58","nodeType":"YulIdentifier","src":"19404:6:58"},"nativeSrc":"19404:56:58","nodeType":"YulFunctionCall","src":"19404:56:58"},"nativeSrc":"19404:56:58","nodeType":"YulExpressionStatement","src":"19404:56:58"},{"nativeSrc":"19469:27:58","nodeType":"YulAssignment","src":"19469:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"19481:9:58","nodeType":"YulIdentifier","src":"19481:9:58"},{"kind":"number","nativeSrc":"19492:3:58","nodeType":"YulLiteral","src":"19492:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19477:3:58","nodeType":"YulIdentifier","src":"19477:3:58"},"nativeSrc":"19477:19:58","nodeType":"YulFunctionCall","src":"19477:19:58"},"variableNames":[{"name":"tail","nativeSrc":"19469:4:58","nodeType":"YulIdentifier","src":"19469:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19080:422:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19231:9:58","nodeType":"YulTypedName","src":"19231:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19245:4:58","nodeType":"YulTypedName","src":"19245:4:58","type":""}],"src":"19080:422:58"},{"body":{"nativeSrc":"19681:232:58","nodeType":"YulBlock","src":"19681:232:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"19698:9:58","nodeType":"YulIdentifier","src":"19698:9:58"},{"kind":"number","nativeSrc":"19709:2:58","nodeType":"YulLiteral","src":"19709:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"19691:6:58","nodeType":"YulIdentifier","src":"19691:6:58"},"nativeSrc":"19691:21:58","nodeType":"YulFunctionCall","src":"19691:21:58"},"nativeSrc":"19691:21:58","nodeType":"YulExpressionStatement","src":"19691:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19732:9:58","nodeType":"YulIdentifier","src":"19732:9:58"},{"kind":"number","nativeSrc":"19743:2:58","nodeType":"YulLiteral","src":"19743:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"19728:3:58","nodeType":"YulIdentifier","src":"19728:3:58"},"nativeSrc":"19728:18:58","nodeType":"YulFunctionCall","src":"19728:18:58"},{"kind":"number","nativeSrc":"19748:2:58","nodeType":"YulLiteral","src":"19748:2:58","type":"","value":"42"}],"functionName":{"name":"mstore","nativeSrc":"19721:6:58","nodeType":"YulIdentifier","src":"19721:6:58"},"nativeSrc":"19721:30:58","nodeType":"YulFunctionCall","src":"19721:30:58"},"nativeSrc":"19721:30:58","nodeType":"YulExpressionStatement","src":"19721:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19771:9:58","nodeType":"YulIdentifier","src":"19771:9:58"},{"kind":"number","nativeSrc":"19782:2:58","nodeType":"YulLiteral","src":"19782:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"19767:3:58","nodeType":"YulIdentifier","src":"19767:3:58"},"nativeSrc":"19767:18:58","nodeType":"YulFunctionCall","src":"19767:18:58"},{"hexValue":"5361666545524332303a204552433230206f7065726174696f6e20646964206e","kind":"string","nativeSrc":"19787:34:58","nodeType":"YulLiteral","src":"19787:34:58","type":"","value":"SafeERC20: ERC20 operation did n"}],"functionName":{"name":"mstore","nativeSrc":"19760:6:58","nodeType":"YulIdentifier","src":"19760:6:58"},"nativeSrc":"19760:62:58","nodeType":"YulFunctionCall","src":"19760:62:58"},"nativeSrc":"19760:62:58","nodeType":"YulExpressionStatement","src":"19760:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"19842:9:58","nodeType":"YulIdentifier","src":"19842:9:58"},{"kind":"number","nativeSrc":"19853:2:58","nodeType":"YulLiteral","src":"19853:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"19838:3:58","nodeType":"YulIdentifier","src":"19838:3:58"},"nativeSrc":"19838:18:58","nodeType":"YulFunctionCall","src":"19838:18:58"},{"hexValue":"6f742073756363656564","kind":"string","nativeSrc":"19858:12:58","nodeType":"YulLiteral","src":"19858:12:58","type":"","value":"ot succeed"}],"functionName":{"name":"mstore","nativeSrc":"19831:6:58","nodeType":"YulIdentifier","src":"19831:6:58"},"nativeSrc":"19831:40:58","nodeType":"YulFunctionCall","src":"19831:40:58"},"nativeSrc":"19831:40:58","nodeType":"YulExpressionStatement","src":"19831:40:58"},{"nativeSrc":"19880:27:58","nodeType":"YulAssignment","src":"19880:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"19892:9:58","nodeType":"YulIdentifier","src":"19892:9:58"},{"kind":"number","nativeSrc":"19903:3:58","nodeType":"YulLiteral","src":"19903:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"19888:3:58","nodeType":"YulIdentifier","src":"19888:3:58"},"nativeSrc":"19888:19:58","nodeType":"YulFunctionCall","src":"19888:19:58"},"variableNames":[{"name":"tail","nativeSrc":"19880:4:58","nodeType":"YulIdentifier","src":"19880:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19507:406:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"19658:9:58","nodeType":"YulTypedName","src":"19658:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"19672:4:58","nodeType":"YulTypedName","src":"19672:4:58","type":""}],"src":"19507:406:58"},{"body":{"nativeSrc":"20092:228:58","nodeType":"YulBlock","src":"20092:228:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"20109:9:58","nodeType":"YulIdentifier","src":"20109:9:58"},{"kind":"number","nativeSrc":"20120:2:58","nodeType":"YulLiteral","src":"20120:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"20102:6:58","nodeType":"YulIdentifier","src":"20102:6:58"},"nativeSrc":"20102:21:58","nodeType":"YulFunctionCall","src":"20102:21:58"},"nativeSrc":"20102:21:58","nodeType":"YulExpressionStatement","src":"20102:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20143:9:58","nodeType":"YulIdentifier","src":"20143:9:58"},{"kind":"number","nativeSrc":"20154:2:58","nodeType":"YulLiteral","src":"20154:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20139:3:58","nodeType":"YulIdentifier","src":"20139:3:58"},"nativeSrc":"20139:18:58","nodeType":"YulFunctionCall","src":"20139:18:58"},{"kind":"number","nativeSrc":"20159:2:58","nodeType":"YulLiteral","src":"20159:2:58","type":"","value":"38"}],"functionName":{"name":"mstore","nativeSrc":"20132:6:58","nodeType":"YulIdentifier","src":"20132:6:58"},"nativeSrc":"20132:30:58","nodeType":"YulFunctionCall","src":"20132:30:58"},"nativeSrc":"20132:30:58","nodeType":"YulExpressionStatement","src":"20132:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20182:9:58","nodeType":"YulIdentifier","src":"20182:9:58"},{"kind":"number","nativeSrc":"20193:2:58","nodeType":"YulLiteral","src":"20193:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"20178:3:58","nodeType":"YulIdentifier","src":"20178:3:58"},"nativeSrc":"20178:18:58","nodeType":"YulFunctionCall","src":"20178:18:58"},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f","kind":"string","nativeSrc":"20198:34:58","nodeType":"YulLiteral","src":"20198:34:58","type":"","value":"Address: insufficient balance fo"}],"functionName":{"name":"mstore","nativeSrc":"20171:6:58","nodeType":"YulIdentifier","src":"20171:6:58"},"nativeSrc":"20171:62:58","nodeType":"YulFunctionCall","src":"20171:62:58"},"nativeSrc":"20171:62:58","nodeType":"YulExpressionStatement","src":"20171:62:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"20253:9:58","nodeType":"YulIdentifier","src":"20253:9:58"},{"kind":"number","nativeSrc":"20264:2:58","nodeType":"YulLiteral","src":"20264:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"20249:3:58","nodeType":"YulIdentifier","src":"20249:3:58"},"nativeSrc":"20249:18:58","nodeType":"YulFunctionCall","src":"20249:18:58"},{"hexValue":"722063616c6c","kind":"string","nativeSrc":"20269:8:58","nodeType":"YulLiteral","src":"20269:8:58","type":"","value":"r call"}],"functionName":{"name":"mstore","nativeSrc":"20242:6:58","nodeType":"YulIdentifier","src":"20242:6:58"},"nativeSrc":"20242:36:58","nodeType":"YulFunctionCall","src":"20242:36:58"},"nativeSrc":"20242:36:58","nodeType":"YulExpressionStatement","src":"20242:36:58"},{"nativeSrc":"20287:27:58","nodeType":"YulAssignment","src":"20287:27:58","value":{"arguments":[{"name":"headStart","nativeSrc":"20299:9:58","nodeType":"YulIdentifier","src":"20299:9:58"},{"kind":"number","nativeSrc":"20310:3:58","nodeType":"YulLiteral","src":"20310:3:58","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"20295:3:58","nodeType":"YulIdentifier","src":"20295:3:58"},"nativeSrc":"20295:19:58","nodeType":"YulFunctionCall","src":"20295:19:58"},"variableNames":[{"name":"tail","nativeSrc":"20287:4:58","nodeType":"YulIdentifier","src":"20287:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"19918:402:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"20069:9:58","nodeType":"YulTypedName","src":"20069:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"20083:4:58","nodeType":"YulTypedName","src":"20083:4:58","type":""}],"src":"19918:402:58"},{"body":{"nativeSrc":"20391:184:58","nodeType":"YulBlock","src":"20391:184:58","statements":[{"nativeSrc":"20401:10:58","nodeType":"YulVariableDeclaration","src":"20401:10:58","value":{"kind":"number","nativeSrc":"20410:1:58","nodeType":"YulLiteral","src":"20410:1:58","type":"","value":"0"},"variables":[{"name":"i","nativeSrc":"20405:1:58","nodeType":"YulTypedName","src":"20405:1:58","type":""}]},{"body":{"nativeSrc":"20470:63:58","nodeType":"YulBlock","src":"20470:63:58","statements":[{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"20495:3:58","nodeType":"YulIdentifier","src":"20495:3:58"},{"name":"i","nativeSrc":"20500:1:58","nodeType":"YulIdentifier","src":"20500:1:58"}],"functionName":{"name":"add","nativeSrc":"20491:3:58","nodeType":"YulIdentifier","src":"20491:3:58"},"nativeSrc":"20491:11:58","nodeType":"YulFunctionCall","src":"20491:11:58"},{"arguments":[{"arguments":[{"name":"src","nativeSrc":"20514:3:58","nodeType":"YulIdentifier","src":"20514:3:58"},{"name":"i","nativeSrc":"20519:1:58","nodeType":"YulIdentifier","src":"20519:1:58"}],"functionName":{"name":"add","nativeSrc":"20510:3:58","nodeType":"YulIdentifier","src":"20510:3:58"},"nativeSrc":"20510:11:58","nodeType":"YulFunctionCall","src":"20510:11:58"}],"functionName":{"name":"mload","nativeSrc":"20504:5:58","nodeType":"YulIdentifier","src":"20504:5:58"},"nativeSrc":"20504:18:58","nodeType":"YulFunctionCall","src":"20504:18:58"}],"functionName":{"name":"mstore","nativeSrc":"20484:6:58","nodeType":"YulIdentifier","src":"20484:6:58"},"nativeSrc":"20484:39:58","nodeType":"YulFunctionCall","src":"20484:39:58"},"nativeSrc":"20484:39:58","nodeType":"YulExpressionStatement","src":"20484:39:58"}]},"condition":{"arguments":[{"name":"i","nativeSrc":"20431:1:58","nodeType":"YulIdentifier","src":"20431:1:58"},{"name":"length","nativeSrc":"20434:6:58","nodeType":"YulIdentifier","src":"20434:6:58"}],"functionName":{"name":"lt","nativeSrc":"20428:2:58","nodeType":"YulIdentifier","src":"20428:2:58"},"nativeSrc":"20428:13:58","nodeType":"YulFunctionCall","src":"20428:13:58"},"nativeSrc":"20420:113:58","nodeType":"YulForLoop","post":{"nativeSrc":"20442:19:58","nodeType":"YulBlock","src":"20442:19:58","statements":[{"nativeSrc":"20444:15:58","nodeType":"YulAssignment","src":"20444:15:58","value":{"arguments":[{"name":"i","nativeSrc":"20453:1:58","nodeType":"YulIdentifier","src":"20453:1:58"},{"kind":"number","nativeSrc":"20456:2:58","nodeType":"YulLiteral","src":"20456:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"20449:3:58","nodeType":"YulIdentifier","src":"20449:3:58"},"nativeSrc":"20449:10:58","nodeType":"YulFunctionCall","src":"20449:10:58"},"variableNames":[{"name":"i","nativeSrc":"20444:1:58","nodeType":"YulIdentifier","src":"20444:1:58"}]}]},"pre":{"nativeSrc":"20424:3:58","nodeType":"YulBlock","src":"20424:3:58","statements":[]},"src":"20420:113:58"},{"expression":{"arguments":[{"arguments":[{"name":"dst","nativeSrc":"20553:3:58","nodeType":"YulIdentifier","src":"20553:3:58"},{"name":"length","nativeSrc":"20558:6:58","nodeType":"YulIdentifier","src":"20558:6:58"}],"functionName":{"name":"add","nativeSrc":"20549:3:58","nodeType":"YulIdentifier","src":"20549:3:58"},"nativeSrc":"20549:16:58","nodeType":"YulFunctionCall","src":"20549:16:58"},{"kind":"number","nativeSrc":"20567:1:58","nodeType":"YulLiteral","src":"20567:1:58","type":"","value":"0"}],"functionName":{"name":"mstore","nativeSrc":"20542:6:58","nodeType":"YulIdentifier","src":"20542:6:58"},"nativeSrc":"20542:27:58","nodeType":"YulFunctionCall","src":"20542:27:58"},"nativeSrc":"20542:27:58","nodeType":"YulExpressionStatement","src":"20542:27:58"}]},"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"20325:250:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"src","nativeSrc":"20369:3:58","nodeType":"YulTypedName","src":"20369:3:58","type":""},{"name":"dst","nativeSrc":"20374:3:58","nodeType":"YulTypedName","src":"20374:3:58","type":""},{"name":"length","nativeSrc":"20379:6:58","nodeType":"YulTypedName","src":"20379:6:58","type":""}],"src":"20325:250:58"},{"body":{"nativeSrc":"20717:150:58","nodeType":"YulBlock","src":"20717:150:58","statements":[{"nativeSrc":"20727:27:58","nodeType":"YulVariableDeclaration","src":"20727:27:58","value":{"arguments":[{"name":"value0","nativeSrc":"20747:6:58","nodeType":"YulIdentifier","src":"20747:6:58"}],"functionName":{"name":"mload","nativeSrc":"20741:5:58","nodeType":"YulIdentifier","src":"20741:5:58"},"nativeSrc":"20741:13:58","nodeType":"YulFunctionCall","src":"20741:13:58"},"variables":[{"name":"length","nativeSrc":"20731:6:58","nodeType":"YulTypedName","src":"20731:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"20802:6:58","nodeType":"YulIdentifier","src":"20802:6:58"},{"kind":"number","nativeSrc":"20810:4:58","nodeType":"YulLiteral","src":"20810:4:58","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"20798:3:58","nodeType":"YulIdentifier","src":"20798:3:58"},"nativeSrc":"20798:17:58","nodeType":"YulFunctionCall","src":"20798:17:58"},{"name":"pos","nativeSrc":"20817:3:58","nodeType":"YulIdentifier","src":"20817:3:58"},{"name":"length","nativeSrc":"20822:6:58","nodeType":"YulIdentifier","src":"20822:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"20763:34:58","nodeType":"YulIdentifier","src":"20763:34:58"},"nativeSrc":"20763:66:58","nodeType":"YulFunctionCall","src":"20763:66:58"},"nativeSrc":"20763:66:58","nodeType":"YulExpressionStatement","src":"20763:66:58"},{"nativeSrc":"20838:23:58","nodeType":"YulAssignment","src":"20838:23:58","value":{"arguments":[{"name":"pos","nativeSrc":"20849:3:58","nodeType":"YulIdentifier","src":"20849:3:58"},{"name":"length","nativeSrc":"20854:6:58","nodeType":"YulIdentifier","src":"20854:6:58"}],"functionName":{"name":"add","nativeSrc":"20845:3:58","nodeType":"YulIdentifier","src":"20845:3:58"},"nativeSrc":"20845:16:58","nodeType":"YulFunctionCall","src":"20845:16:58"},"variableNames":[{"name":"end","nativeSrc":"20838:3:58","nodeType":"YulIdentifier","src":"20838:3:58"}]}]},"name":"abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"20580:287:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"20693:3:58","nodeType":"YulTypedName","src":"20693:3:58","type":""},{"name":"value0","nativeSrc":"20698:6:58","nodeType":"YulTypedName","src":"20698:6:58","type":""}],"returnVariables":[{"name":"end","nativeSrc":"20709:3:58","nodeType":"YulTypedName","src":"20709:3:58","type":""}],"src":"20580:287:58"},{"body":{"nativeSrc":"21046:179:58","nodeType":"YulBlock","src":"21046:179:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21063:9:58","nodeType":"YulIdentifier","src":"21063:9:58"},{"kind":"number","nativeSrc":"21074:2:58","nodeType":"YulLiteral","src":"21074:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21056:6:58","nodeType":"YulIdentifier","src":"21056:6:58"},"nativeSrc":"21056:21:58","nodeType":"YulFunctionCall","src":"21056:21:58"},"nativeSrc":"21056:21:58","nodeType":"YulExpressionStatement","src":"21056:21:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21097:9:58","nodeType":"YulIdentifier","src":"21097:9:58"},{"kind":"number","nativeSrc":"21108:2:58","nodeType":"YulLiteral","src":"21108:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21093:3:58","nodeType":"YulIdentifier","src":"21093:3:58"},"nativeSrc":"21093:18:58","nodeType":"YulFunctionCall","src":"21093:18:58"},{"kind":"number","nativeSrc":"21113:2:58","nodeType":"YulLiteral","src":"21113:2:58","type":"","value":"29"}],"functionName":{"name":"mstore","nativeSrc":"21086:6:58","nodeType":"YulIdentifier","src":"21086:6:58"},"nativeSrc":"21086:30:58","nodeType":"YulFunctionCall","src":"21086:30:58"},"nativeSrc":"21086:30:58","nodeType":"YulExpressionStatement","src":"21086:30:58"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21136:9:58","nodeType":"YulIdentifier","src":"21136:9:58"},{"kind":"number","nativeSrc":"21147:2:58","nodeType":"YulLiteral","src":"21147:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21132:3:58","nodeType":"YulIdentifier","src":"21132:3:58"},"nativeSrc":"21132:18:58","nodeType":"YulFunctionCall","src":"21132:18:58"},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","kind":"string","nativeSrc":"21152:31:58","nodeType":"YulLiteral","src":"21152:31:58","type":"","value":"Address: call to non-contract"}],"functionName":{"name":"mstore","nativeSrc":"21125:6:58","nodeType":"YulIdentifier","src":"21125:6:58"},"nativeSrc":"21125:59:58","nodeType":"YulFunctionCall","src":"21125:59:58"},"nativeSrc":"21125:59:58","nodeType":"YulExpressionStatement","src":"21125:59:58"},{"nativeSrc":"21193:26:58","nodeType":"YulAssignment","src":"21193:26:58","value":{"arguments":[{"name":"headStart","nativeSrc":"21205:9:58","nodeType":"YulIdentifier","src":"21205:9:58"},{"kind":"number","nativeSrc":"21216:2:58","nodeType":"YulLiteral","src":"21216:2:58","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"21201:3:58","nodeType":"YulIdentifier","src":"21201:3:58"},"nativeSrc":"21201:18:58","nodeType":"YulFunctionCall","src":"21201:18:58"},"variableNames":[{"name":"tail","nativeSrc":"21193:4:58","nodeType":"YulIdentifier","src":"21193:4:58"}]}]},"name":"abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"20872:353:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21023:9:58","nodeType":"YulTypedName","src":"21023:9:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21037:4:58","nodeType":"YulTypedName","src":"21037:4:58","type":""}],"src":"20872:353:58"},{"body":{"nativeSrc":"21351:334:58","nodeType":"YulBlock","src":"21351:334:58","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"21368:9:58","nodeType":"YulIdentifier","src":"21368:9:58"},{"kind":"number","nativeSrc":"21379:2:58","nodeType":"YulLiteral","src":"21379:2:58","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"21361:6:58","nodeType":"YulIdentifier","src":"21361:6:58"},"nativeSrc":"21361:21:58","nodeType":"YulFunctionCall","src":"21361:21:58"},"nativeSrc":"21361:21:58","nodeType":"YulExpressionStatement","src":"21361:21:58"},{"nativeSrc":"21391:27:58","nodeType":"YulVariableDeclaration","src":"21391:27:58","value":{"arguments":[{"name":"value0","nativeSrc":"21411:6:58","nodeType":"YulIdentifier","src":"21411:6:58"}],"functionName":{"name":"mload","nativeSrc":"21405:5:58","nodeType":"YulIdentifier","src":"21405:5:58"},"nativeSrc":"21405:13:58","nodeType":"YulFunctionCall","src":"21405:13:58"},"variables":[{"name":"length","nativeSrc":"21395:6:58","nodeType":"YulTypedName","src":"21395:6:58","type":""}]},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21438:9:58","nodeType":"YulIdentifier","src":"21438:9:58"},{"kind":"number","nativeSrc":"21449:2:58","nodeType":"YulLiteral","src":"21449:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21434:3:58","nodeType":"YulIdentifier","src":"21434:3:58"},"nativeSrc":"21434:18:58","nodeType":"YulFunctionCall","src":"21434:18:58"},{"name":"length","nativeSrc":"21454:6:58","nodeType":"YulIdentifier","src":"21454:6:58"}],"functionName":{"name":"mstore","nativeSrc":"21427:6:58","nodeType":"YulIdentifier","src":"21427:6:58"},"nativeSrc":"21427:34:58","nodeType":"YulFunctionCall","src":"21427:34:58"},"nativeSrc":"21427:34:58","nodeType":"YulExpressionStatement","src":"21427:34:58"},{"expression":{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"21509:6:58","nodeType":"YulIdentifier","src":"21509:6:58"},{"kind":"number","nativeSrc":"21517:2:58","nodeType":"YulLiteral","src":"21517:2:58","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"21505:3:58","nodeType":"YulIdentifier","src":"21505:3:58"},"nativeSrc":"21505:15:58","nodeType":"YulFunctionCall","src":"21505:15:58"},{"arguments":[{"name":"headStart","nativeSrc":"21526:9:58","nodeType":"YulIdentifier","src":"21526:9:58"},{"kind":"number","nativeSrc":"21537:2:58","nodeType":"YulLiteral","src":"21537:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21522:3:58","nodeType":"YulIdentifier","src":"21522:3:58"},"nativeSrc":"21522:18:58","nodeType":"YulFunctionCall","src":"21522:18:58"},{"name":"length","nativeSrc":"21542:6:58","nodeType":"YulIdentifier","src":"21542:6:58"}],"functionName":{"name":"copy_memory_to_memory_with_cleanup","nativeSrc":"21470:34:58","nodeType":"YulIdentifier","src":"21470:34:58"},"nativeSrc":"21470:79:58","nodeType":"YulFunctionCall","src":"21470:79:58"},"nativeSrc":"21470:79:58","nodeType":"YulExpressionStatement","src":"21470:79:58"},{"nativeSrc":"21558:121:58","nodeType":"YulAssignment","src":"21558:121:58","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"21574:9:58","nodeType":"YulIdentifier","src":"21574:9:58"},{"arguments":[{"arguments":[{"name":"length","nativeSrc":"21593:6:58","nodeType":"YulIdentifier","src":"21593:6:58"},{"kind":"number","nativeSrc":"21601:2:58","nodeType":"YulLiteral","src":"21601:2:58","type":"","value":"31"}],"functionName":{"name":"add","nativeSrc":"21589:3:58","nodeType":"YulIdentifier","src":"21589:3:58"},"nativeSrc":"21589:15:58","nodeType":"YulFunctionCall","src":"21589:15:58"},{"kind":"number","nativeSrc":"21606:66:58","nodeType":"YulLiteral","src":"21606:66:58","type":"","value":"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"}],"functionName":{"name":"and","nativeSrc":"21585:3:58","nodeType":"YulIdentifier","src":"21585:3:58"},"nativeSrc":"21585:88:58","nodeType":"YulFunctionCall","src":"21585:88:58"}],"functionName":{"name":"add","nativeSrc":"21570:3:58","nodeType":"YulIdentifier","src":"21570:3:58"},"nativeSrc":"21570:104:58","nodeType":"YulFunctionCall","src":"21570:104:58"},{"kind":"number","nativeSrc":"21676:2:58","nodeType":"YulLiteral","src":"21676:2:58","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"21566:3:58","nodeType":"YulIdentifier","src":"21566:3:58"},"nativeSrc":"21566:113:58","nodeType":"YulFunctionCall","src":"21566:113:58"},"variableNames":[{"name":"tail","nativeSrc":"21558:4:58","nodeType":"YulIdentifier","src":"21558:4:58"}]}]},"name":"abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"21230:455:58","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"21320:9:58","nodeType":"YulTypedName","src":"21320:9:58","type":""},{"name":"value0","nativeSrc":"21331:6:58","nodeType":"YulTypedName","src":"21331:6:58","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"21342:4:58","nodeType":"YulTypedName","src":"21342:4:58","type":""}],"src":"21230:455:58"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function validator_revert_address(value)\n    {\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_bool__to_t_uint256_t_uint256_t_uint256_t_bool__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), iszero(iszero(value3)))\n    }\n    function abi_encode_tuple_t_contract$_IForwarderRegistry_$1176__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_bytes32t_address(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let value := calldataload(add(headStart, 32))\n        validator_revert_address(value)\n        value1 := value\n    }\n    function abi_decode_tuple_t_addresst_addresst_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        let value_1 := calldataload(add(headStart, 32))\n        validator_revert_address(value_1)\n        value1 := value_1\n        value2 := calldataload(add(headStart, 64))\n        let offset := calldataload(add(headStart, 96))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, length), 32), dataEnd) { revert(0, 0) }\n        value3 := add(_2, 32)\n        value4 := length\n    }\n    function abi_encode_tuple_t_bytes4__to_t_bytes4__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffff00000000000000000000000000000000000000000000000000000000))\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$3849__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_array_address_dyn_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, shl(5, length)), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptrt_array$_t_bool_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5, value6, value7\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n        let offset_3 := calldataload(add(headStart, 96))\n        if gt(offset_3, _1) { revert(0, 0) }\n        let value6_1, value7_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_3), dataEnd)\n        value6 := value6_1\n        value7 := value7_1\n    }\n    function abi_decode_tuple_t_address_payable(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC20_$3849_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address_payable__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bytes32(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptrt_array$_t_contract$_IERC721_$3768_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4, value5\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n        let offset_2 := calldataload(add(headStart, 64))\n        if gt(offset_2, _1) { revert(0, 0) }\n        let value4_1, value5_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_2), dataEnd)\n        value4 := value4_1\n        value5 := value5_1\n    }\n    function abi_decode_tuple_t_array$_t_address_payable_$dyn_calldata_ptrt_array$_t_uint256_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let value0_1, value1_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset), dataEnd)\n        value0 := value0_1\n        value1 := value1_1\n        let offset_1 := calldataload(add(headStart, 32))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_array_address_dyn_calldata(add(headStart, offset_1), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_encode_tuple_t_uint256_t_uint256__to_t_uint256_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function validator_revert_bool(value)\n    {\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        sum := add(x, y)\n        if gt(x, sum) { panic_error_0x11() }\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function abi_decode_tuple_t_bool(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_bool(value)\n        value0 := value\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_array_uint256_dyn_calldata(start, length, pos) -> end\n    {\n        mstore(pos, length)\n        if gt(length, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length_1 := shl(5, length)\n        calldatacopy(add(pos, 0x20), start, length_1)\n        end := add(add(pos, length_1), 0x20)\n    }\n    function abi_encode_tuple_t_array$_t_address_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_uint256_$dyn_calldata_ptr_t_array$_t_bool_$dyn_calldata_ptr__to_t_array$_t_address_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_uint256_$dyn_memory_ptr_t_array$_t_bool_$dyn_memory_ptr__fromStack_reversed(headStart, value7, value6, value5, value4, value3, value2, value1, value0) -> tail\n    {\n        let tail_1 := add(headStart, 128)\n        mstore(headStart, 128)\n        let pos := tail_1\n        mstore(tail_1, value1)\n        pos := add(headStart, 160)\n        let srcPtr := value0\n        let i := 0\n        for { } lt(i, value1) { i := add(i, 1) }\n        {\n            let value := calldataload(srcPtr)\n            validator_revert_address(value)\n            mstore(pos, and(value, 0xffffffffffffffffffffffffffffffffffffffff))\n            let _1 := 0x20\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        let _2 := 0x20\n        mstore(add(headStart, _2), sub(pos, headStart))\n        let tail_2 := abi_encode_array_uint256_dyn_calldata(value2, value3, pos)\n        mstore(add(headStart, 64), sub(tail_2, headStart))\n        let tail_3 := abi_encode_array_uint256_dyn_calldata(value4, value5, tail_2)\n        mstore(add(headStart, 96), sub(tail_3, headStart))\n        let pos_1 := tail_3\n        mstore(tail_3, value7)\n        pos_1 := add(tail_3, _2)\n        let srcPtr_1 := value6\n        let i_1 := 0\n        for { } lt(i_1, value7) { i_1 := add(i_1, 1) }\n        {\n            let value_1 := calldataload(srcPtr_1)\n            validator_revert_bool(value_1)\n            mstore(pos_1, iszero(iszero(value_1)))\n            pos_1 := add(pos_1, _2)\n            srcPtr_1 := add(srcPtr_1, _2)\n        }\n        tail := pos_1\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_contract$_IERC20_$3849(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_address_t_address__to_t_address_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_rational_0_by_1_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_rational_0_by_1__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_encode_tuple_t_address_payable_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256_t_uint256_t_uint256__to_t_address_t_address_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value4, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 160)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n        mstore(add(headStart, 128), value4)\n    }\n    function abi_decode_tuple_t_contract$_IERC721_$3768(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        validator_revert_address(value)\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_address_t_address__to_t_bytes32_t_address_t_address__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), and(value2, _1))\n    }\n    function abi_encode_tuple_t_address_payable__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: insufficient balance\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos) -> end\n    { end := pos }\n    function abi_encode_tuple_t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 58)\n        mstore(add(headStart, 64), \"Address: unable to send value, r\")\n        mstore(add(headStart, 96), \"ecipient may have reverted\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function copy_memory_to_memory_with_cleanup(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        mstore(add(dst, length), 0)\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory_with_cleanup(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory_with_cleanup(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n}","id":58,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"1040":[{"length":32,"start":631},{"length":32,"start":871},{"length":32,"start":7792},{"length":32,"start":7928}],"4849":[{"length":32,"start":937},{"length":32,"start":1745},{"length":32,"start":1971},{"length":32,"start":3197},{"length":32,"start":3327},{"length":32,"start":4531}],"4851":[{"length":32,"start":821},{"length":32,"start":1690}]},"linkReferences":{},"object":"608060405234801561000f575f80fd5b50600436106101d1575f3560e01c806373c8a958116100fe578063ad6b333b1161009e578063d547741f1161006e578063d547741f146104a7578063f2fde38b146104ba578063f7ba94bd146104cd578063ff50abdc146104e0575f80fd5b8063ad6b333b14610470578063af7d6ca314610478578063b5bd3eb91461048b578063c3666c3614610494575f80fd5b80638bb9c5bf116100d95780638bb9c5bf1461043b5780638da5cb5b1461044e5780638de17b741461045657806391d148541461045d575f80fd5b806373c8a958146104185780638488bb4e1461042b5780638b785d4914610433575f80fd5b80633ccfd60b116101745780635df2dcbc116101445780635df2dcbc146103a4578063687f34e0146103cb5780636b8f9c43146103de57806372c16a24146103f1575f80fd5b80633ccfd60b146102e45780634fc35859146102ec5780635188730214610330578063572b6c0514610357575f80fd5b806320babb92116101af57806320babb921461021b5780632b4c9f16146102755780632cc82655146102bc5780632f2ff15d146102d1575f80fd5b806301ffc9a7146101d5578063055ad42e146101fd578063148c2b5a14610213575b5f80fd5b6101e86101e33660046122f1565b6104e9565b60405190151581526020015b60405180910390f35b6102055f5481565b6040519081526020016101f4565b610205600281565b610253610229366004612351565b600160208190525f9182526040909120805491810154600282015460039092015490919060ff1684565b60408051948552602085019390935291830152151560608201526080016101f4565b7f00000000000000000000000000000000000000000000000000000000000000005b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016101f4565b6102cf6102ca36600461236c565b610502565b005b6102cf6102df366004612383565b610599565b6102cf6105cb565b6102ff6102fa3660046123b1565b610825565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016101f4565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b6101e8610365366004612351565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff90811691161490565b6102977f000000000000000000000000000000000000000000000000000000000000000081565b6102cf6103d9366004612490565b610908565b6102cf6103ec366004612351565b610c14565b6102057f7370656e6465720000000000000000000000000000000000000000000000000081565b6102cf61042636600461254b565b610c34565b610297610e0c565b610205600381565b6102cf61044936600461236c565b610e37565b610297610e52565b6102055f81565b6101e861046b366004612383565b610e5e565b610205600181565b6102cf6104863660046125de565b610ea7565b61020560025481565b6102cf6104a236600461254b565b6112da565b6102cf6104b5366004612383565b61144b565b6102cf6104c8366004612351565b611478565b6102cf6104db366004612608565b611493565b61020560035481565b5f6104fc826104f6611550565b9061157d565b92915050565b61051b61050d611654565b61051561165d565b9061168a565b600381111561055e576040517f96666719000000000000000000000000000000000000000000000000000000008152600481018290526024015b60405180910390fd5b5f819055604051600181527f63dd78a2037d9ff47ab1e6cf980c9d036bb47de0b5812d2203bfa833f35e0a189060200160405180910390a150565b5f6105a2611654565b90506105b08161051561165d565b6105c68383836105be6116f9565b929190611726565b505050565b60035f5414610613575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600360048201526024810191909152604401610555565b5f61061c611654565b90505f60015f61062a611654565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040015f208054909150801561073d575f82556040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528481166024830152604482018390527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd906064016020604051808303815f875af1158015610717573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061073b919061267c565b505b6002820154801561081f575f83600201819055508060035f82825461076291906126c4565b90915550506040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8581166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063a9059cbb906044016020604051808303815f875af11580156107f9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061081d919061267c565b505b50505050565b5f60015f541461086e575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600160048201526024810191909152604401610555565b73ffffffffffffffffffffffffffffffffffffffff85165f908152600160205260408120600281018054919287926108a79084906126d7565b925050819055508460035f8282546108bf91906126d7565b925050819055508460025f8282546108d791906126d7565b909155507f4fc358590000000000000000000000000000000000000000000000000000000098975050505050505050565b8685811415806109185750808414155b806109235750808214155b1561095a576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f541561099f575f80546040517f7c9bb66300000000000000000000000000000000000000000000000000000000815260048101929092526024820152604401610555565b6109aa61050d611654565b5f5b818114610bc3575f8a8a838181106109c6576109c66126ea565b90506020020160208101906109db9190612351565b905073ffffffffffffffffffffffffffffffffffffffff8116610a2a576040517f9c89d57f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f898984818110610a3d57610a3d6126ea565b905060200201359050805f03610a97576040517fd49c192700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83166004820152602401610555565b73ffffffffffffffffffffffffffffffffffffffff82165f908152600160205260409020805415610b0c576040517f6dbaa9b400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610555565b5f898986818110610b1f57610b1f6126ea565b85855560200291909101356001840181905591508890508786818110610b4757610b476126ea565b9050602002016020810190610b5c9190612717565b6003830180547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055610b9781846126d7565b60025f828254610ba791906126d7565b925050819055505050505080610bbc90612732565b90506109ac565b507f44fbb8621bc7a734e344e0d7f6b84824cf97e0d8d611f9f8502e42ff0b1dee438989898989898989604051610c019897969594939291906127b2565b60405180910390a1505050505050505050565b610c1f61050d611654565b610c3181610c2b6117fa565b90611827565b50565b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201525f919073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a0823190602401602060405180830381865afa158015610cc2573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ce69190612877565b610cf091906126c4565b90505f805b85811015610daf577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16878783818110610d4657610d466126ea565b9050602002016020810190610d5b9190612351565b73ffffffffffffffffffffffffffffffffffffffff1603610d9d57848482818110610d8857610d886126ea565b9050602002013582610d9a91906126d7565b91505b80610da781612732565b915050610cf5565b5081811115610df4576040517f7ce4d19d0000000000000000000000000000000000000000000000000000000081526004810183905260248101829052604401610555565b610e028888888888886118eb565b5050505050505050565b5f610e32610e186117fa565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b610c31610e42611654565b82610e4b6116f9565b91906119d5565b5f610e32610e1861165d565b5f610ea08383610e6c6116f9565b5f9283526020908152604080842073ffffffffffffffffffffffffffffffffffffffff909316845291905290205460ff1690565b9392505050565b5f610eb0611654565b9050815f03610f0b576040517f09bc7f2b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff808316600483015284166024820152604401610555565b60025f5414610f53575f546040517f7c9bb663000000000000000000000000000000000000000000000000000000008152600260048201526024810191909152604401610555565b610f877f7370656e6465720000000000000000000000000000000000000000000000000082610f806116f9565b9190611a78565b73ffffffffffffffffffffffffffffffffffffffff83165f908152600160208190526040822090810154909190801561105c578481106110465784836001015f828254610fd491906126c4565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff8087168252881660208201529081018690525f6060820181905260808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a1505050505050565b5f600184015561105681866126c4565b94508091505b82545f908015611106578681106110f35786855f015f82825461107f91906126c4565b90915550506040805173ffffffffffffffffffffffffffffffffffffffff80891682528a166020820152908101859052606081018890525f60808201527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a00160405180910390a15050505050505050565b5f855561110081886126c4565b96508091505b60028501548781101561116c576040517f1734392500000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff80891660048301528a16602482015260448101899052606401610555565b87866002015f82825461117f91906126c4565b925050819055508760035f82825461119791906126c4565b909155505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663a9059cbb6111e3610e186117fa565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152602481018b90526044016020604051808303815f875af1158015611252573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611276919061267c565b506040805173ffffffffffffffffffffffffffffffffffffffff808a1682528b16602082015290810186905260608101849052608081018990527fc8832e1605166eecba94f0e3919e05a79787269b7b9f7e7b9766b187b44a7e899060a001610c01565b6112e561050d611654565b8483811415806112f55750808214155b1561132c576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e0257858582818110611347576113476126ea565b905060200201602081019061135c9190612351565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd308a8a8581811061138a5761138a6126ea565b905060200201602081019061139f9190612351565b8787868181106113b1576113b16126ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e088901b16815273ffffffffffffffffffffffffffffffffffffffff9586166004820152949093166024850152506020909102013560448201526064015f604051808303815f87803b15801561142a575f80fd5b505af115801561143c573d5f803e3d5ffd5b5050505080600101905061132e565b5f611454611654565b90506114628161051561165d565b6105c68383836114706116f9565b929190611afd565b610c31611483611654565b8261148c61165d565b9190611bc5565b61149e61050d611654565b828181146114d8576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114611548576115408484838181106114f6576114f66126ea565b9050602002013587878481811061150f5761150f6126ea565b90506020020160208101906115249190612351565b73ffffffffffffffffffffffffffffffffffffffff1690611cd8565b6001016114da565b505050505050565b5f806104fc60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6126c4565b5f7c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016115cb57505f6104fc565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000083160161161c575060016104fc565b507fffffffff00000000000000000000000000000000000000000000000000000000165f908152602091909152604090205460ff1690565b5f610e32611e2e565b5f806104fc60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6126c4565b815473ffffffffffffffffffffffffffffffffffffffff8281169116146116f5576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82166004820152602401610555565b5050565b5f806104fc60017fc8827d3282af6f37b64c3e9e6f3ac9df286ab0bb0fccd6f8661bf19adb368b236126c4565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff1661081f575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055815187815292830152918316918101919091527f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d906060015b60405180910390a150505050565b5f806104fc60017f4fb5f8cdfbce77f22b0931a39e9f476a60a0f66524b2f379e96485471eb700ae6126c4565b73ffffffffffffffffffffffffffffffffffffffff8116611874576040517f40b539cf00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b81547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff821690811783556040519081527fdd880d24a789958a6398c99c2e54ce31bc10a638cbc42f7dd34285479ae0f8559060200160405180910390a15050565b6118f661050d611654565b8483811415806119065750808214155b1561193d576040517f6582533600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f5b818114610e02576119cd88888381811061195b5761195b6126ea565b90506020020160208101906119709190612351565b858584818110611982576119826126ea565b9050602002013588888581811061199b5761199b6126ea565b90506020020160208101906119b09190612351565b73ffffffffffffffffffffffffffffffffffffffff169190611f72565b60010161193f565b6119e0838284611a78565b5f8181526020848152604080832073ffffffffffffffffffffffffffffffffffffffff86168085529083529281902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016905580518481529182018390528101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9060600160405180910390a1505050565b5f8281526020848152604080832073ffffffffffffffffffffffffffffffffffffffff8516845290915290205460ff166105c6576040517f7aa728820000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82166024820152604401610555565b5f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8616845290915290205460ff161561081f575f8381526020858152604080832073ffffffffffffffffffffffffffffffffffffffff8681168086529184529382902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055815187815292830152918316918101919091527ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b906060016117ec565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114611c32576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152602401610555565b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461081f5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a350505050565b80471015611d42576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610555565b5f8273ffffffffffffffffffffffffffffffffffffffff16826040515f6040518083038185875af1925050503d805f8114611d98576040519150601f19603f3d011682016040523d82523d5f602084013e611d9d565b606091505b50509050806105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610555565b5f33321480611e3d5750601836105b15611e4757503390565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffec36013560601c7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16331480611f6157506040517f8929a8ca00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301523360248301527f00000000000000000000000000000000000000000000000000000000000000001690638929a8ca90604401602060405180830381865afa158015611f3d573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190611f61919061267c565b15611f6b57919050565b3391505090565b6040805173ffffffffffffffffffffffffffffffffffffffff848116602483015260448083018590528351808403909101815260649092018352602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905283518085019094528084527f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564908401526105c6928692915f9161203c9185169084906120e8565b905080515f148061205c57508080602001905181019061205c919061267c565b6105c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610555565b60606120f684845f856120fe565b949350505050565b606082471015612190576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610555565b5f808673ffffffffffffffffffffffffffffffffffffffff1685876040516121b891906128b0565b5f6040518083038185875af1925050503d805f81146121f2576040519150601f19603f3d011682016040523d82523d5f602084013e6121f7565b606091505b509150915061220887838387612213565b979650505050505050565b606083156122a85782515f036122a15773ffffffffffffffffffffffffffffffffffffffff85163b6122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610555565b50816120f6565b6120f683838151156122bd5781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161055591906128cb565b5f60208284031215612301575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610ea0575f80fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610c31575f80fd5b5f60208284031215612361575f80fd5b8135610ea081612330565b5f6020828403121561237c575f80fd5b5035919050565b5f8060408385031215612394575f80fd5b8235915060208301356123a681612330565b809150509250929050565b5f805f805f608086880312156123c5575f80fd5b85356123d081612330565b945060208601356123e081612330565b935060408601359250606086013567ffffffffffffffff80821115612403575f80fd5b818801915088601f830112612416575f80fd5b813581811115612424575f80fd5b896020828501011115612435575f80fd5b9699959850939650602001949392505050565b5f8083601f840112612458575f80fd5b50813567ffffffffffffffff81111561246f575f80fd5b6020830191508360208260051b8501011115612489575f80fd5b9250929050565b5f805f805f805f806080898b0312156124a7575f80fd5b883567ffffffffffffffff808211156124be575f80fd5b6124ca8c838d01612448565b909a50985060208b01359150808211156124e2575f80fd5b6124ee8c838d01612448565b909850965060408b0135915080821115612506575f80fd5b6125128c838d01612448565b909650945060608b013591508082111561252a575f80fd5b506125378b828c01612448565b999c989b5096995094979396929594505050565b5f805f805f8060608789031215612560575f80fd5b863567ffffffffffffffff80821115612577575f80fd5b6125838a838b01612448565b9098509650602089013591508082111561259b575f80fd5b6125a78a838b01612448565b909650945060408901359150808211156125bf575f80fd5b506125cc89828a01612448565b979a9699509497509295939492505050565b5f80604083850312156125ef575f80fd5b82356125fa81612330565b946020939093013593505050565b5f805f806040858703121561261b575f80fd5b843567ffffffffffffffff80821115612632575f80fd5b61263e88838901612448565b90965094506020870135915080821115612656575f80fd5b5061266387828801612448565b95989497509550505050565b8015158114610c31575f80fd5b5f6020828403121561268c575f80fd5b8151610ea08161266f565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b818103818111156104fc576104fc612697565b808201808211156104fc576104fc612697565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f60208284031215612727575f80fd5b8135610ea08161266f565b5f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361276257612762612697565b5060010190565b8183525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115612799575f80fd5b8260051b80836020870137939093016020019392505050565b608080825281018890525f8960a08301825b8b8110156128015782356127d781612330565b73ffffffffffffffffffffffffffffffffffffffff168252602092830192909101906001016127c4565b506020915083810382850152612818818a8c612769565b9050838103604085015261282d81888a612769565b848103606086015285815286915082015f5b868110156128665782356128528161266f565b15158252918301919083019060010161283f565b509c9b505050505050505050505050565b5f60208284031215612887575f80fd5b5051919050565b5f5b838110156128a8578181015183820152602001612890565b50505f910152565b5f82516128c181846020870161288e565b9190910192915050565b602081525f82518060208401526128e981604085016020870161288e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea264697066735822122000856c3252ca394439aa1c15ac238579093e5e8e5a5e9f0c99539bcdc40f150264736f6c63430008150033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0xF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x1D1 JUMPI PUSH0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x73C8A958 GT PUSH2 0xFE JUMPI DUP1 PUSH4 0xAD6B333B GT PUSH2 0x9E JUMPI DUP1 PUSH4 0xD547741F GT PUSH2 0x6E JUMPI DUP1 PUSH4 0xD547741F EQ PUSH2 0x4A7 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x4BA JUMPI DUP1 PUSH4 0xF7BA94BD EQ PUSH2 0x4CD JUMPI DUP1 PUSH4 0xFF50ABDC EQ PUSH2 0x4E0 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0xAD6B333B EQ PUSH2 0x470 JUMPI DUP1 PUSH4 0xAF7D6CA3 EQ PUSH2 0x478 JUMPI DUP1 PUSH4 0xB5BD3EB9 EQ PUSH2 0x48B JUMPI DUP1 PUSH4 0xC3666C36 EQ PUSH2 0x494 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8BB9C5BF GT PUSH2 0xD9 JUMPI DUP1 PUSH4 0x8BB9C5BF EQ PUSH2 0x43B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x44E JUMPI DUP1 PUSH4 0x8DE17B74 EQ PUSH2 0x456 JUMPI DUP1 PUSH4 0x91D14854 EQ PUSH2 0x45D JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x73C8A958 EQ PUSH2 0x418 JUMPI DUP1 PUSH4 0x8488BB4E EQ PUSH2 0x42B JUMPI DUP1 PUSH4 0x8B785D49 EQ PUSH2 0x433 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B GT PUSH2 0x174 JUMPI DUP1 PUSH4 0x5DF2DCBC GT PUSH2 0x144 JUMPI DUP1 PUSH4 0x5DF2DCBC EQ PUSH2 0x3A4 JUMPI DUP1 PUSH4 0x687F34E0 EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0x6B8F9C43 EQ PUSH2 0x3DE JUMPI DUP1 PUSH4 0x72C16A24 EQ PUSH2 0x3F1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x3CCFD60B EQ PUSH2 0x2E4 JUMPI DUP1 PUSH4 0x4FC35859 EQ PUSH2 0x2EC JUMPI DUP1 PUSH4 0x51887302 EQ PUSH2 0x330 JUMPI DUP1 PUSH4 0x572B6C05 EQ PUSH2 0x357 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x20BABB92 GT PUSH2 0x1AF JUMPI DUP1 PUSH4 0x20BABB92 EQ PUSH2 0x21B JUMPI DUP1 PUSH4 0x2B4C9F16 EQ PUSH2 0x275 JUMPI DUP1 PUSH4 0x2CC82655 EQ PUSH2 0x2BC JUMPI DUP1 PUSH4 0x2F2FF15D EQ PUSH2 0x2D1 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x1D5 JUMPI DUP1 PUSH4 0x55AD42E EQ PUSH2 0x1FD JUMPI DUP1 PUSH4 0x148C2B5A EQ PUSH2 0x213 JUMPI JUMPDEST PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x1E8 PUSH2 0x1E3 CALLDATASIZE PUSH1 0x4 PUSH2 0x22F1 JUMP JUMPDEST PUSH2 0x4E9 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x205 PUSH0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x2 DUP2 JUMP JUMPDEST PUSH2 0x253 PUSH2 0x229 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH0 SWAP2 DUP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD SWAP2 DUP2 ADD SLOAD PUSH1 0x2 DUP3 ADD SLOAD PUSH1 0x3 SWAP1 SWAP3 ADD SLOAD SWAP1 SWAP2 SWAP1 PUSH1 0xFF AND DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH32 0x0 JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x2CA CALLDATASIZE PUSH1 0x4 PUSH2 0x236C JUMP JUMPDEST PUSH2 0x502 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x2CF PUSH2 0x2DF CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0x599 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x5CB JUMP JUMPDEST PUSH2 0x2FF PUSH2 0x2FA CALLDATASIZE PUSH1 0x4 PUSH2 0x23B1 JUMP JUMPDEST PUSH2 0x825 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x1F4 JUMP JUMPDEST PUSH2 0x297 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x365 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP2 AND EQ SWAP1 JUMP JUMPDEST PUSH2 0x297 PUSH32 0x0 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x3D9 CALLDATASIZE PUSH1 0x4 PUSH2 0x2490 JUMP JUMPDEST PUSH2 0x908 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x3EC CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH2 0xC14 JUMP JUMPDEST PUSH2 0x205 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x426 CALLDATASIZE PUSH1 0x4 PUSH2 0x254B JUMP JUMPDEST PUSH2 0xC34 JUMP JUMPDEST PUSH2 0x297 PUSH2 0xE0C JUMP JUMPDEST PUSH2 0x205 PUSH1 0x3 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x449 CALLDATASIZE PUSH1 0x4 PUSH2 0x236C JUMP JUMPDEST PUSH2 0xE37 JUMP JUMPDEST PUSH2 0x297 PUSH2 0xE52 JUMP JUMPDEST PUSH2 0x205 PUSH0 DUP2 JUMP JUMPDEST PUSH2 0x1E8 PUSH2 0x46B CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0xE5E JUMP JUMPDEST PUSH2 0x205 PUSH1 0x1 DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x486 CALLDATASIZE PUSH1 0x4 PUSH2 0x25DE JUMP JUMPDEST PUSH2 0xEA7 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x2 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4A2 CALLDATASIZE PUSH1 0x4 PUSH2 0x254B JUMP JUMPDEST PUSH2 0x12DA JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4B5 CALLDATASIZE PUSH1 0x4 PUSH2 0x2383 JUMP JUMPDEST PUSH2 0x144B JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4C8 CALLDATASIZE PUSH1 0x4 PUSH2 0x2351 JUMP JUMPDEST PUSH2 0x1478 JUMP JUMPDEST PUSH2 0x2CF PUSH2 0x4DB CALLDATASIZE PUSH1 0x4 PUSH2 0x2608 JUMP JUMPDEST PUSH2 0x1493 JUMP JUMPDEST PUSH2 0x205 PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH0 PUSH2 0x4FC DUP3 PUSH2 0x4F6 PUSH2 0x1550 JUMP JUMPDEST SWAP1 PUSH2 0x157D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x51B PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST SWAP1 PUSH2 0x168A JUMP JUMPDEST PUSH1 0x3 DUP2 GT ISZERO PUSH2 0x55E JUMPI PUSH1 0x40 MLOAD PUSH32 0x9666671900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0x63DD78A2037D9FF47AB1E6CF980C9D036BB47DE0B5812D2203BFA833F35E0A18 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH0 PUSH2 0x5A2 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH2 0x5B0 DUP2 PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST PUSH2 0x5C6 DUP4 DUP4 DUP4 PUSH2 0x5BE PUSH2 0x16F9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1726 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x3 PUSH0 SLOAD EQ PUSH2 0x613 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x3 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 PUSH2 0x61C PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH0 PUSH1 0x1 PUSH0 PUSH2 0x62A PUSH2 0x1654 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 ADD PUSH0 KECCAK256 DUP1 SLOAD SWAP1 SWAP2 POP DUP1 ISZERO PUSH2 0x73D JUMPI PUSH0 DUP3 SSTORE PUSH1 0x40 MLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x23B872DD SWAP1 PUSH1 0x64 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x717 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x73B SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP JUMPDEST PUSH1 0x2 DUP3 ADD SLOAD DUP1 ISZERO PUSH2 0x81F JUMPI PUSH0 DUP4 PUSH1 0x2 ADD DUP2 SWAP1 SSTORE POP DUP1 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x762 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 MLOAD PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD DUP4 SWAP1 MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0xA9059CBB SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x7F9 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x81D SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 PUSH0 SLOAD EQ PUSH2 0x86E JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 PUSH1 0x2 DUP2 ADD DUP1 SLOAD SWAP2 SWAP3 DUP8 SWAP3 PUSH2 0x8A7 SWAP1 DUP5 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8BF SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP5 PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x8D7 SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH32 0x4FC3585900000000000000000000000000000000000000000000000000000000 SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST DUP7 DUP6 DUP2 EQ ISZERO DUP1 PUSH2 0x918 JUMPI POP DUP1 DUP5 EQ ISZERO JUMPDEST DUP1 PUSH2 0x923 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x95A JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 SLOAD ISZERO PUSH2 0x99F JUMPI PUSH0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0x9AA PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xBC3 JUMPI PUSH0 DUP11 DUP11 DUP4 DUP2 DUP2 LT PUSH2 0x9C6 JUMPI PUSH2 0x9C6 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DB SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST SWAP1 POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xA2A JUMPI PUSH1 0x40 MLOAD PUSH32 0x9C89D57F00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 DUP10 DUP10 DUP5 DUP2 DUP2 LT PUSH2 0xA3D JUMPI PUSH2 0xA3D PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD SWAP1 POP DUP1 PUSH0 SUB PUSH2 0xA97 JUMPI PUSH1 0x40 MLOAD PUSH32 0xD49C192700000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD ISZERO PUSH2 0xB0C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6DBAA9B400000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP10 DUP10 DUP7 DUP2 DUP2 LT PUSH2 0xB1F JUMPI PUSH2 0xB1F PUSH2 0x26EA JUMP JUMPDEST DUP6 DUP6 SSTORE PUSH1 0x20 MUL SWAP2 SWAP1 SWAP2 ADD CALLDATALOAD PUSH1 0x1 DUP5 ADD DUP2 SWAP1 SSTORE SWAP2 POP DUP9 SWAP1 POP DUP8 DUP7 DUP2 DUP2 LT PUSH2 0xB47 JUMPI PUSH2 0xB47 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xB5C SWAP2 SWAP1 PUSH2 0x2717 JUMP JUMPDEST PUSH1 0x3 DUP4 ADD DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE PUSH2 0xB97 DUP2 DUP5 PUSH2 0x26D7 JUMP JUMPDEST PUSH1 0x2 PUSH0 DUP3 DUP3 SLOAD PUSH2 0xBA7 SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP POP DUP1 PUSH2 0xBBC SWAP1 PUSH2 0x2732 JUMP JUMPDEST SWAP1 POP PUSH2 0x9AC JUMP JUMPDEST POP PUSH32 0x44FBB8621BC7A734E344E0D7F6B84824CF97E0D8D611F9F8502E42FF0B1DEE43 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 DUP10 PUSH1 0x40 MLOAD PUSH2 0xC01 SWAP9 SWAP8 SWAP7 SWAP6 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0x27B2 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0xC1F PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST PUSH2 0xC31 DUP2 PUSH2 0xC2B PUSH2 0x17FA JUMP JUMPDEST SWAP1 PUSH2 0x1827 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH0 SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xCC2 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xCE6 SWAP2 SWAP1 PUSH2 0x2877 JUMP JUMPDEST PUSH2 0xCF0 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 POP PUSH0 DUP1 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0xDAF JUMPI PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP8 DUP8 DUP4 DUP2 DUP2 LT PUSH2 0xD46 JUMPI PUSH2 0xD46 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0xD5B SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SUB PUSH2 0xD9D JUMPI DUP5 DUP5 DUP3 DUP2 DUP2 LT PUSH2 0xD88 JUMPI PUSH2 0xD88 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP3 PUSH2 0xD9A SWAP2 SWAP1 PUSH2 0x26D7 JUMP JUMPDEST SWAP2 POP JUMPDEST DUP1 PUSH2 0xDA7 DUP2 PUSH2 0x2732 JUMP JUMPDEST SWAP2 POP POP PUSH2 0xCF5 JUMP JUMPDEST POP DUP2 DUP2 GT ISZERO PUSH2 0xDF4 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7CE4D19D00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH1 0x24 DUP2 ADD DUP3 SWAP1 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0xE02 DUP9 DUP9 DUP9 DUP9 DUP9 DUP9 PUSH2 0x18EB JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0xE18 PUSH2 0x17FA JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH2 0xC31 PUSH2 0xE42 PUSH2 0x1654 JUMP JUMPDEST DUP3 PUSH2 0xE4B PUSH2 0x16F9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x19D5 JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0xE18 PUSH2 0x165D JUMP JUMPDEST PUSH0 PUSH2 0xEA0 DUP4 DUP4 PUSH2 0xE6C PUSH2 0x16F9 JUMP JUMPDEST PUSH0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP4 AND DUP5 MSTORE SWAP2 SWAP1 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 PUSH2 0xEB0 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP DUP2 PUSH0 SUB PUSH2 0xF0B JUMPI PUSH1 0x40 MLOAD PUSH32 0x9BC7F2B00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x4 DUP4 ADD MSTORE DUP5 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH1 0x2 PUSH0 SLOAD EQ PUSH2 0xF53 JUMPI PUSH0 SLOAD PUSH1 0x40 MLOAD PUSH32 0x7C9BB66300000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH2 0xF87 PUSH32 0x7370656E64657200000000000000000000000000000000000000000000000000 DUP3 PUSH2 0xF80 PUSH2 0x16F9 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1A78 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP3 KECCAK256 SWAP1 DUP2 ADD SLOAD SWAP1 SWAP2 SWAP1 DUP1 ISZERO PUSH2 0x105C JUMPI DUP5 DUP2 LT PUSH2 0x1046 JUMPI DUP5 DUP4 PUSH1 0x1 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0xFD4 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP8 AND DUP3 MSTORE DUP9 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH0 PUSH1 0x60 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x1 DUP5 ADD SSTORE PUSH2 0x1056 DUP2 DUP7 PUSH2 0x26C4 JUMP JUMPDEST SWAP5 POP DUP1 SWAP2 POP JUMPDEST DUP3 SLOAD PUSH0 SWAP1 DUP1 ISZERO PUSH2 0x1106 JUMPI DUP7 DUP2 LT PUSH2 0x10F3 JUMPI DUP7 DUP6 PUSH0 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x107F SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND DUP3 MSTORE DUP11 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 PUSH1 0x80 DUP3 ADD MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP6 SSTORE PUSH2 0x1100 DUP2 DUP9 PUSH2 0x26C4 JUMP JUMPDEST SWAP7 POP DUP1 SWAP2 POP JUMPDEST PUSH1 0x2 DUP6 ADD SLOAD DUP8 DUP2 LT ISZERO PUSH2 0x116C JUMPI PUSH1 0x40 MLOAD PUSH32 0x1734392500000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP10 AND PUSH1 0x4 DUP4 ADD MSTORE DUP11 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP10 SWAP1 MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST DUP8 DUP7 PUSH1 0x2 ADD PUSH0 DUP3 DUP3 SLOAD PUSH2 0x117F SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP DUP8 PUSH1 0x3 PUSH0 DUP3 DUP3 SLOAD PUSH2 0x1197 SWAP2 SWAP1 PUSH2 0x26C4 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH32 0x0 AND PUSH4 0xA9059CBB PUSH2 0x11E3 PUSH2 0xE18 PUSH2 0x17FA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP5 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 DUP2 ADD DUP12 SWAP1 MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x1252 JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1276 SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP11 AND DUP3 MSTORE DUP12 AND PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP5 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP10 SWAP1 MSTORE PUSH32 0xC8832E1605166EECBA94F0E3919E05A79787269B7B9F7E7B9766B187B44A7E89 SWAP1 PUSH1 0xA0 ADD PUSH2 0xC01 JUMP JUMPDEST PUSH2 0x12E5 PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x12F5 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x132C JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE02 JUMPI DUP6 DUP6 DUP3 DUP2 DUP2 LT PUSH2 0x1347 JUMPI PUSH2 0x1347 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x135C SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH4 0x23B872DD ADDRESS DUP11 DUP11 DUP6 DUP2 DUP2 LT PUSH2 0x138A JUMPI PUSH2 0x138A PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x139F SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST DUP8 DUP8 DUP7 DUP2 DUP2 LT PUSH2 0x13B1 JUMPI PUSH2 0x13B1 PUSH2 0x26EA JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 PUSH1 0xE0 DUP9 SWAP1 SHL AND DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP6 DUP7 AND PUSH1 0x4 DUP3 ADD MSTORE SWAP5 SWAP1 SWAP4 AND PUSH1 0x24 DUP6 ADD MSTORE POP PUSH1 0x20 SWAP1 SWAP2 MUL ADD CALLDATALOAD PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH0 DUP8 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x142A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP GAS CALL ISZERO DUP1 ISZERO PUSH2 0x143C JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP DUP1 PUSH1 0x1 ADD SWAP1 POP PUSH2 0x132E JUMP JUMPDEST PUSH0 PUSH2 0x1454 PUSH2 0x1654 JUMP JUMPDEST SWAP1 POP PUSH2 0x1462 DUP2 PUSH2 0x515 PUSH2 0x165D JUMP JUMPDEST PUSH2 0x5C6 DUP4 DUP4 DUP4 PUSH2 0x1470 PUSH2 0x16F9 JUMP JUMPDEST SWAP3 SWAP2 SWAP1 PUSH2 0x1AFD JUMP JUMPDEST PUSH2 0xC31 PUSH2 0x1483 PUSH2 0x1654 JUMP JUMPDEST DUP3 PUSH2 0x148C PUSH2 0x165D JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0x1BC5 JUMP JUMPDEST PUSH2 0x149E PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP3 DUP2 DUP2 EQ PUSH2 0x14D8 JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0x1548 JUMPI PUSH2 0x1540 DUP5 DUP5 DUP4 DUP2 DUP2 LT PUSH2 0x14F6 JUMPI PUSH2 0x14F6 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP8 DUP8 DUP5 DUP2 DUP2 LT PUSH2 0x150F JUMPI PUSH2 0x150F PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1524 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 PUSH2 0x1CD8 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x14DA JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x26C4 JUMP JUMPDEST PUSH0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x15CB JUMPI POP PUSH0 PUSH2 0x4FC JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x161C JUMPI POP PUSH1 0x1 PUSH2 0x4FC JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH0 PUSH2 0xE32 PUSH2 0x1E2E JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x26C4 JUMP JUMPDEST DUP2 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND SWAP2 AND EQ PUSH2 0x16F5 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0xC8827D3282AF6F37B64C3E9E6F3AC9DF286AB0BB0FCCD6F8661BF19ADB368B23 PUSH2 0x26C4 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x81F JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 OR SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x2F8788117E7EFF1D82E926EC794901D17C78024A50270940304540A733656F0D SWAP1 PUSH1 0x60 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH2 0x4FC PUSH1 0x1 PUSH32 0x4FB5F8CDFBCE77F22B0931A39E9F476A60A0F66524B2F379E96485471EB700AE PUSH2 0x26C4 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0x1874 JUMPI PUSH1 0x40 MLOAD PUSH32 0x40B539CF00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH32 0xDD880D24A789958A6398C99C2E54CE31BC10A638CBC42F7DD34285479AE0F855 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH2 0x18F6 PUSH2 0x50D PUSH2 0x1654 JUMP JUMPDEST DUP5 DUP4 DUP2 EQ ISZERO DUP1 PUSH2 0x1906 JUMPI POP DUP1 DUP3 EQ ISZERO JUMPDEST ISZERO PUSH2 0x193D JUMPI PUSH1 0x40 MLOAD PUSH32 0x6582533600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH0 JUMPDEST DUP2 DUP2 EQ PUSH2 0xE02 JUMPI PUSH2 0x19CD DUP9 DUP9 DUP4 DUP2 DUP2 LT PUSH2 0x195B JUMPI PUSH2 0x195B PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x1970 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST DUP6 DUP6 DUP5 DUP2 DUP2 LT PUSH2 0x1982 JUMPI PUSH2 0x1982 PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 DUP9 DUP6 DUP2 DUP2 LT PUSH2 0x199B JUMPI PUSH2 0x199B PUSH2 0x26EA JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x19B0 SWAP2 SWAP1 PUSH2 0x2351 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP2 SWAP1 PUSH2 0x1F72 JUMP JUMPDEST PUSH1 0x1 ADD PUSH2 0x193F JUMP JUMPDEST PUSH2 0x19E0 DUP4 DUP3 DUP5 PUSH2 0x1A78 JUMP JUMPDEST PUSH0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP1 MLOAD DUP5 DUP2 MSTORE SWAP2 DUP3 ADD DUP4 SWAP1 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP5 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x7AA7288200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP4 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x81F JUMPI PUSH0 DUP4 DUP2 MSTORE PUSH1 0x20 DUP6 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP7 DUP2 AND DUP1 DUP7 MSTORE SWAP2 DUP5 MSTORE SWAP4 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND SWAP1 SSTORE DUP2 MLOAD DUP8 DUP2 MSTORE SWAP3 DUP4 ADD MSTORE SWAP2 DUP4 AND SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xF6391F5C32D9C69D2A47EA670B442974B53935D1EDC7FD64EB21E047A839171B SWAP1 PUSH1 0x60 ADD PUSH2 0x17EC JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0x1C32 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x555 JUMP JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0x81F JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH0 SWAP1 LOG3 POP POP POP POP JUMP JUMPDEST DUP1 SELFBALANCE LT ISZERO PUSH2 0x1D42 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E6365000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP3 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 PUSH1 0x40 MLOAD PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x1D98 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D9D JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP POP SWAP1 POP DUP1 PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x3A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20756E61626C6520746F2073656E642076616C75652C2072 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6563697069656E74206D61792068617665207265766572746564000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 CALLER ORIGIN EQ DUP1 PUSH2 0x1E3D JUMPI POP PUSH1 0x18 CALLDATASIZE LT JUMPDEST ISZERO PUSH2 0x1E47 JUMPI POP CALLER SWAP1 JUMP JUMPDEST PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEC CALLDATASIZE ADD CALLDATALOAD PUSH1 0x60 SHR PUSH32 0x0 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND CALLER EQ DUP1 PUSH2 0x1F61 JUMPI POP PUSH1 0x40 MLOAD PUSH32 0x8929A8CA00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE CALLER PUSH1 0x24 DUP4 ADD MSTORE PUSH32 0x0 AND SWAP1 PUSH4 0x8929A8CA SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1F3D JUMPI RETURNDATASIZE PUSH0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1F61 SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST ISZERO PUSH2 0x1F6B JUMPI SWAP2 SWAP1 POP JUMP JUMPDEST CALLER SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 DUP2 AND PUSH1 0x24 DUP4 ADD MSTORE PUSH1 0x44 DUP1 DUP4 ADD DUP6 SWAP1 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0x64 SWAP1 SWAP3 ADD DUP4 MSTORE PUSH1 0x20 DUP1 DUP4 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 OR SWAP1 MSTORE DUP4 MLOAD DUP1 DUP6 ADD SWAP1 SWAP5 MSTORE DUP1 DUP5 MSTORE PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 SWAP1 DUP5 ADD MSTORE PUSH2 0x5C6 SWAP3 DUP7 SWAP3 SWAP2 PUSH0 SWAP2 PUSH2 0x203C SWAP2 DUP6 AND SWAP1 DUP5 SWAP1 PUSH2 0x20E8 JUMP JUMPDEST SWAP1 POP DUP1 MLOAD PUSH0 EQ DUP1 PUSH2 0x205C JUMPI POP DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x205C SWAP2 SWAP1 PUSH2 0x267C JUMP JUMPDEST PUSH2 0x5C6 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x20F6 DUP5 DUP5 PUSH0 DUP6 PUSH2 0x20FE JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x2190 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x555 JUMP JUMPDEST PUSH0 DUP1 DUP7 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x21B8 SWAP2 SWAP1 PUSH2 0x28B0 JUMP JUMPDEST PUSH0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH0 DUP2 EQ PUSH2 0x21F2 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x21F7 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x2208 DUP8 DUP4 DUP4 DUP8 PUSH2 0x2213 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x22A8 JUMPI DUP3 MLOAD PUSH0 SUB PUSH2 0x22A1 JUMPI PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND EXTCODESIZE PUSH2 0x22A1 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x555 JUMP JUMPDEST POP DUP2 PUSH2 0x20F6 JUMP JUMPDEST PUSH2 0x20F6 DUP4 DUP4 DUP2 MLOAD ISZERO PUSH2 0x22BD JUMPI DUP2 MLOAD DUP1 DUP4 PUSH1 0x20 ADD REVERT JUMPDEST DUP1 PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x555 SWAP2 SWAP1 PUSH2 0x28CB JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2301 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEA0 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xC31 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2361 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEA0 DUP2 PUSH2 0x2330 JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x237C JUMPI PUSH0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x2394 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD SWAP2 POP PUSH1 0x20 DUP4 ADD CALLDATALOAD PUSH2 0x23A6 DUP2 PUSH2 0x2330 JUMP JUMPDEST DUP1 SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 PUSH1 0x80 DUP7 DUP9 SUB SLT ISZERO PUSH2 0x23C5 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD PUSH2 0x23D0 DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH2 0x23E0 DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP4 POP PUSH1 0x40 DUP7 ADD CALLDATALOAD SWAP3 POP PUSH1 0x60 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2403 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x2416 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x2424 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0x2435 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP PUSH1 0x20 ADD SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0x2458 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0x246F JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x2489 JUMPI PUSH0 DUP1 REVERT JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x80 DUP10 DUP12 SUB SLT ISZERO PUSH2 0x24A7 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP9 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x24BE JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24CA DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP11 POP SWAP9 POP PUSH1 0x20 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x24E2 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x24EE DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x40 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2506 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2512 DUP13 DUP4 DUP14 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x60 DUP12 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x252A JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2537 DUP12 DUP3 DUP13 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP10 SWAP13 SWAP9 SWAP12 POP SWAP7 SWAP10 POP SWAP5 SWAP8 SWAP4 SWAP7 SWAP3 SWAP6 SWAP5 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x60 DUP8 DUP10 SUB SLT ISZERO PUSH2 0x2560 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP7 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2577 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x2583 DUP11 DUP4 DUP12 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP9 POP SWAP7 POP PUSH1 0x20 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x259B JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x25A7 DUP11 DUP4 DUP12 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x40 DUP10 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x25BF JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x25CC DUP10 DUP3 DUP11 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP8 SWAP11 SWAP7 SWAP10 POP SWAP5 SWAP8 POP SWAP3 SWAP6 SWAP4 SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x25EF JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH2 0x25FA DUP2 PUSH2 0x2330 JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH0 DUP1 PUSH0 DUP1 PUSH1 0x40 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x261B JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x2632 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH2 0x263E DUP9 DUP4 DUP10 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP1 SWAP7 POP SWAP5 POP PUSH1 0x20 DUP8 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x2656 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP PUSH2 0x2663 DUP8 DUP3 DUP9 ADD PUSH2 0x2448 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xC31 JUMPI PUSH0 DUP1 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x268C JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH2 0xEA0 DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4FC PUSH2 0x2697 JUMP JUMPDEST DUP1 DUP3 ADD DUP1 DUP3 GT ISZERO PUSH2 0x4FC JUMPI PUSH2 0x4FC PUSH2 0x2697 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH0 REVERT JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2727 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0xEA0 DUP2 PUSH2 0x266F JUMP JUMPDEST PUSH0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 SUB PUSH2 0x2762 JUMPI PUSH2 0x2762 PUSH2 0x2697 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST DUP2 DUP4 MSTORE PUSH0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x2799 JUMPI PUSH0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP4 PUSH1 0x20 DUP8 ADD CALLDATACOPY SWAP4 SWAP1 SWAP4 ADD PUSH1 0x20 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x80 DUP1 DUP3 MSTORE DUP2 ADD DUP9 SWAP1 MSTORE PUSH0 DUP10 PUSH1 0xA0 DUP4 ADD DUP3 JUMPDEST DUP12 DUP2 LT ISZERO PUSH2 0x2801 JUMPI DUP3 CALLDATALOAD PUSH2 0x27D7 DUP2 PUSH2 0x2330 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP3 MSTORE PUSH1 0x20 SWAP3 DUP4 ADD SWAP3 SWAP1 SWAP2 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x27C4 JUMP JUMPDEST POP PUSH1 0x20 SWAP2 POP DUP4 DUP2 SUB DUP3 DUP6 ADD MSTORE PUSH2 0x2818 DUP2 DUP11 DUP13 PUSH2 0x2769 JUMP JUMPDEST SWAP1 POP DUP4 DUP2 SUB PUSH1 0x40 DUP6 ADD MSTORE PUSH2 0x282D DUP2 DUP9 DUP11 PUSH2 0x2769 JUMP JUMPDEST DUP5 DUP2 SUB PUSH1 0x60 DUP7 ADD MSTORE DUP6 DUP2 MSTORE DUP7 SWAP2 POP DUP3 ADD PUSH0 JUMPDEST DUP7 DUP2 LT ISZERO PUSH2 0x2866 JUMPI DUP3 CALLDATALOAD PUSH2 0x2852 DUP2 PUSH2 0x266F JUMP JUMPDEST ISZERO ISZERO DUP3 MSTORE SWAP2 DUP4 ADD SWAP2 SWAP1 DUP4 ADD SWAP1 PUSH1 0x1 ADD PUSH2 0x283F JUMP JUMPDEST POP SWAP13 SWAP12 POP POP POP POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x2887 JUMPI PUSH0 DUP1 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x28A8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x2890 JUMP JUMPDEST POP POP PUSH0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH0 DUP3 MLOAD PUSH2 0x28C1 DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x288E JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 MSTORE PUSH0 DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x28E9 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x288E JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 STOP DUP6 PUSH13 0x3252CA394439AA1C15AC238579 MULMOD RETURNDATACOPY 0x5E DUP15 GAS 0x5E SWAP16 0xC SWAP10 MSTORE8 SWAP12 0xCD 0xC4 0xF ISZERO MUL PUSH5 0x736F6C6343 STOP ADDMOD ISZERO STOP CALLER ","sourceMap":"2313:12389:57:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:13;;;;;;:::i;:::-;;:::i;:::-;;;516:14:58;;509:22;491:41;;479:2;464:18;542:165:13;;;;;;;;3308:40:57;;;;;;;;;689:25:58;;;677:2;662:18;3308:40:57;543:177:58;3124:38:57;;3161:1;3124:38;;3355:50;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1361:25:58;;;1417:2;1402:18;;1395:34;;;;1445:18;;;1438:34;1515:14;1508:22;1503:2;1488:18;;1481:50;1348:3;1333:19;3355:50:57;1136:401:58;728:115:17;817:19;728:115;;;1745:42:58;1733:55;;;1715:74;;1703:2;1688:18;728:115:17;1542:253:58;7167:268:57;;;;;;:::i;:::-;;:::i;:::-;;1116:257:3;;;;;;:::i;:::-;;:::i;12697:646:57:-;;;:::i;9803:420::-;;;;;;:::i;:::-;;:::i;:::-;;;3420:66:58;3408:79;;;3390:98;;3378:2;3363:18;9803:420:57;3246:248:58;3256:45:57;;;;;878:149:17;;;;;;:::i;:::-;1000:19;979:41;;;;;;;;878:149;3217:33:57;;;;;8266:1285;;;;;;:::i;:::-;;:::i;1085:225:23:-;;;;;;:::i;:::-;;:::i;2978:48:57:-;;;;;13636:601;;;;;;:::i;:::-;;:::i;1398:138:23:-;;;:::i;3168:42:57:-;;3209:1;3168:42;;1994:124:3;;;;;;:::i;:::-;;:::i;710:120:4:-;;;:::i;3033:38:57:-;;3070:1;3033:38;;2159:162:3;;;;;;:::i;:::-;;:::i;3077:41:57:-;;3117:1;3077:41;;10904:1614;;;;;;:::i;:::-;;:::i;3593:27::-;;;;;;4441:536:31;;;;;;:::i;:::-;;:::i;1694:259:3:-;;;;;;:::i;:::-;;:::i;864:152:4:-;;;;;;:::i;:::-;;:::i;1942:445:31:-;;;;;;:::i;:::-;;:::i;3793:29:57:-;;;;;;542:165:13;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:13:o;7167:268:57:-;7219:70;7276:12;:10;:12::i;:::-;7219:33;:31;:33::i;:::-;:56;;:70::i;:::-;3209:1;7303:5;:22;7299:61;;;7334:26;;;;;;;;689:25:58;;;662:18;;7334:26:57;;;;;;;;7299:61;7370:12;:20;;;7405:23;;3117:1;689:25:58;;7405:23:57;;677:2:58;662:18;7405:23:57;;;;;;;7167:268;:::o;1116:257:3:-;1185:16;1204:12;:10;:12::i;:::-;1185:31;;1226:66;1283:8;1226:33;:31;:33::i;:66::-;1302:64;1342:4;1348:7;1357:8;1302:29;:27;:29::i;:::-;:39;:64;;:39;:64::i;:::-;1175:198;1116:257;;:::o;12697:646:57:-;3209:1;12740:12;;:30;12736:88;;12811:12;;12779:45;;;;;3209:1;12779:45;;;10125:25:58;10166:18;;;10159:34;;;;10098:18;;12779:45:57;9951:248:58;12736:88:57;12834:12;12849;:10;:12::i;:::-;12834:27;;12871;12901:11;:25;12913:12;:10;:12::i;:::-;12901:25;;;;;;;;;;;;;-1:-1:-1;12901:25:57;12956:17;;12901:25;;-1:-1:-1;12987:14:57;;12983:141;;13037:1;13017:21;;13052:61;;;;;:22;13075:20;10485:15:58;;13052:61:57;;;10467:34:58;10537:15;;;10517:18;;;10510:43;10569:18;;;10562:34;;;13052:9:57;:22;;;;10379:18:58;;13052:61:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;12983:141;13154:17;;;;13185:14;;13181:156;;13235:1;13215:7;:17;;:21;;;;13268:9;13250:14;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;;13291:35:57;;;;;:18;11494:55:58;;;13291:35:57;;;11476:74:58;11566:18;;;11559:34;;;13291:9:57;:18;;;;11449::58;;13291:35:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;13181:156;12726:617;;;;12697:646::o;9803:420::-;9900:17;3117:1;9933:12;;:29;9929:86;;10002:12;;9971:44;;;;;3117:1;9971:44;;;10125:25:58;10166:18;;;10159:34;;;;10098:18;;9971:44:57;9951:248:58;9929:86:57;10055:17;;;10025:27;10055:17;;;:11;:17;;;;;10082;;;:26;;10055:17;;10103:5;;10082:26;;10103:5;;10082:26;:::i;:::-;;;;;;;;10136:5;10118:14;;:23;;;;;;;:::i;:::-;;;;;;;;10167:5;10151:12;;:21;;;;;;;:::i;:::-;;;;-1:-1:-1;2155:39:46;;9803:420:57;-1:-1:-1;;;;;;;;9803:420:57:o;8266:1285::-;8493:5;8519:33;;;;;:66;;-1:-1:-1;8556:29:57;;;;8519:66;:99;;;-1:-1:-1;8589:29:57;;;;8519:99;8515:138;;;8627:26;;;;;;;;;;;;;;8515:138;3070:1;8667:12;:26;8663:80;;3070:1;8730:12;;8702:41;;;;;;;;10125:25:58;;;;10166:18;;;10159:34;10098:18;;8702:41:57;9951:248:58;8663:80:57;8753:70;8810:12;:10;:12::i;8753:70::-;8838:9;8833:627;8854:6;8849:1;:11;8833:627;;8881:12;8896:5;;8902:1;8896:8;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;8881:23;-1:-1:-1;8922:18:57;;;8918:48;;8949:17;;;;;;;;;;;;;;8918:48;8980:17;9000:16;;9017:1;9000:19;;;;;;;:::i;:::-;;;;;;;8980:39;;9037:9;9050:1;9037:14;9033:58;;9060:31;;;;;1745:42:58;1733:55;;9060:31:57;;;1715:74:58;1688:18;;9060:31:57;1542:253:58;9033:58:57;9135:17;;;9105:27;9135:17;;;:11;:17;;;;;9170;;:22;9166:62;;9201:27;;;;;1745:42:58;1733:55;;9201:27:57;;;1715:74:58;1688:18;;9201:27:57;1542:253:58;9166:62:57;9242:13;9258:12;;9271:1;9258:15;;;;;;;:::i;:::-;9287:29;;;9258:15;;;;;;;9330:13;;;:21;;;9258:15;-1:-1:-1;9387:12:57;;-1:-1:-1;9387:12:57;9400:1;9387:15;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;9365:19;;;:37;;;;;;;;;;;;;9432:17;9444:5;9432:9;:17;:::i;:::-;9416:12;;:33;;;;;;;:::i;:::-;;;;;;;;8867:593;;;;8862:3;;;;:::i;:::-;;;8833:627;;;;9474:70;9492:5;;9499:16;;9517:12;;9531;;9474:70;;;;;;;;;;;;;:::i;:::-;;;;;;;;8466:1085;8266:1285;;;;;;;;:::o;1085:225:23:-;1162:70;1219:12;:10;:12::i;1162:70::-;1242:61;1287:15;1242:28;:26;:28::i;:::-;:44;;:61::i;:::-;1085:225;:::o;13636:601:57:-;13844:14;;13807:34;;;;;13835:4;13807:34;;;1715:74:58;13776:28:57;;13844:14;13807:19;:9;:19;;;;1688:18:58;;13807:34:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:51;;;;:::i;:::-;13776:82;-1:-1:-1;13868:17:57;;13895:152;13915:17;;;13895:152;;;13970:9;13957:22;;:6;;13964:1;13957:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;13953:84;;14012:7;;14020:1;14012:10;;;;;;;:::i;:::-;;;;;;;13999:23;;;;;:::i;:::-;;;13953:84;13934:3;;;;:::i;:::-;;;;13895:152;;;;14072:20;14060:9;:32;14056:119;;;14115:49;;;;;;;;10125:25:58;;;10166:18;;;10159:34;;;10098:18;;14115:49:57;9951:248:58;14056:119:57;14184:46;14204:8;;14214:6;;14222:7;;14184:19;:46::i;:::-;13766:471;;13636:601;;;;;;:::o;1398:138:23:-;1445:22;1486:43;:28;:26;:28::i;:::-;2740:8:27;;;;2643:112;1486:43:23;1479:50;;1398:138;:::o;1994:124:3:-;2049:62;2092:12;:10;:12::i;:::-;2106:4;2049:29;:27;:29::i;:::-;:42;:62;:42;:62::i;710:120:4:-;756:7;782:41;:33;:31;:33::i;2159:162:3:-;2230:13;2262:52;2300:4;2306:7;2262:29;:27;:29::i;:::-;2675:13:11;2707;;;;;;;;;;;:22;;;;;;;;;;;;;;;2586:150;2262:52:3;2255:59;2159:162;-1:-1:-1;;;2159:162:3:o;10904:1614:57:-;10968:15;10986:12;:10;:12::i;:::-;10968:30;;11012:6;11022:1;11012:11;11008:54;;11032:30;;;;;15177:42:58;15246:15;;;11032:30:57;;;15228:34:58;15298:15;;15278:18;;;15271:43;15140:18;;11032:30:57;14993:327:58;11008:54:57;3161:1;11076:12;;:26;11072:80;;11139:12;;11111:41;;;;;3161:1;11111:41;;;10125:25:58;10166:18;;;10159:34;;;;10098:18;;11111:41:57;9951:248:58;11072:80:57;11162:67;11207:12;11221:7;11162:29;:27;:29::i;:::-;:44;:67;:44;:67::i;:::-;11269:17;;;11239:27;11269:17;;;:11;:17;;;;;;;11341:13;;;;11269:17;;11239:27;11368:10;;11364:330;;11407:6;11398:5;:15;11394:290;;11450:6;11433:7;:13;;;:23;;;;;;;:::i;:::-;;;;-1:-1:-1;;11479:41:57;;;15610:42:58;15679:15;;;15661:34;;15731:15;;15726:2;15711:18;;15704:43;15763:18;;;15756:34;;;11515:1:57;15821:2:58;15806:18;;15799:34;;;15864:3;15849:19;;15842:35;11479:41:57;;15587:3:58;15572:19;11479:41:57;;;;;;;11538:7;;;;10904:1614;;:::o;11394:290::-;11599:1;11583:13;;;:17;11618:15;11628:5;11618:15;;:::i;:::-;;;11664:5;11651:18;;11394:290;11756:17;;11704:22;;11787:14;;11783:367;;11834:6;11821:9;:19;11817:323;;11881:6;11860:7;:17;;;:27;;;;;;;:::i;:::-;;;;-1:-1:-1;;11910:50:57;;;15610:42:58;15679:15;;;15661:34;;15731:15;;15726:2;15711:18;;15704:43;15763:18;;;15756:34;;;15821:2;15806:18;;15799:34;;;11958:1:57;15864:3:58;15849:19;;15842:35;11910:50:57;;15587:3:58;15572:19;11910:50:57;;;;;;;11978:7;;;;;;10904:1614;;:::o;11817:323::-;12043:1;12023:21;;12062:19;12072:9;12062:19;;:::i;:::-;;;12116:9;12099:26;;11817:323;12180:17;;;;12211:18;;;12207:73;;;12238:42;;;;;10416::58;10485:15;;;12238:42:57;;;10467:34:58;10537:15;;10517:18;;;10510:43;10569:18;;;10562:34;;;10379:18;;12238:42:57;10204:398:58;12207:73:57;12312:6;12291:7;:17;;;:27;;;;;;;:::i;:::-;;;;;;;;12346:6;12328:14;;:24;;;;;;;:::i;:::-;;;;-1:-1:-1;;12362:18:57;:9;:18;;12381:43;:28;:26;:28::i;:43::-;12362:71;;;;;;;;;;11506:42:58;11494:55;;;12362:71:57;;;11476:74:58;11566:18;;;11559:34;;;11449:18;;12362:71:57;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1;12448:63:57;;;15610:42:58;15679:15;;;15661:34;;15731:15;;15726:2;15711:18;;15704:43;15763:18;;;15756:34;;;15821:2;15806:18;;15799:34;;;15864:3;15849:19;;15842:35;;;12448:63:57;;15587:3:58;15572:19;12448:63:57;15325:558:58;4441:536:31;4578:70;4635:12;:10;:12::i;4578:70::-;4675:8;4704:26;;;;;:55;;-1:-1:-1;4734:25:31;;;;4704:55;4700:94;;;4768:26;;;;;;;;;;;;;;4700:94;4833:9;4828:133;4849:6;4844:1;:11;4828:133;;4880:9;;4890:1;4880:12;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:25;;;4914:4;4921:8;;4930:1;4921:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;4934:8;;4943:1;4934:11;;;;;;;:::i;:::-;4880:66;;;;;;;;;;10416:42:58;10485:15;;;4880:66:31;;;10467:34:58;10537:15;;;;10517:18;;;10510:43;-1:-1:-1;4934:11:31;;;;;;10569:18:58;;;10562:34;10379:18;;4880:66:31;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4857:3;;;;;4828:133;;1694:259:3;1764:16;1783:12;:10;:12::i;:::-;1764:31;;1805:66;1862:8;1805:33;:31;:33::i;:66::-;1881:65;1922:4;1928:7;1937:8;1881:29;:27;:29::i;:::-;:40;:65;;:40;:65::i;864:152:4:-;934:75;986:12;:10;:12::i;:::-;1000:8;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;1942:445:31:-;2052:70;2109:12;:10;:12::i;2052:70::-;2149:8;2178:24;;;2174:63;;2211:26;;;;;;;;;;;;;;2174:63;2276:9;2271:100;2292:6;2287:1;:11;2271:100;;2323:33;2345:7;;2353:1;2345:10;;;;;;;:::i;:::-;;;;;;;2323:8;;2332:1;2323:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:21;;;;:33::i;:::-;2300:3;;2271:100;;;;2042:345;1942:445;;;;:::o;1705:174:16:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:16;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:16;1620:11;;1560:82;-1:-1:-1;1658:34:16;;:21;:34;;;;;;;;;;;;;;;1359:340::o;14292:175:57:-;14393:7;14419:41;:39;:41::i;4865:174:12:-;4906:16;;761:71;831:1;769:58;761:71;:::i;4189:162::-;4295:15;;;4284:26;;;4295:15;;4284:26;4280:64;;4319:25;;;;;1745:42:58;1733:55;;4319:25:12;;;1715:74:58;1688:18;;4319:25:12;1542:253:58;4280:64:12;4189:162;;:::o;4219:174:11:-;4260:16;;540:67;606:1;548:54;540:67;:::i;989:272::-;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;1094:161;;1139:7;:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:29;;;;1164:4;1139:29;;;1187:57;;17770:25:58;;;17872:18;;;17865:43;17944:15;;;17924:18;;;17917:43;;;;1187:57:11;;17758:2:58;17743:18;1187:57:11;;;;;;;;989:272;;;;:::o;2761:174:27:-;2802:16;;505:67;571:1;513:54;505:67;:::i;2283:272::-;2382:29;;;2378:67;;2420:25;;;;;;;;;;;;;;2378:67;2455:26;;;;;;;;;;;;2496:52;;1715:74:58;;;2496:52:27;;1703:2:58;1688:18;2496:52:27;;;;;;;2283:272;;:::o;3156:507:31:-;3287:70;3344:12;:10;:12::i;3287:70::-;3384:8;3413:23;;;;;:51;;-1:-1:-1;3440:24:31;;;;3413:51;3409:90;;;3473:26;;;;;;;;;;;;;;3409:90;3538:9;3533:114;3554:6;3549:1;:11;3533:114;;3585:47;3608:8;;3617:1;3608:11;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;3621:7;;3629:1;3621:10;;;;;;;:::i;:::-;;;;;;;3585:6;;3592:1;3585:9;;;;;;;:::i;:::-;;;;;;;;;;;;;;:::i;:::-;:22;;;:47;:22;:47::i;:::-;3562:3;;3533:114;;2168:234:11;2257:30;:1;2274:4;2280:6;2257:16;:30::i;:::-;2321:5;2297:13;;;;;;;;;;;:21;;;;;;;;;;;;;:29;;;;;;2341:54;;17770:25:58;;;17872:18;;;17865:43;;;17924:18;;17917:43;;;;2341:54:11;;17758:2:58;17743:18;2341:54:11;;;;;;;2168:234;;;:::o;3459:170::-;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;3556:66;;3594:28;;;;;;;;18384:25:58;;;18457:42;18445:55;;18425:18;;;18418:83;18357:18;;3594:28:11;18210:297:58;1639:273:11;2675:13;2707;;;;;;;;;;;:22;;;;;;;;;;;;;1745:161;;;1814:5;1789:13;;;;;;;;;;;:22;;;;;;;;;;;;;;:30;;;;;;1838:57;;17770:25:58;;;17872:18;;;17865:43;17944:15;;;17924:18;;;17917:43;;;;1838:57:11;;17758:2:58;17743:18;1838:57:11;17568:398:58;2909:383:12;3031:15;;;;;;;3060:23;;;;3056:60;;3092:24;;;;;1745:42:58;1733:55;;3092:24:12;;;1715:74:58;1688:18;;3092:24:12;1542:253:58;3056:60:12;3147:8;3130:25;;:13;:25;;;3126:160;;3171:26;;;;;;;;;;;;;3216:59;;;;;;;;-1:-1:-1;;3216:59:12;2997:295;2909:383;;;:::o;2647:312:53:-;2761:6;2736:21;:31;;2728:73;;;;;;;18714:2:58;2728:73:53;;;18696:21:58;18753:2;18733:18;;;18726:30;18792:31;18772:18;;;18765:59;18841:18;;2728:73:53;18512:353:58;2728:73:53;2813:12;2831:9;:14;;2853:6;2831:33;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;2812:52;;;2882:7;2874:78;;;;;;;19282:2:58;2874:78:53;;;19264:21:58;19321:2;19301:18;;;19294:30;19360:34;19340:18;;;19333:62;19431:28;19411:18;;;19404:56;19477:19;;2874:78:53;19080:422:58;784:745:18;837:7;1047:10;1061:9;1047:23;;:47;;-1:-1:-1;1092:2:18;1074:8;:20;1047:47;1043:95;;;-1:-1:-1;1117:10:18;;784:745::o;1043:95::-;462:23:21;466:14;462:23;449:37;445:2;441:46;1372:19:18;1350:42;;:10;:42;;:105;;-1:-1:-1;1396:59:18;;;;;:39;15246:15:58;;;1396:59:18;;;15228:34:58;1444:10:18;15278:18:58;;;15271:43;1396:19:18;:39;;;;15140:18:58;;1396:59:18;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1346:149;;;1478:6;784:745;-1:-1:-1;784:745:18:o;1346:149::-;1512:10;1505:17;;;784:745;:::o;941:175:52:-;1050:58;;;11506:42:58;11494:55;;;1050:58:52;;;11476:74:58;11566:18;;;;11559:34;;;1050:58:52;;;;;;;;;;11449:18:58;;;;1050:58:52;;;;;;;;;;1073:23;1050:58;;;5641:69;;;;;;;;;;;;;;;;1023:86;;1043:5;;1050:58;-1:-1:-1;;5641:69:52;;:27;;;1050:58;;5641:27;:69::i;:::-;5615:95;;5728:10;:17;5749:1;5728:22;:56;;;;5765:10;5754:30;;;;;;;;;;;;:::i;:::-;5720:111;;;;;;;19709:2:58;5720:111:52;;;19691:21:58;19748:2;19728:18;;;19721:30;19787:34;19767:18;;;19760:62;19858:12;19838:18;;;19831:40;19888:19;;5720:111:52;19507:406:58;4108:223:53;4241:12;4272:52;4294:6;4302:4;4308:1;4311:12;4272:21;:52::i;:::-;4265:59;4108:223;-1:-1:-1;;;;4108:223:53:o;5165:446::-;5330:12;5387:5;5362:21;:30;;5354:81;;;;;;;20120:2:58;5354:81:53;;;20102:21:58;20159:2;20139:18;;;20132:30;20198:34;20178:18;;;20171:62;20269:8;20249:18;;;20242:36;20295:19;;5354:81:53;19918:402:58;5354:81:53;5446:12;5460:23;5487:6;:11;;5506:5;5513:4;5487:31;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5445:73;;;;5535:69;5562:6;5570:7;5579:10;5591:12;5535:26;:69::i;:::-;5528:76;5165:446;-1:-1:-1;;;;;;;5165:446:53:o;7671:628::-;7851:12;7879:7;7875:418;;;7906:10;:17;7927:1;7906:22;7902:286;;1702:19;;;;8113:60;;;;;;;21074:2:58;8113:60:53;;;21056:21:58;21113:2;21093:18;;;21086:30;21152:31;21132:18;;;21125:59;21201:18;;8113:60:53;20872:353:58;8113:60:53;-1:-1:-1;8208:10:53;8201:17;;7875:418;8249:33;8257:10;8269:12;8980:17;;:21;8976:379;;9208:10;9202:17;9264:15;9251:10;9247:2;9243:19;9236:44;8976:379;9331:12;9324:20;;;;;;;;;;;:::i;14:332:58:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;725:154;811:42;804:5;800:54;793:5;790:65;780:93;;869:1;866;859:12;884:247;943:6;996:2;984:9;975:7;971:23;967:32;964:52;;;1012:1;1009;1002:12;964:52;1051:9;1038:23;1070:31;1095:5;1070:31;:::i;1800:180::-;1859:6;1912:2;1900:9;1891:7;1887:23;1883:32;1880:52;;;1928:1;1925;1918:12;1880:52;-1:-1:-1;1951:23:58;;1800:180;-1:-1:-1;1800:180:58:o;1985:315::-;2053:6;2061;2114:2;2102:9;2093:7;2089:23;2085:32;2082:52;;;2130:1;2127;2120:12;2082:52;2166:9;2153:23;2143:33;;2226:2;2215:9;2211:18;2198:32;2239:31;2264:5;2239:31;:::i;:::-;2289:5;2279:15;;;1985:315;;;;;:::o;2305:936::-;2402:6;2410;2418;2426;2434;2487:3;2475:9;2466:7;2462:23;2458:33;2455:53;;;2504:1;2501;2494:12;2455:53;2543:9;2530:23;2562:31;2587:5;2562:31;:::i;:::-;2612:5;-1:-1:-1;2669:2:58;2654:18;;2641:32;2682:33;2641:32;2682:33;:::i;:::-;2734:7;-1:-1:-1;2788:2:58;2773:18;;2760:32;;-1:-1:-1;2843:2:58;2828:18;;2815:32;2866:18;2896:14;;;2893:34;;;2923:1;2920;2913:12;2893:34;2961:6;2950:9;2946:22;2936:32;;3006:7;2999:4;2995:2;2991:13;2987:27;2977:55;;3028:1;3025;3018:12;2977:55;3068:2;3055:16;3094:2;3086:6;3083:14;3080:34;;;3110:1;3107;3100:12;3080:34;3155:7;3150:2;3141:6;3137:2;3133:15;3129:24;3126:37;3123:57;;;3176:1;3173;3166:12;3123:57;2305:936;;;;-1:-1:-1;2305:936:58;;-1:-1:-1;3207:2:58;3199:11;;3229:6;2305:936;-1:-1:-1;;;2305:936:58:o;3976:367::-;4039:8;4049:6;4103:3;4096:4;4088:6;4084:17;4080:27;4070:55;;4121:1;4118;4111:12;4070:55;-1:-1:-1;4144:20:58;;4187:18;4176:30;;4173:50;;;4219:1;4216;4209:12;4173:50;4256:4;4248:6;4244:17;4232:29;;4316:3;4309:4;4299:6;4296:1;4292:14;4284:6;4280:27;4276:38;4273:47;4270:67;;;4333:1;4330;4323:12;4270:67;3976:367;;;;;:::o;4348:1401::-;4539:6;4547;4555;4563;4571;4579;4587;4595;4648:3;4636:9;4627:7;4623:23;4619:33;4616:53;;;4665:1;4662;4655:12;4616:53;4705:9;4692:23;4734:18;4775:2;4767:6;4764:14;4761:34;;;4791:1;4788;4781:12;4761:34;4830:70;4892:7;4883:6;4872:9;4868:22;4830:70;:::i;:::-;4919:8;;-1:-1:-1;4804:96:58;-1:-1:-1;5007:2:58;4992:18;;4979:32;;-1:-1:-1;5023:16:58;;;5020:36;;;5052:1;5049;5042:12;5020:36;5091:72;5155:7;5144:8;5133:9;5129:24;5091:72;:::i;:::-;5182:8;;-1:-1:-1;5065:98:58;-1:-1:-1;5270:2:58;5255:18;;5242:32;;-1:-1:-1;5286:16:58;;;5283:36;;;5315:1;5312;5305:12;5283:36;5354:72;5418:7;5407:8;5396:9;5392:24;5354:72;:::i;:::-;5445:8;;-1:-1:-1;5328:98:58;-1:-1:-1;5533:2:58;5518:18;;5505:32;;-1:-1:-1;5549:16:58;;;5546:36;;;5578:1;5575;5568:12;5546:36;;5617:72;5681:7;5670:8;5659:9;5655:24;5617:72;:::i;:::-;4348:1401;;;;-1:-1:-1;4348:1401:58;;-1:-1:-1;4348:1401:58;;;;;;5708:8;-1:-1:-1;;;4348:1401:58:o;6196:1103::-;6369:6;6377;6385;6393;6401;6409;6462:2;6450:9;6441:7;6437:23;6433:32;6430:52;;;6478:1;6475;6468:12;6430:52;6518:9;6505:23;6547:18;6588:2;6580:6;6577:14;6574:34;;;6604:1;6601;6594:12;6574:34;6643:70;6705:7;6696:6;6685:9;6681:22;6643:70;:::i;:::-;6732:8;;-1:-1:-1;6617:96:58;-1:-1:-1;6820:2:58;6805:18;;6792:32;;-1:-1:-1;6836:16:58;;;6833:36;;;6865:1;6862;6855:12;6833:36;6904:72;6968:7;6957:8;6946:9;6942:24;6904:72;:::i;:::-;6995:8;;-1:-1:-1;6878:98:58;-1:-1:-1;7083:2:58;7068:18;;7055:32;;-1:-1:-1;7099:16:58;;;7096:36;;;7128:1;7125;7118:12;7096:36;;7167:72;7231:7;7220:8;7209:9;7205:24;7167:72;:::i;:::-;6196:1103;;;;-1:-1:-1;6196:1103:58;;-1:-1:-1;6196:1103:58;;7258:8;;6196:1103;-1:-1:-1;;;6196:1103:58:o;7736:315::-;7804:6;7812;7865:2;7853:9;7844:7;7840:23;7836:32;7833:52;;;7881:1;7878;7871:12;7833:52;7920:9;7907:23;7939:31;7964:5;7939:31;:::i;:::-;7989:5;8041:2;8026:18;;;;8013:32;;-1:-1:-1;;;7736:315:58:o;9165:781::-;9295:6;9303;9311;9319;9372:2;9360:9;9351:7;9347:23;9343:32;9340:52;;;9388:1;9385;9378:12;9340:52;9428:9;9415:23;9457:18;9498:2;9490:6;9487:14;9484:34;;;9514:1;9511;9504:12;9484:34;9553:70;9615:7;9606:6;9595:9;9591:22;9553:70;:::i;:::-;9642:8;;-1:-1:-1;9527:96:58;-1:-1:-1;9730:2:58;9715:18;;9702:32;;-1:-1:-1;9746:16:58;;;9743:36;;;9775:1;9772;9765:12;9743:36;;9814:72;9878:7;9867:8;9856:9;9852:24;9814:72;:::i;:::-;9165:781;;;;-1:-1:-1;9905:8:58;-1:-1:-1;;;;9165:781:58:o;10607:118::-;10693:5;10686:13;10679:21;10672:5;10669:32;10659:60;;10715:1;10712;10705:12;10730:245;10797:6;10850:2;10838:9;10829:7;10825:23;10821:32;10818:52;;;10866:1;10863;10856:12;10818:52;10898:9;10892:16;10917:28;10939:5;10917:28;:::i;10980:184::-;11032:77;11029:1;11022:88;11129:4;11126:1;11119:15;11153:4;11150:1;11143:15;11169:128;11236:9;;;11257:11;;;11254:37;;;11271:18;;:::i;11604:125::-;11669:9;;;11690:10;;;11687:36;;;11703:18;;:::i;11734:184::-;11786:77;11783:1;11776:88;11883:4;11880:1;11873:15;11907:4;11904:1;11897:15;11923:241;11979:6;12032:2;12020:9;12011:7;12007:23;12003:32;12000:52;;;12048:1;12045;12038:12;12000:52;12087:9;12074:23;12106:28;12128:5;12106:28;:::i;12169:195::-;12208:3;12239:66;12232:5;12229:77;12226:103;;12309:18;;:::i;:::-;-1:-1:-1;12356:1:58;12345:13;;12169:195::o;12369:358::-;12469:6;12464:3;12457:19;12439:3;12499:66;12491:6;12488:78;12485:98;;;12579:1;12576;12569:12;12485:98;12615:6;12612:1;12608:14;12667:8;12660:5;12653:4;12648:3;12644:14;12631:45;12696:18;;;;12716:4;12692:29;;12369:358;-1:-1:-1;;;12369:358:58:o;12732:1800::-;13190:3;13203:22;;;13175:19;;13260:22;;;13142:4;13340:6;13313:3;13298:19;;13142:4;13374:327;13388:6;13385:1;13382:13;13374:327;;;13463:6;13450:20;13483:31;13508:5;13483:31;:::i;:::-;13550:42;13539:54;13527:67;;13617:4;13676:15;;;;13641:12;;;;13410:1;13403:9;13374:327;;;13378:3;13720:4;13710:14;;13769:9;13764:3;13760:19;13755:2;13744:9;13740:18;13733:47;13803:58;13857:3;13849:6;13841;13803:58;:::i;:::-;13789:72;;13909:9;13901:6;13897:22;13892:2;13881:9;13877:18;13870:50;13943:61;13997:6;13989;13981;13943:61;:::i;:::-;14040:22;;;14035:2;14020:18;;14013:50;14100:22;;;14180:6;;-1:-1:-1;14140:15:58;;14206:1;14216:288;14232:6;14227:3;14224:15;14216:288;;;14313:8;14300:22;14335:30;14357:7;14335:30;:::i;:::-;14399:15;14392:23;14378:38;;14477:17;;;;14438:14;;;;14258:1;14249:11;14216:288;;;-1:-1:-1;14521:5:58;12732:1800;-1:-1:-1;;;;;;;;;;;;12732:1800:58:o;14537:184::-;14607:6;14660:2;14648:9;14639:7;14635:23;14631:32;14628:52;;;14676:1;14673;14666:12;14628:52;-1:-1:-1;14699:16:58;;14537:184;-1:-1:-1;14537:184:58:o;20325:250::-;20410:1;20420:113;20434:6;20431:1;20428:13;20420:113;;;20510:11;;;20504:18;20491:11;;;20484:39;20456:2;20449:10;20420:113;;;-1:-1:-1;;20567:1:58;20549:16;;20542:27;20325:250::o;20580:287::-;20709:3;20747:6;20741:13;20763:66;20822:6;20817:3;20810:4;20802:6;20798:17;20763:66;:::i;:::-;20845:16;;;;;20580:287;-1:-1:-1;;20580:287:58:o;21230:455::-;21379:2;21368:9;21361:21;21342:4;21411:6;21405:13;21454:6;21449:2;21438:9;21434:18;21427:34;21470:79;21542:6;21537:2;21526:9;21522:18;21517:2;21509:6;21505:15;21470:79;:::i;:::-;21601:2;21589:15;21606:66;21585:88;21570:104;;;;21676:2;21566:113;;21230:455;-1:-1:-1;;21230:455:58:o"},"gasEstimates":{"creation":{"codeDepositCost":"2115400","executionCost":"infinite","totalCost":"infinite"},"external":{"DEPOSIT_PHASE()":"239","EDU_TOKEN()":"infinite","INIT_PHASE()":"282","SALE_PHASE()":"285","SPENDER_ROLE()":"305","UNCLAIMED_EDU_HOLDER()":"infinite","WITHDRAW_PHASE()":"284","currentPhase()":"2362","forwarderRegistry()":"infinite","grantRole(bytes32,address)":"infinite","hasRole(bytes32,address)":"infinite","isTrustedForwarder(address)":"infinite","onERC20Received(address,address,uint256,bytes)":"infinite","owner()":"infinite","payoutWallet()":"infinite","recoverERC20s(address[],address[],uint256[])":"infinite","recoverERC721s(address[],address[],uint256[])":"infinite","recoverETH(address[],uint256[])":"infinite","renounceRole(bytes32)":"infinite","revokeRole(bytes32,address)":"infinite","setInitialCredits(address[],uint256[],uint256[],bool[])":"infinite","setPayoutWallet(address)":"infinite","setPhase(uint256)":"infinite","spend(address,uint256)":"infinite","supportsInterface(bytes4)":"infinite","totalCredits()":"2383","totalDeposited()":"2404","transferOwnership(address)":"infinite","userCredits(address)":"8964","withdraw()":"infinite"},"internal":{"_msgData()":"infinite","_msgSender()":"infinite"}},"methodIdentifiers":{"DEPOSIT_PHASE()":"ad6b333b","EDU_TOKEN()":"5df2dcbc","INIT_PHASE()":"8de17b74","SALE_PHASE()":"148c2b5a","SPENDER_ROLE()":"72c16a24","UNCLAIMED_EDU_HOLDER()":"51887302","WITHDRAW_PHASE()":"8b785d49","currentPhase()":"055ad42e","forwarderRegistry()":"2b4c9f16","grantRole(bytes32,address)":"2f2ff15d","hasRole(bytes32,address)":"91d14854","isTrustedForwarder(address)":"572b6c05","onERC20Received(address,address,uint256,bytes)":"4fc35859","owner()":"8da5cb5b","payoutWallet()":"8488bb4e","recoverERC20s(address[],address[],uint256[])":"73c8a958","recoverERC721s(address[],address[],uint256[])":"c3666c36","recoverETH(address[],uint256[])":"f7ba94bd","renounceRole(bytes32)":"8bb9c5bf","revokeRole(bytes32,address)":"d547741f","setInitialCredits(address[],uint256[],uint256[],bool[])":"687f34e0","setPayoutWallet(address)":"6b8f9c43","setPhase(uint256)":"2cc82655","spend(address,uint256)":"af7d6ca3","supportsInterface(bytes4)":"01ffc9a7","totalCredits()":"b5bd3eb9","totalDeposited()":"ff50abdc","transferOwnership(address)":"f2fde38b","userCredits(address)":"20babb92","withdraw()":"3ccfd60b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"eduToken\",\"type\":\"address\"},{\"internalType\":\"address payable\",\"name\":\"payoutWallet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unclaimedEDUHolder\",\"type\":\"address\"},{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"forwarderRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InconsistentArrayLengths\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"InsufficientCredits\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotRoleHolder\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expectedPhase\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"actualPhase\",\"type\":\"uint256\"}],\"name\":\"OnlyDuringPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"SettingInvalidPhase\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"recoverable\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"recovering\",\"type\":\"uint256\"}],\"name\":\"UnrecoverableEDU\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"UserCreditsAlreadySet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressPayoutWallet\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroAddressUser\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZeroSpendAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"ZeroValueUnclaimedCredits\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"bonusSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"unclaimedSpent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositedSpent\",\"type\":\"uint256\"}],\"name\":\"CreditsSpent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"unclaimed\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"uint256[]\",\"name\":\"bonus\",\"type\":\"uint256[]\"},{\"indexed\":false,\"internalType\":\"bool[]\",\"name\":\"diamondHands\",\"type\":\"bool[]\"}],\"name\":\"InitialCreditsSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payoutWallet\",\"type\":\"address\"}],\"name\":\"PayoutWalletSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"PhaseSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DEPOSIT_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EDU_TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INIT_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SALE_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"SPENDER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNCLAIMED_EDU_HOLDER\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAW_PHASE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentPhase\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"forwarderRegistry\",\"outputs\":[{\"internalType\":\"contract IForwarderRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"hasRole_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"forwarder\",\"type\":\"address\"}],\"name\":\"isTrustedForwarder\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC20Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"magicValue\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"payoutWallet\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"wallet\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC20[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC20s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"contract IERC721[]\",\"name\":\"contracts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"recoverERC721s\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable[]\",\"name\":\"accounts\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"recoverETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"unclaimedCredits\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"bonusCredits\",\"type\":\"uint256[]\"},{\"internalType\":\"bool[]\",\"name\":\"diamondHands\",\"type\":\"bool[]\"}],\"name\":\"setInitialCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPayoutWallet\",\"type\":\"address\"}],\"name\":\"setPayoutWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"phase\",\"type\":\"uint256\"}],\"name\":\"setPhase\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"spend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDeposited\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userCredits\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"unclaimed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"bonus\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deposited\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"diamondHand\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InsufficientCredits(address,address,uint256)\":[{\"params\":{\"amount\":\"the amount of credits to spend.\",\"spender\":\"the spender of the credits.\",\"user\":\"the user whose credits are spent.\"}}],\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}],\"NotRoleHolder(bytes32,address)\":[{\"params\":{\"account\":\"The account that was checked.\",\"role\":\"The role the caller is missing.\"}}],\"OnlyDuringPhase(uint256,uint256)\":[{\"params\":{\"actualPhase\":\"the actual phase.\",\"expectedPhase\":\"the expected phase.\"}}],\"SettingInvalidPhase(uint256)\":[{\"params\":{\"phase\":\"the invalid phase.\"}}],\"UserCreditsAlreadySet(address)\":[{\"params\":{\"user\":\"the user whose credits are set.\"}}],\"ZeroSpendAmount(address,address)\":[{\"params\":{\"spender\":\"the spender of the credits.\",\"user\":\"the user whose credits are spent.\"}}],\"ZeroValueUnclaimedCredits(address)\":[{\"params\":{\"user\":\"the user whose credits are set.\"}}]},\"events\":{\"CreditsSpent(address,address,uint256,uint256,uint256)\":{\"params\":{\"bonusSpent\":\"the amount of bonus credits spent.\",\"depositedSpent\":\"the amount of deposited credits spent.\",\"spender\":\"the spender of the credits.\",\"unclaimedSpent\":\"the amount of unclaimed credits spent.\",\"user\":\"the user whose credits are spent.\"}},\"InitialCreditsSet(address[],uint256[],uint256[],bool[])\":{\"params\":{\"bonus\":\"the bonus EDU credits.\",\"diamondHands\":\"whether the users are a diamond hand.\",\"unclaimed\":\"the unclaimed EDU credits.\",\"users\":\"the users whose credits are set.\"}},\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"PayoutWalletSet(address)\":{\"params\":{\"payoutWallet\":\"the new payout wallet address.\"}},\"PhaseSet(uint256)\":{\"params\":{\"phase\":\"the phase set.\"}},\"RoleGranted(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been granted the role.\",\"operator\":\"The account that granted the role.\",\"role\":\"The role that has been granted.\"}},\"RoleRevoked(bytes32,address,address)\":{\"params\":{\"account\":\"The account that has been revoked the role.\",\"operator\":\"The account that revoked the role.\",\"role\":\"The role that has been revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits a {PhaseSet} to INIT_PHASE event.\"},\"grantRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleGranted} event if the account did not previously have the role.\",\"params\":{\"account\":\"The account to grant the role to.\",\"role\":\"The role to grant.\"}},\"hasRole(bytes32,address)\":{\"params\":{\"account\":\"The account.\",\"role\":\"The role.\"},\"returns\":{\"hasRole_\":\"Whether `account` has `role`.\"}},\"isTrustedForwarder(address)\":{\"params\":{\"forwarder\":\"The forwarder to check.\"},\"returns\":{\"_0\":\"True if `forwarder` is trusted, false if not.\"}},\"onERC20Received(address,address,uint256,bytes)\":{\"details\":\"Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.\",\"params\":{\"data\":\"Optional additional data with no specified format.\",\"from\":\"The previous tokens owner.\",\"operator\":\"The initiator of the safe transfer.\",\"value\":\"The amount of tokens transferred.\"},\"returns\":{\"magicValue\":\"`bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"payoutWallet()\":{\"returns\":{\"wallet\":\"The payout wallet.\"}},\"recoverERC20s(address[],address[],uint256[])\":{\"details\":\"Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\",\"tokens\":\"the list of ERC20 token addresses.\"}},\"recoverERC721s(address[],address[],uint256[])\":{\"details\":\"Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens  so that the extraction is limited to only tokens sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.Reverts if one of the ERC721 transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"contracts\":\"the list of ERC721 contract addresses.\",\"tokenIds\":\"the list of token ids to transfer.\"}},\"recoverETH(address[],uint256[])\":{\"details\":\"Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.Warning: this function should be overriden for contracts which are supposed to hold ETH tokens  so that the extraction is limited to only amounts sent accidentally.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.Reverts if one of the ETH transfers fails for any reason.\",\"params\":{\"accounts\":\"the list of accounts to transfer the tokens to.\",\"amounts\":\"the list of token amounts to transfer.\"}},\"renounceRole(bytes32)\":{\"details\":\"Reverts if `sender` does not have `role`.Emits a {RoleRevoked} event.\",\"params\":{\"role\":\"The role to renounce.\"}},\"revokeRole(bytes32,address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {RoleRevoked} event if the account previously had the role.\",\"params\":{\"account\":\"The account to revoke the role from.\",\"role\":\"The role to revoke.\"}},\"setInitialCredits(address[],uint256[],uint256[],bool[])\":{\"details\":\"Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.Reverts with {OnlyDuringPhase} if the current phase is not the init phase.Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressUser} if one of `users` is the zero address.Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.Emits a {InitialCreditsSet} event.\",\"params\":{\"bonusCredits\":\"the bonus EDU credits.\",\"diamondHands\":\"whether the users are a diamond hand.\",\"unclaimedCredits\":\"the unclaimed EDU credits.\",\"users\":\"the users whose credits are set.\"}},\"setPayoutWallet(address)\":{\"details\":\"Reverts with {NotContractOwner} if the sender is not the contract owner.Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.Emits a {PayoutWalletSet} event.\",\"params\":{\"newPayoutWallet\":\"The payout wallet.\"}},\"setPhase(uint256)\":{\"details\":\"Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.Reverts with {NotContractOwner} if the sender is not the contract owner.Emits a {PhaseSet} event.\",\"params\":{\"phase\":\"the phase to set.\"}},\"spend(address,uint256)\":{\"details\":\"Reverts with {ZeroSpendAmount} if `amount` is zero.Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.Reverts with {NotRoleHolder} if the sender is not a spender.Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.Emits a {EDUSpent} event.\",\"params\":{\"amount\":\"the amount of EDU tokens to spend.\",\"user\":\"the user whose EDU tokens are spent.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}},\"withdraw()\":{\"details\":\"Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase.\"}},\"title\":\"DepositManager\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InconsistentArrayLengths()\":[{\"notice\":\"Thrown when the multiple related arrays have different lengths.\"}],\"InsufficientCredits(address,address,uint256)\":[{\"notice\":\"Thrown when trying to spend more credits than the user has.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}],\"NotRoleHolder(bytes32,address)\":[{\"notice\":\"Thrown when an account does not have the required role.\"}],\"OnlyDuringPhase(uint256,uint256)\":[{\"notice\":\"Thrown when an action is performed during the wrong phase.\"}],\"SettingInvalidPhase(uint256)\":[{\"notice\":\"Thrown when the phase being set is invalid.\"}],\"UnrecoverableEDU(uint256,uint256)\":[{\"notice\":\"Thrown when trying to recover more EDU tokens than accidentally sent to this contract.\"}],\"UserCreditsAlreadySet(address)\":[{\"notice\":\"Thrown when setting the initial credits for a user whose credits have already been set.\"}],\"ZeroAddressPayoutWallet()\":[{\"notice\":\"Thrown when setting the zero address as the payout wallet.\"}],\"ZeroAddressUser()\":[{\"notice\":\"Thrown when setting the initial credits for a zero address user.\"}],\"ZeroSpendAmount(address,address)\":[{\"notice\":\"Thrown when trying to spend zero credits.\"}],\"ZeroValueUnclaimedCredits(address)\":[{\"notice\":\"Thrown when setting the initial credits for a user with zero unclaimed credits.\"}]},\"events\":{\"CreditsSpent(address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when credits are spent.\"},\"InitialCreditsSet(address[],uint256[],uint256[],bool[])\":{\"notice\":\"Emitted when the initial credits are set.\"},\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"PayoutWalletSet(address)\":{\"notice\":\"Emitted when the payout wallet address changes.\"},\"PhaseSet(uint256)\":{\"notice\":\"Emitted when the current phase is set.\"},\"RoleGranted(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is granted to `account`.\"},\"RoleRevoked(bytes32,address,address)\":{\"notice\":\"Emitted when `role` is revoked from `account`.\"}},\"kind\":\"user\",\"methods\":{\"grantRole(bytes32,address)\":{\"notice\":\"Grants a role to an account.\"},\"hasRole(bytes32,address)\":{\"notice\":\"Retrieves whether an account has a role.\"},\"isTrustedForwarder(address)\":{\"notice\":\"Checks whether a forwarder is trusted.\"},\"onERC20Received(address,address,uint256,bytes)\":{\"notice\":\"Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"payoutWallet()\":{\"notice\":\"Gets the payout wallet.\"},\"recoverERC20s(address[],address[],uint256[])\":{\"notice\":\"EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\"},\"recoverERC721s(address[],address[],uint256[])\":{\"notice\":\"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\"},\"recoverETH(address[],uint256[])\":{\"notice\":\"Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\"},\"renounceRole(bytes32)\":{\"notice\":\"Renounces a role by the sender.\"},\"revokeRole(bytes32,address)\":{\"notice\":\"Revokes a role from an account.\"},\"setInitialCredits(address[],uint256[],uint256[],bool[])\":{\"notice\":\"Sets the unclaimed and bonus EDU credits for a list of users.\"},\"setPayoutWallet(address)\":{\"notice\":\"Sets the payout wallet.\"},\"setPhase(uint256)\":{\"notice\":\"Sets the current phase.\"},\"spend(address,uint256)\":{\"notice\":\"Spends EDU tokens from the user's balance by a spender account.The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"totalCredits()\":{\"notice\":\"The total credits is the sum of all unclaimed, bonus and deposited credits.The total credits does not decrease when credits are spent or withdrawn.\"},\"totalDeposited()\":{\"notice\":\"The total deposited is the sum of all deposited credits.The total deposited decreases when unclaimed credits are spent or withdrawn.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"},\"withdraw()\":{\"notice\":\"Withdraws all the remaining unclaimed and deposited EDU credits.\"}},\"notice\":\"Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).Handles the deposit of EDU tokens by users (during the deposit phase).Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase).\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/payment/EDUCreditsManager.sol\":\"EDUCreditsManager\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when trying to transfer tokens without calldata to the contract.\\nerror EtherReceptionDisabled();\\n\\n/// @notice Thrown when the multiple related arrays have different lengths.\\nerror InconsistentArrayLengths();\\n\",\"keccak256\":\"0xe863ee99597e327b029ac2217bf983d2d11765127853c0679ae42225ce1067e8\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {AccessControlBase} from \\\"./base/AccessControlBase.sol\\\";\\nimport {ContractOwnership} from \\\"./ContractOwnership.sol\\\";\\n\\n/// @title Access control via roles management (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract AccessControl is AccessControlBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x21c3e803ed9ae31e2f165a260feba7f311686d83cf46a6eece90fb96605d1e88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xdccbcf541213db1382ed08ce2f5f05cef94ec4da9dbdf99015a947ddf05f3424\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/AccessControlBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControl} from \\\"./../../access/interfaces/IAccessControl.sol\\\";\\nimport {AccessControlStorage} from \\\"./../libraries/AccessControlStorage.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Access control via roles management (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract AccessControlBase is IAccessControl, Context {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    function grantRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().grantRole(role, account, operator);\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    function revokeRole(bytes32 role, address account) external {\\n        address operator = _msgSender();\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(operator);\\n        AccessControlStorage.layout().revokeRole(role, account, operator);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function renounceRole(bytes32 role) external {\\n        AccessControlStorage.layout().renounceRole(_msgSender(), role);\\n    }\\n\\n    /// @inheritdoc IAccessControl\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_) {\\n        return AccessControlStorage.layout().hasRole(role, account);\\n    }\\n}\\n\",\"keccak256\":\"0x922cf4abb506400feb78edab23e1cacddbd50541d345f460004e73a5eef182dc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xe13f43f5bdef2f333ddc9dc27bd7153d2c00911d6b6516dd5755d9f3ad5dc12a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/AccessControlErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account does not have the required role.\\n/// @param role The role the caller is missing.\\n/// @param account The account that was checked.\\nerror NotRoleHolder(bytes32 role, address account);\\n\\n/// @notice Thrown when an account does not have the required role on a target contract.\\n/// @param targetContract The contract that was checked.\\n/// @param role The role that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractRoleHolder(address targetContract, bytes32 role, address account);\\n\",\"keccak256\":\"0x01f13fa7f5c5473314dabbd6b556d8e2036dc6e850e03ead0ea605ed4c4e16eb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x00d2942a00eeb8103ff9e5ea3f91e31458087aeebc615f26b9f8188cfcba698e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IAccessControlEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Access control via roles management (events)\\ninterface IAccessControlEvents {\\n    /// @notice Emitted when `role` is granted to `account`.\\n    /// @param role The role that has been granted.\\n    /// @param account The account that has been granted the role.\\n    /// @param operator The account that granted the role.\\n    event RoleGranted(bytes32 role, address account, address operator);\\n\\n    /// @notice Emitted when `role` is revoked from `account`.\\n    /// @param role The role that has been revoked.\\n    /// @param account The account that has been revoked the role.\\n    /// @param operator The account that revoked the role.\\n    event RoleRevoked(bytes32 role, address account, address operator);\\n}\\n\",\"keccak256\":\"0xc33eb3e7869dc886ff1bd5526494a67e2bea02185d8b54cacb2ad2d166faddcd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/IERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC-173 Contract Ownership Standard (events)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173Events {\\n    /// @notice Emitted when the contract ownership changes.\\n    /// @param previousOwner the previous contract owner.\\n    /// @param newOwner the new contract owner.\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n}\\n\",\"keccak256\":\"0xc2e60c72fac96170696024e07fc5650e270c6cf1a701af4aa0a945bd4b113877\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\n\\n/// @title Access control via roles management (functions)\\ninterface IAccessControl is IAccessControlEvents {\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param role The role to renounce.\\n    function renounceRole(bytes32 role) external;\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(bytes32 role, address account) external view returns (bool hasRole_);\\n}\\n\",\"keccak256\":\"0xf5548f89b99d4f4bdfe6ee694db7fb002457fe1a50ce381a5cb6b84019e032af\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 is IERC173Events {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0xbb6b2221718a4abaa95b449cb42111c8b1840ea7e439d801d0fffe8a93bd9a18\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotRoleHolder, NotTargetContractRoleHolder} from \\\"./../errors/AccessControlErrors.sol\\\";\\nimport {IAccessControlEvents} from \\\"./../events/IAccessControlEvents.sol\\\";\\nimport {IAccessControl} from \\\"./../interfaces/IAccessControl.sol\\\";\\n\\nlibrary AccessControlStorage {\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct Layout {\\n        mapping(bytes32 => mapping(address => bool)) roles;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.AccessControl.storage\\\")) - 1);\\n\\n    /// @notice Grants a role to an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleGranted} event if the account did not previously have the role.\\n    /// @param role The role to grant.\\n    /// @param account The account to grant the role to.\\n    /// @param operator The account requesting the role change.\\n    function grantRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (!s.hasRole(role, account)) {\\n            s.roles[role][account] = true;\\n            emit IAccessControlEvents.RoleGranted(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Revokes a role from an account.\\n    /// @dev Note: Call to this function should be properly access controlled.\\n    /// @dev Emits a {RoleRevoked} event if the account previously had the role.\\n    /// @param role The role to revoke.\\n    /// @param account The account to revoke the role from.\\n    /// @param operator The account requesting the role change.\\n    function revokeRole(Layout storage s, bytes32 role, address account, address operator) internal {\\n        if (s.hasRole(role, account)) {\\n            s.roles[role][account] = false;\\n            emit IAccessControlEvents.RoleRevoked(role, account, operator);\\n        }\\n    }\\n\\n    /// @notice Renounces a role by the sender.\\n    /// @dev Reverts with {NotRoleHolder} if `sender` does not have `role`.\\n    /// @dev Emits a {RoleRevoked} event.\\n    /// @param sender The message sender.\\n    /// @param role The role to renounce.\\n    function renounceRole(Layout storage s, address sender, bytes32 role) internal {\\n        s.enforceHasRole(role, sender);\\n        s.roles[role][sender] = false;\\n        emit IAccessControlEvents.RoleRevoked(role, sender, sender);\\n    }\\n\\n    /// @notice Retrieves whether an account has a role.\\n    /// @param role The role.\\n    /// @param account The account.\\n    /// @return hasRole_ Whether `account` has `role`.\\n    function hasRole(Layout storage s, bytes32 role, address account) internal view returns (bool hasRole_) {\\n        return s.roles[role][account];\\n    }\\n\\n    /// @notice Checks whether an account has a role in a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    /// @return hasTargetContractRole_ Whether `account` has `role` in `targetContract`.\\n    function hasTargetContractRole(address targetContract, bytes32 role, address account) internal view returns (bool hasTargetContractRole_) {\\n        return IAccessControl(targetContract).hasRole(role, account);\\n    }\\n\\n    /// @notice Ensures that an account has a role.\\n    /// @dev Reverts with {NotRoleHolder} if `account` does not have `role`.\\n    /// @param role The role.\\n    /// @param account The account.\\n    function enforceHasRole(Layout storage s, bytes32 role, address account) internal view {\\n        if (!s.hasRole(role, account)) revert NotRoleHolder(role, account);\\n    }\\n\\n    /// @notice Enforces that an account has a role in a target contract.\\n    /// @dev Reverts with {NotTargetContractRoleHolder} if the account does not have the role.\\n    /// @param targetContract The contract to check.\\n    /// @param role The role to check.\\n    /// @param account The account to check.\\n    function enforceHasTargetContractRole(address targetContract, bytes32 role, address account) internal view {\\n        if (!hasTargetContractRole(targetContract, role, account)) {\\n            revert NotTargetContractRoleHolder(targetContract, role, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x42e330c26f28436ae28d7f418331748fd0b3a64fc0f130b84a14b2eb013b3668\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {IERC173Events} from \\\"./../events/IERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit IERC173Events.OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit IERC173Events.OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) {\\n            revert NotTargetContractOwner(targetContract, account);\\n        }\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd1d10d7304df028a482fe9d2c8e6280ed69abee1c5a392aae2c1da9291d81e1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x75e87ab2aad8bded771572168213ec6b2f037c0680961ab57bd59910eec7cfa2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x14e798b909b7215752bc10da92caf9ba8edcd8ff70ec2300e0a6f9c7972ec31c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x22ffd665621114141366ce3d054fe7e4934979e827db9eb26fa9297bf0270662\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba3584cfcf74c44441e971745559a0d475a8145548bfd67407f6acb2c9dd2eec\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC2771} from \\\"./interfaces/IERC2771.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"./base/ForwarderRegistryContextBase.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContext is ForwarderRegistryContextBase, IERC2771 {\\n    constructor(IForwarderRegistry forwarderRegistry_) ForwarderRegistryContextBase(forwarderRegistry_) {}\\n\\n    function forwarderRegistry() external view returns (IForwarderRegistry) {\\n        return _FORWARDER_REGISTRY;\\n    }\\n\\n    /// @inheritdoc IERC2771\\n    function isTrustedForwarder(address forwarder) external view virtual returns (bool) {\\n        return forwarder == address(_FORWARDER_REGISTRY);\\n    }\\n}\\n\",\"keccak256\":\"0xc68901b6a406156255814a3eb864c25a85070de51560f21f3f62090a7ba9b342\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IForwarderRegistry} from \\\"./../interfaces/IForwarderRegistry.sol\\\";\\nimport {ERC2771Calldata} from \\\"./../libraries/ERC2771Calldata.sol\\\";\\n\\n/// @title Meta-Transactions Forwarder Registry Context (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\nabstract contract ForwarderRegistryContextBase {\\n    IForwarderRegistry internal immutable _FORWARDER_REGISTRY;\\n\\n    constructor(IForwarderRegistry forwarderRegistry) {\\n        _FORWARDER_REGISTRY = forwarderRegistry;\\n    }\\n\\n    /// @notice Returns the message sender depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgSender() internal view virtual returns (address) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.sender;\\n        }\\n\\n        address sender = ERC2771Calldata.msgSender();\\n\\n        // Return the EIP-2771 calldata-appended sender address if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(sender, msg.sender)) {\\n            return sender;\\n        }\\n\\n        return msg.sender;\\n    }\\n\\n    /// @notice Returns the message data depending on the ForwarderRegistry-based meta-transaction context.\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        // Optimised path in case of an EOA-initiated direct tx to the contract or a call from a contract not complying with EIP-2771\\n        // solhint-disable-next-line avoid-tx-origin\\n        if (msg.sender == tx.origin || msg.data.length < 24) {\\n            return msg.data;\\n        }\\n\\n        // Return the EIP-2771 calldata (minus the appended sender) if the message was forwarded by the ForwarderRegistry or an approved forwarder\\n        if (msg.sender == address(_FORWARDER_REGISTRY) || _FORWARDER_REGISTRY.isApprovedForwarder(ERC2771Calldata.msgSender(), msg.sender)) {\\n            return ERC2771Calldata.msgData();\\n        }\\n\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x6a34759b43f41eb009e1706f6b9c082bf7ee5843e5728ee94352ea52d374f6fd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IERC2771.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Secure Protocol for Native Meta Transactions.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\ninterface IERC2771 {\\n    /// @notice Checks whether a forwarder is trusted.\\n    /// @param forwarder The forwarder to check.\\n    /// @return isTrusted True if `forwarder` is trusted, false if not.\\n    function isTrustedForwarder(address forwarder) external view returns (bool isTrusted);\\n}\\n\",\"keccak256\":\"0xa9a1b71b90ddb041f5dc1f040bda8b04970ef62be35d63fec4d96c25f93a5d81\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Universal Meta-Transactions Forwarder Registry.\\n/// @dev Derived from https://github.com/wighawag/universal-forwarder (MIT licence)\\ninterface IForwarderRegistry {\\n    /// @notice Checks whether an account is as an approved meta-transaction forwarder for a sender account.\\n    /// @param sender The sender account.\\n    /// @param forwarder The forwarder account.\\n    /// @return isApproved True if `forwarder` is an approved meta-transaction forwarder for `sender`, false otherwise.\\n    function isApprovedForwarder(address sender, address forwarder) external view returns (bool isApproved);\\n}\\n\",\"keccak256\":\"0x4139eac7b7faa75ccb832a975d37fd5207b44393e546453437e5f899968d0a08\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/metatx/libraries/ERC2771Calldata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @dev Derived from https://github.com/OpenZeppelin/openzeppelin-contracts (MIT licence)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-2771\\nlibrary ERC2771Calldata {\\n    /// @notice Returns the sender address appended at the end of the calldata, as specified in EIP-2771.\\n    function msgSender() internal pure returns (address sender) {\\n        assembly {\\n            sender := shr(96, calldataload(sub(calldatasize(), 20)))\\n        }\\n    }\\n\\n    /// @notice Returns the calldata while omitting the appended sender address, as specified in EIP-2771.\\n    function msgData() internal pure returns (bytes calldata data) {\\n        unchecked {\\n            return msg.data[:msg.data.length - 20];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1124d336b4416e7d747a136c85adb0733dcf8cb2e60550fc30f81db2fb093b4\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {PayoutWalletStorage} from \\\"./libraries/PayoutWalletStorage.sol\\\";\\nimport {PayoutWalletBase} from \\\"./base/PayoutWalletBase.sol\\\";\\nimport {ContractOwnership} from \\\"../access/ContractOwnership.sol\\\";\\n\\n/// @title Payout wallet (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract PayoutWallet is PayoutWalletBase, ContractOwnership {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    constructor(address payable initialPayoutWallet) {\\n        PayoutWalletStorage.layout().constructorInit(initialPayoutWallet);\\n    }\\n}\\n\",\"keccak256\":\"0x47cf847059ae6d8d00aa1b5c96e57e5bb51cac404bd832bfca9a88d532b03253\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/base/PayoutWalletBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWallet} from \\\"./../interfaces/IPayoutWallet.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"./../libraries/PayoutWalletStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title Payout wallet (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract PayoutWalletBase is IPayoutWallet, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(address payable newPayoutWallet) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        PayoutWalletStorage.layout().setPayoutWallet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet) {\\n        return PayoutWalletStorage.layout().payoutWallet();\\n    }\\n}\\n\",\"keccak256\":\"0xff1e9d711b9fb91092e75c7d75c0fdfb649bb98ccfcb371e6137e22e576a420a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/errors/PayoutWalletErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting the zero address as the payout wallet.\\nerror ZeroAddressPayoutWallet();\\n\",\"keccak256\":\"0x7e506a858cc1f73c8b0607073a29192ceba1b37ce3377cf1cb7da363f7e5bba1\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/events/IPayoutWalletEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title Payout wallet (events)\\ninterface IPayoutWalletEvents {\\n    /// @notice Emitted when the payout wallet address changes.\\n    /// @param payoutWallet the new payout wallet address.\\n    event PayoutWalletSet(address payoutWallet);\\n}\\n\",\"keccak256\":\"0x6bb31b04823f16e200607947f8523171269c80ba57aea78d8789c82faedaa908\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/interfaces/IPayoutWallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\n\\n/// @title Payout wallet (functions)\\ninterface IPayoutWallet is IPayoutWalletEvents {\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet() external view returns (address payable wallet);\\n}\\n\",\"keccak256\":\"0xa039277ccdb071a84badace43ead4200bb0eacd7f2ba152e657ff7281be34704\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {ZeroAddressPayoutWallet} from \\\"./../errors/PayoutWalletErrors.sol\\\";\\nimport {IPayoutWalletEvents} from \\\"./../events/IPayoutWalletEvents.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\n\\nlibrary PayoutWalletStorage {\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n\\n    struct Layout {\\n        address payable wallet;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.payment.PayoutWallet.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial payout wallet (immutable version).\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function constructorInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Initializes the storage with an initial payout wallet (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `initialPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param initialPayoutWallet The initial payout wallet.\\n    function proxyInit(Layout storage s, address payable initialPayoutWallet) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.setPayoutWallet(initialPayoutWallet);\\n    }\\n\\n    /// @notice Sets the payout wallet.\\n    /// @dev Reverts with {ZeroAddressPayoutWallet} if `newPayoutWallet` is the zero address.\\n    /// @dev Emits a {PayoutWalletSet} event.\\n    /// @param newPayoutWallet The payout wallet.\\n    function setPayoutWallet(Layout storage s, address payable newPayoutWallet) internal {\\n        if (newPayoutWallet == address(0)) revert ZeroAddressPayoutWallet();\\n        s.wallet = newPayoutWallet;\\n        emit IPayoutWalletEvents.PayoutWalletSet(newPayoutWallet);\\n    }\\n\\n    /// @notice Gets the payout wallet.\\n    /// @return wallet The payout wallet.\\n    function payoutWallet(Layout storage s) internal view returns (address payable) {\\n        return s.wallet;\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x085ce624a3817a478398de616d035acd6a762636cce19cff02a6466b1c070e2b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x65cba678628c092823ff6d4075d952b1e9de71f59c15309f459b71301a135993\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0xf7b57ddf1642ee542e64a4966dca8e32d0bada2591d2eb713bba2e5a3ef54a3d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {TokenRecoveryBase} from \\\"./base/TokenRecoveryBase.sol\\\";\\nimport {ContractOwnership} from \\\"./../access/ContractOwnership.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract TokenRecovery is TokenRecoveryBase, ContractOwnership {\\n\\n}\\n\",\"keccak256\":\"0x9f49dec6ab95d7ad99055eee9e70ad8e4300bdabf2c85c20f9f5f0c6269a6c0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"./../../CommonErrors.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport {IERC721} from \\\"./../../token/ERC721/interfaces/IERC721.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../../access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\n/// @title Recovery mechanism for ETH/ERC20/ERC721 tokens accidentally sent to this contract (proxiable version).\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC173 (Contract Ownership standard).\\nabstract contract TokenRecoveryBase is Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using SafeERC20 for IERC20;\\n    using Address for address payable;\\n\\n    /// @notice Extract ETH tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Note: While contracts can generally prevent accidental ETH transfer by implementating a reverting\\n    ///  `receive()` function, this can still be bypassed in a `selfdestruct(address)` scenario.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ETH tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} `accounts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ETH transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverETH(address payable[] calldata accounts, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                accounts[i].sendValue(amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC20 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC20 tokens\\n    ///  so that the extraction is limited to only amounts sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `tokens` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC20 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param tokens the list of ERC20 token addresses.\\n    /// @param amounts the list of token amounts to transfer.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != tokens.length || length != amounts.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                tokens[i].safeTransfer(accounts[i], amounts[i]);\\n            }\\n        }\\n    }\\n\\n    /// @notice Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts.\\n    /// @dev Warning: this function should be overriden for contracts which are supposed to hold ERC721 tokens\\n    ///  so that the extraction is limited to only tokens sent accidentally.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `accounts`, `contracts` and `amounts` do not have the same length.\\n    /// @dev Reverts if one of the ERC721 transfers fails for any reason.\\n    /// @param accounts the list of accounts to transfer the tokens to.\\n    /// @param contracts the list of ERC721 contract addresses.\\n    /// @param tokenIds the list of token ids to transfer.\\n    function recoverERC721s(address[] calldata accounts, IERC721[] calldata contracts, uint256[] calldata tokenIds) public virtual {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        uint256 length = accounts.length;\\n        if (length != contracts.length || length != tokenIds.length) revert InconsistentArrayLengths();\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                contracts[i].transferFrom(address(this), accounts[i], tokenIds[i]);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb245a212ba820a98cd4626cd5e85b9a1a80b70e8eba9a35c2ecd26306d801193\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Receiver} from \\\"./interfaces/IERC20Receiver.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\nimport {InterfaceDetection} from \\\"../../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC20 Fungible Token Standard, Receiver (immutable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ERC20Receiver is IERC20Receiver, InterfaceDetection {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Receiver.\\n    constructor() {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Receiver).interfaceId, true);\\n    }\\n}\\n\",\"keccak256\":\"0x6509d98dc0a49fadcc87bba2320dc224eb17add644fbf3fd4c86889e13f0c131\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20AllowanceErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the allowance increase creates an overflow.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param increment The allowance increase.\\nerror ERC20AllowanceOverflow(address owner, address spender, uint256 allowance, uint256 increment);\\n\",\"keccak256\":\"0x02c49c65dc1b9a602bd4c2aae19caaf2d4a632c1860dfa0d45663e476040ff3f\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20BatchTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch transfer operation.\\nerror ERC20BatchTransferValuesOverflow();\\n\",\"keccak256\":\"0xb8261bef4a8bcb930a73cb36ce32585d8d4d3f1e3e5330a67f1078b9792f5710\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when setting an allowance to the the zero address.\\n/// @param owner The owner of the tokens.\\nerror ERC20ApprovalToAddressZero(address owner);\\n\\n/// @notice Thrown when the allowance decreases below the current alowance set.\\n/// @param owner The owner of the tokens.\\n/// @param spender The spender of the tokens.\\n/// @param allowance The current allowance.\\n/// @param decrement The allowance decrease.\\nerror ERC20InsufficientAllowance(address owner, address spender, uint256 allowance, uint256 decrement);\\n\\n/// @notice Thrown when transferring tokens to the zero address.\\n/// @param owner The account from which the tokens are transferred.\\nerror ERC20TransferToAddressZero(address owner);\\n\\n/// @notice Thrown when transferring an amount of tokens greater than the current balance.\\n/// @param owner The owner of the tokens.\\n/// @param balance The current balance.\\n/// @param value The amount of tokens being transferred.\\nerror ERC20InsufficientBalance(address owner, uint256 balance, uint256 value);\\n\",\"keccak256\":\"0x9224eb85f85f9fe58bda9cd7b48fb78f1e56772315bd1ec84e9ad38f55b55dbe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20MintableErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when the minting tokens to the zero address.\\nerror ERC20MintToAddressZero();\\n\\n/// @notice Thrown when the `values` array sum overflows on a batch mint operation.\\nerror ERC20BatchMintValuesOverflow();\\n\\n/// @notice Thrown when the minting tokens overflows the supply.\\n/// @param supply The current supply.\\n/// @param value The amount of tokens being minted.\\nerror ERC20TotalSupplyOverflow(uint256 supply, uint256 value);\\n\",\"keccak256\":\"0x050233c30decfad7c35c8e133b0e8073562c8f4f8776799d16179b2e5a08b850\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/errors/ERC20SafeTransfersErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @notice Thrown when a safe transfer is rejected by the recipient contract.\\n/// @param recipient The recipient contract.\\nerror ERC20SafeTransferRejected(address recipient);\\n\",\"keccak256\":\"0x805977a4ecd8fb4d39cbb9b3c1bb273e32c0af20da1c1f506e73701bef528c9d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/events/IERC20Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20Events {\\n    /// @notice Emitted when tokens are transferred, including zero value transfers.\\n    /// @param from The account where the transferred tokens are withdrawn from.\\n    /// @param to The account where the transferred tokens are deposited to.\\n    /// @param value The amount of tokens being transferred.\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /// @notice Emitted when an approval is set.\\n    /// @param owner The account granting an allowance to `spender`.\\n    /// @param spender The account being granted an allowance from `owner`.\\n    /// @param value The allowance amount being granted.\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xd756847860b666bca19696c98b79222c0731a4b415cf68182124c8b8b5de2c88\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\n\\n/// @title ERC20 Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: The ERC-165 identifier for this interface is 0x36372b07.\\ninterface IERC20 is IERC20Events {\\n    /// @notice Sets the allowance to an account from the sender.\\n    /// @notice Warning: Beware that changing an allowance with this method brings the risk that someone may use both the old and\\n    ///  the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce\\n    ///  the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param spender The account being granted the allowance by the message caller.\\n    /// @param value The allowance amount to grant.\\n    /// @return result Whether the operation succeeded.\\n    function approve(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from the sender.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transfer(address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @return result Whether the operation succeeded.\\n    function transferFrom(address from, address to, uint256 value) external returns (bool result);\\n\\n    /// @notice Gets the total token supply.\\n    /// @return supply The total token supply.\\n    function totalSupply() external view returns (uint256 supply);\\n\\n    /// @notice Gets an account balance.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(address owner, address spender) external view returns (uint256 value);\\n}\\n\",\"keccak256\":\"0xb93b440da9fea1bb92e63be35d086275a8cddd439acc2927f906f31e39339a77\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Allowance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Allowance.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x9d075186.\\ninterface IERC20Allowance {\\n    /// @notice Increases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender`'s allowance by the sender overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    /// @return result Whether the operation succeeded.\\n    function increaseAllowance(address spender, uint256 value) external returns (bool result);\\n\\n    /// @notice Decreases the allowance granted to an account by the sender.\\n    /// @notice This is an alternative to {approve} that can be used as a mitigation for transaction ordering problems.\\n    /// @dev Reverts if `spender` is the zero address.\\n    /// @dev Reverts if `spender` does not have at least `value` of allowance by the sender.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by the sender.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    /// @return result Whether the operation succeeded.\\n    function decreaseAllowance(address spender, uint256 value) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x5f28474e1cc281778da25e0fec62b5bb78d15111624f6ddb85b6d9dd0bb53f3e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20BatchTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Batch Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0xc05327e6.\\ninterface IERC20BatchTransfers {\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from the sender.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `sum(values)` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransfer(address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n\\n    /// @notice Transfers multiple amounts of tokens to multiple recipients from a specified address.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to be transferred.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    /// @return result Whether the operation succeeded.\\n    function batchTransferFrom(address from, address[] calldata recipients, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x26135c28fa1f75999151a5853283e3265b7104680e6427e56bac7c1f7db0afff\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Burnable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x3b5a0bf8.\\ninterface IERC20Burnable {\\n    /// @notice Burns an amount of tokens from the sender, decreasing the total supply.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burn(uint256 value) external returns (bool result);\\n\\n    /// @notice Burns an amount of tokens from a specified address, decreasing the total supply.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits an {IERC20-Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function burnFrom(address from, uint256 value) external returns (bool result);\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Reverts if `owners` and `values` have different lengths.\\n    /// @dev Reverts if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts if the sender is not an `owner` and does not have at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if the sender is not this `owner` (non-standard).\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    /// @return result Whether the operation succeeded.\\n    function batchBurnFrom(address[] calldata owners, uint256[] calldata values) external returns (bool result);\\n}\\n\",\"keccak256\":\"0xacc9d72ff27c4b58be9941f321f83a4b4437facd6c89c12c534e3525230519cb\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Mintable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Mintable.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x28963e1e.\\ninterface IERC20Mintable {\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(address to, uint256 value) external;\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Reverts if `recipients` and `values` have different lengths.\\n    /// @dev Reverts if one of `recipients` is the zero address.\\n    /// @dev Reverts if the total supply overflows.\\n    /// @dev Emits an {IERC20-Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(address[] calldata recipients, uint256[] calldata values) external;\\n}\\n\",\"keccak256\":\"0x5d68d1fa4d138d13effe6a29a704277daefa379dead9053db79ac33d32a607fe\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, Tokens Receiver.\\n/// @notice Interface for supporting safe transfers from ERC20 contracts with the Safe Transfers extension.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x4fc35859.\\ninterface IERC20Receiver {\\n    /// @notice Handles the receipt of ERC20 tokens.\\n    /// @dev Note: this function is called by an {ERC20SafeTransfer} contract after a safe transfer.\\n    /// @param operator The initiator of the safe transfer.\\n    /// @param from The previous tokens owner.\\n    /// @param value The amount of tokens transferred.\\n    /// @param data Optional additional data with no specified format.\\n    /// @return magicValue `bytes4(keccak256(\\\"onERC20Received(address,address,uint256,bytes)\\\"))` (`0x4fc35859`) to accept, any other value to refuse.\\n    function onERC20Received(address operator, address from, uint256 value, bytes calldata data) external returns (bytes4 magicValue);\\n}\\n\",\"keccak256\":\"0xc21b04865b45722ebc6fc2dcef2c327d43c2e5c28273ce2b68d1a5124317c76e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20SafeTransfers.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC20 Token Standard, optional extension: Safe Transfers.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-20\\n/// @dev Note: the ERC-165 identifier for this interface is 0x53f41a97.\\ninterface IERC20SafeTransfers {\\n    /// @notice Transfers an amount of tokens to a recipient from the sender. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if the sender does not have at least `value` of balance.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransfer(address to, uint256 value, bytes calldata data) external returns (bool result);\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` does not have at least `value` of balance.\\n    /// @dev Reverts if the sender is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts if `to` is a contract and the call to `onERC20Received(address,address,uint256,bytes)` fails, reverts or is rejected.\\n    /// @dev Emits an {IERC20-Transfer} event.\\n    /// @dev Optionally emits an {IERC20-Approval} event if the sender is not `from` (non-standard).\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    /// @return result Whether the operation succeeded.\\n    function safeTransferFrom(address from, address to, uint256 value, bytes calldata data) external returns (bool result);\\n}\\n\",\"keccak256\":\"0x235ae3d1109ae591904ad298c3cd6fea07b399baae4da6992f1a01eb66815a34\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n// solhint-disable-next-line max-line-length\\nimport {ERC20ApprovalToAddressZero, ERC20InsufficientAllowance, ERC20TransferToAddressZero, ERC20InsufficientBalance} from \\\"./../errors/ERC20Errors.sol\\\";\\nimport {ERC20AllowanceOverflow} from \\\"./../errors/ERC20AllowanceErrors.sol\\\";\\nimport {ERC20BatchTransferValuesOverflow} from \\\"./../errors/ERC20BatchTransfersErrors.sol\\\";\\nimport {ERC20SafeTransferRejected} from \\\"./../errors/ERC20SafeTransfersErrors.sol\\\";\\nimport {ERC20MintToAddressZero, ERC20BatchMintValuesOverflow, ERC20TotalSupplyOverflow} from \\\"./../errors/ERC20MintableErrors.sol\\\";\\nimport {InconsistentArrayLengths} from \\\"./../../../CommonErrors.sol\\\";\\nimport {IERC20Events} from \\\"./../events/IERC20Events.sol\\\";\\nimport {IERC20} from \\\"./../interfaces/IERC20.sol\\\";\\nimport {IERC20Allowance} from \\\"./../interfaces/IERC20Allowance.sol\\\";\\nimport {IERC20BatchTransfers} from \\\"./../interfaces/IERC20BatchTransfers.sol\\\";\\nimport {IERC20SafeTransfers} from \\\"./../interfaces/IERC20SafeTransfers.sol\\\";\\nimport {IERC20Mintable} from \\\"./../interfaces/IERC20Mintable.sol\\\";\\nimport {IERC20Burnable} from \\\"./../interfaces/IERC20Burnable.sol\\\";\\nimport {IERC20Receiver} from \\\"./../interfaces/IERC20Receiver.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ERC20Storage {\\n    using Address for address;\\n    using ERC20Storage for ERC20Storage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        mapping(address => uint256) balances;\\n        mapping(address => mapping(address => uint256)) allowances;\\n        uint256 supply;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.token.ERC20.ERC20.phase\\\")) - 1);\\n\\n    bytes4 internal constant ERC20_RECEIVED = IERC20Receiver.onERC20Received.selector;\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function init() internal {\\n        InterfaceDetectionStorage.Layout storage erc165Layout = InterfaceDetectionStorage.layout();\\n        erc165Layout.setSupportedInterface(type(IERC20).interfaceId, true);\\n        erc165Layout.setSupportedInterface(type(IERC20Allowance).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20, ERC20Allowance.\\n    function initWithAllocations(address[] memory initialHolders, uint256[] memory initialAllocations) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        init();\\n        layout().batchMint(initialHolders, initialAllocations);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20BatchTransfers.\\n    function initERC20BatchTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20BatchTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20SafeTransfers.\\n    function initERC20SafeTransfers() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20SafeTransfers).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Mintable.\\n    function initERC20Mintable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Mintable).interfaceId, true);\\n    }\\n\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC20Burnable.\\n    function initERC20Burnable() internal {\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC20Burnable).interfaceId, true);\\n    }\\n\\n    /// @notice Sets the allowance to an account by an owner.\\n    /// @dev Note: This function implements {ERC20-approve(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Emits an {Approval} event.\\n    /// @param owner The account to set the allowance from.\\n    /// @param spender The account being granted the allowance by `owner`.\\n    /// @param value The allowance amount to grant.\\n    function approve(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        s.allowances[owner][spender] = value;\\n        emit IERC20Events.Approval(owner, spender, value);\\n    }\\n\\n    /// @notice Increases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-increaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20AllowanceOverflow} if `spender`'s allowance by `owner` overflows.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account increasing the allowance.\\n    /// @param spender The account whose allowance is being increased.\\n    /// @param value The allowance amount increase.\\n    function increaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n        if (value != 0) {\\n            unchecked {\\n                uint256 newAllowance = currentAllowance + value;\\n                if (newAllowance <= currentAllowance) revert ERC20AllowanceOverflow(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Decreases the allowance granted to an account by an owner.\\n    /// @dev Note: This function implements {ERC20Allowance-decreaseAllowance(address,uint256)}.\\n    /// @dev Reverts with {ERC20ApprovalToAddressZero} if `spender` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `spender` does not have at least `value` of allowance by `owner`.\\n    /// @dev Emits an {IERC20-Approval} event with an updated allowance for `spender` by `owner`.\\n    /// @param owner The account decreasing the allowance.\\n    /// @param spender The account whose allowance is being decreased.\\n    /// @param value The allowance amount decrease.\\n    function decreaseAllowance(Layout storage s, address owner, address spender, uint256 value) internal {\\n        if (spender == address(0)) revert ERC20ApprovalToAddressZero(owner);\\n        uint256 currentAllowance = s.allowances[owner][spender];\\n\\n        if (currentAllowance != type(uint256).max && value != 0) {\\n            unchecked {\\n                // save gas when allowance is maximal by not reducing it (see https://github.com/ethereum/EIPs/issues/717)\\n                uint256 newAllowance = currentAllowance - value;\\n                if (newAllowance >= currentAllowance) revert ERC20InsufficientAllowance(owner, spender, currentAllowance, value);\\n                s.allowances[owner][spender] = newAllowance;\\n                currentAllowance = newAllowance;\\n            }\\n        }\\n        emit IERC20Events.Approval(owner, spender, currentAllowance);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient.\\n    /// @dev Note: This function implements {ERC20-transfer(address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transfer(Layout storage s, address from, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                if (from != to) {\\n                    s.balances[from] = newBalance;\\n                    s.balances[to] += value;\\n                }\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, to, value);\\n    }\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient by a sender.\\n    /// @dev Note: This function implements {ERC20-transferFrom(address,address,uint256)}.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from`.\\n    /// @param sender The message sender.\\n    /// @param from The account which owns the tokens to transfer.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    function transferFrom(Layout storage s, address sender, address from, address to, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.transfer(from, to, value);\\n    }\\n\\n    //================================================= Batch Transfers ==================================================//\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransfer(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransfer(Layout storage s, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n    }\\n\\n    /// @notice Transfers multiple amounts of tokens from an account to multiple recipients by a sender.\\n    /// @dev Note: This function implements {ERC20BatchTransfers-batchTransferFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchTransferValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `sum(values)` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `sum(values)` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event for each transfer.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param recipients The list of accounts to transfer the tokens to.\\n    /// @param values The list of amounts of tokens to transfer to each of `recipients`.\\n    function batchTransferFrom(Layout storage s, address sender, address from, address[] calldata recipients, uint256[] calldata values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 balance = s.balances[from];\\n\\n        uint256 totalValue;\\n        uint256 selfTransferTotalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20TransferToAddressZero(from);\\n\\n                uint256 value = values[i];\\n\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchTransferValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    if (from != to) {\\n                        s.balances[to] += value;\\n                    } else {\\n                        if (value > balance) revert ERC20InsufficientBalance(from, balance, value);\\n                        selfTransferTotalValue += value; // cannot overflow as 'selfTransferTotalValue <= totalValue' is always true\\n                    }\\n                }\\n\\n                emit IERC20Events.Transfer(from, to, value);\\n            }\\n\\n            if (totalValue != 0 && totalValue != selfTransferTotalValue) {\\n                uint256 newBalance = balance - totalValue;\\n                // balance must be sufficient, including self-transfers\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, totalValue);\\n                s.balances[from] = newBalance + selfTransferTotalValue; // do not deduct self-transfers from the sender balance\\n            }\\n        }\\n\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, totalValue);\\n        }\\n    }\\n\\n    //================================================= Safe Transfers ==================================================//\\n\\n    /// @notice Transfers an amount of tokens from an account to a recipient. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransfer(address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransfer(Layout storage s, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transfer(from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(from, from, to, value, data);\\n        }\\n    }\\n\\n    /// @notice Transfers an amount of tokens to a recipient from a specified address. If the recipient is a contract, calls `onERC20Received` on it.\\n    /// @dev Note: This function implements {ERC20SafeTransfers-safeTransferFrom(address,address,uint256,bytes)}.\\n    /// @dev Warning: Since a `to` contract can run arbitrary code, developers should be aware of potential re-entrancy attacks.\\n    /// @dev Reverts with {ERC20TransferToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if `to` is a contract and the call to `onERC20Received` fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account transferring the tokens.\\n    /// @param to The account to transfer the tokens to.\\n    /// @param value The amount of tokens to transfer.\\n    /// @param data Optional additional data with no specified format, to be passed to the receiver contract.\\n    function safeTransferFrom(Layout storage s, address sender, address from, address to, uint256 value, bytes calldata data) internal {\\n        s.transferFrom(sender, from, to, value);\\n        if (to.isContract()) {\\n            _callOnERC20Received(sender, from, to, value, data);\\n        }\\n    }\\n\\n    //================================================= Minting ==================================================//\\n\\n    /// @notice Mints an amount of tokens to a recipient, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-mint(address,uint256)}.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if `to` is the zero address.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event with `from` set to the zero address.\\n    /// @param to The account to mint the tokens to.\\n    /// @param value The amount of tokens to mint.\\n    function mint(Layout storage s, address to, uint256 value) internal {\\n        if (to == address(0)) revert ERC20MintToAddressZero();\\n        if (value != 0) {\\n            uint256 supply = s.supply;\\n            unchecked {\\n                uint256 newSupply = supply + value;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, value);\\n                s.supply = newSupply;\\n                s.balances[to] += value; // balance cannot overflow if supply does not\\n            }\\n        }\\n        emit IERC20Events.Transfer(address(0), to, value);\\n    }\\n\\n    /// @notice Mints multiple amounts of tokens to multiple recipients, increasing the total supply.\\n    /// @dev Note: This function implements {ERC20Mintable-batchMint(address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `recipients` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20MintToAddressZero} if one of `recipients` is the zero address.\\n    /// @dev Reverts with {ERC20BatchMintValuesOverflow} if the total sum of `values` overflows.\\n    /// @dev Reverts with {ERC20TotalSupplyOverflow} if the total supply overflows.\\n    /// @dev Emits a {Transfer} event for each transfer with `from` set to the zero address.\\n    /// @param recipients The list of accounts to mint the tokens to.\\n    /// @param values The list of amounts of tokens to mint to each of `recipients`.\\n    function batchMint(Layout storage s, address[] memory recipients, uint256[] memory values) internal {\\n        uint256 length = recipients.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address to = recipients[i];\\n                if (to == address(0)) revert ERC20MintToAddressZero();\\n\\n                uint256 value = values[i];\\n                if (value != 0) {\\n                    uint256 newTotalValue = totalValue + value;\\n                    if (newTotalValue <= totalValue) revert ERC20BatchMintValuesOverflow();\\n                    totalValue = newTotalValue;\\n                    s.balances[to] += value; // balance cannot overflow if supply does not\\n                }\\n                emit IERC20Events.Transfer(address(0), to, value);\\n            }\\n\\n            if (totalValue != 0) {\\n                uint256 supply = s.supply;\\n                uint256 newSupply = supply + totalValue;\\n                if (newSupply <= supply) revert ERC20TotalSupplyOverflow(supply, totalValue);\\n                s.supply = newSupply;\\n            }\\n        }\\n    }\\n\\n    //================================================= Burning ==================================================//\\n\\n    /// @notice Burns an amount of tokens from an account, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burn(uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @param from The account burning the tokens.\\n    /// @param value The amount of tokens to burn.\\n    function burn(Layout storage s, address from, uint256 value) internal {\\n        if (value != 0) {\\n            uint256 balance = s.balances[from];\\n            unchecked {\\n                uint256 newBalance = balance - value;\\n                if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                s.balances[from] = newBalance;\\n                s.supply -= value; // will not underflow if balance does not\\n            }\\n        }\\n\\n        emit IERC20Events.Transfer(from, address(0), value);\\n    }\\n\\n    /// @notice Burns an amount of tokens from an account by a sender, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-burnFrom(address,uint256)}.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if `from` does not have at least `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not `from` and does not have at least `value` of allowance by `from`.\\n    /// @dev Emits a {Transfer} event with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event if `sender` is not `from` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param from The account to burn the tokens from.\\n    /// @param value The amount of tokens to burn.\\n    function burnFrom(Layout storage s, address sender, address from, uint256 value) internal {\\n        if (from != sender) {\\n            s.decreaseAllowance(from, sender, value);\\n        }\\n        s.burn(from, value);\\n    }\\n\\n    /// @notice Burns multiple amounts of tokens from multiple owners, decreasing the total supply.\\n    /// @dev Note: This function implements {ERC20Burnable-batchBurnFrom(address,address[],uint256[])}.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `owners` and `values` have different lengths.\\n    /// @dev Reverts with {ERC20InsufficientBalance} if an `owner` does not have at least the corresponding `value` of balance.\\n    /// @dev Reverts with {ERC20InsufficientAllowance} if `sender` is not an `owner` and does not have\\n    ///  at least the corresponding `value` of allowance by this `owner`.\\n    /// @dev Emits a {Transfer} event for each transfer with `to` set to the zero address.\\n    /// @dev Optionally emits an {Approval} event for each transfer if `sender` is not this `owner` (non-standard).\\n    /// @param sender The message sender.\\n    /// @param owners The list of accounts to burn the tokens from.\\n    /// @param values The list of amounts of tokens to burn.\\n    function batchBurnFrom(Layout storage s, address sender, address[] calldata owners, uint256[] calldata values) internal {\\n        uint256 length = owners.length;\\n        if (length != values.length) revert InconsistentArrayLengths();\\n\\n        if (length == 0) return;\\n\\n        uint256 totalValue;\\n        unchecked {\\n            for (uint256 i; i != length; ++i) {\\n                address from = owners[i];\\n                uint256 value = values[i];\\n\\n                if (from != sender) {\\n                    s.decreaseAllowance(from, sender, value);\\n                }\\n\\n                if (value != 0) {\\n                    uint256 balance = s.balances[from];\\n                    uint256 newBalance = balance - value;\\n                    if (newBalance >= balance) revert ERC20InsufficientBalance(from, balance, value);\\n                    s.balances[from] = newBalance;\\n                    totalValue += value; // totalValue cannot overflow if the individual balances do not underflow\\n                }\\n\\n                emit IERC20Events.Transfer(from, address(0), value);\\n            }\\n\\n            if (totalValue != 0) {\\n                s.supply -= totalValue; // _totalSupply cannot underfow as balances do not underflow\\n            }\\n        }\\n    }\\n\\n    /// @notice Gets the total token supply.\\n    /// @dev Note: This function implements {ERC20-totalSupply()}.\\n    /// @return supply The total token supply.\\n    function totalSupply(Layout storage s) internal view returns (uint256 supply) {\\n        return s.supply;\\n    }\\n\\n    /// @notice Gets an account balance.\\n    /// @dev Note: This function implements {ERC20-balanceOf(address)}.\\n    /// @param owner The account whose balance will be returned.\\n    /// @return balance The account balance.\\n    function balanceOf(Layout storage s, address owner) internal view returns (uint256 balance) {\\n        return s.balances[owner];\\n    }\\n\\n    /// @notice Gets the amount that an account is allowed to spend on behalf of another.\\n    /// @dev Note: This function implements {ERC20-allowance(address,address)}.\\n    /// @param owner The account that has granted an allowance to `spender`.\\n    /// @param spender The account that was granted an allowance by `owner`.\\n    /// @return value The amount which `spender` is allowed to spend on behalf of `owner`.\\n    function allowance(Layout storage s, address owner, address spender) internal view returns (uint256 value) {\\n        return s.allowances[owner][spender];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /// @notice Calls {IERC20Receiver-onERC20Received} on a target contract.\\n    /// @dev Reverts with {ERC20SafeTransferRejected} if the call to the target fails, reverts or is rejected.\\n    /// @param sender The message sender.\\n    /// @param from Previous token owner.\\n    /// @param to New token owner.\\n    /// @param value The value transferred.\\n    /// @param data Optional data to send along with the receiver contract call.\\n    function _callOnERC20Received(address sender, address from, address to, uint256 value, bytes memory data) private {\\n        if (IERC20Receiver(to).onERC20Received(sender, from, value, data) != ERC20_RECEIVED) revert ERC20SafeTransferRejected(to);\\n    }\\n}\\n\",\"keccak256\":\"0x16e76f920a4b863bb99baa5ba98fe591512b2907da927e87af9ec1483a88a7e0\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/events/IERC721Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (events).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard events, see IERC721 for the functions.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721Events {\\n    /// @notice Emitted when a token is transferred.\\n    /// @param from The previous token owner.\\n    /// @param to The new token owner.\\n    /// @param tokenId The transferred token identifier.\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when a single token approval is set.\\n    /// @param owner The token owner.\\n    /// @param approved The approved address.\\n    /// @param tokenId The approved token identifier.\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /// @notice Emitted when an approval for all tokens is set or unset.\\n    /// @param owner The tokens owner.\\n    /// @param operator The approved address.\\n    /// @param approved True when then approval is set, false when it is unset.\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n}\\n\",\"keccak256\":\"0xe22d19cbed80911ea3f469d8b4dc58704e9193bb74e3c823cf28cb633f97084c\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/token/ERC721/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.21;\\n\\nimport {IERC721Events} from \\\"./../events/IERC721Events.sol\\\";\\n\\n/// @title ERC721 Non-Fungible Token Standard, basic interface (functions).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-721\\n/// @dev This interface only contains the standard functions. See IERC721Events for the events.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x80ac58cd.\\ninterface IERC721 is IERC721Events {\\n    /// @notice Sets or unsets an approval to transfer a single token on behalf of its owner.\\n    /// @dev Note: There can only be one approved address per token at a given time.\\n    /// @dev Note: A token approval gets reset when this token is transferred, including a self-transfer.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @dev Reverts if `to` is the token owner.\\n    /// @dev Reverts if the sender is not the token owner and has not been approved by the token owner.\\n    /// @dev Emits an {Approval} event.\\n    /// @param to The address to approve, or the zero address to remove any existing approval.\\n    /// @param tokenId The token identifier to give approval for.\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /// @notice Sets or unsets an approval to transfer all tokens on behalf of their owner.\\n    /// @dev Reverts if the sender is the same as `operator`.\\n    /// @dev Emits an {ApprovalForAll} event.\\n    /// @param operator The address to approve for all tokens.\\n    /// @param approved True to set an approval for all tokens, false to unset it.\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /// @notice Unsafely transfers the ownership of a token to a recipient.\\n    /// @dev Note: Usage of this method is discouraged, use `safeTransferFrom` whenever possible.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer. Self-transfers are possible.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /// @notice Safely transfers the ownership of a token to a recipient.\\n    /// @dev Resets the token approval for `tokenId`.\\n    /// @dev Reverts if `to` is the zero address.\\n    /// @dev Reverts if `from` is not the owner of `tokenId`.\\n    /// @dev Reverts if the sender is not `from` and has not been approved by `from` for `tokenId`.\\n    /// @dev Reverts if `to` is a contract and the call to {IERC721Receiver-onERC721Received} fails, reverts or is rejected.\\n    /// @dev Emits a {Transfer} event.\\n    /// @param from The current token owner.\\n    /// @param to The recipient of the token transfer.\\n    /// @param tokenId The identifier of the token to transfer.\\n    /// @param data Optional data to send along to a receiver contract.\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /// @notice Gets the balance of an address.\\n    /// @dev Reverts if `owner` is the zero address.\\n    /// @param owner The address to query the balance of.\\n    /// @return balance The amount owned by the owner.\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /// @notice Gets the owner of a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the owner of.\\n    /// @return tokenOwner The owner of the token identifier.\\n    function ownerOf(uint256 tokenId) external view returns (address tokenOwner);\\n\\n    /// @notice Gets the approved address for a token.\\n    /// @dev Reverts if `tokenId` does not exist.\\n    /// @param tokenId The token identifier to query the approval of.\\n    /// @return approved The approved address for the token identifier, or the zero address if no approval is set.\\n    function getApproved(uint256 tokenId) external view returns (address approved);\\n\\n    /// @notice Gets whether an operator is approved for all tokens by an owner.\\n    /// @param owner The address which gives the approval for all tokens.\\n    /// @param operator The address which receives the approval for all tokens.\\n    /// @return approvedForAll Whether the operator is approved for all tokens by the owner.\\n    function isApprovedForAll(address owner, address operator) external view returns (bool approvedForAll);\\n}\\n\",\"keccak256\":\"0x083b0648615d8f327ffd3fdb357a469d9fd6989ca81fac605faeaed599345684\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x287b55befed2961a7eabd7d7b1b2839cbca8a5b80ef8dcbb25ed3d4c2002c305\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xec63854014a5b4f2b3290ab9103a21bdf902a508d0f41a8573fea49e98bf571a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.3) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance + value));\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, oldAllowance - value));\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeWithSelector(token.approve.selector, spender, value);\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, 0));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Use a ERC-2612 signature to set the `owner` approval toward `spender` on `token`.\\n     * Revert on invalid signature.\\n     */\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        require(returndata.length == 0 || abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return\\n            success && (returndata.length == 0 || abi.decode(returndata, (bool))) && Address.isContract(address(token));\\n    }\\n}\\n\",\"keccak256\":\"0xabefac93435967b4d36a4fabcbdbb918d1f0b7ae3c3d85bc30923b326c927ed1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"contracts/payment/EDUCreditsManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport {InconsistentArrayLengths} from \\\"@animoca/ethereum-contracts/contracts/CommonErrors.sol\\\";\\nimport {IForwarderRegistry} from \\\"@animoca/ethereum-contracts/contracts/metatx/interfaces/IForwarderRegistry.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/interfaces/IERC20Receiver.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\\\";\\nimport {AccessControlStorage} from \\\"@animoca/ethereum-contracts/contracts/access/libraries/AccessControlStorage.sol\\\";\\nimport {PayoutWalletStorage} from \\\"@animoca/ethereum-contracts/contracts/payment/libraries/PayoutWalletStorage.sol\\\";\\nimport {ERC20Storage} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/libraries/ERC20Storage.sol\\\";\\nimport {PayoutWallet} from \\\"@animoca/ethereum-contracts/contracts/payment/PayoutWallet.sol\\\";\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {AccessControl} from \\\"@animoca/ethereum-contracts/contracts/access/AccessControl.sol\\\";\\nimport {ERC20Receiver} from \\\"@animoca/ethereum-contracts/contracts/token/ERC20/ERC20Receiver.sol\\\";\\nimport {TokenRecoveryBase} from \\\"@animoca/ethereum-contracts/contracts/security/base/TokenRecoveryBase.sol\\\";\\nimport {TokenRecovery} from \\\"@animoca/ethereum-contracts/contracts/security/TokenRecovery.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\nimport {ForwarderRegistryContextBase} from \\\"@animoca/ethereum-contracts/contracts/metatx/base/ForwarderRegistryContextBase.sol\\\";\\nimport {ForwarderRegistryContext} from \\\"@animoca/ethereum-contracts/contracts/metatx/ForwarderRegistryContext.sol\\\";\\n\\n/// @title DepositManager\\n/// @notice Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).\\n/// @notice Handles the deposit of EDU tokens by users (during the deposit phase).\\n/// @notice Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).\\n/// @notice Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase).\\ncontract EDUCreditsManager is PayoutWallet, ERC20Receiver, AccessControl, TokenRecovery, ForwarderRegistryContext {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using PayoutWalletStorage for PayoutWalletStorage.Layout;\\n    using AccessControlStorage for AccessControlStorage.Layout;\\n\\n    struct UserCredits {\\n        uint256 unclaimed; // unclaimed EDU credits from the genesis mint\\n        uint256 bonus; // bonus EDU credits from the genesis mint\\n        uint256 deposited; // deposited EDU credits from the user\\n        bool diamondHand; // whether the user is a diamond hand, ie. didn't claim any from the genesis mint\\n    }\\n\\n    bytes32 public constant SPENDER_ROLE = \\\"spender\\\";\\n\\n    uint256 public constant INIT_PHASE = 0;\\n    uint256 public constant DEPOSIT_PHASE = 1;\\n    uint256 public constant SALE_PHASE = 2;\\n    uint256 public constant WITHDRAW_PHASE = 3;\\n\\n    IERC20 public immutable EDU_TOKEN;\\n    address public immutable UNCLAIMED_EDU_HOLDER;\\n\\n    uint256 public currentPhase = INIT_PHASE;\\n\\n    mapping(address => UserCredits) public userCredits;\\n\\n    /// @notice The total credits is the sum of all unclaimed, bonus and deposited credits.\\n    /// @notice The total credits does not decrease when credits are spent or withdrawn.\\n    uint256 public totalCredits;\\n\\n    /// @notice The total deposited is the sum of all deposited credits.\\n    /// @notice The total deposited decreases when unclaimed credits are spent or withdrawn.\\n    uint256 public totalDeposited;\\n\\n    /// @notice Emitted when the current phase is set.\\n    /// @param phase the phase set.\\n    event PhaseSet(uint256 phase);\\n\\n    /// @notice Emitted when the initial credits are set.\\n    /// @param users the users whose credits are set.\\n    /// @param unclaimed the unclaimed EDU credits.\\n    /// @param bonus the bonus EDU credits.\\n    /// @param diamondHands whether the users are a diamond hand.\\n    event InitialCreditsSet(address[] users, uint256[] unclaimed, uint256[] bonus, bool[] diamondHands);\\n\\n    /// @notice Emitted when credits are spent.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    /// @param bonusSpent the amount of bonus credits spent.\\n    /// @param unclaimedSpent the amount of unclaimed credits spent.\\n    /// @param depositedSpent the amount of deposited credits spent.\\n    event CreditsSpent(address spender, address user, uint256 bonusSpent, uint256 unclaimedSpent, uint256 depositedSpent);\\n\\n    /// @notice Thrown when the phase being set is invalid.\\n    /// @param phase the invalid phase.\\n    error SettingInvalidPhase(uint256 phase);\\n\\n    /// @notice Thrown when an action is performed during the wrong phase.\\n    /// @param expectedPhase the expected phase.\\n    /// @param actualPhase the actual phase.\\n    error OnlyDuringPhase(uint256 expectedPhase, uint256 actualPhase);\\n\\n    /// @notice Thrown when setting the initial credits for a zero address user.\\n    error ZeroAddressUser();\\n\\n    /// @notice Thrown when setting the initial credits for a user with zero unclaimed credits.\\n    /// @param user the user whose credits are set.\\n    error ZeroValueUnclaimedCredits(address user);\\n\\n    /// @notice Thrown when setting the initial credits for a user whose credits have already been set.\\n    /// @param user the user whose credits are set.\\n    error UserCreditsAlreadySet(address user);\\n\\n    /// @notice Thrown when trying to spend zero credits.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    error ZeroSpendAmount(address spender, address user);\\n\\n    /// @notice Thrown when trying to spend more credits than the user has.\\n    /// @param spender the spender of the credits.\\n    /// @param user the user whose credits are spent.\\n    /// @param amount the amount of credits to spend.\\n    error InsufficientCredits(address spender, address user, uint256 amount);\\n\\n    /// @notice Thrown when trying to recover more EDU tokens than accidentally sent to this contract.\\n    error UnrecoverableEDU(uint256 recoverable, uint256 recovering);\\n\\n    /// @dev Emits a {PhaseSet} to INIT_PHASE event.\\n    constructor(\\n        IERC20 eduToken,\\n        address payable payoutWallet,\\n        address unclaimedEDUHolder,\\n        IForwarderRegistry forwarderRegistry\\n    ) PayoutWallet(payoutWallet) ContractOwnership(msg.sender) ForwarderRegistryContext(forwarderRegistry) {\\n        EDU_TOKEN = eduToken;\\n        UNCLAIMED_EDU_HOLDER = unclaimedEDUHolder;\\n        emit PhaseSet(INIT_PHASE);\\n    }\\n\\n    /// @notice Sets the current phase.\\n    /// @dev Reverts with {SettingInvalidPhase} if `phase` is greater than `WITHDRAW_PHASE`.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Emits a {PhaseSet} event.\\n    /// @param phase the phase to set.\\n    function setPhase(uint256 phase) external {\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        if (phase > WITHDRAW_PHASE) revert SettingInvalidPhase(phase);\\n        currentPhase = phase;\\n        emit PhaseSet(DEPOSIT_PHASE);\\n    }\\n\\n    /// @notice Sets the unclaimed and bonus EDU credits for a list of users.\\n    /// @dev Reverts with {InconsistentArrayLengths} if `users`, `unclaimed` and `bonus` have different lengths.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the init phase.\\n    /// @dev Reverts with {NotContractOwner} if the sender is not the contract owner.\\n    /// @dev Reverts with {ZeroAddressUser} if one of `users` is the zero address.\\n    /// @dev Reverts with {UserCreditsAlreadySet} if one of `users` credits have already been set.\\n    /// @dev Emits a {InitialCreditsSet} event.\\n    /// @param users the users whose credits are set.\\n    /// @param unclaimedCredits the unclaimed EDU credits.\\n    /// @param bonusCredits the bonus EDU credits.\\n    /// @param diamondHands whether the users are a diamond hand.\\n    function setInitialCredits(\\n        address[] calldata users,\\n        uint256[] calldata unclaimedCredits,\\n        uint256[] calldata bonusCredits,\\n        bool[] calldata diamondHands\\n    ) external {\\n        uint256 length = users.length;\\n        if (length != unclaimedCredits.length || length != bonusCredits.length || length != diamondHands.length) revert InconsistentArrayLengths();\\n        if (currentPhase != INIT_PHASE) revert OnlyDuringPhase(INIT_PHASE, currentPhase);\\n        ContractOwnershipStorage.layout().enforceIsContractOwner(_msgSender());\\n        for (uint256 i; i != length; ++i) {\\n            address user = users[i];\\n            if (user == address(0)) revert ZeroAddressUser();\\n            uint256 unclaimed = unclaimedCredits[i];\\n            if (unclaimed == 0) revert ZeroValueUnclaimedCredits(user);\\n            UserCredits storage credits = userCredits[user];\\n            if (credits.unclaimed != 0) revert UserCreditsAlreadySet(user);\\n            uint256 bonus = bonusCredits[i];\\n            credits.unclaimed = unclaimed;\\n            credits.bonus = bonus;\\n            credits.diamondHand = diamondHands[i];\\n            totalCredits += unclaimed + bonus;\\n        }\\n        emit InitialCreditsSet(users, unclaimedCredits, bonusCredits, diamondHands);\\n    }\\n\\n    /// @inheritdoc IERC20Receiver\\n    /// @notice Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the deposit phase.\\n    function onERC20Received(address, address from, uint256 value, bytes calldata) external returns (bytes4 magicValue) {\\n        if (currentPhase != DEPOSIT_PHASE) revert OnlyDuringPhase(DEPOSIT_PHASE, currentPhase);\\n        UserCredits storage credits = userCredits[from];\\n        credits.deposited += value;\\n        totalDeposited += value;\\n        totalCredits += value;\\n        return ERC20Storage.ERC20_RECEIVED;\\n    }\\n\\n    /// @notice Spends EDU tokens from the user's balance by a spender account.\\n    /// @notice The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited.\\n    /// @dev Reverts with {ZeroSpendAmount} if `amount` is zero.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the sale phase.\\n    /// @dev Reverts with {NotRoleHolder} if the sender is not a spender.\\n    /// @dev Reverts with {InsufficientEDU} if the user's total unclaimed+bonus+deposited credits is insufficient.\\n    /// @dev Emits a {EDUSpent} event.\\n    /// @param user the user whose EDU tokens are spent.\\n    /// @param amount the amount of EDU tokens to spend.\\n    function spend(address user, uint256 amount) external {\\n        address spender = _msgSender();\\n        if (amount == 0) revert ZeroSpendAmount(spender, user);\\n        if (currentPhase != SALE_PHASE) revert OnlyDuringPhase(SALE_PHASE, currentPhase);\\n        AccessControlStorage.layout().enforceHasRole(SPENDER_ROLE, spender);\\n        UserCredits storage credits = userCredits[user];\\n\\n        uint256 bonusSpent;\\n        uint256 bonus = credits.bonus;\\n        if (bonus != 0) {\\n            if (bonus >= amount) {\\n                credits.bonus -= amount;\\n                emit CreditsSpent(spender, user, amount, 0, 0);\\n                return;\\n            } else {\\n                credits.bonus = 0;\\n                amount -= bonus;\\n                bonusSpent = bonus;\\n            }\\n        }\\n\\n        uint256 unclaimedSpent;\\n        uint256 unclaimed = credits.unclaimed;\\n        if (unclaimed != 0) {\\n            if (unclaimed >= amount) {\\n                credits.unclaimed -= amount;\\n                emit CreditsSpent(spender, user, bonusSpent, amount, 0);\\n                return;\\n            } else {\\n                credits.unclaimed = 0;\\n                amount -= unclaimed;\\n                unclaimedSpent = unclaimed;\\n            }\\n        }\\n\\n        uint256 deposited = credits.deposited;\\n        if (deposited < amount) revert InsufficientCredits(spender, user, amount);\\n\\n        credits.deposited -= amount;\\n        totalDeposited -= amount;\\n        EDU_TOKEN.transfer(PayoutWalletStorage.layout().payoutWallet(), amount);\\n        emit CreditsSpent(spender, user, bonusSpent, unclaimedSpent, amount);\\n    }\\n\\n    /// @notice Withdraws all the remaining unclaimed and deposited EDU credits.\\n    /// @dev Reverts with {OnlyDuringPhase} if the current phase is not the withdraw phase.\\n    function withdraw() external {\\n        if (currentPhase != WITHDRAW_PHASE) revert OnlyDuringPhase(WITHDRAW_PHASE, currentPhase);\\n        address user = _msgSender();\\n        UserCredits storage credits = userCredits[_msgSender()];\\n        uint256 unclaimed = credits.unclaimed;\\n        if (unclaimed != 0) {\\n            credits.unclaimed = 0;\\n            EDU_TOKEN.transferFrom(UNCLAIMED_EDU_HOLDER, user, unclaimed);\\n        }\\n\\n        uint256 deposited = credits.deposited;\\n        if (deposited != 0) {\\n            credits.deposited = 0;\\n            totalDeposited -= deposited;\\n            EDU_TOKEN.transfer(user, deposited);\\n        }\\n    }\\n\\n    /// @inheritdoc TokenRecoveryBase\\n    /// @notice EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function.\\n    /// @dev Reverts with {UnrecoverableEDU} if trying to extract EDU in larger quantities than accidentally sent to this contract.\\n    function recoverERC20s(address[] calldata accounts, IERC20[] calldata tokens, uint256[] calldata amounts) public virtual override {\\n        uint256 recoverableEDUAmount = EDU_TOKEN.balanceOf(address(this)) - totalDeposited;\\n        uint256 eduAmount;\\n        for (uint256 i = 0; i < tokens.length; i++) {\\n            if (tokens[i] == EDU_TOKEN) {\\n                eduAmount += amounts[i];\\n            }\\n        }\\n        if (eduAmount > recoverableEDUAmount) {\\n            revert UnrecoverableEDU(recoverableEDUAmount, eduAmount);\\n        }\\n        super.recoverERC20s(accounts, tokens, amounts);\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgSender() internal view virtual override(Context, ForwarderRegistryContextBase) returns (address) {\\n        return ForwarderRegistryContextBase._msgSender();\\n    }\\n\\n    /// @inheritdoc ForwarderRegistryContextBase\\n    function _msgData() internal view virtual override(Context, ForwarderRegistryContextBase) returns (bytes calldata) {\\n        return ForwarderRegistryContextBase._msgData();\\n    }\\n}\\n\",\"keccak256\":\"0xfac60c05525cf8c78f0b8a3dcb01386cd2c90fa1ab1f74c805b2f544476aed8a\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":4854,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"currentPhase","offset":0,"slot":"0","type":"t_uint256"},{"astId":4859,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"userCredits","offset":0,"slot":"1","type":"t_mapping(t_address,t_struct(UserCredits)4831_storage)"},{"astId":4862,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"totalCredits","offset":0,"slot":"2","type":"t_uint256"},{"astId":4865,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"totalDeposited","offset":0,"slot":"3","type":"t_uint256"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bool":{"encoding":"inplace","label":"bool","numberOfBytes":"1"},"t_mapping(t_address,t_struct(UserCredits)4831_storage)":{"encoding":"mapping","key":"t_address","label":"mapping(address => struct EDUCreditsManager.UserCredits)","numberOfBytes":"32","value":"t_struct(UserCredits)4831_storage"},"t_struct(UserCredits)4831_storage":{"encoding":"inplace","label":"struct EDUCreditsManager.UserCredits","members":[{"astId":4824,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"unclaimed","offset":0,"slot":"0","type":"t_uint256"},{"astId":4826,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"bonus","offset":0,"slot":"1","type":"t_uint256"},{"astId":4828,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"deposited","offset":0,"slot":"2","type":"t_uint256"},{"astId":4830,"contract":"contracts/payment/EDUCreditsManager.sol:EDUCreditsManager","label":"diamondHand","offset":0,"slot":"3","type":"t_bool"}],"numberOfBytes":"128"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InconsistentArrayLengths()":[{"notice":"Thrown when the multiple related arrays have different lengths."}],"InsufficientCredits(address,address,uint256)":[{"notice":"Thrown when trying to spend more credits than the user has."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}],"NotRoleHolder(bytes32,address)":[{"notice":"Thrown when an account does not have the required role."}],"OnlyDuringPhase(uint256,uint256)":[{"notice":"Thrown when an action is performed during the wrong phase."}],"SettingInvalidPhase(uint256)":[{"notice":"Thrown when the phase being set is invalid."}],"UnrecoverableEDU(uint256,uint256)":[{"notice":"Thrown when trying to recover more EDU tokens than accidentally sent to this contract."}],"UserCreditsAlreadySet(address)":[{"notice":"Thrown when setting the initial credits for a user whose credits have already been set."}],"ZeroAddressPayoutWallet()":[{"notice":"Thrown when setting the zero address as the payout wallet."}],"ZeroAddressUser()":[{"notice":"Thrown when setting the initial credits for a zero address user."}],"ZeroSpendAmount(address,address)":[{"notice":"Thrown when trying to spend zero credits."}],"ZeroValueUnclaimedCredits(address)":[{"notice":"Thrown when setting the initial credits for a user with zero unclaimed credits."}]},"events":{"CreditsSpent(address,address,uint256,uint256,uint256)":{"notice":"Emitted when credits are spent."},"InitialCreditsSet(address[],uint256[],uint256[],bool[])":{"notice":"Emitted when the initial credits are set."},"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"PayoutWalletSet(address)":{"notice":"Emitted when the payout wallet address changes."},"PhaseSet(uint256)":{"notice":"Emitted when the current phase is set."},"RoleGranted(bytes32,address,address)":{"notice":"Emitted when `role` is granted to `account`."},"RoleRevoked(bytes32,address,address)":{"notice":"Emitted when `role` is revoked from `account`."}},"kind":"user","methods":{"grantRole(bytes32,address)":{"notice":"Grants a role to an account."},"hasRole(bytes32,address)":{"notice":"Retrieves whether an account has a role."},"isTrustedForwarder(address)":{"notice":"Checks whether a forwarder is trusted."},"onERC20Received(address,address,uint256,bytes)":{"notice":"Receives EDU tokens deposits from users during the deposit phase and adds them to the deposited amount."},"owner()":{"notice":"Gets the address of the contract owner."},"payoutWallet()":{"notice":"Gets the payout wallet."},"recoverERC20s(address[],address[],uint256[])":{"notice":"EDU tokens deposited to this contract through onERC20Received cannot be extracted via this function."},"recoverERC721s(address[],address[],uint256[])":{"notice":"Extract ERC721 tokens which were accidentally sent to the contract to a list of accounts."},"recoverETH(address[],uint256[])":{"notice":"Extract ETH tokens which were accidentally sent to the contract to a list of accounts."},"renounceRole(bytes32)":{"notice":"Renounces a role by the sender."},"revokeRole(bytes32,address)":{"notice":"Revokes a role from an account."},"setInitialCredits(address[],uint256[],uint256[],bool[])":{"notice":"Sets the unclaimed and bonus EDU credits for a list of users."},"setPayoutWallet(address)":{"notice":"Sets the payout wallet."},"setPhase(uint256)":{"notice":"Sets the current phase."},"spend(address,uint256)":{"notice":"Spends EDU tokens from the user's balance by a spender account.The credits are used in this order of priority: 1. bonus 2. unclaimed 3. deposited."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"totalCredits()":{"notice":"The total credits is the sum of all unclaimed, bonus and deposited credits.The total credits does not decrease when credits are spent or withdrawn."},"totalDeposited()":{"notice":"The total deposited is the sum of all deposited credits.The total deposited decreases when unclaimed credits are spent or withdrawn."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."},"withdraw()":{"notice":"Withdraws all the remaining unclaimed and deposited EDU credits."}},"notice":"Manages the users credits of unclaimed and bonus EDU tokens previously acquired during the genesis sale (during the init phase).Handles the deposit of EDU tokens by users (during the deposit phase).Handles the spending of all 3 user credits (unclaimed, bonus and deposited) by a spender contract (during the sale phase).Handles the withdrawal of remaining deposited EDU by users (during the withdrawal phase).","version":1}}}}}}
{"id":"752d774507d25ec99c5b68e90351b8ef","_format":"hh-sol-build-info-1","solcVersion":"0.8.22","solcLongVersion":"0.8.22+commit.4fc1097e","input":{"language":"Solidity","sources":{"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {ContractOwnershipStorage} from \"./../libraries/ContractOwnershipStorage.sol\";\nimport {Context} from \"@openzeppelin/contracts/utils/Context.sol\";\n\n/// @title ERC173 Contract Ownership Standard (proxiable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in a proxied implementation.\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\nabstract contract ContractOwnershipBase is IERC173, Context {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @inheritdoc IERC173\n    function owner() public view virtual returns (address) {\n        return ContractOwnershipStorage.layout().owner();\n    }\n\n    /// @inheritdoc IERC173\n    function transferOwnership(address newOwner) public virtual {\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {ContractOwnershipStorage} from \"./libraries/ContractOwnershipStorage.sol\";\nimport {ContractOwnershipBase} from \"./base/ContractOwnershipBase.sol\";\nimport {InterfaceDetection} from \"./../introspection/InterfaceDetection.sol\";\n\n/// @title ERC173 Contract Ownership Standard (immutable version).\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n\n    /// @notice Initializes the storage with an initial contract owner.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner the initial contract owner.\n    constructor(address initialOwner) {\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when the target contract is actually not a contract.\n/// @param targetContract The contract that was checked\nerror TargetIsNotAContract(address targetContract);\n"},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when an account is not the contract owner but is required to.\n/// @param account The account that was checked.\nerror NotContractOwner(address account);\n\n/// @notice Thrown when an account is not the target contract owner but is required to.\n/// @param targetContract The contract that was checked.\n/// @param account The account that was checked.\nerror NotTargetContractOwner(address targetContract, address account);\n"},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when the contract ownership changes.\n/// @param previousOwner the previous contract owner.\n/// @param newOwner the new contract owner.\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n\n\n"},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC-173 Contract Ownership Standard (functions)\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\ninterface IERC173 {\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts if the sender is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(address newOwner) external;\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner() external view returns (address contractOwner);\n}\n"},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {NotContractOwner, NotTargetContractOwner} from \"./../errors/ContractOwnershipErrors.sol\";\nimport {TargetIsNotAContract} from \"./../errors/Common.sol\";\nimport {OwnershipTransferred} from \"./../events/ERC173Events.sol\";\nimport {IERC173} from \"./../interfaces/IERC173.sol\";\nimport {Address} from \"@openzeppelin/contracts/utils/Address.sol\";\nimport {ProxyInitialization} from \"./../../proxy/libraries/ProxyInitialization.sol\";\nimport {InterfaceDetectionStorage} from \"./../../introspection/libraries/InterfaceDetectionStorage.sol\";\n\nlibrary ContractOwnershipStorage {\n    using Address for address;\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    struct Layout {\n        address contractOwner;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.storage\")) - 1);\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\"animoca.core.access.ContractOwnership.phase\")) - 1);\n\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function constructorInit(Layout storage s, address initialOwner) internal {\n        if (initialOwner != address(0)) {\n            s.contractOwner = initialOwner;\n            emit OwnershipTransferred(address(0), initialOwner);\n        }\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\n    }\n\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\n    /// @notice Sets the proxy initialization phase to `1`.\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n    /// @param initialOwner The initial contract owner.\n    function proxyInit(Layout storage s, address initialOwner) internal {\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\n        s.constructorInit(initialOwner);\n    }\n\n    /// @notice Sets the address of the new contract owner.\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\n        address previousOwner = s.contractOwner;\n        if (sender != previousOwner) revert NotContractOwner(sender);\n        if (previousOwner != newOwner) {\n            s.contractOwner = newOwner;\n            emit OwnershipTransferred(previousOwner, newOwner);\n        }\n    }\n\n    /// @notice Gets the address of the contract owner.\n    /// @return contractOwner The address of the contract owner.\n    function owner(Layout storage s) internal view returns (address contractOwner) {\n        return s.contractOwner;\n    }\n\n    /// @notice Checks whether an account is the owner of a target contract.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\n        return IERC173(targetContract).owner() == account;\n    }\n\n    /// @notice Ensures that an account is the contract owner.\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n    /// @param account The account.\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\n        if (account != s.contractOwner) revert NotContractOwner(account);\n    }\n\n    /// @notice Enforces that an account is the owner of a target contract.\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n    /// @param targetContract The contract to check.\n    /// @param account The account to check.\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\nerror IllegalInterfaceId();\n"},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IERC165} from \"./interfaces/IERC165.sol\";\nimport {InterfaceDetectionStorage} from \"./libraries/InterfaceDetectionStorage.sol\";\n\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\nabstract contract InterfaceDetection is IERC165 {\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\n\n    /// @inheritdoc IERC165\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title ERC165 Interface Detection Standard.\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\ninterface IERC165 {\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId the interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\n}\n"},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {IllegalInterfaceId} from \"./../errors/InterfaceDetectionErrors.sol\";\nimport {IERC165} from \"./../interfaces/IERC165.sol\";\n\nlibrary InterfaceDetectionStorage {\n    struct Layout {\n        mapping(bytes4 => bool) supportedInterfaces;\n    }\n\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\"animoca.core.introspection.InterfaceDetection.storage\")) - 1);\n\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\n\n    /// @notice Sets or unsets an ERC165 interface.\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n    /// @param interfaceId the interface identifier.\n    /// @param supported True to set the interface, false to unset it.\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\n        s.supportedInterfaces[interfaceId] = supported;\n    }\n\n    /// @notice Returns whether this contract implements a given interface.\n    /// @dev Note: This function call must use less than 30 000 gas.\n    /// @param interfaceId The interface identifier to test.\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\n            return false;\n        }\n        if (interfaceId == type(IERC165).interfaceId) {\n            return true;\n        }\n        return s.supportedInterfaces[interfaceId];\n    }\n\n    function layout() internal pure returns (Layout storage s) {\n        bytes32 position = LAYOUT_STORAGE_SLOT;\n        assembly {\n            s.slot := position\n        }\n    }\n}\n"},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when trying to set a phase value that has already been reached.\n/// @param currentPhase The current phase.\n/// @param newPhase The new phase trying to be set.\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\n"},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\nimport {InitializationPhaseAlreadyReached} from \"./../errors/ProxyInitializationErrors.sol\";\nimport {StorageSlot} from \"@openzeppelin/contracts/utils/StorageSlot.sol\";\n\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\nlibrary ProxyInitialization {\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n    /// @param storageSlot the storage slot where `phase` is stored.\n    /// @param phase the initialization phase.\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\n        uint256 currentPhase = currentVersion.value;\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\n        currentVersion.value = phase;\n    }\n}\n"},"@openzeppelin/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     *\n     * Furthermore, `isContract` will also return true if the target contract within\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n     * which only has an effect at the end of a transaction.\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../Strings.sol\";\n\n/**\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n *\n * These functions can be used to verify that a message was signed by the holder\n * of the private keys of a given address.\n */\nlibrary ECDSA {\n    enum RecoverError {\n        NoError,\n        InvalidSignature,\n        InvalidSignatureLength,\n        InvalidSignatureS,\n        InvalidSignatureV // Deprecated in v4.8\n    }\n\n    function _throwError(RecoverError error) private pure {\n        if (error == RecoverError.NoError) {\n            return; // no error: do nothing\n        } else if (error == RecoverError.InvalidSignature) {\n            revert(\"ECDSA: invalid signature\");\n        } else if (error == RecoverError.InvalidSignatureLength) {\n            revert(\"ECDSA: invalid signature length\");\n        } else if (error == RecoverError.InvalidSignatureS) {\n            revert(\"ECDSA: invalid signature 's' value\");\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature` or error string. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     *\n     * Documentation for signature generation:\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\n        if (signature.length == 65) {\n            bytes32 r;\n            bytes32 s;\n            uint8 v;\n            // ecrecover takes the signature parameters, and the only way to get them\n            // currently is to use assembly.\n            /// @solidity memory-safe-assembly\n            assembly {\n                r := mload(add(signature, 0x20))\n                s := mload(add(signature, 0x40))\n                v := byte(0, mload(add(signature, 0x60)))\n            }\n            return tryRecover(hash, v, r, s);\n        } else {\n            return (address(0), RecoverError.InvalidSignatureLength);\n        }\n    }\n\n    /**\n     * @dev Returns the address that signed a hashed message (`hash`) with\n     * `signature`. This address can then be used for verification purposes.\n     *\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n     * this function rejects them by requiring the `s` value to be in the lower\n     * half order, and the `v` value to be either 27 or 28.\n     *\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\n     * verification to be secure: it is possible to craft signatures that\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\n     * this is by receiving a hash of the original message (which may otherwise\n     * be too long), and then calling {toEthSignedMessageHash} on it.\n     */\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n     *\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\n        return tryRecover(hash, v, r, s);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n     *\n     * _Available since v4.2._\n     */\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     *\n     * _Available since v4.3._\n     */\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\n        // the valid range for s in (301): 0 < s < secp256k1n ÷ 2 + 1, and for v in (302): v ∈ {27, 28}. Most\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\n        //\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\n        // these malleable signatures as well.\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\n            return (address(0), RecoverError.InvalidSignatureS);\n        }\n\n        // If the signature is valid (and not malleable), return the signer address\n        address signer = ecrecover(hash, v, r, s);\n        if (signer == address(0)) {\n            return (address(0), RecoverError.InvalidSignature);\n        }\n\n        return (signer, RecoverError.NoError);\n    }\n\n    /**\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\n     * `r` and `s` signature fields separately.\n     */\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\n        _throwError(error);\n        return recovered;\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\n        // 32 is the length in bytes of hash,\n        // enforced by the type signature above\n        /// @solidity memory-safe-assembly\n        assembly {\n            mstore(0x00, \"\\x19Ethereum Signed Message:\\n32\")\n            mstore(0x1c, hash)\n            message := keccak256(0x00, 0x3c)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\n     * produces hash corresponding to the one signed with the\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n     * JSON-RPC method as part of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19Ethereum Signed Message:\\n\", Strings.toString(s.length), s));\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Typed Data, created from a\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\n     * to the one signed with the\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n     * JSON-RPC method as part of EIP-712.\n     *\n     * See {recover}.\n     */\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            let ptr := mload(0x40)\n            mstore(ptr, \"\\x19\\x01\")\n            mstore(add(ptr, 0x02), domainSeparator)\n            mstore(add(ptr, 0x22), structHash)\n            data := keccak256(ptr, 0x42)\n        }\n    }\n\n    /**\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\n     * `validator` and `data` according to the version 0 of EIP-191.\n     *\n     * See {recover}.\n     */\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\n        return keccak256(abi.encodePacked(\"\\x19\\x00\", validator, data));\n    }\n}\n"},"@openzeppelin/contracts/utils/math/Math.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\n                // The surrounding unchecked block does not change this fact.\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1, \"Math: mulDiv overflow\");\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10 ** 64) {\n                value /= 10 ** 64;\n                result += 64;\n            }\n            if (value >= 10 ** 32) {\n                value /= 10 ** 32;\n                result += 32;\n            }\n            if (value >= 10 ** 16) {\n                value /= 10 ** 16;\n                result += 16;\n            }\n            if (value >= 10 ** 8) {\n                value /= 10 ** 8;\n                result += 8;\n            }\n            if (value >= 10 ** 4) {\n                value /= 10 ** 4;\n                result += 4;\n            }\n            if (value >= 10 ** 2) {\n                value /= 10 ** 2;\n                result += 2;\n            }\n            if (value >= 10 ** 1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard signed math utilities missing in the Solidity language.\n */\nlibrary SignedMath {\n    /**\n     * @dev Returns the largest of two signed numbers.\n     */\n    function max(int256 a, int256 b) internal pure returns (int256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two signed numbers.\n     */\n    function min(int256 a, int256 b) internal pure returns (int256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two signed numbers without overflow.\n     * The result is rounded towards zero.\n     */\n    function average(int256 a, int256 b) internal pure returns (int256) {\n        // Formula from the book \"Hacker's Delight\"\n        int256 x = (a & b) + ((a ^ b) >> 1);\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\n    }\n\n    /**\n     * @dev Returns the absolute unsigned value of a signed value.\n     */\n    function abs(int256 n) internal pure returns (uint256) {\n        unchecked {\n            // must be unchecked in order to support `n = type(int256).min`\n            return uint256(n >= 0 ? n : -n);\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n *\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n * _Available since v4.9 for `string`, `bytes`._\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"@openzeppelin/contracts/utils/Strings.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\nimport \"./math/SignedMath.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\n     */\n    function toString(int256 value) internal pure returns (string memory) {\n        return string(abi.encodePacked(value < 0 ? \"-\" : \"\", toString(SignedMath.abs(value))));\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n\n    /**\n     * @dev Returns true if the two strings are equal.\n     */\n    function equal(string memory a, string memory b) internal pure returns (bool) {\n        return keccak256(bytes(a)) == keccak256(bytes(b));\n    }\n}\n"},"contracts/vc/events/RevocationRegistryEvents.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @notice Emitted when `caller` attempts to revoke `vcId`.\n/// @param hashedIssuerDid the hashed Did for the issuer\n/// @param caller address of caller that invoked the revocation.\n/// @param vcId The Id for the VC revoked.\nevent VcRevoked(bytes32 indexed hashedIssuerDid, address caller, uint256 indexed vcId);\n\n"},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n/// @title IAllowedIssuersRegistry\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\ninterface IIssuersDIDRegistry {\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\n\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\n}\n"},"contracts/vc/interfaces/IRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\ninterface IRevocationRegistry {\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\n\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\n\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\n}\n"},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity ^0.8.22;\n\n// other imports\nimport {ECDSA} from \"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\";\n// animoca imports\nimport {ContractOwnership} from \"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\";\nimport {IIssuersDIDRegistry} from \"./interfaces/IIssuersDIDRegistry.sol\";\nimport {IRevocationRegistry} from \"./interfaces/IRevocationRegistry.sol\";\nimport {VcRevoked} from \"./events/RevocationRegistryEvents.sol\";\n\n/// @title OpenCampusCertificateRevocationRegistry.\n/// @notice A registry storing the revocation of VCs.\ncontract OpenCampusCertificateRevocationRegistry is IRevocationRegistry, ContractOwnership {\n    using ECDSA for bytes32;\n\n    bytes32 private constant EIP712_DOMAIN_NAME = keccak256(\"RevocationRegistryV1\");\n    bytes32 private constant REVOKE_TYPEHASH = keccak256(\"revokeVC(bytes32 hashedIssuerDid,uint256 vcId)\");\n    bytes32 private constant BATCH_REVOKE_TYPEHASH = keccak256(\"batchRevokeVCs(bytes32 hashedIssuerDid,uint256[] vcIds)\");\n\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\n\n    mapping(bytes32 => mapping(uint256 => address)) public revocations;\n\n    uint256 private immutable _DEPLOYMENT_CHAIN_ID;\n    bytes32 private immutable _DEPLOYMENT_DOMAIN_SEPARATOR;\n\n    /// @notice Thrown when the recovered issuer and the passed in issuerDid is not allowed in the DIDRegistry\n    error InvalidIssuer();\n\n    constructor(IIssuersDIDRegistry didRegistry) ContractOwnership(msg.sender) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n        DID_REGISTRY = didRegistry;\n        _DEPLOYMENT_CHAIN_ID = chainId;\n        _DEPLOYMENT_DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\n    }\n\n    /// @notice Returns the EIP-712 DOMAIN_SEPARATOR.\n    /// @return domainSeparator The EIP-712 domain separator.\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeparator) {\n        uint256 chainId;\n        assembly {\n            chainId := chainid()\n        }\n\n        // in case a fork happens, to support the chain that had to change its chainId, we compute the domain operator\n        return chainId == _DEPLOYMENT_CHAIN_ID ? _DEPLOYMENT_DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\n    }\n\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\n    /// @param vcId the VC ID to be revoked.\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked) {\n        // Use-Cases\n        // 1. issuer addr/did valid & revoked => revoker valid address, DIDRegistry allowed => returns true\n        // 2. issuer addr/did valid when revoked, invalidated later in DIDRegistry => revoker valid address, DIDRegistry disallowed => returns false\n        // 3. vcId never revoked => revoker address zero => DIDRegistry disallowed => return false\n        address revoker = revocations[hashedIssuerDid][vcId];\n        return DID_REGISTRY.issuers(hashedIssuerDid, revoker);\n    }\n\n    /// @dev Reverts with `InvalidNonce` when the given nonce is invalid.\n    /// @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\n    /// @dev Emits a `VcRevoked` event when a vc is revoked\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\n    /// @param vcId the VC ID to be revoked.\n    /// @param signature EIP712 Signature of `revokeVC` function signature, `hashedIssuerDid` and `vcId`\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external {\n        bytes memory data = abi.encodePacked(\"\\x19\\x01\", DOMAIN_SEPARATOR(), keccak256(abi.encode(REVOKE_TYPEHASH, hashedIssuerDid, vcId)));\n        address signer = keccak256(data).recover(signature);\n\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\n            revocations[hashedIssuerDid][vcId] = signer;\n            emit VcRevoked(hashedIssuerDid, signer, vcId);\n        } else {\n            revert InvalidIssuer();\n        }\n    }\n\n    /// @dev Reverts with `InvalidNonce` when the given nonce is invalid.\n    /// @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\n    /// @dev Emits a `VcRevoked` event when a vc is revoked\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\n    /// @param vcIds the list of VC IDs to be revoked.\n    /// @param signature EIP712 Signature of `batchRevokeVCs` function signature, `hashedIssuerDid` and `vcIds`\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external {\n        bytes memory data = abi.encodePacked(\n            \"\\x19\\x01\",\n            DOMAIN_SEPARATOR(),\n            // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-encodedata\n            // array type `vcIds` are encoded differently from non-array type data\n            keccak256(abi.encode(BATCH_REVOKE_TYPEHASH, hashedIssuerDid, keccak256(abi.encodePacked(vcIds))))\n        );\n        address signer = keccak256(data).recover(signature);\n\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\n            for (uint256 i; i < vcIds.length; i++) {\n                revocations[hashedIssuerDid][vcIds[i]] = signer;\n                emit VcRevoked(hashedIssuerDid, signer, vcIds[i]);\n            }\n        } else {\n            revert InvalidIssuer();\n        }\n    }\n\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\n        return\n            keccak256(\n                abi.encode(\n                    keccak256(\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"),\n                    EIP712_DOMAIN_NAME,\n                    chainId,\n                    address(this)\n                )\n            );\n    }\n}\n"}},"settings":{"optimizer":{"enabled":true,"runs":99999},"evmVersion":"paris","outputSelection":{"*":{"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","devdoc","userdoc","storageLayout","evm.gasEstimates"],"":["ast"]}},"metadata":{"useLiteralContent":true}}},"output":{"sources":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","exportedSymbols":{"ContractOwnership":[32],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"InterfaceDetection":[414]},"id":33,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:0"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./libraries/ContractOwnershipStorage.sol","id":3,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":385,"src":"58:82:0","symbolAliases":[{"foreign":{"id":2,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"66:24:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","file":"./base/ContractOwnershipBase.sol","id":5,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":81,"src":"141:71:0","symbolAliases":[{"foreign":{"id":4,"name":"ContractOwnershipBase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":80,"src":"149:21:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","file":"./../introspection/InterfaceDetection.sol","id":7,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":33,"sourceUnit":415,"src":"213:77:0","symbolAliases":[{"foreign":{"id":6,"name":"InterfaceDetection","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":414,"src":"221:18:0","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":9,"name":"ContractOwnershipBase","nameLocations":["549:21:0"],"nodeType":"IdentifierPath","referencedDeclaration":80,"src":"549:21:0"},"id":10,"nodeType":"InheritanceSpecifier","src":"549:21:0"},{"baseName":{"id":11,"name":"InterfaceDetection","nameLocations":["572:18:0"],"nodeType":"IdentifierPath","referencedDeclaration":414,"src":"572:18:0"},"id":12,"nodeType":"InheritanceSpecifier","src":"572:18:0"}],"canonicalName":"ContractOwnership","contractDependencies":[],"contractKind":"contract","documentation":{"id":8,"nodeType":"StructuredDocumentation","src":"292:218:0","text":"@title ERC173 Contract Ownership Standard (immutable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation."},"fullyImplemented":true,"id":32,"linearizedBaseContracts":[32,414,431,80,940,126],"name":"ContractOwnership","nameLocation":"528:17:0","nodeType":"ContractDefinition","nodes":[{"global":false,"id":16,"libraryName":{"id":13,"name":"ContractOwnershipStorage","nameLocations":["603:24:0"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"603:24:0"},"nodeType":"UsingForDirective","src":"597:67:0","typeName":{"id":15,"nodeType":"UserDefinedTypeName","pathNode":{"id":14,"name":"ContractOwnershipStorage.Layout","nameLocations":["632:24:0","657:6:0"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"632:31:0"},"referencedDeclaration":157,"src":"632:31:0","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"body":{"id":30,"nodeType":"Block","src":"998:80:0","statements":[{"expression":{"arguments":[{"id":27,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":19,"src":"1058:12:0","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":22,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"1008:24:0","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":24,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1033:6:0","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"1008:31:0","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":25,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:33:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":26,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1042:15:0","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"1008:49:0","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":28,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1008:63:0","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":29,"nodeType":"ExpressionStatement","src":"1008:63:0"}]},"documentation":{"id":17,"nodeType":"StructuredDocumentation","src":"670:289:0","text":"@notice Initializes the storage with an initial contract owner.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner the initial contract owner."},"id":31,"implemented":true,"kind":"constructor","modifiers":[],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":20,"nodeType":"ParameterList","parameters":[{"constant":false,"id":19,"mutability":"mutable","name":"initialOwner","nameLocation":"984:12:0","nodeType":"VariableDeclaration","scope":31,"src":"976:20:0","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":18,"name":"address","nodeType":"ElementaryTypeName","src":"976:7:0","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"975:22:0"},"returnParameters":{"id":21,"nodeType":"ParameterList","parameters":[],"src":"998:0:0"},"scope":32,"src":"964:114:0","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":33,"src":"510:570:0","usedErrors":[94,419],"usedEvents":[110]}],"src":"32:1049:0"},"id":0},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol","exportedSymbols":{"Context":[940],"ContractOwnershipBase":[80],"ContractOwnershipStorage":[384],"IERC173":[126]},"id":81,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":34,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:1"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":36,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":127,"src":"58:52:1","symbolAliases":[{"foreign":{"id":35,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"66:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","file":"./../libraries/ContractOwnershipStorage.sol","id":38,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":385,"src":"111:85:1","symbolAliases":[{"foreign":{"id":37,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"119:24:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","file":"@openzeppelin/contracts/utils/Context.sol","id":40,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":81,"sourceUnit":941,"src":"197:66:1","symbolAliases":[{"foreign":{"id":39,"name":"Context","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":940,"src":"205:7:1","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":42,"name":"IERC173","nameLocations":["586:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":126,"src":"586:7:1"},"id":43,"nodeType":"InheritanceSpecifier","src":"586:7:1"},{"baseName":{"id":44,"name":"Context","nameLocations":["595:7:1"],"nodeType":"IdentifierPath","referencedDeclaration":940,"src":"595:7:1"},"id":45,"nodeType":"InheritanceSpecifier","src":"595:7:1"}],"canonicalName":"ContractOwnershipBase","contractDependencies":[],"contractKind":"contract","documentation":{"id":41,"nodeType":"StructuredDocumentation","src":"265:278:1","text":"@title ERC173 Contract Ownership Standard (proxiable version).\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev This contract is to be used via inheritance in a proxied implementation.\n @dev Note: This contract requires ERC165 (Interface Detection Standard)."},"fullyImplemented":true,"id":80,"linearizedBaseContracts":[80,940,126],"name":"ContractOwnershipBase","nameLocation":"561:21:1","nodeType":"ContractDefinition","nodes":[{"global":false,"id":49,"libraryName":{"id":46,"name":"ContractOwnershipStorage","nameLocations":["615:24:1"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"615:24:1"},"nodeType":"UsingForDirective","src":"609:67:1","typeName":{"id":48,"nodeType":"UserDefinedTypeName","pathNode":{"id":47,"name":"ContractOwnershipStorage.Layout","nameLocations":["644:24:1","669:6:1"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"644:31:1"},"referencedDeclaration":157,"src":"644:31:1","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"baseFunctions":[125],"body":{"id":61,"nodeType":"Block","src":"765:65:1","statements":[{"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":55,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"782:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":56,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"807:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"782:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":57,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":58,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"816:5:1","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":304,"src":"782:39:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$157_storage_ptr_$returns$_t_address_$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer) view returns (address)"}},"id":59,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"782:41:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":54,"id":60,"nodeType":"Return","src":"775:48:1"}]},"documentation":{"id":50,"nodeType":"StructuredDocumentation","src":"682:23:1","text":"@inheritdoc IERC173"},"functionSelector":"8da5cb5b","id":62,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"719:5:1","nodeType":"FunctionDefinition","parameters":{"id":51,"nodeType":"ParameterList","parameters":[],"src":"724:2:1"},"returnParameters":{"id":54,"nodeType":"ParameterList","parameters":[{"constant":false,"id":53,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":62,"src":"756:7:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":52,"name":"address","nodeType":"ElementaryTypeName","src":"756:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"755:9:1"},"scope":80,"src":"710:120:1","stateMutability":"view","virtual":true,"visibility":"public"},{"baseFunctions":[119],"body":{"id":78,"nodeType":"Block","src":"924:92:1","statements":[{"expression":{"arguments":[{"arguments":[],"expression":{"argumentTypes":[],"id":73,"name":"_msgSender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":930,"src":"986:10:1","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_address_$","typeString":"function () view returns (address)"}},"id":74,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"986:12:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":75,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":65,"src":"1000:8:1","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":68,"name":"ContractOwnershipStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":384,"src":"934:24:1","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ContractOwnershipStorage_$384_$","typeString":"type(library ContractOwnershipStorage)"}},"id":70,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"959:6:1","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":383,"src":"934:31:1","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function () pure returns (struct ContractOwnershipStorage.Layout storage pointer)"}},"id":71,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:33:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":72,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"968:17:1","memberName":"transferOwnership","nodeType":"MemberAccess","referencedDeclaration":291,"src":"934:51:1","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address,address)"}},"id":76,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:75:1","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":77,"nodeType":"ExpressionStatement","src":"934:75:1"}]},"documentation":{"id":63,"nodeType":"StructuredDocumentation","src":"836:23:1","text":"@inheritdoc IERC173"},"functionSelector":"f2fde38b","id":79,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"873:17:1","nodeType":"FunctionDefinition","parameters":{"id":66,"nodeType":"ParameterList","parameters":[{"constant":false,"id":65,"mutability":"mutable","name":"newOwner","nameLocation":"899:8:1","nodeType":"VariableDeclaration","scope":79,"src":"891:16:1","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":64,"name":"address","nodeType":"ElementaryTypeName","src":"891:7:1","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"890:18:1"},"returnParameters":{"id":67,"nodeType":"ParameterList","parameters":[],"src":"924:0:1"},"scope":80,"src":"864:152:1","stateMutability":"nonpayable","virtual":true,"visibility":"public"}],"scope":81,"src":"543:475:1","usedErrors":[94],"usedEvents":[110]}],"src":"32:987:1"},"id":1},"@animoca/ethereum-contracts/contracts/access/errors/Common.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","exportedSymbols":{"TargetIsNotAContract":[87]},"id":88,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":82,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:2"},{"documentation":{"id":83,"nodeType":"StructuredDocumentation","src":"58:128:2","text":"@notice Thrown when the target contract is actually not a contract.\n @param targetContract The contract that was checked"},"errorSelector":"73a5b5e3","id":87,"name":"TargetIsNotAContract","nameLocation":"192:20:2","nodeType":"ErrorDefinition","parameters":{"id":86,"nodeType":"ParameterList","parameters":[{"constant":false,"id":85,"mutability":"mutable","name":"targetContract","nameLocation":"221:14:2","nodeType":"VariableDeclaration","scope":87,"src":"213:22:2","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":84,"name":"address","nodeType":"ElementaryTypeName","src":"213:7:2","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"212:24:2"},"src":"186:51:2"}],"src":"32:206:2"},"id":2},"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","exportedSymbols":{"NotContractOwner":[94],"NotTargetContractOwner":[101]},"id":102,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":89,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:3"},{"documentation":{"id":90,"nodeType":"StructuredDocumentation","src":"58:130:3","text":"@notice Thrown when an account is not the contract owner but is required to.\n @param account The account that was checked."},"errorSelector":"2ef4875e","id":94,"name":"NotContractOwner","nameLocation":"194:16:3","nodeType":"ErrorDefinition","parameters":{"id":93,"nodeType":"ParameterList","parameters":[{"constant":false,"id":92,"mutability":"mutable","name":"account","nameLocation":"219:7:3","nodeType":"VariableDeclaration","scope":94,"src":"211:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":91,"name":"address","nodeType":"ElementaryTypeName","src":"211:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"210:17:3"},"src":"188:40:3"},{"documentation":{"id":95,"nodeType":"StructuredDocumentation","src":"230:194:3","text":"@notice Thrown when an account is not the target contract owner but is required to.\n @param targetContract The contract that was checked.\n @param account The account that was checked."},"errorSelector":"29b9b08b","id":101,"name":"NotTargetContractOwner","nameLocation":"430:22:3","nodeType":"ErrorDefinition","parameters":{"id":100,"nodeType":"ParameterList","parameters":[{"constant":false,"id":97,"mutability":"mutable","name":"targetContract","nameLocation":"461:14:3","nodeType":"VariableDeclaration","scope":101,"src":"453:22:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":96,"name":"address","nodeType":"ElementaryTypeName","src":"453:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":99,"mutability":"mutable","name":"account","nameLocation":"485:7:3","nodeType":"VariableDeclaration","scope":101,"src":"477:15:3","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":98,"name":"address","nodeType":"ElementaryTypeName","src":"477:7:3","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"452:41:3"},"src":"424:70:3"}],"src":"32:463:3"},"id":3},"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","exportedSymbols":{"OwnershipTransferred":[110]},"id":111,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":103,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:4"},{"anonymous":false,"documentation":{"id":104,"nodeType":"StructuredDocumentation","src":"58:155:4","text":"@notice Emitted when the contract ownership changes.\n @param previousOwner the previous contract owner.\n @param newOwner the new contract owner."},"eventSelector":"8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0","id":110,"name":"OwnershipTransferred","nameLocation":"219:20:4","nodeType":"EventDefinition","parameters":{"id":109,"nodeType":"ParameterList","parameters":[{"constant":false,"id":106,"indexed":true,"mutability":"mutable","name":"previousOwner","nameLocation":"256:13:4","nodeType":"VariableDeclaration","scope":110,"src":"240:29:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":105,"name":"address","nodeType":"ElementaryTypeName","src":"240:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":108,"indexed":true,"mutability":"mutable","name":"newOwner","nameLocation":"287:8:4","nodeType":"VariableDeclaration","scope":110,"src":"271:24:4","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":107,"name":"address","nodeType":"ElementaryTypeName","src":"271:7:4","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"239:57:4"},"src":"213:84:4"}],"src":"32:269:4"},"id":4},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","exportedSymbols":{"IERC173":[126]},"id":127,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":112,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:5"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC173","contractDependencies":[],"contractKind":"interface","documentation":{"id":113,"nodeType":"StructuredDocumentation","src":"58:182:5","text":"@title ERC-173 Contract Ownership Standard (functions)\n @dev See https://eips.ethereum.org/EIPS/eip-173\n @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0"},"fullyImplemented":false,"id":126,"linearizedBaseContracts":[126],"name":"IERC173","nameLocation":"250:7:5","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":114,"nodeType":"StructuredDocumentation","src":"264:342:5","text":"@notice Sets the address of the new contract owner.\n @dev Reverts if the sender is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"functionSelector":"f2fde38b","id":119,"implemented":false,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"620:17:5","nodeType":"FunctionDefinition","parameters":{"id":117,"nodeType":"ParameterList","parameters":[{"constant":false,"id":116,"mutability":"mutable","name":"newOwner","nameLocation":"646:8:5","nodeType":"VariableDeclaration","scope":119,"src":"638:16:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":115,"name":"address","nodeType":"ElementaryTypeName","src":"638:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"637:18:5"},"returnParameters":{"id":118,"nodeType":"ParameterList","parameters":[],"src":"664:0:5"},"scope":126,"src":"611:54:5","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"documentation":{"id":120,"nodeType":"StructuredDocumentation","src":"671:116:5","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"functionSelector":"8da5cb5b","id":125,"implemented":false,"kind":"function","modifiers":[],"name":"owner","nameLocation":"801:5:5","nodeType":"FunctionDefinition","parameters":{"id":121,"nodeType":"ParameterList","parameters":[],"src":"806:2:5"},"returnParameters":{"id":124,"nodeType":"ParameterList","parameters":[{"constant":false,"id":123,"mutability":"mutable","name":"contractOwner","nameLocation":"840:13:5","nodeType":"VariableDeclaration","scope":125,"src":"832:21:5","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":122,"name":"address","nodeType":"ElementaryTypeName","src":"832:7:5","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"831:23:5"},"scope":126,"src":"792:63:5","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":127,"src":"240:617:5","usedErrors":[],"usedEvents":[]}],"src":"32:826:5"},"id":5},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol","exportedSymbols":{"Address":[918],"ContractOwnershipStorage":[384],"IERC173":[126],"InterfaceDetectionStorage":[532],"NotContractOwner":[94],"NotTargetContractOwner":[101],"OwnershipTransferred":[110],"ProxyInitialization":[588],"TargetIsNotAContract":[87]},"id":385,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":128,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:6"},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol","file":"./../errors/ContractOwnershipErrors.sol","id":131,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":102,"src":"58:97:6","symbolAliases":[{"foreign":{"id":129,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"66:16:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"},{"foreign":{"id":130,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"84:22:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/errors/Common.sol","file":"./../errors/Common.sol","id":133,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":88,"src":"156:60:6","symbolAliases":[{"foreign":{"id":132,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"164:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol","file":"./../events/ERC173Events.sol","id":135,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":111,"src":"217:66:6","symbolAliases":[{"foreign":{"id":134,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"225:20:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol","file":"./../interfaces/IERC173.sol","id":137,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":127,"src":"284:52:6","symbolAliases":[{"foreign":{"id":136,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"292:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","file":"@openzeppelin/contracts/utils/Address.sol","id":139,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":919,"src":"337:66:6","symbolAliases":[{"foreign":{"id":138,"name":"Address","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":918,"src":"345:7:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","file":"./../../proxy/libraries/ProxyInitialization.sol","id":141,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":589,"src":"404:84:6","symbolAliases":[{"foreign":{"id":140,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"412:19:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./../../introspection/libraries/InterfaceDetectionStorage.sol","id":143,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":385,"sourceUnit":533,"src":"489:104:6","symbolAliases":[{"foreign":{"id":142,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"497:25:6","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ContractOwnershipStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":384,"linearizedBaseContracts":[384],"name":"ContractOwnershipStorage","nameLocation":"603:24:6","nodeType":"ContractDefinition","nodes":[{"global":false,"id":146,"libraryName":{"id":144,"name":"Address","nameLocations":["640:7:6"],"nodeType":"IdentifierPath","referencedDeclaration":918,"src":"640:7:6"},"nodeType":"UsingForDirective","src":"634:26:6","typeName":{"id":145,"name":"address","nodeType":"ElementaryTypeName","src":"652:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}},{"global":false,"id":150,"libraryName":{"id":147,"name":"ContractOwnershipStorage","nameLocations":["671:24:6"],"nodeType":"IdentifierPath","referencedDeclaration":384,"src":"671:24:6"},"nodeType":"UsingForDirective","src":"665:67:6","typeName":{"id":149,"nodeType":"UserDefinedTypeName","pathNode":{"id":148,"name":"ContractOwnershipStorage.Layout","nameLocations":["700:24:6","725:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"700:31:6"},"referencedDeclaration":157,"src":"700:31:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}}},{"global":false,"id":154,"libraryName":{"id":151,"name":"InterfaceDetectionStorage","nameLocations":["743:25:6"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"743:25:6"},"nodeType":"UsingForDirective","src":"737:69:6","typeName":{"id":153,"nodeType":"UserDefinedTypeName","pathNode":{"id":152,"name":"InterfaceDetectionStorage.Layout","nameLocations":["773:25:6","799:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"773:32:6"},"referencedDeclaration":442,"src":"773:32:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"canonicalName":"ContractOwnershipStorage.Layout","id":157,"members":[{"constant":false,"id":156,"mutability":"mutable","name":"contractOwner","nameLocation":"844:13:6","nodeType":"VariableDeclaration","scope":157,"src":"836:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":155,"name":"address","nodeType":"ElementaryTypeName","src":"836:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"Layout","nameLocation":"819:6:6","nodeType":"StructDefinition","scope":384,"src":"812:52:6","visibility":"public"},{"constant":true,"id":170,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"896:19:6","nodeType":"VariableDeclaration","scope":384,"src":"870:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":158,"name":"bytes32","nodeType":"ElementaryTypeName","src":"870:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":168,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e73746f72616765","id":164,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"944:47:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""},"value":"animoca.core.access.ContractOwnership.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd","typeString":"literal_string \"animoca.core.access.ContractOwnership.storage\""}],"id":163,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"934:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":165,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"934:58:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":162,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"926:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":161,"name":"uint256","nodeType":"ElementaryTypeName","src":"926:7:6","typeDescriptions":{}}},"id":166,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"926:67:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":167,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"996:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"926:71:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":160,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"918:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":159,"name":"bytes32","nodeType":"ElementaryTypeName","src":"918:7:6","typeDescriptions":{}}},"id":169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"918:80:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":183,"mutability":"constant","name":"PROXY_INIT_PHASE_SLOT","nameLocation":"1030:21:6","nodeType":"VariableDeclaration","scope":384,"src":"1004:128:6","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":171,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1004:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":181,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e6163636573732e436f6e74726163744f776e6572736869702e7068617365","id":177,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1080:45:6","typeDescriptions":{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""},"value":"animoca.core.access.ContractOwnership.phase"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_5b388d90dc1312ba799f321972f13311234fa1163bcabec7cf66101c4876eb84","typeString":"literal_string \"animoca.core.access.ContractOwnership.phase\""}],"id":176,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"1070:9:6","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":178,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1070:56:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":175,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1062:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":174,"name":"uint256","nodeType":"ElementaryTypeName","src":"1062:7:6","typeDescriptions":{}}},"id":179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1062:65:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":180,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1130:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1062:69:6","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":173,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1054:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":172,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1054:7:6","typeDescriptions":{}}},"id":182,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1054:78:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"body":{"id":226,"nodeType":"Block","src":"1641:267:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":197,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":192,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1655:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"arguments":[{"hexValue":"30","id":195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1679:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":194,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1671:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":193,"name":"address","nodeType":"ElementaryTypeName","src":"1671:7:6","typeDescriptions":{}}},"id":196,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1671:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1655:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":213,"nodeType":"IfStatement","src":"1651:152:6","trueBody":{"id":212,"nodeType":"Block","src":"1683:120:6","statements":[{"expression":{"id":202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":198,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":187,"src":"1697:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":200,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1699:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"1697:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":201,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1715:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"1697:30:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":203,"nodeType":"ExpressionStatement","src":"1697:30:6"},{"eventCall":{"arguments":[{"arguments":[{"hexValue":"30","id":207,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1775:1:6","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":206,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1767:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":205,"name":"address","nodeType":"ElementaryTypeName","src":"1767:7:6","typeDescriptions":{}}},"id":208,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1767:10:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":209,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":189,"src":"1779:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":204,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"1746:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":210,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1746:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":211,"nodeType":"EmitStatement","src":"1741:51:6"}]}},{"expression":{"arguments":[{"expression":{"arguments":[{"id":220,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"1874:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}],"id":219,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1869:4:6","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":221,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1869:13:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC173_$126","typeString":"type(contract IERC173)"}},"id":222,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1883:11:6","memberName":"interfaceId","nodeType":"MemberAccess","src":"1869:25:6","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},{"hexValue":"74727565","id":223,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1896:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"},{"typeIdentifier":"t_bool","typeString":"bool"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":214,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"1812:25:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1838:6:6","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"1812:32:6","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":217,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:34:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":218,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1847:21:6","memberName":"setSupportedInterface","nodeType":"MemberAccess","referencedDeclaration":485,"src":"1812:56:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$_t_bool_$returns$__$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)"}},"id":224,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1812:89:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":225,"nodeType":"ExpressionStatement","src":"1812:89:6"}]},"documentation":{"id":184,"nodeType":"StructuredDocumentation","src":"1139:423:6","text":"@notice Initializes the storage with an initial contract owner (immutable version).\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":227,"implemented":true,"kind":"function","modifiers":[],"name":"constructorInit","nameLocation":"1576:15:6","nodeType":"FunctionDefinition","parameters":{"id":190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":187,"mutability":"mutable","name":"s","nameLocation":"1607:1:6","nodeType":"VariableDeclaration","scope":227,"src":"1592:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":186,"nodeType":"UserDefinedTypeName","pathNode":{"id":185,"name":"Layout","nameLocations":["1592:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"1592:6:6"},"referencedDeclaration":157,"src":"1592:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":189,"mutability":"mutable","name":"initialOwner","nameLocation":"1618:12:6","nodeType":"VariableDeclaration","scope":227,"src":"1610:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":188,"name":"address","nodeType":"ElementaryTypeName","src":"1610:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1591:40:6"},"returnParameters":{"id":191,"nodeType":"ParameterList","parameters":[],"src":"1641:0:6"},"scope":384,"src":"1567:341:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":249,"nodeType":"Block","src":"2573:112:6","statements":[{"expression":{"arguments":[{"id":239,"name":"PROXY_INIT_PHASE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":183,"src":"2612:21:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"hexValue":"31","id":240,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2635:1:6","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"}],"expression":{"id":236,"name":"ProxyInitialization","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":588,"src":"2583:19:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_ProxyInitialization_$588_$","typeString":"type(library ProxyInitialization)"}},"id":238,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2603:8:6","memberName":"setPhase","nodeType":"MemberAccess","referencedDeclaration":587,"src":"2583:28:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_bytes32_$_t_uint256_$returns$__$","typeString":"function (bytes32,uint256)"}},"id":241,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2583:54:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":242,"nodeType":"ExpressionStatement","src":"2583:54:6"},{"expression":{"arguments":[{"id":246,"name":"initialOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":233,"src":"2665:12:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":243,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":231,"src":"2647:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":245,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"2649:15:6","memberName":"constructorInit","nodeType":"MemberAccess","referencedDeclaration":227,"src":"2647:17:6","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_struct$_Layout_$157_storage_ptr_$_t_address_$returns$__$attached_to$_t_struct$_Layout_$157_storage_ptr_$","typeString":"function (struct ContractOwnershipStorage.Layout storage pointer,address)"}},"id":247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2647:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":248,"nodeType":"ExpressionStatement","src":"2647:31:6"}]},"documentation":{"id":228,"nodeType":"StructuredDocumentation","src":"1914:586:6","text":"@notice Initializes the storage with an initial contract owner (proxied version).\n @notice Sets the proxy initialization phase to `1`.\n @notice Marks the following ERC165 interface(s) as supported: ERC173.\n @dev Note: This function should be called ONLY in the init function of a proxied contract.\n @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\n @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\n @param initialOwner The initial contract owner."},"id":250,"implemented":true,"kind":"function","modifiers":[],"name":"proxyInit","nameLocation":"2514:9:6","nodeType":"FunctionDefinition","parameters":{"id":234,"nodeType":"ParameterList","parameters":[{"constant":false,"id":231,"mutability":"mutable","name":"s","nameLocation":"2539:1:6","nodeType":"VariableDeclaration","scope":250,"src":"2524:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":230,"nodeType":"UserDefinedTypeName","pathNode":{"id":229,"name":"Layout","nameLocations":["2524:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"2524:6:6"},"referencedDeclaration":157,"src":"2524:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":233,"mutability":"mutable","name":"initialOwner","nameLocation":"2550:12:6","nodeType":"VariableDeclaration","scope":250,"src":"2542:20:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":232,"name":"address","nodeType":"ElementaryTypeName","src":"2542:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2523:40:6"},"returnParameters":{"id":235,"nodeType":"ParameterList","parameters":[],"src":"2573:0:6"},"scope":384,"src":"2505:180:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":290,"nodeType":"Block","src":"3148:281:6","statements":[{"assignments":[262],"declarations":[{"constant":false,"id":262,"mutability":"mutable","name":"previousOwner","nameLocation":"3166:13:6","nodeType":"VariableDeclaration","scope":290,"src":"3158:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":261,"name":"address","nodeType":"ElementaryTypeName","src":"3158:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":265,"initialValue":{"expression":{"id":263,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3182:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":264,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3184:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3182:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3158:39:6"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":268,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":266,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3211:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":267,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3221:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3211:23:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":273,"nodeType":"IfStatement","src":"3207:60:6","trueBody":{"errorCall":{"arguments":[{"id":270,"name":"sender","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":256,"src":"3260:6:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":269,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"3243:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":271,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3243:24:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":272,"nodeType":"RevertStatement","src":"3236:31:6"}},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":276,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":274,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3281:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"id":275,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3298:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3281:25:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":289,"nodeType":"IfStatement","src":"3277:146:6","trueBody":{"id":288,"nodeType":"Block","src":"3308:115:6","statements":[{"expression":{"id":281,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":277,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":254,"src":"3322:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":279,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"3324:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3322:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":280,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3340:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3322:26:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":282,"nodeType":"ExpressionStatement","src":"3322:26:6"},{"eventCall":{"arguments":[{"id":284,"name":"previousOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":262,"src":"3388:13:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":285,"name":"newOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":258,"src":"3403:8:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":283,"name":"OwnershipTransferred","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":110,"src":"3367:20:6","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_address_$_t_address_$returns$__$","typeString":"function (address,address)"}},"id":286,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3367:45:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":287,"nodeType":"EmitStatement","src":"3362:50:6"}]}}]},"documentation":{"id":251,"nodeType":"StructuredDocumentation","src":"2691:364:6","text":"@notice Sets the address of the new contract owner.\n @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\n @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\n @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership."},"id":291,"implemented":true,"kind":"function","modifiers":[],"name":"transferOwnership","nameLocation":"3069:17:6","nodeType":"FunctionDefinition","parameters":{"id":259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":254,"mutability":"mutable","name":"s","nameLocation":"3102:1:6","nodeType":"VariableDeclaration","scope":291,"src":"3087:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":253,"nodeType":"UserDefinedTypeName","pathNode":{"id":252,"name":"Layout","nameLocations":["3087:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3087:6:6"},"referencedDeclaration":157,"src":"3087:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":256,"mutability":"mutable","name":"sender","nameLocation":"3113:6:6","nodeType":"VariableDeclaration","scope":291,"src":"3105:14:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":255,"name":"address","nodeType":"ElementaryTypeName","src":"3105:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":258,"mutability":"mutable","name":"newOwner","nameLocation":"3129:8:6","nodeType":"VariableDeclaration","scope":291,"src":"3121:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":257,"name":"address","nodeType":"ElementaryTypeName","src":"3121:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3086:52:6"},"returnParameters":{"id":260,"nodeType":"ParameterList","parameters":[],"src":"3148:0:6"},"scope":384,"src":"3060:369:6","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":303,"nodeType":"Block","src":"3635:39:6","statements":[{"expression":{"expression":{"id":300,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":295,"src":"3652:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":301,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"3654:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"3652:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":299,"id":302,"nodeType":"Return","src":"3645:22:6"}]},"documentation":{"id":292,"nodeType":"StructuredDocumentation","src":"3435:116:6","text":"@notice Gets the address of the contract owner.\n @return contractOwner The address of the contract owner."},"id":304,"implemented":true,"kind":"function","modifiers":[],"name":"owner","nameLocation":"3565:5:6","nodeType":"FunctionDefinition","parameters":{"id":296,"nodeType":"ParameterList","parameters":[{"constant":false,"id":295,"mutability":"mutable","name":"s","nameLocation":"3586:1:6","nodeType":"VariableDeclaration","scope":304,"src":"3571:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":294,"nodeType":"UserDefinedTypeName","pathNode":{"id":293,"name":"Layout","nameLocations":["3571:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"3571:6:6"},"referencedDeclaration":157,"src":"3571:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"3570:18:6"},"returnParameters":{"id":299,"nodeType":"ParameterList","parameters":[{"constant":false,"id":298,"mutability":"mutable","name":"contractOwner","nameLocation":"3620:13:6","nodeType":"VariableDeclaration","scope":304,"src":"3612:21:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":297,"name":"address","nodeType":"ElementaryTypeName","src":"3612:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3611:23:6"},"scope":384,"src":"3556:118:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":331,"nodeType":"Block","src":"4070:153:6","statements":[{"condition":{"id":317,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4084:28:6","subExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":314,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4085:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":315,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4100:10:6","memberName":"isContract","nodeType":"MemberAccess","referencedDeclaration":606,"src":"4085:25:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$attached_to$_t_address_$","typeString":"function (address) view returns (bool)"}},"id":316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4085:27:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":322,"nodeType":"IfStatement","src":"4080:77:6","trueBody":{"errorCall":{"arguments":[{"id":319,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4142:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":318,"name":"TargetIsNotAContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":87,"src":"4121:20:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":320,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4121:36:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":321,"nodeType":"RevertStatement","src":"4114:43:6"}},{"expression":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"arguments":[{"id":324,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":307,"src":"4182:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":323,"name":"IERC173","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":126,"src":"4174:7:6","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC173_$126_$","typeString":"type(contract IERC173)"}},"id":325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:23:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_contract$_IERC173_$126","typeString":"contract IERC173"}},"id":326,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"4198:5:6","memberName":"owner","nodeType":"MemberAccess","referencedDeclaration":125,"src":"4174:29:6","typeDescriptions":{"typeIdentifier":"t_function_external_view$__$returns$_t_address_$","typeString":"function () view external returns (address)"}},"id":327,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4174:31:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":328,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":309,"src":"4209:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4174:42:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":313,"id":330,"nodeType":"Return","src":"4167:49:6"}]},"documentation":{"id":305,"nodeType":"StructuredDocumentation","src":"3680:261:6","text":"@notice Checks whether an account is the owner of a target contract.\n @param targetContract The contract to check.\n @param account The account to check.\n @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`."},"id":332,"implemented":true,"kind":"function","modifiers":[],"name":"isTargetContractOwner","nameLocation":"3955:21:6","nodeType":"FunctionDefinition","parameters":{"id":310,"nodeType":"ParameterList","parameters":[{"constant":false,"id":307,"mutability":"mutable","name":"targetContract","nameLocation":"3985:14:6","nodeType":"VariableDeclaration","scope":332,"src":"3977:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":306,"name":"address","nodeType":"ElementaryTypeName","src":"3977:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":309,"mutability":"mutable","name":"account","nameLocation":"4009:7:6","nodeType":"VariableDeclaration","scope":332,"src":"4001:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":308,"name":"address","nodeType":"ElementaryTypeName","src":"4001:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3976:41:6"},"returnParameters":{"id":313,"nodeType":"ParameterList","parameters":[{"constant":false,"id":312,"mutability":"mutable","name":"isTargetContractOwner_","nameLocation":"4046:22:6","nodeType":"VariableDeclaration","scope":332,"src":"4041:27:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":311,"name":"bool","nodeType":"ElementaryTypeName","src":"4041:4:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"4040:29:6"},"scope":384,"src":"3946:277:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":350,"nodeType":"Block","src":"4494:81:6","statements":[{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":344,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":341,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4508:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"!=","rightExpression":{"expression":{"id":342,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":336,"src":"4519:1:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout storage pointer"}},"id":343,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"4521:13:6","memberName":"contractOwner","nodeType":"MemberAccess","referencedDeclaration":156,"src":"4519:15:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"4508:26:6","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":349,"nodeType":"IfStatement","src":"4504:64:6","trueBody":{"errorCall":{"arguments":[{"id":346,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":338,"src":"4560:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":345,"name":"NotContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":94,"src":"4543:16:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$returns$__$","typeString":"function (address) pure"}},"id":347,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4543:25:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":348,"nodeType":"RevertStatement","src":"4536:32:6"}}]},"documentation":{"id":333,"nodeType":"StructuredDocumentation","src":"4229:179:6","text":"@notice Ensures that an account is the contract owner.\n @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\n @param account The account."},"id":351,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsContractOwner","nameLocation":"4422:22:6","nodeType":"FunctionDefinition","parameters":{"id":339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":336,"mutability":"mutable","name":"s","nameLocation":"4460:1:6","nodeType":"VariableDeclaration","scope":351,"src":"4445:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":335,"nodeType":"UserDefinedTypeName","pathNode":{"id":334,"name":"Layout","nameLocations":["4445:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"4445:6:6"},"referencedDeclaration":157,"src":"4445:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":338,"mutability":"mutable","name":"account","nameLocation":"4471:7:6","nodeType":"VariableDeclaration","scope":351,"src":"4463:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":337,"name":"address","nodeType":"ElementaryTypeName","src":"4463:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4444:35:6"},"returnParameters":{"id":340,"nodeType":"ParameterList","parameters":[],"src":"4494:0:6"},"scope":384,"src":"4413:162:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":370,"nodeType":"Block","src":"4935:124:6","statements":[{"condition":{"id":363,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"!","prefix":true,"src":"4949:47:6","subExpression":{"arguments":[{"id":360,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"4972:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":361,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"4988:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":359,"name":"isTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":332,"src":"4950:21:6","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_address_$returns$_t_bool_$","typeString":"function (address,address) view returns (bool)"}},"id":362,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4950:46:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":369,"nodeType":"IfStatement","src":"4945:107:6","trueBody":{"errorCall":{"arguments":[{"id":365,"name":"targetContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":354,"src":"5028:14:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":366,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":356,"src":"5044:7:6","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_address","typeString":"address"}],"id":364,"name":"NotTargetContractOwner","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":101,"src":"5005:22:6","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_address_$_t_address_$returns$__$","typeString":"function (address,address) pure"}},"id":367,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5005:47:6","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":368,"nodeType":"RevertStatement","src":"4998:54:6"}}]},"documentation":{"id":352,"nodeType":"StructuredDocumentation","src":"4581:256:6","text":"@notice Enforces that an account is the owner of a target contract.\n @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\n @param targetContract The contract to check.\n @param account The account to check."},"id":371,"implemented":true,"kind":"function","modifiers":[],"name":"enforceIsTargetContractOwner","nameLocation":"4851:28:6","nodeType":"FunctionDefinition","parameters":{"id":357,"nodeType":"ParameterList","parameters":[{"constant":false,"id":354,"mutability":"mutable","name":"targetContract","nameLocation":"4888:14:6","nodeType":"VariableDeclaration","scope":371,"src":"4880:22:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":353,"name":"address","nodeType":"ElementaryTypeName","src":"4880:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":356,"mutability":"mutable","name":"account","nameLocation":"4912:7:6","nodeType":"VariableDeclaration","scope":371,"src":"4904:15:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":355,"name":"address","nodeType":"ElementaryTypeName","src":"4904:7:6","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4879:41:6"},"returnParameters":{"id":358,"nodeType":"ParameterList","parameters":[],"src":"4935:0:6"},"scope":384,"src":"4842:217:6","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":382,"nodeType":"Block","src":"5124:115:6","statements":[{"assignments":[378],"declarations":[{"constant":false,"id":378,"mutability":"mutable","name":"position","nameLocation":"5142:8:6","nodeType":"VariableDeclaration","scope":382,"src":"5134:16:6","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":377,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5134:7:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":380,"initialValue":{"id":379,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":170,"src":"5153:19:6","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"5134:38:6"},{"AST":{"nativeSrc":"5191:42:6","nodeType":"YulBlock","src":"5191:42:6","statements":[{"nativeSrc":"5205:18:6","nodeType":"YulAssignment","src":"5205:18:6","value":{"name":"position","nativeSrc":"5215:8:6","nodeType":"YulIdentifier","src":"5215:8:6"},"variableNames":[{"name":"s.slot","nativeSrc":"5205:6:6","nodeType":"YulIdentifier","src":"5205:6:6"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":378,"isOffset":false,"isSlot":false,"src":"5215:8:6","valueSize":1},{"declaration":375,"isOffset":false,"isSlot":true,"src":"5205:6:6","suffix":"slot","valueSize":1}],"id":381,"nodeType":"InlineAssembly","src":"5182:51:6"}]},"id":383,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"5074:6:6","nodeType":"FunctionDefinition","parameters":{"id":372,"nodeType":"ParameterList","parameters":[],"src":"5080:2:6"},"returnParameters":{"id":376,"nodeType":"ParameterList","parameters":[{"constant":false,"id":375,"mutability":"mutable","name":"s","nameLocation":"5121:1:6","nodeType":"VariableDeclaration","scope":383,"src":"5106:16:6","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"},"typeName":{"id":374,"nodeType":"UserDefinedTypeName","pathNode":{"id":373,"name":"Layout","nameLocations":["5106:6:6"],"nodeType":"IdentifierPath","referencedDeclaration":157,"src":"5106:6:6"},"referencedDeclaration":157,"src":"5106:6:6","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$157_storage_ptr","typeString":"struct ContractOwnershipStorage.Layout"}},"visibility":"internal"}],"src":"5105:18:6"},"scope":384,"src":"5065:174:6","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":385,"src":"595:4646:6","usedErrors":[],"usedEvents":[]}],"src":"32:5210:6"},"id":6},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol","exportedSymbols":{"IERC165":[431],"InterfaceDetection":[414],"InterfaceDetectionStorage":[532]},"id":415,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":386,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:7"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./interfaces/IERC165.sol","id":388,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":432,"src":"58:49:7","symbolAliases":[{"foreign":{"id":387,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"66:7:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","file":"./libraries/InterfaceDetectionStorage.sol","id":390,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":415,"sourceUnit":533,"src":"108:84:7","symbolAliases":[{"foreign":{"id":389,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"116:25:7","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":true,"baseContracts":[{"baseName":{"id":392,"name":"IERC165","nameLocations":["425:7:7"],"nodeType":"IdentifierPath","referencedDeclaration":431,"src":"425:7:7"},"id":393,"nodeType":"InheritanceSpecifier","src":"425:7:7"}],"canonicalName":"InterfaceDetection","contractDependencies":[],"contractKind":"contract","documentation":{"id":391,"nodeType":"StructuredDocumentation","src":"194:191:7","text":"@title ERC165 Interface Detection Standard (immutable or proxiable version).\n @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation."},"fullyImplemented":true,"id":414,"linearizedBaseContracts":[414,431],"name":"InterfaceDetection","nameLocation":"403:18:7","nodeType":"ContractDefinition","nodes":[{"global":false,"id":397,"libraryName":{"id":394,"name":"InterfaceDetectionStorage","nameLocations":["445:25:7"],"nodeType":"IdentifierPath","referencedDeclaration":532,"src":"445:25:7"},"nodeType":"UsingForDirective","src":"439:69:7","typeName":{"id":396,"nodeType":"UserDefinedTypeName","pathNode":{"id":395,"name":"InterfaceDetectionStorage.Layout","nameLocations":["475:25:7","501:6:7"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"475:32:7"},"referencedDeclaration":442,"src":"475:32:7","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}}},{"baseFunctions":[430],"body":{"id":412,"nodeType":"Block","src":"618:89:7","statements":[{"expression":{"arguments":[{"id":409,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":400,"src":"688:11:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes4","typeString":"bytes4"}],"expression":{"arguments":[],"expression":{"argumentTypes":[],"expression":{"id":405,"name":"InterfaceDetectionStorage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":532,"src":"635:25:7","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_InterfaceDetectionStorage_$532_$","typeString":"type(library InterfaceDetectionStorage)"}},"id":406,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"661:6:7","memberName":"layout","nodeType":"MemberAccess","referencedDeclaration":531,"src":"635:32:7","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$__$returns$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function () pure returns (struct InterfaceDetectionStorage.Layout storage pointer)"}},"id":407,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:34:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":408,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"670:17:7","memberName":"supportsInterface","nodeType":"MemberAccess","referencedDeclaration":519,"src":"635:52:7","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_struct$_Layout_$442_storage_ptr_$_t_bytes4_$returns$_t_bool_$attached_to$_t_struct$_Layout_$442_storage_ptr_$","typeString":"function (struct InterfaceDetectionStorage.Layout storage pointer,bytes4) view returns (bool)"}},"id":410,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"635:65:7","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":404,"id":411,"nodeType":"Return","src":"628:72:7"}]},"documentation":{"id":398,"nodeType":"StructuredDocumentation","src":"514:23:7","text":"@inheritdoc IERC165"},"functionSelector":"01ffc9a7","id":413,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"551:17:7","nodeType":"FunctionDefinition","parameters":{"id":401,"nodeType":"ParameterList","parameters":[{"constant":false,"id":400,"mutability":"mutable","name":"interfaceId","nameLocation":"576:11:7","nodeType":"VariableDeclaration","scope":413,"src":"569:18:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":399,"name":"bytes4","nodeType":"ElementaryTypeName","src":"569:6:7","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"568:20:7"},"returnParameters":{"id":404,"nodeType":"ParameterList","parameters":[{"constant":false,"id":403,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":413,"src":"612:4:7","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":402,"name":"bool","nodeType":"ElementaryTypeName","src":"612:4:7","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"611:6:7"},"scope":414,"src":"542:165:7","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":415,"src":"385:324:7","usedErrors":[],"usedEvents":[]}],"src":"32:678:7"},"id":7},"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","exportedSymbols":{"IllegalInterfaceId":[419]},"id":420,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":416,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:8"},{"documentation":{"id":417,"nodeType":"StructuredDocumentation","src":"58:68:8","text":"@notice Thrown when setting the illegal interfaceId 0xffffffff."},"errorSelector":"72c683bb","id":419,"name":"IllegalInterfaceId","nameLocation":"132:18:8","nodeType":"ErrorDefinition","parameters":{"id":418,"nodeType":"ParameterList","parameters":[],"src":"150:2:8"},"src":"126:27:8"}],"src":"32:122:8"},"id":8},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","exportedSymbols":{"IERC165":[431]},"id":432,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":421,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:9"},{"abstract":false,"baseContracts":[],"canonicalName":"IERC165","contractDependencies":[],"contractKind":"interface","documentation":{"id":422,"nodeType":"StructuredDocumentation","src":"58:173:9","text":"@title ERC165 Interface Detection Standard.\n @dev See https://eips.ethereum.org/EIPS/eip-165.\n @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7."},"fullyImplemented":false,"id":431,"linearizedBaseContracts":[431],"name":"IERC165","nameLocation":"241:7:9","nodeType":"ContractDefinition","nodes":[{"documentation":{"id":423,"nodeType":"StructuredDocumentation","src":"255:340:9","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId the interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"functionSelector":"01ffc9a7","id":430,"implemented":false,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"609:17:9","nodeType":"FunctionDefinition","parameters":{"id":426,"nodeType":"ParameterList","parameters":[{"constant":false,"id":425,"mutability":"mutable","name":"interfaceId","nameLocation":"634:11:9","nodeType":"VariableDeclaration","scope":430,"src":"627:18:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":424,"name":"bytes4","nodeType":"ElementaryTypeName","src":"627:6:9","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"626:20:9"},"returnParameters":{"id":429,"nodeType":"ParameterList","parameters":[{"constant":false,"id":428,"mutability":"mutable","name":"supported","nameLocation":"675:9:9","nodeType":"VariableDeclaration","scope":430,"src":"670:14:9","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":427,"name":"bool","nodeType":"ElementaryTypeName","src":"670:4:9","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"669:16:9"},"scope":431,"src":"600:86:9","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":432,"src":"231:457:9","usedErrors":[],"usedEvents":[]}],"src":"32:657:9"},"id":9},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol","exportedSymbols":{"IERC165":[431],"IllegalInterfaceId":[419],"InterfaceDetectionStorage":[532]},"id":533,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":433,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:10"},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol","file":"./../errors/InterfaceDetectionErrors.sol","id":435,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":420,"src":"58:76:10","symbolAliases":[{"foreign":{"id":434,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"66:18:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol","file":"./../interfaces/IERC165.sol","id":437,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":533,"sourceUnit":432,"src":"135:52:10","symbolAliases":[{"foreign":{"id":436,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"143:7:10","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"InterfaceDetectionStorage","contractDependencies":[],"contractKind":"library","fullyImplemented":true,"id":532,"linearizedBaseContracts":[532],"name":"InterfaceDetectionStorage","nameLocation":"197:25:10","nodeType":"ContractDefinition","nodes":[{"canonicalName":"InterfaceDetectionStorage.Layout","id":442,"members":[{"constant":false,"id":441,"mutability":"mutable","name":"supportedInterfaces","nameLocation":"277:19:10","nodeType":"VariableDeclaration","scope":442,"src":"253:43:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"typeName":{"id":440,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":438,"name":"bytes4","nodeType":"ElementaryTypeName","src":"261:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"Mapping","src":"253:23:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":439,"name":"bool","nodeType":"ElementaryTypeName","src":"271:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}}},"visibility":"internal"}],"name":"Layout","nameLocation":"236:6:10","nodeType":"StructDefinition","scope":532,"src":"229:74:10","visibility":"public"},{"constant":true,"id":455,"mutability":"constant","name":"LAYOUT_STORAGE_SLOT","nameLocation":"335:19:10","nodeType":"VariableDeclaration","scope":532,"src":"309:136:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":443,"name":"bytes32","nodeType":"ElementaryTypeName","src":"309:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":453,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"hexValue":"616e696d6f63612e636f72652e696e74726f7370656374696f6e2e496e74657266616365446574656374696f6e2e73746f72616765","id":449,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"383:55:10","typeDescriptions":{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""},"value":"animoca.core.introspection.InterfaceDetection.storage"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e","typeString":"literal_string \"animoca.core.introspection.InterfaceDetection.storage\""}],"id":448,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"373:9:10","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":450,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"373:66:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":447,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"365:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":446,"name":"uint256","nodeType":"ElementaryTypeName","src":"365:7:10","typeDescriptions":{}}},"id":451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"365:75:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":452,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"443:1:10","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"365:79:10","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":445,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"357:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":444,"name":"bytes32","nodeType":"ElementaryTypeName","src":"357:7:10","typeDescriptions":{}}},"id":454,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"357:88:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":true,"id":458,"mutability":"constant","name":"ILLEGAL_INTERFACE_ID","nameLocation":"477:20:10","nodeType":"VariableDeclaration","scope":532,"src":"452:58:10","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":456,"name":"bytes4","nodeType":"ElementaryTypeName","src":"452:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"value":{"hexValue":"30786666666666666666","id":457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"500:10:10","typeDescriptions":{"typeIdentifier":"t_rational_4294967295_by_1","typeString":"int_const 4294967295"},"value":"0xffffffff"},"visibility":"internal"},{"body":{"id":484,"nodeType":"Block","src":"867:141:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":471,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":469,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"881:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":470,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"896:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"881:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":475,"nodeType":"IfStatement","src":"877:68:10","trueBody":{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":472,"name":"IllegalInterfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":419,"src":"925:18:10","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":473,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"925:20:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":474,"nodeType":"RevertStatement","src":"918:27:10"}},{"expression":{"id":482,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"expression":{"id":476,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":462,"src":"955:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":479,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"957:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"955:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":480,"indexExpression":{"id":478,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":464,"src":"977:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"955:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":481,"name":"supported","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":466,"src":"992:9:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"955:46:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":483,"nodeType":"ExpressionStatement","src":"955:46:10"}]},"documentation":{"id":459,"nodeType":"StructuredDocumentation","src":"517:251:10","text":"@notice Sets or unsets an ERC165 interface.\n @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\n @param interfaceId the interface identifier.\n @param supported True to set the interface, false to unset it."},"id":485,"implemented":true,"kind":"function","modifiers":[],"name":"setSupportedInterface","nameLocation":"782:21:10","nodeType":"FunctionDefinition","parameters":{"id":467,"nodeType":"ParameterList","parameters":[{"constant":false,"id":462,"mutability":"mutable","name":"s","nameLocation":"819:1:10","nodeType":"VariableDeclaration","scope":485,"src":"804:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":461,"nodeType":"UserDefinedTypeName","pathNode":{"id":460,"name":"Layout","nameLocations":["804:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"804:6:10"},"referencedDeclaration":442,"src":"804:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":464,"mutability":"mutable","name":"interfaceId","nameLocation":"829:11:10","nodeType":"VariableDeclaration","scope":485,"src":"822:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":463,"name":"bytes4","nodeType":"ElementaryTypeName","src":"822:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"},{"constant":false,"id":466,"mutability":"mutable","name":"supported","nameLocation":"847:9:10","nodeType":"VariableDeclaration","scope":485,"src":"842:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":465,"name":"bool","nodeType":"ElementaryTypeName","src":"842:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"803:54:10"},"returnParameters":{"id":468,"nodeType":"ParameterList","parameters":[],"src":"867:0:10"},"scope":532,"src":"773:235:10","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":518,"nodeType":"Block","src":"1463:236:10","statements":[{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":496,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1477:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":497,"name":"ILLEGAL_INTERFACE_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":458,"src":"1492:20:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1477:35:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":502,"nodeType":"IfStatement","src":"1473:78:10","trueBody":{"id":501,"nodeType":"Block","src":"1514:37:10","statements":[{"expression":{"hexValue":"66616c7365","id":499,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1535:5:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"false"},"functionReturnParameters":495,"id":500,"nodeType":"Return","src":"1528:12:10"}]}},{"condition":{"commonType":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"id":508,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":503,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1564:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"arguments":[{"id":505,"name":"IERC165","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":431,"src":"1584:7:10","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_type$_t_contract$_IERC165_$431_$","typeString":"type(contract IERC165)"}],"id":504,"name":"type","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-27,"src":"1579:4:10","typeDescriptions":{"typeIdentifier":"t_function_metatype_pure$__$returns$__$","typeString":"function () pure"}},"id":506,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1579:13:10","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_magic_meta_type_t_contract$_IERC165_$431","typeString":"type(contract IERC165)"}},"id":507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1593:11:10","memberName":"interfaceId","nodeType":"MemberAccess","src":"1579:25:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"src":"1564:40:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":512,"nodeType":"IfStatement","src":"1560:82:10","trueBody":{"id":511,"nodeType":"Block","src":"1606:36:10","statements":[{"expression":{"hexValue":"74727565","id":509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"1627:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"functionReturnParameters":495,"id":510,"nodeType":"Return","src":"1620:11:10"}]}},{"expression":{"baseExpression":{"expression":{"id":513,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":489,"src":"1658:1:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout storage pointer"}},"id":514,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"1660:19:10","memberName":"supportedInterfaces","nodeType":"MemberAccess","referencedDeclaration":441,"src":"1658:21:10","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes4_$_t_bool_$","typeString":"mapping(bytes4 => bool)"}},"id":516,"indexExpression":{"id":515,"name":"interfaceId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":491,"src":"1680:11:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"1658:34:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":495,"id":517,"nodeType":"Return","src":"1651:41:10"}]},"documentation":{"id":486,"nodeType":"StructuredDocumentation","src":"1014:340:10","text":"@notice Returns whether this contract implements a given interface.\n @dev Note: This function call must use less than 30 000 gas.\n @param interfaceId The interface identifier to test.\n @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."},"id":519,"implemented":true,"kind":"function","modifiers":[],"name":"supportsInterface","nameLocation":"1368:17:10","nodeType":"FunctionDefinition","parameters":{"id":492,"nodeType":"ParameterList","parameters":[{"constant":false,"id":489,"mutability":"mutable","name":"s","nameLocation":"1401:1:10","nodeType":"VariableDeclaration","scope":519,"src":"1386:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":488,"nodeType":"UserDefinedTypeName","pathNode":{"id":487,"name":"Layout","nameLocations":["1386:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1386:6:10"},"referencedDeclaration":442,"src":"1386:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"},{"constant":false,"id":491,"mutability":"mutable","name":"interfaceId","nameLocation":"1411:11:10","nodeType":"VariableDeclaration","scope":519,"src":"1404:18:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"},"typeName":{"id":490,"name":"bytes4","nodeType":"ElementaryTypeName","src":"1404:6:10","typeDescriptions":{"typeIdentifier":"t_bytes4","typeString":"bytes4"}},"visibility":"internal"}],"src":"1385:38:10"},"returnParameters":{"id":495,"nodeType":"ParameterList","parameters":[{"constant":false,"id":494,"mutability":"mutable","name":"supported","nameLocation":"1452:9:10","nodeType":"VariableDeclaration","scope":519,"src":"1447:14:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":493,"name":"bool","nodeType":"ElementaryTypeName","src":"1447:4:10","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1446:16:10"},"scope":532,"src":"1359:340:10","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":530,"nodeType":"Block","src":"1764:115:10","statements":[{"assignments":[526],"declarations":[{"constant":false,"id":526,"mutability":"mutable","name":"position","nameLocation":"1782:8:10","nodeType":"VariableDeclaration","scope":530,"src":"1774:16:10","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":525,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1774:7:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":528,"initialValue":{"id":527,"name":"LAYOUT_STORAGE_SLOT","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":455,"src":"1793:19:10","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"1774:38:10"},{"AST":{"nativeSrc":"1831:42:10","nodeType":"YulBlock","src":"1831:42:10","statements":[{"nativeSrc":"1845:18:10","nodeType":"YulAssignment","src":"1845:18:10","value":{"name":"position","nativeSrc":"1855:8:10","nodeType":"YulIdentifier","src":"1855:8:10"},"variableNames":[{"name":"s.slot","nativeSrc":"1845:6:10","nodeType":"YulIdentifier","src":"1845:6:10"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":526,"isOffset":false,"isSlot":false,"src":"1855:8:10","valueSize":1},{"declaration":523,"isOffset":false,"isSlot":true,"src":"1845:6:10","suffix":"slot","valueSize":1}],"id":529,"nodeType":"InlineAssembly","src":"1822:51:10"}]},"id":531,"implemented":true,"kind":"function","modifiers":[],"name":"layout","nameLocation":"1714:6:10","nodeType":"FunctionDefinition","parameters":{"id":520,"nodeType":"ParameterList","parameters":[],"src":"1720:2:10"},"returnParameters":{"id":524,"nodeType":"ParameterList","parameters":[{"constant":false,"id":523,"mutability":"mutable","name":"s","nameLocation":"1761:1:10","nodeType":"VariableDeclaration","scope":531,"src":"1746:16:10","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"},"typeName":{"id":522,"nodeType":"UserDefinedTypeName","pathNode":{"id":521,"name":"Layout","nameLocations":["1746:6:10"],"nodeType":"IdentifierPath","referencedDeclaration":442,"src":"1746:6:10"},"referencedDeclaration":442,"src":"1746:6:10","typeDescriptions":{"typeIdentifier":"t_struct$_Layout_$442_storage_ptr","typeString":"struct InterfaceDetectionStorage.Layout"}},"visibility":"internal"}],"src":"1745:18:10"},"scope":532,"src":"1705:174:10","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":533,"src":"189:1692:10","usedErrors":[],"usedEvents":[]}],"src":"32:1850:10"},"id":10},"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[541]},"id":542,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":534,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:11"},{"documentation":{"id":535,"nodeType":"StructuredDocumentation","src":"58:179:11","text":"@notice Emitted when trying to set a phase value that has already been reached.\n @param currentPhase The current phase.\n @param newPhase The new phase trying to be set."},"errorSelector":"bf0c18ec","id":541,"name":"InitializationPhaseAlreadyReached","nameLocation":"243:33:11","nodeType":"ErrorDefinition","parameters":{"id":540,"nodeType":"ParameterList","parameters":[{"constant":false,"id":537,"mutability":"mutable","name":"currentPhase","nameLocation":"285:12:11","nodeType":"VariableDeclaration","scope":541,"src":"277:20:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":536,"name":"uint256","nodeType":"ElementaryTypeName","src":"277:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":539,"mutability":"mutable","name":"newPhase","nameLocation":"307:8:11","nodeType":"VariableDeclaration","scope":541,"src":"299:16:11","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":538,"name":"uint256","nodeType":"ElementaryTypeName","src":"299:7:11","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"276:40:11"},"src":"237:80:11"}],"src":"32:286:11"},"id":11},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ast":{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol","exportedSymbols":{"InitializationPhaseAlreadyReached":[541],"ProxyInitialization":[588],"StorageSlot":[1050]},"id":589,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":543,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:12"},{"absolutePath":"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol","file":"./../errors/ProxyInitializationErrors.sol","id":545,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":542,"src":"58:92:12","symbolAliases":[{"foreign":{"id":544,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"66:33:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","file":"@openzeppelin/contracts/utils/StorageSlot.sol","id":547,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":589,"sourceUnit":1051,"src":"151:74:12","symbolAliases":[{"foreign":{"id":546,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"159:11:12","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ProxyInitialization","contractDependencies":[],"contractKind":"library","documentation":{"id":548,"nodeType":"StructuredDocumentation","src":"227:92:12","text":"@notice Multiple calls protection for storage-modifying proxy initialization functions."},"fullyImplemented":true,"id":588,"linearizedBaseContracts":[588],"name":"ProxyInitialization","nameLocation":"327:19:12","nodeType":"ContractDefinition","nodes":[{"body":{"id":586,"nodeType":"Block","src":"735:294:12","statements":[{"assignments":[560],"declarations":[{"constant":false,"id":560,"mutability":"mutable","name":"currentVersion","nameLocation":"777:14:12","nodeType":"VariableDeclaration","scope":586,"src":"745:46:12","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":559,"nodeType":"UserDefinedTypeName","pathNode":{"id":558,"name":"StorageSlot.Uint256Slot","nameLocations":["745:11:12","757:11:12"],"nodeType":"IdentifierPath","referencedDeclaration":955,"src":"745:23:12"},"referencedDeclaration":955,"src":"745:23:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"id":565,"initialValue":{"arguments":[{"id":563,"name":"storageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":551,"src":"821:11:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":561,"name":"StorageSlot","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1050,"src":"794:11:12","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_StorageSlot_$1050_$","typeString":"type(library StorageSlot)"}},"id":562,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"806:14:12","memberName":"getUint256Slot","nodeType":"MemberAccess","referencedDeclaration":1005,"src":"794:26:12","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$returns$_t_struct$_Uint256Slot_$955_storage_ptr_$","typeString":"function (bytes32) pure returns (struct StorageSlot.Uint256Slot storage pointer)"}},"id":564,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"794:39:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"nodeType":"VariableDeclarationStatement","src":"745:88:12"},{"assignments":[567],"declarations":[{"constant":false,"id":567,"mutability":"mutable","name":"currentPhase","nameLocation":"851:12:12","nodeType":"VariableDeclaration","scope":586,"src":"843:20:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":566,"name":"uint256","nodeType":"ElementaryTypeName","src":"843:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":570,"initialValue":{"expression":{"id":568,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"866:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":569,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"memberLocation":"881:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":954,"src":"866:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"843:43:12"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":571,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"900:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":572,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"916:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"900:21:12","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":579,"nodeType":"IfStatement","src":"896:88:12","trueBody":{"errorCall":{"arguments":[{"id":575,"name":"currentPhase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":567,"src":"964:12:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":576,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"978:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":574,"name":"InitializationPhaseAlreadyReached","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":541,"src":"930:33:12","typeDescriptions":{"typeIdentifier":"t_function_error_pure$_t_uint256_$_t_uint256_$returns$__$","typeString":"function (uint256,uint256) pure"}},"id":577,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"930:54:12","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":578,"nodeType":"RevertStatement","src":"923:61:12"}},{"expression":{"id":584,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"expression":{"id":580,"name":"currentVersion","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":560,"src":"994:14:12","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot storage pointer"}},"id":582,"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"memberLocation":"1009:5:12","memberName":"value","nodeType":"MemberAccess","referencedDeclaration":954,"src":"994:20:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":583,"name":"phase","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":553,"src":"1017:5:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"994:28:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":585,"nodeType":"ExpressionStatement","src":"994:28:12"}]},"documentation":{"id":549,"nodeType":"StructuredDocumentation","src":"353:314:12","text":"@notice Sets the initialization phase during a storage-modifying proxy initialization function.\n @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\n @param storageSlot the storage slot where `phase` is stored.\n @param phase the initialization phase."},"id":587,"implemented":true,"kind":"function","modifiers":[],"name":"setPhase","nameLocation":"681:8:12","nodeType":"FunctionDefinition","parameters":{"id":554,"nodeType":"ParameterList","parameters":[{"constant":false,"id":551,"mutability":"mutable","name":"storageSlot","nameLocation":"698:11:12","nodeType":"VariableDeclaration","scope":587,"src":"690:19:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":550,"name":"bytes32","nodeType":"ElementaryTypeName","src":"690:7:12","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":553,"mutability":"mutable","name":"phase","nameLocation":"719:5:12","nodeType":"VariableDeclaration","scope":587,"src":"711:13:12","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":552,"name":"uint256","nodeType":"ElementaryTypeName","src":"711:7:12","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"689:36:12"},"returnParameters":{"id":555,"nodeType":"ParameterList","parameters":[],"src":"735:0:12"},"scope":588,"src":"672:357:12","stateMutability":"nonpayable","virtual":false,"visibility":"internal"}],"scope":589,"src":"319:712:12","usedErrors":[],"usedEvents":[]}],"src":"32:1000:12"},"id":12},"@openzeppelin/contracts/utils/Address.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Address.sol","exportedSymbols":{"Address":[918]},"id":919,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":590,"literals":["solidity","^","0.8",".1"],"nodeType":"PragmaDirective","src":"101:23:13"},{"abstract":false,"baseContracts":[],"canonicalName":"Address","contractDependencies":[],"contractKind":"library","documentation":{"id":591,"nodeType":"StructuredDocumentation","src":"126:67:13","text":" @dev Collection of functions related to the address type"},"fullyImplemented":true,"id":918,"linearizedBaseContracts":[918],"name":"Address","nameLocation":"202:7:13","nodeType":"ContractDefinition","nodes":[{"body":{"id":605,"nodeType":"Block","src":"1478:254:13","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"expression":{"id":599,"name":"account","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":594,"src":"1702:7:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":600,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1710:4:13","memberName":"code","nodeType":"MemberAccess","src":"1702:12:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":601,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1715:6:13","memberName":"length","nodeType":"MemberAccess","src":"1702:19:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":602,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1724:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1702:23:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":598,"id":604,"nodeType":"Return","src":"1695:30:13"}]},"documentation":{"id":592,"nodeType":"StructuredDocumentation","src":"216:1191:13","text":" @dev Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="},"id":606,"implemented":true,"kind":"function","modifiers":[],"name":"isContract","nameLocation":"1421:10:13","nodeType":"FunctionDefinition","parameters":{"id":595,"nodeType":"ParameterList","parameters":[{"constant":false,"id":594,"mutability":"mutable","name":"account","nameLocation":"1440:7:13","nodeType":"VariableDeclaration","scope":606,"src":"1432:15:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":593,"name":"address","nodeType":"ElementaryTypeName","src":"1432:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"1431:17:13"},"returnParameters":{"id":598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":597,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":606,"src":"1472:4:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":596,"name":"bool","nodeType":"ElementaryTypeName","src":"1472:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"1471:6:13"},"scope":918,"src":"1412:320:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":639,"nodeType":"Block","src":"2718:241:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":621,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":617,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"2744:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}],"id":616,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2736:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":615,"name":"address","nodeType":"ElementaryTypeName","src":"2736:7:13","typeDescriptions":{}}},"id":618,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2736:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":619,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2750:7:13","memberName":"balance","nodeType":"MemberAccess","src":"2736:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":620,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2761:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2736:31:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e6365","id":622,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2769:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""},"value":"Address: insufficient balance"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_5597a22abd0ef5332f8053862eb236db7590f17e2b93a53f63a103becfb561f9","typeString":"literal_string \"Address: insufficient balance\""}],"id":614,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2728:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":623,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":624,"nodeType":"ExpressionStatement","src":"2728:73:13"},{"assignments":[626,null],"declarations":[{"constant":false,"id":626,"mutability":"mutable","name":"success","nameLocation":"2818:7:13","nodeType":"VariableDeclaration","scope":639,"src":"2813:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":625,"name":"bool","nodeType":"ElementaryTypeName","src":"2813:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},null],"id":633,"initialValue":{"arguments":[{"hexValue":"","id":631,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2861:2:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""}],"expression":{"id":627,"name":"recipient","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":609,"src":"2831:9:13","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"id":628,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2841:4:13","memberName":"call","nodeType":"MemberAccess","src":"2831:14:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":630,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":629,"name":"amount","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":611,"src":"2853:6:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"2831:29:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":632,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"2812:52:13"},{"expression":{"arguments":[{"id":635,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":626,"src":"2882:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20756e61626c6520746f2073656e642076616c75652c20726563697069656e74206d61792068617665207265766572746564","id":636,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2891:60:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""},"value":"Address: unable to send value, recipient may have reverted"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_51ddaa38748c0a1144620fb5bfe8edab31ea437571ad591a7734bbfd0429aeae","typeString":"literal_string \"Address: unable to send value, recipient may have reverted\""}],"id":634,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2874:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":637,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2874:78:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":638,"nodeType":"ExpressionStatement","src":"2874:78:13"}]},"documentation":{"id":607,"nodeType":"StructuredDocumentation","src":"1738:904:13","text":" @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."},"id":640,"implemented":true,"kind":"function","modifiers":[],"name":"sendValue","nameLocation":"2656:9:13","nodeType":"FunctionDefinition","parameters":{"id":612,"nodeType":"ParameterList","parameters":[{"constant":false,"id":609,"mutability":"mutable","name":"recipient","nameLocation":"2682:9:13","nodeType":"VariableDeclaration","scope":640,"src":"2666:25:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"},"typeName":{"id":608,"name":"address","nodeType":"ElementaryTypeName","src":"2666:15:13","stateMutability":"payable","typeDescriptions":{"typeIdentifier":"t_address_payable","typeString":"address payable"}},"visibility":"internal"},{"constant":false,"id":611,"mutability":"mutable","name":"amount","nameLocation":"2701:6:13","nodeType":"VariableDeclaration","scope":640,"src":"2693:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":610,"name":"uint256","nodeType":"ElementaryTypeName","src":"2693:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2665:43:13"},"returnParameters":{"id":613,"nodeType":"ParameterList","parameters":[],"src":"2718:0:13"},"scope":918,"src":"2647:312:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":657,"nodeType":"Block","src":"3790:96:13","statements":[{"expression":{"arguments":[{"id":651,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":643,"src":"3829:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":652,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":645,"src":"3837:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":653,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3843:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c206661696c6564","id":654,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3846:32:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""},"value":"Address: low-level call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_stringliteral_24d7ab5d382116e64324f19950ca9340b8af1ddeb09a8d026e0a3c6a01dcc9df","typeString":"literal_string \"Address: low-level call failed\""}],"id":650,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"3807:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":655,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3807:72:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":649,"id":656,"nodeType":"Return","src":"3800:79:13"}]},"documentation":{"id":641,"nodeType":"StructuredDocumentation","src":"2965:731:13","text":" @dev Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"},"id":658,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"3710:12:13","nodeType":"FunctionDefinition","parameters":{"id":646,"nodeType":"ParameterList","parameters":[{"constant":false,"id":643,"mutability":"mutable","name":"target","nameLocation":"3731:6:13","nodeType":"VariableDeclaration","scope":658,"src":"3723:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":642,"name":"address","nodeType":"ElementaryTypeName","src":"3723:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":645,"mutability":"mutable","name":"data","nameLocation":"3752:4:13","nodeType":"VariableDeclaration","scope":658,"src":"3739:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":644,"name":"bytes","nodeType":"ElementaryTypeName","src":"3739:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3722:35:13"},"returnParameters":{"id":649,"nodeType":"ParameterList","parameters":[{"constant":false,"id":648,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":658,"src":"3776:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":647,"name":"bytes","nodeType":"ElementaryTypeName","src":"3776:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3775:14:13"},"scope":918,"src":"3701:185:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":677,"nodeType":"Block","src":"4255:76:13","statements":[{"expression":{"arguments":[{"id":671,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":661,"src":"4294:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":672,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":663,"src":"4302:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"30","id":673,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4308:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},{"id":674,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":665,"src":"4311:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":670,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"4272:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":675,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:52:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":669,"id":676,"nodeType":"Return","src":"4265:59:13"}]},"documentation":{"id":659,"nodeType":"StructuredDocumentation","src":"3892:211:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":678,"implemented":true,"kind":"function","modifiers":[],"name":"functionCall","nameLocation":"4117:12:13","nodeType":"FunctionDefinition","parameters":{"id":666,"nodeType":"ParameterList","parameters":[{"constant":false,"id":661,"mutability":"mutable","name":"target","nameLocation":"4147:6:13","nodeType":"VariableDeclaration","scope":678,"src":"4139:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":660,"name":"address","nodeType":"ElementaryTypeName","src":"4139:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":663,"mutability":"mutable","name":"data","nameLocation":"4176:4:13","nodeType":"VariableDeclaration","scope":678,"src":"4163:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":662,"name":"bytes","nodeType":"ElementaryTypeName","src":"4163:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":665,"mutability":"mutable","name":"errorMessage","nameLocation":"4204:12:13","nodeType":"VariableDeclaration","scope":678,"src":"4190:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":664,"name":"string","nodeType":"ElementaryTypeName","src":"4190:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"4129:93:13"},"returnParameters":{"id":669,"nodeType":"ParameterList","parameters":[{"constant":false,"id":668,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":678,"src":"4241:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":667,"name":"bytes","nodeType":"ElementaryTypeName","src":"4241:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4240:14:13"},"scope":918,"src":"4108:223:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":697,"nodeType":"Block","src":"4806:111:13","statements":[{"expression":{"arguments":[{"id":691,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":681,"src":"4845:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":692,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":683,"src":"4853:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":693,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":685,"src":"4859:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564","id":694,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4866:43:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""},"value":"Address: low-level call with value failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_stringliteral_88a4a0b5e975840320a0475d4027005235904fdb5ece94df156f3d717cb2dbfc","typeString":"literal_string \"Address: low-level call with value failed\""}],"id":690,"name":"functionCallWithValue","nodeType":"Identifier","overloadedDeclarations":[698,742],"referencedDeclaration":742,"src":"4823:21:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_uint256_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,uint256,string memory) returns (bytes memory)"}},"id":695,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4823:87:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":689,"id":696,"nodeType":"Return","src":"4816:94:13"}]},"documentation":{"id":679,"nodeType":"StructuredDocumentation","src":"4337:351:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"},"id":698,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"4702:21:13","nodeType":"FunctionDefinition","parameters":{"id":686,"nodeType":"ParameterList","parameters":[{"constant":false,"id":681,"mutability":"mutable","name":"target","nameLocation":"4732:6:13","nodeType":"VariableDeclaration","scope":698,"src":"4724:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":680,"name":"address","nodeType":"ElementaryTypeName","src":"4724:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":683,"mutability":"mutable","name":"data","nameLocation":"4753:4:13","nodeType":"VariableDeclaration","scope":698,"src":"4740:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":682,"name":"bytes","nodeType":"ElementaryTypeName","src":"4740:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":685,"mutability":"mutable","name":"value","nameLocation":"4767:5:13","nodeType":"VariableDeclaration","scope":698,"src":"4759:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":684,"name":"uint256","nodeType":"ElementaryTypeName","src":"4759:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"4723:50:13"},"returnParameters":{"id":689,"nodeType":"ParameterList","parameters":[{"constant":false,"id":688,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":698,"src":"4792:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":687,"name":"bytes","nodeType":"ElementaryTypeName","src":"4792:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4791:14:13"},"scope":918,"src":"4693:224:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":741,"nodeType":"Block","src":"5344:267:13","statements":[{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":719,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"arguments":[{"id":715,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5370:4:13","typeDescriptions":{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_Address_$918","typeString":"library Address"}],"id":714,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5362:7:13","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":713,"name":"address","nodeType":"ElementaryTypeName","src":"5362:7:13","typeDescriptions":{}}},"id":716,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5362:13:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":717,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5376:7:13","memberName":"balance","nodeType":"MemberAccess","src":"5362:21:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"id":718,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"5387:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5362:30:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c","id":720,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5394:40:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""},"value":"Address: insufficient balance for call"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c","typeString":"literal_string \"Address: insufficient balance for call\""}],"id":712,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"5354:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":721,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5354:81:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":722,"nodeType":"ExpressionStatement","src":"5354:81:13"},{"assignments":[724,726],"declarations":[{"constant":false,"id":724,"mutability":"mutable","name":"success","nameLocation":"5451:7:13","nodeType":"VariableDeclaration","scope":741,"src":"5446:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":723,"name":"bool","nodeType":"ElementaryTypeName","src":"5446:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":726,"mutability":"mutable","name":"returndata","nameLocation":"5473:10:13","nodeType":"VariableDeclaration","scope":741,"src":"5460:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":725,"name":"bytes","nodeType":"ElementaryTypeName","src":"5460:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":733,"initialValue":{"arguments":[{"id":731,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":703,"src":"5513:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":727,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5487:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":728,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5494:4:13","memberName":"call","nodeType":"MemberAccess","src":"5487:11:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"names":["value"],"nodeType":"FunctionCallOptions","options":[{"id":729,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":705,"src":"5506:5:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"src":"5487:25:13","typeDescriptions":{"typeIdentifier":"t_function_barecall_payable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$value","typeString":"function (bytes memory) payable returns (bool,bytes memory)"}},"id":732,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5487:31:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"5445:73:13"},{"expression":{"arguments":[{"id":735,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":701,"src":"5562:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":736,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":724,"src":"5570:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":737,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":726,"src":"5579:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":738,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":707,"src":"5591:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":734,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"5535:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":739,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5535:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":711,"id":740,"nodeType":"Return","src":"5528:76:13"}]},"documentation":{"id":699,"nodeType":"StructuredDocumentation","src":"4923:237:13","text":" @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"},"id":742,"implemented":true,"kind":"function","modifiers":[],"name":"functionCallWithValue","nameLocation":"5174:21:13","nodeType":"FunctionDefinition","parameters":{"id":708,"nodeType":"ParameterList","parameters":[{"constant":false,"id":701,"mutability":"mutable","name":"target","nameLocation":"5213:6:13","nodeType":"VariableDeclaration","scope":742,"src":"5205:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":700,"name":"address","nodeType":"ElementaryTypeName","src":"5205:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":703,"mutability":"mutable","name":"data","nameLocation":"5242:4:13","nodeType":"VariableDeclaration","scope":742,"src":"5229:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":702,"name":"bytes","nodeType":"ElementaryTypeName","src":"5229:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":705,"mutability":"mutable","name":"value","nameLocation":"5264:5:13","nodeType":"VariableDeclaration","scope":742,"src":"5256:13:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":704,"name":"uint256","nodeType":"ElementaryTypeName","src":"5256:7:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":707,"mutability":"mutable","name":"errorMessage","nameLocation":"5293:12:13","nodeType":"VariableDeclaration","scope":742,"src":"5279:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":706,"name":"string","nodeType":"ElementaryTypeName","src":"5279:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"5195:116:13"},"returnParameters":{"id":711,"nodeType":"ParameterList","parameters":[{"constant":false,"id":710,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":742,"src":"5330:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":709,"name":"bytes","nodeType":"ElementaryTypeName","src":"5330:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5329:14:13"},"scope":918,"src":"5165:446:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":758,"nodeType":"Block","src":"5888:97:13","statements":[{"expression":{"arguments":[{"id":753,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":745,"src":"5924:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":754,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":747,"src":"5932:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c207374617469632063616c6c206661696c6564","id":755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5938:39:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""},"value":"Address: low-level static call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_90ec82aa826a536a4cbfae44ecfa384680faa9a4b77344bce96aa761ad904df0","typeString":"literal_string \"Address: low-level static call failed\""}],"id":752,"name":"functionStaticCall","nodeType":"Identifier","overloadedDeclarations":[759,788],"referencedDeclaration":788,"src":"5905:18:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) view returns (bytes memory)"}},"id":756,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5905:73:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":751,"id":757,"nodeType":"Return","src":"5898:80:13"}]},"documentation":{"id":743,"nodeType":"StructuredDocumentation","src":"5617:166:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":759,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"5797:18:13","nodeType":"FunctionDefinition","parameters":{"id":748,"nodeType":"ParameterList","parameters":[{"constant":false,"id":745,"mutability":"mutable","name":"target","nameLocation":"5824:6:13","nodeType":"VariableDeclaration","scope":759,"src":"5816:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":744,"name":"address","nodeType":"ElementaryTypeName","src":"5816:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":747,"mutability":"mutable","name":"data","nameLocation":"5845:4:13","nodeType":"VariableDeclaration","scope":759,"src":"5832:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":746,"name":"bytes","nodeType":"ElementaryTypeName","src":"5832:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5815:35:13"},"returnParameters":{"id":751,"nodeType":"ParameterList","parameters":[{"constant":false,"id":750,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":759,"src":"5874:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":749,"name":"bytes","nodeType":"ElementaryTypeName","src":"5874:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"5873:14:13"},"scope":918,"src":"5788:197:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":787,"nodeType":"Block","src":"6327:168:13","statements":[{"assignments":[772,774],"declarations":[{"constant":false,"id":772,"mutability":"mutable","name":"success","nameLocation":"6343:7:13","nodeType":"VariableDeclaration","scope":787,"src":"6338:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":771,"name":"bool","nodeType":"ElementaryTypeName","src":"6338:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":774,"mutability":"mutable","name":"returndata","nameLocation":"6365:10:13","nodeType":"VariableDeclaration","scope":787,"src":"6352:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":773,"name":"bytes","nodeType":"ElementaryTypeName","src":"6352:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":779,"initialValue":{"arguments":[{"id":777,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":764,"src":"6397:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":775,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6379:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":776,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"6386:10:13","memberName":"staticcall","nodeType":"MemberAccess","src":"6379:17:13","typeDescriptions":{"typeIdentifier":"t_function_barestaticcall_view$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) view returns (bool,bytes memory)"}},"id":778,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6379:23:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"6337:65:13"},{"expression":{"arguments":[{"id":781,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":762,"src":"6446:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":782,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":772,"src":"6454:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":783,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":774,"src":"6463:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":784,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":766,"src":"6475:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":780,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"6419:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":785,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6419:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":770,"id":786,"nodeType":"Return","src":"6412:76:13"}]},"documentation":{"id":760,"nodeType":"StructuredDocumentation","src":"5991:173:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"},"id":788,"implemented":true,"kind":"function","modifiers":[],"name":"functionStaticCall","nameLocation":"6178:18:13","nodeType":"FunctionDefinition","parameters":{"id":767,"nodeType":"ParameterList","parameters":[{"constant":false,"id":762,"mutability":"mutable","name":"target","nameLocation":"6214:6:13","nodeType":"VariableDeclaration","scope":788,"src":"6206:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":761,"name":"address","nodeType":"ElementaryTypeName","src":"6206:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":764,"mutability":"mutable","name":"data","nameLocation":"6243:4:13","nodeType":"VariableDeclaration","scope":788,"src":"6230:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":763,"name":"bytes","nodeType":"ElementaryTypeName","src":"6230:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":766,"mutability":"mutable","name":"errorMessage","nameLocation":"6271:12:13","nodeType":"VariableDeclaration","scope":788,"src":"6257:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":765,"name":"string","nodeType":"ElementaryTypeName","src":"6257:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"6196:93:13"},"returnParameters":{"id":770,"nodeType":"ParameterList","parameters":[{"constant":false,"id":769,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":788,"src":"6313:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":768,"name":"bytes","nodeType":"ElementaryTypeName","src":"6313:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6312:14:13"},"scope":918,"src":"6169:326:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":804,"nodeType":"Block","src":"6771:101:13","statements":[{"expression":{"arguments":[{"id":799,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":791,"src":"6809:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":800,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":793,"src":"6817:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"hexValue":"416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564","id":801,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"6823:41:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""},"value":"Address: low-level delegate call failed"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_stringliteral_9fdcd12e4b726339b32a442b0a448365d5d85c96b2d2cff917b4f66c63110398","typeString":"literal_string \"Address: low-level delegate call failed\""}],"id":798,"name":"functionDelegateCall","nodeType":"Identifier","overloadedDeclarations":[805,834],"referencedDeclaration":834,"src":"6788:20:13","typeDescriptions":{"typeIdentifier":"t_function_internal_nonpayable$_t_address_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bytes memory,string memory) returns (bytes memory)"}},"id":802,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6788:77:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":797,"id":803,"nodeType":"Return","src":"6781:84:13"}]},"documentation":{"id":789,"nodeType":"StructuredDocumentation","src":"6501:168:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":805,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"6683:20:13","nodeType":"FunctionDefinition","parameters":{"id":794,"nodeType":"ParameterList","parameters":[{"constant":false,"id":791,"mutability":"mutable","name":"target","nameLocation":"6712:6:13","nodeType":"VariableDeclaration","scope":805,"src":"6704:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":790,"name":"address","nodeType":"ElementaryTypeName","src":"6704:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":793,"mutability":"mutable","name":"data","nameLocation":"6733:4:13","nodeType":"VariableDeclaration","scope":805,"src":"6720:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":792,"name":"bytes","nodeType":"ElementaryTypeName","src":"6720:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6703:35:13"},"returnParameters":{"id":797,"nodeType":"ParameterList","parameters":[{"constant":false,"id":796,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":805,"src":"6757:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":795,"name":"bytes","nodeType":"ElementaryTypeName","src":"6757:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"6756:14:13"},"scope":918,"src":"6674:198:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":833,"nodeType":"Block","src":"7213:170:13","statements":[{"assignments":[818,820],"declarations":[{"constant":false,"id":818,"mutability":"mutable","name":"success","nameLocation":"7229:7:13","nodeType":"VariableDeclaration","scope":833,"src":"7224:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":817,"name":"bool","nodeType":"ElementaryTypeName","src":"7224:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":820,"mutability":"mutable","name":"returndata","nameLocation":"7251:10:13","nodeType":"VariableDeclaration","scope":833,"src":"7238:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":819,"name":"bytes","nodeType":"ElementaryTypeName","src":"7238:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":825,"initialValue":{"arguments":[{"id":823,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":810,"src":"7285:4:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":821,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7265:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7272:12:13","memberName":"delegatecall","nodeType":"MemberAccess","src":"7265:19:13","typeDescriptions":{"typeIdentifier":"t_function_baredelegatecall_nonpayable$_t_bytes_memory_ptr_$returns$_t_bool_$_t_bytes_memory_ptr_$","typeString":"function (bytes memory) returns (bool,bytes memory)"}},"id":824,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7265:25:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_bool_$_t_bytes_memory_ptr_$","typeString":"tuple(bool,bytes memory)"}},"nodeType":"VariableDeclarationStatement","src":"7223:67:13"},{"expression":{"arguments":[{"id":827,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":808,"src":"7334:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":828,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":818,"src":"7342:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"id":829,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":820,"src":"7351:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":830,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":812,"src":"7363:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":826,"name":"verifyCallResultFromTarget","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":873,"src":"7307:26:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$_t_bool_$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$_t_bytes_memory_ptr_$","typeString":"function (address,bool,bytes memory,string memory) view returns (bytes memory)"}},"id":831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7307:69:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":816,"id":832,"nodeType":"Return","src":"7300:76:13"}]},"documentation":{"id":806,"nodeType":"StructuredDocumentation","src":"6878:175:13","text":" @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"},"id":834,"implemented":true,"kind":"function","modifiers":[],"name":"functionDelegateCall","nameLocation":"7067:20:13","nodeType":"FunctionDefinition","parameters":{"id":813,"nodeType":"ParameterList","parameters":[{"constant":false,"id":808,"mutability":"mutable","name":"target","nameLocation":"7105:6:13","nodeType":"VariableDeclaration","scope":834,"src":"7097:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":807,"name":"address","nodeType":"ElementaryTypeName","src":"7097:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":810,"mutability":"mutable","name":"data","nameLocation":"7134:4:13","nodeType":"VariableDeclaration","scope":834,"src":"7121:17:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":809,"name":"bytes","nodeType":"ElementaryTypeName","src":"7121:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":812,"mutability":"mutable","name":"errorMessage","nameLocation":"7162:12:13","nodeType":"VariableDeclaration","scope":834,"src":"7148:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":811,"name":"string","nodeType":"ElementaryTypeName","src":"7148:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7087:93:13"},"returnParameters":{"id":816,"nodeType":"ParameterList","parameters":[{"constant":false,"id":815,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":834,"src":"7199:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":814,"name":"bytes","nodeType":"ElementaryTypeName","src":"7199:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7198:14:13"},"scope":918,"src":"7058:325:13","stateMutability":"nonpayable","virtual":false,"visibility":"internal"},{"body":{"id":872,"nodeType":"Block","src":"7865:434:13","statements":[{"condition":{"id":848,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":839,"src":"7879:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":870,"nodeType":"Block","src":"8235:58:13","statements":[{"expression":{"arguments":[{"id":866,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8257:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":867,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":843,"src":"8269:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":865,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"8249:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":868,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8249:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":869,"nodeType":"ExpressionStatement","src":"8249:33:13"}]},"id":871,"nodeType":"IfStatement","src":"7875:418:13","trueBody":{"id":864,"nodeType":"Block","src":"7888:341:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":849,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"7906:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":850,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7917:6:13","memberName":"length","nodeType":"MemberAccess","src":"7906:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":851,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7927:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"7906:22:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":861,"nodeType":"IfStatement","src":"7902:286:13","trueBody":{"id":860,"nodeType":"Block","src":"7930:258:13","statements":[{"expression":{"arguments":[{"arguments":[{"id":855,"name":"target","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":837,"src":"8132:6:13","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":854,"name":"isContract","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":606,"src":"8121:10:13","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_address_$returns$_t_bool_$","typeString":"function (address) view returns (bool)"}},"id":856,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8121:18:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374","id":857,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"8141:31:13","typeDescriptions":{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""},"value":"Address: call to non-contract"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad","typeString":"literal_string \"Address: call to non-contract\""}],"id":853,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"8113:7:13","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":858,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8113:60:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":859,"nodeType":"ExpressionStatement","src":"8113:60:13"}]}},{"expression":{"id":862,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":841,"src":"8208:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":847,"id":863,"nodeType":"Return","src":"8201:17:13"}]}}]},"documentation":{"id":835,"nodeType":"StructuredDocumentation","src":"7389:277:13","text":" @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"},"id":873,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResultFromTarget","nameLocation":"7680:26:13","nodeType":"FunctionDefinition","parameters":{"id":844,"nodeType":"ParameterList","parameters":[{"constant":false,"id":837,"mutability":"mutable","name":"target","nameLocation":"7724:6:13","nodeType":"VariableDeclaration","scope":873,"src":"7716:14:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":836,"name":"address","nodeType":"ElementaryTypeName","src":"7716:7:13","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":839,"mutability":"mutable","name":"success","nameLocation":"7745:7:13","nodeType":"VariableDeclaration","scope":873,"src":"7740:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":838,"name":"bool","nodeType":"ElementaryTypeName","src":"7740:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":841,"mutability":"mutable","name":"returndata","nameLocation":"7775:10:13","nodeType":"VariableDeclaration","scope":873,"src":"7762:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":840,"name":"bytes","nodeType":"ElementaryTypeName","src":"7762:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":843,"mutability":"mutable","name":"errorMessage","nameLocation":"7809:12:13","nodeType":"VariableDeclaration","scope":873,"src":"7795:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":842,"name":"string","nodeType":"ElementaryTypeName","src":"7795:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"7706:121:13"},"returnParameters":{"id":847,"nodeType":"ParameterList","parameters":[{"constant":false,"id":846,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":873,"src":"7851:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":845,"name":"bytes","nodeType":"ElementaryTypeName","src":"7851:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7850:14:13"},"scope":918,"src":"7671:628:13","stateMutability":"view","virtual":false,"visibility":"internal"},{"body":{"id":896,"nodeType":"Block","src":"8680:135:13","statements":[{"condition":{"id":885,"name":"success","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":876,"src":"8694:7:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":894,"nodeType":"Block","src":"8751:58:13","statements":[{"expression":{"arguments":[{"id":890,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"8773:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":891,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":880,"src":"8785:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":889,"name":"_revert","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":917,"src":"8765:7:13","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes_memory_ptr_$_t_string_memory_ptr_$returns$__$","typeString":"function (bytes memory,string memory) pure"}},"id":892,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8765:33:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":893,"nodeType":"ExpressionStatement","src":"8765:33:13"}]},"id":895,"nodeType":"IfStatement","src":"8690:119:13","trueBody":{"id":888,"nodeType":"Block","src":"8703:42:13","statements":[{"expression":{"id":886,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":878,"src":"8724:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"functionReturnParameters":884,"id":887,"nodeType":"Return","src":"8717:17:13"}]}}]},"documentation":{"id":874,"nodeType":"StructuredDocumentation","src":"8305:210:13","text":" @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"},"id":897,"implemented":true,"kind":"function","modifiers":[],"name":"verifyCallResult","nameLocation":"8529:16:13","nodeType":"FunctionDefinition","parameters":{"id":881,"nodeType":"ParameterList","parameters":[{"constant":false,"id":876,"mutability":"mutable","name":"success","nameLocation":"8560:7:13","nodeType":"VariableDeclaration","scope":897,"src":"8555:12:13","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":875,"name":"bool","nodeType":"ElementaryTypeName","src":"8555:4:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"},{"constant":false,"id":878,"mutability":"mutable","name":"returndata","nameLocation":"8590:10:13","nodeType":"VariableDeclaration","scope":897,"src":"8577:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":877,"name":"bytes","nodeType":"ElementaryTypeName","src":"8577:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":880,"mutability":"mutable","name":"errorMessage","nameLocation":"8624:12:13","nodeType":"VariableDeclaration","scope":897,"src":"8610:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":879,"name":"string","nodeType":"ElementaryTypeName","src":"8610:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8545:97:13"},"returnParameters":{"id":884,"nodeType":"ParameterList","parameters":[{"constant":false,"id":883,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":897,"src":"8666:12:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":882,"name":"bytes","nodeType":"ElementaryTypeName","src":"8666:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8665:14:13"},"scope":918,"src":"8520:295:13","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":916,"nodeType":"Block","src":"8904:457:13","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":907,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":904,"name":"returndata","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":899,"src":"8980:10:13","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":905,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"8991:6:13","memberName":"length","nodeType":"MemberAccess","src":"8980:17:13","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":906,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9000:1:13","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8980:21:13","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":914,"nodeType":"Block","src":"9310:45:13","statements":[{"expression":{"arguments":[{"id":911,"name":"errorMessage","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":901,"src":"9331:12:13","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":910,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"9324:6:13","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":912,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9324:20:13","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":913,"nodeType":"ExpressionStatement","src":"9324:20:13"}]},"id":915,"nodeType":"IfStatement","src":"8976:379:13","trueBody":{"id":909,"nodeType":"Block","src":"9003:301:13","statements":[{"AST":{"nativeSrc":"9161:133:13","nodeType":"YulBlock","src":"9161:133:13","statements":[{"nativeSrc":"9179:40:13","nodeType":"YulVariableDeclaration","src":"9179:40:13","value":{"arguments":[{"name":"returndata","nativeSrc":"9208:10:13","nodeType":"YulIdentifier","src":"9208:10:13"}],"functionName":{"name":"mload","nativeSrc":"9202:5:13","nodeType":"YulIdentifier","src":"9202:5:13"},"nativeSrc":"9202:17:13","nodeType":"YulFunctionCall","src":"9202:17:13"},"variables":[{"name":"returndata_size","nativeSrc":"9183:15:13","nodeType":"YulTypedName","src":"9183:15:13","type":""}]},{"expression":{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"9247:2:13","nodeType":"YulLiteral","src":"9247:2:13","type":"","value":"32"},{"name":"returndata","nativeSrc":"9251:10:13","nodeType":"YulIdentifier","src":"9251:10:13"}],"functionName":{"name":"add","nativeSrc":"9243:3:13","nodeType":"YulIdentifier","src":"9243:3:13"},"nativeSrc":"9243:19:13","nodeType":"YulFunctionCall","src":"9243:19:13"},{"name":"returndata_size","nativeSrc":"9264:15:13","nodeType":"YulIdentifier","src":"9264:15:13"}],"functionName":{"name":"revert","nativeSrc":"9236:6:13","nodeType":"YulIdentifier","src":"9236:6:13"},"nativeSrc":"9236:44:13","nodeType":"YulFunctionCall","src":"9236:44:13"},"nativeSrc":"9236:44:13","nodeType":"YulExpressionStatement","src":"9236:44:13"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":899,"isOffset":false,"isSlot":false,"src":"9208:10:13","valueSize":1},{"declaration":899,"isOffset":false,"isSlot":false,"src":"9251:10:13","valueSize":1}],"id":908,"nodeType":"InlineAssembly","src":"9152:142:13"}]}}]},"id":917,"implemented":true,"kind":"function","modifiers":[],"name":"_revert","nameLocation":"8830:7:13","nodeType":"FunctionDefinition","parameters":{"id":902,"nodeType":"ParameterList","parameters":[{"constant":false,"id":899,"mutability":"mutable","name":"returndata","nameLocation":"8851:10:13","nodeType":"VariableDeclaration","scope":917,"src":"8838:23:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":898,"name":"bytes","nodeType":"ElementaryTypeName","src":"8838:5:13","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"},{"constant":false,"id":901,"mutability":"mutable","name":"errorMessage","nameLocation":"8877:12:13","nodeType":"VariableDeclaration","scope":917,"src":"8863:26:13","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":900,"name":"string","nodeType":"ElementaryTypeName","src":"8863:6:13","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"8837:53:13"},"returnParameters":{"id":903,"nodeType":"ParameterList","parameters":[],"src":"8904:0:13"},"scope":918,"src":"8821:540:13","stateMutability":"pure","virtual":false,"visibility":"private"}],"scope":919,"src":"194:9169:13","usedErrors":[],"usedEvents":[]}],"src":"101:9263:13"},"id":13},"@openzeppelin/contracts/utils/Context.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Context.sol","exportedSymbols":{"Context":[940]},"id":941,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":920,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"86:23:14"},{"abstract":true,"baseContracts":[],"canonicalName":"Context","contractDependencies":[],"contractKind":"contract","documentation":{"id":921,"nodeType":"StructuredDocumentation","src":"111:496:14","text":" @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."},"fullyImplemented":true,"id":940,"linearizedBaseContracts":[940],"name":"Context","nameLocation":"626:7:14","nodeType":"ContractDefinition","nodes":[{"body":{"id":929,"nodeType":"Block","src":"702:34:14","statements":[{"expression":{"expression":{"id":926,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"719:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"723:6:14","memberName":"sender","nodeType":"MemberAccess","src":"719:10:14","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":925,"id":928,"nodeType":"Return","src":"712:17:14"}]},"id":930,"implemented":true,"kind":"function","modifiers":[],"name":"_msgSender","nameLocation":"649:10:14","nodeType":"FunctionDefinition","parameters":{"id":922,"nodeType":"ParameterList","parameters":[],"src":"659:2:14"},"returnParameters":{"id":925,"nodeType":"ParameterList","parameters":[{"constant":false,"id":924,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":930,"src":"693:7:14","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":923,"name":"address","nodeType":"ElementaryTypeName","src":"693:7:14","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"692:9:14"},"scope":940,"src":"640:96:14","stateMutability":"view","virtual":true,"visibility":"internal"},{"body":{"id":938,"nodeType":"Block","src":"809:32:14","statements":[{"expression":{"expression":{"id":935,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"826:3:14","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":936,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"830:4:14","memberName":"data","nodeType":"MemberAccess","src":"826:8:14","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}},"functionReturnParameters":934,"id":937,"nodeType":"Return","src":"819:15:14"}]},"id":939,"implemented":true,"kind":"function","modifiers":[],"name":"_msgData","nameLocation":"751:8:14","nodeType":"FunctionDefinition","parameters":{"id":931,"nodeType":"ParameterList","parameters":[],"src":"759:2:14"},"returnParameters":{"id":934,"nodeType":"ParameterList","parameters":[{"constant":false,"id":933,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":939,"src":"793:14:14","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":932,"name":"bytes","nodeType":"ElementaryTypeName","src":"793:5:14","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"792:16:14"},"scope":940,"src":"742:99:14","stateMutability":"view","virtual":true,"visibility":"internal"}],"scope":941,"src":"608:235:14","usedErrors":[],"usedEvents":[]}],"src":"86:758:14"},"id":14},"@openzeppelin/contracts/utils/StorageSlot.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/StorageSlot.sol","exportedSymbols":{"StorageSlot":[1050]},"id":1051,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":942,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"193:23:15"},{"abstract":false,"baseContracts":[],"canonicalName":"StorageSlot","contractDependencies":[],"contractKind":"library","documentation":{"id":943,"nodeType":"StructuredDocumentation","src":"218:1201:15","text":" @dev Library for reading and writing primitive types to specific storage slots.\n Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n This library helps with reading and writing to such slots without the need for inline assembly.\n The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n Example usage to set ERC1967 implementation slot:\n ```solidity\n contract ERC1967 {\n     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n     function _getImplementation() internal view returns (address) {\n         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n     }\n     function _setImplementation(address newImplementation) internal {\n         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");\n         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n     }\n }\n ```\n _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\n _Available since v4.9 for `string`, `bytes`._"},"fullyImplemented":true,"id":1050,"linearizedBaseContracts":[1050],"name":"StorageSlot","nameLocation":"1428:11:15","nodeType":"ContractDefinition","nodes":[{"canonicalName":"StorageSlot.AddressSlot","id":946,"members":[{"constant":false,"id":945,"mutability":"mutable","name":"value","nameLocation":"1483:5:15","nodeType":"VariableDeclaration","scope":946,"src":"1475:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":944,"name":"address","nodeType":"ElementaryTypeName","src":"1475:7:15","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"name":"AddressSlot","nameLocation":"1453:11:15","nodeType":"StructDefinition","scope":1050,"src":"1446:49:15","visibility":"public"},{"canonicalName":"StorageSlot.BooleanSlot","id":949,"members":[{"constant":false,"id":948,"mutability":"mutable","name":"value","nameLocation":"1535:5:15","nodeType":"VariableDeclaration","scope":949,"src":"1530:10:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":947,"name":"bool","nodeType":"ElementaryTypeName","src":"1530:4:15","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"name":"BooleanSlot","nameLocation":"1508:11:15","nodeType":"StructDefinition","scope":1050,"src":"1501:46:15","visibility":"public"},{"canonicalName":"StorageSlot.Bytes32Slot","id":952,"members":[{"constant":false,"id":951,"mutability":"mutable","name":"value","nameLocation":"1590:5:15","nodeType":"VariableDeclaration","scope":952,"src":"1582:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":950,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1582:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"name":"Bytes32Slot","nameLocation":"1560:11:15","nodeType":"StructDefinition","scope":1050,"src":"1553:49:15","visibility":"public"},{"canonicalName":"StorageSlot.Uint256Slot","id":955,"members":[{"constant":false,"id":954,"mutability":"mutable","name":"value","nameLocation":"1645:5:15","nodeType":"VariableDeclaration","scope":955,"src":"1637:13:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":953,"name":"uint256","nodeType":"ElementaryTypeName","src":"1637:7:15","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"name":"Uint256Slot","nameLocation":"1615:11:15","nodeType":"StructDefinition","scope":1050,"src":"1608:49:15","visibility":"public"},{"canonicalName":"StorageSlot.StringSlot","id":958,"members":[{"constant":false,"id":957,"mutability":"mutable","name":"value","nameLocation":"1698:5:15","nodeType":"VariableDeclaration","scope":958,"src":"1691:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":956,"name":"string","nodeType":"ElementaryTypeName","src":"1691:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"name":"StringSlot","nameLocation":"1670:10:15","nodeType":"StructDefinition","scope":1050,"src":"1663:47:15","visibility":"public"},{"canonicalName":"StorageSlot.BytesSlot","id":961,"members":[{"constant":false,"id":960,"mutability":"mutable","name":"value","nameLocation":"1749:5:15","nodeType":"VariableDeclaration","scope":961,"src":"1743:11:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":959,"name":"bytes","nodeType":"ElementaryTypeName","src":"1743:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"name":"BytesSlot","nameLocation":"1723:9:15","nodeType":"StructDefinition","scope":1050,"src":"1716:45:15","visibility":"public"},{"body":{"id":971,"nodeType":"Block","src":"1943:106:15","statements":[{"AST":{"nativeSrc":"2005:38:15","nodeType":"YulBlock","src":"2005:38:15","statements":[{"nativeSrc":"2019:14:15","nodeType":"YulAssignment","src":"2019:14:15","value":{"name":"slot","nativeSrc":"2029:4:15","nodeType":"YulIdentifier","src":"2029:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2019:6:15","nodeType":"YulIdentifier","src":"2019:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":968,"isOffset":false,"isSlot":true,"src":"2019:6:15","suffix":"slot","valueSize":1},{"declaration":964,"isOffset":false,"isSlot":false,"src":"2029:4:15","valueSize":1}],"id":970,"nodeType":"InlineAssembly","src":"1996:47:15"}]},"documentation":{"id":962,"nodeType":"StructuredDocumentation","src":"1767:87:15","text":" @dev Returns an `AddressSlot` with member `value` located at `slot`."},"id":972,"implemented":true,"kind":"function","modifiers":[],"name":"getAddressSlot","nameLocation":"1868:14:15","nodeType":"FunctionDefinition","parameters":{"id":965,"nodeType":"ParameterList","parameters":[{"constant":false,"id":964,"mutability":"mutable","name":"slot","nameLocation":"1891:4:15","nodeType":"VariableDeclaration","scope":972,"src":"1883:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":963,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1883:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1882:14:15"},"returnParameters":{"id":969,"nodeType":"ParameterList","parameters":[{"constant":false,"id":968,"mutability":"mutable","name":"r","nameLocation":"1940:1:15","nodeType":"VariableDeclaration","scope":972,"src":"1920:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$946_storage_ptr","typeString":"struct StorageSlot.AddressSlot"},"typeName":{"id":967,"nodeType":"UserDefinedTypeName","pathNode":{"id":966,"name":"AddressSlot","nameLocations":["1920:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":946,"src":"1920:11:15"},"referencedDeclaration":946,"src":"1920:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_AddressSlot_$946_storage_ptr","typeString":"struct StorageSlot.AddressSlot"}},"visibility":"internal"}],"src":"1919:23:15"},"scope":1050,"src":"1859:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":982,"nodeType":"Block","src":"2231:106:15","statements":[{"AST":{"nativeSrc":"2293:38:15","nodeType":"YulBlock","src":"2293:38:15","statements":[{"nativeSrc":"2307:14:15","nodeType":"YulAssignment","src":"2307:14:15","value":{"name":"slot","nativeSrc":"2317:4:15","nodeType":"YulIdentifier","src":"2317:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2307:6:15","nodeType":"YulIdentifier","src":"2307:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":979,"isOffset":false,"isSlot":true,"src":"2307:6:15","suffix":"slot","valueSize":1},{"declaration":975,"isOffset":false,"isSlot":false,"src":"2317:4:15","valueSize":1}],"id":981,"nodeType":"InlineAssembly","src":"2284:47:15"}]},"documentation":{"id":973,"nodeType":"StructuredDocumentation","src":"2055:87:15","text":" @dev Returns an `BooleanSlot` with member `value` located at `slot`."},"id":983,"implemented":true,"kind":"function","modifiers":[],"name":"getBooleanSlot","nameLocation":"2156:14:15","nodeType":"FunctionDefinition","parameters":{"id":976,"nodeType":"ParameterList","parameters":[{"constant":false,"id":975,"mutability":"mutable","name":"slot","nameLocation":"2179:4:15","nodeType":"VariableDeclaration","scope":983,"src":"2171:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":974,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2171:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2170:14:15"},"returnParameters":{"id":980,"nodeType":"ParameterList","parameters":[{"constant":false,"id":979,"mutability":"mutable","name":"r","nameLocation":"2228:1:15","nodeType":"VariableDeclaration","scope":983,"src":"2208:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$949_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"},"typeName":{"id":978,"nodeType":"UserDefinedTypeName","pathNode":{"id":977,"name":"BooleanSlot","nameLocations":["2208:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":949,"src":"2208:11:15"},"referencedDeclaration":949,"src":"2208:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_BooleanSlot_$949_storage_ptr","typeString":"struct StorageSlot.BooleanSlot"}},"visibility":"internal"}],"src":"2207:23:15"},"scope":1050,"src":"2147:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":993,"nodeType":"Block","src":"2519:106:15","statements":[{"AST":{"nativeSrc":"2581:38:15","nodeType":"YulBlock","src":"2581:38:15","statements":[{"nativeSrc":"2595:14:15","nodeType":"YulAssignment","src":"2595:14:15","value":{"name":"slot","nativeSrc":"2605:4:15","nodeType":"YulIdentifier","src":"2605:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2595:6:15","nodeType":"YulIdentifier","src":"2595:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":990,"isOffset":false,"isSlot":true,"src":"2595:6:15","suffix":"slot","valueSize":1},{"declaration":986,"isOffset":false,"isSlot":false,"src":"2605:4:15","valueSize":1}],"id":992,"nodeType":"InlineAssembly","src":"2572:47:15"}]},"documentation":{"id":984,"nodeType":"StructuredDocumentation","src":"2343:87:15","text":" @dev Returns an `Bytes32Slot` with member `value` located at `slot`."},"id":994,"implemented":true,"kind":"function","modifiers":[],"name":"getBytes32Slot","nameLocation":"2444:14:15","nodeType":"FunctionDefinition","parameters":{"id":987,"nodeType":"ParameterList","parameters":[{"constant":false,"id":986,"mutability":"mutable","name":"slot","nameLocation":"2467:4:15","nodeType":"VariableDeclaration","scope":994,"src":"2459:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":985,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2459:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2458:14:15"},"returnParameters":{"id":991,"nodeType":"ParameterList","parameters":[{"constant":false,"id":990,"mutability":"mutable","name":"r","nameLocation":"2516:1:15","nodeType":"VariableDeclaration","scope":994,"src":"2496:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$952_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"},"typeName":{"id":989,"nodeType":"UserDefinedTypeName","pathNode":{"id":988,"name":"Bytes32Slot","nameLocations":["2496:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":952,"src":"2496:11:15"},"referencedDeclaration":952,"src":"2496:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Bytes32Slot_$952_storage_ptr","typeString":"struct StorageSlot.Bytes32Slot"}},"visibility":"internal"}],"src":"2495:23:15"},"scope":1050,"src":"2435:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1004,"nodeType":"Block","src":"2807:106:15","statements":[{"AST":{"nativeSrc":"2869:38:15","nodeType":"YulBlock","src":"2869:38:15","statements":[{"nativeSrc":"2883:14:15","nodeType":"YulAssignment","src":"2883:14:15","value":{"name":"slot","nativeSrc":"2893:4:15","nodeType":"YulIdentifier","src":"2893:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"2883:6:15","nodeType":"YulIdentifier","src":"2883:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1001,"isOffset":false,"isSlot":true,"src":"2883:6:15","suffix":"slot","valueSize":1},{"declaration":997,"isOffset":false,"isSlot":false,"src":"2893:4:15","valueSize":1}],"id":1003,"nodeType":"InlineAssembly","src":"2860:47:15"}]},"documentation":{"id":995,"nodeType":"StructuredDocumentation","src":"2631:87:15","text":" @dev Returns an `Uint256Slot` with member `value` located at `slot`."},"id":1005,"implemented":true,"kind":"function","modifiers":[],"name":"getUint256Slot","nameLocation":"2732:14:15","nodeType":"FunctionDefinition","parameters":{"id":998,"nodeType":"ParameterList","parameters":[{"constant":false,"id":997,"mutability":"mutable","name":"slot","nameLocation":"2755:4:15","nodeType":"VariableDeclaration","scope":1005,"src":"2747:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":996,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2747:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2746:14:15"},"returnParameters":{"id":1002,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1001,"mutability":"mutable","name":"r","nameLocation":"2804:1:15","nodeType":"VariableDeclaration","scope":1005,"src":"2784:21:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"},"typeName":{"id":1000,"nodeType":"UserDefinedTypeName","pathNode":{"id":999,"name":"Uint256Slot","nameLocations":["2784:11:15"],"nodeType":"IdentifierPath","referencedDeclaration":955,"src":"2784:11:15"},"referencedDeclaration":955,"src":"2784:11:15","typeDescriptions":{"typeIdentifier":"t_struct$_Uint256Slot_$955_storage_ptr","typeString":"struct StorageSlot.Uint256Slot"}},"visibility":"internal"}],"src":"2783:23:15"},"scope":1050,"src":"2723:190:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1015,"nodeType":"Block","src":"3092:106:15","statements":[{"AST":{"nativeSrc":"3154:38:15","nodeType":"YulBlock","src":"3154:38:15","statements":[{"nativeSrc":"3168:14:15","nodeType":"YulAssignment","src":"3168:14:15","value":{"name":"slot","nativeSrc":"3178:4:15","nodeType":"YulIdentifier","src":"3178:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3168:6:15","nodeType":"YulIdentifier","src":"3168:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1012,"isOffset":false,"isSlot":true,"src":"3168:6:15","suffix":"slot","valueSize":1},{"declaration":1008,"isOffset":false,"isSlot":false,"src":"3178:4:15","valueSize":1}],"id":1014,"nodeType":"InlineAssembly","src":"3145:47:15"}]},"documentation":{"id":1006,"nodeType":"StructuredDocumentation","src":"2919:86:15","text":" @dev Returns an `StringSlot` with member `value` located at `slot`."},"id":1016,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3019:13:15","nodeType":"FunctionDefinition","parameters":{"id":1009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1008,"mutability":"mutable","name":"slot","nameLocation":"3041:4:15","nodeType":"VariableDeclaration","scope":1016,"src":"3033:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3033:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3032:14:15"},"returnParameters":{"id":1013,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1012,"mutability":"mutable","name":"r","nameLocation":"3089:1:15","nodeType":"VariableDeclaration","scope":1016,"src":"3070:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1011,"nodeType":"UserDefinedTypeName","pathNode":{"id":1010,"name":"StringSlot","nameLocations":["3070:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"3070:10:15"},"referencedDeclaration":958,"src":"3070:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3069:22:15"},"scope":1050,"src":"3010:188:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1026,"nodeType":"Block","src":"3400:112:15","statements":[{"AST":{"nativeSrc":"3462:44:15","nodeType":"YulBlock","src":"3462:44:15","statements":[{"nativeSrc":"3476:20:15","nodeType":"YulAssignment","src":"3476:20:15","value":{"name":"store.slot","nativeSrc":"3486:10:15","nodeType":"YulIdentifier","src":"3486:10:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3476:6:15","nodeType":"YulIdentifier","src":"3476:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1023,"isOffset":false,"isSlot":true,"src":"3476:6:15","suffix":"slot","valueSize":1},{"declaration":1019,"isOffset":false,"isSlot":true,"src":"3486:10:15","suffix":"slot","valueSize":1}],"id":1025,"nodeType":"InlineAssembly","src":"3453:53:15"}]},"documentation":{"id":1017,"nodeType":"StructuredDocumentation","src":"3204:101:15","text":" @dev Returns an `StringSlot` representation of the string storage pointer `store`."},"id":1027,"implemented":true,"kind":"function","modifiers":[],"name":"getStringSlot","nameLocation":"3319:13:15","nodeType":"FunctionDefinition","parameters":{"id":1020,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1019,"mutability":"mutable","name":"store","nameLocation":"3348:5:15","nodeType":"VariableDeclaration","scope":1027,"src":"3333:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"},"typeName":{"id":1018,"name":"string","nodeType":"ElementaryTypeName","src":"3333:6:15","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"3332:22:15"},"returnParameters":{"id":1024,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1023,"mutability":"mutable","name":"r","nameLocation":"3397:1:15","nodeType":"VariableDeclaration","scope":1027,"src":"3378:20:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"},"typeName":{"id":1022,"nodeType":"UserDefinedTypeName","pathNode":{"id":1021,"name":"StringSlot","nameLocations":["3378:10:15"],"nodeType":"IdentifierPath","referencedDeclaration":958,"src":"3378:10:15"},"referencedDeclaration":958,"src":"3378:10:15","typeDescriptions":{"typeIdentifier":"t_struct$_StringSlot_$958_storage_ptr","typeString":"struct StorageSlot.StringSlot"}},"visibility":"internal"}],"src":"3377:22:15"},"scope":1050,"src":"3310:202:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1037,"nodeType":"Block","src":"3688:106:15","statements":[{"AST":{"nativeSrc":"3750:38:15","nodeType":"YulBlock","src":"3750:38:15","statements":[{"nativeSrc":"3764:14:15","nodeType":"YulAssignment","src":"3764:14:15","value":{"name":"slot","nativeSrc":"3774:4:15","nodeType":"YulIdentifier","src":"3774:4:15"},"variableNames":[{"name":"r.slot","nativeSrc":"3764:6:15","nodeType":"YulIdentifier","src":"3764:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1034,"isOffset":false,"isSlot":true,"src":"3764:6:15","suffix":"slot","valueSize":1},{"declaration":1030,"isOffset":false,"isSlot":false,"src":"3774:4:15","valueSize":1}],"id":1036,"nodeType":"InlineAssembly","src":"3741:47:15"}]},"documentation":{"id":1028,"nodeType":"StructuredDocumentation","src":"3518:85:15","text":" @dev Returns an `BytesSlot` with member `value` located at `slot`."},"id":1038,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3617:12:15","nodeType":"FunctionDefinition","parameters":{"id":1031,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1030,"mutability":"mutable","name":"slot","nameLocation":"3638:4:15","nodeType":"VariableDeclaration","scope":1038,"src":"3630:12:15","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1029,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3630:7:15","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3629:14:15"},"returnParameters":{"id":1035,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1034,"mutability":"mutable","name":"r","nameLocation":"3685:1:15","nodeType":"VariableDeclaration","scope":1038,"src":"3667:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1033,"nodeType":"UserDefinedTypeName","pathNode":{"id":1032,"name":"BytesSlot","nameLocations":["3667:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":961,"src":"3667:9:15"},"referencedDeclaration":961,"src":"3667:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3666:21:15"},"scope":1050,"src":"3608:186:15","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1048,"nodeType":"Block","src":"3991:112:15","statements":[{"AST":{"nativeSrc":"4053:44:15","nodeType":"YulBlock","src":"4053:44:15","statements":[{"nativeSrc":"4067:20:15","nodeType":"YulAssignment","src":"4067:20:15","value":{"name":"store.slot","nativeSrc":"4077:10:15","nodeType":"YulIdentifier","src":"4077:10:15"},"variableNames":[{"name":"r.slot","nativeSrc":"4067:6:15","nodeType":"YulIdentifier","src":"4067:6:15"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1045,"isOffset":false,"isSlot":true,"src":"4067:6:15","suffix":"slot","valueSize":1},{"declaration":1041,"isOffset":false,"isSlot":true,"src":"4077:10:15","suffix":"slot","valueSize":1}],"id":1047,"nodeType":"InlineAssembly","src":"4044:53:15"}]},"documentation":{"id":1039,"nodeType":"StructuredDocumentation","src":"3800:99:15","text":" @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`."},"id":1049,"implemented":true,"kind":"function","modifiers":[],"name":"getBytesSlot","nameLocation":"3913:12:15","nodeType":"FunctionDefinition","parameters":{"id":1042,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1041,"mutability":"mutable","name":"store","nameLocation":"3940:5:15","nodeType":"VariableDeclaration","scope":1049,"src":"3926:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"},"typeName":{"id":1040,"name":"bytes","nodeType":"ElementaryTypeName","src":"3926:5:15","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3925:21:15"},"returnParameters":{"id":1046,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1045,"mutability":"mutable","name":"r","nameLocation":"3988:1:15","nodeType":"VariableDeclaration","scope":1049,"src":"3970:19:15","stateVariable":false,"storageLocation":"storage","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"},"typeName":{"id":1044,"nodeType":"UserDefinedTypeName","pathNode":{"id":1043,"name":"BytesSlot","nameLocations":["3970:9:15"],"nodeType":"IdentifierPath","referencedDeclaration":961,"src":"3970:9:15"},"referencedDeclaration":961,"src":"3970:9:15","typeDescriptions":{"typeIdentifier":"t_struct$_BytesSlot_$961_storage_ptr","typeString":"struct StorageSlot.BytesSlot"}},"visibility":"internal"}],"src":"3969:21:15"},"scope":1050,"src":"3904:199:15","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1051,"src":"1420:2685:15","usedErrors":[],"usedEvents":[]}],"src":"193:3913:15"},"id":15},"@openzeppelin/contracts/utils/Strings.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","exportedSymbols":{"Math":[2511],"SignedMath":[2616],"Strings":[1279]},"id":1280,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1052,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"101:23:16"},{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","file":"./math/Math.sol","id":1053,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1280,"sourceUnit":2512,"src":"126:25:16","symbolAliases":[],"unitAlias":""},{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","file":"./math/SignedMath.sol","id":1054,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1280,"sourceUnit":2617,"src":"152:31:16","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"Strings","contractDependencies":[],"contractKind":"library","documentation":{"id":1055,"nodeType":"StructuredDocumentation","src":"185:34:16","text":" @dev String operations."},"fullyImplemented":true,"id":1279,"linearizedBaseContracts":[1279],"name":"Strings","nameLocation":"228:7:16","nodeType":"ContractDefinition","nodes":[{"constant":true,"id":1058,"mutability":"constant","name":"_SYMBOLS","nameLocation":"267:8:16","nodeType":"VariableDeclaration","scope":1279,"src":"242:54:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"},"typeName":{"id":1056,"name":"bytes16","nodeType":"ElementaryTypeName","src":"242:7:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"value":{"hexValue":"30313233343536373839616263646566","id":1057,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"278:18:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_cb29997ed99ead0db59ce4d12b7d3723198c827273e5796737c926d78019c39f","typeString":"literal_string \"0123456789abcdef\""},"value":"0123456789abcdef"},"visibility":"private"},{"constant":true,"id":1061,"mutability":"constant","name":"_ADDRESS_LENGTH","nameLocation":"325:15:16","nodeType":"VariableDeclaration","scope":1279,"src":"302:43:16","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1059,"name":"uint8","nodeType":"ElementaryTypeName","src":"302:5:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"value":{"hexValue":"3230","id":1060,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"343:2:16","typeDescriptions":{"typeIdentifier":"t_rational_20_by_1","typeString":"int_const 20"},"value":"20"},"visibility":"private"},{"body":{"id":1108,"nodeType":"Block","src":"518:625:16","statements":[{"id":1107,"nodeType":"UncheckedBlock","src":"528:609:16","statements":[{"assignments":[1070],"declarations":[{"constant":false,"id":1070,"mutability":"mutable","name":"length","nameLocation":"560:6:16","nodeType":"VariableDeclaration","scope":1107,"src":"552:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1069,"name":"uint256","nodeType":"ElementaryTypeName","src":"552:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1077,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1076,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1073,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"580:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1071,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"569:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2511_$","typeString":"type(library Math)"}},"id":1072,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"574:5:16","memberName":"log10","nodeType":"MemberAccess","referencedDeclaration":2348,"src":"569:10:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1074,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"569:17:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1075,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"589:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"569:21:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"552:38:16"},{"assignments":[1079],"declarations":[{"constant":false,"id":1079,"mutability":"mutable","name":"buffer","nameLocation":"618:6:16","nodeType":"VariableDeclaration","scope":1107,"src":"604:20:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1078,"name":"string","nodeType":"ElementaryTypeName","src":"604:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"id":1084,"initialValue":{"arguments":[{"id":1082,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1070,"src":"638:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1081,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"627:10:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"},"typeName":{"id":1080,"name":"string","nodeType":"ElementaryTypeName","src":"631:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}}},"id":1083,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"627:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"nodeType":"VariableDeclarationStatement","src":"604:41:16"},{"assignments":[1086],"declarations":[{"constant":false,"id":1086,"mutability":"mutable","name":"ptr","nameLocation":"667:3:16","nodeType":"VariableDeclaration","scope":1107,"src":"659:11:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1085,"name":"uint256","nodeType":"ElementaryTypeName","src":"659:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1087,"nodeType":"VariableDeclarationStatement","src":"659:11:16"},{"AST":{"nativeSrc":"740:67:16","nodeType":"YulBlock","src":"740:67:16","statements":[{"nativeSrc":"758:35:16","nodeType":"YulAssignment","src":"758:35:16","value":{"arguments":[{"name":"buffer","nativeSrc":"769:6:16","nodeType":"YulIdentifier","src":"769:6:16"},{"arguments":[{"kind":"number","nativeSrc":"781:2:16","nodeType":"YulLiteral","src":"781:2:16","type":"","value":"32"},{"name":"length","nativeSrc":"785:6:16","nodeType":"YulIdentifier","src":"785:6:16"}],"functionName":{"name":"add","nativeSrc":"777:3:16","nodeType":"YulIdentifier","src":"777:3:16"},"nativeSrc":"777:15:16","nodeType":"YulFunctionCall","src":"777:15:16"}],"functionName":{"name":"add","nativeSrc":"765:3:16","nodeType":"YulIdentifier","src":"765:3:16"},"nativeSrc":"765:28:16","nodeType":"YulFunctionCall","src":"765:28:16"},"variableNames":[{"name":"ptr","nativeSrc":"758:3:16","nodeType":"YulIdentifier","src":"758:3:16"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1079,"isOffset":false,"isSlot":false,"src":"769:6:16","valueSize":1},{"declaration":1070,"isOffset":false,"isSlot":false,"src":"785:6:16","valueSize":1},{"declaration":1086,"isOffset":false,"isSlot":false,"src":"758:3:16","valueSize":1}],"id":1088,"nodeType":"InlineAssembly","src":"731:76:16"},{"body":{"id":1103,"nodeType":"Block","src":"833:267:16","statements":[{"expression":{"id":1091,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":false,"src":"851:5:16","subExpression":{"id":1090,"name":"ptr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1086,"src":"851:3:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1092,"nodeType":"ExpressionStatement","src":"851:5:16"},{"AST":{"nativeSrc":"934:84:16","nodeType":"YulBlock","src":"934:84:16","statements":[{"expression":{"arguments":[{"name":"ptr","nativeSrc":"964:3:16","nodeType":"YulIdentifier","src":"964:3:16"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"978:5:16","nodeType":"YulIdentifier","src":"978:5:16"},{"kind":"number","nativeSrc":"985:2:16","nodeType":"YulLiteral","src":"985:2:16","type":"","value":"10"}],"functionName":{"name":"mod","nativeSrc":"974:3:16","nodeType":"YulIdentifier","src":"974:3:16"},"nativeSrc":"974:14:16","nodeType":"YulFunctionCall","src":"974:14:16"},{"name":"_SYMBOLS","nativeSrc":"990:8:16","nodeType":"YulIdentifier","src":"990:8:16"}],"functionName":{"name":"byte","nativeSrc":"969:4:16","nodeType":"YulIdentifier","src":"969:4:16"},"nativeSrc":"969:30:16","nodeType":"YulFunctionCall","src":"969:30:16"}],"functionName":{"name":"mstore8","nativeSrc":"956:7:16","nodeType":"YulIdentifier","src":"956:7:16"},"nativeSrc":"956:44:16","nodeType":"YulFunctionCall","src":"956:44:16"},"nativeSrc":"956:44:16","nodeType":"YulExpressionStatement","src":"956:44:16"}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1058,"isOffset":false,"isSlot":false,"src":"990:8:16","valueSize":1},{"declaration":1086,"isOffset":false,"isSlot":false,"src":"964:3:16","valueSize":1},{"declaration":1064,"isOffset":false,"isSlot":false,"src":"978:5:16","valueSize":1}],"id":1093,"nodeType":"InlineAssembly","src":"925:93:16"},{"expression":{"id":1096,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1094,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"1035:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"hexValue":"3130","id":1095,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1044:2:16","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"src":"1035:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1097,"nodeType":"ExpressionStatement","src":"1035:11:16"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1064,"src":"1068:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1077:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1068:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1102,"nodeType":"IfStatement","src":"1064:21:16","trueBody":{"id":1101,"nodeType":"Break","src":"1080:5:16"}}]},"condition":{"hexValue":"74727565","id":1089,"isConstant":false,"isLValue":false,"isPure":true,"kind":"bool","lValueRequested":false,"nodeType":"Literal","src":"827:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"value":"true"},"id":1104,"nodeType":"WhileStatement","src":"820:280:16"},{"expression":{"id":1105,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1079,"src":"1120:6:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1068,"id":1106,"nodeType":"Return","src":"1113:13:16"}]}]},"documentation":{"id":1062,"nodeType":"StructuredDocumentation","src":"352:90:16","text":" @dev Converts a `uint256` to its ASCII `string` decimal representation."},"id":1109,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"456:8:16","nodeType":"FunctionDefinition","parameters":{"id":1065,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1064,"mutability":"mutable","name":"value","nameLocation":"473:5:16","nodeType":"VariableDeclaration","scope":1109,"src":"465:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1063,"name":"uint256","nodeType":"ElementaryTypeName","src":"465:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"464:15:16"},"returnParameters":{"id":1068,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1067,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1109,"src":"503:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1066,"name":"string","nodeType":"ElementaryTypeName","src":"503:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"502:15:16"},"scope":1279,"src":"447:696:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1136,"nodeType":"Block","src":"1313:103:16","statements":[{"expression":{"arguments":[{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":1123,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1121,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"1354:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"hexValue":"30","id":1122,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1362:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1354:9:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"","id":1125,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1372:2:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470","typeString":"literal_string \"\""},"value":""},"id":1126,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1354:20:16","trueExpression":{"hexValue":"2d","id":1124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1366:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_d3b8281179950f98149eefdb158d0e1acb56f56e8e343aa9fefafa7e36959561","typeString":"literal_string \"-\""},"value":"-"},"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"arguments":[{"arguments":[{"id":1130,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1112,"src":"1400:5:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"expression":{"id":1128,"name":"SignedMath","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2616,"src":"1385:10:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_SignedMath_$2616_$","typeString":"type(library SignedMath)"}},"id":1129,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1396:3:16","memberName":"abs","nodeType":"MemberAccess","referencedDeclaration":2615,"src":"1385:14:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_int256_$returns$_t_uint256_$","typeString":"function (int256) pure returns (uint256)"}},"id":1131,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1385:21:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1127,"name":"toString","nodeType":"Identifier","overloadedDeclarations":[1109,1137],"referencedDeclaration":1109,"src":"1376:8:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1132,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1376:31:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"expression":{"id":1119,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"1337:3:16","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1120,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"1341:12:16","memberName":"encodePacked","nodeType":"MemberAccess","src":"1337:16:16","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1133,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1337:71:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1118,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1330:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1117,"name":"string","nodeType":"ElementaryTypeName","src":"1330:6:16","typeDescriptions":{}}},"id":1134,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1330:79:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1116,"id":1135,"nodeType":"Return","src":"1323:86:16"}]},"documentation":{"id":1110,"nodeType":"StructuredDocumentation","src":"1149:89:16","text":" @dev Converts a `int256` to its ASCII `string` decimal representation."},"id":1137,"implemented":true,"kind":"function","modifiers":[],"name":"toString","nameLocation":"1252:8:16","nodeType":"FunctionDefinition","parameters":{"id":1113,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1112,"mutability":"mutable","name":"value","nameLocation":"1268:5:16","nodeType":"VariableDeclaration","scope":1137,"src":"1261:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":1111,"name":"int256","nodeType":"ElementaryTypeName","src":"1261:6:16","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1260:14:16"},"returnParameters":{"id":1116,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1115,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1137,"src":"1298:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1114,"name":"string","nodeType":"ElementaryTypeName","src":"1298:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1297:15:16"},"scope":1279,"src":"1243:173:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1156,"nodeType":"Block","src":"1595:100:16","statements":[{"id":1155,"nodeType":"UncheckedBlock","src":"1605:84:16","statements":[{"expression":{"arguments":[{"id":1146,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"1648:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1152,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1149,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1140,"src":"1667:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1147,"name":"Math","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2511,"src":"1655:4:16","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Math_$2511_$","typeString":"type(library Math)"}},"id":1148,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1660:6:16","memberName":"log256","nodeType":"MemberAccess","referencedDeclaration":2471,"src":"1655:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1150,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1655:18:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1151,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1676:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1655:22:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1145,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1157,1233,1253],"referencedDeclaration":1233,"src":"1636:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1153,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1636:42:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1144,"id":1154,"nodeType":"Return","src":"1629:49:16"}]}]},"documentation":{"id":1138,"nodeType":"StructuredDocumentation","src":"1422:94:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation."},"id":1157,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1530:11:16","nodeType":"FunctionDefinition","parameters":{"id":1141,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1140,"mutability":"mutable","name":"value","nameLocation":"1550:5:16","nodeType":"VariableDeclaration","scope":1157,"src":"1542:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1139,"name":"uint256","nodeType":"ElementaryTypeName","src":"1542:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1541:15:16"},"returnParameters":{"id":1144,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1143,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1157,"src":"1580:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1142,"name":"string","nodeType":"ElementaryTypeName","src":"1580:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1579:15:16"},"scope":1279,"src":"1521:174:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1232,"nodeType":"Block","src":"1908:347:16","statements":[{"assignments":[1168],"declarations":[{"constant":false,"id":1168,"mutability":"mutable","name":"buffer","nameLocation":"1931:6:16","nodeType":"VariableDeclaration","scope":1232,"src":"1918:19:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1167,"name":"bytes","nodeType":"ElementaryTypeName","src":"1918:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":1177,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1173,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1950:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1172,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"1954:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1950:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"32","id":1174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1963:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"1950:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1170,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"NewExpression","src":"1940:9:16","typeDescriptions":{"typeIdentifier":"t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_ptr_$","typeString":"function (uint256) pure returns (bytes memory)"},"typeName":{"id":1169,"name":"bytes","nodeType":"ElementaryTypeName","src":"1944:5:16","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}}},"id":1176,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1940:25:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"1918:47:16"},{"expression":{"id":1182,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1178,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"1975:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1180,"indexExpression":{"hexValue":"30","id":1179,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1982:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"1975:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"30","id":1181,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1987:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_044852b2a670ade5407e78fb2863c51de9fcb96542a07186fe3aeda6bb8a116d","typeString":"literal_string \"0\""},"value":"0"},"src":"1975:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1183,"nodeType":"ExpressionStatement","src":"1975:15:16"},{"expression":{"id":1188,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1184,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"2000:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1186,"indexExpression":{"hexValue":"31","id":1185,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2007:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2000:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"hexValue":"78","id":1187,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2012:3:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_7521d1cadbcfa91eec65aa16715b94ffc1c9654ba57ea2ef1a2127bca1127a83","typeString":"literal_string \"x\""},"value":"x"},"src":"2000:15:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1189,"nodeType":"ExpressionStatement","src":"2000:15:16"},{"body":{"id":1218,"nodeType":"Block","src":"2070:83:16","statements":[{"expression":{"id":1212,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"id":1204,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"2084:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1206,"indexExpression":{"id":1205,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2091:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"2084:9:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"baseExpression":{"id":1207,"name":"_SYMBOLS","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1058,"src":"2096:8:16","typeDescriptions":{"typeIdentifier":"t_bytes16","typeString":"bytes16"}},"id":1211,"indexExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2105:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"hexValue":"307866","id":1209,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2113:3:16","typeDescriptions":{"typeIdentifier":"t_rational_15_by_1","typeString":"int_const 15"},"value":"0xf"},"src":"2105:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2096:21:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"src":"2084:33:16","typeDescriptions":{"typeIdentifier":"t_bytes1","typeString":"bytes1"}},"id":1213,"nodeType":"ExpressionStatement","src":"2084:33:16"},{"expression":{"id":1216,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1214,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2131:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":1215,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2141:1:16","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"2131:11:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1217,"nodeType":"ExpressionStatement","src":"2131:11:16"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1200,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1198,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2058:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"31","id":1199,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2062:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2058:5:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1219,"initializationExpression":{"assignments":[1191],"declarations":[{"constant":false,"id":1191,"mutability":"mutable","name":"i","nameLocation":"2038:1:16","nodeType":"VariableDeclaration","scope":1219,"src":"2030:9:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1190,"name":"uint256","nodeType":"ElementaryTypeName","src":"2030:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1197,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1196,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1194,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1192,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2042:1:16","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1193,"name":"length","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1162,"src":"2046:6:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2042:10:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1195,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2055:1:16","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"2042:14:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"2030:26:16"},"isSimpleCounterLoop":false,"loopExpression":{"expression":{"id":1202,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"--","prefix":true,"src":"2065:3:16","subExpression":{"id":1201,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1191,"src":"2067:1:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1203,"nodeType":"ExpressionStatement","src":"2065:3:16"},"nodeType":"ForStatement","src":"2025:128:16"},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1223,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1221,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1160,"src":"2170:5:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1222,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2179:1:16","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2170:10:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"537472696e67733a20686578206c656e67746820696e73756666696369656e74","id":1224,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2182:34:16","typeDescriptions":{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""},"value":"Strings: hex length insufficient"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_04fc88320d7c9f639317c75102c103ff0044d3075a5c627e24e76e5bbb2733c2","typeString":"literal_string \"Strings: hex length insufficient\""}],"id":1220,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2162:7:16","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1225,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2162:55:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1226,"nodeType":"ExpressionStatement","src":"2162:55:16"},{"expression":{"arguments":[{"id":1229,"name":"buffer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1168,"src":"2241:6:16","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1228,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2234:6:16","typeDescriptions":{"typeIdentifier":"t_type$_t_string_storage_ptr_$","typeString":"type(string storage pointer)"},"typeName":{"id":1227,"name":"string","nodeType":"ElementaryTypeName","src":"2234:6:16","typeDescriptions":{}}},"id":1230,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2234:14:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1166,"id":1231,"nodeType":"Return","src":"2227:21:16"}]},"documentation":{"id":1158,"nodeType":"StructuredDocumentation","src":"1701:112:16","text":" @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length."},"id":1233,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"1827:11:16","nodeType":"FunctionDefinition","parameters":{"id":1163,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1160,"mutability":"mutable","name":"value","nameLocation":"1847:5:16","nodeType":"VariableDeclaration","scope":1233,"src":"1839:13:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1159,"name":"uint256","nodeType":"ElementaryTypeName","src":"1839:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1162,"mutability":"mutable","name":"length","nameLocation":"1862:6:16","nodeType":"VariableDeclaration","scope":1233,"src":"1854:14:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1161,"name":"uint256","nodeType":"ElementaryTypeName","src":"1854:7:16","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1838:31:16"},"returnParameters":{"id":1166,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1165,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1233,"src":"1893:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1164,"name":"string","nodeType":"ElementaryTypeName","src":"1893:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"1892:15:16"},"scope":1279,"src":"1818:437:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1252,"nodeType":"Block","src":"2480:76:16","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"id":1246,"name":"addr","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1236,"src":"2525:4:16","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_address","typeString":"address"}],"id":1245,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2517:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint160_$","typeString":"type(uint160)"},"typeName":{"id":1244,"name":"uint160","nodeType":"ElementaryTypeName","src":"2517:7:16","typeDescriptions":{}}},"id":1247,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2517:13:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint160","typeString":"uint160"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint160","typeString":"uint160"}],"id":1243,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2509:7:16","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1242,"name":"uint256","nodeType":"ElementaryTypeName","src":"2509:7:16","typeDescriptions":{}}},"id":1248,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2509:22:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1249,"name":"_ADDRESS_LENGTH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1061,"src":"2533:15:16","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint8","typeString":"uint8"}],"id":1241,"name":"toHexString","nodeType":"Identifier","overloadedDeclarations":[1157,1233,1253],"referencedDeclaration":1233,"src":"2497:11:16","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256,uint256) pure returns (string memory)"}},"id":1250,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2497:52:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},"functionReturnParameters":1240,"id":1251,"nodeType":"Return","src":"2490:59:16"}]},"documentation":{"id":1234,"nodeType":"StructuredDocumentation","src":"2261:141:16","text":" @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation."},"id":1253,"implemented":true,"kind":"function","modifiers":[],"name":"toHexString","nameLocation":"2416:11:16","nodeType":"FunctionDefinition","parameters":{"id":1237,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1236,"mutability":"mutable","name":"addr","nameLocation":"2436:4:16","nodeType":"VariableDeclaration","scope":1253,"src":"2428:12:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1235,"name":"address","nodeType":"ElementaryTypeName","src":"2428:7:16","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"2427:14:16"},"returnParameters":{"id":1240,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1239,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1253,"src":"2465:13:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1238,"name":"string","nodeType":"ElementaryTypeName","src":"2465:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2464:15:16"},"scope":1279,"src":"2407:149:16","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1277,"nodeType":"Block","src":"2711:66:16","statements":[{"expression":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1275,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"arguments":[{"id":1266,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1256,"src":"2744:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1265,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2738:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1264,"name":"bytes","nodeType":"ElementaryTypeName","src":"2738:5:16","typeDescriptions":{}}},"id":1267,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2738:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1263,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2728:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1268,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2728:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"arguments":[{"id":1272,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1258,"src":"2767:1:16","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":1271,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2761:5:16","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":1270,"name":"bytes","nodeType":"ElementaryTypeName","src":"2761:5:16","typeDescriptions":{}}},"id":1273,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2761:8:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1269,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2751:9:16","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1274,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2751:19:16","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"2728:42:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":1262,"id":1276,"nodeType":"Return","src":"2721:49:16"}]},"documentation":{"id":1254,"nodeType":"StructuredDocumentation","src":"2562:66:16","text":" @dev Returns true if the two strings are equal."},"id":1278,"implemented":true,"kind":"function","modifiers":[],"name":"equal","nameLocation":"2642:5:16","nodeType":"FunctionDefinition","parameters":{"id":1259,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1256,"mutability":"mutable","name":"a","nameLocation":"2662:1:16","nodeType":"VariableDeclaration","scope":1278,"src":"2648:15:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1255,"name":"string","nodeType":"ElementaryTypeName","src":"2648:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":1258,"mutability":"mutable","name":"b","nameLocation":"2679:1:16","nodeType":"VariableDeclaration","scope":1278,"src":"2665:15:16","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string"},"typeName":{"id":1257,"name":"string","nodeType":"ElementaryTypeName","src":"2665:6:16","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"}],"src":"2647:34:16"},"returnParameters":{"id":1262,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1261,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1278,"src":"2705:4:16","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":1260,"name":"bool","nodeType":"ElementaryTypeName","src":"2705:4:16","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2704:6:16"},"scope":1279,"src":"2633:144:16","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1280,"src":"220:2559:16","usedErrors":[],"usedEvents":[]}],"src":"101:2679:16"},"id":16},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","exportedSymbols":{"ECDSA":[1645],"Math":[2511],"SignedMath":[2616],"Strings":[1279]},"id":1646,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1281,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"112:23:17"},{"absolutePath":"@openzeppelin/contracts/utils/Strings.sol","file":"../Strings.sol","id":1282,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":1646,"sourceUnit":1280,"src":"137:24:17","symbolAliases":[],"unitAlias":""},{"abstract":false,"baseContracts":[],"canonicalName":"ECDSA","contractDependencies":[],"contractKind":"library","documentation":{"id":1283,"nodeType":"StructuredDocumentation","src":"163:205:17","text":" @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\n These functions can be used to verify that a message was signed by the holder\n of the private keys of a given address."},"fullyImplemented":true,"id":1645,"linearizedBaseContracts":[1645],"name":"ECDSA","nameLocation":"377:5:17","nodeType":"ContractDefinition","nodes":[{"canonicalName":"ECDSA.RecoverError","id":1289,"members":[{"id":1284,"name":"NoError","nameLocation":"417:7:17","nodeType":"EnumValue","src":"417:7:17"},{"id":1285,"name":"InvalidSignature","nameLocation":"434:16:17","nodeType":"EnumValue","src":"434:16:17"},{"id":1286,"name":"InvalidSignatureLength","nameLocation":"460:22:17","nodeType":"EnumValue","src":"460:22:17"},{"id":1287,"name":"InvalidSignatureS","nameLocation":"492:17:17","nodeType":"EnumValue","src":"492:17:17"},{"id":1288,"name":"InvalidSignatureV","nameLocation":"519:17:17","nodeType":"EnumValue","src":"519:17:17"}],"name":"RecoverError","nameLocation":"394:12:17","nodeType":"EnumDefinition","src":"389:175:17"},{"body":{"id":1332,"nodeType":"Block","src":"624:457:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"id":1298,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1295,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"638:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1296,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"647:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1297,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"660:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1284,"src":"647:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"src":"638:29:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"id":1304,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1301,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"734:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1302,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"743:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1303,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"756:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1285,"src":"743:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"src":"734:38:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"id":1313,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1310,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"843:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1311,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"852:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1312,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"865:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1286,"src":"852:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"src":"843:44:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"condition":{"commonType":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"id":1322,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1319,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1292,"src":"965:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1320,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"974:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1321,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"987:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1287,"src":"974:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"src":"965:39:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1328,"nodeType":"IfStatement","src":"961:114:17","trueBody":{"id":1327,"nodeType":"Block","src":"1006:69:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c7565","id":1324,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"1027:36:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""},"value":"ECDSA: invalid signature 's' value"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd","typeString":"literal_string \"ECDSA: invalid signature 's' value\""}],"id":1323,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"1020:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1325,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1020:44:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1326,"nodeType":"ExpressionStatement","src":"1020:44:17"}]}},"id":1329,"nodeType":"IfStatement","src":"839:236:17","trueBody":{"id":1318,"nodeType":"Block","src":"889:66:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","id":1315,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"910:33:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""},"value":"ECDSA: invalid signature length"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77","typeString":"literal_string \"ECDSA: invalid signature length\""}],"id":1314,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"903:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1316,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"903:41:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1317,"nodeType":"ExpressionStatement","src":"903:41:17"}]}},"id":1330,"nodeType":"IfStatement","src":"730:345:17","trueBody":{"id":1309,"nodeType":"Block","src":"774:59:17","statements":[{"expression":{"arguments":[{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","id":1306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"795:26:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""},"value":"ECDSA: invalid signature"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be","typeString":"literal_string \"ECDSA: invalid signature\""}],"id":1305,"name":"revert","nodeType":"Identifier","overloadedDeclarations":[-19,-19],"referencedDeclaration":-19,"src":"788:6:17","typeDescriptions":{"typeIdentifier":"t_function_revert_pure$_t_string_memory_ptr_$returns$__$","typeString":"function (string memory) pure"}},"id":1307,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"788:34:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1308,"nodeType":"ExpressionStatement","src":"788:34:17"}]}},"id":1331,"nodeType":"IfStatement","src":"634:441:17","trueBody":{"id":1300,"nodeType":"Block","src":"669:55:17","statements":[{"functionReturnParameters":1294,"id":1299,"nodeType":"Return","src":"683:7:17"}]}}]},"id":1333,"implemented":true,"kind":"function","modifiers":[],"name":"_throwError","nameLocation":"579:11:17","nodeType":"FunctionDefinition","parameters":{"id":1293,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1292,"mutability":"mutable","name":"error","nameLocation":"604:5:17","nodeType":"VariableDeclaration","scope":1333,"src":"591:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1291,"nodeType":"UserDefinedTypeName","pathNode":{"id":1290,"name":"RecoverError","nameLocations":["591:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"591:12:17"},"referencedDeclaration":1289,"src":"591:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"590:20:17"},"returnParameters":{"id":1294,"nodeType":"ParameterList","parameters":[],"src":"624:0:17"},"scope":1645,"src":"570:511:17","stateMutability":"pure","virtual":false,"visibility":"private"},{"body":{"id":1378,"nodeType":"Block","src":"2249:626:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1349,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"expression":{"id":1346,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1338,"src":"2263:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1347,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2273:6:17","memberName":"length","nodeType":"MemberAccess","src":"2263:16:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"3635","id":1348,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2283:2:17","typeDescriptions":{"typeIdentifier":"t_rational_65_by_1","typeString":"int_const 65"},"value":"65"},"src":"2263:22:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":1376,"nodeType":"Block","src":"2788:81:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2818:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1369,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2810:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1368,"name":"address","nodeType":"ElementaryTypeName","src":"2810:7:17","typeDescriptions":{}}},"id":1371,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2810:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1372,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"2822:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1373,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:22:17","memberName":"InvalidSignatureLength","nodeType":"MemberAccess","referencedDeclaration":1286,"src":"2822:35:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"id":1374,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"2809:49:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1345,"id":1375,"nodeType":"Return","src":"2802:56:17"}]},"id":1377,"nodeType":"IfStatement","src":"2259:610:17","trueBody":{"id":1367,"nodeType":"Block","src":"2287:495:17","statements":[{"assignments":[1351],"declarations":[{"constant":false,"id":1351,"mutability":"mutable","name":"r","nameLocation":"2309:1:17","nodeType":"VariableDeclaration","scope":1367,"src":"2301:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1350,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2301:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1352,"nodeType":"VariableDeclarationStatement","src":"2301:9:17"},{"assignments":[1354],"declarations":[{"constant":false,"id":1354,"mutability":"mutable","name":"s","nameLocation":"2332:1:17","nodeType":"VariableDeclaration","scope":1367,"src":"2324:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1353,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2324:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1355,"nodeType":"VariableDeclarationStatement","src":"2324:9:17"},{"assignments":[1357],"declarations":[{"constant":false,"id":1357,"mutability":"mutable","name":"v","nameLocation":"2353:1:17","nodeType":"VariableDeclaration","scope":1367,"src":"2347:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1356,"name":"uint8","nodeType":"ElementaryTypeName","src":"2347:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1358,"nodeType":"VariableDeclarationStatement","src":"2347:7:17"},{"AST":{"nativeSrc":"2555:171:17","nodeType":"YulBlock","src":"2555:171:17","statements":[{"nativeSrc":"2573:32:17","nodeType":"YulAssignment","src":"2573:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2588:9:17","nodeType":"YulIdentifier","src":"2588:9:17"},{"kind":"number","nativeSrc":"2599:4:17","nodeType":"YulLiteral","src":"2599:4:17","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"2584:3:17","nodeType":"YulIdentifier","src":"2584:3:17"},"nativeSrc":"2584:20:17","nodeType":"YulFunctionCall","src":"2584:20:17"}],"functionName":{"name":"mload","nativeSrc":"2578:5:17","nodeType":"YulIdentifier","src":"2578:5:17"},"nativeSrc":"2578:27:17","nodeType":"YulFunctionCall","src":"2578:27:17"},"variableNames":[{"name":"r","nativeSrc":"2573:1:17","nodeType":"YulIdentifier","src":"2573:1:17"}]},{"nativeSrc":"2622:32:17","nodeType":"YulAssignment","src":"2622:32:17","value":{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2637:9:17","nodeType":"YulIdentifier","src":"2637:9:17"},{"kind":"number","nativeSrc":"2648:4:17","nodeType":"YulLiteral","src":"2648:4:17","type":"","value":"0x40"}],"functionName":{"name":"add","nativeSrc":"2633:3:17","nodeType":"YulIdentifier","src":"2633:3:17"},"nativeSrc":"2633:20:17","nodeType":"YulFunctionCall","src":"2633:20:17"}],"functionName":{"name":"mload","nativeSrc":"2627:5:17","nodeType":"YulIdentifier","src":"2627:5:17"},"nativeSrc":"2627:27:17","nodeType":"YulFunctionCall","src":"2627:27:17"},"variableNames":[{"name":"s","nativeSrc":"2622:1:17","nodeType":"YulIdentifier","src":"2622:1:17"}]},{"nativeSrc":"2671:41:17","nodeType":"YulAssignment","src":"2671:41:17","value":{"arguments":[{"kind":"number","nativeSrc":"2681:1:17","nodeType":"YulLiteral","src":"2681:1:17","type":"","value":"0"},{"arguments":[{"arguments":[{"name":"signature","nativeSrc":"2694:9:17","nodeType":"YulIdentifier","src":"2694:9:17"},{"kind":"number","nativeSrc":"2705:4:17","nodeType":"YulLiteral","src":"2705:4:17","type":"","value":"0x60"}],"functionName":{"name":"add","nativeSrc":"2690:3:17","nodeType":"YulIdentifier","src":"2690:3:17"},"nativeSrc":"2690:20:17","nodeType":"YulFunctionCall","src":"2690:20:17"}],"functionName":{"name":"mload","nativeSrc":"2684:5:17","nodeType":"YulIdentifier","src":"2684:5:17"},"nativeSrc":"2684:27:17","nodeType":"YulFunctionCall","src":"2684:27:17"}],"functionName":{"name":"byte","nativeSrc":"2676:4:17","nodeType":"YulIdentifier","src":"2676:4:17"},"nativeSrc":"2676:36:17","nodeType":"YulFunctionCall","src":"2676:36:17"},"variableNames":[{"name":"v","nativeSrc":"2671:1:17","nodeType":"YulIdentifier","src":"2671:1:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1351,"isOffset":false,"isSlot":false,"src":"2573:1:17","valueSize":1},{"declaration":1354,"isOffset":false,"isSlot":false,"src":"2622:1:17","valueSize":1},{"declaration":1338,"isOffset":false,"isSlot":false,"src":"2588:9:17","valueSize":1},{"declaration":1338,"isOffset":false,"isSlot":false,"src":"2637:9:17","valueSize":1},{"declaration":1338,"isOffset":false,"isSlot":false,"src":"2694:9:17","valueSize":1},{"declaration":1357,"isOffset":false,"isSlot":false,"src":"2671:1:17","valueSize":1}],"id":1359,"nodeType":"InlineAssembly","src":"2546:180:17"},{"expression":{"arguments":[{"id":1361,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1336,"src":"2757:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1362,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1357,"src":"2763:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1363,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1351,"src":"2766:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1364,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1354,"src":"2769:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1360,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1379,1453,1547],"referencedDeclaration":1547,"src":"2746:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1365,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2746:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1345,"id":1366,"nodeType":"Return","src":"2739:32:17"}]}}]},"documentation":{"id":1334,"nodeType":"StructuredDocumentation","src":"1087:1053:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature` or error string. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it.\n Documentation for signature generation:\n - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\n - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\n _Available since v4.3._"},"id":1379,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"2154:10:17","nodeType":"FunctionDefinition","parameters":{"id":1339,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1336,"mutability":"mutable","name":"hash","nameLocation":"2173:4:17","nodeType":"VariableDeclaration","scope":1379,"src":"2165:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1335,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2165:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1338,"mutability":"mutable","name":"signature","nameLocation":"2192:9:17","nodeType":"VariableDeclaration","scope":1379,"src":"2179:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1337,"name":"bytes","nodeType":"ElementaryTypeName","src":"2179:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2164:38:17"},"returnParameters":{"id":1345,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1341,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1379,"src":"2226:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1340,"name":"address","nodeType":"ElementaryTypeName","src":"2226:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1344,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1379,"src":"2235:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1343,"nodeType":"UserDefinedTypeName","pathNode":{"id":1342,"name":"RecoverError","nameLocations":["2235:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"2235:12:17"},"referencedDeclaration":1289,"src":"2235:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"2225:23:17"},"scope":1645,"src":"2145:730:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1405,"nodeType":"Block","src":"3748:140:17","statements":[{"assignments":[1390,1393],"declarations":[{"constant":false,"id":1390,"mutability":"mutable","name":"recovered","nameLocation":"3767:9:17","nodeType":"VariableDeclaration","scope":1405,"src":"3759:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1389,"name":"address","nodeType":"ElementaryTypeName","src":"3759:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1393,"mutability":"mutable","name":"error","nameLocation":"3791:5:17","nodeType":"VariableDeclaration","scope":1405,"src":"3778:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1392,"nodeType":"UserDefinedTypeName","pathNode":{"id":1391,"name":"RecoverError","nameLocations":["3778:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"3778:12:17"},"referencedDeclaration":1289,"src":"3778:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1398,"initialValue":{"arguments":[{"id":1395,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1382,"src":"3811:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1396,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1384,"src":"3817:9:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1394,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1379,1453,1547],"referencedDeclaration":1379,"src":"3800:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"function (bytes32,bytes memory) pure returns (address,enum ECDSA.RecoverError)"}},"id":1397,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3800:27:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"3758:69:17"},{"expression":{"arguments":[{"id":1400,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1393,"src":"3849:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}],"id":1399,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"3837:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1289_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1401,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3837:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1402,"nodeType":"ExpressionStatement","src":"3837:18:17"},{"expression":{"id":1403,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1390,"src":"3872:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1388,"id":1404,"nodeType":"Return","src":"3865:16:17"}]},"documentation":{"id":1380,"nodeType":"StructuredDocumentation","src":"2881:775:17","text":" @dev Returns the address that signed a hashed message (`hash`) with\n `signature`. This address can then be used for verification purposes.\n The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\n this function rejects them by requiring the `s` value to be in the lower\n half order, and the `v` value to be either 27 or 28.\n IMPORTANT: `hash` _must_ be the result of a hash operation for the\n verification to be secure: it is possible to craft signatures that\n recover to arbitrary addresses for non-hashed data. A safe way to ensure\n this is by receiving a hash of the original message (which may otherwise\n be too long), and then calling {toEthSignedMessageHash} on it."},"id":1406,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"3670:7:17","nodeType":"FunctionDefinition","parameters":{"id":1385,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1382,"mutability":"mutable","name":"hash","nameLocation":"3686:4:17","nodeType":"VariableDeclaration","scope":1406,"src":"3678:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1381,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3678:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1384,"mutability":"mutable","name":"signature","nameLocation":"3705:9:17","nodeType":"VariableDeclaration","scope":1406,"src":"3692:22:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1383,"name":"bytes","nodeType":"ElementaryTypeName","src":"3692:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3677:38:17"},"returnParameters":{"id":1388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1387,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1406,"src":"3739:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1386,"name":"address","nodeType":"ElementaryTypeName","src":"3739:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"3738:9:17"},"scope":1645,"src":"3661:227:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1452,"nodeType":"Block","src":"4245:203:17","statements":[{"assignments":[1422],"declarations":[{"constant":false,"id":1422,"mutability":"mutable","name":"s","nameLocation":"4263:1:17","nodeType":"VariableDeclaration","scope":1452,"src":"4255:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1421,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4255:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"id":1429,"initialValue":{"commonType":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"id":1428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1423,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"4267:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"arguments":[{"hexValue":"307837666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666666","id":1426,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4280:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"},"value":"0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_57896044618658097711785492504343953926634992332820282019728792003956564819967_by_1","typeString":"int_const 5789...(69 digits omitted)...9967"}],"id":1425,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4272:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes32_$","typeString":"type(bytes32)"},"typeName":{"id":1424,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4272:7:17","typeDescriptions":{}}},"id":1427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4272:75:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"4267:80:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"VariableDeclarationStatement","src":"4255:92:17"},{"assignments":[1431],"declarations":[{"constant":false,"id":1431,"mutability":"mutable","name":"v","nameLocation":"4363:1:17","nodeType":"VariableDeclaration","scope":1452,"src":"4357:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1430,"name":"uint8","nodeType":"ElementaryTypeName","src":"4357:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"}],"id":1444,"initialValue":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1442,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1439,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1436,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1413,"src":"4382:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1435,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4374:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1434,"name":"uint256","nodeType":"ElementaryTypeName","src":"4374:7:17","typeDescriptions":{}}},"id":1437,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4374:11:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":1438,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4389:3:17","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"4374:18:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1440,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4373:20:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"3237","id":1441,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4396:2:17","typeDescriptions":{"typeIdentifier":"t_rational_27_by_1","typeString":"int_const 27"},"value":"27"},"src":"4373:25:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1433,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"4367:5:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint8_$","typeString":"type(uint8)"},"typeName":{"id":1432,"name":"uint8","nodeType":"ElementaryTypeName","src":"4367:5:17","typeDescriptions":{}}},"id":1443,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4367:32:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"nodeType":"VariableDeclarationStatement","src":"4357:42:17"},{"expression":{"arguments":[{"id":1446,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1409,"src":"4427:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1447,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1431,"src":"4433:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1448,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1411,"src":"4436:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1449,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1422,"src":"4439:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1445,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1379,1453,1547],"referencedDeclaration":1547,"src":"4416:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1450,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4416:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1420,"id":1451,"nodeType":"Return","src":"4409:32:17"}]},"documentation":{"id":1407,"nodeType":"StructuredDocumentation","src":"3894:243:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\n See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\n _Available since v4.3._"},"id":1453,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"4151:10:17","nodeType":"FunctionDefinition","parameters":{"id":1414,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1409,"mutability":"mutable","name":"hash","nameLocation":"4170:4:17","nodeType":"VariableDeclaration","scope":1453,"src":"4162:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1408,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4162:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1411,"mutability":"mutable","name":"r","nameLocation":"4184:1:17","nodeType":"VariableDeclaration","scope":1453,"src":"4176:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1410,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4176:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1413,"mutability":"mutable","name":"vs","nameLocation":"4195:2:17","nodeType":"VariableDeclaration","scope":1453,"src":"4187:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1412,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4187:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4161:37:17"},"returnParameters":{"id":1420,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1416,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1453,"src":"4222:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1415,"name":"address","nodeType":"ElementaryTypeName","src":"4222:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1419,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1453,"src":"4231:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1418,"nodeType":"UserDefinedTypeName","pathNode":{"id":1417,"name":"RecoverError","nameLocations":["4231:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"4231:12:17"},"referencedDeclaration":1289,"src":"4231:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"4221:23:17"},"scope":1645,"src":"4142:306:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1482,"nodeType":"Block","src":"4699:136:17","statements":[{"assignments":[1466,1469],"declarations":[{"constant":false,"id":1466,"mutability":"mutable","name":"recovered","nameLocation":"4718:9:17","nodeType":"VariableDeclaration","scope":1482,"src":"4710:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1465,"name":"address","nodeType":"ElementaryTypeName","src":"4710:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1469,"mutability":"mutable","name":"error","nameLocation":"4742:5:17","nodeType":"VariableDeclaration","scope":1482,"src":"4729:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1468,"nodeType":"UserDefinedTypeName","pathNode":{"id":1467,"name":"RecoverError","nameLocations":["4729:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"4729:12:17"},"referencedDeclaration":1289,"src":"4729:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1475,"initialValue":{"arguments":[{"id":1471,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1456,"src":"4762:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1472,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1458,"src":"4768:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1473,"name":"vs","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1460,"src":"4771:2:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1470,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1379,1453,1547],"referencedDeclaration":1453,"src":"4751:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"function (bytes32,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1474,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4751:23:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"4709:65:17"},{"expression":{"arguments":[{"id":1477,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1469,"src":"4796:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}],"id":1476,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"4784:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1289_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1478,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4784:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1479,"nodeType":"ExpressionStatement","src":"4784:18:17"},{"expression":{"id":1480,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1466,"src":"4819:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1464,"id":1481,"nodeType":"Return","src":"4812:16:17"}]},"documentation":{"id":1454,"nodeType":"StructuredDocumentation","src":"4454:154:17","text":" @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\n _Available since v4.2._"},"id":1483,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"4622:7:17","nodeType":"FunctionDefinition","parameters":{"id":1461,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1456,"mutability":"mutable","name":"hash","nameLocation":"4638:4:17","nodeType":"VariableDeclaration","scope":1483,"src":"4630:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1455,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4630:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1458,"mutability":"mutable","name":"r","nameLocation":"4652:1:17","nodeType":"VariableDeclaration","scope":1483,"src":"4644:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1457,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4644:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1460,"mutability":"mutable","name":"vs","nameLocation":"4663:2:17","nodeType":"VariableDeclaration","scope":1483,"src":"4655:10:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1459,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4655:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"4629:37:17"},"returnParameters":{"id":1464,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1463,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1483,"src":"4690:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1462,"name":"address","nodeType":"ElementaryTypeName","src":"4690:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"4689:9:17"},"scope":1645,"src":"4613:222:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1546,"nodeType":"Block","src":"5120:1345:17","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1505,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1502,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6016:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1501,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6008:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":1500,"name":"uint256","nodeType":"ElementaryTypeName","src":"6008:7:17","typeDescriptions":{}}},"id":1503,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6008:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"307837464646464646464646464646464646464646464646464646464646464646463544353736453733353741343530314444464539324634363638314232304130","id":1504,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6021:66:17","typeDescriptions":{"typeIdentifier":"t_rational_57896044618658097711785492504343953926418782139537452191302581570759080747168_by_1","typeString":"int_const 5789...(69 digits omitted)...7168"},"value":"0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0"},"src":"6008:79:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1515,"nodeType":"IfStatement","src":"6004:161:17","trueBody":{"id":1514,"nodeType":"Block","src":"6089:76:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1508,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6119:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1507,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6111:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1506,"name":"address","nodeType":"ElementaryTypeName","src":"6111:7:17","typeDescriptions":{}}},"id":1509,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6111:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1510,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"6123:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1511,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6136:17:17","memberName":"InvalidSignatureS","nodeType":"MemberAccess","referencedDeclaration":1287,"src":"6123:30:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"id":1512,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6110:44:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1499,"id":1513,"nodeType":"Return","src":"6103:51:17"}]}},{"assignments":[1517],"declarations":[{"constant":false,"id":1517,"mutability":"mutable","name":"signer","nameLocation":"6267:6:17","nodeType":"VariableDeclaration","scope":1546,"src":"6259:14:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1516,"name":"address","nodeType":"ElementaryTypeName","src":"6259:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":1524,"initialValue":{"arguments":[{"id":1519,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1486,"src":"6286:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1520,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1488,"src":"6292:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1521,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1490,"src":"6295:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1522,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1492,"src":"6298:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1518,"name":"ecrecover","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-6,"src":"6276:9:17","typeDescriptions":{"typeIdentifier":"t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address)"}},"id":1523,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6276:24:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"6259:41:17"},{"condition":{"commonType":{"typeIdentifier":"t_address","typeString":"address"},"id":1530,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1525,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"6314:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"arguments":[{"hexValue":"30","id":1528,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6332:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1527,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6324:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1526,"name":"address","nodeType":"ElementaryTypeName","src":"6324:7:17","typeDescriptions":{}}},"id":1529,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6324:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"6314:20:17","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1540,"nodeType":"IfStatement","src":"6310:101:17","trueBody":{"id":1539,"nodeType":"Block","src":"6336:75:17","statements":[{"expression":{"components":[{"arguments":[{"hexValue":"30","id":1533,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6366:1:17","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"}],"id":1532,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"6358:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":1531,"name":"address","nodeType":"ElementaryTypeName","src":"6358:7:17","typeDescriptions":{}}},"id":1534,"isConstant":false,"isLValue":false,"isPure":true,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6358:10:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1535,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"6370:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1536,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6383:16:17","memberName":"InvalidSignature","nodeType":"MemberAccess","referencedDeclaration":1285,"src":"6370:29:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"id":1537,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"TupleExpression","src":"6357:43:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1499,"id":1538,"nodeType":"Return","src":"6350:50:17"}]}},{"expression":{"components":[{"id":1541,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1517,"src":"6429:6:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"expression":{"id":1542,"name":"RecoverError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1289,"src":"6437:12:17","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_RecoverError_$1289_$","typeString":"type(enum ECDSA.RecoverError)"}},"id":1543,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6450:7:17","memberName":"NoError","nodeType":"MemberAccess","referencedDeclaration":1284,"src":"6437:20:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"id":1544,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"6428:30:17","typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"functionReturnParameters":1499,"id":1545,"nodeType":"Return","src":"6421:37:17"}]},"documentation":{"id":1484,"nodeType":"StructuredDocumentation","src":"4841:163:17","text":" @dev Overload of {ECDSA-tryRecover} that receives the `v`,\n `r` and `s` signature fields separately.\n _Available since v4.3._"},"id":1547,"implemented":true,"kind":"function","modifiers":[],"name":"tryRecover","nameLocation":"5018:10:17","nodeType":"FunctionDefinition","parameters":{"id":1493,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1486,"mutability":"mutable","name":"hash","nameLocation":"5037:4:17","nodeType":"VariableDeclaration","scope":1547,"src":"5029:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1485,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5029:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1488,"mutability":"mutable","name":"v","nameLocation":"5049:1:17","nodeType":"VariableDeclaration","scope":1547,"src":"5043:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1487,"name":"uint8","nodeType":"ElementaryTypeName","src":"5043:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1490,"mutability":"mutable","name":"r","nameLocation":"5060:1:17","nodeType":"VariableDeclaration","scope":1547,"src":"5052:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1489,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5052:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1492,"mutability":"mutable","name":"s","nameLocation":"5071:1:17","nodeType":"VariableDeclaration","scope":1547,"src":"5063:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1491,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5063:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5028:45:17"},"returnParameters":{"id":1499,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1495,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1547,"src":"5097:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1494,"name":"address","nodeType":"ElementaryTypeName","src":"5097:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1498,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1547,"src":"5106:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1497,"nodeType":"UserDefinedTypeName","pathNode":{"id":1496,"name":"RecoverError","nameLocations":["5106:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"5106:12:17"},"referencedDeclaration":1289,"src":"5106:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"src":"5096:23:17"},"scope":1645,"src":"5009:1456:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1579,"nodeType":"Block","src":"6692:138:17","statements":[{"assignments":[1562,1565],"declarations":[{"constant":false,"id":1562,"mutability":"mutable","name":"recovered","nameLocation":"6711:9:17","nodeType":"VariableDeclaration","scope":1579,"src":"6703:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1561,"name":"address","nodeType":"ElementaryTypeName","src":"6703:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1565,"mutability":"mutable","name":"error","nameLocation":"6735:5:17","nodeType":"VariableDeclaration","scope":1579,"src":"6722:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"},"typeName":{"id":1564,"nodeType":"UserDefinedTypeName","pathNode":{"id":1563,"name":"RecoverError","nameLocations":["6722:12:17"],"nodeType":"IdentifierPath","referencedDeclaration":1289,"src":"6722:12:17"},"referencedDeclaration":1289,"src":"6722:12:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}},"visibility":"internal"}],"id":1572,"initialValue":{"arguments":[{"id":1567,"name":"hash","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1550,"src":"6755:4:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1568,"name":"v","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1552,"src":"6761:1:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},{"id":1569,"name":"r","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1554,"src":"6764:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":1570,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1556,"src":"6767:1:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint8","typeString":"uint8"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"id":1566,"name":"tryRecover","nodeType":"Identifier","overloadedDeclarations":[1379,1453,1547],"referencedDeclaration":1547,"src":"6744:10:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"function (bytes32,uint8,bytes32,bytes32) pure returns (address,enum ECDSA.RecoverError)"}},"id":1571,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6744:25:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$_t_address_$_t_enum$_RecoverError_$1289_$","typeString":"tuple(address,enum ECDSA.RecoverError)"}},"nodeType":"VariableDeclarationStatement","src":"6702:67:17"},{"expression":{"arguments":[{"id":1574,"name":"error","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1565,"src":"6791:5:17","typeDescriptions":{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_enum$_RecoverError_$1289","typeString":"enum ECDSA.RecoverError"}],"id":1573,"name":"_throwError","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1333,"src":"6779:11:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_enum$_RecoverError_$1289_$returns$__$","typeString":"function (enum ECDSA.RecoverError) pure"}},"id":1575,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6779:18:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1576,"nodeType":"ExpressionStatement","src":"6779:18:17"},{"expression":{"id":1577,"name":"recovered","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1562,"src":"6814:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"functionReturnParameters":1560,"id":1578,"nodeType":"Return","src":"6807:16:17"}]},"documentation":{"id":1548,"nodeType":"StructuredDocumentation","src":"6471:122:17","text":" @dev Overload of {ECDSA-recover} that receives the `v`,\n `r` and `s` signature fields separately."},"id":1580,"implemented":true,"kind":"function","modifiers":[],"name":"recover","nameLocation":"6607:7:17","nodeType":"FunctionDefinition","parameters":{"id":1557,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1550,"mutability":"mutable","name":"hash","nameLocation":"6623:4:17","nodeType":"VariableDeclaration","scope":1580,"src":"6615:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1549,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6615:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1552,"mutability":"mutable","name":"v","nameLocation":"6635:1:17","nodeType":"VariableDeclaration","scope":1580,"src":"6629:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"},"typeName":{"id":1551,"name":"uint8","nodeType":"ElementaryTypeName","src":"6629:5:17","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"visibility":"internal"},{"constant":false,"id":1554,"mutability":"mutable","name":"r","nameLocation":"6646:1:17","nodeType":"VariableDeclaration","scope":1580,"src":"6638:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1553,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6638:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1556,"mutability":"mutable","name":"s","nameLocation":"6657:1:17","nodeType":"VariableDeclaration","scope":1580,"src":"6649:9:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1555,"name":"bytes32","nodeType":"ElementaryTypeName","src":"6649:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"6614:45:17"},"returnParameters":{"id":1560,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1559,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1580,"src":"6683:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1558,"name":"address","nodeType":"ElementaryTypeName","src":"6683:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"6682:9:17"},"scope":1645,"src":"6598:232:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1589,"nodeType":"Block","src":"7206:310:17","statements":[{"AST":{"nativeSrc":"7362:148:17","nodeType":"YulBlock","src":"7362:148:17","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"7383:4:17","nodeType":"YulLiteral","src":"7383:4:17","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"7389:34:17","nodeType":"YulLiteral","src":"7389:34:17","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"7376:6:17","nodeType":"YulIdentifier","src":"7376:6:17"},"nativeSrc":"7376:48:17","nodeType":"YulFunctionCall","src":"7376:48:17"},"nativeSrc":"7376:48:17","nodeType":"YulExpressionStatement","src":"7376:48:17"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"7444:4:17","nodeType":"YulLiteral","src":"7444:4:17","type":"","value":"0x1c"},{"name":"hash","nativeSrc":"7450:4:17","nodeType":"YulIdentifier","src":"7450:4:17"}],"functionName":{"name":"mstore","nativeSrc":"7437:6:17","nodeType":"YulIdentifier","src":"7437:6:17"},"nativeSrc":"7437:18:17","nodeType":"YulFunctionCall","src":"7437:18:17"},"nativeSrc":"7437:18:17","nodeType":"YulExpressionStatement","src":"7437:18:17"},{"nativeSrc":"7468:32:17","nodeType":"YulAssignment","src":"7468:32:17","value":{"arguments":[{"kind":"number","nativeSrc":"7489:4:17","nodeType":"YulLiteral","src":"7489:4:17","type":"","value":"0x00"},{"kind":"number","nativeSrc":"7495:4:17","nodeType":"YulLiteral","src":"7495:4:17","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"7479:9:17","nodeType":"YulIdentifier","src":"7479:9:17"},"nativeSrc":"7479:21:17","nodeType":"YulFunctionCall","src":"7479:21:17"},"variableNames":[{"name":"message","nativeSrc":"7468:7:17","nodeType":"YulIdentifier","src":"7468:7:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1583,"isOffset":false,"isSlot":false,"src":"7450:4:17","valueSize":1},{"declaration":1586,"isOffset":false,"isSlot":false,"src":"7468:7:17","valueSize":1}],"id":1588,"nodeType":"InlineAssembly","src":"7353:157:17"}]},"documentation":{"id":1581,"nodeType":"StructuredDocumentation","src":"6836:279:17","text":" @dev Returns an Ethereum Signed Message, created from a `hash`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1590,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7129:22:17","nodeType":"FunctionDefinition","parameters":{"id":1584,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1583,"mutability":"mutable","name":"hash","nameLocation":"7160:4:17","nodeType":"VariableDeclaration","scope":1590,"src":"7152:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1582,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7152:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7151:14:17"},"returnParameters":{"id":1587,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1586,"mutability":"mutable","name":"message","nameLocation":"7197:7:17","nodeType":"VariableDeclaration","scope":1590,"src":"7189:15:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1585,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7189:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7188:17:17"},"scope":1645,"src":"7120:396:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1611,"nodeType":"Block","src":"7881:116:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":1601,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"7925:32:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"expression":{"id":1604,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"7976:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":1605,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7978:6:17","memberName":"length","nodeType":"MemberAccess","src":"7976:8:17","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":1602,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1279,"src":"7959:7:17","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$1279_$","typeString":"type(library Strings)"}},"id":1603,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"7967:8:17","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":1109,"src":"7959:16:17","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":1606,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7959:26:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}},{"id":1607,"name":"s","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1593,"src":"7987:1:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1599,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"7908:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1600,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"7912:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"7908:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1608,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7908:81:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1598,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"7898:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1609,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7898:92:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1597,"id":1610,"nodeType":"Return","src":"7891:99:17"}]},"documentation":{"id":1591,"nodeType":"StructuredDocumentation","src":"7522:274:17","text":" @dev Returns an Ethereum Signed Message, created from `s`. This\n produces hash corresponding to the one signed with the\n https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\n JSON-RPC method as part of EIP-191.\n See {recover}."},"id":1612,"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"7810:22:17","nodeType":"FunctionDefinition","parameters":{"id":1594,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1593,"mutability":"mutable","name":"s","nameLocation":"7846:1:17","nodeType":"VariableDeclaration","scope":1612,"src":"7833:14:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1592,"name":"bytes","nodeType":"ElementaryTypeName","src":"7833:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"7832:16:17"},"returnParameters":{"id":1597,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1596,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1612,"src":"7872:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1595,"name":"bytes32","nodeType":"ElementaryTypeName","src":"7872:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"7871:9:17"},"scope":1645,"src":"7801:196:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1623,"nodeType":"Block","src":"8443:290:17","statements":[{"AST":{"nativeSrc":"8505:222:17","nodeType":"YulBlock","src":"8505:222:17","statements":[{"nativeSrc":"8519:22:17","nodeType":"YulVariableDeclaration","src":"8519:22:17","value":{"arguments":[{"kind":"number","nativeSrc":"8536:4:17","nodeType":"YulLiteral","src":"8536:4:17","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"8530:5:17","nodeType":"YulIdentifier","src":"8530:5:17"},"nativeSrc":"8530:11:17","nodeType":"YulFunctionCall","src":"8530:11:17"},"variables":[{"name":"ptr","nativeSrc":"8523:3:17","nodeType":"YulTypedName","src":"8523:3:17","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"8561:3:17","nodeType":"YulIdentifier","src":"8561:3:17"},{"hexValue":"1901","kind":"string","nativeSrc":"8566:10:17","nodeType":"YulLiteral","src":"8566:10:17","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"8554:6:17","nodeType":"YulIdentifier","src":"8554:6:17"},"nativeSrc":"8554:23:17","nodeType":"YulFunctionCall","src":"8554:23:17"},"nativeSrc":"8554:23:17","nodeType":"YulExpressionStatement","src":"8554:23:17"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"8601:3:17","nodeType":"YulIdentifier","src":"8601:3:17"},{"kind":"number","nativeSrc":"8606:4:17","nodeType":"YulLiteral","src":"8606:4:17","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"8597:3:17","nodeType":"YulIdentifier","src":"8597:3:17"},"nativeSrc":"8597:14:17","nodeType":"YulFunctionCall","src":"8597:14:17"},{"name":"domainSeparator","nativeSrc":"8613:15:17","nodeType":"YulIdentifier","src":"8613:15:17"}],"functionName":{"name":"mstore","nativeSrc":"8590:6:17","nodeType":"YulIdentifier","src":"8590:6:17"},"nativeSrc":"8590:39:17","nodeType":"YulFunctionCall","src":"8590:39:17"},"nativeSrc":"8590:39:17","nodeType":"YulExpressionStatement","src":"8590:39:17"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"8653:3:17","nodeType":"YulIdentifier","src":"8653:3:17"},{"kind":"number","nativeSrc":"8658:4:17","nodeType":"YulLiteral","src":"8658:4:17","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"8649:3:17","nodeType":"YulIdentifier","src":"8649:3:17"},"nativeSrc":"8649:14:17","nodeType":"YulFunctionCall","src":"8649:14:17"},{"name":"structHash","nativeSrc":"8665:10:17","nodeType":"YulIdentifier","src":"8665:10:17"}],"functionName":{"name":"mstore","nativeSrc":"8642:6:17","nodeType":"YulIdentifier","src":"8642:6:17"},"nativeSrc":"8642:34:17","nodeType":"YulFunctionCall","src":"8642:34:17"},"nativeSrc":"8642:34:17","nodeType":"YulExpressionStatement","src":"8642:34:17"},{"nativeSrc":"8689:28:17","nodeType":"YulAssignment","src":"8689:28:17","value":{"arguments":[{"name":"ptr","nativeSrc":"8707:3:17","nodeType":"YulIdentifier","src":"8707:3:17"},{"kind":"number","nativeSrc":"8712:4:17","nodeType":"YulLiteral","src":"8712:4:17","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"8697:9:17","nodeType":"YulIdentifier","src":"8697:9:17"},"nativeSrc":"8697:20:17","nodeType":"YulFunctionCall","src":"8697:20:17"},"variableNames":[{"name":"data","nativeSrc":"8689:4:17","nodeType":"YulIdentifier","src":"8689:4:17"}]}]},"documentation":"@solidity memory-safe-assembly","evmVersion":"paris","externalReferences":[{"declaration":1620,"isOffset":false,"isSlot":false,"src":"8689:4:17","valueSize":1},{"declaration":1615,"isOffset":false,"isSlot":false,"src":"8613:15:17","valueSize":1},{"declaration":1617,"isOffset":false,"isSlot":false,"src":"8665:10:17","valueSize":1}],"id":1622,"nodeType":"InlineAssembly","src":"8496:231:17"}]},"documentation":{"id":1613,"nodeType":"StructuredDocumentation","src":"8003:328:17","text":" @dev Returns an Ethereum Signed Typed Data, created from a\n `domainSeparator` and a `structHash`. This produces hash corresponding\n to the one signed with the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\n JSON-RPC method as part of EIP-712.\n See {recover}."},"id":1624,"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"8345:15:17","nodeType":"FunctionDefinition","parameters":{"id":1618,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1615,"mutability":"mutable","name":"domainSeparator","nameLocation":"8369:15:17","nodeType":"VariableDeclaration","scope":1624,"src":"8361:23:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1614,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8361:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":1617,"mutability":"mutable","name":"structHash","nameLocation":"8394:10:17","nodeType":"VariableDeclaration","scope":1624,"src":"8386:18:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1616,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8386:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8360:45:17"},"returnParameters":{"id":1621,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1620,"mutability":"mutable","name":"data","nameLocation":"8437:4:17","nodeType":"VariableDeclaration","scope":1624,"src":"8429:12:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1619,"name":"bytes32","nodeType":"ElementaryTypeName","src":"8429:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"8428:14:17"},"scope":1645,"src":"8336:397:17","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1643,"nodeType":"Block","src":"9048:80:17","statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":1637,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"9092:10:17","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":1638,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1627,"src":"9104:9:17","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":1639,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1629,"src":"9115:4:17","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":1635,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"9075:3:17","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":1636,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9079:12:17","memberName":"encodePacked","nodeType":"MemberAccess","src":"9075:16:17","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":1640,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9075:45:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":1634,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"9065:9:17","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":1641,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9065:56:17","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":1633,"id":1642,"nodeType":"Return","src":"9058:63:17"}]},"documentation":{"id":1625,"nodeType":"StructuredDocumentation","src":"8739:193:17","text":" @dev Returns an Ethereum Signed Data with intended validator, created from a\n `validator` and `data` according to the version 0 of EIP-191.\n See {recover}."},"id":1644,"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"8946:31:17","nodeType":"FunctionDefinition","parameters":{"id":1630,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1627,"mutability":"mutable","name":"validator","nameLocation":"8986:9:17","nodeType":"VariableDeclaration","scope":1644,"src":"8978:17:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":1626,"name":"address","nodeType":"ElementaryTypeName","src":"8978:7:17","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":1629,"mutability":"mutable","name":"data","nameLocation":"9010:4:17","nodeType":"VariableDeclaration","scope":1644,"src":"8997:17:17","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":1628,"name":"bytes","nodeType":"ElementaryTypeName","src":"8997:5:17","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"8977:38:17"},"returnParameters":{"id":1633,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1632,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1644,"src":"9039:7:17","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":1631,"name":"bytes32","nodeType":"ElementaryTypeName","src":"9039:7:17","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"9038:9:17"},"scope":1645,"src":"8937:191:17","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":1646,"src":"369:8761:17","usedErrors":[],"usedEvents":[]}],"src":"112:9019:17"},"id":17},"@openzeppelin/contracts/utils/math/Math.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/Math.sol","exportedSymbols":{"Math":[2511]},"id":2512,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":1647,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"103:23:18"},{"abstract":false,"baseContracts":[],"canonicalName":"Math","contractDependencies":[],"contractKind":"library","documentation":{"id":1648,"nodeType":"StructuredDocumentation","src":"128:73:18","text":" @dev Standard math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2511,"linearizedBaseContracts":[2511],"name":"Math","nameLocation":"210:4:18","nodeType":"ContractDefinition","nodes":[{"canonicalName":"Math.Rounding","id":1652,"members":[{"id":1649,"name":"Down","nameLocation":"245:4:18","nodeType":"EnumValue","src":"245:4:18"},{"id":1650,"name":"Up","nameLocation":"287:2:18","nodeType":"EnumValue","src":"287:2:18"},{"id":1651,"name":"Zero","nameLocation":"318:4:18","nodeType":"EnumValue","src":"318:4:18"}],"name":"Rounding","nameLocation":"226:8:18","nodeType":"EnumDefinition","src":"221:122:18"},{"body":{"id":1669,"nodeType":"Block","src":"480:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1664,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1662,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"497:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1663,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"501:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"497:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1666,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1657,"src":"509:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1667,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"497:13:18","trueExpression":{"id":1665,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1655,"src":"505:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1661,"id":1668,"nodeType":"Return","src":"490:20:18"}]},"documentation":{"id":1653,"nodeType":"StructuredDocumentation","src":"349:59:18","text":" @dev Returns the largest of two numbers."},"id":1670,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"422:3:18","nodeType":"FunctionDefinition","parameters":{"id":1658,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1655,"mutability":"mutable","name":"a","nameLocation":"434:1:18","nodeType":"VariableDeclaration","scope":1670,"src":"426:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1654,"name":"uint256","nodeType":"ElementaryTypeName","src":"426:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1657,"mutability":"mutable","name":"b","nameLocation":"445:1:18","nodeType":"VariableDeclaration","scope":1670,"src":"437:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1656,"name":"uint256","nodeType":"ElementaryTypeName","src":"437:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"425:22:18"},"returnParameters":{"id":1661,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1660,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1670,"src":"471:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1659,"name":"uint256","nodeType":"ElementaryTypeName","src":"471:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"470:9:18"},"scope":2511,"src":"413:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1687,"nodeType":"Block","src":"655:37:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1682,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1680,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"672:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":1681,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"676:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"672:5:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":1684,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1675,"src":"684:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1685,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"672:13:18","trueExpression":{"id":1683,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1673,"src":"680:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1679,"id":1686,"nodeType":"Return","src":"665:20:18"}]},"documentation":{"id":1671,"nodeType":"StructuredDocumentation","src":"523:60:18","text":" @dev Returns the smallest of two numbers."},"id":1688,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"597:3:18","nodeType":"FunctionDefinition","parameters":{"id":1676,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1673,"mutability":"mutable","name":"a","nameLocation":"609:1:18","nodeType":"VariableDeclaration","scope":1688,"src":"601:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1672,"name":"uint256","nodeType":"ElementaryTypeName","src":"601:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1675,"mutability":"mutable","name":"b","nameLocation":"620:1:18","nodeType":"VariableDeclaration","scope":1688,"src":"612:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1674,"name":"uint256","nodeType":"ElementaryTypeName","src":"612:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"600:22:18"},"returnParameters":{"id":1679,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1678,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1688,"src":"646:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1677,"name":"uint256","nodeType":"ElementaryTypeName","src":"646:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"645:9:18"},"scope":2511,"src":"588:104:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1710,"nodeType":"Block","src":"876:82:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1700,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1698,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"931:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":1699,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"935:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"931:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1701,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"930:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1707,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1704,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1702,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1691,"src":"941:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":1703,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1693,"src":"945:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"941:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1705,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"940:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"hexValue":"32","id":1706,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"950:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"940:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"930:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1697,"id":1709,"nodeType":"Return","src":"923:28:18"}]},"documentation":{"id":1689,"nodeType":"StructuredDocumentation","src":"698:102:18","text":" @dev Returns the average of two numbers. The result is rounded towards\n zero."},"id":1711,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"814:7:18","nodeType":"FunctionDefinition","parameters":{"id":1694,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1691,"mutability":"mutable","name":"a","nameLocation":"830:1:18","nodeType":"VariableDeclaration","scope":1711,"src":"822:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1690,"name":"uint256","nodeType":"ElementaryTypeName","src":"822:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1693,"mutability":"mutable","name":"b","nameLocation":"841:1:18","nodeType":"VariableDeclaration","scope":1711,"src":"833:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1692,"name":"uint256","nodeType":"ElementaryTypeName","src":"833:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"821:22:18"},"returnParameters":{"id":1697,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1696,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1711,"src":"867:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1695,"name":"uint256","nodeType":"ElementaryTypeName","src":"867:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"866:9:18"},"scope":2511,"src":"805:153:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1735,"nodeType":"Block","src":"1228:123:18","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1723,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1721,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"1316:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1722,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1321:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1316:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1732,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1730,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1727,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1725,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1714,"src":"1330:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"hexValue":"31","id":1726,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1334:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1330:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1728,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"1329:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1729,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1716,"src":"1339:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1329:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1731,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1343:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"1329:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1733,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1316:28:18","trueExpression":{"hexValue":"30","id":1724,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1325:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1720,"id":1734,"nodeType":"Return","src":"1309:35:18"}]},"documentation":{"id":1712,"nodeType":"StructuredDocumentation","src":"964:188:18","text":" @dev Returns the ceiling of the division of two numbers.\n This differs from standard division with `/` in that it rounds up instead\n of rounding down."},"id":1736,"implemented":true,"kind":"function","modifiers":[],"name":"ceilDiv","nameLocation":"1166:7:18","nodeType":"FunctionDefinition","parameters":{"id":1717,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1714,"mutability":"mutable","name":"a","nameLocation":"1182:1:18","nodeType":"VariableDeclaration","scope":1736,"src":"1174:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1713,"name":"uint256","nodeType":"ElementaryTypeName","src":"1174:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1716,"mutability":"mutable","name":"b","nameLocation":"1193:1:18","nodeType":"VariableDeclaration","scope":1736,"src":"1185:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1715,"name":"uint256","nodeType":"ElementaryTypeName","src":"1185:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1173:22:18"},"returnParameters":{"id":1720,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1719,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1736,"src":"1219:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1718,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1218:9:18"},"scope":2511,"src":"1157:194:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1858,"nodeType":"Block","src":"1765:4115:18","statements":[{"id":1857,"nodeType":"UncheckedBlock","src":"1775:4099:18","statements":[{"assignments":[1749],"declarations":[{"constant":false,"id":1749,"mutability":"mutable","name":"prod0","nameLocation":"2104:5:18","nodeType":"VariableDeclaration","scope":1857,"src":"2096:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1748,"name":"uint256","nodeType":"ElementaryTypeName","src":"2096:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1750,"nodeType":"VariableDeclarationStatement","src":"2096:13:18"},{"assignments":[1752],"declarations":[{"constant":false,"id":1752,"mutability":"mutable","name":"prod1","nameLocation":"2176:5:18","nodeType":"VariableDeclaration","scope":1857,"src":"2168:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1751,"name":"uint256","nodeType":"ElementaryTypeName","src":"2168:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1753,"nodeType":"VariableDeclarationStatement","src":"2168:13:18"},{"AST":{"nativeSrc":"2248:157:18","nodeType":"YulBlock","src":"2248:157:18","statements":[{"nativeSrc":"2266:30:18","nodeType":"YulVariableDeclaration","src":"2266:30:18","value":{"arguments":[{"name":"x","nativeSrc":"2283:1:18","nodeType":"YulIdentifier","src":"2283:1:18"},{"name":"y","nativeSrc":"2286:1:18","nodeType":"YulIdentifier","src":"2286:1:18"},{"arguments":[{"kind":"number","nativeSrc":"2293:1:18","nodeType":"YulLiteral","src":"2293:1:18","type":"","value":"0"}],"functionName":{"name":"not","nativeSrc":"2289:3:18","nodeType":"YulIdentifier","src":"2289:3:18"},"nativeSrc":"2289:6:18","nodeType":"YulFunctionCall","src":"2289:6:18"}],"functionName":{"name":"mulmod","nativeSrc":"2276:6:18","nodeType":"YulIdentifier","src":"2276:6:18"},"nativeSrc":"2276:20:18","nodeType":"YulFunctionCall","src":"2276:20:18"},"variables":[{"name":"mm","nativeSrc":"2270:2:18","nodeType":"YulTypedName","src":"2270:2:18","type":""}]},{"nativeSrc":"2313:18:18","nodeType":"YulAssignment","src":"2313:18:18","value":{"arguments":[{"name":"x","nativeSrc":"2326:1:18","nodeType":"YulIdentifier","src":"2326:1:18"},{"name":"y","nativeSrc":"2329:1:18","nodeType":"YulIdentifier","src":"2329:1:18"}],"functionName":{"name":"mul","nativeSrc":"2322:3:18","nodeType":"YulIdentifier","src":"2322:3:18"},"nativeSrc":"2322:9:18","nodeType":"YulFunctionCall","src":"2322:9:18"},"variableNames":[{"name":"prod0","nativeSrc":"2313:5:18","nodeType":"YulIdentifier","src":"2313:5:18"}]},{"nativeSrc":"2348:43:18","nodeType":"YulAssignment","src":"2348:43:18","value":{"arguments":[{"arguments":[{"name":"mm","nativeSrc":"2365:2:18","nodeType":"YulIdentifier","src":"2365:2:18"},{"name":"prod0","nativeSrc":"2369:5:18","nodeType":"YulIdentifier","src":"2369:5:18"}],"functionName":{"name":"sub","nativeSrc":"2361:3:18","nodeType":"YulIdentifier","src":"2361:3:18"},"nativeSrc":"2361:14:18","nodeType":"YulFunctionCall","src":"2361:14:18"},{"arguments":[{"name":"mm","nativeSrc":"2380:2:18","nodeType":"YulIdentifier","src":"2380:2:18"},{"name":"prod0","nativeSrc":"2384:5:18","nodeType":"YulIdentifier","src":"2384:5:18"}],"functionName":{"name":"lt","nativeSrc":"2377:2:18","nodeType":"YulIdentifier","src":"2377:2:18"},"nativeSrc":"2377:13:18","nodeType":"YulFunctionCall","src":"2377:13:18"}],"functionName":{"name":"sub","nativeSrc":"2357:3:18","nodeType":"YulIdentifier","src":"2357:3:18"},"nativeSrc":"2357:34:18","nodeType":"YulFunctionCall","src":"2357:34:18"},"variableNames":[{"name":"prod1","nativeSrc":"2348:5:18","nodeType":"YulIdentifier","src":"2348:5:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2313:5:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2369:5:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"2384:5:18","valueSize":1},{"declaration":1752,"isOffset":false,"isSlot":false,"src":"2348:5:18","valueSize":1},{"declaration":1739,"isOffset":false,"isSlot":false,"src":"2283:1:18","valueSize":1},{"declaration":1739,"isOffset":false,"isSlot":false,"src":"2326:1:18","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"2286:1:18","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"2329:1:18","valueSize":1}],"id":1754,"nodeType":"InlineAssembly","src":"2239:166:18"},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1757,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1755,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"2486:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1756,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"2495:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"2486:10:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1763,"nodeType":"IfStatement","src":"2482:368:18","trueBody":{"id":1762,"nodeType":"Block","src":"2498:352:18","statements":[{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1760,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1758,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"2816:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1759,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"2824:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2816:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1747,"id":1761,"nodeType":"Return","src":"2809:26:18"}]}},{"expression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1767,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1765,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"2960:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":1766,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"2974:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2960:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},{"hexValue":"4d6174683a206d756c446976206f766572666c6f77","id":1768,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2981:23:18","typeDescriptions":{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""},"value":"Math: mulDiv overflow"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bool","typeString":"bool"},{"typeIdentifier":"t_stringliteral_d87093691d63b122ac2c14d1b11554b287e2431cf2b03550b3be7cffb0f86851","typeString":"literal_string \"Math: mulDiv overflow\""}],"id":1764,"name":"require","nodeType":"Identifier","overloadedDeclarations":[-18,-18],"referencedDeclaration":-18,"src":"2952:7:18","typeDescriptions":{"typeIdentifier":"t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$","typeString":"function (bool,string memory) pure"}},"id":1769,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2952:53:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":1770,"nodeType":"ExpressionStatement","src":"2952:53:18"},{"assignments":[1772],"declarations":[{"constant":false,"id":1772,"mutability":"mutable","name":"remainder","nameLocation":"3269:9:18","nodeType":"VariableDeclaration","scope":1857,"src":"3261:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1771,"name":"uint256","nodeType":"ElementaryTypeName","src":"3261:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1773,"nodeType":"VariableDeclarationStatement","src":"3261:17:18"},{"AST":{"nativeSrc":"3301:291:18","nodeType":"YulBlock","src":"3301:291:18","statements":[{"nativeSrc":"3370:38:18","nodeType":"YulAssignment","src":"3370:38:18","value":{"arguments":[{"name":"x","nativeSrc":"3390:1:18","nodeType":"YulIdentifier","src":"3390:1:18"},{"name":"y","nativeSrc":"3393:1:18","nodeType":"YulIdentifier","src":"3393:1:18"},{"name":"denominator","nativeSrc":"3396:11:18","nodeType":"YulIdentifier","src":"3396:11:18"}],"functionName":{"name":"mulmod","nativeSrc":"3383:6:18","nodeType":"YulIdentifier","src":"3383:6:18"},"nativeSrc":"3383:25:18","nodeType":"YulFunctionCall","src":"3383:25:18"},"variableNames":[{"name":"remainder","nativeSrc":"3370:9:18","nodeType":"YulIdentifier","src":"3370:9:18"}]},{"nativeSrc":"3490:41:18","nodeType":"YulAssignment","src":"3490:41:18","value":{"arguments":[{"name":"prod1","nativeSrc":"3503:5:18","nodeType":"YulIdentifier","src":"3503:5:18"},{"arguments":[{"name":"remainder","nativeSrc":"3513:9:18","nodeType":"YulIdentifier","src":"3513:9:18"},{"name":"prod0","nativeSrc":"3524:5:18","nodeType":"YulIdentifier","src":"3524:5:18"}],"functionName":{"name":"gt","nativeSrc":"3510:2:18","nodeType":"YulIdentifier","src":"3510:2:18"},"nativeSrc":"3510:20:18","nodeType":"YulFunctionCall","src":"3510:20:18"}],"functionName":{"name":"sub","nativeSrc":"3499:3:18","nodeType":"YulIdentifier","src":"3499:3:18"},"nativeSrc":"3499:32:18","nodeType":"YulFunctionCall","src":"3499:32:18"},"variableNames":[{"name":"prod1","nativeSrc":"3490:5:18","nodeType":"YulIdentifier","src":"3490:5:18"}]},{"nativeSrc":"3548:30:18","nodeType":"YulAssignment","src":"3548:30:18","value":{"arguments":[{"name":"prod0","nativeSrc":"3561:5:18","nodeType":"YulIdentifier","src":"3561:5:18"},{"name":"remainder","nativeSrc":"3568:9:18","nodeType":"YulIdentifier","src":"3568:9:18"}],"functionName":{"name":"sub","nativeSrc":"3557:3:18","nodeType":"YulIdentifier","src":"3557:3:18"},"nativeSrc":"3557:21:18","nodeType":"YulFunctionCall","src":"3557:21:18"},"variableNames":[{"name":"prod0","nativeSrc":"3548:5:18","nodeType":"YulIdentifier","src":"3548:5:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1743,"isOffset":false,"isSlot":false,"src":"3396:11:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"3524:5:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"3548:5:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"3561:5:18","valueSize":1},{"declaration":1752,"isOffset":false,"isSlot":false,"src":"3490:5:18","valueSize":1},{"declaration":1752,"isOffset":false,"isSlot":false,"src":"3503:5:18","valueSize":1},{"declaration":1772,"isOffset":false,"isSlot":false,"src":"3370:9:18","valueSize":1},{"declaration":1772,"isOffset":false,"isSlot":false,"src":"3513:9:18","valueSize":1},{"declaration":1772,"isOffset":false,"isSlot":false,"src":"3568:9:18","valueSize":1},{"declaration":1739,"isOffset":false,"isSlot":false,"src":"3390:1:18","valueSize":1},{"declaration":1741,"isOffset":false,"isSlot":false,"src":"3393:1:18","valueSize":1}],"id":1774,"nodeType":"InlineAssembly","src":"3292:300:18"},{"assignments":[1776],"declarations":[{"constant":false,"id":1776,"mutability":"mutable","name":"twos","nameLocation":"3907:4:18","nodeType":"VariableDeclaration","scope":1857,"src":"3899:12:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1775,"name":"uint256","nodeType":"ElementaryTypeName","src":"3899:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1784,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1783,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1777,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"3914:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1781,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1779,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"~","prefix":true,"src":"3929:12:18","subExpression":{"id":1778,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"3930:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"hexValue":"31","id":1780,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"3944:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"3929:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1782,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"3928:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"3914:32:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"3899:47:18"},{"AST":{"nativeSrc":"3969:362:18","nodeType":"YulBlock","src":"3969:362:18","statements":[{"nativeSrc":"4034:37:18","nodeType":"YulAssignment","src":"4034:37:18","value":{"arguments":[{"name":"denominator","nativeSrc":"4053:11:18","nodeType":"YulIdentifier","src":"4053:11:18"},{"name":"twos","nativeSrc":"4066:4:18","nodeType":"YulIdentifier","src":"4066:4:18"}],"functionName":{"name":"div","nativeSrc":"4049:3:18","nodeType":"YulIdentifier","src":"4049:3:18"},"nativeSrc":"4049:22:18","nodeType":"YulFunctionCall","src":"4049:22:18"},"variableNames":[{"name":"denominator","nativeSrc":"4034:11:18","nodeType":"YulIdentifier","src":"4034:11:18"}]},{"nativeSrc":"4138:25:18","nodeType":"YulAssignment","src":"4138:25:18","value":{"arguments":[{"name":"prod0","nativeSrc":"4151:5:18","nodeType":"YulIdentifier","src":"4151:5:18"},{"name":"twos","nativeSrc":"4158:4:18","nodeType":"YulIdentifier","src":"4158:4:18"}],"functionName":{"name":"div","nativeSrc":"4147:3:18","nodeType":"YulIdentifier","src":"4147:3:18"},"nativeSrc":"4147:16:18","nodeType":"YulFunctionCall","src":"4147:16:18"},"variableNames":[{"name":"prod0","nativeSrc":"4138:5:18","nodeType":"YulIdentifier","src":"4138:5:18"}]},{"nativeSrc":"4278:39:18","nodeType":"YulAssignment","src":"4278:39:18","value":{"arguments":[{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"4298:1:18","nodeType":"YulLiteral","src":"4298:1:18","type":"","value":"0"},{"name":"twos","nativeSrc":"4301:4:18","nodeType":"YulIdentifier","src":"4301:4:18"}],"functionName":{"name":"sub","nativeSrc":"4294:3:18","nodeType":"YulIdentifier","src":"4294:3:18"},"nativeSrc":"4294:12:18","nodeType":"YulFunctionCall","src":"4294:12:18"},{"name":"twos","nativeSrc":"4308:4:18","nodeType":"YulIdentifier","src":"4308:4:18"}],"functionName":{"name":"div","nativeSrc":"4290:3:18","nodeType":"YulIdentifier","src":"4290:3:18"},"nativeSrc":"4290:23:18","nodeType":"YulFunctionCall","src":"4290:23:18"},{"kind":"number","nativeSrc":"4315:1:18","nodeType":"YulLiteral","src":"4315:1:18","type":"","value":"1"}],"functionName":{"name":"add","nativeSrc":"4286:3:18","nodeType":"YulIdentifier","src":"4286:3:18"},"nativeSrc":"4286:31:18","nodeType":"YulFunctionCall","src":"4286:31:18"},"variableNames":[{"name":"twos","nativeSrc":"4278:4:18","nodeType":"YulIdentifier","src":"4278:4:18"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":1743,"isOffset":false,"isSlot":false,"src":"4034:11:18","valueSize":1},{"declaration":1743,"isOffset":false,"isSlot":false,"src":"4053:11:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"4138:5:18","valueSize":1},{"declaration":1749,"isOffset":false,"isSlot":false,"src":"4151:5:18","valueSize":1},{"declaration":1776,"isOffset":false,"isSlot":false,"src":"4066:4:18","valueSize":1},{"declaration":1776,"isOffset":false,"isSlot":false,"src":"4158:4:18","valueSize":1},{"declaration":1776,"isOffset":false,"isSlot":false,"src":"4278:4:18","valueSize":1},{"declaration":1776,"isOffset":false,"isSlot":false,"src":"4301:4:18","valueSize":1},{"declaration":1776,"isOffset":false,"isSlot":false,"src":"4308:4:18","valueSize":1}],"id":1785,"nodeType":"InlineAssembly","src":"3960:371:18"},{"expression":{"id":1790,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1786,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"4397:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"|=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1789,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1787,"name":"prod1","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1752,"src":"4406:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1788,"name":"twos","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1776,"src":"4414:4:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4406:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4397:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1791,"nodeType":"ExpressionStatement","src":"4397:21:18"},{"assignments":[1793],"declarations":[{"constant":false,"id":1793,"mutability":"mutable","name":"inverse","nameLocation":"4744:7:18","nodeType":"VariableDeclaration","scope":1857,"src":"4736:15:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1792,"name":"uint256","nodeType":"ElementaryTypeName","src":"4736:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1800,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1799,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1796,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"33","id":1794,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4755:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1795,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"4759:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4755:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1797,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"4754:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"hexValue":"32","id":1798,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"4774:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"4754:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"4736:39:18"},{"expression":{"id":1807,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1801,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"4992:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1806,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1802,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5003:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1805,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1803,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5007:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1804,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5021:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5007:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5003:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"4992:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1808,"nodeType":"ExpressionStatement","src":"4992:36:18"},{"expression":{"id":1815,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1809,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5061:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1814,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1810,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5072:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1813,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1811,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5076:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1812,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5090:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5076:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5072:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5061:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1816,"nodeType":"ExpressionStatement","src":"5061:36:18"},{"expression":{"id":1823,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1817,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5131:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1822,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5142:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1821,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1819,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5146:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1820,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5160:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5146:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5142:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5131:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1824,"nodeType":"ExpressionStatement","src":"5131:36:18"},{"expression":{"id":1831,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1825,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5201:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1830,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1826,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5212:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1829,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1827,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5216:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1828,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5230:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5216:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5212:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5201:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1832,"nodeType":"ExpressionStatement","src":"5201:36:18"},{"expression":{"id":1839,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1833,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5271:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1838,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1834,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5282:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1837,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1835,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5286:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1836,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5300:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5286:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5282:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5271:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1840,"nodeType":"ExpressionStatement","src":"5271:36:18"},{"expression":{"id":1847,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1841,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5342:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"*=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"32","id":1842,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"5353:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"nodeType":"BinaryOperation","operator":"-","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1845,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1843,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1743,"src":"5357:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1844,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5371:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5357:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5353:25:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5342:36:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1848,"nodeType":"ExpressionStatement","src":"5342:36:18"},{"expression":{"id":1853,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1849,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"5812:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1852,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1850,"name":"prod0","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1749,"src":"5821:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":1851,"name":"inverse","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1793,"src":"5829:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5821:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5812:24:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1854,"nodeType":"ExpressionStatement","src":"5812:24:18"},{"expression":{"id":1855,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1746,"src":"5857:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1747,"id":1856,"nodeType":"Return","src":"5850:13:18"}]}]},"documentation":{"id":1737,"nodeType":"StructuredDocumentation","src":"1357:305:18","text":" @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n with further edits by Uniswap Labs also under MIT license."},"id":1859,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"1676:6:18","nodeType":"FunctionDefinition","parameters":{"id":1744,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1739,"mutability":"mutable","name":"x","nameLocation":"1691:1:18","nodeType":"VariableDeclaration","scope":1859,"src":"1683:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1738,"name":"uint256","nodeType":"ElementaryTypeName","src":"1683:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1741,"mutability":"mutable","name":"y","nameLocation":"1702:1:18","nodeType":"VariableDeclaration","scope":1859,"src":"1694:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1740,"name":"uint256","nodeType":"ElementaryTypeName","src":"1694:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1743,"mutability":"mutable","name":"denominator","nameLocation":"1713:11:18","nodeType":"VariableDeclaration","scope":1859,"src":"1705:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1742,"name":"uint256","nodeType":"ElementaryTypeName","src":"1705:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1682:43:18"},"returnParameters":{"id":1747,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1746,"mutability":"mutable","name":"result","nameLocation":"1757:6:18","nodeType":"VariableDeclaration","scope":1859,"src":"1749:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1745,"name":"uint256","nodeType":"ElementaryTypeName","src":"1749:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1748:16:18"},"scope":2511,"src":"1667:4213:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":1902,"nodeType":"Block","src":"6122:189:18","statements":[{"assignments":[1875],"declarations":[{"constant":false,"id":1875,"mutability":"mutable","name":"result","nameLocation":"6140:6:18","nodeType":"VariableDeclaration","scope":1902,"src":"6132:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1874,"name":"uint256","nodeType":"ElementaryTypeName","src":"6132:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1881,"initialValue":{"arguments":[{"id":1877,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"6156:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1878,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"6159:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1879,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"6162:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1876,"name":"mulDiv","nodeType":"Identifier","overloadedDeclarations":[1859,1903],"referencedDeclaration":1859,"src":"6149:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1880,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6149:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"6132:42:18"},{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":1893,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"id":1885,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1882,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1869,"src":"6188:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":1883,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"6200:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1652_$","typeString":"type(enum Math.Rounding)"}},"id":1884,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"6209:2:18","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1650,"src":"6200:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"src":"6188:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1892,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1887,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1862,"src":"6222:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1888,"name":"y","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1864,"src":"6225:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"id":1889,"name":"denominator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1866,"src":"6228:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1886,"name":"mulmod","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-16,"src":"6215:6:18","typeDescriptions":{"typeIdentifier":"t_function_mulmod_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256,uint256) pure returns (uint256)"}},"id":1890,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"6215:25:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":1891,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6243:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6215:29:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"6188:56:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1899,"nodeType":"IfStatement","src":"6184:98:18","trueBody":{"id":1898,"nodeType":"Block","src":"6246:36:18","statements":[{"expression":{"id":1896,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1894,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"6260:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":1895,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6270:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"6260:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1897,"nodeType":"ExpressionStatement","src":"6260:11:18"}]}},{"expression":{"id":1900,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1875,"src":"6298:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1873,"id":1901,"nodeType":"Return","src":"6291:13:18"}]},"documentation":{"id":1860,"nodeType":"StructuredDocumentation","src":"5886:121:18","text":" @notice Calculates x * y / denominator with full precision, following the selected rounding direction."},"id":1903,"implemented":true,"kind":"function","modifiers":[],"name":"mulDiv","nameLocation":"6021:6:18","nodeType":"FunctionDefinition","parameters":{"id":1870,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1862,"mutability":"mutable","name":"x","nameLocation":"6036:1:18","nodeType":"VariableDeclaration","scope":1903,"src":"6028:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1861,"name":"uint256","nodeType":"ElementaryTypeName","src":"6028:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1864,"mutability":"mutable","name":"y","nameLocation":"6047:1:18","nodeType":"VariableDeclaration","scope":1903,"src":"6039:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1863,"name":"uint256","nodeType":"ElementaryTypeName","src":"6039:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1866,"mutability":"mutable","name":"denominator","nameLocation":"6058:11:18","nodeType":"VariableDeclaration","scope":1903,"src":"6050:19:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1865,"name":"uint256","nodeType":"ElementaryTypeName","src":"6050:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":1869,"mutability":"mutable","name":"rounding","nameLocation":"6080:8:18","nodeType":"VariableDeclaration","scope":1903,"src":"6071:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"typeName":{"id":1868,"nodeType":"UserDefinedTypeName","pathNode":{"id":1867,"name":"Rounding","nameLocations":["6071:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1652,"src":"6071:8:18"},"referencedDeclaration":1652,"src":"6071:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"6027:62:18"},"returnParameters":{"id":1873,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1872,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":1903,"src":"6113:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1871,"name":"uint256","nodeType":"ElementaryTypeName","src":"6113:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6112:9:18"},"scope":2511,"src":"6012:299:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2014,"nodeType":"Block","src":"6587:1585:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1913,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1911,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"6601:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"hexValue":"30","id":1912,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6606:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"6601:6:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":1917,"nodeType":"IfStatement","src":"6597:45:18","trueBody":{"id":1916,"nodeType":"Block","src":"6609:33:18","statements":[{"expression":{"hexValue":"30","id":1914,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"6630:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"functionReturnParameters":1910,"id":1915,"nodeType":"Return","src":"6623:8:18"}]}},{"assignments":[1919],"declarations":[{"constant":false,"id":1919,"mutability":"mutable","name":"result","nameLocation":"7329:6:18","nodeType":"VariableDeclaration","scope":2014,"src":"7321:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1918,"name":"uint256","nodeType":"ElementaryTypeName","src":"7321:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":1928,"initialValue":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1927,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":1920,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7338:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1925,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":1922,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7349:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":1921,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2183,2219],"referencedDeclaration":2183,"src":"7344:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":1923,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"7344:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1924,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7355:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7344:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1926,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7343:14:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7338:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"7321:36:18"},{"id":2013,"nodeType":"UncheckedBlock","src":"7758:408:18","statements":[{"expression":{"id":1938,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1929,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7782:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1937,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1934,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1930,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7792:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1933,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1931,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7801:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1932,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7805:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7801:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7792:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1935,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7791:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1936,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7816:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7791:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7782:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1939,"nodeType":"ExpressionStatement","src":"7782:35:18"},{"expression":{"id":1949,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1940,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7831:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1948,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1945,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1941,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7841:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1944,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1942,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7850:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1943,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7854:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7850:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7841:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1946,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7840:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1947,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7865:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7840:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7831:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1950,"nodeType":"ExpressionStatement","src":"7831:35:18"},{"expression":{"id":1960,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1951,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7880:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1959,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1956,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1952,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7890:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1955,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1953,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7899:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1954,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7903:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7899:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7890:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1957,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7889:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1958,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7914:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7889:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7880:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1961,"nodeType":"ExpressionStatement","src":"7880:35:18"},{"expression":{"id":1971,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1962,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7929:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1970,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1967,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1963,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7939:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1966,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1964,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7948:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1965,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7952:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7948:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7939:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1968,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7938:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1969,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"7963:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7938:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7929:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1972,"nodeType":"ExpressionStatement","src":"7929:35:18"},{"expression":{"id":1982,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1973,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7978:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1981,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1978,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1974,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"7988:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1977,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1975,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"7997:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1976,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8001:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7997:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7988:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1979,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"7987:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1980,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8012:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"7987:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"7978:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1983,"nodeType":"ExpressionStatement","src":"7978:35:18"},{"expression":{"id":1993,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1984,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8027:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1989,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1985,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8037:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1988,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1986,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"8046:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1987,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8050:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8046:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8037:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":1990,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8036:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":1991,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8061:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8036:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8027:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":1994,"nodeType":"ExpressionStatement","src":"8027:35:18"},{"expression":{"id":2004,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":1995,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8076:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2003,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2000,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1996,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8086:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":1999,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":1997,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"8095:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":1998,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8099:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8095:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8086:19:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2001,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8085:21:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2002,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8110:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"8085:26:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8076:35:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2005,"nodeType":"ExpressionStatement","src":"8076:35:18"},{"expression":{"arguments":[{"id":2007,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8136:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2010,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2008,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1906,"src":"8144:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"/","rightExpression":{"id":2009,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1919,"src":"8148:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8144:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2006,"name":"min","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1688,"src":"8132:3:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256,uint256) pure returns (uint256)"}},"id":2011,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8132:23:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":1910,"id":2012,"nodeType":"Return","src":"8125:30:18"}]}]},"documentation":{"id":1904,"nodeType":"StructuredDocumentation","src":"6317:208:18","text":" @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11)."},"id":2015,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"6539:4:18","nodeType":"FunctionDefinition","parameters":{"id":1907,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1906,"mutability":"mutable","name":"a","nameLocation":"6552:1:18","nodeType":"VariableDeclaration","scope":2015,"src":"6544:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1905,"name":"uint256","nodeType":"ElementaryTypeName","src":"6544:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6543:11:18"},"returnParameters":{"id":1910,"nodeType":"ParameterList","parameters":[{"constant":false,"id":1909,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2015,"src":"6578:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":1908,"name":"uint256","nodeType":"ElementaryTypeName","src":"6578:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"6577:9:18"},"scope":2511,"src":"6530:1642:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2050,"nodeType":"Block","src":"8348:161:18","statements":[{"id":2049,"nodeType":"UncheckedBlock","src":"8358:145:18","statements":[{"assignments":[2027],"declarations":[{"constant":false,"id":2027,"mutability":"mutable","name":"result","nameLocation":"8390:6:18","nodeType":"VariableDeclaration","scope":2049,"src":"8382:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2026,"name":"uint256","nodeType":"ElementaryTypeName","src":"8382:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2031,"initialValue":{"arguments":[{"id":2029,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8404:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2028,"name":"sqrt","nodeType":"Identifier","overloadedDeclarations":[2015,2051],"referencedDeclaration":2015,"src":"8399:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2030,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"8399:7:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"8382:24:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2047,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2032,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"8427:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2042,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"id":2036,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2033,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2021,"src":"8437:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2034,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"8449:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1652_$","typeString":"type(enum Math.Rounding)"}},"id":2035,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"8458:2:18","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1650,"src":"8449:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"src":"8437:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2041,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2039,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2037,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"8464:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"*","rightExpression":{"id":2038,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2027,"src":"8473:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:15:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2040,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2018,"src":"8482:1:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"8464:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"8437:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2044,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8490:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2045,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"8437:54:18","trueExpression":{"hexValue":"31","id":2043,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8486:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2046,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"8436:56:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"8427:65:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2025,"id":2048,"nodeType":"Return","src":"8420:72:18"}]}]},"documentation":{"id":2016,"nodeType":"StructuredDocumentation","src":"8178:89:18","text":" @notice Calculates sqrt(a), following the selected rounding direction."},"id":2051,"implemented":true,"kind":"function","modifiers":[],"name":"sqrt","nameLocation":"8281:4:18","nodeType":"FunctionDefinition","parameters":{"id":2022,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2018,"mutability":"mutable","name":"a","nameLocation":"8294:1:18","nodeType":"VariableDeclaration","scope":2051,"src":"8286:9:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2017,"name":"uint256","nodeType":"ElementaryTypeName","src":"8286:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2021,"mutability":"mutable","name":"rounding","nameLocation":"8306:8:18","nodeType":"VariableDeclaration","scope":2051,"src":"8297:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"typeName":{"id":2020,"nodeType":"UserDefinedTypeName","pathNode":{"id":2019,"name":"Rounding","nameLocations":["8297:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1652,"src":"8297:8:18"},"referencedDeclaration":1652,"src":"8297:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"8285:30:18"},"returnParameters":{"id":2025,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2024,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2051,"src":"8339:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2023,"name":"uint256","nodeType":"ElementaryTypeName","src":"8339:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8338:9:18"},"scope":2511,"src":"8272:237:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2182,"nodeType":"Block","src":"8694:922:18","statements":[{"assignments":[2060],"declarations":[{"constant":false,"id":2060,"mutability":"mutable","name":"result","nameLocation":"8712:6:18","nodeType":"VariableDeclaration","scope":2182,"src":"8704:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2059,"name":"uint256","nodeType":"ElementaryTypeName","src":"8704:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2062,"initialValue":{"hexValue":"30","id":2061,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8721:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"8704:18:18"},{"id":2179,"nodeType":"UncheckedBlock","src":"8732:855:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2067,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2065,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2063,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8760:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2064,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8769:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8760:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2066,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8775:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8760:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2077,"nodeType":"IfStatement","src":"8756:99:18","trueBody":{"id":2076,"nodeType":"Block","src":"8778:77:18","statements":[{"expression":{"id":2070,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2068,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8796:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2069,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8806:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8796:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2071,"nodeType":"ExpressionStatement","src":"8796:13:18"},{"expression":{"id":2074,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2072,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8827:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"313238","id":2073,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8837:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"8827:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2075,"nodeType":"ExpressionStatement","src":"8827:13:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2082,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2080,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2078,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8872:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2079,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8881:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8872:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2081,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8886:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8872:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2092,"nodeType":"IfStatement","src":"8868:96:18","trueBody":{"id":2091,"nodeType":"Block","src":"8889:75:18","statements":[{"expression":{"id":2085,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2083,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8907:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2084,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8917:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8907:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2086,"nodeType":"ExpressionStatement","src":"8907:12:18"},{"expression":{"id":2089,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2087,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"8937:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2088,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8947:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"8937:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2090,"nodeType":"ExpressionStatement","src":"8937:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2097,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2095,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2093,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"8981:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2094,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8990:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"8981:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2096,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"8995:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"8981:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2107,"nodeType":"IfStatement","src":"8977:96:18","trueBody":{"id":2106,"nodeType":"Block","src":"8998:75:18","statements":[{"expression":{"id":2100,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2098,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9016:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2099,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9026:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9016:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2101,"nodeType":"ExpressionStatement","src":"9016:12:18"},{"expression":{"id":2104,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2102,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9046:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2103,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9056:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"9046:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2105,"nodeType":"ExpressionStatement","src":"9046:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2112,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2110,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2108,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9090:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2109,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9099:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9090:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2111,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9104:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9090:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2122,"nodeType":"IfStatement","src":"9086:96:18","trueBody":{"id":2121,"nodeType":"Block","src":"9107:75:18","statements":[{"expression":{"id":2115,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2113,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9125:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2114,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9135:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9125:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2116,"nodeType":"ExpressionStatement","src":"9125:12:18"},{"expression":{"id":2119,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2117,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9155:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2118,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9165:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"9155:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2120,"nodeType":"ExpressionStatement","src":"9155:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2127,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2125,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2123,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9199:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2124,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9208:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9199:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2126,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9212:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9199:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2137,"nodeType":"IfStatement","src":"9195:93:18","trueBody":{"id":2136,"nodeType":"Block","src":"9215:73:18","statements":[{"expression":{"id":2130,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2128,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9233:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"38","id":2129,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9243:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9233:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2131,"nodeType":"ExpressionStatement","src":"9233:11:18"},{"expression":{"id":2134,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2132,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9262:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2133,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9272:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"9262:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2135,"nodeType":"ExpressionStatement","src":"9262:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2142,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2140,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2138,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9305:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"34","id":2139,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9314:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9305:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2141,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9318:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9305:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2152,"nodeType":"IfStatement","src":"9301:93:18","trueBody":{"id":2151,"nodeType":"Block","src":"9321:73:18","statements":[{"expression":{"id":2145,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2143,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9339:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"34","id":2144,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9349:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9339:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2146,"nodeType":"ExpressionStatement","src":"9339:11:18"},{"expression":{"id":2149,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2147,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9368:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2148,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9378:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"9368:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2150,"nodeType":"ExpressionStatement","src":"9368:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2157,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2155,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2153,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9411:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"32","id":2154,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9420:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9411:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2156,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9424:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9411:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2167,"nodeType":"IfStatement","src":"9407:93:18","trueBody":{"id":2166,"nodeType":"Block","src":"9427:73:18","statements":[{"expression":{"id":2160,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2158,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9445:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"32","id":2159,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9455:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9445:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2161,"nodeType":"ExpressionStatement","src":"9445:11:18"},{"expression":{"id":2164,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2162,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9474:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2163,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9484:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"9474:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2165,"nodeType":"ExpressionStatement","src":"9474:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2172,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2170,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2168,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2054,"src":"9517:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2169,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9526:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9517:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2171,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9530:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"9517:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2178,"nodeType":"IfStatement","src":"9513:64:18","trueBody":{"id":2177,"nodeType":"Block","src":"9533:44:18","statements":[{"expression":{"id":2175,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2173,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9551:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2174,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9561:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"9551:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2176,"nodeType":"ExpressionStatement","src":"9551:11:18"}]}}]},{"expression":{"id":2180,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2060,"src":"9603:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2058,"id":2181,"nodeType":"Return","src":"9596:13:18"}]},"documentation":{"id":2052,"nodeType":"StructuredDocumentation","src":"8515:113:18","text":" @dev Return the log in base 2, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2183,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"8642:4:18","nodeType":"FunctionDefinition","parameters":{"id":2055,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2054,"mutability":"mutable","name":"value","nameLocation":"8655:5:18","nodeType":"VariableDeclaration","scope":2183,"src":"8647:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2053,"name":"uint256","nodeType":"ElementaryTypeName","src":"8647:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8646:15:18"},"returnParameters":{"id":2058,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2057,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2183,"src":"8685:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2056,"name":"uint256","nodeType":"ElementaryTypeName","src":"8685:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"8684:9:18"},"scope":2511,"src":"8633:983:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2218,"nodeType":"Block","src":"9849:165:18","statements":[{"id":2217,"nodeType":"UncheckedBlock","src":"9859:149:18","statements":[{"assignments":[2195],"declarations":[{"constant":false,"id":2195,"mutability":"mutable","name":"result","nameLocation":"9891:6:18","nodeType":"VariableDeclaration","scope":2217,"src":"9883:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2194,"name":"uint256","nodeType":"ElementaryTypeName","src":"9883:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2199,"initialValue":{"arguments":[{"id":2197,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"9905:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2196,"name":"log2","nodeType":"Identifier","overloadedDeclarations":[2183,2219],"referencedDeclaration":2183,"src":"9900:4:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2198,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"9900:11:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"9883:28:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2215,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2200,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9932:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2210,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"id":2204,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2201,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2189,"src":"9942:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2202,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"9954:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1652_$","typeString":"type(enum Math.Rounding)"}},"id":2203,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"9963:2:18","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1650,"src":"9954:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"src":"9942:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2209,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2207,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2205,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9969:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"id":2206,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2195,"src":"9974:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2208,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2186,"src":"9983:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"9969:19:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"9942:46:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2212,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9995:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2213,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"9942:54:18","trueExpression":{"hexValue":"31","id":2211,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"9991:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2214,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"9941:56:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"9932:65:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2193,"id":2216,"nodeType":"Return","src":"9925:72:18"}]}]},"documentation":{"id":2184,"nodeType":"StructuredDocumentation","src":"9622:142:18","text":" @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2219,"implemented":true,"kind":"function","modifiers":[],"name":"log2","nameLocation":"9778:4:18","nodeType":"FunctionDefinition","parameters":{"id":2190,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2186,"mutability":"mutable","name":"value","nameLocation":"9791:5:18","nodeType":"VariableDeclaration","scope":2219,"src":"9783:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2185,"name":"uint256","nodeType":"ElementaryTypeName","src":"9783:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2189,"mutability":"mutable","name":"rounding","nameLocation":"9807:8:18","nodeType":"VariableDeclaration","scope":2219,"src":"9798:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"typeName":{"id":2188,"nodeType":"UserDefinedTypeName","pathNode":{"id":2187,"name":"Rounding","nameLocations":["9798:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1652,"src":"9798:8:18"},"referencedDeclaration":1652,"src":"9798:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"9782:34:18"},"returnParameters":{"id":2193,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2192,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2219,"src":"9840:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2191,"name":"uint256","nodeType":"ElementaryTypeName","src":"9840:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"9839:9:18"},"scope":2511,"src":"9769:245:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2347,"nodeType":"Block","src":"10201:854:18","statements":[{"assignments":[2228],"declarations":[{"constant":false,"id":2228,"mutability":"mutable","name":"result","nameLocation":"10219:6:18","nodeType":"VariableDeclaration","scope":2347,"src":"10211:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2227,"name":"uint256","nodeType":"ElementaryTypeName","src":"10211:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2230,"initialValue":{"hexValue":"30","id":2229,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10228:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"10211:18:18"},{"id":2344,"nodeType":"UncheckedBlock","src":"10239:787:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2235,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2231,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10267:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2234,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2232,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10276:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2233,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10282:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10276:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10267:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2247,"nodeType":"IfStatement","src":"10263:103:18","trueBody":{"id":2246,"nodeType":"Block","src":"10286:80:18","statements":[{"expression":{"id":2240,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2236,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10304:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"},"id":2239,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2237,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10313:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3634","id":2238,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10319:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10313:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000000000000000000000000000000000000000000000000000_by_1","typeString":"int_const 1000...(57 digits omitted)...0000"}},"src":"10304:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2241,"nodeType":"ExpressionStatement","src":"10304:17:18"},{"expression":{"id":2244,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2242,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10339:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3634","id":2243,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10349:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"10339:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2245,"nodeType":"ExpressionStatement","src":"10339:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2252,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2248,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10383:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2251,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2249,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10392:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2250,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10398:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10392:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10383:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2264,"nodeType":"IfStatement","src":"10379:103:18","trueBody":{"id":2263,"nodeType":"Block","src":"10402:80:18","statements":[{"expression":{"id":2257,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2253,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10420:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"},"id":2256,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2254,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10429:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3332","id":2255,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10435:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10429:8:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000000000000000000000000000_by_1","typeString":"int_const 1000...(25 digits omitted)...0000"}},"src":"10420:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2258,"nodeType":"ExpressionStatement","src":"10420:17:18"},{"expression":{"id":2261,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2259,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10455:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3332","id":2260,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10465:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"10455:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2262,"nodeType":"ExpressionStatement","src":"10455:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2269,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2265,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10499:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2268,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2266,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10508:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2267,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10514:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10508:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10499:17:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2281,"nodeType":"IfStatement","src":"10495:103:18","trueBody":{"id":2280,"nodeType":"Block","src":"10518:80:18","statements":[{"expression":{"id":2274,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2270,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10536:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"},"id":2273,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2271,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10545:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"3136","id":2272,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10551:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10545:8:18","typeDescriptions":{"typeIdentifier":"t_rational_10000000000000000_by_1","typeString":"int_const 10000000000000000"}},"src":"10536:17:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2275,"nodeType":"ExpressionStatement","src":"10536:17:18"},{"expression":{"id":2278,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2276,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10571:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2277,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10581:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"10571:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2279,"nodeType":"ExpressionStatement","src":"10571:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2286,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2282,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10615:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2285,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2283,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10624:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2284,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10630:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10624:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10615:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2298,"nodeType":"IfStatement","src":"10611:100:18","trueBody":{"id":2297,"nodeType":"Block","src":"10633:78:18","statements":[{"expression":{"id":2291,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2287,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10651:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"},"id":2290,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2288,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10660:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"38","id":2289,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10666:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10660:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100000000_by_1","typeString":"int_const 100000000"}},"src":"10651:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2292,"nodeType":"ExpressionStatement","src":"10651:16:18"},{"expression":{"id":2295,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2293,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10685:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2294,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10695:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"10685:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2296,"nodeType":"ExpressionStatement","src":"10685:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2303,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2299,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10728:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2302,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2300,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10737:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2301,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10743:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10737:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10728:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2315,"nodeType":"IfStatement","src":"10724:100:18","trueBody":{"id":2314,"nodeType":"Block","src":"10746:78:18","statements":[{"expression":{"id":2308,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2304,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10764:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"},"id":2307,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2305,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10773:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"34","id":2306,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10779:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10773:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10000_by_1","typeString":"int_const 10000"}},"src":"10764:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2309,"nodeType":"ExpressionStatement","src":"10764:16:18"},{"expression":{"id":2312,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2310,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10798:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2311,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10808:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"10798:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2313,"nodeType":"ExpressionStatement","src":"10798:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2320,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2316,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10841:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2319,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2317,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10850:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2318,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10856:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10850:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10841:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2332,"nodeType":"IfStatement","src":"10837:100:18","trueBody":{"id":2331,"nodeType":"Block","src":"10859:78:18","statements":[{"expression":{"id":2325,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2321,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10877:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"/=","rightHandSide":{"commonType":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"},"id":2324,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2322,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10886:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"32","id":2323,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10892:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10886:7:18","typeDescriptions":{"typeIdentifier":"t_rational_100_by_1","typeString":"int_const 100"}},"src":"10877:16:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2326,"nodeType":"ExpressionStatement","src":"10877:16:18"},{"expression":{"id":2329,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2327,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10911:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2328,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10921:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"10911:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2330,"nodeType":"ExpressionStatement","src":"10911:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2337,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2333,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2222,"src":"10954:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"commonType":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"id":2336,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2334,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10963:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"hexValue":"31","id":2335,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"10969:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10963:7:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"}},"src":"10954:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2343,"nodeType":"IfStatement","src":"10950:66:18","trueBody":{"id":2342,"nodeType":"Block","src":"10972:44:18","statements":[{"expression":{"id":2340,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2338,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"10990:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2339,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11000:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"10990:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2341,"nodeType":"ExpressionStatement","src":"10990:11:18"}]}}]},{"expression":{"id":2345,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2228,"src":"11042:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2226,"id":2346,"nodeType":"Return","src":"11035:13:18"}]},"documentation":{"id":2220,"nodeType":"StructuredDocumentation","src":"10020:114:18","text":" @dev Return the log in base 10, rounded down, of a positive value.\n Returns 0 if given 0."},"id":2348,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"10148:5:18","nodeType":"FunctionDefinition","parameters":{"id":2223,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2222,"mutability":"mutable","name":"value","nameLocation":"10162:5:18","nodeType":"VariableDeclaration","scope":2348,"src":"10154:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2221,"name":"uint256","nodeType":"ElementaryTypeName","src":"10154:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10153:15:18"},"returnParameters":{"id":2226,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2225,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2348,"src":"10192:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2224,"name":"uint256","nodeType":"ElementaryTypeName","src":"10192:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"10191:9:18"},"scope":2511,"src":"10139:916:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2383,"nodeType":"Block","src":"11290:167:18","statements":[{"id":2382,"nodeType":"UncheckedBlock","src":"11300:151:18","statements":[{"assignments":[2360],"declarations":[{"constant":false,"id":2360,"mutability":"mutable","name":"result","nameLocation":"11332:6:18","nodeType":"VariableDeclaration","scope":2382,"src":"11324:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2359,"name":"uint256","nodeType":"ElementaryTypeName","src":"11324:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2364,"initialValue":{"arguments":[{"id":2362,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"11347:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2361,"name":"log10","nodeType":"Identifier","overloadedDeclarations":[2348,2384],"referencedDeclaration":2348,"src":"11341:5:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2363,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"11341:12:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"11324:29:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2380,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2365,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"11374:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2375,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"id":2369,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2366,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2354,"src":"11384:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2367,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"11396:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1652_$","typeString":"type(enum Math.Rounding)"}},"id":2368,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"11405:2:18","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1650,"src":"11396:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"src":"11384:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2374,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2372,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"3130","id":2370,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11411:2:18","typeDescriptions":{"typeIdentifier":"t_rational_10_by_1","typeString":"int_const 10"},"value":"10"},"nodeType":"BinaryOperation","operator":"**","rightExpression":{"id":2371,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2360,"src":"11417:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2373,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2351,"src":"11426:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"11411:20:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"11384:47:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2377,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11438:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2378,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"11384:55:18","trueExpression":{"hexValue":"31","id":2376,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11434:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2379,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"11383:57:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"11374:66:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2358,"id":2381,"nodeType":"Return","src":"11367:73:18"}]}]},"documentation":{"id":2349,"nodeType":"StructuredDocumentation","src":"11061:143:18","text":" @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2384,"implemented":true,"kind":"function","modifiers":[],"name":"log10","nameLocation":"11218:5:18","nodeType":"FunctionDefinition","parameters":{"id":2355,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2351,"mutability":"mutable","name":"value","nameLocation":"11232:5:18","nodeType":"VariableDeclaration","scope":2384,"src":"11224:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2350,"name":"uint256","nodeType":"ElementaryTypeName","src":"11224:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2354,"mutability":"mutable","name":"rounding","nameLocation":"11248:8:18","nodeType":"VariableDeclaration","scope":2384,"src":"11239:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"typeName":{"id":2353,"nodeType":"UserDefinedTypeName","pathNode":{"id":2352,"name":"Rounding","nameLocations":["11239:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1652,"src":"11239:8:18"},"referencedDeclaration":1652,"src":"11239:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"11223:34:18"},"returnParameters":{"id":2358,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2357,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2384,"src":"11281:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2356,"name":"uint256","nodeType":"ElementaryTypeName","src":"11281:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11280:9:18"},"scope":2511,"src":"11209:248:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2470,"nodeType":"Block","src":"11771:600:18","statements":[{"assignments":[2393],"declarations":[{"constant":false,"id":2393,"mutability":"mutable","name":"result","nameLocation":"11789:6:18","nodeType":"VariableDeclaration","scope":2470,"src":"11781:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2392,"name":"uint256","nodeType":"ElementaryTypeName","src":"11781:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2395,"initialValue":{"hexValue":"30","id":2394,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11798:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"nodeType":"VariableDeclarationStatement","src":"11781:18:18"},{"id":2467,"nodeType":"UncheckedBlock","src":"11809:533:18","statements":[{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2400,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2398,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2396,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11837:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"313238","id":2397,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11846:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11837:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2399,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11852:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11837:16:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2410,"nodeType":"IfStatement","src":"11833:98:18","trueBody":{"id":2409,"nodeType":"Block","src":"11855:76:18","statements":[{"expression":{"id":2403,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2401,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11873:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"313238","id":2402,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11883:3:18","typeDescriptions":{"typeIdentifier":"t_rational_128_by_1","typeString":"int_const 128"},"value":"128"},"src":"11873:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2404,"nodeType":"ExpressionStatement","src":"11873:13:18"},{"expression":{"id":2407,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2405,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"11904:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"3136","id":2406,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11914:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"11904:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2408,"nodeType":"ExpressionStatement","src":"11904:12:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2415,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2413,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2411,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11948:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3634","id":2412,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11957:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11948:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2414,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11962:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"11948:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2425,"nodeType":"IfStatement","src":"11944:95:18","trueBody":{"id":2424,"nodeType":"Block","src":"11965:74:18","statements":[{"expression":{"id":2418,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2416,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"11983:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3634","id":2417,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"11993:2:18","typeDescriptions":{"typeIdentifier":"t_rational_64_by_1","typeString":"int_const 64"},"value":"64"},"src":"11983:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2419,"nodeType":"ExpressionStatement","src":"11983:12:18"},{"expression":{"id":2422,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2420,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"12013:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"38","id":2421,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12023:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12013:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2423,"nodeType":"ExpressionStatement","src":"12013:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2430,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2428,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2426,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12056:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3332","id":2427,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12065:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12056:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2429,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12070:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12056:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2440,"nodeType":"IfStatement","src":"12052:95:18","trueBody":{"id":2439,"nodeType":"Block","src":"12073:74:18","statements":[{"expression":{"id":2433,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2431,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12091:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3332","id":2432,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12101:2:18","typeDescriptions":{"typeIdentifier":"t_rational_32_by_1","typeString":"int_const 32"},"value":"32"},"src":"12091:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2434,"nodeType":"ExpressionStatement","src":"12091:12:18"},{"expression":{"id":2437,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2435,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"12121:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"34","id":2436,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12131:1:18","typeDescriptions":{"typeIdentifier":"t_rational_4_by_1","typeString":"int_const 4"},"value":"4"},"src":"12121:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2438,"nodeType":"ExpressionStatement","src":"12121:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2445,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2443,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2441,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12164:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"3136","id":2442,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12173:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12164:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2444,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12178:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12164:15:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2455,"nodeType":"IfStatement","src":"12160:95:18","trueBody":{"id":2454,"nodeType":"Block","src":"12181:74:18","statements":[{"expression":{"id":2448,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2446,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12199:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":">>=","rightHandSide":{"hexValue":"3136","id":2447,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12209:2:18","typeDescriptions":{"typeIdentifier":"t_rational_16_by_1","typeString":"int_const 16"},"value":"16"},"src":"12199:12:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2449,"nodeType":"ExpressionStatement","src":"12199:12:18"},{"expression":{"id":2452,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2450,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"12229:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"32","id":2451,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12239:1:18","typeDescriptions":{"typeIdentifier":"t_rational_2_by_1","typeString":"int_const 2"},"value":"2"},"src":"12229:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2453,"nodeType":"ExpressionStatement","src":"12229:11:18"}]}},{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2460,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2458,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2456,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2387,"src":"12272:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"38","id":2457,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12281:1:18","typeDescriptions":{"typeIdentifier":"t_rational_8_by_1","typeString":"int_const 8"},"value":"8"},"src":"12272:10:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"hexValue":"30","id":2459,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12285:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"12272:14:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2466,"nodeType":"IfStatement","src":"12268:64:18","trueBody":{"id":2465,"nodeType":"Block","src":"12288:44:18","statements":[{"expression":{"id":2463,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2461,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"12306:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"+=","rightHandSide":{"hexValue":"31","id":2462,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12316:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"12306:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2464,"nodeType":"ExpressionStatement","src":"12306:11:18"}]}}]},{"expression":{"id":2468,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2393,"src":"12358:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2391,"id":2469,"nodeType":"Return","src":"12351:13:18"}]},"documentation":{"id":2385,"nodeType":"StructuredDocumentation","src":"11463:240:18","text":" @dev Return the log in base 256, rounded down, of a positive value.\n Returns 0 if given 0.\n Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string."},"id":2471,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"11717:6:18","nodeType":"FunctionDefinition","parameters":{"id":2388,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2387,"mutability":"mutable","name":"value","nameLocation":"11732:5:18","nodeType":"VariableDeclaration","scope":2471,"src":"11724:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2386,"name":"uint256","nodeType":"ElementaryTypeName","src":"11724:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11723:15:18"},"returnParameters":{"id":2391,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2390,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2471,"src":"11762:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2389,"name":"uint256","nodeType":"ElementaryTypeName","src":"11762:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"11761:9:18"},"scope":2511,"src":"11708:663:18","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2509,"nodeType":"Block","src":"12608:174:18","statements":[{"id":2508,"nodeType":"UncheckedBlock","src":"12618:158:18","statements":[{"assignments":[2483],"declarations":[{"constant":false,"id":2483,"mutability":"mutable","name":"result","nameLocation":"12650:6:18","nodeType":"VariableDeclaration","scope":2508,"src":"12642:14:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2482,"name":"uint256","nodeType":"ElementaryTypeName","src":"12642:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2487,"initialValue":{"arguments":[{"id":2485,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"12666:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2484,"name":"log256","nodeType":"Identifier","overloadedDeclarations":[2471,2510],"referencedDeclaration":2471,"src":"12659:6:18","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_uint256_$","typeString":"function (uint256) pure returns (uint256)"}},"id":2486,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"12659:13:18","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"VariableDeclarationStatement","src":"12642:30:18"},{"expression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2506,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2488,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"12693:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"condition":{"commonType":{"typeIdentifier":"t_bool","typeString":"bool"},"id":2501,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"id":2492,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2489,"name":"rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2477,"src":"12703:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"expression":{"id":2490,"name":"Rounding","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1652,"src":"12715:8:18","typeDescriptions":{"typeIdentifier":"t_type$_t_enum$_Rounding_$1652_$","typeString":"type(enum Math.Rounding)"}},"id":2491,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"12724:2:18","memberName":"Up","nodeType":"MemberAccess","referencedDeclaration":1650,"src":"12715:11:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"src":"12703:23:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"nodeType":"BinaryOperation","operator":"&&","rightExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2500,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2498,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"hexValue":"31","id":2493,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12730:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2496,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2494,"name":"result","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2483,"src":"12736:6:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<<","rightExpression":{"hexValue":"33","id":2495,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12746:1:18","typeDescriptions":{"typeIdentifier":"t_rational_3_by_1","typeString":"int_const 3"},"value":"3"},"src":"12736:11:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"id":2497,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12735:13:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:18:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2499,"name":"value","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2474,"src":"12751:5:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"12730:26:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"src":"12703:53:18","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"hexValue":"30","id":2503,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12763:1:18","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"id":2504,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"12703:61:18","trueExpression":{"hexValue":"31","id":2502,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"12759:1:18","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}}],"id":2505,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"12702:63:18","typeDescriptions":{"typeIdentifier":"t_uint8","typeString":"uint8"}},"src":"12693:72:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2481,"id":2507,"nodeType":"Return","src":"12686:79:18"}]}]},"documentation":{"id":2472,"nodeType":"StructuredDocumentation","src":"12377:144:18","text":" @dev Return the log in base 256, following the selected rounding direction, of a positive value.\n Returns 0 if given 0."},"id":2510,"implemented":true,"kind":"function","modifiers":[],"name":"log256","nameLocation":"12535:6:18","nodeType":"FunctionDefinition","parameters":{"id":2478,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2474,"mutability":"mutable","name":"value","nameLocation":"12550:5:18","nodeType":"VariableDeclaration","scope":2510,"src":"12542:13:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2473,"name":"uint256","nodeType":"ElementaryTypeName","src":"12542:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2477,"mutability":"mutable","name":"rounding","nameLocation":"12566:8:18","nodeType":"VariableDeclaration","scope":2510,"src":"12557:17:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"},"typeName":{"id":2476,"nodeType":"UserDefinedTypeName","pathNode":{"id":2475,"name":"Rounding","nameLocations":["12557:8:18"],"nodeType":"IdentifierPath","referencedDeclaration":1652,"src":"12557:8:18"},"referencedDeclaration":1652,"src":"12557:8:18","typeDescriptions":{"typeIdentifier":"t_enum$_Rounding_$1652","typeString":"enum Math.Rounding"}},"visibility":"internal"}],"src":"12541:34:18"},"returnParameters":{"id":2481,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2480,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2510,"src":"12599:7:18","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2479,"name":"uint256","nodeType":"ElementaryTypeName","src":"12599:7:18","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"12598:9:18"},"scope":2511,"src":"12526:256:18","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2512,"src":"202:12582:18","usedErrors":[],"usedEvents":[]}],"src":"103:12682:18"},"id":18},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"ast":{"absolutePath":"@openzeppelin/contracts/utils/math/SignedMath.sol","exportedSymbols":{"SignedMath":[2616]},"id":2617,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2513,"literals":["solidity","^","0.8",".0"],"nodeType":"PragmaDirective","src":"109:23:19"},{"abstract":false,"baseContracts":[],"canonicalName":"SignedMath","contractDependencies":[],"contractKind":"library","documentation":{"id":2514,"nodeType":"StructuredDocumentation","src":"134:80:19","text":" @dev Standard signed math utilities missing in the Solidity language."},"fullyImplemented":true,"id":2616,"linearizedBaseContracts":[2616],"name":"SignedMath","nameLocation":"223:10:19","nodeType":"ContractDefinition","nodes":[{"body":{"id":2531,"nodeType":"Block","src":"375:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2526,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2524,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"392:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">","rightExpression":{"id":2525,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"396:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"392:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2528,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2519,"src":"404:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2529,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"392:13:19","trueExpression":{"id":2527,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2517,"src":"400:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2523,"id":2530,"nodeType":"Return","src":"385:20:19"}]},"documentation":{"id":2515,"nodeType":"StructuredDocumentation","src":"240:66:19","text":" @dev Returns the largest of two signed numbers."},"id":2532,"implemented":true,"kind":"function","modifiers":[],"name":"max","nameLocation":"320:3:19","nodeType":"FunctionDefinition","parameters":{"id":2520,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2517,"mutability":"mutable","name":"a","nameLocation":"331:1:19","nodeType":"VariableDeclaration","scope":2532,"src":"324:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2516,"name":"int256","nodeType":"ElementaryTypeName","src":"324:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2519,"mutability":"mutable","name":"b","nameLocation":"341:1:19","nodeType":"VariableDeclaration","scope":2532,"src":"334:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2518,"name":"int256","nodeType":"ElementaryTypeName","src":"334:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"323:20:19"},"returnParameters":{"id":2523,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2522,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2532,"src":"367:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2521,"name":"int256","nodeType":"ElementaryTypeName","src":"367:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"366:8:19"},"scope":2616,"src":"311:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2549,"nodeType":"Block","src":"554:37:19","statements":[{"expression":{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2544,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2542,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"571:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"id":2543,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"575:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"571:5:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2546,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2537,"src":"583:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2547,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"571:13:19","trueExpression":{"id":2545,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2535,"src":"579:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2541,"id":2548,"nodeType":"Return","src":"564:20:19"}]},"documentation":{"id":2533,"nodeType":"StructuredDocumentation","src":"418:67:19","text":" @dev Returns the smallest of two signed numbers."},"id":2550,"implemented":true,"kind":"function","modifiers":[],"name":"min","nameLocation":"499:3:19","nodeType":"FunctionDefinition","parameters":{"id":2538,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2535,"mutability":"mutable","name":"a","nameLocation":"510:1:19","nodeType":"VariableDeclaration","scope":2550,"src":"503:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2534,"name":"int256","nodeType":"ElementaryTypeName","src":"503:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2537,"mutability":"mutable","name":"b","nameLocation":"520:1:19","nodeType":"VariableDeclaration","scope":2550,"src":"513:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2536,"name":"int256","nodeType":"ElementaryTypeName","src":"513:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"502:20:19"},"returnParameters":{"id":2541,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2540,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2550,"src":"546:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2539,"name":"int256","nodeType":"ElementaryTypeName","src":"546:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"545:8:19"},"scope":2616,"src":"490:101:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2593,"nodeType":"Block","src":"796:162:19","statements":[{"assignments":[2561],"declarations":[{"constant":false,"id":2561,"mutability":"mutable","name":"x","nameLocation":"865:1:19","nodeType":"VariableDeclaration","scope":2593,"src":"858:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2560,"name":"int256","nodeType":"ElementaryTypeName","src":"858:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"id":2574,"initialValue":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2573,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2564,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2562,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"870:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"id":2563,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"874:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"870:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2565,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"869:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2571,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2568,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2566,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"881:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2567,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"885:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"881:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2569,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"880:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"31","id":2570,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"891:1:19","typeDescriptions":{"typeIdentifier":"t_rational_1_by_1","typeString":"int_const 1"},"value":"1"},"src":"880:12:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2572,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"879:14:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"869:24:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"VariableDeclarationStatement","src":"858:35:19"},{"expression":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2591,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2575,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"910:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"+","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2589,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2583,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"arguments":[{"id":2580,"name":"x","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2561,"src":"930:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2579,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"922:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2578,"name":"uint256","nodeType":"ElementaryTypeName","src":"922:7:19","typeDescriptions":{}}},"id":2581,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"922:10:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":">>","rightExpression":{"hexValue":"323535","id":2582,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"936:3:19","typeDescriptions":{"typeIdentifier":"t_rational_255_by_1","typeString":"int_const 255"},"value":"255"},"src":"922:17:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2577,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"915:6:19","typeDescriptions":{"typeIdentifier":"t_type$_t_int256_$","typeString":"type(int256)"},"typeName":{"id":2576,"name":"int256","nodeType":"ElementaryTypeName","src":"915:6:19","typeDescriptions":{}}},"id":2584,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"915:25:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"&","rightExpression":{"components":[{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2587,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2585,"name":"a","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2553,"src":"944:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":"^","rightExpression":{"id":2586,"name":"b","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2555,"src":"948:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"944:5:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2588,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"943:7:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"915:35:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"id":2590,"isConstant":false,"isInlineArray":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"TupleExpression","src":"914:37:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"src":"910:41:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"functionReturnParameters":2559,"id":2592,"nodeType":"Return","src":"903:48:19"}]},"documentation":{"id":2551,"nodeType":"StructuredDocumentation","src":"597:126:19","text":" @dev Returns the average of two signed numbers without overflow.\n The result is rounded towards zero."},"id":2594,"implemented":true,"kind":"function","modifiers":[],"name":"average","nameLocation":"737:7:19","nodeType":"FunctionDefinition","parameters":{"id":2556,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2553,"mutability":"mutable","name":"a","nameLocation":"752:1:19","nodeType":"VariableDeclaration","scope":2594,"src":"745:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2552,"name":"int256","nodeType":"ElementaryTypeName","src":"745:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"},{"constant":false,"id":2555,"mutability":"mutable","name":"b","nameLocation":"762:1:19","nodeType":"VariableDeclaration","scope":2594,"src":"755:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2554,"name":"int256","nodeType":"ElementaryTypeName","src":"755:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"744:20:19"},"returnParameters":{"id":2559,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2558,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2594,"src":"788:6:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2557,"name":"int256","nodeType":"ElementaryTypeName","src":"788:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"787:8:19"},"scope":2616,"src":"728:230:19","stateMutability":"pure","virtual":false,"visibility":"internal"},{"body":{"id":2614,"nodeType":"Block","src":"1102:158:19","statements":[{"id":2613,"nodeType":"UncheckedBlock","src":"1112:142:19","statements":[{"expression":{"arguments":[{"condition":{"commonType":{"typeIdentifier":"t_int256","typeString":"int256"},"id":2606,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2604,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"1227:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"nodeType":"BinaryOperation","operator":">=","rightExpression":{"hexValue":"30","id":2605,"isConstant":false,"isLValue":false,"isPure":true,"kind":"number","lValueRequested":false,"nodeType":"Literal","src":"1232:1:19","typeDescriptions":{"typeIdentifier":"t_rational_0_by_1","typeString":"int_const 0"},"value":"0"},"src":"1227:6:19","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"id":2609,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"-","prefix":true,"src":"1240:2:19","subExpression":{"id":2608,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"1241:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"id":2610,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"1227:15:19","trueExpression":{"id":2607,"name":"n","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2597,"src":"1236:1:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_int256","typeString":"int256"}],"id":2603,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"1219:7:19","typeDescriptions":{"typeIdentifier":"t_type$_t_uint256_$","typeString":"type(uint256)"},"typeName":{"id":2602,"name":"uint256","nodeType":"ElementaryTypeName","src":"1219:7:19","typeDescriptions":{}}},"id":2611,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1219:24:19","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"functionReturnParameters":2601,"id":2612,"nodeType":"Return","src":"1212:31:19"}]}]},"documentation":{"id":2595,"nodeType":"StructuredDocumentation","src":"964:78:19","text":" @dev Returns the absolute unsigned value of a signed value."},"id":2615,"implemented":true,"kind":"function","modifiers":[],"name":"abs","nameLocation":"1056:3:19","nodeType":"FunctionDefinition","parameters":{"id":2598,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2597,"mutability":"mutable","name":"n","nameLocation":"1067:1:19","nodeType":"VariableDeclaration","scope":2615,"src":"1060:8:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"},"typeName":{"id":2596,"name":"int256","nodeType":"ElementaryTypeName","src":"1060:6:19","typeDescriptions":{"typeIdentifier":"t_int256","typeString":"int256"}},"visibility":"internal"}],"src":"1059:10:19"},"returnParameters":{"id":2601,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2600,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2615,"src":"1093:7:19","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2599,"name":"uint256","nodeType":"ElementaryTypeName","src":"1093:7:19","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"1092:9:19"},"scope":2616,"src":"1047:213:19","stateMutability":"pure","virtual":false,"visibility":"internal"}],"scope":2617,"src":"215:1047:19","usedErrors":[],"usedEvents":[]}],"src":"109:1154:19"},"id":19},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/OpenCampusCertificateRevocationRegistry.sol","exportedSymbols":{"ContractOwnership":[32],"ECDSA":[1645],"IIssuersDIDRegistry":[2944],"IRevocationRegistry":[2975],"OpenCampusCertificateRevocationRegistry":[2911],"VcRevoked":[2922]},"id":2912,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2618,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:20"},{"absolutePath":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","file":"@openzeppelin/contracts/utils/cryptography/ECDSA.sol","id":2620,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":1646,"src":"75:75:20","symbolAliases":[{"foreign":{"id":2619,"name":"ECDSA","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":1645,"src":"83:5:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","file":"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol","id":2622,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":33,"src":"170:101:20","symbolAliases":[{"foreign":{"id":2621,"name":"ContractOwnership","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":32,"src":"178:17:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","file":"./interfaces/IIssuersDIDRegistry.sol","id":2624,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":2945,"src":"272:73:20","symbolAliases":[{"foreign":{"id":2623,"name":"IIssuersDIDRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2944,"src":"280:19:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","file":"./interfaces/IRevocationRegistry.sol","id":2626,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":2976,"src":"346:73:20","symbolAliases":[{"foreign":{"id":2625,"name":"IRevocationRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2975,"src":"354:19:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"absolutePath":"contracts/vc/events/RevocationRegistryEvents.sol","file":"./events/RevocationRegistryEvents.sol","id":2628,"nameLocation":"-1:-1:-1","nodeType":"ImportDirective","scope":2912,"sourceUnit":2923,"src":"420:64:20","symbolAliases":[{"foreign":{"id":2627,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"428:9:20","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"abstract":false,"baseContracts":[{"baseName":{"id":2630,"name":"IRevocationRegistry","nameLocations":["644:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":2975,"src":"644:19:20"},"id":2631,"nodeType":"InheritanceSpecifier","src":"644:19:20"},{"baseName":{"id":2632,"name":"ContractOwnership","nameLocations":["665:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"665:17:20"},"id":2633,"nodeType":"InheritanceSpecifier","src":"665:17:20"}],"canonicalName":"OpenCampusCertificateRevocationRegistry","contractDependencies":[],"contractKind":"contract","documentation":{"id":2629,"nodeType":"StructuredDocumentation","src":"486:106:20","text":"@title OpenCampusCertificateRevocationRegistry.\n @notice A registry storing the revocation of VCs."},"fullyImplemented":true,"id":2911,"linearizedBaseContracts":[2911,32,414,431,80,940,126,2975],"name":"OpenCampusCertificateRevocationRegistry","nameLocation":"601:39:20","nodeType":"ContractDefinition","nodes":[{"global":false,"id":2636,"libraryName":{"id":2634,"name":"ECDSA","nameLocations":["695:5:20"],"nodeType":"IdentifierPath","referencedDeclaration":1645,"src":"695:5:20"},"nodeType":"UsingForDirective","src":"689:24:20","typeName":{"id":2635,"name":"bytes32","nodeType":"ElementaryTypeName","src":"705:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}},{"constant":true,"id":2641,"mutability":"constant","name":"EIP712_DOMAIN_NAME","nameLocation":"744:18:20","nodeType":"VariableDeclaration","scope":2911,"src":"719:79:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2637,"name":"bytes32","nodeType":"ElementaryTypeName","src":"719:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"5265766f636174696f6e52656769737472795631","id":2639,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"775:22:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_e951ffb7916e206225d235b0f631570b39e4e0323bc42da6208ae1258c2ecd3e","typeString":"literal_string \"RevocationRegistryV1\""},"value":"RevocationRegistryV1"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_e951ffb7916e206225d235b0f631570b39e4e0323bc42da6208ae1258c2ecd3e","typeString":"literal_string \"RevocationRegistryV1\""}],"id":2638,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"765:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2640,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"765:33:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":2646,"mutability":"constant","name":"REVOKE_TYPEHASH","nameLocation":"829:15:20","nodeType":"VariableDeclaration","scope":2911,"src":"804:102:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2642,"name":"bytes32","nodeType":"ElementaryTypeName","src":"804:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"7265766f6b6556432862797465733332206861736865644973737565724469642c75696e74323536207663496429","id":2644,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"857:48:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_ccd989bd7181bf32a5252e0794fbd3acd778c350d2667f94457755c1849899df","typeString":"literal_string \"revokeVC(bytes32 hashedIssuerDid,uint256 vcId)\""},"value":"revokeVC(bytes32 hashedIssuerDid,uint256 vcId)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_ccd989bd7181bf32a5252e0794fbd3acd778c350d2667f94457755c1849899df","typeString":"literal_string \"revokeVC(bytes32 hashedIssuerDid,uint256 vcId)\""}],"id":2643,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"847:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2645,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"847:59:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":true,"id":2651,"mutability":"constant","name":"BATCH_REVOKE_TYPEHASH","nameLocation":"937:21:20","nodeType":"VariableDeclaration","scope":2911,"src":"912:117:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2647,"name":"bytes32","nodeType":"ElementaryTypeName","src":"912:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"value":{"arguments":[{"hexValue":"62617463685265766f6b655643732862797465733332206861736865644973737565724469642c75696e743235365b5d20766349647329","id":2649,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"971:57:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_74c3c2704ed3af9e8114f76711701f9cef0242b680ea2bdec8423e461f3895ab","typeString":"literal_string \"batchRevokeVCs(bytes32 hashedIssuerDid,uint256[] vcIds)\""},"value":"batchRevokeVCs(bytes32 hashedIssuerDid,uint256[] vcIds)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_74c3c2704ed3af9e8114f76711701f9cef0242b680ea2bdec8423e461f3895ab","typeString":"literal_string \"batchRevokeVCs(bytes32 hashedIssuerDid,uint256[] vcIds)\""}],"id":2648,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"961:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2650,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"961:68:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"constant":false,"id":2654,"mutability":"immutable","name":"DID_REGISTRY","nameLocation":"1075:12:20","nodeType":"VariableDeclaration","scope":2911,"src":"1036:51:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":2653,"nodeType":"UserDefinedTypeName","pathNode":{"id":2652,"name":"IIssuersDIDRegistry","nameLocations":["1036:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":2944,"src":"1036:19:20"},"referencedDeclaration":2944,"src":"1036:19:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"},{"constant":false,"functionSelector":"d394ab5a","id":2660,"mutability":"mutable","name":"revocations","nameLocation":"1149:11:20","nodeType":"VariableDeclaration","scope":2911,"src":"1094:66:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"},"typeName":{"id":2659,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2655,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1102:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Mapping","src":"1094:47:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2658,"keyName":"","keyNameLocation":"-1:-1:-1","keyType":{"id":2656,"name":"uint256","nodeType":"ElementaryTypeName","src":"1121:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Mapping","src":"1113:27:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"},"valueName":"","valueNameLocation":"-1:-1:-1","valueType":{"id":2657,"name":"address","nodeType":"ElementaryTypeName","src":"1132:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}}},"visibility":"public"},{"constant":false,"id":2662,"mutability":"immutable","name":"_DEPLOYMENT_CHAIN_ID","nameLocation":"1193:20:20","nodeType":"VariableDeclaration","scope":2911,"src":"1167:46:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2661,"name":"uint256","nodeType":"ElementaryTypeName","src":"1167:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"private"},{"constant":false,"id":2664,"mutability":"immutable","name":"_DEPLOYMENT_DOMAIN_SEPARATOR","nameLocation":"1245:28:20","nodeType":"VariableDeclaration","scope":2911,"src":"1219:54:20","stateVariable":true,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2663,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1219:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"private"},{"documentation":{"id":2665,"nodeType":"StructuredDocumentation","src":"1280:106:20","text":"@notice Thrown when the recovered issuer and the passed in issuerDid is not allowed in the DIDRegistry"},"errorSelector":"bdbfe216","id":2667,"name":"InvalidIssuer","nameLocation":"1397:13:20","nodeType":"ErrorDefinition","parameters":{"id":2666,"nodeType":"ParameterList","parameters":[],"src":"1410:2:20"},"src":"1391:22:20"},{"body":{"id":2695,"nodeType":"Block","src":"1494:245:20","statements":[{"assignments":[2678],"declarations":[{"constant":false,"id":2678,"mutability":"mutable","name":"chainId","nameLocation":"1512:7:20","nodeType":"VariableDeclaration","scope":2695,"src":"1504:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2677,"name":"uint256","nodeType":"ElementaryTypeName","src":"1504:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2679,"nodeType":"VariableDeclarationStatement","src":"1504:15:20"},{"AST":{"nativeSrc":"1538:44:20","nodeType":"YulBlock","src":"1538:44:20","statements":[{"nativeSrc":"1552:20:20","nodeType":"YulAssignment","src":"1552:20:20","value":{"arguments":[],"functionName":{"name":"chainid","nativeSrc":"1563:7:20","nodeType":"YulIdentifier","src":"1563:7:20"},"nativeSrc":"1563:9:20","nodeType":"YulFunctionCall","src":"1563:9:20"},"variableNames":[{"name":"chainId","nativeSrc":"1552:7:20","nodeType":"YulIdentifier","src":"1552:7:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2678,"isOffset":false,"isSlot":false,"src":"1552:7:20","valueSize":1}],"id":2680,"nodeType":"InlineAssembly","src":"1529:53:20"},{"expression":{"id":2683,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2681,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"1591:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2682,"name":"didRegistry","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2670,"src":"1606:11:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"src":"1591:26:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"id":2684,"nodeType":"ExpressionStatement","src":"1591:26:20"},{"expression":{"id":2687,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2685,"name":"_DEPLOYMENT_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"1627:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2686,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"1650:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"1627:30:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2688,"nodeType":"ExpressionStatement","src":"1627:30:20"},{"expression":{"id":2693,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"id":2689,"name":"_DEPLOYMENT_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"1667:28:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"arguments":[{"id":2691,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2678,"src":"1724:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2690,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"1698:25:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":2692,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"1698:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"src":"1667:65:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2694,"nodeType":"ExpressionStatement","src":"1667:65:20"}]},"id":2696,"implemented":true,"kind":"constructor","modifiers":[{"arguments":[{"expression":{"id":2673,"name":"msg","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-15,"src":"1482:3:20","typeDescriptions":{"typeIdentifier":"t_magic_message","typeString":"msg"}},"id":2674,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"1486:6:20","memberName":"sender","nodeType":"MemberAccess","src":"1482:10:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"id":2675,"kind":"baseConstructorSpecifier","modifierName":{"id":2672,"name":"ContractOwnership","nameLocations":["1464:17:20"],"nodeType":"IdentifierPath","referencedDeclaration":32,"src":"1464:17:20"},"nodeType":"ModifierInvocation","src":"1464:29:20"}],"name":"","nameLocation":"-1:-1:-1","nodeType":"FunctionDefinition","parameters":{"id":2671,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2670,"mutability":"mutable","name":"didRegistry","nameLocation":"1451:11:20","nodeType":"VariableDeclaration","scope":2696,"src":"1431:31:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"},"typeName":{"id":2669,"nodeType":"UserDefinedTypeName","pathNode":{"id":2668,"name":"IIssuersDIDRegistry","nameLocations":["1431:19:20"],"nodeType":"IdentifierPath","referencedDeclaration":2944,"src":"1431:19:20"},"referencedDeclaration":2944,"src":"1431:19:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"visibility":"internal"}],"src":"1430:33:20"},"returnParameters":{"id":2676,"nodeType":"ParameterList","parameters":[],"src":"1494:0:20"},"scope":2911,"src":"1419:320:20","stateMutability":"nonpayable","virtual":false,"visibility":"public"},{"body":{"id":2715,"nodeType":"Block","src":"1988:330:20","statements":[{"assignments":[2703],"declarations":[{"constant":false,"id":2703,"mutability":"mutable","name":"chainId","nameLocation":"2006:7:20","nodeType":"VariableDeclaration","scope":2715,"src":"1998:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2702,"name":"uint256","nodeType":"ElementaryTypeName","src":"1998:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2704,"nodeType":"VariableDeclarationStatement","src":"1998:15:20"},{"AST":{"nativeSrc":"2032:44:20","nodeType":"YulBlock","src":"2032:44:20","statements":[{"nativeSrc":"2046:20:20","nodeType":"YulAssignment","src":"2046:20:20","value":{"arguments":[],"functionName":{"name":"chainid","nativeSrc":"2057:7:20","nodeType":"YulIdentifier","src":"2057:7:20"},"nativeSrc":"2057:9:20","nodeType":"YulFunctionCall","src":"2057:9:20"},"variableNames":[{"name":"chainId","nativeSrc":"2046:7:20","nodeType":"YulIdentifier","src":"2046:7:20"}]}]},"evmVersion":"paris","externalReferences":[{"declaration":2703,"isOffset":false,"isSlot":false,"src":"2046:7:20","valueSize":1}],"id":2705,"nodeType":"InlineAssembly","src":"2023:53:20"},{"expression":{"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2708,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2706,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"2212:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"==","rightExpression":{"id":2707,"name":"_DEPLOYMENT_CHAIN_ID","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2662,"src":"2223:20:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"2212:31:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseExpression":{"arguments":[{"id":2711,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2703,"src":"2303:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2710,"name":"_calculateDomainSeparator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2910,"src":"2277:25:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$_t_uint256_$returns$_t_bytes32_$","typeString":"function (uint256) view returns (bytes32)"}},"id":2712,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2277:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2713,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"Conditional","src":"2212:99:20","trueExpression":{"id":2709,"name":"_DEPLOYMENT_DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2664,"src":"2246:28:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2701,"id":2714,"nodeType":"Return","src":"2205:106:20"}]},"documentation":{"id":2697,"nodeType":"StructuredDocumentation","src":"1745:111:20","text":"@notice Returns the EIP-712 DOMAIN_SEPARATOR.\n @return domainSeparator The EIP-712 domain separator."},"functionSelector":"3644e515","id":2716,"implemented":true,"kind":"function","modifiers":[],"name":"DOMAIN_SEPARATOR","nameLocation":"1923:16:20","nodeType":"FunctionDefinition","parameters":{"id":2698,"nodeType":"ParameterList","parameters":[],"src":"1939:2:20"},"returnParameters":{"id":2701,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2700,"mutability":"mutable","name":"domainSeparator","nameLocation":"1971:15:20","nodeType":"VariableDeclaration","scope":2716,"src":"1963:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2699,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1963:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1962:25:20"},"scope":2911,"src":"1914:404:20","stateMutability":"view","virtual":false,"visibility":"public"},{"baseFunctions":[2974],"body":{"id":2740,"nodeType":"Block","src":"2524:509:20","statements":[{"assignments":[2727],"declarations":[{"constant":false,"id":2727,"mutability":"mutable","name":"revoker","nameLocation":"2919:7:20","nodeType":"VariableDeclaration","scope":2740,"src":"2911:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2726,"name":"address","nodeType":"ElementaryTypeName","src":"2911:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2733,"initialValue":{"baseExpression":{"baseExpression":{"id":2728,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"2929:11:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":2730,"indexExpression":{"id":2729,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"2941:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2929:28:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2732,"indexExpression":{"id":2731,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2721,"src":"2958:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"2929:34:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"2911:52:20"},{"expression":{"arguments":[{"id":2736,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2719,"src":"3001:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2737,"name":"revoker","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2727,"src":"3018:7:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2734,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"2980:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"id":2735,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2993:7:20","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":2934,"src":"2980:20:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":2738,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2980:46:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"functionReturnParameters":2725,"id":2739,"nodeType":"Return","src":"2973:53:20"}]},"documentation":{"id":2717,"nodeType":"StructuredDocumentation","src":"2324:100:20","text":"@param hashedIssuerDid keccak256 hashed issuer Did.\n @param vcId the VC ID to be revoked."},"functionSelector":"a3a2656a","id":2741,"implemented":true,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"2438:9:20","nodeType":"FunctionDefinition","parameters":{"id":2722,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2719,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"2456:15:20","nodeType":"VariableDeclaration","scope":2741,"src":"2448:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2718,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2448:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2721,"mutability":"mutable","name":"vcId","nameLocation":"2481:4:20","nodeType":"VariableDeclaration","scope":2741,"src":"2473:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2720,"name":"uint256","nodeType":"ElementaryTypeName","src":"2473:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"2447:39:20"},"returnParameters":{"id":2725,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2724,"mutability":"mutable","name":"revoked","nameLocation":"2515:7:20","nodeType":"VariableDeclaration","scope":2741,"src":"2510:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2723,"name":"bool","nodeType":"ElementaryTypeName","src":"2510:4:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"2509:14:20"},"scope":2911,"src":"2429:604:20","stateMutability":"view","virtual":false,"visibility":"external"},{"baseFunctions":[2955],"body":{"id":2802,"nodeType":"Block","src":"3555:450:20","statements":[{"assignments":[2752],"declarations":[{"constant":false,"id":2752,"mutability":"mutable","name":"data","nameLocation":"3578:4:20","nodeType":"VariableDeclaration","scope":2802,"src":"3565:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2751,"name":"bytes","nodeType":"ElementaryTypeName","src":"3565:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2767,"initialValue":{"arguments":[{"hexValue":"1901","id":2755,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"3602:10:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"arguments":[],"expression":{"argumentTypes":[],"id":2756,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"3614:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2757,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3614:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":2761,"name":"REVOKE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2646,"src":"3655:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2762,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3672:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2763,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"3689:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":2759,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3644:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2760,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3648:6:20","memberName":"encode","nodeType":"MemberAccess","src":"3644:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2764,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3644:50:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2758,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3634:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2765,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3634:61:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2753,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"3585:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2754,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"3589:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"3585:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2766,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3585:111:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"3565:131:20"},{"assignments":[2769],"declarations":[{"constant":false,"id":2769,"mutability":"mutable","name":"signer","nameLocation":"3714:6:20","nodeType":"VariableDeclaration","scope":2802,"src":"3706:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2768,"name":"address","nodeType":"ElementaryTypeName","src":"3706:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2776,"initialValue":{"arguments":[{"id":2774,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2748,"src":"3747:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":2771,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2752,"src":"3733:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2770,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"3723:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2772,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3723:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2773,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3739:7:20","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"3723:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":2775,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3723:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"3706:51:20"},{"condition":{"arguments":[{"id":2779,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3793:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2780,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"3810:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2777,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"3772:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"id":2778,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"3785:7:20","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":2934,"src":"3772:20:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":2781,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3772:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2800,"nodeType":"Block","src":"3952:47:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2797,"name":"InvalidIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"3973:13:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2798,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3973:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2799,"nodeType":"RevertStatement","src":"3966:22:20"}]},"id":2801,"nodeType":"IfStatement","src":"3768:231:20","trueBody":{"id":2796,"nodeType":"Block","src":"3819:127:20","statements":[{"expression":{"id":2788,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2782,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"3833:11:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":2785,"indexExpression":{"id":2783,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3845:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"3833:28:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2786,"indexExpression":{"id":2784,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"3862:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"3833:34:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2787,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"3870:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"3833:43:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2789,"nodeType":"ExpressionStatement","src":"3833:43:20"},{"eventCall":{"arguments":[{"id":2791,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2744,"src":"3905:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2792,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2769,"src":"3922:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":2793,"name":"vcId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2746,"src":"3930:4:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2790,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"3895:9:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":2794,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"3895:40:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2795,"nodeType":"EmitStatement","src":"3890:45:20"}]}}]},"documentation":{"id":2742,"nodeType":"StructuredDocumentation","src":"3039:419:20","text":"@dev Reverts with `InvalidNonce` when the given nonce is invalid.\n @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\n @dev Emits a `VcRevoked` event when a vc is revoked\n @param hashedIssuerDid keccak256 hashed issuer Did.\n @param vcId the VC ID to be revoked.\n @param signature EIP712 Signature of `revokeVC` function signature, `hashedIssuerDid` and `vcId`"},"functionSelector":"98fc75a2","id":2803,"implemented":true,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"3472:8:20","nodeType":"FunctionDefinition","parameters":{"id":2749,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2744,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"3489:15:20","nodeType":"VariableDeclaration","scope":2803,"src":"3481:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2743,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3481:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2746,"mutability":"mutable","name":"vcId","nameLocation":"3514:4:20","nodeType":"VariableDeclaration","scope":2803,"src":"3506:12:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2745,"name":"uint256","nodeType":"ElementaryTypeName","src":"3506:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2748,"mutability":"mutable","name":"signature","nameLocation":"3535:9:20","nodeType":"VariableDeclaration","scope":2803,"src":"3520:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2747,"name":"bytes","nodeType":"ElementaryTypeName","src":"3520:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"3480:65:20"},"returnParameters":{"id":2750,"nodeType":"ParameterList","parameters":[],"src":"3555:0:20"},"scope":2911,"src":"3463:542:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"baseFunctions":[2965],"body":{"id":2886,"nodeType":"Block","src":"4562:799:20","statements":[{"assignments":[2815],"declarations":[{"constant":false,"id":2815,"mutability":"mutable","name":"data","nameLocation":"4585:4:20","nodeType":"VariableDeclaration","scope":2886,"src":"4572:17:20","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":2814,"name":"bytes","nodeType":"ElementaryTypeName","src":"4572:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"id":2835,"initialValue":{"arguments":[{"hexValue":"1901","id":2818,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"4622:10:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},"value":"\u0019\u0001"},{"arguments":[],"expression":{"argumentTypes":[],"id":2819,"name":"DOMAIN_SEPARATOR","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2716,"src":"4646:16:20","typeDescriptions":{"typeIdentifier":"t_function_internal_view$__$returns$_t_bytes32_$","typeString":"function () view returns (bytes32)"}},"id":2820,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4646:18:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":2824,"name":"BATCH_REVOKE_TYPEHASH","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2651,"src":"4883:21:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2825,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"4906:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"arguments":[{"arguments":[{"id":2829,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"4950:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}],"expression":{"id":2827,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4933:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2828,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4937:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"4933:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2830,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4933:23:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2826,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4923:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2831,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4923:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2822,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4872:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2823,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4876:6:20","memberName":"encode","nodeType":"MemberAccess","src":"4872:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2832,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4872:86:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2821,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4862:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2833,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4862:97:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541","typeString":"literal_string hex\"1901\""},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"}],"expression":{"id":2816,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"4592:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2817,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"4596:12:20","memberName":"encodePacked","nodeType":"MemberAccess","src":"4592:16:20","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2834,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4592:377:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"nodeType":"VariableDeclarationStatement","src":"4572:397:20"},{"assignments":[2837],"declarations":[{"constant":false,"id":2837,"mutability":"mutable","name":"signer","nameLocation":"4987:6:20","nodeType":"VariableDeclaration","scope":2886,"src":"4979:14:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2836,"name":"address","nodeType":"ElementaryTypeName","src":"4979:7:20","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"id":2844,"initialValue":{"arguments":[{"id":2842,"name":"signature","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2811,"src":"5020:9:20","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes calldata"}],"expression":{"arguments":[{"id":2839,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2815,"src":"5006:4:20","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2838,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"4996:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2840,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"id":2841,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5012:7:20","memberName":"recover","nodeType":"MemberAccess","referencedDeclaration":1406,"src":"4996:23:20","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_bytes32_$_t_bytes_memory_ptr_$returns$_t_address_$attached_to$_t_bytes32_$","typeString":"function (bytes32,bytes memory) pure returns (address)"}},"id":2843,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"4996:34:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"VariableDeclarationStatement","src":"4979:51:20"},{"condition":{"arguments":[{"id":2847,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5066:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2848,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"5083:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2845,"name":"DID_REGISTRY","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2654,"src":"5045:12:20","typeDescriptions":{"typeIdentifier":"t_contract$_IIssuersDIDRegistry_$2944","typeString":"contract IIssuersDIDRegistry"}},"id":2846,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5058:7:20","memberName":"issuers","nodeType":"MemberAccess","referencedDeclaration":2934,"src":"5045:20:20","typeDescriptions":{"typeIdentifier":"t_function_external_view$_t_bytes32_$_t_address_$returns$_t_bool_$","typeString":"function (bytes32,address) view external returns (bool)"}},"id":2849,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5045:45:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"falseBody":{"id":2884,"nodeType":"Block","src":"5308:47:20","statements":[{"errorCall":{"arguments":[],"expression":{"argumentTypes":[],"id":2881,"name":"InvalidIssuer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2667,"src":"5329:13:20","typeDescriptions":{"typeIdentifier":"t_function_error_pure$__$returns$__$","typeString":"function () pure"}},"id":2882,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5329:15:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2883,"nodeType":"RevertStatement","src":"5322:22:20"}]},"id":2885,"nodeType":"IfStatement","src":"5041:314:20","trueBody":{"id":2880,"nodeType":"Block","src":"5092:210:20","statements":[{"body":{"id":2878,"nodeType":"Block","src":"5145:147:20","statements":[{"expression":{"id":2868,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftHandSide":{"baseExpression":{"baseExpression":{"id":2860,"name":"revocations","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2660,"src":"5163:11:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_bytes32_$_t_mapping$_t_uint256_$_t_address_$_$","typeString":"mapping(bytes32 => mapping(uint256 => address))"}},"id":2865,"indexExpression":{"id":2861,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5175:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5163:28:20","typeDescriptions":{"typeIdentifier":"t_mapping$_t_uint256_$_t_address_$","typeString":"mapping(uint256 => address)"}},"id":2866,"indexExpression":{"baseExpression":{"id":2862,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5192:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2864,"indexExpression":{"id":2863,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"5198:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5192:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":true,"isPure":false,"lValueRequested":true,"nodeType":"IndexAccess","src":"5163:38:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"nodeType":"Assignment","operator":"=","rightHandSide":{"id":2867,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"5204:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"src":"5163:47:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"id":2869,"nodeType":"ExpressionStatement","src":"5163:47:20"},{"eventCall":{"arguments":[{"id":2871,"name":"hashedIssuerDid","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2806,"src":"5243:15:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2872,"name":"signer","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2837,"src":"5260:6:20","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"baseExpression":{"id":2873,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5268:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2875,"indexExpression":{"id":2874,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"5274:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"IndexAccess","src":"5268:8:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_uint256","typeString":"uint256"}],"id":2870,"name":"VcRevoked","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2922,"src":"5233:9:20","typeDescriptions":{"typeIdentifier":"t_function_event_nonpayable$_t_bytes32_$_t_address_$_t_uint256_$returns$__$","typeString":"function (bytes32,address,uint256)"}},"id":2876,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5233:44:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_tuple$__$","typeString":"tuple()"}},"id":2877,"nodeType":"EmitStatement","src":"5228:49:20"}]},"condition":{"commonType":{"typeIdentifier":"t_uint256","typeString":"uint256"},"id":2856,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"leftExpression":{"id":2853,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"5122:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"nodeType":"BinaryOperation","operator":"<","rightExpression":{"expression":{"id":2854,"name":"vcIds","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2809,"src":"5126:5:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[] calldata"}},"id":2855,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"5132:6:20","memberName":"length","nodeType":"MemberAccess","src":"5126:12:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"src":"5122:16:20","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"id":2879,"initializationExpression":{"assignments":[2851],"declarations":[{"constant":false,"id":2851,"mutability":"mutable","name":"i","nameLocation":"5119:1:20","nodeType":"VariableDeclaration","scope":2879,"src":"5111:9:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2850,"name":"uint256","nodeType":"ElementaryTypeName","src":"5111:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"id":2852,"nodeType":"VariableDeclarationStatement","src":"5111:9:20"},"isSimpleCounterLoop":true,"loopExpression":{"expression":{"id":2858,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"nodeType":"UnaryOperation","operator":"++","prefix":false,"src":"5140:3:20","subExpression":{"id":2857,"name":"i","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2851,"src":"5140:1:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2859,"nodeType":"ExpressionStatement","src":"5140:3:20"},"nodeType":"ForStatement","src":"5106:186:20"}]}}]},"documentation":{"id":2804,"nodeType":"StructuredDocumentation","src":"4011:436:20","text":"@dev Reverts with `InvalidNonce` when the given nonce is invalid.\n @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\n @dev Emits a `VcRevoked` event when a vc is revoked\n @param hashedIssuerDid keccak256 hashed issuer Did.\n @param vcIds the list of VC IDs to be revoked.\n @param signature EIP712 Signature of `batchRevokeVCs` function signature, `hashedIssuerDid` and `vcIds`"},"functionSelector":"e688c27b","id":2887,"implemented":true,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"4461:14:20","nodeType":"FunctionDefinition","parameters":{"id":2812,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2806,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"4484:15:20","nodeType":"VariableDeclaration","scope":2887,"src":"4476:23:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2805,"name":"bytes32","nodeType":"ElementaryTypeName","src":"4476:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2809,"mutability":"mutable","name":"vcIds","nameLocation":"4520:5:20","nodeType":"VariableDeclaration","scope":2887,"src":"4501:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2807,"name":"uint256","nodeType":"ElementaryTypeName","src":"4501:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2808,"nodeType":"ArrayTypeName","src":"4501:9:20","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2811,"mutability":"mutable","name":"signature","nameLocation":"4542:9:20","nodeType":"VariableDeclaration","scope":2887,"src":"4527:24:20","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2810,"name":"bytes","nodeType":"ElementaryTypeName","src":"4527:5:20","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"4475:77:20"},"returnParameters":{"id":2813,"nodeType":"ParameterList","parameters":[],"src":"4562:0:20"},"scope":2911,"src":"4452:909:20","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"body":{"id":2909,"nodeType":"Block","src":"5450:311:20","statements":[{"expression":{"arguments":[{"arguments":[{"arguments":[{"hexValue":"454950373132446f6d61696e28737472696e67206e616d652c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429","id":2898,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"5548:69:20","typeDescriptions":{"typeIdentifier":"t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866","typeString":"literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""},"value":"EIP712Domain(string name,uint256 chainId,address verifyingContract)"}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a866","typeString":"literal_string \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\""}],"id":2897,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5538:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2899,"isConstant":false,"isLValue":false,"isPure":true,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5538:80:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2900,"name":"EIP712_DOMAIN_NAME","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2641,"src":"5640:18:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},{"id":2901,"name":"chainId","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":2889,"src":"5680:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},{"arguments":[{"id":2904,"name":"this","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-28,"src":"5717:4:20","typeDescriptions":{"typeIdentifier":"t_contract$_OpenCampusCertificateRevocationRegistry_$2911","typeString":"contract OpenCampusCertificateRevocationRegistry"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_contract$_OpenCampusCertificateRevocationRegistry_$2911","typeString":"contract OpenCampusCertificateRevocationRegistry"}],"id":2903,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"5709:7:20","typeDescriptions":{"typeIdentifier":"t_type$_t_address_$","typeString":"type(address)"},"typeName":{"id":2902,"name":"address","nodeType":"ElementaryTypeName","src":"5709:7:20","typeDescriptions":{}}},"id":2905,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5709:13:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_bytes32","typeString":"bytes32"},{"typeIdentifier":"t_uint256","typeString":"uint256"},{"typeIdentifier":"t_address","typeString":"address"}],"expression":{"id":2895,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"5506:3:20","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":2896,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"5510:6:20","memberName":"encode","nodeType":"MemberAccess","src":"5506:10:20","typeDescriptions":{"typeIdentifier":"t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":2906,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5506:234:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":2894,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"5479:9:20","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":2907,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"5479:275:20","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":2893,"id":2908,"nodeType":"Return","src":"5460:294:20"}]},"id":2910,"implemented":true,"kind":"function","modifiers":[],"name":"_calculateDomainSeparator","nameLocation":"5376:25:20","nodeType":"FunctionDefinition","parameters":{"id":2890,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2889,"mutability":"mutable","name":"chainId","nameLocation":"5410:7:20","nodeType":"VariableDeclaration","scope":2910,"src":"5402:15:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2888,"name":"uint256","nodeType":"ElementaryTypeName","src":"5402:7:20","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"5401:17:20"},"returnParameters":{"id":2893,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2892,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":2910,"src":"5441:7:20","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2891,"name":"bytes32","nodeType":"ElementaryTypeName","src":"5441:7:20","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"5440:9:20"},"scope":2911,"src":"5367:394:20","stateMutability":"view","virtual":false,"visibility":"private"}],"scope":2912,"src":"592:5171:20","usedErrors":[94,419,2667],"usedEvents":[110,2922]}],"src":"32:5732:20"},"id":20},"contracts/vc/events/RevocationRegistryEvents.sol":{"ast":{"absolutePath":"contracts/vc/events/RevocationRegistryEvents.sol","exportedSymbols":{"VcRevoked":[2922]},"id":2923,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2913,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:21"},{"anonymous":false,"documentation":{"id":2914,"nodeType":"StructuredDocumentation","src":"58:226:21","text":"@notice Emitted when `caller` attempts to revoke `vcId`.\n @param hashedIssuerDid the hashed Did for the issuer\n @param caller address of caller that invoked the revocation.\n @param vcId The Id for the VC revoked."},"eventSelector":"2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056","id":2922,"name":"VcRevoked","nameLocation":"290:9:21","nodeType":"EventDefinition","parameters":{"id":2921,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2916,"indexed":true,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"316:15:21","nodeType":"VariableDeclaration","scope":2922,"src":"300:31:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2915,"name":"bytes32","nodeType":"ElementaryTypeName","src":"300:7:21","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2918,"indexed":false,"mutability":"mutable","name":"caller","nameLocation":"341:6:21","nodeType":"VariableDeclaration","scope":2922,"src":"333:14:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2917,"name":"address","nodeType":"ElementaryTypeName","src":"333:7:21","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":2920,"indexed":true,"mutability":"mutable","name":"vcId","nameLocation":"365:4:21","nodeType":"VariableDeclaration","scope":2922,"src":"349:20:21","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2919,"name":"uint256","nodeType":"ElementaryTypeName","src":"349:7:21","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"299:71:21"},"src":"284:87:21"}],"src":"32:341:21"},"id":21},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IIssuersDIDRegistry.sol","exportedSymbols":{"IIssuersDIDRegistry":[2944]},"id":2945,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2924,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:22"},{"abstract":false,"baseContracts":[],"canonicalName":"IIssuersDIDRegistry","contractDependencies":[],"contractKind":"interface","documentation":{"id":2925,"nodeType":"StructuredDocumentation","src":"58:119:22","text":"@title IAllowedIssuersRegistry\n @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs"},"fullyImplemented":false,"id":2944,"linearizedBaseContracts":[2944],"name":"IIssuersDIDRegistry","nameLocation":"187:19:22","nodeType":"ContractDefinition","nodes":[{"functionSelector":"f9236a39","id":2934,"implemented":false,"kind":"function","modifiers":[],"name":"issuers","nameLocation":"222:7:22","nodeType":"FunctionDefinition","parameters":{"id":2930,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2927,"mutability":"mutable","name":"hashedDid","nameLocation":"238:9:22","nodeType":"VariableDeclaration","scope":2934,"src":"230:17:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2926,"name":"bytes32","nodeType":"ElementaryTypeName","src":"230:7:22","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2929,"mutability":"mutable","name":"issuerAddress","nameLocation":"257:13:22","nodeType":"VariableDeclaration","scope":2934,"src":"249:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2928,"name":"address","nodeType":"ElementaryTypeName","src":"249:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"229:42:22"},"returnParameters":{"id":2933,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2932,"mutability":"mutable","name":"allowed","nameLocation":"300:7:22","nodeType":"VariableDeclaration","scope":2934,"src":"295:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2931,"name":"bool","nodeType":"ElementaryTypeName","src":"295:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"294:14:22"},"scope":2944,"src":"213:96:22","stateMutability":"view","virtual":false,"visibility":"external"},{"functionSelector":"6f176f7e","id":2943,"implemented":false,"kind":"function","modifiers":[],"name":"isIssuerAllowed","nameLocation":"324:15:22","nodeType":"FunctionDefinition","parameters":{"id":2939,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2936,"mutability":"mutable","name":"did","nameLocation":"356:3:22","nodeType":"VariableDeclaration","scope":2943,"src":"340:19:22","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_string_calldata_ptr","typeString":"string"},"typeName":{"id":2935,"name":"string","nodeType":"ElementaryTypeName","src":"340:6:22","typeDescriptions":{"typeIdentifier":"t_string_storage_ptr","typeString":"string"}},"visibility":"internal"},{"constant":false,"id":2938,"mutability":"mutable","name":"issuerAddress","nameLocation":"369:13:22","nodeType":"VariableDeclaration","scope":2943,"src":"361:21:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":2937,"name":"address","nodeType":"ElementaryTypeName","src":"361:7:22","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"}],"src":"339:44:22"},"returnParameters":{"id":2942,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2941,"mutability":"mutable","name":"allowed","nameLocation":"412:7:22","nodeType":"VariableDeclaration","scope":2943,"src":"407:12:22","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2940,"name":"bool","nodeType":"ElementaryTypeName","src":"407:4:22","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"406:14:22"},"scope":2944,"src":"315:106:22","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2945,"src":"177:246:22","usedErrors":[],"usedEvents":[]}],"src":"32:392:22"},"id":22},"contracts/vc/interfaces/IRevocationRegistry.sol":{"ast":{"absolutePath":"contracts/vc/interfaces/IRevocationRegistry.sol","exportedSymbols":{"IRevocationRegistry":[2975]},"id":2976,"license":"MIT","nodeType":"SourceUnit","nodes":[{"id":2946,"literals":["solidity","^","0.8",".22"],"nodeType":"PragmaDirective","src":"32:24:23"},{"abstract":false,"baseContracts":[],"canonicalName":"IRevocationRegistry","contractDependencies":[],"contractKind":"interface","fullyImplemented":false,"id":2975,"linearizedBaseContracts":[2975],"name":"IRevocationRegistry","nameLocation":"68:19:23","nodeType":"ContractDefinition","nodes":[{"functionSelector":"98fc75a2","id":2955,"implemented":false,"kind":"function","modifiers":[],"name":"revokeVC","nameLocation":"103:8:23","nodeType":"FunctionDefinition","parameters":{"id":2953,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2948,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"120:15:23","nodeType":"VariableDeclaration","scope":2955,"src":"112:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2947,"name":"bytes32","nodeType":"ElementaryTypeName","src":"112:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2950,"mutability":"mutable","name":"vcId","nameLocation":"145:4:23","nodeType":"VariableDeclaration","scope":2955,"src":"137:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2949,"name":"uint256","nodeType":"ElementaryTypeName","src":"137:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"},{"constant":false,"id":2952,"mutability":"mutable","name":"signature","nameLocation":"166:9:23","nodeType":"VariableDeclaration","scope":2955,"src":"151:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2951,"name":"bytes","nodeType":"ElementaryTypeName","src":"151:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"111:65:23"},"returnParameters":{"id":2954,"nodeType":"ParameterList","parameters":[],"src":"185:0:23"},"scope":2975,"src":"94:92:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"e688c27b","id":2965,"implemented":false,"kind":"function","modifiers":[],"name":"batchRevokeVCs","nameLocation":"201:14:23","nodeType":"FunctionDefinition","parameters":{"id":2963,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2957,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"224:15:23","nodeType":"VariableDeclaration","scope":2965,"src":"216:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2956,"name":"bytes32","nodeType":"ElementaryTypeName","src":"216:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2960,"mutability":"mutable","name":"vcIds","nameLocation":"260:5:23","nodeType":"VariableDeclaration","scope":2965,"src":"241:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_calldata_ptr","typeString":"uint256[]"},"typeName":{"baseType":{"id":2958,"name":"uint256","nodeType":"ElementaryTypeName","src":"241:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"id":2959,"nodeType":"ArrayTypeName","src":"241:9:23","typeDescriptions":{"typeIdentifier":"t_array$_t_uint256_$dyn_storage_ptr","typeString":"uint256[]"}},"visibility":"internal"},{"constant":false,"id":2962,"mutability":"mutable","name":"signature","nameLocation":"282:9:23","nodeType":"VariableDeclaration","scope":2965,"src":"267:24:23","stateVariable":false,"storageLocation":"calldata","typeDescriptions":{"typeIdentifier":"t_bytes_calldata_ptr","typeString":"bytes"},"typeName":{"id":2961,"name":"bytes","nodeType":"ElementaryTypeName","src":"267:5:23","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"215:77:23"},"returnParameters":{"id":2964,"nodeType":"ParameterList","parameters":[],"src":"301:0:23"},"scope":2975,"src":"192:110:23","stateMutability":"nonpayable","virtual":false,"visibility":"external"},{"functionSelector":"a3a2656a","id":2974,"implemented":false,"kind":"function","modifiers":[],"name":"isRevoked","nameLocation":"317:9:23","nodeType":"FunctionDefinition","parameters":{"id":2970,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2967,"mutability":"mutable","name":"hashedIssuerDid","nameLocation":"335:15:23","nodeType":"VariableDeclaration","scope":2974,"src":"327:23:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":2966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"327:7:23","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":2969,"mutability":"mutable","name":"vcId","nameLocation":"360:4:23","nodeType":"VariableDeclaration","scope":2974,"src":"352:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"},"typeName":{"id":2968,"name":"uint256","nodeType":"ElementaryTypeName","src":"352:7:23","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}},"visibility":"internal"}],"src":"326:39:23"},"returnParameters":{"id":2973,"nodeType":"ParameterList","parameters":[{"constant":false,"id":2972,"mutability":"mutable","name":"revoked","nameLocation":"394:7:23","nodeType":"VariableDeclaration","scope":2974,"src":"389:12:23","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"},"typeName":{"id":2971,"name":"bool","nodeType":"ElementaryTypeName","src":"389:4:23","typeDescriptions":{"typeIdentifier":"t_bool","typeString":"bool"}},"visibility":"internal"}],"src":"388:14:23"},"scope":2975,"src":"308:95:23","stateMutability":"view","virtual":false,"visibility":"external"}],"scope":2976,"src":"58:347:23","usedErrors":[],"usedEvents":[]}],"src":"32:374:23"},"id":23}},"contracts":{"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol":{"ContractOwnership":{"abi":[{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"constructor":{"details":"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.","params":{"initialOwner":"the initial contract owner."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (immutable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in an immutable (non-proxied) implementation.\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\",\"params\":{\"initialOwner\":\"the initial contract owner.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (immutable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":\"ContractOwnership\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"constructor":{"notice":"Initializes the storage with an initial contract owner.Marks the following ERC165 interface(s) as supported: ERC173."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol":{"ContractOwnershipBase":{"abi":[{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).","errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}}},"kind":"dev","methods":{"owner()":{"returns":{"_0":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC173 Contract Ownership Standard (proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173This contract is to be used via inheritance in a proxied implementation.Note: This contract requires ERC165 (Interface Detection Standard).\",\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}}},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC173 Contract Ownership Standard (proxiable version).\",\"version\":1},\"userdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"}},\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":\"ContractOwnershipBase\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"errors":{"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."}},"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol":{"IERC173":{"abi":[{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"contractOwner","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0","kind":"dev","methods":{"owner()":{"returns":{"contractOwner":"The address of the contract owner."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"ERC-173 Contract Ownership Standard (functions)","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"owner()":"8da5cb5b","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"contractOwner\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-173Note: the ERC-165 identifier for this interface is 0x7f5828d0\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"returns\":{\"contractOwner\":\"The address of the contract owner.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"ERC-173 Contract Ownership Standard (functions)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":\"IERC173\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"owner()":{"notice":"Gets the address of the contract owner."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"version":1}}},"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol":{"ContractOwnershipStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;595:4646:6;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212205d913d2906a5e99a607a556d5d202187ac2a3d7c278d3b3320c651c7cb75b8bb64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0x5D SWAP2 RETURNDATASIZE 0x29 MOD 0xA5 0xE9 SWAP11 PUSH1 0x7A SSTORE PUSH14 0x5D202187AC2A3D7C278D3B3320C6 MLOAD 0xC7 0xCB PUSH22 0xB8BB64736F6C63430008160033000000000000000000 ","sourceMap":"595:4646:6:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"constructorInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsContractOwner(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","enforceIsTargetContractOwner(address,address)":"infinite","isTargetContractOwner(address,address)":"infinite","layout()":"infinite","owner(struct ContractOwnershipStorage.Layout storage pointer)":"infinite","proxyInit(struct ContractOwnershipStorage.Layout storage pointer,address)":"infinite","transferOwnership(struct ContractOwnershipStorage.Layout storage pointer,address,address)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":\"ContractOwnershipStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol":{"InterfaceDetection":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard (immutable or proxiable version).","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard (immutable or proxiable version).\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":\"InterfaceDetection\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol":{"IERC165":{"abi":[{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"supported","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"details":"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.","kind":"dev","methods":{"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"supported":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}}},"title":"ERC165 Interface Detection Standard.","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"supportsInterface(bytes4)":"01ffc9a7"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"supported\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"See https://eips.ethereum.org/EIPS/eip-165.Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\",\"kind\":\"dev\",\"methods\":{\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"supported\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}}},\"title\":\"ERC165 Interface Detection Standard.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":\"IERC165\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."}},"version":1}}},"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol":{"InterfaceDetectionStorage":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;189:1692:10;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220650411bd7e21cdd933b879336f9c786205ef70bd56990c8c2d79f38c17abe48964736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH6 0x411BD7E21CD 0xD9 CALLER 0xB8 PUSH26 0x336F9C786205EF70BD56990C8C2D79F38C17ABE48964736F6C63 NUMBER STOP ADDMOD AND STOP CALLER ","sourceMap":"189:1692:10:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"layout()":"infinite","setSupportedInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4,bool)":"infinite","supportsInterface(struct InterfaceDetectionStorage.Layout storage pointer,bytes4)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":\"InterfaceDetectionStorage\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol":{"ProxyInitialization":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;319:712:12;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220780e74f7f894b43c4b6ae55acf3b8c8f904e4ec48795de67c5b34d0d3bd1256364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH25 0xE74F7F894B43C4B6AE55ACF3B8C8F904E4EC48795DE67C5B3 0x4D 0xD EXTCODESIZE 0xD1 0x25 PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"319:712:12:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"setPhase(bytes32,uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Multiple calls protection for storage-modifying proxy initialization functions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":\"ProxyInitialization\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Multiple calls protection for storage-modifying proxy initialization functions.","version":1}}},"@openzeppelin/contracts/utils/Address.sol":{"Address":{"abi":[],"devdoc":{"details":"Collection of functions related to the address type","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:13:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;194:9169:13;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220fd70d9dd573116182710f91bf78de265eddaf6985d94037c8a84064c8c34d2e764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 REVERT PUSH17 0xD9DD573116182710F91BF78DE265EDDAF6 SWAP9 0x5D SWAP5 SUB PUSH29 0x8A84064C8C34D2E764736F6C6343000816003300000000000000000000 ","sourceMap":"194:9169:13:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_revert(bytes memory,string memory)":"infinite","functionCall(address,bytes memory)":"infinite","functionCall(address,bytes memory,string memory)":"infinite","functionCallWithValue(address,bytes memory,uint256)":"infinite","functionCallWithValue(address,bytes memory,uint256,string memory)":"infinite","functionDelegateCall(address,bytes memory)":"infinite","functionDelegateCall(address,bytes memory,string memory)":"infinite","functionStaticCall(address,bytes memory)":"infinite","functionStaticCall(address,bytes memory,string memory)":"infinite","isContract(address)":"infinite","sendValue(address payable,uint256)":"infinite","verifyCallResult(bool,bytes memory,string memory)":"infinite","verifyCallResultFromTarget(address,bool,bytes memory,string memory)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Collection of functions related to the address type\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Address.sol\":\"Address\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Context.sol":{"Context":{"abi":[],"devdoc":{"details":"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Context.sol\":\"Context\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/StorageSlot.sol":{"StorageSlot":{"abi":[],"devdoc":{"details":"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \"ERC1967: new implementation is not a contract\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:15:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;1420:2685:15;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220bbedbf053f3eab57d3c7ced2fc991486bae3d6c019082a2358a71e052ccdf16364736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xBB 0xED 0xBF SDIV EXTCODEHASH RETURNDATACOPY 0xAB JUMPI 0xD3 0xC7 0xCE 0xD2 0xFC SWAP10 EQ DUP7 0xBA 0xE3 0xD6 0xC0 NOT ADDMOD 0x2A 0x23 PC 0xA7 0x1E SDIV 0x2C 0xCD CALL PUSH4 0x64736F6C PUSH4 0x43000816 STOP CALLER ","sourceMap":"1420:2685:15:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"getAddressSlot(bytes32)":"infinite","getBooleanSlot(bytes32)":"infinite","getBytes32Slot(bytes32)":"infinite","getBytesSlot(bytes storage pointer)":"infinite","getBytesSlot(bytes32)":"infinite","getStringSlot(bytes32)":"infinite","getStringSlot(string storage pointer)":"infinite","getUint256Slot(bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Library for reading and writing primitive types to specific storage slots. Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts. This library helps with reading and writing to such slots without the need for inline assembly. The functions in this library return Slot structs that contain a `value` member that can be used to read or write. Example usage to set ERC1967 implementation slot: ```solidity contract ERC1967 {     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;     function _getImplementation() internal view returns (address) {         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;     }     function _setImplementation(address newImplementation) internal {         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;     } } ``` _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._ _Available since v4.9 for `string`, `bytes`._\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":\"StorageSlot\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/Strings.sol":{"Strings":{"abi":[],"devdoc":{"details":"String operations.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207dbba0483d34fe4527a1556da07ea1b07a92afd0beb27ef93dc77e58b290a3af64736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xBBA0483D34FE4527A1556DA07EA1B07A92AFD0BEB27EF93DC77E58B290A3 0xAF PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"220:2559:16:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;220:2559:16;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212207dbba0483d34fe4527a1556da07ea1b07a92afd0beb27ef93dc77e58b290a3af64736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH30 0xBBA0483D34FE4527A1556DA07EA1B07A92AFD0BEB27EF93DC77E58B290A3 0xAF PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"220:2559:16:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"equal(string memory,string memory)":"infinite","toHexString(address)":"infinite","toHexString(uint256)":"infinite","toHexString(uint256,uint256)":"infinite","toString(int256)":"infinite","toString(uint256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"String operations.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/Strings.sol\":\"Strings\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/cryptography/ECDSA.sol":{"ECDSA":{"abi":[],"devdoc":{"details":"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eee728818a3219b219b453af3b5629d9f05eadf009a406e02bb0fb2cc2aeb4a764736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xE7 0x28 DUP2 DUP11 ORIGIN NOT 0xB2 NOT 0xB4 MSTORE8 0xAF EXTCODESIZE JUMP 0x29 0xD9 CREATE 0x5E 0xAD CREATE MULMOD LOG4 MOD 0xE0 0x2B 0xB0 0xFB 0x2C 0xC2 0xAE 0xB4 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"369:8761:17:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;369:8761:17;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220eee728818a3219b219b453af3b5629d9f05eadf009a406e02bb0fb2cc2aeb4a764736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xEE 0xE7 0x28 DUP2 DUP11 ORIGIN NOT 0xB2 NOT 0xB4 MSTORE8 0xAF EXTCODESIZE JUMP 0x29 0xD9 CREATE 0x5E 0xAD CREATE MULMOD LOG4 MOD 0xE0 0x2B 0xB0 0xFB 0x2C 0xC2 0xAE 0xB4 0xA7 PUSH5 0x736F6C6343 STOP ADDMOD AND STOP CALLER ","sourceMap":"369:8761:17:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"_throwError(enum ECDSA.RecoverError)":"infinite","recover(bytes32,bytes memory)":"infinite","recover(bytes32,bytes32,bytes32)":"infinite","recover(bytes32,uint8,bytes32,bytes32)":"infinite","toDataWithIntendedValidatorHash(address,bytes memory)":"infinite","toEthSignedMessageHash(bytes memory)":"infinite","toEthSignedMessageHash(bytes32)":"infinite","toTypedDataHash(bytes32,bytes32)":"infinite","tryRecover(bytes32,bytes memory)":"infinite","tryRecover(bytes32,bytes32,bytes32)":"infinite","tryRecover(bytes32,uint8,bytes32,bytes32)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Elliptic Curve Digital Signature Algorithm (ECDSA) operations. These functions can be used to verify that a message was signed by the holder of the private keys of a given address.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":\"ECDSA\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/Math.sol":{"Math":{"abi":[],"devdoc":{"details":"Standard math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cd0ba6907ef97db167a16566a1e9802f382da7e057e429175ea6a78b9a4b4f264736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xD0 0xBA PUSH10 0x7EF97DB167A16566A1E SWAP9 MUL RETURN DUP3 0xDA PUSH31 0x57E429175EA6A78B9A4B4F264736F6C634300081600330000000000000000 ","sourceMap":"202:12582:18:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;202:12582:18;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212200cd0ba6907ef97db167a16566a1e9802f382da7e057e429175ea6a78b9a4b4f264736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xC 0xD0 0xBA PUSH10 0x7EF97DB167A16566A1E SWAP9 MUL RETURN DUP3 0xDA PUSH31 0x57E429175EA6A78B9A4B4F264736F6C634300081600330000000000000000 ","sourceMap":"202:12582:18:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"average(uint256,uint256)":"infinite","ceilDiv(uint256,uint256)":"infinite","log10(uint256)":"infinite","log10(uint256,enum Math.Rounding)":"infinite","log2(uint256)":"infinite","log2(uint256,enum Math.Rounding)":"infinite","log256(uint256)":"infinite","log256(uint256,enum Math.Rounding)":"infinite","max(uint256,uint256)":"infinite","min(uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256)":"infinite","mulDiv(uint256,uint256,uint256,enum Math.Rounding)":"infinite","sqrt(uint256)":"infinite","sqrt(uint256,enum Math.Rounding)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/Math.sol\":\"Math\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"@openzeppelin/contracts/utils/math/SignedMath.sol":{"SignedMath":{"abi":[],"devdoc":{"details":"Standard signed math utilities missing in the Solidity language.","kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd3f075d1f5a8af9fc2d77e07bc04a6884122c77c666778728ce3124bffe685564736f6c63430008160033","opcodes":"PUSH1 0x56 PUSH1 0x37 PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x2A JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x0 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN INVALID PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD EXTCODEHASH SMOD 0x5D 0x1F GAS DUP11 0xF9 0xFC 0x2D PUSH24 0xE07BC04A6884122C77C666778728CE3124BFFE685564736F PUSH13 0x63430008160033000000000000 ","sourceMap":"215:1047:19:-:0;;;;;;;;;;;;;;;-1:-1:-1;;;215:1047:19;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220cd3f075d1f5a8af9fc2d77e07bc04a6884122c77c666778728ce3124bffe685564736f6c63430008160033","opcodes":"PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xCD EXTCODEHASH SMOD 0x5D 0x1F GAS DUP11 0xF9 0xFC 0x2D PUSH24 0xE07BC04A6884122C77C666778728CE3124BFFE685564736F PUSH13 0x63430008160033000000000000 ","sourceMap":"215:1047:19:-:0;;;;;;;;"},"gasEstimates":{"creation":{"codeDepositCost":"17200","executionCost":"103","totalCost":"17303"},"internal":{"abs(int256)":"infinite","average(int256,int256)":"infinite","max(int256,int256)":"infinite","min(int256,int256)":"infinite"}},"methodIdentifiers":{}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Standard signed math utilities missing in the Solidity language.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":\"SignedMath\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}},"contracts/vc/OpenCampusCertificateRevocationRegistry.sol":{"OpenCampusCertificateRevocationRegistry":{"abi":[{"inputs":[{"internalType":"contract IIssuersDIDRegistry","name":"didRegistry","type":"address"}],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"IllegalInterfaceId","type":"error"},{"inputs":[],"name":"InvalidIssuer","type":"error"},{"inputs":[{"internalType":"address","name":"account","type":"address"}],"name":"NotContractOwner","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"indexed":false,"internalType":"address","name":"caller","type":"address"},{"indexed":true,"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"VcRevoked","type":"event"},{"inputs":[],"name":"DOMAIN_SEPARATOR","outputs":[{"internalType":"bytes32","name":"domainSeparator","type":"bytes32"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"uint256","name":"","type":"uint256"}],"name":"revocations","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes4","name":"interfaceId","type":"bytes4"}],"name":"supportsInterface","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"errors":{"NotContractOwner(address)":[{"params":{"account":"The account that was checked."}}]},"events":{"OwnershipTransferred(address,address)":{"params":{"newOwner":"the new contract owner.","previousOwner":"the previous contract owner."}},"VcRevoked(bytes32,address,uint256)":{"params":{"caller":"address of caller that invoked the revocation.","hashedIssuerDid":"the hashed Did for the issuer","vcId":"The Id for the VC revoked."}}},"kind":"dev","methods":{"DOMAIN_SEPARATOR()":{"returns":{"domainSeparator":"The EIP-712 domain separator."}},"batchRevokeVCs(bytes32,uint256[],bytes)":{"details":"Reverts with `InvalidNonce` when the given nonce is invalid.Reverts with `InvalidIssuer` when the recovered issuer is invalid.Emits a `VcRevoked` event when a vc is revoked","params":{"hashedIssuerDid":"keccak256 hashed issuer Did.","signature":"EIP712 Signature of `batchRevokeVCs` function signature, `hashedIssuerDid` and `vcIds`","vcIds":"the list of VC IDs to be revoked."}},"isRevoked(bytes32,uint256)":{"params":{"hashedIssuerDid":"keccak256 hashed issuer Did.","vcId":"the VC ID to be revoked."}},"owner()":{"returns":{"_0":"The address of the contract owner."}},"revokeVC(bytes32,uint256,bytes)":{"details":"Reverts with `InvalidNonce` when the given nonce is invalid.Reverts with `InvalidIssuer` when the recovered issuer is invalid.Emits a `VcRevoked` event when a vc is revoked","params":{"hashedIssuerDid":"keccak256 hashed issuer Did.","signature":"EIP712 Signature of `revokeVC` function signature, `hashedIssuerDid` and `vcId`","vcId":"the VC ID to be revoked."}},"supportsInterface(bytes4)":{"details":"Note: This function call must use less than 30 000 gas.","params":{"interfaceId":"the interface identifier to test."},"returns":{"_0":"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported."}},"transferOwnership(address)":{"details":"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.","params":{"newOwner":"The address of the new contract owner. Using the zero address means renouncing ownership."}}},"title":"OpenCampusCertificateRevocationRegistry.","version":1},"evm":{"bytecode":{"functionDebugData":{"@_2696":{"entryPoint":null,"id":2696,"parameterSlots":1,"returnSlots":0},"@_31":{"entryPoint":null,"id":31,"parameterSlots":1,"returnSlots":0},"@_calculateDomainSeparator_2910":{"entryPoint":null,"id":2910,"parameterSlots":1,"returnSlots":1},"@constructorInit_227":{"entryPoint":275,"id":227,"parameterSlots":2,"returnSlots":0},"@layout_383":{"entryPoint":221,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":398,"id":531,"parameterSlots":0,"returnSlots":1},"@setSupportedInterface_485":{"entryPoint":446,"id":485,"parameterSlots":3,"returnSlots":0},"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$2944_fromMemory":{"entryPoint":539,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":589,"id":null,"parameterSlots":2,"returnSlots":1}},"generatedSources":[{"ast":{"nativeSrc":"0:986:24","nodeType":"YulBlock","src":"0:986:24","statements":[{"nativeSrc":"6:3:24","nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nativeSrc":"123:209:24","nodeType":"YulBlock","src":"123:209:24","statements":[{"body":{"nativeSrc":"169:16:24","nodeType":"YulBlock","src":"169:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"178:1:24","nodeType":"YulLiteral","src":"178:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"181:1:24","nodeType":"YulLiteral","src":"181:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"171:6:24","nodeType":"YulIdentifier","src":"171:6:24"},"nativeSrc":"171:12:24","nodeType":"YulFunctionCall","src":"171:12:24"},"nativeSrc":"171:12:24","nodeType":"YulExpressionStatement","src":"171:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"144:7:24","nodeType":"YulIdentifier","src":"144:7:24"},{"name":"headStart","nativeSrc":"153:9:24","nodeType":"YulIdentifier","src":"153:9:24"}],"functionName":{"name":"sub","nativeSrc":"140:3:24","nodeType":"YulIdentifier","src":"140:3:24"},"nativeSrc":"140:23:24","nodeType":"YulFunctionCall","src":"140:23:24"},{"kind":"number","nativeSrc":"165:2:24","nodeType":"YulLiteral","src":"165:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"136:3:24","nodeType":"YulIdentifier","src":"136:3:24"},"nativeSrc":"136:32:24","nodeType":"YulFunctionCall","src":"136:32:24"},"nativeSrc":"133:52:24","nodeType":"YulIf","src":"133:52:24"},{"nativeSrc":"194:29:24","nodeType":"YulVariableDeclaration","src":"194:29:24","value":{"arguments":[{"name":"headStart","nativeSrc":"213:9:24","nodeType":"YulIdentifier","src":"213:9:24"}],"functionName":{"name":"mload","nativeSrc":"207:5:24","nodeType":"YulIdentifier","src":"207:5:24"},"nativeSrc":"207:16:24","nodeType":"YulFunctionCall","src":"207:16:24"},"variables":[{"name":"value","nativeSrc":"198:5:24","nodeType":"YulTypedName","src":"198:5:24","type":""}]},{"body":{"nativeSrc":"286:16:24","nodeType":"YulBlock","src":"286:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"295:1:24","nodeType":"YulLiteral","src":"295:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"298:1:24","nodeType":"YulLiteral","src":"298:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"288:6:24","nodeType":"YulIdentifier","src":"288:6:24"},"nativeSrc":"288:12:24","nodeType":"YulFunctionCall","src":"288:12:24"},"nativeSrc":"288:12:24","nodeType":"YulExpressionStatement","src":"288:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"245:5:24","nodeType":"YulIdentifier","src":"245:5:24"},{"arguments":[{"name":"value","nativeSrc":"256:5:24","nodeType":"YulIdentifier","src":"256:5:24"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"271:3:24","nodeType":"YulLiteral","src":"271:3:24","type":"","value":"160"},{"kind":"number","nativeSrc":"276:1:24","nodeType":"YulLiteral","src":"276:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"267:3:24","nodeType":"YulIdentifier","src":"267:3:24"},"nativeSrc":"267:11:24","nodeType":"YulFunctionCall","src":"267:11:24"},{"kind":"number","nativeSrc":"280:1:24","nodeType":"YulLiteral","src":"280:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"263:3:24","nodeType":"YulIdentifier","src":"263:3:24"},"nativeSrc":"263:19:24","nodeType":"YulFunctionCall","src":"263:19:24"}],"functionName":{"name":"and","nativeSrc":"252:3:24","nodeType":"YulIdentifier","src":"252:3:24"},"nativeSrc":"252:31:24","nodeType":"YulFunctionCall","src":"252:31:24"}],"functionName":{"name":"eq","nativeSrc":"242:2:24","nodeType":"YulIdentifier","src":"242:2:24"},"nativeSrc":"242:42:24","nodeType":"YulFunctionCall","src":"242:42:24"}],"functionName":{"name":"iszero","nativeSrc":"235:6:24","nodeType":"YulIdentifier","src":"235:6:24"},"nativeSrc":"235:50:24","nodeType":"YulFunctionCall","src":"235:50:24"},"nativeSrc":"232:70:24","nodeType":"YulIf","src":"232:70:24"},{"nativeSrc":"311:15:24","nodeType":"YulAssignment","src":"311:15:24","value":{"name":"value","nativeSrc":"321:5:24","nodeType":"YulIdentifier","src":"321:5:24"},"variableNames":[{"name":"value0","nativeSrc":"311:6:24","nodeType":"YulIdentifier","src":"311:6:24"}]}]},"name":"abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$2944_fromMemory","nativeSrc":"14:318:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"89:9:24","nodeType":"YulTypedName","src":"89:9:24","type":""},{"name":"dataEnd","nativeSrc":"100:7:24","nodeType":"YulTypedName","src":"100:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"112:6:24","nodeType":"YulTypedName","src":"112:6:24","type":""}],"src":"14:318:24"},{"body":{"nativeSrc":"386:176:24","nodeType":"YulBlock","src":"386:176:24","statements":[{"nativeSrc":"396:17:24","nodeType":"YulAssignment","src":"396:17:24","value":{"arguments":[{"name":"x","nativeSrc":"408:1:24","nodeType":"YulIdentifier","src":"408:1:24"},{"name":"y","nativeSrc":"411:1:24","nodeType":"YulIdentifier","src":"411:1:24"}],"functionName":{"name":"sub","nativeSrc":"404:3:24","nodeType":"YulIdentifier","src":"404:3:24"},"nativeSrc":"404:9:24","nodeType":"YulFunctionCall","src":"404:9:24"},"variableNames":[{"name":"diff","nativeSrc":"396:4:24","nodeType":"YulIdentifier","src":"396:4:24"}]},{"body":{"nativeSrc":"445:111:24","nodeType":"YulBlock","src":"445:111:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"466:1:24","nodeType":"YulLiteral","src":"466:1:24","type":"","value":"0"},{"arguments":[{"kind":"number","nativeSrc":"473:3:24","nodeType":"YulLiteral","src":"473:3:24","type":"","value":"224"},{"kind":"number","nativeSrc":"478:10:24","nodeType":"YulLiteral","src":"478:10:24","type":"","value":"0x4e487b71"}],"functionName":{"name":"shl","nativeSrc":"469:3:24","nodeType":"YulIdentifier","src":"469:3:24"},"nativeSrc":"469:20:24","nodeType":"YulFunctionCall","src":"469:20:24"}],"functionName":{"name":"mstore","nativeSrc":"459:6:24","nodeType":"YulIdentifier","src":"459:6:24"},"nativeSrc":"459:31:24","nodeType":"YulFunctionCall","src":"459:31:24"},"nativeSrc":"459:31:24","nodeType":"YulExpressionStatement","src":"459:31:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"510:1:24","nodeType":"YulLiteral","src":"510:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"513:4:24","nodeType":"YulLiteral","src":"513:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"503:6:24","nodeType":"YulIdentifier","src":"503:6:24"},"nativeSrc":"503:15:24","nodeType":"YulFunctionCall","src":"503:15:24"},"nativeSrc":"503:15:24","nodeType":"YulExpressionStatement","src":"503:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"538:1:24","nodeType":"YulLiteral","src":"538:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"541:4:24","nodeType":"YulLiteral","src":"541:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"531:6:24","nodeType":"YulIdentifier","src":"531:6:24"},"nativeSrc":"531:15:24","nodeType":"YulFunctionCall","src":"531:15:24"},"nativeSrc":"531:15:24","nodeType":"YulExpressionStatement","src":"531:15:24"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"428:4:24","nodeType":"YulIdentifier","src":"428:4:24"},{"name":"x","nativeSrc":"434:1:24","nodeType":"YulIdentifier","src":"434:1:24"}],"functionName":{"name":"gt","nativeSrc":"425:2:24","nodeType":"YulIdentifier","src":"425:2:24"},"nativeSrc":"425:11:24","nodeType":"YulFunctionCall","src":"425:11:24"},"nativeSrc":"422:134:24","nodeType":"YulIf","src":"422:134:24"}]},"name":"checked_sub_t_uint256","nativeSrc":"337:225:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"368:1:24","nodeType":"YulTypedName","src":"368:1:24","type":""},{"name":"y","nativeSrc":"371:1:24","nodeType":"YulTypedName","src":"371:1:24","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"377:4:24","nodeType":"YulTypedName","src":"377:4:24","type":""}],"src":"337:225:24"},{"body":{"nativeSrc":"752:232:24","nodeType":"YulBlock","src":"752:232:24","statements":[{"nativeSrc":"762:27:24","nodeType":"YulAssignment","src":"762:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"774:9:24","nodeType":"YulIdentifier","src":"774:9:24"},{"kind":"number","nativeSrc":"785:3:24","nodeType":"YulLiteral","src":"785:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"770:3:24","nodeType":"YulIdentifier","src":"770:3:24"},"nativeSrc":"770:19:24","nodeType":"YulFunctionCall","src":"770:19:24"},"variableNames":[{"name":"tail","nativeSrc":"762:4:24","nodeType":"YulIdentifier","src":"762:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"805:9:24","nodeType":"YulIdentifier","src":"805:9:24"},{"name":"value0","nativeSrc":"816:6:24","nodeType":"YulIdentifier","src":"816:6:24"}],"functionName":{"name":"mstore","nativeSrc":"798:6:24","nodeType":"YulIdentifier","src":"798:6:24"},"nativeSrc":"798:25:24","nodeType":"YulFunctionCall","src":"798:25:24"},"nativeSrc":"798:25:24","nodeType":"YulExpressionStatement","src":"798:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"843:9:24","nodeType":"YulIdentifier","src":"843:9:24"},{"kind":"number","nativeSrc":"854:2:24","nodeType":"YulLiteral","src":"854:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"839:3:24","nodeType":"YulIdentifier","src":"839:3:24"},"nativeSrc":"839:18:24","nodeType":"YulFunctionCall","src":"839:18:24"},{"name":"value1","nativeSrc":"859:6:24","nodeType":"YulIdentifier","src":"859:6:24"}],"functionName":{"name":"mstore","nativeSrc":"832:6:24","nodeType":"YulIdentifier","src":"832:6:24"},"nativeSrc":"832:34:24","nodeType":"YulFunctionCall","src":"832:34:24"},"nativeSrc":"832:34:24","nodeType":"YulExpressionStatement","src":"832:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"886:9:24","nodeType":"YulIdentifier","src":"886:9:24"},{"kind":"number","nativeSrc":"897:2:24","nodeType":"YulLiteral","src":"897:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"882:3:24","nodeType":"YulIdentifier","src":"882:3:24"},"nativeSrc":"882:18:24","nodeType":"YulFunctionCall","src":"882:18:24"},{"name":"value2","nativeSrc":"902:6:24","nodeType":"YulIdentifier","src":"902:6:24"}],"functionName":{"name":"mstore","nativeSrc":"875:6:24","nodeType":"YulIdentifier","src":"875:6:24"},"nativeSrc":"875:34:24","nodeType":"YulFunctionCall","src":"875:34:24"},"nativeSrc":"875:34:24","nodeType":"YulExpressionStatement","src":"875:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"929:9:24","nodeType":"YulIdentifier","src":"929:9:24"},{"kind":"number","nativeSrc":"940:2:24","nodeType":"YulLiteral","src":"940:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"925:3:24","nodeType":"YulIdentifier","src":"925:3:24"},"nativeSrc":"925:18:24","nodeType":"YulFunctionCall","src":"925:18:24"},{"arguments":[{"name":"value3","nativeSrc":"949:6:24","nodeType":"YulIdentifier","src":"949:6:24"},{"arguments":[{"arguments":[{"kind":"number","nativeSrc":"965:3:24","nodeType":"YulLiteral","src":"965:3:24","type":"","value":"160"},{"kind":"number","nativeSrc":"970:1:24","nodeType":"YulLiteral","src":"970:1:24","type":"","value":"1"}],"functionName":{"name":"shl","nativeSrc":"961:3:24","nodeType":"YulIdentifier","src":"961:3:24"},"nativeSrc":"961:11:24","nodeType":"YulFunctionCall","src":"961:11:24"},{"kind":"number","nativeSrc":"974:1:24","nodeType":"YulLiteral","src":"974:1:24","type":"","value":"1"}],"functionName":{"name":"sub","nativeSrc":"957:3:24","nodeType":"YulIdentifier","src":"957:3:24"},"nativeSrc":"957:19:24","nodeType":"YulFunctionCall","src":"957:19:24"}],"functionName":{"name":"and","nativeSrc":"945:3:24","nodeType":"YulIdentifier","src":"945:3:24"},"nativeSrc":"945:32:24","nodeType":"YulFunctionCall","src":"945:32:24"}],"functionName":{"name":"mstore","nativeSrc":"918:6:24","nodeType":"YulIdentifier","src":"918:6:24"},"nativeSrc":"918:60:24","nodeType":"YulFunctionCall","src":"918:60:24"},"nativeSrc":"918:60:24","nodeType":"YulExpressionStatement","src":"918:60:24"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"567:417:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"697:9:24","nodeType":"YulTypedName","src":"697:9:24","type":""},{"name":"value3","nativeSrc":"708:6:24","nodeType":"YulTypedName","src":"708:6:24","type":""},{"name":"value2","nativeSrc":"716:6:24","nodeType":"YulTypedName","src":"716:6:24","type":""},{"name":"value1","nativeSrc":"724:6:24","nodeType":"YulTypedName","src":"724:6:24","type":""},{"name":"value0","nativeSrc":"732:6:24","nodeType":"YulTypedName","src":"732:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"743:4:24","nodeType":"YulTypedName","src":"743:4:24","type":""}],"src":"567:417:24"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_contract$_IIssuersDIDRegistry_$2944_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, shl(224, 0x4e487b71))\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, sub(shl(160, 1), 1)))\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"linkReferences":{},"object":"60e06040523480156200001157600080fd5b50604051620014583803806200145883398101604081905262000034916200021b565b336200004b8162000044620000dd565b9062000113565b506001600160a01b031660809081524660a0818152604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527fe951ffb7916e206225d235b0f631570b39e4e0323bc42da6208ae1258c2ecd3e8284015260608201949094523081860152815180820390950185529091019052815191012060c0526200026f565b6000806200010d60017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd6200024d565b92915050565b6001600160a01b038116156200016a5781546001600160a01b0319166001600160a01b03821690811783556040516000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a35b6200018a6307f5828d60e41b6001620001826200018e565b9190620001be565b5050565b6000806200010d60017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e6200024d565b600160e01b6001600160e01b0319831601620001ed576040516372c683bb60e01b815260040160405180910390fd5b6001600160e01b03199190911660009081526020929092526040909120805460ff1916911515919091179055565b6000602082840312156200022e57600080fd5b81516001600160a01b03811681146200024657600080fd5b9392505050565b818103818111156200010d57634e487b7160e01b600052601160045260246000fd5b60805160a05160c0516111ab620002ad600039600061024a015260006101a30152600081816103f80152818161059d01526107b501526111ab6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3a2656a1161005b578063a3a2656a1461010d578063d394ab5a14610120578063e688c27b1461015e578063f2fde38b1461017157600080fd5b806301ffc9a71461008d5780633644e515146100b55780638da5cb5b146100cb57806398fc75a2146100f8575b600080fd5b6100a061009b366004610e98565b610184565b60405190151581526020015b60405180910390f35b6100bd61019e565b6040519081526020016100ac565b6100d3610270565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b61010b610106366004610f23565b61029c565b005b6100a061011b366004610f76565b610536565b6100d361012e366004610f76565b600060208181529281526040808220909352908152205473ffffffffffffffffffffffffffffffffffffffff1681565b61010b61016c366004610f98565b610610565b61010b61017f366004611043565b610926565b60006101988261019261093d565b9061096b565b92915050565b6000467f0000000000000000000000000000000000000000000000000000000000000000811461024857604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527fe951ffb7916e206225d235b0f631570b39e4e0323bc42da6208ae1258c2ecd3e8284015260608201849052306080808401919091528351808403909101815260a0909201909252805191012061026a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b600061029761027d610a45565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60006102a661019e565b604080517fccd989bd7181bf32a5252e0794fbd3acd778c350d2667f94457755c1849899df602082015290810187905260608101869052608001604051602081830303815290604052805190602001206040516020016103389291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f860181900481028401810190925284835292506000916103a9918690869081908401838280828437600092019190915250508551602087012092915050610a73565b6040517ff9236a390000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f9236a3990604401602060405180830381865afa158015610441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104659190611079565b156104fc5760008681526020818152604080832088845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252869188917f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056910160405180910390a361052e565b6040517fbdbfe21600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000828152602081815260408083208484529091528082205490517ff9236a390000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff91821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190611079565b949350505050565b600061061a61019e565b7f74c3c2704ed3af9e8114f76711701f9cef0242b680ea2bdec8423e461f3895ab87878760405160200161064f92919061109b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301949094528101919091526060810191909152608001604051602081830303815290604052805190602001206040516020016106f59291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f86018190048102840181019092528483529250600091610766918690869081908401838280828437600092019190915250508551602087012092915050610a73565b6040517ff9236a390000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f9236a3990604401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611079565b156104fc5760005b8581101561091c5760008881526020819052604081208391898985818110610854576108546110dd565b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508686828181106108b9576108b96110dd565b90506020020135887f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f50568460405161090c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a360010161082a565b5050505050505050565b61093a3382610933610a45565b9190610a97565b50565b60008061019860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61110c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109bb57506000610198565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a0c57506001610198565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61110c565b6000806000610a828585610bb1565b91509150610a8f81610bf6565b509392505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b09576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bab5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b6000808251604103610be75760208301516040840151606085015160001a610bdb87828585610da9565b94509450505050610bef565b506000905060025b9250929050565b6000816004811115610c0a57610c0a611146565b03610c125750565b6001816004811115610c2657610c26611146565b03610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b00565b6002816004811115610ca157610ca1611146565b03610d08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b00565b6003816004811115610d1c57610d1c611146565b0361093a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b00565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610de05750600090506003610e8f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e34573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610e8857600060019250925050610e8f565b9150600090505b94509492505050565b600060208284031215610eaa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b9392505050565b60008083601f840112610ef357600080fd5b50813567ffffffffffffffff811115610f0b57600080fd5b602083019150836020828501011115610bef57600080fd5b60008060008060608587031215610f3957600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610f5e57600080fd5b610f6a87828801610ee1565b95989497509550505050565b60008060408385031215610f8957600080fd5b50508035926020909101359150565b600080600080600060608688031215610fb057600080fd5b85359450602086013567ffffffffffffffff80821115610fcf57600080fd5b818801915088601f830112610fe357600080fd5b813581811115610ff257600080fd5b8960208260051b850101111561100757600080fd5b60208301965080955050604088013591508082111561102557600080fd5b5061103288828901610ee1565b969995985093965092949392505050565b60006020828403121561105557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610eda57600080fd5b60006020828403121561108b57600080fd5b81518015158114610eda57600080fd5b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156110ca57600080fd5b8260051b80858437919091019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610198577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ab9c60f2c86917f86da36d860b55ebca22aab619c19877b681637bc1d680093764736f6c63430008160033","opcodes":"PUSH1 0xE0 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1458 CODESIZE SUB DUP1 PUSH3 0x1458 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x34 SWAP2 PUSH3 0x21B JUMP JUMPDEST CALLER PUSH3 0x4B DUP2 PUSH3 0x44 PUSH3 0xDD JUMP JUMPDEST SWAP1 PUSH3 0x113 JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x80 SWAP1 DUP2 MSTORE CHAINID PUSH1 0xA0 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 MLOAD PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xE951FFB7916E206225D235B0F631570B39E4E0323BC42DA6208AE1258C2ECD3E DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD SWAP5 SWAP1 SWAP5 MSTORE ADDRESS DUP2 DUP7 ADD MSTORE DUP2 MLOAD DUP1 DUP3 SUB SWAP1 SWAP6 ADD DUP6 MSTORE SWAP1 SWAP2 ADD SWAP1 MSTORE DUP2 MLOAD SWAP2 ADD KECCAK256 PUSH1 0xC0 MSTORE PUSH3 0x26F JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x10D PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH3 0x24D JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH3 0x16A JUMPI DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND SWAP1 DUP2 OR DUP4 SSTORE PUSH1 0x40 MLOAD PUSH1 0x0 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 JUMPDEST PUSH3 0x18A PUSH4 0x7F5828D PUSH1 0xE4 SHL PUSH1 0x1 PUSH3 0x182 PUSH3 0x18E JUMP JUMPDEST SWAP2 SWAP1 PUSH3 0x1BE JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH3 0x10D PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH3 0x24D JUMP JUMPDEST PUSH1 0x1 PUSH1 0xE0 SHL PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT DUP4 AND ADD PUSH3 0x1ED JUMPI PUSH1 0x40 MLOAD PUSH4 0x72C683BB PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xE0 SHL SUB NOT SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 SWAP1 SWAP2 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x22E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0x246 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH3 0x10D JUMPI PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x80 MLOAD PUSH1 0xA0 MLOAD PUSH1 0xC0 MLOAD PUSH2 0x11AB PUSH3 0x2AD PUSH1 0x0 CODECOPY PUSH1 0x0 PUSH2 0x24A ADD MSTORE PUSH1 0x0 PUSH2 0x1A3 ADD MSTORE PUSH1 0x0 DUP2 DUP2 PUSH2 0x3F8 ADD MSTORE DUP2 DUP2 PUSH2 0x59D ADD MSTORE PUSH2 0x7B5 ADD MSTORE PUSH2 0x11AB PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A2656A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA3A2656A EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xD394AB5A EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0xE688C27B EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x98FC75A2 EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0x10B PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x29C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xF76 JUMP JUMPDEST PUSH2 0x536 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x12E CALLDATASIZE PUSH1 0x4 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x16C CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x610 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH2 0x926 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198 DUP3 PUSH2 0x192 PUSH2 0x93D JUMP JUMPDEST SWAP1 PUSH2 0x96B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x248 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xE951FFB7916E206225D235B0F631570B39E4E0323BC42DA6208AE1258C2ECD3E DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE ADDRESS PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x26A JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297 PUSH2 0x27D PUSH2 0xA45 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xCCD989BD7181BF32A5252E0794FBD3ACD778C350D2667F94457755C1849899DF PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x338 SWAP3 SWAP2 SWAP1 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 PUSH1 0x1F DUP7 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP5 DUP4 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x3A9 SWAP2 DUP7 SWAP1 DUP7 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP6 MLOAD PUSH1 0x20 DUP8 ADD KECCAK256 SWAP3 SWAP2 POP POP PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x465 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE DUP7 SWAP2 DUP9 SWAP2 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x52E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBDBFE21600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x608 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61A PUSH2 0x19E JUMP JUMPDEST PUSH32 0x74C3C2704ED3AF9E8114F76711701F9CEF0242B680EA2BDEC8423E461F3895AB DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x64F SWAP3 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6F5 SWAP3 SWAP2 SWAP1 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 PUSH1 0x1F DUP7 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP5 DUP4 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x766 SWAP2 DUP7 SWAP1 DUP7 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP6 MLOAD PUSH1 0x20 DUP8 ADD KECCAK256 SWAP3 SWAP2 POP POP PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 SWAP2 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x854 JUMPI PUSH2 0x854 PUSH2 0x10DD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0x10DD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 DUP5 PUSH1 0x40 MLOAD PUSH2 0x90C SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 ADD PUSH2 0x82A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x93A CALLER DUP3 PUSH2 0x933 PUSH2 0xA45 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9BB JUMPI POP PUSH1 0x0 PUSH2 0x198 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA0C JUMPI POP PUSH1 0x1 PUSH2 0x198 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA82 DUP6 DUP6 PUSH2 0xBB1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA8F DUP2 PUSH2 0xBF6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBAB JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xBE7 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xBDB DUP8 DUP3 DUP6 DUP6 PUSH2 0xDA9 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xBEF JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH2 0xC0A PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xC12 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC26 JUMPI PUSH2 0xC26 PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCA1 JUMPI PUSH2 0xCA1 PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0x93A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0xDE0 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE88 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xEF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF6A DUP8 DUP3 DUP9 ADD PUSH2 0xEE1 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1032 DUP9 DUP3 DUP10 ADD PUSH2 0xEE1 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x108B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x10CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 DUP5 CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x198 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SWAP13 PUSH1 0xF2 0xC8 PUSH10 0x17F86DA36D860B55EBCA 0x22 0xAA 0xB6 NOT 0xC1 SWAP9 PUSH24 0xB681637BC1D680093764736F6C6343000816003300000000 ","sourceMap":"592:5171:20:-:0;;;1419:320;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1482:10;1008:63:0;1482:10:20;1008:33:0;:31;:33::i;:::-;:49;;:63::i;:::-;-1:-1:-1;;;;;;1591:26:20::1;;::::0;;;1563:9:::1;1627:30;::::0;;;5506:234;;;5538:80;5506:234;;;;798:25:24;;;;765:33:20;839:18:24;;;832:34;882:18;;;875:34;;;;5717:4:20;925:18:24;;;918:60;5506:234:20;;;;;;;;;;770:19:24;;;5506:234:20;;5479:275;;;;;1667:65:::1;::::0;592:5171;;5065:174:6;5106:16;;926:71;996:1;934:58;926:71;:::i;:::-;918:80;5065:174;-1:-1:-1;;5065:174:6:o;1567:341::-;-1:-1:-1;;;;;1655:26:6;;;1651:152;;1697:30;;-1:-1:-1;;;;;;1697:30:6;-1:-1:-1;;;;;1697:30:6;;;;;;;1746:46;;-1:-1:-1;;1746:46:6;;-1:-1:-1;;1746:46:6;1651:152;1812:89;-1:-1:-1;;;1896:4:6;1812:34;:32;:34::i;:::-;:56;:89;:56;:89::i;:::-;1567:341;;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;773:235::-;-1:-1:-1;;;;;;;;;881:35:10;;;877:68;;925:20;;-1:-1:-1;;;925:20:10;;;;;;;;;;;877:68;-1:-1:-1;;;;;;955:34:10;;;;:21;:34;;;;;;;;;;;;:46;;-1:-1:-1;;955:46:10;;;;;;;;;;773:235::o;14:318:24:-;112:6;165:2;153:9;144:7;140:23;136:32;133:52;;;181:1;178;171:12;133:52;207:16;;-1:-1:-1;;;;;252:31:24;;242:42;;232:70;;298:1;295;288:12;232:70;321:5;14:318;-1:-1:-1;;;14:318:24:o;337:225::-;404:9;;;425:11;;;422:134;;;478:10;473:3;469:20;466:1;459:31;513:4;510:1;503:15;541:4;538:1;531:15;567:417;592:5171:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"},"deployedBytecode":{"functionDebugData":{"@DOMAIN_SEPARATOR_2716":{"entryPoint":414,"id":2716,"parameterSlots":0,"returnSlots":1},"@_calculateDomainSeparator_2910":{"entryPoint":null,"id":2910,"parameterSlots":1,"returnSlots":1},"@_msgSender_930":{"entryPoint":null,"id":930,"parameterSlots":0,"returnSlots":1},"@_throwError_1333":{"entryPoint":3062,"id":1333,"parameterSlots":1,"returnSlots":0},"@batchRevokeVCs_2887":{"entryPoint":1552,"id":2887,"parameterSlots":5,"returnSlots":0},"@isRevoked_2741":{"entryPoint":1334,"id":2741,"parameterSlots":2,"returnSlots":1},"@layout_383":{"entryPoint":2629,"id":383,"parameterSlots":0,"returnSlots":1},"@layout_531":{"entryPoint":2365,"id":531,"parameterSlots":0,"returnSlots":1},"@owner_304":{"entryPoint":null,"id":304,"parameterSlots":1,"returnSlots":1},"@owner_62":{"entryPoint":624,"id":62,"parameterSlots":0,"returnSlots":1},"@recover_1406":{"entryPoint":2675,"id":1406,"parameterSlots":2,"returnSlots":1},"@revocations_2660":{"entryPoint":null,"id":2660,"parameterSlots":0,"returnSlots":0},"@revokeVC_2803":{"entryPoint":668,"id":2803,"parameterSlots":4,"returnSlots":0},"@supportsInterface_413":{"entryPoint":388,"id":413,"parameterSlots":1,"returnSlots":1},"@supportsInterface_519":{"entryPoint":2411,"id":519,"parameterSlots":2,"returnSlots":1},"@transferOwnership_291":{"entryPoint":2711,"id":291,"parameterSlots":3,"returnSlots":0},"@transferOwnership_79":{"entryPoint":2342,"id":79,"parameterSlots":1,"returnSlots":0},"@tryRecover_1379":{"entryPoint":2993,"id":1379,"parameterSlots":2,"returnSlots":2},"@tryRecover_1547":{"entryPoint":3497,"id":1547,"parameterSlots":4,"returnSlots":2},"abi_decode_bytes_calldata":{"entryPoint":3809,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_address":{"entryPoint":4163,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bool_fromMemory":{"entryPoint":4217,"id":null,"parameterSlots":2,"returnSlots":1},"abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr":{"entryPoint":3992,"id":null,"parameterSlots":2,"returnSlots":5},"abi_decode_tuple_t_bytes32t_uint256":{"entryPoint":3958,"id":null,"parameterSlots":2,"returnSlots":2},"abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr":{"entryPoint":3875,"id":null,"parameterSlots":2,"returnSlots":4},"abi_decode_tuple_t_bytes4":{"entryPoint":3736,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_packed_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed":{"entryPoint":4251,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_address__to_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":2,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":3,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256__to_t_bytes32_t_bytes32_t_uint256__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":4,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":5,"returnSlots":1},"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed":{"entryPoint":null,"id":null,"parameterSlots":1,"returnSlots":1},"checked_sub_t_uint256":{"entryPoint":4364,"id":null,"parameterSlots":2,"returnSlots":1},"panic_error_0x21":{"entryPoint":4422,"id":null,"parameterSlots":0,"returnSlots":0},"panic_error_0x32":{"entryPoint":4317,"id":null,"parameterSlots":0,"returnSlots":0}},"generatedSources":[{"ast":{"nativeSrc":"0:8116:24","nodeType":"YulBlock","src":"0:8116:24","statements":[{"nativeSrc":"6:3:24","nodeType":"YulBlock","src":"6:3:24","statements":[]},{"body":{"nativeSrc":"83:263:24","nodeType":"YulBlock","src":"83:263:24","statements":[{"body":{"nativeSrc":"129:16:24","nodeType":"YulBlock","src":"129:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"138:1:24","nodeType":"YulLiteral","src":"138:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"141:1:24","nodeType":"YulLiteral","src":"141:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"131:6:24","nodeType":"YulIdentifier","src":"131:6:24"},"nativeSrc":"131:12:24","nodeType":"YulFunctionCall","src":"131:12:24"},"nativeSrc":"131:12:24","nodeType":"YulExpressionStatement","src":"131:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"104:7:24","nodeType":"YulIdentifier","src":"104:7:24"},{"name":"headStart","nativeSrc":"113:9:24","nodeType":"YulIdentifier","src":"113:9:24"}],"functionName":{"name":"sub","nativeSrc":"100:3:24","nodeType":"YulIdentifier","src":"100:3:24"},"nativeSrc":"100:23:24","nodeType":"YulFunctionCall","src":"100:23:24"},{"kind":"number","nativeSrc":"125:2:24","nodeType":"YulLiteral","src":"125:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"96:3:24","nodeType":"YulIdentifier","src":"96:3:24"},"nativeSrc":"96:32:24","nodeType":"YulFunctionCall","src":"96:32:24"},"nativeSrc":"93:52:24","nodeType":"YulIf","src":"93:52:24"},{"nativeSrc":"154:36:24","nodeType":"YulVariableDeclaration","src":"154:36:24","value":{"arguments":[{"name":"headStart","nativeSrc":"180:9:24","nodeType":"YulIdentifier","src":"180:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"167:12:24","nodeType":"YulIdentifier","src":"167:12:24"},"nativeSrc":"167:23:24","nodeType":"YulFunctionCall","src":"167:23:24"},"variables":[{"name":"value","nativeSrc":"158:5:24","nodeType":"YulTypedName","src":"158:5:24","type":""}]},{"body":{"nativeSrc":"300:16:24","nodeType":"YulBlock","src":"300:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"309:1:24","nodeType":"YulLiteral","src":"309:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"312:1:24","nodeType":"YulLiteral","src":"312:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"302:6:24","nodeType":"YulIdentifier","src":"302:6:24"},"nativeSrc":"302:12:24","nodeType":"YulFunctionCall","src":"302:12:24"},"nativeSrc":"302:12:24","nodeType":"YulExpressionStatement","src":"302:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"212:5:24","nodeType":"YulIdentifier","src":"212:5:24"},{"arguments":[{"name":"value","nativeSrc":"223:5:24","nodeType":"YulIdentifier","src":"223:5:24"},{"kind":"number","nativeSrc":"230:66:24","nodeType":"YulLiteral","src":"230:66:24","type":"","value":"0xffffffff00000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"and","nativeSrc":"219:3:24","nodeType":"YulIdentifier","src":"219:3:24"},"nativeSrc":"219:78:24","nodeType":"YulFunctionCall","src":"219:78:24"}],"functionName":{"name":"eq","nativeSrc":"209:2:24","nodeType":"YulIdentifier","src":"209:2:24"},"nativeSrc":"209:89:24","nodeType":"YulFunctionCall","src":"209:89:24"}],"functionName":{"name":"iszero","nativeSrc":"202:6:24","nodeType":"YulIdentifier","src":"202:6:24"},"nativeSrc":"202:97:24","nodeType":"YulFunctionCall","src":"202:97:24"},"nativeSrc":"199:117:24","nodeType":"YulIf","src":"199:117:24"},{"nativeSrc":"325:15:24","nodeType":"YulAssignment","src":"325:15:24","value":{"name":"value","nativeSrc":"335:5:24","nodeType":"YulIdentifier","src":"335:5:24"},"variableNames":[{"name":"value0","nativeSrc":"325:6:24","nodeType":"YulIdentifier","src":"325:6:24"}]}]},"name":"abi_decode_tuple_t_bytes4","nativeSrc":"14:332:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"49:9:24","nodeType":"YulTypedName","src":"49:9:24","type":""},{"name":"dataEnd","nativeSrc":"60:7:24","nodeType":"YulTypedName","src":"60:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"72:6:24","nodeType":"YulTypedName","src":"72:6:24","type":""}],"src":"14:332:24"},{"body":{"nativeSrc":"446:92:24","nodeType":"YulBlock","src":"446:92:24","statements":[{"nativeSrc":"456:26:24","nodeType":"YulAssignment","src":"456:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"468:9:24","nodeType":"YulIdentifier","src":"468:9:24"},{"kind":"number","nativeSrc":"479:2:24","nodeType":"YulLiteral","src":"479:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"464:3:24","nodeType":"YulIdentifier","src":"464:3:24"},"nativeSrc":"464:18:24","nodeType":"YulFunctionCall","src":"464:18:24"},"variableNames":[{"name":"tail","nativeSrc":"456:4:24","nodeType":"YulIdentifier","src":"456:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"498:9:24","nodeType":"YulIdentifier","src":"498:9:24"},{"arguments":[{"arguments":[{"name":"value0","nativeSrc":"523:6:24","nodeType":"YulIdentifier","src":"523:6:24"}],"functionName":{"name":"iszero","nativeSrc":"516:6:24","nodeType":"YulIdentifier","src":"516:6:24"},"nativeSrc":"516:14:24","nodeType":"YulFunctionCall","src":"516:14:24"}],"functionName":{"name":"iszero","nativeSrc":"509:6:24","nodeType":"YulIdentifier","src":"509:6:24"},"nativeSrc":"509:22:24","nodeType":"YulFunctionCall","src":"509:22:24"}],"functionName":{"name":"mstore","nativeSrc":"491:6:24","nodeType":"YulIdentifier","src":"491:6:24"},"nativeSrc":"491:41:24","nodeType":"YulFunctionCall","src":"491:41:24"},"nativeSrc":"491:41:24","nodeType":"YulExpressionStatement","src":"491:41:24"}]},"name":"abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed","nativeSrc":"351:187:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"415:9:24","nodeType":"YulTypedName","src":"415:9:24","type":""},{"name":"value0","nativeSrc":"426:6:24","nodeType":"YulTypedName","src":"426:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"437:4:24","nodeType":"YulTypedName","src":"437:4:24","type":""}],"src":"351:187:24"},{"body":{"nativeSrc":"644:76:24","nodeType":"YulBlock","src":"644:76:24","statements":[{"nativeSrc":"654:26:24","nodeType":"YulAssignment","src":"654:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"666:9:24","nodeType":"YulIdentifier","src":"666:9:24"},{"kind":"number","nativeSrc":"677:2:24","nodeType":"YulLiteral","src":"677:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"662:3:24","nodeType":"YulIdentifier","src":"662:3:24"},"nativeSrc":"662:18:24","nodeType":"YulFunctionCall","src":"662:18:24"},"variableNames":[{"name":"tail","nativeSrc":"654:4:24","nodeType":"YulIdentifier","src":"654:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"696:9:24","nodeType":"YulIdentifier","src":"696:9:24"},{"name":"value0","nativeSrc":"707:6:24","nodeType":"YulIdentifier","src":"707:6:24"}],"functionName":{"name":"mstore","nativeSrc":"689:6:24","nodeType":"YulIdentifier","src":"689:6:24"},"nativeSrc":"689:25:24","nodeType":"YulFunctionCall","src":"689:25:24"},"nativeSrc":"689:25:24","nodeType":"YulExpressionStatement","src":"689:25:24"}]},"name":"abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed","nativeSrc":"543:177:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"613:9:24","nodeType":"YulTypedName","src":"613:9:24","type":""},{"name":"value0","nativeSrc":"624:6:24","nodeType":"YulTypedName","src":"624:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"635:4:24","nodeType":"YulTypedName","src":"635:4:24","type":""}],"src":"543:177:24"},{"body":{"nativeSrc":"826:125:24","nodeType":"YulBlock","src":"826:125:24","statements":[{"nativeSrc":"836:26:24","nodeType":"YulAssignment","src":"836:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"848:9:24","nodeType":"YulIdentifier","src":"848:9:24"},{"kind":"number","nativeSrc":"859:2:24","nodeType":"YulLiteral","src":"859:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"844:3:24","nodeType":"YulIdentifier","src":"844:3:24"},"nativeSrc":"844:18:24","nodeType":"YulFunctionCall","src":"844:18:24"},"variableNames":[{"name":"tail","nativeSrc":"836:4:24","nodeType":"YulIdentifier","src":"836:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"878:9:24","nodeType":"YulIdentifier","src":"878:9:24"},{"arguments":[{"name":"value0","nativeSrc":"893:6:24","nodeType":"YulIdentifier","src":"893:6:24"},{"kind":"number","nativeSrc":"901:42:24","nodeType":"YulLiteral","src":"901:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"889:3:24","nodeType":"YulIdentifier","src":"889:3:24"},"nativeSrc":"889:55:24","nodeType":"YulFunctionCall","src":"889:55:24"}],"functionName":{"name":"mstore","nativeSrc":"871:6:24","nodeType":"YulIdentifier","src":"871:6:24"},"nativeSrc":"871:74:24","nodeType":"YulFunctionCall","src":"871:74:24"},"nativeSrc":"871:74:24","nodeType":"YulExpressionStatement","src":"871:74:24"}]},"name":"abi_encode_tuple_t_address__to_t_address__fromStack_reversed","nativeSrc":"725:226:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"795:9:24","nodeType":"YulTypedName","src":"795:9:24","type":""},{"name":"value0","nativeSrc":"806:6:24","nodeType":"YulTypedName","src":"806:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"817:4:24","nodeType":"YulTypedName","src":"817:4:24","type":""}],"src":"725:226:24"},{"body":{"nativeSrc":"1028:275:24","nodeType":"YulBlock","src":"1028:275:24","statements":[{"body":{"nativeSrc":"1077:16:24","nodeType":"YulBlock","src":"1077:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1086:1:24","nodeType":"YulLiteral","src":"1086:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1089:1:24","nodeType":"YulLiteral","src":"1089:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1079:6:24","nodeType":"YulIdentifier","src":"1079:6:24"},"nativeSrc":"1079:12:24","nodeType":"YulFunctionCall","src":"1079:12:24"},"nativeSrc":"1079:12:24","nodeType":"YulExpressionStatement","src":"1079:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1056:6:24","nodeType":"YulIdentifier","src":"1056:6:24"},{"kind":"number","nativeSrc":"1064:4:24","nodeType":"YulLiteral","src":"1064:4:24","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"1052:3:24","nodeType":"YulIdentifier","src":"1052:3:24"},"nativeSrc":"1052:17:24","nodeType":"YulFunctionCall","src":"1052:17:24"},{"name":"end","nativeSrc":"1071:3:24","nodeType":"YulIdentifier","src":"1071:3:24"}],"functionName":{"name":"slt","nativeSrc":"1048:3:24","nodeType":"YulIdentifier","src":"1048:3:24"},"nativeSrc":"1048:27:24","nodeType":"YulFunctionCall","src":"1048:27:24"}],"functionName":{"name":"iszero","nativeSrc":"1041:6:24","nodeType":"YulIdentifier","src":"1041:6:24"},"nativeSrc":"1041:35:24","nodeType":"YulFunctionCall","src":"1041:35:24"},"nativeSrc":"1038:55:24","nodeType":"YulIf","src":"1038:55:24"},{"nativeSrc":"1102:30:24","nodeType":"YulAssignment","src":"1102:30:24","value":{"arguments":[{"name":"offset","nativeSrc":"1125:6:24","nodeType":"YulIdentifier","src":"1125:6:24"}],"functionName":{"name":"calldataload","nativeSrc":"1112:12:24","nodeType":"YulIdentifier","src":"1112:12:24"},"nativeSrc":"1112:20:24","nodeType":"YulFunctionCall","src":"1112:20:24"},"variableNames":[{"name":"length","nativeSrc":"1102:6:24","nodeType":"YulIdentifier","src":"1102:6:24"}]},{"body":{"nativeSrc":"1175:16:24","nodeType":"YulBlock","src":"1175:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1184:1:24","nodeType":"YulLiteral","src":"1184:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1187:1:24","nodeType":"YulLiteral","src":"1187:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1177:6:24","nodeType":"YulIdentifier","src":"1177:6:24"},"nativeSrc":"1177:12:24","nodeType":"YulFunctionCall","src":"1177:12:24"},"nativeSrc":"1177:12:24","nodeType":"YulExpressionStatement","src":"1177:12:24"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"1147:6:24","nodeType":"YulIdentifier","src":"1147:6:24"},{"kind":"number","nativeSrc":"1155:18:24","nodeType":"YulLiteral","src":"1155:18:24","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1144:2:24","nodeType":"YulIdentifier","src":"1144:2:24"},"nativeSrc":"1144:30:24","nodeType":"YulFunctionCall","src":"1144:30:24"},"nativeSrc":"1141:50:24","nodeType":"YulIf","src":"1141:50:24"},{"nativeSrc":"1200:29:24","nodeType":"YulAssignment","src":"1200:29:24","value":{"arguments":[{"name":"offset","nativeSrc":"1216:6:24","nodeType":"YulIdentifier","src":"1216:6:24"},{"kind":"number","nativeSrc":"1224:4:24","nodeType":"YulLiteral","src":"1224:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1212:3:24","nodeType":"YulIdentifier","src":"1212:3:24"},"nativeSrc":"1212:17:24","nodeType":"YulFunctionCall","src":"1212:17:24"},"variableNames":[{"name":"arrayPos","nativeSrc":"1200:8:24","nodeType":"YulIdentifier","src":"1200:8:24"}]},{"body":{"nativeSrc":"1281:16:24","nodeType":"YulBlock","src":"1281:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1290:1:24","nodeType":"YulLiteral","src":"1290:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1293:1:24","nodeType":"YulLiteral","src":"1293:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1283:6:24","nodeType":"YulIdentifier","src":"1283:6:24"},"nativeSrc":"1283:12:24","nodeType":"YulFunctionCall","src":"1283:12:24"},"nativeSrc":"1283:12:24","nodeType":"YulExpressionStatement","src":"1283:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"offset","nativeSrc":"1252:6:24","nodeType":"YulIdentifier","src":"1252:6:24"},{"name":"length","nativeSrc":"1260:6:24","nodeType":"YulIdentifier","src":"1260:6:24"}],"functionName":{"name":"add","nativeSrc":"1248:3:24","nodeType":"YulIdentifier","src":"1248:3:24"},"nativeSrc":"1248:19:24","nodeType":"YulFunctionCall","src":"1248:19:24"},{"kind":"number","nativeSrc":"1269:4:24","nodeType":"YulLiteral","src":"1269:4:24","type":"","value":"0x20"}],"functionName":{"name":"add","nativeSrc":"1244:3:24","nodeType":"YulIdentifier","src":"1244:3:24"},"nativeSrc":"1244:30:24","nodeType":"YulFunctionCall","src":"1244:30:24"},{"name":"end","nativeSrc":"1276:3:24","nodeType":"YulIdentifier","src":"1276:3:24"}],"functionName":{"name":"gt","nativeSrc":"1241:2:24","nodeType":"YulIdentifier","src":"1241:2:24"},"nativeSrc":"1241:39:24","nodeType":"YulFunctionCall","src":"1241:39:24"},"nativeSrc":"1238:59:24","nodeType":"YulIf","src":"1238:59:24"}]},"name":"abi_decode_bytes_calldata","nativeSrc":"956:347:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"offset","nativeSrc":"991:6:24","nodeType":"YulTypedName","src":"991:6:24","type":""},{"name":"end","nativeSrc":"999:3:24","nodeType":"YulTypedName","src":"999:3:24","type":""}],"returnVariables":[{"name":"arrayPos","nativeSrc":"1007:8:24","nodeType":"YulTypedName","src":"1007:8:24","type":""},{"name":"length","nativeSrc":"1017:6:24","nodeType":"YulTypedName","src":"1017:6:24","type":""}],"src":"956:347:24"},{"body":{"nativeSrc":"1431:422:24","nodeType":"YulBlock","src":"1431:422:24","statements":[{"body":{"nativeSrc":"1477:16:24","nodeType":"YulBlock","src":"1477:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1486:1:24","nodeType":"YulLiteral","src":"1486:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1489:1:24","nodeType":"YulLiteral","src":"1489:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1479:6:24","nodeType":"YulIdentifier","src":"1479:6:24"},"nativeSrc":"1479:12:24","nodeType":"YulFunctionCall","src":"1479:12:24"},"nativeSrc":"1479:12:24","nodeType":"YulExpressionStatement","src":"1479:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1452:7:24","nodeType":"YulIdentifier","src":"1452:7:24"},{"name":"headStart","nativeSrc":"1461:9:24","nodeType":"YulIdentifier","src":"1461:9:24"}],"functionName":{"name":"sub","nativeSrc":"1448:3:24","nodeType":"YulIdentifier","src":"1448:3:24"},"nativeSrc":"1448:23:24","nodeType":"YulFunctionCall","src":"1448:23:24"},{"kind":"number","nativeSrc":"1473:2:24","nodeType":"YulLiteral","src":"1473:2:24","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"1444:3:24","nodeType":"YulIdentifier","src":"1444:3:24"},"nativeSrc":"1444:32:24","nodeType":"YulFunctionCall","src":"1444:32:24"},"nativeSrc":"1441:52:24","nodeType":"YulIf","src":"1441:52:24"},{"nativeSrc":"1502:33:24","nodeType":"YulAssignment","src":"1502:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"1525:9:24","nodeType":"YulIdentifier","src":"1525:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"1512:12:24","nodeType":"YulIdentifier","src":"1512:12:24"},"nativeSrc":"1512:23:24","nodeType":"YulFunctionCall","src":"1512:23:24"},"variableNames":[{"name":"value0","nativeSrc":"1502:6:24","nodeType":"YulIdentifier","src":"1502:6:24"}]},{"nativeSrc":"1544:42:24","nodeType":"YulAssignment","src":"1544:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1571:9:24","nodeType":"YulIdentifier","src":"1571:9:24"},{"kind":"number","nativeSrc":"1582:2:24","nodeType":"YulLiteral","src":"1582:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"1567:3:24","nodeType":"YulIdentifier","src":"1567:3:24"},"nativeSrc":"1567:18:24","nodeType":"YulFunctionCall","src":"1567:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"1554:12:24","nodeType":"YulIdentifier","src":"1554:12:24"},"nativeSrc":"1554:32:24","nodeType":"YulFunctionCall","src":"1554:32:24"},"variableNames":[{"name":"value1","nativeSrc":"1544:6:24","nodeType":"YulIdentifier","src":"1544:6:24"}]},{"nativeSrc":"1595:46:24","nodeType":"YulVariableDeclaration","src":"1595:46:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1626:9:24","nodeType":"YulIdentifier","src":"1626:9:24"},{"kind":"number","nativeSrc":"1637:2:24","nodeType":"YulLiteral","src":"1637:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"1622:3:24","nodeType":"YulIdentifier","src":"1622:3:24"},"nativeSrc":"1622:18:24","nodeType":"YulFunctionCall","src":"1622:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"1609:12:24","nodeType":"YulIdentifier","src":"1609:12:24"},"nativeSrc":"1609:32:24","nodeType":"YulFunctionCall","src":"1609:32:24"},"variables":[{"name":"offset","nativeSrc":"1599:6:24","nodeType":"YulTypedName","src":"1599:6:24","type":""}]},{"body":{"nativeSrc":"1684:16:24","nodeType":"YulBlock","src":"1684:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1693:1:24","nodeType":"YulLiteral","src":"1693:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"1696:1:24","nodeType":"YulLiteral","src":"1696:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1686:6:24","nodeType":"YulIdentifier","src":"1686:6:24"},"nativeSrc":"1686:12:24","nodeType":"YulFunctionCall","src":"1686:12:24"},"nativeSrc":"1686:12:24","nodeType":"YulExpressionStatement","src":"1686:12:24"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"1656:6:24","nodeType":"YulIdentifier","src":"1656:6:24"},{"kind":"number","nativeSrc":"1664:18:24","nodeType":"YulLiteral","src":"1664:18:24","type":"","value":"0xffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"1653:2:24","nodeType":"YulIdentifier","src":"1653:2:24"},"nativeSrc":"1653:30:24","nodeType":"YulFunctionCall","src":"1653:30:24"},"nativeSrc":"1650:50:24","nodeType":"YulIf","src":"1650:50:24"},{"nativeSrc":"1709:84:24","nodeType":"YulVariableDeclaration","src":"1709:84:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"1765:9:24","nodeType":"YulIdentifier","src":"1765:9:24"},{"name":"offset","nativeSrc":"1776:6:24","nodeType":"YulIdentifier","src":"1776:6:24"}],"functionName":{"name":"add","nativeSrc":"1761:3:24","nodeType":"YulIdentifier","src":"1761:3:24"},"nativeSrc":"1761:22:24","nodeType":"YulFunctionCall","src":"1761:22:24"},{"name":"dataEnd","nativeSrc":"1785:7:24","nodeType":"YulIdentifier","src":"1785:7:24"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"1735:25:24","nodeType":"YulIdentifier","src":"1735:25:24"},"nativeSrc":"1735:58:24","nodeType":"YulFunctionCall","src":"1735:58:24"},"variables":[{"name":"value2_1","nativeSrc":"1713:8:24","nodeType":"YulTypedName","src":"1713:8:24","type":""},{"name":"value3_1","nativeSrc":"1723:8:24","nodeType":"YulTypedName","src":"1723:8:24","type":""}]},{"nativeSrc":"1802:18:24","nodeType":"YulAssignment","src":"1802:18:24","value":{"name":"value2_1","nativeSrc":"1812:8:24","nodeType":"YulIdentifier","src":"1812:8:24"},"variableNames":[{"name":"value2","nativeSrc":"1802:6:24","nodeType":"YulIdentifier","src":"1802:6:24"}]},{"nativeSrc":"1829:18:24","nodeType":"YulAssignment","src":"1829:18:24","value":{"name":"value3_1","nativeSrc":"1839:8:24","nodeType":"YulIdentifier","src":"1839:8:24"},"variableNames":[{"name":"value3","nativeSrc":"1829:6:24","nodeType":"YulIdentifier","src":"1829:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr","nativeSrc":"1308:545:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1373:9:24","nodeType":"YulTypedName","src":"1373:9:24","type":""},{"name":"dataEnd","nativeSrc":"1384:7:24","nodeType":"YulTypedName","src":"1384:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1396:6:24","nodeType":"YulTypedName","src":"1396:6:24","type":""},{"name":"value1","nativeSrc":"1404:6:24","nodeType":"YulTypedName","src":"1404:6:24","type":""},{"name":"value2","nativeSrc":"1412:6:24","nodeType":"YulTypedName","src":"1412:6:24","type":""},{"name":"value3","nativeSrc":"1420:6:24","nodeType":"YulTypedName","src":"1420:6:24","type":""}],"src":"1308:545:24"},{"body":{"nativeSrc":"1945:161:24","nodeType":"YulBlock","src":"1945:161:24","statements":[{"body":{"nativeSrc":"1991:16:24","nodeType":"YulBlock","src":"1991:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2000:1:24","nodeType":"YulLiteral","src":"2000:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2003:1:24","nodeType":"YulLiteral","src":"2003:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"1993:6:24","nodeType":"YulIdentifier","src":"1993:6:24"},"nativeSrc":"1993:12:24","nodeType":"YulFunctionCall","src":"1993:12:24"},"nativeSrc":"1993:12:24","nodeType":"YulExpressionStatement","src":"1993:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"1966:7:24","nodeType":"YulIdentifier","src":"1966:7:24"},{"name":"headStart","nativeSrc":"1975:9:24","nodeType":"YulIdentifier","src":"1975:9:24"}],"functionName":{"name":"sub","nativeSrc":"1962:3:24","nodeType":"YulIdentifier","src":"1962:3:24"},"nativeSrc":"1962:23:24","nodeType":"YulFunctionCall","src":"1962:23:24"},{"kind":"number","nativeSrc":"1987:2:24","nodeType":"YulLiteral","src":"1987:2:24","type":"","value":"64"}],"functionName":{"name":"slt","nativeSrc":"1958:3:24","nodeType":"YulIdentifier","src":"1958:3:24"},"nativeSrc":"1958:32:24","nodeType":"YulFunctionCall","src":"1958:32:24"},"nativeSrc":"1955:52:24","nodeType":"YulIf","src":"1955:52:24"},{"nativeSrc":"2016:33:24","nodeType":"YulAssignment","src":"2016:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2039:9:24","nodeType":"YulIdentifier","src":"2039:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"2026:12:24","nodeType":"YulIdentifier","src":"2026:12:24"},"nativeSrc":"2026:23:24","nodeType":"YulFunctionCall","src":"2026:23:24"},"variableNames":[{"name":"value0","nativeSrc":"2016:6:24","nodeType":"YulIdentifier","src":"2016:6:24"}]},{"nativeSrc":"2058:42:24","nodeType":"YulAssignment","src":"2058:42:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2085:9:24","nodeType":"YulIdentifier","src":"2085:9:24"},{"kind":"number","nativeSrc":"2096:2:24","nodeType":"YulLiteral","src":"2096:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2081:3:24","nodeType":"YulIdentifier","src":"2081:3:24"},"nativeSrc":"2081:18:24","nodeType":"YulFunctionCall","src":"2081:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"2068:12:24","nodeType":"YulIdentifier","src":"2068:12:24"},"nativeSrc":"2068:32:24","nodeType":"YulFunctionCall","src":"2068:32:24"},"variableNames":[{"name":"value1","nativeSrc":"2058:6:24","nodeType":"YulIdentifier","src":"2058:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32t_uint256","nativeSrc":"1858:248:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"1903:9:24","nodeType":"YulTypedName","src":"1903:9:24","type":""},{"name":"dataEnd","nativeSrc":"1914:7:24","nodeType":"YulTypedName","src":"1914:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"1926:6:24","nodeType":"YulTypedName","src":"1926:6:24","type":""},{"name":"value1","nativeSrc":"1934:6:24","nodeType":"YulTypedName","src":"1934:6:24","type":""}],"src":"1858:248:24"},{"body":{"nativeSrc":"2269:812:24","nodeType":"YulBlock","src":"2269:812:24","statements":[{"body":{"nativeSrc":"2315:16:24","nodeType":"YulBlock","src":"2315:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2324:1:24","nodeType":"YulLiteral","src":"2324:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2327:1:24","nodeType":"YulLiteral","src":"2327:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2317:6:24","nodeType":"YulIdentifier","src":"2317:6:24"},"nativeSrc":"2317:12:24","nodeType":"YulFunctionCall","src":"2317:12:24"},"nativeSrc":"2317:12:24","nodeType":"YulExpressionStatement","src":"2317:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"2290:7:24","nodeType":"YulIdentifier","src":"2290:7:24"},{"name":"headStart","nativeSrc":"2299:9:24","nodeType":"YulIdentifier","src":"2299:9:24"}],"functionName":{"name":"sub","nativeSrc":"2286:3:24","nodeType":"YulIdentifier","src":"2286:3:24"},"nativeSrc":"2286:23:24","nodeType":"YulFunctionCall","src":"2286:23:24"},{"kind":"number","nativeSrc":"2311:2:24","nodeType":"YulLiteral","src":"2311:2:24","type":"","value":"96"}],"functionName":{"name":"slt","nativeSrc":"2282:3:24","nodeType":"YulIdentifier","src":"2282:3:24"},"nativeSrc":"2282:32:24","nodeType":"YulFunctionCall","src":"2282:32:24"},"nativeSrc":"2279:52:24","nodeType":"YulIf","src":"2279:52:24"},{"nativeSrc":"2340:33:24","nodeType":"YulAssignment","src":"2340:33:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2363:9:24","nodeType":"YulIdentifier","src":"2363:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"2350:12:24","nodeType":"YulIdentifier","src":"2350:12:24"},"nativeSrc":"2350:23:24","nodeType":"YulFunctionCall","src":"2350:23:24"},"variableNames":[{"name":"value0","nativeSrc":"2340:6:24","nodeType":"YulIdentifier","src":"2340:6:24"}]},{"nativeSrc":"2382:46:24","nodeType":"YulVariableDeclaration","src":"2382:46:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2413:9:24","nodeType":"YulIdentifier","src":"2413:9:24"},{"kind":"number","nativeSrc":"2424:2:24","nodeType":"YulLiteral","src":"2424:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2409:3:24","nodeType":"YulIdentifier","src":"2409:3:24"},"nativeSrc":"2409:18:24","nodeType":"YulFunctionCall","src":"2409:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"2396:12:24","nodeType":"YulIdentifier","src":"2396:12:24"},"nativeSrc":"2396:32:24","nodeType":"YulFunctionCall","src":"2396:32:24"},"variables":[{"name":"offset","nativeSrc":"2386:6:24","nodeType":"YulTypedName","src":"2386:6:24","type":""}]},{"nativeSrc":"2437:28:24","nodeType":"YulVariableDeclaration","src":"2437:28:24","value":{"kind":"number","nativeSrc":"2447:18:24","nodeType":"YulLiteral","src":"2447:18:24","type":"","value":"0xffffffffffffffff"},"variables":[{"name":"_1","nativeSrc":"2441:2:24","nodeType":"YulTypedName","src":"2441:2:24","type":""}]},{"body":{"nativeSrc":"2492:16:24","nodeType":"YulBlock","src":"2492:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2501:1:24","nodeType":"YulLiteral","src":"2501:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2504:1:24","nodeType":"YulLiteral","src":"2504:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2494:6:24","nodeType":"YulIdentifier","src":"2494:6:24"},"nativeSrc":"2494:12:24","nodeType":"YulFunctionCall","src":"2494:12:24"},"nativeSrc":"2494:12:24","nodeType":"YulExpressionStatement","src":"2494:12:24"}]},"condition":{"arguments":[{"name":"offset","nativeSrc":"2480:6:24","nodeType":"YulIdentifier","src":"2480:6:24"},{"name":"_1","nativeSrc":"2488:2:24","nodeType":"YulIdentifier","src":"2488:2:24"}],"functionName":{"name":"gt","nativeSrc":"2477:2:24","nodeType":"YulIdentifier","src":"2477:2:24"},"nativeSrc":"2477:14:24","nodeType":"YulFunctionCall","src":"2477:14:24"},"nativeSrc":"2474:34:24","nodeType":"YulIf","src":"2474:34:24"},{"nativeSrc":"2517:32:24","nodeType":"YulVariableDeclaration","src":"2517:32:24","value":{"arguments":[{"name":"headStart","nativeSrc":"2531:9:24","nodeType":"YulIdentifier","src":"2531:9:24"},{"name":"offset","nativeSrc":"2542:6:24","nodeType":"YulIdentifier","src":"2542:6:24"}],"functionName":{"name":"add","nativeSrc":"2527:3:24","nodeType":"YulIdentifier","src":"2527:3:24"},"nativeSrc":"2527:22:24","nodeType":"YulFunctionCall","src":"2527:22:24"},"variables":[{"name":"_2","nativeSrc":"2521:2:24","nodeType":"YulTypedName","src":"2521:2:24","type":""}]},{"body":{"nativeSrc":"2597:16:24","nodeType":"YulBlock","src":"2597:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2606:1:24","nodeType":"YulLiteral","src":"2606:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2609:1:24","nodeType":"YulLiteral","src":"2609:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2599:6:24","nodeType":"YulIdentifier","src":"2599:6:24"},"nativeSrc":"2599:12:24","nodeType":"YulFunctionCall","src":"2599:12:24"},"nativeSrc":"2599:12:24","nodeType":"YulExpressionStatement","src":"2599:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2576:2:24","nodeType":"YulIdentifier","src":"2576:2:24"},{"kind":"number","nativeSrc":"2580:4:24","nodeType":"YulLiteral","src":"2580:4:24","type":"","value":"0x1f"}],"functionName":{"name":"add","nativeSrc":"2572:3:24","nodeType":"YulIdentifier","src":"2572:3:24"},"nativeSrc":"2572:13:24","nodeType":"YulFunctionCall","src":"2572:13:24"},{"name":"dataEnd","nativeSrc":"2587:7:24","nodeType":"YulIdentifier","src":"2587:7:24"}],"functionName":{"name":"slt","nativeSrc":"2568:3:24","nodeType":"YulIdentifier","src":"2568:3:24"},"nativeSrc":"2568:27:24","nodeType":"YulFunctionCall","src":"2568:27:24"}],"functionName":{"name":"iszero","nativeSrc":"2561:6:24","nodeType":"YulIdentifier","src":"2561:6:24"},"nativeSrc":"2561:35:24","nodeType":"YulFunctionCall","src":"2561:35:24"},"nativeSrc":"2558:55:24","nodeType":"YulIf","src":"2558:55:24"},{"nativeSrc":"2622:30:24","nodeType":"YulVariableDeclaration","src":"2622:30:24","value":{"arguments":[{"name":"_2","nativeSrc":"2649:2:24","nodeType":"YulIdentifier","src":"2649:2:24"}],"functionName":{"name":"calldataload","nativeSrc":"2636:12:24","nodeType":"YulIdentifier","src":"2636:12:24"},"nativeSrc":"2636:16:24","nodeType":"YulFunctionCall","src":"2636:16:24"},"variables":[{"name":"length","nativeSrc":"2626:6:24","nodeType":"YulTypedName","src":"2626:6:24","type":""}]},{"body":{"nativeSrc":"2679:16:24","nodeType":"YulBlock","src":"2679:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2688:1:24","nodeType":"YulLiteral","src":"2688:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2691:1:24","nodeType":"YulLiteral","src":"2691:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2681:6:24","nodeType":"YulIdentifier","src":"2681:6:24"},"nativeSrc":"2681:12:24","nodeType":"YulFunctionCall","src":"2681:12:24"},"nativeSrc":"2681:12:24","nodeType":"YulExpressionStatement","src":"2681:12:24"}]},"condition":{"arguments":[{"name":"length","nativeSrc":"2667:6:24","nodeType":"YulIdentifier","src":"2667:6:24"},{"name":"_1","nativeSrc":"2675:2:24","nodeType":"YulIdentifier","src":"2675:2:24"}],"functionName":{"name":"gt","nativeSrc":"2664:2:24","nodeType":"YulIdentifier","src":"2664:2:24"},"nativeSrc":"2664:14:24","nodeType":"YulFunctionCall","src":"2664:14:24"},"nativeSrc":"2661:34:24","nodeType":"YulIf","src":"2661:34:24"},{"body":{"nativeSrc":"2753:16:24","nodeType":"YulBlock","src":"2753:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2762:1:24","nodeType":"YulLiteral","src":"2762:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2765:1:24","nodeType":"YulLiteral","src":"2765:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2755:6:24","nodeType":"YulIdentifier","src":"2755:6:24"},"nativeSrc":"2755:12:24","nodeType":"YulFunctionCall","src":"2755:12:24"},"nativeSrc":"2755:12:24","nodeType":"YulExpressionStatement","src":"2755:12:24"}]},"condition":{"arguments":[{"arguments":[{"arguments":[{"name":"_2","nativeSrc":"2718:2:24","nodeType":"YulIdentifier","src":"2718:2:24"},{"arguments":[{"kind":"number","nativeSrc":"2726:1:24","nodeType":"YulLiteral","src":"2726:1:24","type":"","value":"5"},{"name":"length","nativeSrc":"2729:6:24","nodeType":"YulIdentifier","src":"2729:6:24"}],"functionName":{"name":"shl","nativeSrc":"2722:3:24","nodeType":"YulIdentifier","src":"2722:3:24"},"nativeSrc":"2722:14:24","nodeType":"YulFunctionCall","src":"2722:14:24"}],"functionName":{"name":"add","nativeSrc":"2714:3:24","nodeType":"YulIdentifier","src":"2714:3:24"},"nativeSrc":"2714:23:24","nodeType":"YulFunctionCall","src":"2714:23:24"},{"kind":"number","nativeSrc":"2739:2:24","nodeType":"YulLiteral","src":"2739:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2710:3:24","nodeType":"YulIdentifier","src":"2710:3:24"},"nativeSrc":"2710:32:24","nodeType":"YulFunctionCall","src":"2710:32:24"},{"name":"dataEnd","nativeSrc":"2744:7:24","nodeType":"YulIdentifier","src":"2744:7:24"}],"functionName":{"name":"gt","nativeSrc":"2707:2:24","nodeType":"YulIdentifier","src":"2707:2:24"},"nativeSrc":"2707:45:24","nodeType":"YulFunctionCall","src":"2707:45:24"},"nativeSrc":"2704:65:24","nodeType":"YulIf","src":"2704:65:24"},{"nativeSrc":"2778:21:24","nodeType":"YulAssignment","src":"2778:21:24","value":{"arguments":[{"name":"_2","nativeSrc":"2792:2:24","nodeType":"YulIdentifier","src":"2792:2:24"},{"kind":"number","nativeSrc":"2796:2:24","nodeType":"YulLiteral","src":"2796:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"2788:3:24","nodeType":"YulIdentifier","src":"2788:3:24"},"nativeSrc":"2788:11:24","nodeType":"YulFunctionCall","src":"2788:11:24"},"variableNames":[{"name":"value1","nativeSrc":"2778:6:24","nodeType":"YulIdentifier","src":"2778:6:24"}]},{"nativeSrc":"2808:16:24","nodeType":"YulAssignment","src":"2808:16:24","value":{"name":"length","nativeSrc":"2818:6:24","nodeType":"YulIdentifier","src":"2818:6:24"},"variableNames":[{"name":"value2","nativeSrc":"2808:6:24","nodeType":"YulIdentifier","src":"2808:6:24"}]},{"nativeSrc":"2833:48:24","nodeType":"YulVariableDeclaration","src":"2833:48:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2866:9:24","nodeType":"YulIdentifier","src":"2866:9:24"},{"kind":"number","nativeSrc":"2877:2:24","nodeType":"YulLiteral","src":"2877:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"2862:3:24","nodeType":"YulIdentifier","src":"2862:3:24"},"nativeSrc":"2862:18:24","nodeType":"YulFunctionCall","src":"2862:18:24"}],"functionName":{"name":"calldataload","nativeSrc":"2849:12:24","nodeType":"YulIdentifier","src":"2849:12:24"},"nativeSrc":"2849:32:24","nodeType":"YulFunctionCall","src":"2849:32:24"},"variables":[{"name":"offset_1","nativeSrc":"2837:8:24","nodeType":"YulTypedName","src":"2837:8:24","type":""}]},{"body":{"nativeSrc":"2910:16:24","nodeType":"YulBlock","src":"2910:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"2919:1:24","nodeType":"YulLiteral","src":"2919:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"2922:1:24","nodeType":"YulLiteral","src":"2922:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"2912:6:24","nodeType":"YulIdentifier","src":"2912:6:24"},"nativeSrc":"2912:12:24","nodeType":"YulFunctionCall","src":"2912:12:24"},"nativeSrc":"2912:12:24","nodeType":"YulExpressionStatement","src":"2912:12:24"}]},"condition":{"arguments":[{"name":"offset_1","nativeSrc":"2896:8:24","nodeType":"YulIdentifier","src":"2896:8:24"},{"name":"_1","nativeSrc":"2906:2:24","nodeType":"YulIdentifier","src":"2906:2:24"}],"functionName":{"name":"gt","nativeSrc":"2893:2:24","nodeType":"YulIdentifier","src":"2893:2:24"},"nativeSrc":"2893:16:24","nodeType":"YulFunctionCall","src":"2893:16:24"},"nativeSrc":"2890:36:24","nodeType":"YulIf","src":"2890:36:24"},{"nativeSrc":"2935:86:24","nodeType":"YulVariableDeclaration","src":"2935:86:24","value":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"2991:9:24","nodeType":"YulIdentifier","src":"2991:9:24"},{"name":"offset_1","nativeSrc":"3002:8:24","nodeType":"YulIdentifier","src":"3002:8:24"}],"functionName":{"name":"add","nativeSrc":"2987:3:24","nodeType":"YulIdentifier","src":"2987:3:24"},"nativeSrc":"2987:24:24","nodeType":"YulFunctionCall","src":"2987:24:24"},{"name":"dataEnd","nativeSrc":"3013:7:24","nodeType":"YulIdentifier","src":"3013:7:24"}],"functionName":{"name":"abi_decode_bytes_calldata","nativeSrc":"2961:25:24","nodeType":"YulIdentifier","src":"2961:25:24"},"nativeSrc":"2961:60:24","nodeType":"YulFunctionCall","src":"2961:60:24"},"variables":[{"name":"value3_1","nativeSrc":"2939:8:24","nodeType":"YulTypedName","src":"2939:8:24","type":""},{"name":"value4_1","nativeSrc":"2949:8:24","nodeType":"YulTypedName","src":"2949:8:24","type":""}]},{"nativeSrc":"3030:18:24","nodeType":"YulAssignment","src":"3030:18:24","value":{"name":"value3_1","nativeSrc":"3040:8:24","nodeType":"YulIdentifier","src":"3040:8:24"},"variableNames":[{"name":"value3","nativeSrc":"3030:6:24","nodeType":"YulIdentifier","src":"3030:6:24"}]},{"nativeSrc":"3057:18:24","nodeType":"YulAssignment","src":"3057:18:24","value":{"name":"value4_1","nativeSrc":"3067:8:24","nodeType":"YulIdentifier","src":"3067:8:24"},"variableNames":[{"name":"value4","nativeSrc":"3057:6:24","nodeType":"YulIdentifier","src":"3057:6:24"}]}]},"name":"abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr","nativeSrc":"2111:970:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"2203:9:24","nodeType":"YulTypedName","src":"2203:9:24","type":""},{"name":"dataEnd","nativeSrc":"2214:7:24","nodeType":"YulTypedName","src":"2214:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"2226:6:24","nodeType":"YulTypedName","src":"2226:6:24","type":""},{"name":"value1","nativeSrc":"2234:6:24","nodeType":"YulTypedName","src":"2234:6:24","type":""},{"name":"value2","nativeSrc":"2242:6:24","nodeType":"YulTypedName","src":"2242:6:24","type":""},{"name":"value3","nativeSrc":"2250:6:24","nodeType":"YulTypedName","src":"2250:6:24","type":""},{"name":"value4","nativeSrc":"2258:6:24","nodeType":"YulTypedName","src":"2258:6:24","type":""}],"src":"2111:970:24"},{"body":{"nativeSrc":"3156:239:24","nodeType":"YulBlock","src":"3156:239:24","statements":[{"body":{"nativeSrc":"3202:16:24","nodeType":"YulBlock","src":"3202:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3211:1:24","nodeType":"YulLiteral","src":"3211:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"3214:1:24","nodeType":"YulLiteral","src":"3214:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3204:6:24","nodeType":"YulIdentifier","src":"3204:6:24"},"nativeSrc":"3204:12:24","nodeType":"YulFunctionCall","src":"3204:12:24"},"nativeSrc":"3204:12:24","nodeType":"YulExpressionStatement","src":"3204:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"3177:7:24","nodeType":"YulIdentifier","src":"3177:7:24"},{"name":"headStart","nativeSrc":"3186:9:24","nodeType":"YulIdentifier","src":"3186:9:24"}],"functionName":{"name":"sub","nativeSrc":"3173:3:24","nodeType":"YulIdentifier","src":"3173:3:24"},"nativeSrc":"3173:23:24","nodeType":"YulFunctionCall","src":"3173:23:24"},{"kind":"number","nativeSrc":"3198:2:24","nodeType":"YulLiteral","src":"3198:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"3169:3:24","nodeType":"YulIdentifier","src":"3169:3:24"},"nativeSrc":"3169:32:24","nodeType":"YulFunctionCall","src":"3169:32:24"},"nativeSrc":"3166:52:24","nodeType":"YulIf","src":"3166:52:24"},{"nativeSrc":"3227:36:24","nodeType":"YulVariableDeclaration","src":"3227:36:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3253:9:24","nodeType":"YulIdentifier","src":"3253:9:24"}],"functionName":{"name":"calldataload","nativeSrc":"3240:12:24","nodeType":"YulIdentifier","src":"3240:12:24"},"nativeSrc":"3240:23:24","nodeType":"YulFunctionCall","src":"3240:23:24"},"variables":[{"name":"value","nativeSrc":"3231:5:24","nodeType":"YulTypedName","src":"3231:5:24","type":""}]},{"body":{"nativeSrc":"3349:16:24","nodeType":"YulBlock","src":"3349:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"3358:1:24","nodeType":"YulLiteral","src":"3358:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"3361:1:24","nodeType":"YulLiteral","src":"3361:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"3351:6:24","nodeType":"YulIdentifier","src":"3351:6:24"},"nativeSrc":"3351:12:24","nodeType":"YulFunctionCall","src":"3351:12:24"},"nativeSrc":"3351:12:24","nodeType":"YulExpressionStatement","src":"3351:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"3285:5:24","nodeType":"YulIdentifier","src":"3285:5:24"},{"arguments":[{"name":"value","nativeSrc":"3296:5:24","nodeType":"YulIdentifier","src":"3296:5:24"},{"kind":"number","nativeSrc":"3303:42:24","nodeType":"YulLiteral","src":"3303:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"3292:3:24","nodeType":"YulIdentifier","src":"3292:3:24"},"nativeSrc":"3292:54:24","nodeType":"YulFunctionCall","src":"3292:54:24"}],"functionName":{"name":"eq","nativeSrc":"3282:2:24","nodeType":"YulIdentifier","src":"3282:2:24"},"nativeSrc":"3282:65:24","nodeType":"YulFunctionCall","src":"3282:65:24"}],"functionName":{"name":"iszero","nativeSrc":"3275:6:24","nodeType":"YulIdentifier","src":"3275:6:24"},"nativeSrc":"3275:73:24","nodeType":"YulFunctionCall","src":"3275:73:24"},"nativeSrc":"3272:93:24","nodeType":"YulIf","src":"3272:93:24"},{"nativeSrc":"3374:15:24","nodeType":"YulAssignment","src":"3374:15:24","value":{"name":"value","nativeSrc":"3384:5:24","nodeType":"YulIdentifier","src":"3384:5:24"},"variableNames":[{"name":"value0","nativeSrc":"3374:6:24","nodeType":"YulIdentifier","src":"3374:6:24"}]}]},"name":"abi_decode_tuple_t_address","nativeSrc":"3086:309:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3122:9:24","nodeType":"YulTypedName","src":"3122:9:24","type":""},{"name":"dataEnd","nativeSrc":"3133:7:24","nodeType":"YulTypedName","src":"3133:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"3145:6:24","nodeType":"YulTypedName","src":"3145:6:24","type":""}],"src":"3086:309:24"},{"body":{"nativeSrc":"3557:162:24","nodeType":"YulBlock","src":"3557:162:24","statements":[{"nativeSrc":"3567:26:24","nodeType":"YulAssignment","src":"3567:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"3579:9:24","nodeType":"YulIdentifier","src":"3579:9:24"},{"kind":"number","nativeSrc":"3590:2:24","nodeType":"YulLiteral","src":"3590:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"3575:3:24","nodeType":"YulIdentifier","src":"3575:3:24"},"nativeSrc":"3575:18:24","nodeType":"YulFunctionCall","src":"3575:18:24"},"variableNames":[{"name":"tail","nativeSrc":"3567:4:24","nodeType":"YulIdentifier","src":"3567:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"3609:9:24","nodeType":"YulIdentifier","src":"3609:9:24"},{"name":"value0","nativeSrc":"3620:6:24","nodeType":"YulIdentifier","src":"3620:6:24"}],"functionName":{"name":"mstore","nativeSrc":"3602:6:24","nodeType":"YulIdentifier","src":"3602:6:24"},"nativeSrc":"3602:25:24","nodeType":"YulFunctionCall","src":"3602:25:24"},"nativeSrc":"3602:25:24","nodeType":"YulExpressionStatement","src":"3602:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3647:9:24","nodeType":"YulIdentifier","src":"3647:9:24"},{"kind":"number","nativeSrc":"3658:2:24","nodeType":"YulLiteral","src":"3658:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"3643:3:24","nodeType":"YulIdentifier","src":"3643:3:24"},"nativeSrc":"3643:18:24","nodeType":"YulFunctionCall","src":"3643:18:24"},{"name":"value1","nativeSrc":"3663:6:24","nodeType":"YulIdentifier","src":"3663:6:24"}],"functionName":{"name":"mstore","nativeSrc":"3636:6:24","nodeType":"YulIdentifier","src":"3636:6:24"},"nativeSrc":"3636:34:24","nodeType":"YulFunctionCall","src":"3636:34:24"},"nativeSrc":"3636:34:24","nodeType":"YulExpressionStatement","src":"3636:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"3690:9:24","nodeType":"YulIdentifier","src":"3690:9:24"},{"kind":"number","nativeSrc":"3701:2:24","nodeType":"YulLiteral","src":"3701:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"3686:3:24","nodeType":"YulIdentifier","src":"3686:3:24"},"nativeSrc":"3686:18:24","nodeType":"YulFunctionCall","src":"3686:18:24"},{"name":"value2","nativeSrc":"3706:6:24","nodeType":"YulIdentifier","src":"3706:6:24"}],"functionName":{"name":"mstore","nativeSrc":"3679:6:24","nodeType":"YulIdentifier","src":"3679:6:24"},"nativeSrc":"3679:34:24","nodeType":"YulFunctionCall","src":"3679:34:24"},"nativeSrc":"3679:34:24","nodeType":"YulExpressionStatement","src":"3679:34:24"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256__to_t_bytes32_t_bytes32_t_uint256__fromStack_reversed","nativeSrc":"3400:319:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"3510:9:24","nodeType":"YulTypedName","src":"3510:9:24","type":""},{"name":"value2","nativeSrc":"3521:6:24","nodeType":"YulTypedName","src":"3521:6:24","type":""},{"name":"value1","nativeSrc":"3529:6:24","nodeType":"YulTypedName","src":"3529:6:24","type":""},{"name":"value0","nativeSrc":"3537:6:24","nodeType":"YulTypedName","src":"3537:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"3548:4:24","nodeType":"YulTypedName","src":"3548:4:24","type":""}],"src":"3400:319:24"},{"body":{"nativeSrc":"3972:196:24","nodeType":"YulBlock","src":"3972:196:24","statements":[{"expression":{"arguments":[{"name":"pos","nativeSrc":"3989:3:24","nodeType":"YulIdentifier","src":"3989:3:24"},{"kind":"number","nativeSrc":"3994:66:24","nodeType":"YulLiteral","src":"3994:66:24","type":"","value":"0x1901000000000000000000000000000000000000000000000000000000000000"}],"functionName":{"name":"mstore","nativeSrc":"3982:6:24","nodeType":"YulIdentifier","src":"3982:6:24"},"nativeSrc":"3982:79:24","nodeType":"YulFunctionCall","src":"3982:79:24"},"nativeSrc":"3982:79:24","nodeType":"YulExpressionStatement","src":"3982:79:24"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4081:3:24","nodeType":"YulIdentifier","src":"4081:3:24"},{"kind":"number","nativeSrc":"4086:1:24","nodeType":"YulLiteral","src":"4086:1:24","type":"","value":"2"}],"functionName":{"name":"add","nativeSrc":"4077:3:24","nodeType":"YulIdentifier","src":"4077:3:24"},"nativeSrc":"4077:11:24","nodeType":"YulFunctionCall","src":"4077:11:24"},{"name":"value0","nativeSrc":"4090:6:24","nodeType":"YulIdentifier","src":"4090:6:24"}],"functionName":{"name":"mstore","nativeSrc":"4070:6:24","nodeType":"YulIdentifier","src":"4070:6:24"},"nativeSrc":"4070:27:24","nodeType":"YulFunctionCall","src":"4070:27:24"},"nativeSrc":"4070:27:24","nodeType":"YulExpressionStatement","src":"4070:27:24"},{"expression":{"arguments":[{"arguments":[{"name":"pos","nativeSrc":"4117:3:24","nodeType":"YulIdentifier","src":"4117:3:24"},{"kind":"number","nativeSrc":"4122:2:24","nodeType":"YulLiteral","src":"4122:2:24","type":"","value":"34"}],"functionName":{"name":"add","nativeSrc":"4113:3:24","nodeType":"YulIdentifier","src":"4113:3:24"},"nativeSrc":"4113:12:24","nodeType":"YulFunctionCall","src":"4113:12:24"},{"name":"value1","nativeSrc":"4127:6:24","nodeType":"YulIdentifier","src":"4127:6:24"}],"functionName":{"name":"mstore","nativeSrc":"4106:6:24","nodeType":"YulIdentifier","src":"4106:6:24"},"nativeSrc":"4106:28:24","nodeType":"YulFunctionCall","src":"4106:28:24"},"nativeSrc":"4106:28:24","nodeType":"YulExpressionStatement","src":"4106:28:24"},{"nativeSrc":"4143:19:24","nodeType":"YulAssignment","src":"4143:19:24","value":{"arguments":[{"name":"pos","nativeSrc":"4154:3:24","nodeType":"YulIdentifier","src":"4154:3:24"},{"kind":"number","nativeSrc":"4159:2:24","nodeType":"YulLiteral","src":"4159:2:24","type":"","value":"66"}],"functionName":{"name":"add","nativeSrc":"4150:3:24","nodeType":"YulIdentifier","src":"4150:3:24"},"nativeSrc":"4150:12:24","nodeType":"YulFunctionCall","src":"4150:12:24"},"variableNames":[{"name":"end","nativeSrc":"4143:3:24","nodeType":"YulIdentifier","src":"4143:3:24"}]}]},"name":"abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed","nativeSrc":"3724:444:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"3940:3:24","nodeType":"YulTypedName","src":"3940:3:24","type":""},{"name":"value1","nativeSrc":"3945:6:24","nodeType":"YulTypedName","src":"3945:6:24","type":""},{"name":"value0","nativeSrc":"3953:6:24","nodeType":"YulTypedName","src":"3953:6:24","type":""}],"returnVariables":[{"name":"end","nativeSrc":"3964:3:24","nodeType":"YulTypedName","src":"3964:3:24","type":""}],"src":"3724:444:24"},{"body":{"nativeSrc":"4302:168:24","nodeType":"YulBlock","src":"4302:168:24","statements":[{"nativeSrc":"4312:26:24","nodeType":"YulAssignment","src":"4312:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"4324:9:24","nodeType":"YulIdentifier","src":"4324:9:24"},{"kind":"number","nativeSrc":"4335:2:24","nodeType":"YulLiteral","src":"4335:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"4320:3:24","nodeType":"YulIdentifier","src":"4320:3:24"},"nativeSrc":"4320:18:24","nodeType":"YulFunctionCall","src":"4320:18:24"},"variableNames":[{"name":"tail","nativeSrc":"4312:4:24","nodeType":"YulIdentifier","src":"4312:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"4354:9:24","nodeType":"YulIdentifier","src":"4354:9:24"},{"name":"value0","nativeSrc":"4365:6:24","nodeType":"YulIdentifier","src":"4365:6:24"}],"functionName":{"name":"mstore","nativeSrc":"4347:6:24","nodeType":"YulIdentifier","src":"4347:6:24"},"nativeSrc":"4347:25:24","nodeType":"YulFunctionCall","src":"4347:25:24"},"nativeSrc":"4347:25:24","nodeType":"YulExpressionStatement","src":"4347:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"4392:9:24","nodeType":"YulIdentifier","src":"4392:9:24"},{"kind":"number","nativeSrc":"4403:2:24","nodeType":"YulLiteral","src":"4403:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"4388:3:24","nodeType":"YulIdentifier","src":"4388:3:24"},"nativeSrc":"4388:18:24","nodeType":"YulFunctionCall","src":"4388:18:24"},{"arguments":[{"name":"value1","nativeSrc":"4412:6:24","nodeType":"YulIdentifier","src":"4412:6:24"},{"kind":"number","nativeSrc":"4420:42:24","nodeType":"YulLiteral","src":"4420:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"4408:3:24","nodeType":"YulIdentifier","src":"4408:3:24"},"nativeSrc":"4408:55:24","nodeType":"YulFunctionCall","src":"4408:55:24"}],"functionName":{"name":"mstore","nativeSrc":"4381:6:24","nodeType":"YulIdentifier","src":"4381:6:24"},"nativeSrc":"4381:83:24","nodeType":"YulFunctionCall","src":"4381:83:24"},"nativeSrc":"4381:83:24","nodeType":"YulExpressionStatement","src":"4381:83:24"}]},"name":"abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed","nativeSrc":"4173:297:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4263:9:24","nodeType":"YulTypedName","src":"4263:9:24","type":""},{"name":"value1","nativeSrc":"4274:6:24","nodeType":"YulTypedName","src":"4274:6:24","type":""},{"name":"value0","nativeSrc":"4282:6:24","nodeType":"YulTypedName","src":"4282:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"4293:4:24","nodeType":"YulTypedName","src":"4293:4:24","type":""}],"src":"4173:297:24"},{"body":{"nativeSrc":"4553:199:24","nodeType":"YulBlock","src":"4553:199:24","statements":[{"body":{"nativeSrc":"4599:16:24","nodeType":"YulBlock","src":"4599:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4608:1:24","nodeType":"YulLiteral","src":"4608:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4611:1:24","nodeType":"YulLiteral","src":"4611:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4601:6:24","nodeType":"YulIdentifier","src":"4601:6:24"},"nativeSrc":"4601:12:24","nodeType":"YulFunctionCall","src":"4601:12:24"},"nativeSrc":"4601:12:24","nodeType":"YulExpressionStatement","src":"4601:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"dataEnd","nativeSrc":"4574:7:24","nodeType":"YulIdentifier","src":"4574:7:24"},{"name":"headStart","nativeSrc":"4583:9:24","nodeType":"YulIdentifier","src":"4583:9:24"}],"functionName":{"name":"sub","nativeSrc":"4570:3:24","nodeType":"YulIdentifier","src":"4570:3:24"},"nativeSrc":"4570:23:24","nodeType":"YulFunctionCall","src":"4570:23:24"},{"kind":"number","nativeSrc":"4595:2:24","nodeType":"YulLiteral","src":"4595:2:24","type":"","value":"32"}],"functionName":{"name":"slt","nativeSrc":"4566:3:24","nodeType":"YulIdentifier","src":"4566:3:24"},"nativeSrc":"4566:32:24","nodeType":"YulFunctionCall","src":"4566:32:24"},"nativeSrc":"4563:52:24","nodeType":"YulIf","src":"4563:52:24"},{"nativeSrc":"4624:29:24","nodeType":"YulVariableDeclaration","src":"4624:29:24","value":{"arguments":[{"name":"headStart","nativeSrc":"4643:9:24","nodeType":"YulIdentifier","src":"4643:9:24"}],"functionName":{"name":"mload","nativeSrc":"4637:5:24","nodeType":"YulIdentifier","src":"4637:5:24"},"nativeSrc":"4637:16:24","nodeType":"YulFunctionCall","src":"4637:16:24"},"variables":[{"name":"value","nativeSrc":"4628:5:24","nodeType":"YulTypedName","src":"4628:5:24","type":""}]},{"body":{"nativeSrc":"4706:16:24","nodeType":"YulBlock","src":"4706:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"4715:1:24","nodeType":"YulLiteral","src":"4715:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"4718:1:24","nodeType":"YulLiteral","src":"4718:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"4708:6:24","nodeType":"YulIdentifier","src":"4708:6:24"},"nativeSrc":"4708:12:24","nodeType":"YulFunctionCall","src":"4708:12:24"},"nativeSrc":"4708:12:24","nodeType":"YulExpressionStatement","src":"4708:12:24"}]},"condition":{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4675:5:24","nodeType":"YulIdentifier","src":"4675:5:24"},{"arguments":[{"arguments":[{"name":"value","nativeSrc":"4696:5:24","nodeType":"YulIdentifier","src":"4696:5:24"}],"functionName":{"name":"iszero","nativeSrc":"4689:6:24","nodeType":"YulIdentifier","src":"4689:6:24"},"nativeSrc":"4689:13:24","nodeType":"YulFunctionCall","src":"4689:13:24"}],"functionName":{"name":"iszero","nativeSrc":"4682:6:24","nodeType":"YulIdentifier","src":"4682:6:24"},"nativeSrc":"4682:21:24","nodeType":"YulFunctionCall","src":"4682:21:24"}],"functionName":{"name":"eq","nativeSrc":"4672:2:24","nodeType":"YulIdentifier","src":"4672:2:24"},"nativeSrc":"4672:32:24","nodeType":"YulFunctionCall","src":"4672:32:24"}],"functionName":{"name":"iszero","nativeSrc":"4665:6:24","nodeType":"YulIdentifier","src":"4665:6:24"},"nativeSrc":"4665:40:24","nodeType":"YulFunctionCall","src":"4665:40:24"},"nativeSrc":"4662:60:24","nodeType":"YulIf","src":"4662:60:24"},{"nativeSrc":"4731:15:24","nodeType":"YulAssignment","src":"4731:15:24","value":{"name":"value","nativeSrc":"4741:5:24","nodeType":"YulIdentifier","src":"4741:5:24"},"variableNames":[{"name":"value0","nativeSrc":"4731:6:24","nodeType":"YulIdentifier","src":"4731:6:24"}]}]},"name":"abi_decode_tuple_t_bool_fromMemory","nativeSrc":"4475:277:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"4519:9:24","nodeType":"YulTypedName","src":"4519:9:24","type":""},{"name":"dataEnd","nativeSrc":"4530:7:24","nodeType":"YulTypedName","src":"4530:7:24","type":""}],"returnVariables":[{"name":"value0","nativeSrc":"4542:6:24","nodeType":"YulTypedName","src":"4542:6:24","type":""}],"src":"4475:277:24"},{"body":{"nativeSrc":"4936:225:24","nodeType":"YulBlock","src":"4936:225:24","statements":[{"body":{"nativeSrc":"5028:16:24","nodeType":"YulBlock","src":"5028:16:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5037:1:24","nodeType":"YulLiteral","src":"5037:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5040:1:24","nodeType":"YulLiteral","src":"5040:1:24","type":"","value":"0"}],"functionName":{"name":"revert","nativeSrc":"5030:6:24","nodeType":"YulIdentifier","src":"5030:6:24"},"nativeSrc":"5030:12:24","nodeType":"YulFunctionCall","src":"5030:12:24"},"nativeSrc":"5030:12:24","nodeType":"YulExpressionStatement","src":"5030:12:24"}]},"condition":{"arguments":[{"name":"value1","nativeSrc":"4952:6:24","nodeType":"YulIdentifier","src":"4952:6:24"},{"kind":"number","nativeSrc":"4960:66:24","nodeType":"YulLiteral","src":"4960:66:24","type":"","value":"0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"gt","nativeSrc":"4949:2:24","nodeType":"YulIdentifier","src":"4949:2:24"},"nativeSrc":"4949:78:24","nodeType":"YulFunctionCall","src":"4949:78:24"},"nativeSrc":"4946:98:24","nodeType":"YulIf","src":"4946:98:24"},{"nativeSrc":"5053:28:24","nodeType":"YulVariableDeclaration","src":"5053:28:24","value":{"arguments":[{"kind":"number","nativeSrc":"5071:1:24","nodeType":"YulLiteral","src":"5071:1:24","type":"","value":"5"},{"name":"value1","nativeSrc":"5074:6:24","nodeType":"YulIdentifier","src":"5074:6:24"}],"functionName":{"name":"shl","nativeSrc":"5067:3:24","nodeType":"YulIdentifier","src":"5067:3:24"},"nativeSrc":"5067:14:24","nodeType":"YulFunctionCall","src":"5067:14:24"},"variables":[{"name":"length","nativeSrc":"5057:6:24","nodeType":"YulTypedName","src":"5057:6:24","type":""}]},{"expression":{"arguments":[{"name":"pos","nativeSrc":"5103:3:24","nodeType":"YulIdentifier","src":"5103:3:24"},{"name":"value0","nativeSrc":"5108:6:24","nodeType":"YulIdentifier","src":"5108:6:24"},{"name":"length","nativeSrc":"5116:6:24","nodeType":"YulIdentifier","src":"5116:6:24"}],"functionName":{"name":"calldatacopy","nativeSrc":"5090:12:24","nodeType":"YulIdentifier","src":"5090:12:24"},"nativeSrc":"5090:33:24","nodeType":"YulFunctionCall","src":"5090:33:24"},"nativeSrc":"5090:33:24","nodeType":"YulExpressionStatement","src":"5090:33:24"},{"nativeSrc":"5132:23:24","nodeType":"YulAssignment","src":"5132:23:24","value":{"arguments":[{"name":"pos","nativeSrc":"5143:3:24","nodeType":"YulIdentifier","src":"5143:3:24"},{"name":"length","nativeSrc":"5148:6:24","nodeType":"YulIdentifier","src":"5148:6:24"}],"functionName":{"name":"add","nativeSrc":"5139:3:24","nodeType":"YulIdentifier","src":"5139:3:24"},"nativeSrc":"5139:16:24","nodeType":"YulFunctionCall","src":"5139:16:24"},"variableNames":[{"name":"end","nativeSrc":"5132:3:24","nodeType":"YulIdentifier","src":"5132:3:24"}]}]},"name":"abi_encode_tuple_packed_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed","nativeSrc":"4757:404:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"pos","nativeSrc":"4904:3:24","nodeType":"YulTypedName","src":"4904:3:24","type":""},{"name":"value1","nativeSrc":"4909:6:24","nodeType":"YulTypedName","src":"4909:6:24","type":""},{"name":"value0","nativeSrc":"4917:6:24","nodeType":"YulTypedName","src":"4917:6:24","type":""}],"returnVariables":[{"name":"end","nativeSrc":"4928:3:24","nodeType":"YulTypedName","src":"4928:3:24","type":""}],"src":"4757:404:24"},{"body":{"nativeSrc":"5323:162:24","nodeType":"YulBlock","src":"5323:162:24","statements":[{"nativeSrc":"5333:26:24","nodeType":"YulAssignment","src":"5333:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"5345:9:24","nodeType":"YulIdentifier","src":"5345:9:24"},{"kind":"number","nativeSrc":"5356:2:24","nodeType":"YulLiteral","src":"5356:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"5341:3:24","nodeType":"YulIdentifier","src":"5341:3:24"},"nativeSrc":"5341:18:24","nodeType":"YulFunctionCall","src":"5341:18:24"},"variableNames":[{"name":"tail","nativeSrc":"5333:4:24","nodeType":"YulIdentifier","src":"5333:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"5375:9:24","nodeType":"YulIdentifier","src":"5375:9:24"},{"name":"value0","nativeSrc":"5386:6:24","nodeType":"YulIdentifier","src":"5386:6:24"}],"functionName":{"name":"mstore","nativeSrc":"5368:6:24","nodeType":"YulIdentifier","src":"5368:6:24"},"nativeSrc":"5368:25:24","nodeType":"YulFunctionCall","src":"5368:25:24"},"nativeSrc":"5368:25:24","nodeType":"YulExpressionStatement","src":"5368:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5413:9:24","nodeType":"YulIdentifier","src":"5413:9:24"},{"kind":"number","nativeSrc":"5424:2:24","nodeType":"YulLiteral","src":"5424:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"5409:3:24","nodeType":"YulIdentifier","src":"5409:3:24"},"nativeSrc":"5409:18:24","nodeType":"YulFunctionCall","src":"5409:18:24"},{"name":"value1","nativeSrc":"5429:6:24","nodeType":"YulIdentifier","src":"5429:6:24"}],"functionName":{"name":"mstore","nativeSrc":"5402:6:24","nodeType":"YulIdentifier","src":"5402:6:24"},"nativeSrc":"5402:34:24","nodeType":"YulFunctionCall","src":"5402:34:24"},"nativeSrc":"5402:34:24","nodeType":"YulExpressionStatement","src":"5402:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"5456:9:24","nodeType":"YulIdentifier","src":"5456:9:24"},{"kind":"number","nativeSrc":"5467:2:24","nodeType":"YulLiteral","src":"5467:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"5452:3:24","nodeType":"YulIdentifier","src":"5452:3:24"},"nativeSrc":"5452:18:24","nodeType":"YulFunctionCall","src":"5452:18:24"},{"name":"value2","nativeSrc":"5472:6:24","nodeType":"YulIdentifier","src":"5472:6:24"}],"functionName":{"name":"mstore","nativeSrc":"5445:6:24","nodeType":"YulIdentifier","src":"5445:6:24"},"nativeSrc":"5445:34:24","nodeType":"YulFunctionCall","src":"5445:34:24"},"nativeSrc":"5445:34:24","nodeType":"YulExpressionStatement","src":"5445:34:24"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"5166:319:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"5276:9:24","nodeType":"YulTypedName","src":"5276:9:24","type":""},{"name":"value2","nativeSrc":"5287:6:24","nodeType":"YulTypedName","src":"5287:6:24","type":""},{"name":"value1","nativeSrc":"5295:6:24","nodeType":"YulTypedName","src":"5295:6:24","type":""},{"name":"value0","nativeSrc":"5303:6:24","nodeType":"YulTypedName","src":"5303:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"5314:4:24","nodeType":"YulTypedName","src":"5314:4:24","type":""}],"src":"5166:319:24"},{"body":{"nativeSrc":"5522:152:24","nodeType":"YulBlock","src":"5522:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5539:1:24","nodeType":"YulLiteral","src":"5539:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5542:77:24","nodeType":"YulLiteral","src":"5542:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5532:6:24","nodeType":"YulIdentifier","src":"5532:6:24"},"nativeSrc":"5532:88:24","nodeType":"YulFunctionCall","src":"5532:88:24"},"nativeSrc":"5532:88:24","nodeType":"YulExpressionStatement","src":"5532:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5636:1:24","nodeType":"YulLiteral","src":"5636:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"5639:4:24","nodeType":"YulLiteral","src":"5639:4:24","type":"","value":"0x32"}],"functionName":{"name":"mstore","nativeSrc":"5629:6:24","nodeType":"YulIdentifier","src":"5629:6:24"},"nativeSrc":"5629:15:24","nodeType":"YulFunctionCall","src":"5629:15:24"},"nativeSrc":"5629:15:24","nodeType":"YulExpressionStatement","src":"5629:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5660:1:24","nodeType":"YulLiteral","src":"5660:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5663:4:24","nodeType":"YulLiteral","src":"5663:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5653:6:24","nodeType":"YulIdentifier","src":"5653:6:24"},"nativeSrc":"5653:15:24","nodeType":"YulFunctionCall","src":"5653:15:24"},"nativeSrc":"5653:15:24","nodeType":"YulExpressionStatement","src":"5653:15:24"}]},"name":"panic_error_0x32","nativeSrc":"5490:184:24","nodeType":"YulFunctionDefinition","src":"5490:184:24"},{"body":{"nativeSrc":"5728:233:24","nodeType":"YulBlock","src":"5728:233:24","statements":[{"nativeSrc":"5738:17:24","nodeType":"YulAssignment","src":"5738:17:24","value":{"arguments":[{"name":"x","nativeSrc":"5750:1:24","nodeType":"YulIdentifier","src":"5750:1:24"},{"name":"y","nativeSrc":"5753:1:24","nodeType":"YulIdentifier","src":"5753:1:24"}],"functionName":{"name":"sub","nativeSrc":"5746:3:24","nodeType":"YulIdentifier","src":"5746:3:24"},"nativeSrc":"5746:9:24","nodeType":"YulFunctionCall","src":"5746:9:24"},"variableNames":[{"name":"diff","nativeSrc":"5738:4:24","nodeType":"YulIdentifier","src":"5738:4:24"}]},{"body":{"nativeSrc":"5787:168:24","nodeType":"YulBlock","src":"5787:168:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"5808:1:24","nodeType":"YulLiteral","src":"5808:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5811:77:24","nodeType":"YulLiteral","src":"5811:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"5801:6:24","nodeType":"YulIdentifier","src":"5801:6:24"},"nativeSrc":"5801:88:24","nodeType":"YulFunctionCall","src":"5801:88:24"},"nativeSrc":"5801:88:24","nodeType":"YulExpressionStatement","src":"5801:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5909:1:24","nodeType":"YulLiteral","src":"5909:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"5912:4:24","nodeType":"YulLiteral","src":"5912:4:24","type":"","value":"0x11"}],"functionName":{"name":"mstore","nativeSrc":"5902:6:24","nodeType":"YulIdentifier","src":"5902:6:24"},"nativeSrc":"5902:15:24","nodeType":"YulFunctionCall","src":"5902:15:24"},"nativeSrc":"5902:15:24","nodeType":"YulExpressionStatement","src":"5902:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"5937:1:24","nodeType":"YulLiteral","src":"5937:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"5940:4:24","nodeType":"YulLiteral","src":"5940:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"5930:6:24","nodeType":"YulIdentifier","src":"5930:6:24"},"nativeSrc":"5930:15:24","nodeType":"YulFunctionCall","src":"5930:15:24"},"nativeSrc":"5930:15:24","nodeType":"YulExpressionStatement","src":"5930:15:24"}]},"condition":{"arguments":[{"name":"diff","nativeSrc":"5770:4:24","nodeType":"YulIdentifier","src":"5770:4:24"},{"name":"x","nativeSrc":"5776:1:24","nodeType":"YulIdentifier","src":"5776:1:24"}],"functionName":{"name":"gt","nativeSrc":"5767:2:24","nodeType":"YulIdentifier","src":"5767:2:24"},"nativeSrc":"5767:11:24","nodeType":"YulFunctionCall","src":"5767:11:24"},"nativeSrc":"5764:191:24","nodeType":"YulIf","src":"5764:191:24"}]},"name":"checked_sub_t_uint256","nativeSrc":"5679:282:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"x","nativeSrc":"5710:1:24","nodeType":"YulTypedName","src":"5710:1:24","type":""},{"name":"y","nativeSrc":"5713:1:24","nodeType":"YulTypedName","src":"5713:1:24","type":""}],"returnVariables":[{"name":"diff","nativeSrc":"5719:4:24","nodeType":"YulTypedName","src":"5719:4:24","type":""}],"src":"5679:282:24"},{"body":{"nativeSrc":"6151:255:24","nodeType":"YulBlock","src":"6151:255:24","statements":[{"nativeSrc":"6161:27:24","nodeType":"YulAssignment","src":"6161:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"6173:9:24","nodeType":"YulIdentifier","src":"6173:9:24"},{"kind":"number","nativeSrc":"6184:3:24","nodeType":"YulLiteral","src":"6184:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"6169:3:24","nodeType":"YulIdentifier","src":"6169:3:24"},"nativeSrc":"6169:19:24","nodeType":"YulFunctionCall","src":"6169:19:24"},"variableNames":[{"name":"tail","nativeSrc":"6161:4:24","nodeType":"YulIdentifier","src":"6161:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6204:9:24","nodeType":"YulIdentifier","src":"6204:9:24"},{"name":"value0","nativeSrc":"6215:6:24","nodeType":"YulIdentifier","src":"6215:6:24"}],"functionName":{"name":"mstore","nativeSrc":"6197:6:24","nodeType":"YulIdentifier","src":"6197:6:24"},"nativeSrc":"6197:25:24","nodeType":"YulFunctionCall","src":"6197:25:24"},"nativeSrc":"6197:25:24","nodeType":"YulExpressionStatement","src":"6197:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6242:9:24","nodeType":"YulIdentifier","src":"6242:9:24"},{"kind":"number","nativeSrc":"6253:2:24","nodeType":"YulLiteral","src":"6253:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6238:3:24","nodeType":"YulIdentifier","src":"6238:3:24"},"nativeSrc":"6238:18:24","nodeType":"YulFunctionCall","src":"6238:18:24"},{"name":"value1","nativeSrc":"6258:6:24","nodeType":"YulIdentifier","src":"6258:6:24"}],"functionName":{"name":"mstore","nativeSrc":"6231:6:24","nodeType":"YulIdentifier","src":"6231:6:24"},"nativeSrc":"6231:34:24","nodeType":"YulFunctionCall","src":"6231:34:24"},"nativeSrc":"6231:34:24","nodeType":"YulExpressionStatement","src":"6231:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6285:9:24","nodeType":"YulIdentifier","src":"6285:9:24"},{"kind":"number","nativeSrc":"6296:2:24","nodeType":"YulLiteral","src":"6296:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6281:3:24","nodeType":"YulIdentifier","src":"6281:3:24"},"nativeSrc":"6281:18:24","nodeType":"YulFunctionCall","src":"6281:18:24"},{"name":"value2","nativeSrc":"6301:6:24","nodeType":"YulIdentifier","src":"6301:6:24"}],"functionName":{"name":"mstore","nativeSrc":"6274:6:24","nodeType":"YulIdentifier","src":"6274:6:24"},"nativeSrc":"6274:34:24","nodeType":"YulFunctionCall","src":"6274:34:24"},"nativeSrc":"6274:34:24","nodeType":"YulExpressionStatement","src":"6274:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6328:9:24","nodeType":"YulIdentifier","src":"6328:9:24"},{"kind":"number","nativeSrc":"6339:2:24","nodeType":"YulLiteral","src":"6339:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6324:3:24","nodeType":"YulIdentifier","src":"6324:3:24"},"nativeSrc":"6324:18:24","nodeType":"YulFunctionCall","src":"6324:18:24"},{"arguments":[{"name":"value3","nativeSrc":"6348:6:24","nodeType":"YulIdentifier","src":"6348:6:24"},{"kind":"number","nativeSrc":"6356:42:24","nodeType":"YulLiteral","src":"6356:42:24","type":"","value":"0xffffffffffffffffffffffffffffffffffffffff"}],"functionName":{"name":"and","nativeSrc":"6344:3:24","nodeType":"YulIdentifier","src":"6344:3:24"},"nativeSrc":"6344:55:24","nodeType":"YulFunctionCall","src":"6344:55:24"}],"functionName":{"name":"mstore","nativeSrc":"6317:6:24","nodeType":"YulIdentifier","src":"6317:6:24"},"nativeSrc":"6317:83:24","nodeType":"YulFunctionCall","src":"6317:83:24"},"nativeSrc":"6317:83:24","nodeType":"YulExpressionStatement","src":"6317:83:24"}]},"name":"abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed","nativeSrc":"5966:440:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6096:9:24","nodeType":"YulTypedName","src":"6096:9:24","type":""},{"name":"value3","nativeSrc":"6107:6:24","nodeType":"YulTypedName","src":"6107:6:24","type":""},{"name":"value2","nativeSrc":"6115:6:24","nodeType":"YulTypedName","src":"6115:6:24","type":""},{"name":"value1","nativeSrc":"6123:6:24","nodeType":"YulTypedName","src":"6123:6:24","type":""},{"name":"value0","nativeSrc":"6131:6:24","nodeType":"YulTypedName","src":"6131:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6142:4:24","nodeType":"YulTypedName","src":"6142:4:24","type":""}],"src":"5966:440:24"},{"body":{"nativeSrc":"6443:152:24","nodeType":"YulBlock","src":"6443:152:24","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"6460:1:24","nodeType":"YulLiteral","src":"6460:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"6463:77:24","nodeType":"YulLiteral","src":"6463:77:24","type":"","value":"35408467139433450592217433187231851964531694900788300625387963629091585785856"}],"functionName":{"name":"mstore","nativeSrc":"6453:6:24","nodeType":"YulIdentifier","src":"6453:6:24"},"nativeSrc":"6453:88:24","nodeType":"YulFunctionCall","src":"6453:88:24"},"nativeSrc":"6453:88:24","nodeType":"YulExpressionStatement","src":"6453:88:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6557:1:24","nodeType":"YulLiteral","src":"6557:1:24","type":"","value":"4"},{"kind":"number","nativeSrc":"6560:4:24","nodeType":"YulLiteral","src":"6560:4:24","type":"","value":"0x21"}],"functionName":{"name":"mstore","nativeSrc":"6550:6:24","nodeType":"YulIdentifier","src":"6550:6:24"},"nativeSrc":"6550:15:24","nodeType":"YulFunctionCall","src":"6550:15:24"},"nativeSrc":"6550:15:24","nodeType":"YulExpressionStatement","src":"6550:15:24"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"6581:1:24","nodeType":"YulLiteral","src":"6581:1:24","type":"","value":"0"},{"kind":"number","nativeSrc":"6584:4:24","nodeType":"YulLiteral","src":"6584:4:24","type":"","value":"0x24"}],"functionName":{"name":"revert","nativeSrc":"6574:6:24","nodeType":"YulIdentifier","src":"6574:6:24"},"nativeSrc":"6574:15:24","nodeType":"YulFunctionCall","src":"6574:15:24"},"nativeSrc":"6574:15:24","nodeType":"YulExpressionStatement","src":"6574:15:24"}]},"name":"panic_error_0x21","nativeSrc":"6411:184:24","nodeType":"YulFunctionDefinition","src":"6411:184:24"},{"body":{"nativeSrc":"6774:174:24","nodeType":"YulBlock","src":"6774:174:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"6791:9:24","nodeType":"YulIdentifier","src":"6791:9:24"},{"kind":"number","nativeSrc":"6802:2:24","nodeType":"YulLiteral","src":"6802:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"6784:6:24","nodeType":"YulIdentifier","src":"6784:6:24"},"nativeSrc":"6784:21:24","nodeType":"YulFunctionCall","src":"6784:21:24"},"nativeSrc":"6784:21:24","nodeType":"YulExpressionStatement","src":"6784:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6825:9:24","nodeType":"YulIdentifier","src":"6825:9:24"},{"kind":"number","nativeSrc":"6836:2:24","nodeType":"YulLiteral","src":"6836:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"6821:3:24","nodeType":"YulIdentifier","src":"6821:3:24"},"nativeSrc":"6821:18:24","nodeType":"YulFunctionCall","src":"6821:18:24"},{"kind":"number","nativeSrc":"6841:2:24","nodeType":"YulLiteral","src":"6841:2:24","type":"","value":"24"}],"functionName":{"name":"mstore","nativeSrc":"6814:6:24","nodeType":"YulIdentifier","src":"6814:6:24"},"nativeSrc":"6814:30:24","nodeType":"YulFunctionCall","src":"6814:30:24"},"nativeSrc":"6814:30:24","nodeType":"YulExpressionStatement","src":"6814:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"6864:9:24","nodeType":"YulIdentifier","src":"6864:9:24"},{"kind":"number","nativeSrc":"6875:2:24","nodeType":"YulLiteral","src":"6875:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"6860:3:24","nodeType":"YulIdentifier","src":"6860:3:24"},"nativeSrc":"6860:18:24","nodeType":"YulFunctionCall","src":"6860:18:24"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265","kind":"string","nativeSrc":"6880:26:24","nodeType":"YulLiteral","src":"6880:26:24","type":"","value":"ECDSA: invalid signature"}],"functionName":{"name":"mstore","nativeSrc":"6853:6:24","nodeType":"YulIdentifier","src":"6853:6:24"},"nativeSrc":"6853:54:24","nodeType":"YulFunctionCall","src":"6853:54:24"},"nativeSrc":"6853:54:24","nodeType":"YulExpressionStatement","src":"6853:54:24"},{"nativeSrc":"6916:26:24","nodeType":"YulAssignment","src":"6916:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"6928:9:24","nodeType":"YulIdentifier","src":"6928:9:24"},{"kind":"number","nativeSrc":"6939:2:24","nodeType":"YulLiteral","src":"6939:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"6924:3:24","nodeType":"YulIdentifier","src":"6924:3:24"},"nativeSrc":"6924:18:24","nodeType":"YulFunctionCall","src":"6924:18:24"},"variableNames":[{"name":"tail","nativeSrc":"6916:4:24","nodeType":"YulIdentifier","src":"6916:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6600:348:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"6751:9:24","nodeType":"YulTypedName","src":"6751:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"6765:4:24","nodeType":"YulTypedName","src":"6765:4:24","type":""}],"src":"6600:348:24"},{"body":{"nativeSrc":"7127:181:24","nodeType":"YulBlock","src":"7127:181:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7144:9:24","nodeType":"YulIdentifier","src":"7144:9:24"},{"kind":"number","nativeSrc":"7155:2:24","nodeType":"YulLiteral","src":"7155:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7137:6:24","nodeType":"YulIdentifier","src":"7137:6:24"},"nativeSrc":"7137:21:24","nodeType":"YulFunctionCall","src":"7137:21:24"},"nativeSrc":"7137:21:24","nodeType":"YulExpressionStatement","src":"7137:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7178:9:24","nodeType":"YulIdentifier","src":"7178:9:24"},{"kind":"number","nativeSrc":"7189:2:24","nodeType":"YulLiteral","src":"7189:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7174:3:24","nodeType":"YulIdentifier","src":"7174:3:24"},"nativeSrc":"7174:18:24","nodeType":"YulFunctionCall","src":"7174:18:24"},{"kind":"number","nativeSrc":"7194:2:24","nodeType":"YulLiteral","src":"7194:2:24","type":"","value":"31"}],"functionName":{"name":"mstore","nativeSrc":"7167:6:24","nodeType":"YulIdentifier","src":"7167:6:24"},"nativeSrc":"7167:30:24","nodeType":"YulFunctionCall","src":"7167:30:24"},"nativeSrc":"7167:30:24","nodeType":"YulExpressionStatement","src":"7167:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7217:9:24","nodeType":"YulIdentifier","src":"7217:9:24"},{"kind":"number","nativeSrc":"7228:2:24","nodeType":"YulLiteral","src":"7228:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7213:3:24","nodeType":"YulIdentifier","src":"7213:3:24"},"nativeSrc":"7213:18:24","nodeType":"YulFunctionCall","src":"7213:18:24"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265206c656e677468","kind":"string","nativeSrc":"7233:33:24","nodeType":"YulLiteral","src":"7233:33:24","type":"","value":"ECDSA: invalid signature length"}],"functionName":{"name":"mstore","nativeSrc":"7206:6:24","nodeType":"YulIdentifier","src":"7206:6:24"},"nativeSrc":"7206:61:24","nodeType":"YulFunctionCall","src":"7206:61:24"},"nativeSrc":"7206:61:24","nodeType":"YulExpressionStatement","src":"7206:61:24"},{"nativeSrc":"7276:26:24","nodeType":"YulAssignment","src":"7276:26:24","value":{"arguments":[{"name":"headStart","nativeSrc":"7288:9:24","nodeType":"YulIdentifier","src":"7288:9:24"},{"kind":"number","nativeSrc":"7299:2:24","nodeType":"YulLiteral","src":"7299:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7284:3:24","nodeType":"YulIdentifier","src":"7284:3:24"},"nativeSrc":"7284:18:24","nodeType":"YulFunctionCall","src":"7284:18:24"},"variableNames":[{"name":"tail","nativeSrc":"7276:4:24","nodeType":"YulIdentifier","src":"7276:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"6953:355:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7104:9:24","nodeType":"YulTypedName","src":"7104:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7118:4:24","nodeType":"YulTypedName","src":"7118:4:24","type":""}],"src":"6953:355:24"},{"body":{"nativeSrc":"7487:224:24","nodeType":"YulBlock","src":"7487:224:24","statements":[{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7504:9:24","nodeType":"YulIdentifier","src":"7504:9:24"},{"kind":"number","nativeSrc":"7515:2:24","nodeType":"YulLiteral","src":"7515:2:24","type":"","value":"32"}],"functionName":{"name":"mstore","nativeSrc":"7497:6:24","nodeType":"YulIdentifier","src":"7497:6:24"},"nativeSrc":"7497:21:24","nodeType":"YulFunctionCall","src":"7497:21:24"},"nativeSrc":"7497:21:24","nodeType":"YulExpressionStatement","src":"7497:21:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7538:9:24","nodeType":"YulIdentifier","src":"7538:9:24"},{"kind":"number","nativeSrc":"7549:2:24","nodeType":"YulLiteral","src":"7549:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7534:3:24","nodeType":"YulIdentifier","src":"7534:3:24"},"nativeSrc":"7534:18:24","nodeType":"YulFunctionCall","src":"7534:18:24"},{"kind":"number","nativeSrc":"7554:2:24","nodeType":"YulLiteral","src":"7554:2:24","type":"","value":"34"}],"functionName":{"name":"mstore","nativeSrc":"7527:6:24","nodeType":"YulIdentifier","src":"7527:6:24"},"nativeSrc":"7527:30:24","nodeType":"YulFunctionCall","src":"7527:30:24"},"nativeSrc":"7527:30:24","nodeType":"YulExpressionStatement","src":"7527:30:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7577:9:24","nodeType":"YulIdentifier","src":"7577:9:24"},{"kind":"number","nativeSrc":"7588:2:24","nodeType":"YulLiteral","src":"7588:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"7573:3:24","nodeType":"YulIdentifier","src":"7573:3:24"},"nativeSrc":"7573:18:24","nodeType":"YulFunctionCall","src":"7573:18:24"},{"hexValue":"45434453413a20696e76616c6964207369676e6174757265202773272076616c","kind":"string","nativeSrc":"7593:34:24","nodeType":"YulLiteral","src":"7593:34:24","type":"","value":"ECDSA: invalid signature 's' val"}],"functionName":{"name":"mstore","nativeSrc":"7566:6:24","nodeType":"YulIdentifier","src":"7566:6:24"},"nativeSrc":"7566:62:24","nodeType":"YulFunctionCall","src":"7566:62:24"},"nativeSrc":"7566:62:24","nodeType":"YulExpressionStatement","src":"7566:62:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7648:9:24","nodeType":"YulIdentifier","src":"7648:9:24"},{"kind":"number","nativeSrc":"7659:2:24","nodeType":"YulLiteral","src":"7659:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"7644:3:24","nodeType":"YulIdentifier","src":"7644:3:24"},"nativeSrc":"7644:18:24","nodeType":"YulFunctionCall","src":"7644:18:24"},{"hexValue":"7565","kind":"string","nativeSrc":"7664:4:24","nodeType":"YulLiteral","src":"7664:4:24","type":"","value":"ue"}],"functionName":{"name":"mstore","nativeSrc":"7637:6:24","nodeType":"YulIdentifier","src":"7637:6:24"},"nativeSrc":"7637:32:24","nodeType":"YulFunctionCall","src":"7637:32:24"},"nativeSrc":"7637:32:24","nodeType":"YulExpressionStatement","src":"7637:32:24"},{"nativeSrc":"7678:27:24","nodeType":"YulAssignment","src":"7678:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"7690:9:24","nodeType":"YulIdentifier","src":"7690:9:24"},{"kind":"number","nativeSrc":"7701:3:24","nodeType":"YulLiteral","src":"7701:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7686:3:24","nodeType":"YulIdentifier","src":"7686:3:24"},"nativeSrc":"7686:19:24","nodeType":"YulFunctionCall","src":"7686:19:24"},"variableNames":[{"name":"tail","nativeSrc":"7678:4:24","nodeType":"YulIdentifier","src":"7678:4:24"}]}]},"name":"abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed","nativeSrc":"7313:398:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7464:9:24","nodeType":"YulTypedName","src":"7464:9:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7478:4:24","nodeType":"YulTypedName","src":"7478:4:24","type":""}],"src":"7313:398:24"},{"body":{"nativeSrc":"7897:217:24","nodeType":"YulBlock","src":"7897:217:24","statements":[{"nativeSrc":"7907:27:24","nodeType":"YulAssignment","src":"7907:27:24","value":{"arguments":[{"name":"headStart","nativeSrc":"7919:9:24","nodeType":"YulIdentifier","src":"7919:9:24"},{"kind":"number","nativeSrc":"7930:3:24","nodeType":"YulLiteral","src":"7930:3:24","type":"","value":"128"}],"functionName":{"name":"add","nativeSrc":"7915:3:24","nodeType":"YulIdentifier","src":"7915:3:24"},"nativeSrc":"7915:19:24","nodeType":"YulFunctionCall","src":"7915:19:24"},"variableNames":[{"name":"tail","nativeSrc":"7907:4:24","nodeType":"YulIdentifier","src":"7907:4:24"}]},{"expression":{"arguments":[{"name":"headStart","nativeSrc":"7950:9:24","nodeType":"YulIdentifier","src":"7950:9:24"},{"name":"value0","nativeSrc":"7961:6:24","nodeType":"YulIdentifier","src":"7961:6:24"}],"functionName":{"name":"mstore","nativeSrc":"7943:6:24","nodeType":"YulIdentifier","src":"7943:6:24"},"nativeSrc":"7943:25:24","nodeType":"YulFunctionCall","src":"7943:25:24"},"nativeSrc":"7943:25:24","nodeType":"YulExpressionStatement","src":"7943:25:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"7988:9:24","nodeType":"YulIdentifier","src":"7988:9:24"},{"kind":"number","nativeSrc":"7999:2:24","nodeType":"YulLiteral","src":"7999:2:24","type":"","value":"32"}],"functionName":{"name":"add","nativeSrc":"7984:3:24","nodeType":"YulIdentifier","src":"7984:3:24"},"nativeSrc":"7984:18:24","nodeType":"YulFunctionCall","src":"7984:18:24"},{"arguments":[{"name":"value1","nativeSrc":"8008:6:24","nodeType":"YulIdentifier","src":"8008:6:24"},{"kind":"number","nativeSrc":"8016:4:24","nodeType":"YulLiteral","src":"8016:4:24","type":"","value":"0xff"}],"functionName":{"name":"and","nativeSrc":"8004:3:24","nodeType":"YulIdentifier","src":"8004:3:24"},"nativeSrc":"8004:17:24","nodeType":"YulFunctionCall","src":"8004:17:24"}],"functionName":{"name":"mstore","nativeSrc":"7977:6:24","nodeType":"YulIdentifier","src":"7977:6:24"},"nativeSrc":"7977:45:24","nodeType":"YulFunctionCall","src":"7977:45:24"},"nativeSrc":"7977:45:24","nodeType":"YulExpressionStatement","src":"7977:45:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8042:9:24","nodeType":"YulIdentifier","src":"8042:9:24"},{"kind":"number","nativeSrc":"8053:2:24","nodeType":"YulLiteral","src":"8053:2:24","type":"","value":"64"}],"functionName":{"name":"add","nativeSrc":"8038:3:24","nodeType":"YulIdentifier","src":"8038:3:24"},"nativeSrc":"8038:18:24","nodeType":"YulFunctionCall","src":"8038:18:24"},{"name":"value2","nativeSrc":"8058:6:24","nodeType":"YulIdentifier","src":"8058:6:24"}],"functionName":{"name":"mstore","nativeSrc":"8031:6:24","nodeType":"YulIdentifier","src":"8031:6:24"},"nativeSrc":"8031:34:24","nodeType":"YulFunctionCall","src":"8031:34:24"},"nativeSrc":"8031:34:24","nodeType":"YulExpressionStatement","src":"8031:34:24"},{"expression":{"arguments":[{"arguments":[{"name":"headStart","nativeSrc":"8085:9:24","nodeType":"YulIdentifier","src":"8085:9:24"},{"kind":"number","nativeSrc":"8096:2:24","nodeType":"YulLiteral","src":"8096:2:24","type":"","value":"96"}],"functionName":{"name":"add","nativeSrc":"8081:3:24","nodeType":"YulIdentifier","src":"8081:3:24"},"nativeSrc":"8081:18:24","nodeType":"YulFunctionCall","src":"8081:18:24"},{"name":"value3","nativeSrc":"8101:6:24","nodeType":"YulIdentifier","src":"8101:6:24"}],"functionName":{"name":"mstore","nativeSrc":"8074:6:24","nodeType":"YulIdentifier","src":"8074:6:24"},"nativeSrc":"8074:34:24","nodeType":"YulFunctionCall","src":"8074:34:24"},"nativeSrc":"8074:34:24","nodeType":"YulExpressionStatement","src":"8074:34:24"}]},"name":"abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed","nativeSrc":"7716:398:24","nodeType":"YulFunctionDefinition","parameters":[{"name":"headStart","nativeSrc":"7842:9:24","nodeType":"YulTypedName","src":"7842:9:24","type":""},{"name":"value3","nativeSrc":"7853:6:24","nodeType":"YulTypedName","src":"7853:6:24","type":""},{"name":"value2","nativeSrc":"7861:6:24","nodeType":"YulTypedName","src":"7861:6:24","type":""},{"name":"value1","nativeSrc":"7869:6:24","nodeType":"YulTypedName","src":"7869:6:24","type":""},{"name":"value0","nativeSrc":"7877:6:24","nodeType":"YulTypedName","src":"7877:6:24","type":""}],"returnVariables":[{"name":"tail","nativeSrc":"7888:4:24","nodeType":"YulTypedName","src":"7888:4:24","type":""}],"src":"7716:398:24"}]},"contents":"{\n    { }\n    function abi_decode_tuple_t_bytes4(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffff00000000000000000000000000000000000000000000000000000000))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_bytes32__to_t_bytes32__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_bytes_calldata(offset, end) -> arrayPos, length\n    {\n        if iszero(slt(add(offset, 0x1f), end)) { revert(0, 0) }\n        length := calldataload(offset)\n        if gt(length, 0xffffffffffffffff) { revert(0, 0) }\n        arrayPos := add(offset, 0x20)\n        if gt(add(add(offset, length), 0x20), end) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_bytes32t_uint256t_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n        let offset := calldataload(add(headStart, 64))\n        if gt(offset, 0xffffffffffffffff) { revert(0, 0) }\n        let value2_1, value3_1 := abi_decode_bytes_calldata(add(headStart, offset), dataEnd)\n        value2 := value2_1\n        value3 := value3_1\n    }\n    function abi_decode_tuple_t_bytes32t_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_bytes32t_array$_t_uint256_$dyn_calldata_ptrt_bytes_calldata_ptr(headStart, dataEnd) -> value0, value1, value2, value3, value4\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(0, 0) }\n        value0 := calldataload(headStart)\n        let offset := calldataload(add(headStart, 32))\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(0, 0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(0, 0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(0, 0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(0, 0) }\n        value1 := add(_2, 32)\n        value2 := length\n        let offset_1 := calldataload(add(headStart, 64))\n        if gt(offset_1, _1) { revert(0, 0) }\n        let value3_1, value4_1 := abi_decode_bytes_calldata(add(headStart, offset_1), dataEnd)\n        value3 := value3_1\n        value4 := value4_1\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256__to_t_bytes32_t_bytes32_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_packed_t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541_t_bytes32_t_bytes32__to_t_string_memory_ptr_t_bytes32_t_bytes32__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        mstore(pos, 0x1901000000000000000000000000000000000000000000000000000000000000)\n        mstore(add(pos, 2), value0)\n        mstore(add(pos, 34), value1)\n        end := add(pos, 66)\n    }\n    function abi_encode_tuple_t_bytes32_t_address__to_t_bytes32_t_address__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(0, 0) }\n        value0 := value\n    }\n    function abi_encode_tuple_packed_t_array$_t_uint256_$dyn_calldata_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value1, value0) -> end\n    {\n        if gt(value1, 0x07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { revert(0, 0) }\n        let length := shl(5, value1)\n        calldatacopy(pos, value0, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_bytes32__to_t_bytes32_t_bytes32_t_bytes32__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x)\n        {\n            mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x11)\n            revert(0, 0x24)\n        }\n    }\n    function abi_encode_tuple_t_bytes32_t_bytes32_t_uint256_t_address__to_t_bytes32_t_bytes32_t_uint256_t_address__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), and(value3, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function panic_error_0x21()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x21)\n        revert(0, 0x24)\n    }\n    function abi_encode_tuple_t_stringliteral_00043f6bf76368aa97c21698e9b9d4779e31902453daccf3525ddfb36e53e2be__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_1669ff3ba3cdf64474e1193492d05b8434e29b0b495e60095eb5f5c8ec14ce77__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature length\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_520d1f787dbcafbbfc007fd2c4ecf3d2711ec587f3ee9a1215c0b646c3e530bd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"ECDSA: invalid signature 's' val\")\n        mstore(add(headStart, 96), \"ue\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_bytes32_t_uint8_t_bytes32_t_bytes32__to_t_bytes32_t_uint8_t_bytes32_t_bytes32__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), and(value1, 0xff))\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n}","id":24,"language":"Yul","name":"#utility.yul"}],"immutableReferences":{"2654":[{"length":32,"start":1016},{"length":32,"start":1437},{"length":32,"start":1973}],"2662":[{"length":32,"start":419}],"2664":[{"length":32,"start":586}]},"linkReferences":{},"object":"608060405234801561001057600080fd5b50600436106100885760003560e01c8063a3a2656a1161005b578063a3a2656a1461010d578063d394ab5a14610120578063e688c27b1461015e578063f2fde38b1461017157600080fd5b806301ffc9a71461008d5780633644e515146100b55780638da5cb5b146100cb57806398fc75a2146100f8575b600080fd5b6100a061009b366004610e98565b610184565b60405190151581526020015b60405180910390f35b6100bd61019e565b6040519081526020016100ac565b6100d3610270565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100ac565b61010b610106366004610f23565b61029c565b005b6100a061011b366004610f76565b610536565b6100d361012e366004610f76565b600060208181529281526040808220909352908152205473ffffffffffffffffffffffffffffffffffffffff1681565b61010b61016c366004610f98565b610610565b61010b61017f366004611043565b610926565b60006101988261019261093d565b9061096b565b92915050565b6000467f0000000000000000000000000000000000000000000000000000000000000000811461024857604080517f8cad95687ba82c2ce50e74f7b754645e5117c3a5bec8151c0726d5857980a8666020808301919091527fe951ffb7916e206225d235b0f631570b39e4e0323bc42da6208ae1258c2ecd3e8284015260608201849052306080808401919091528351808403909101815260a0909201909252805191012061026a565b7f00000000000000000000000000000000000000000000000000000000000000005b91505090565b600061029761027d610a45565b5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b60006102a661019e565b604080517fccd989bd7181bf32a5252e0794fbd3acd778c350d2667f94457755c1849899df602082015290810187905260608101869052608001604051602081830303815290604052805190602001206040516020016103389291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f860181900481028401810190925284835292506000916103a9918690869081908401838280828437600092019190915250508551602087012092915050610a73565b6040517ff9236a390000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f9236a3990604401602060405180830381865afa158015610441573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104659190611079565b156104fc5760008681526020818152604080832088845282529182902080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85169081179091559151918252869188917f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f5056910160405180910390a361052e565b6040517fbdbfe21600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050505050565b6000828152602081815260408083208484529091528082205490517ff9236a390000000000000000000000000000000000000000000000000000000081526004810185905273ffffffffffffffffffffffffffffffffffffffff91821660248201819052917f0000000000000000000000000000000000000000000000000000000000000000169063f9236a3990604401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190611079565b949350505050565b600061061a61019e565b7f74c3c2704ed3af9e8114f76711701f9cef0242b680ea2bdec8423e461f3895ab87878760405160200161064f92919061109b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301949094528101919091526060810191909152608001604051602081830303815290604052805190602001206040516020016106f59291907f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181526020601f86018190048102840181019092528483529250600091610766918690869081908401838280828437600092019190915250508551602087012092915050610a73565b6040517ff9236a390000000000000000000000000000000000000000000000000000000081526004810189905273ffffffffffffffffffffffffffffffffffffffff80831660248301529192507f00000000000000000000000000000000000000000000000000000000000000009091169063f9236a3990604401602060405180830381865afa1580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108229190611079565b156104fc5760005b8581101561091c5760008881526020819052604081208391898985818110610854576108546110dd565b90506020020135815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508686828181106108b9576108b96110dd565b90506020020135887f2f844f99f3ce1f0191a01a59fd0c17e12427806ea6e7bcaec13443fd6b9f50568460405161090c919073ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b60405180910390a360010161082a565b5050505050505050565b61093a3382610933610a45565b9190610a97565b50565b60008061019860017fca9d3e17f264b0f3984e2634e94adb37fa3e6a8103f06aeae6fa59e21c769f5e61110c565b60007c01000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316016109bb57506000610198565b7ffe003659000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000831601610a0c57506001610198565b507fffffffff00000000000000000000000000000000000000000000000000000000166000908152602091909152604090205460ff1690565b60008061019860017fc9ed16f33ab3a66c84bfd83099ccb2a8845871e2e1c1928f63797152f0fd54cd61110c565b6000806000610a828585610bb1565b91509150610a8f81610bf6565b509392505050565b825473ffffffffffffffffffffffffffffffffffffffff9081169083168114610b09576040517f2ef4875e00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff841660048201526024015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610bab5783547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8381169182178655604051908316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35b50505050565b6000808251604103610be75760208301516040840151606085015160001a610bdb87828585610da9565b94509450505050610bef565b506000905060025b9250929050565b6000816004811115610c0a57610c0a611146565b03610c125750565b6001816004811115610c2657610c26611146565b03610c8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610b00565b6002816004811115610ca157610ca1611146565b03610d08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610b00565b6003816004811115610d1c57610d1c611146565b0361093a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f75650000000000000000000000000000000000000000000000000000000000006064820152608401610b00565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610de05750600090506003610e8f565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610e34573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610e8857600060019250925050610e8f565b9150600090505b94509492505050565b600060208284031215610eaa57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610eda57600080fd5b9392505050565b60008083601f840112610ef357600080fd5b50813567ffffffffffffffff811115610f0b57600080fd5b602083019150836020828501011115610bef57600080fd5b60008060008060608587031215610f3957600080fd5b8435935060208501359250604085013567ffffffffffffffff811115610f5e57600080fd5b610f6a87828801610ee1565b95989497509550505050565b60008060408385031215610f8957600080fd5b50508035926020909101359150565b600080600080600060608688031215610fb057600080fd5b85359450602086013567ffffffffffffffff80821115610fcf57600080fd5b818801915088601f830112610fe357600080fd5b813581811115610ff257600080fd5b8960208260051b850101111561100757600080fd5b60208301965080955050604088013591508082111561102557600080fd5b5061103288828901610ee1565b969995985093965092949392505050565b60006020828403121561105557600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610eda57600080fd5b60006020828403121561108b57600080fd5b81518015158114610eda57600080fd5b60007f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8311156110ca57600080fd5b8260051b80858437919091019392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b81810381811115610198577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfea2646970667358221220ab9c60f2c86917f86da36d860b55ebca22aab619c19877b681637bc1d680093764736f6c63430008160033","opcodes":"PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x88 JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xA3A2656A GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xA3A2656A EQ PUSH2 0x10D JUMPI DUP1 PUSH4 0xD394AB5A EQ PUSH2 0x120 JUMPI DUP1 PUSH4 0xE688C27B EQ PUSH2 0x15E JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x171 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x1FFC9A7 EQ PUSH2 0x8D JUMPI DUP1 PUSH4 0x3644E515 EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xCB JUMPI DUP1 PUSH4 0x98FC75A2 EQ PUSH2 0xF8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA0 PUSH2 0x9B CALLDATASIZE PUSH1 0x4 PUSH2 0xE98 JUMP JUMPDEST PUSH2 0x184 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0xBD PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x270 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0xAC JUMP JUMPDEST PUSH2 0x10B PUSH2 0x106 CALLDATASIZE PUSH1 0x4 PUSH2 0xF23 JUMP JUMPDEST PUSH2 0x29C JUMP JUMPDEST STOP JUMPDEST PUSH2 0xA0 PUSH2 0x11B CALLDATASIZE PUSH1 0x4 PUSH2 0xF76 JUMP JUMPDEST PUSH2 0x536 JUMP JUMPDEST PUSH2 0xD3 PUSH2 0x12E CALLDATASIZE PUSH1 0x4 PUSH2 0xF76 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP2 DUP2 MSTORE SWAP3 DUP2 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP1 SWAP4 MSTORE SWAP1 DUP2 MSTORE KECCAK256 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x16C CALLDATASIZE PUSH1 0x4 PUSH2 0xF98 JUMP JUMPDEST PUSH2 0x610 JUMP JUMPDEST PUSH2 0x10B PUSH2 0x17F CALLDATASIZE PUSH1 0x4 PUSH2 0x1043 JUMP JUMPDEST PUSH2 0x926 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x198 DUP3 PUSH2 0x192 PUSH2 0x93D JUMP JUMPDEST SWAP1 PUSH2 0x96B JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 CHAINID PUSH32 0x0 DUP2 EQ PUSH2 0x248 JUMPI PUSH1 0x40 DUP1 MLOAD PUSH32 0x8CAD95687BA82C2CE50E74F7B754645E5117C3A5BEC8151C0726D5857980A866 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0xE951FFB7916E206225D235B0F631570B39E4E0323BC42DA6208AE1258C2ECD3E DUP3 DUP5 ADD MSTORE PUSH1 0x60 DUP3 ADD DUP5 SWAP1 MSTORE ADDRESS PUSH1 0x80 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE DUP4 MLOAD DUP1 DUP5 SUB SWAP1 SWAP2 ADD DUP2 MSTORE PUSH1 0xA0 SWAP1 SWAP3 ADD SWAP1 SWAP3 MSTORE DUP1 MLOAD SWAP2 ADD KECCAK256 PUSH2 0x26A JUMP JUMPDEST PUSH32 0x0 JUMPDEST SWAP2 POP POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x297 PUSH2 0x27D PUSH2 0xA45 JUMP JUMPDEST SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND SWAP1 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x2A6 PUSH2 0x19E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xCCD989BD7181BF32A5252E0794FBD3ACD778C350D2667F94457755C1849899DF PUSH1 0x20 DUP3 ADD MSTORE SWAP1 DUP2 ADD DUP8 SWAP1 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x338 SWAP3 SWAP2 SWAP1 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 PUSH1 0x1F DUP7 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP5 DUP4 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x3A9 SWAP2 DUP7 SWAP1 DUP7 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP6 MLOAD PUSH1 0x20 DUP8 ADD KECCAK256 SWAP3 SWAP2 POP POP PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP9 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x441 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x465 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 DUP7 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP9 DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE SWAP2 MLOAD SWAP2 DUP3 MSTORE DUP7 SWAP2 DUP9 SWAP2 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH2 0x52E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xBDBFE21600000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP5 DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP1 DUP3 KECCAK256 SLOAD SWAP1 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP6 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 DUP3 AND PUSH1 0x24 DUP3 ADD DUP2 SWAP1 MSTORE SWAP2 PUSH32 0x0 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x5E4 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x608 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x61A PUSH2 0x19E JUMP JUMPDEST PUSH32 0x74C3C2704ED3AF9E8114F76711701F9CEF0242B680EA2BDEC8423E461F3895AB DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x64F SWAP3 SWAP2 SWAP1 PUSH2 0x109B JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE DUP3 DUP3 MSTORE DUP1 MLOAD PUSH1 0x20 SWAP2 DUP3 ADD KECCAK256 SWAP1 DUP4 ADD SWAP5 SWAP1 SWAP5 MSTORE DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x80 ADD PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE DUP1 MLOAD SWAP1 PUSH1 0x20 ADD KECCAK256 PUSH1 0x40 MLOAD PUSH1 0x20 ADD PUSH2 0x6F5 SWAP3 SWAP2 SWAP1 PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x2 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x22 DUP3 ADD MSTORE PUSH1 0x42 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x20 PUSH1 0x1F DUP7 ADD DUP2 SWAP1 DIV DUP2 MUL DUP5 ADD DUP2 ADD SWAP1 SWAP3 MSTORE DUP5 DUP4 MSTORE SWAP3 POP PUSH1 0x0 SWAP2 PUSH2 0x766 SWAP2 DUP7 SWAP1 DUP7 SWAP1 DUP2 SWAP1 DUP5 ADD DUP4 DUP3 DUP1 DUP3 DUP5 CALLDATACOPY PUSH1 0x0 SWAP3 ADD SWAP2 SWAP1 SWAP2 MSTORE POP POP DUP6 MLOAD PUSH1 0x20 DUP8 ADD KECCAK256 SWAP3 SWAP2 POP POP PUSH2 0xA73 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH32 0xF9236A3900000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x4 DUP2 ADD DUP10 SWAP1 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP1 DUP4 AND PUSH1 0x24 DUP4 ADD MSTORE SWAP2 SWAP3 POP PUSH32 0x0 SWAP1 SWAP2 AND SWAP1 PUSH4 0xF9236A39 SWAP1 PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x7FE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x822 SWAP2 SWAP1 PUSH2 0x1079 JUMP JUMPDEST ISZERO PUSH2 0x4FC JUMPI PUSH1 0x0 JUMPDEST DUP6 DUP2 LT ISZERO PUSH2 0x91C JUMPI PUSH1 0x0 DUP9 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP4 SWAP2 DUP10 DUP10 DUP6 DUP2 DUP2 LT PUSH2 0x854 JUMPI PUSH2 0x854 PUSH2 0x10DD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 KECCAK256 PUSH1 0x0 PUSH2 0x100 EXP DUP2 SLOAD DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF MUL NOT AND SWAP1 DUP4 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND MUL OR SWAP1 SSTORE POP DUP7 DUP7 DUP3 DUP2 DUP2 LT PUSH2 0x8B9 JUMPI PUSH2 0x8B9 PUSH2 0x10DD JUMP JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD CALLDATALOAD DUP9 PUSH32 0x2F844F99F3CE1F0191A01A59FD0C17E12427806EA6E7BCAEC13443FD6B9F5056 DUP5 PUSH1 0x40 MLOAD PUSH2 0x90C SWAP2 SWAP1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP2 SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD SWAP1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH1 0x1 ADD PUSH2 0x82A JUMP JUMPDEST POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH2 0x93A CALLER DUP3 PUSH2 0x933 PUSH2 0xA45 JUMP JUMPDEST SWAP2 SWAP1 PUSH2 0xA97 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xCA9D3E17F264B0F3984E2634E94ADB37FA3E6A8103F06AEAE6FA59E21C769F5E PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0x9BB JUMPI POP PUSH1 0x0 PUSH2 0x198 JUMP JUMPDEST PUSH32 0xFE00365900000000000000000000000000000000000000000000000000000000 PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP4 AND ADD PUSH2 0xA0C JUMPI POP PUSH1 0x1 PUSH2 0x198 JUMP JUMPDEST POP PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH2 0x198 PUSH1 0x1 PUSH32 0xC9ED16F33AB3A66C84BFD83099CCB2A8845871E2E1C1928F63797152F0FD54CD PUSH2 0x110C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH2 0xA82 DUP6 DUP6 PUSH2 0xBB1 JUMP JUMPDEST SWAP2 POP SWAP2 POP PUSH2 0xA8F DUP2 PUSH2 0xBF6 JUMP JUMPDEST POP SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 DUP2 AND SWAP1 DUP4 AND DUP2 EQ PUSH2 0xB09 JUMPI PUSH1 0x40 MLOAD PUSH32 0x2EF4875E00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND DUP2 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND EQ PUSH2 0xBAB JUMPI DUP4 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 DUP2 AND SWAP2 DUP3 OR DUP7 SSTORE PUSH1 0x40 MLOAD SWAP1 DUP4 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP3 MLOAD PUSH1 0x41 SUB PUSH2 0xBE7 JUMPI PUSH1 0x20 DUP4 ADD MLOAD PUSH1 0x40 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x0 BYTE PUSH2 0xBDB DUP8 DUP3 DUP6 DUP6 PUSH2 0xDA9 JUMP JUMPDEST SWAP5 POP SWAP5 POP POP POP POP PUSH2 0xBEF JUMP JUMPDEST POP PUSH1 0x0 SWAP1 POP PUSH1 0x2 JUMPDEST SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC0A JUMPI PUSH2 0xC0A PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xC12 JUMPI POP JUMP JUMPDEST PUSH1 0x1 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xC26 JUMPI PUSH2 0xC26 PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xC8D JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E61747572650000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x2 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xCA1 JUMPI PUSH2 0xCA1 PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0xD08 JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265206C656E67746800 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xD1C JUMPI PUSH2 0xD1C PUSH2 0x1146 JUMP JUMPDEST SUB PUSH2 0x93A JUMPI PUSH1 0x40 MLOAD PUSH32 0x8C379A000000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x45434453413A20696E76616C6964207369676E6174757265202773272076616C PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x7565000000000000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0xB00 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0 DUP4 GT ISZERO PUSH2 0xDE0 JUMPI POP PUSH1 0x0 SWAP1 POP PUSH1 0x3 PUSH2 0xE8F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x0 DUP1 DUP3 MSTORE PUSH1 0x20 DUP3 ADD DUP1 DUP5 MSTORE DUP10 SWAP1 MSTORE PUSH1 0xFF DUP9 AND SWAP3 DUP3 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP2 ADD DUP7 SWAP1 MSTORE PUSH1 0x80 DUP2 ADD DUP6 SWAP1 MSTORE PUSH1 0x1 SWAP1 PUSH1 0xA0 ADD PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 DUP6 GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE34 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 ADD MLOAD SWAP2 POP POP PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND PUSH2 0xE88 JUMPI PUSH1 0x0 PUSH1 0x1 SWAP3 POP SWAP3 POP POP PUSH2 0xE8F JUMP JUMPDEST SWAP2 POP PUSH1 0x0 SWAP1 POP JUMPDEST SWAP5 POP SWAP5 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0xEAA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 DUP2 AND DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 DUP4 PUSH1 0x1F DUP5 ADD SLT PUSH2 0xEF3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP DUP2 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF0B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP2 POP DUP4 PUSH1 0x20 DUP3 DUP6 ADD ADD GT ISZERO PUSH2 0xBEF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x60 DUP6 DUP8 SUB SLT ISZERO PUSH2 0xF39 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP5 CALLDATALOAD SWAP4 POP PUSH1 0x20 DUP6 ADD CALLDATALOAD SWAP3 POP PUSH1 0x40 DUP6 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xF5E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xF6A DUP8 DUP3 DUP9 ADD PUSH2 0xEE1 JUMP JUMPDEST SWAP6 SWAP9 SWAP5 SWAP8 POP SWAP6 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xF89 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP DUP1 CALLDATALOAD SWAP3 PUSH1 0x20 SWAP1 SWAP2 ADD CALLDATALOAD SWAP2 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP7 DUP9 SUB SLT ISZERO PUSH2 0xFB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 CALLDATALOAD SWAP5 POP PUSH1 0x20 DUP7 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0xFCF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 DUP9 ADD SWAP2 POP DUP9 PUSH1 0x1F DUP4 ADD SLT PUSH2 0xFE3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0xFF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP10 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1007 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x20 DUP4 ADD SWAP7 POP DUP1 SWAP6 POP POP PUSH1 0x40 DUP9 ADD CALLDATALOAD SWAP2 POP DUP1 DUP3 GT ISZERO PUSH2 0x1025 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1032 DUP9 DUP3 DUP10 ADD PUSH2 0xEE1 JUMP JUMPDEST SWAP7 SWAP10 SWAP6 SWAP9 POP SWAP4 SWAP7 POP SWAP3 SWAP5 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1055 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x108B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0xEDA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH32 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 GT ISZERO PUSH2 0x10CA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 PUSH1 0x5 SHL DUP1 DUP6 DUP5 CALLDATACOPY SWAP2 SWAP1 SWAP2 ADD SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x198 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x21 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xAB SWAP13 PUSH1 0xF2 0xC8 PUSH10 0x17F86DA36D860B55EBCA 0x22 0xAA 0xB6 NOT 0xC1 SWAP9 PUSH24 0xB681637BC1D680093764736F6C6343000816003300000000 ","sourceMap":"592:5171:20:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;542:165:7;;;;;;:::i;:::-;;:::i;:::-;;;516:14:24;;509:22;491:41;;479:2;464:18;542:165:7;;;;;;;;1914:404:20;;;:::i;:::-;;;689:25:24;;;677:2;662:18;1914:404:20;543:177:24;710:120:1;;;:::i;:::-;;;901:42:24;889:55;;;871:74;;859:2;844:18;710:120:1;725:226:24;3463:542:20;;;;;;:::i;:::-;;:::i;:::-;;2429:604;;;;;;:::i;:::-;;:::i;1094:66::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;4452:909;;;;;;:::i;:::-;;:::i;864:152:1:-;;;;;;:::i;:::-;;:::i;542:165:7:-;612:4;635:65;688:11;635:34;:32;:34::i;:::-;:52;;:65::i;:::-;628:72;542:165;-1:-1:-1;;542:165:7:o;1914:404:20:-;1963:23;2057:9;2223:20;2212:31;;:99;;5506:234;;;5538:80;5506:234;;;;6197:25:24;;;;765:33:20;6238:18:24;;;6231:34;6281:18;;;6274:34;;;5717:4:20;6324:18:24;;;;6317:83;;;;5506:234:20;;;;;;;;;;6169:19:24;;;;5506:234:20;;;5479:275;;;;;2212:99;;;2246:28;2212:99;2205:106;;;1914:404;:::o;710:120:1:-;756:7;782:41;:33;:31;:33::i;:::-;3652:15:6;;;;3556:118;782:41:1;775:48;;710:120;:::o;3463:542:20:-;3565:17;3614:18;:16;:18::i;:::-;3644:50;;;847:59;3644:50;;;3602:25:24;3643:18;;;3636:34;;;3686:18;;;3679:34;;;3575:18;;3644:50:20;;;;;;;;;;;;3634:61;;;;;;3585:111;;;;;;;;3994:66:24;3982:79;;4086:1;4077:11;;4070:27;;;;4122:2;4113:12;;4106:28;4159:2;4150:12;;3724:444;3585:111:20;;;;;;;;;;;;3723:34;;;;;;;;;;;;;;;;;;3585:111;-1:-1:-1;3706:14:20;;3723:34;;3747:9;;;;;;3723:34;;3747:9;;;;3723:34;;;;;;;;;-1:-1:-1;;3723:15:20;;;;;;;:34;-1:-1:-1;;3723:23:20;:34::i;:::-;3772:45;;;;;;;;4347:25:24;;;3772:20:20;4408:55:24;;;4388:18;;;4381:83;3706:51:20;;-1:-1:-1;3772:12:20;:20;;;;;;4320:18:24;;3772:45:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3768:231;;;3833:11;:28;;;;;;;;;;;:34;;;;;;;;;:43;;;;;;;;;;;;;3895:40;;871:74:24;;;3833:34:20;;:28;;3895:40;;844:18:24;3895:40:20;;;;;;;3768:231;;;3973:15;;;;;;;;;;;;;;3768:231;3555:450;;3463:542;;;;:::o;2429:604::-;2510:12;2929:28;;;;;;;;;;;:34;;;;;;;;;;2980:46;;;;;;;;4347:25:24;;;2929:34:20;;;;4388:18:24;;;4381:83;;;2929:34:20;2980:12;:20;;;;4320:18:24;;2980:46:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;2973:53;2429:604;-1:-1:-1;;;;2429:604:20:o;4452:909::-;4572:17;4646:18;:16;:18::i;:::-;961:68;4906:15;4950:5;;4933:23;;;;;;;;;:::i;:::-;;;;;;;;;;;;;;4923:34;;4933:23;4923:34;;;;4872:86;;;3602:25:24;;;;3643:18;;3636:34;;;;3686:18;;;3679:34;;;;3575:18;;4872:86:20;;;;;;;;;;;;4862:97;;;;;;4592:377;;;;;;;;3994:66:24;3982:79;;4086:1;4077:11;;4070:27;;;;4122:2;4113:12;;4106:28;4159:2;4150:12;;3724:444;4592:377:20;;;;;;;;;;;;4996:34;;;;;;;;;;;;;;;;;;4592:377;-1:-1:-1;4979:14:20;;4996:34;;5020:9;;;;;;4996:34;;5020:9;;;;4996:34;;;;;;;;;-1:-1:-1;;4996:15:20;;;;;;;:34;-1:-1:-1;;4996:23:20;:34::i;:::-;5045:45;;;;;;;;4347:25:24;;;5045:20:20;4408:55:24;;;4388:18;;;4381:83;4979:51:20;;-1:-1:-1;5045:12:20;:20;;;;;;4320:18:24;;5045:45:20;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;5041:314;;;5111:9;5106:186;5122:16;;;5106:186;;;5163:11;:28;;;;;;;;;;5204:6;;5192:5;;5198:1;5192:8;;;;;;;:::i;:::-;;;;;;;5163:38;;;;;;;;;;;;:47;;;;;;;;;;;;;;;;;;5268:5;;5274:1;5268:8;;;;;;;:::i;:::-;;;;;;;5243:15;5233:44;5260:6;5233:44;;;;;901:42:24;889:55;;;;871:74;;859:2;844:18;;725:226;5233:44:20;;;;;;;;5140:3;;5106:186;;;;4562:799;;4452:909;;;;;:::o;864:152:1:-;934:75;719:10:14;1000:8:1;934:33;:31;:33::i;:::-;:51;:75;:51;:75::i;:::-;864:152;:::o;1705:174:10:-;1746:16;;365:79;443:1;373:66;365:79;:::i;1359:340::-;1447:14;1477:35;1492:20;1477:35;;;1473:78;;-1:-1:-1;1535:5:10;1528:12;;1473:78;1564:40;;;;;1560:82;;-1:-1:-1;1627:4:10;1620:11;;1560:82;-1:-1:-1;1658:34:10;;:21;:34;;;;;;;;;;;;;;;1359:340::o;5065:174:6:-;5106:16;;926:71;996:1;934:58;926:71;:::i;3661:227:17:-;3739:7;3759:17;3778:18;3800:27;3811:4;3817:9;3800:10;:27::i;:::-;3758:69;;;;3837:18;3849:5;3837:11;:18::i;:::-;-1:-1:-1;3872:9:17;3661:227;-1:-1:-1;;;3661:227:17:o;3060:369:6:-;3182:15;;;;;;;3211:23;;;;3207:60;;3243:24;;;;;901:42:24;889:55;;3243:24:6;;;871:74:24;844:18;;3243:24:6;;;;;;;;3207:60;3298:8;3281:25;;:13;:25;;;3277:146;;3322:26;;;;;;;;;;;;;3367:45;;;;;;;;-1:-1:-1;;3367:45:6;3277:146;3148:281;3060:369;;;:::o;2145:730:17:-;2226:7;2235:12;2263:9;:16;2283:2;2263:22;2259:610;;2599:4;2584:20;;2578:27;2648:4;2633:20;;2627:27;2705:4;2690:20;;2684:27;2301:9;2676:36;2746:25;2757:4;2676:36;2578:27;2627;2746:10;:25::i;:::-;2739:32;;;;;;;;;2259:610;-1:-1:-1;2818:1:17;;-1:-1:-1;2822:35:17;2259:610;2145:730;;;;;:::o;570:511::-;647:20;638:5;:29;;;;;;;;:::i;:::-;;634:441;;570:511;:::o;634:441::-;743:29;734:5;:38;;;;;;;;:::i;:::-;;730:345;;788:34;;;;;6802:2:24;788:34:17;;;6784:21:24;6841:2;6821:18;;;6814:30;6880:26;6860:18;;;6853:54;6924:18;;788:34:17;6600:348:24;730:345:17;852:35;843:5;:44;;;;;;;;:::i;:::-;;839:236;;903:41;;;;;7155:2:24;903:41:17;;;7137:21:24;7194:2;7174:18;;;7167:30;7233:33;7213:18;;;7206:61;7284:18;;903:41:17;6953:355:24;839:236:17;974:30;965:5;:39;;;;;;;;:::i;:::-;;961:114;;1020:44;;;;;7515:2:24;1020:44:17;;;7497:21:24;7554:2;7534:18;;;7527:30;7593:34;7573:18;;;7566:62;7664:4;7644:18;;;7637:32;7686:19;;1020:44:17;7313:398:24;5009:1456:17;5097:7;;6021:66;6008:79;;6004:161;;;-1:-1:-1;6119:1:17;;-1:-1:-1;6123:30:17;6103:51;;6004:161;6276:24;;;6259:14;6276:24;;;;;;;;;7943:25:24;;;8016:4;8004:17;;7984:18;;;7977:45;;;;8038:18;;;8031:34;;;8081:18;;;8074:34;;;6276:24:17;;7915:19:24;;6276:24:17;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;;6276:24:17;;;;;;-1:-1:-1;;6314:20:17;;;6310:101;;6366:1;6370:29;6350:50;;;;;;;6310:101;6429:6;-1:-1:-1;6437:20:17;;-1:-1:-1;5009:1456:17;;;;;;;;:::o;14:332:24:-;72:6;125:2;113:9;104:7;100:23;96:32;93:52;;;141:1;138;131:12;93:52;180:9;167:23;230:66;223:5;219:78;212:5;209:89;199:117;;312:1;309;302:12;199:117;335:5;14:332;-1:-1:-1;;;14:332:24:o;956:347::-;1007:8;1017:6;1071:3;1064:4;1056:6;1052:17;1048:27;1038:55;;1089:1;1086;1079:12;1038:55;-1:-1:-1;1112:20:24;;1155:18;1144:30;;1141:50;;;1187:1;1184;1177:12;1141:50;1224:4;1216:6;1212:17;1200:29;;1276:3;1269:4;1260:6;1252;1248:19;1244:30;1241:39;1238:59;;;1293:1;1290;1283:12;1308:545;1396:6;1404;1412;1420;1473:2;1461:9;1452:7;1448:23;1444:32;1441:52;;;1489:1;1486;1479:12;1441:52;1525:9;1512:23;1502:33;;1582:2;1571:9;1567:18;1554:32;1544:42;;1637:2;1626:9;1622:18;1609:32;1664:18;1656:6;1653:30;1650:50;;;1696:1;1693;1686:12;1650:50;1735:58;1785:7;1776:6;1765:9;1761:22;1735:58;:::i;:::-;1308:545;;;;-1:-1:-1;1812:8:24;-1:-1:-1;;;;1308:545:24:o;1858:248::-;1926:6;1934;1987:2;1975:9;1966:7;1962:23;1958:32;1955:52;;;2003:1;2000;1993:12;1955:52;-1:-1:-1;;2026:23:24;;;2096:2;2081:18;;;2068:32;;-1:-1:-1;1858:248:24:o;2111:970::-;2226:6;2234;2242;2250;2258;2311:2;2299:9;2290:7;2286:23;2282:32;2279:52;;;2327:1;2324;2317:12;2279:52;2363:9;2350:23;2340:33;;2424:2;2413:9;2409:18;2396:32;2447:18;2488:2;2480:6;2477:14;2474:34;;;2504:1;2501;2494:12;2474:34;2542:6;2531:9;2527:22;2517:32;;2587:7;2580:4;2576:2;2572:13;2568:27;2558:55;;2609:1;2606;2599:12;2558:55;2649:2;2636:16;2675:2;2667:6;2664:14;2661:34;;;2691:1;2688;2681:12;2661:34;2744:7;2739:2;2729:6;2726:1;2722:14;2718:2;2714:23;2710:32;2707:45;2704:65;;;2765:1;2762;2755:12;2704:65;2796:2;2792;2788:11;2778:21;;2818:6;2808:16;;;2877:2;2866:9;2862:18;2849:32;2833:48;;2906:2;2896:8;2893:16;2890:36;;;2922:1;2919;2912:12;2890:36;;2961:60;3013:7;3002:8;2991:9;2987:24;2961:60;:::i;:::-;2111:970;;;;-1:-1:-1;2111:970:24;;-1:-1:-1;3040:8:24;;2935:86;2111:970;-1:-1:-1;;;2111:970:24:o;3086:309::-;3145:6;3198:2;3186:9;3177:7;3173:23;3169:32;3166:52;;;3214:1;3211;3204:12;3166:52;3253:9;3240:23;3303:42;3296:5;3292:54;3285:5;3282:65;3272:93;;3361:1;3358;3351:12;4475:277;4542:6;4595:2;4583:9;4574:7;4570:23;4566:32;4563:52;;;4611:1;4608;4601:12;4563:52;4643:9;4637:16;4696:5;4689:13;4682:21;4675:5;4672:32;4662:60;;4718:1;4715;4708:12;4757:404;4928:3;4960:66;4952:6;4949:78;4946:98;;;5040:1;5037;5030:12;4946:98;5074:6;5071:1;5067:14;5116:6;5108;5103:3;5090:33;5139:16;;;;;4757:404;-1:-1:-1;;;4757:404:24:o;5490:184::-;5542:77;5539:1;5532:88;5639:4;5636:1;5629:15;5663:4;5660:1;5653:15;5679:282;5746:9;;;5767:11;;;5764:191;;;5811:77;5808:1;5801:88;5912:4;5909:1;5902:15;5940:4;5937:1;5930:15;6411:184;6463:77;6460:1;6453:88;6560:4;6557:1;6550:15;6584:4;6581:1;6574:15"},"gasEstimates":{"creation":{"codeDepositCost":"904600","executionCost":"infinite","totalCost":"infinite"},"external":{"DOMAIN_SEPARATOR()":"infinite","batchRevokeVCs(bytes32,uint256[],bytes)":"infinite","isRevoked(bytes32,uint256)":"infinite","owner()":"infinite","revocations(bytes32,uint256)":"2564","revokeVC(bytes32,uint256,bytes)":"infinite","supportsInterface(bytes4)":"infinite","transferOwnership(address)":"infinite"},"internal":{"_calculateDomainSeparator(uint256)":"infinite"}},"methodIdentifiers":{"DOMAIN_SEPARATOR()":"3644e515","batchRevokeVCs(bytes32,uint256[],bytes)":"e688c27b","isRevoked(bytes32,uint256)":"a3a2656a","owner()":"8da5cb5b","revocations(bytes32,uint256)":"d394ab5a","revokeVC(bytes32,uint256,bytes)":"98fc75a2","supportsInterface(bytes4)":"01ffc9a7","transferOwnership(address)":"f2fde38b"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IIssuersDIDRegistry\",\"name\":\"didRegistry\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"IllegalInterfaceId\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidIssuer\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"NotContractOwner\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"caller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"VcRevoked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"domainSeparator\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"revocations\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"NotContractOwner(address)\":[{\"params\":{\"account\":\"The account that was checked.\"}}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"params\":{\"newOwner\":\"the new contract owner.\",\"previousOwner\":\"the previous contract owner.\"}},\"VcRevoked(bytes32,address,uint256)\":{\"params\":{\"caller\":\"address of caller that invoked the revocation.\",\"hashedIssuerDid\":\"the hashed Did for the issuer\",\"vcId\":\"The Id for the VC revoked.\"}}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"returns\":{\"domainSeparator\":\"The EIP-712 domain separator.\"}},\"batchRevokeVCs(bytes32,uint256[],bytes)\":{\"details\":\"Reverts with `InvalidNonce` when the given nonce is invalid.Reverts with `InvalidIssuer` when the recovered issuer is invalid.Emits a `VcRevoked` event when a vc is revoked\",\"params\":{\"hashedIssuerDid\":\"keccak256 hashed issuer Did.\",\"signature\":\"EIP712 Signature of `batchRevokeVCs` function signature, `hashedIssuerDid` and `vcIds`\",\"vcIds\":\"the list of VC IDs to be revoked.\"}},\"isRevoked(bytes32,uint256)\":{\"params\":{\"hashedIssuerDid\":\"keccak256 hashed issuer Did.\",\"vcId\":\"the VC ID to be revoked.\"}},\"owner()\":{\"returns\":{\"_0\":\"The address of the contract owner.\"}},\"revokeVC(bytes32,uint256,bytes)\":{\"details\":\"Reverts with `InvalidNonce` when the given nonce is invalid.Reverts with `InvalidIssuer` when the recovered issuer is invalid.Emits a `VcRevoked` event when a vc is revoked\",\"params\":{\"hashedIssuerDid\":\"keccak256 hashed issuer Did.\",\"signature\":\"EIP712 Signature of `revokeVC` function signature, `hashedIssuerDid` and `vcId`\",\"vcId\":\"the VC ID to be revoked.\"}},\"supportsInterface(bytes4)\":{\"details\":\"Note: This function call must use less than 30 000 gas.\",\"params\":{\"interfaceId\":\"the interface identifier to test.\"},\"returns\":{\"_0\":\"True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\"}},\"transferOwnership(address)\":{\"details\":\"Reverts if the sender is not the contract owner.Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\",\"params\":{\"newOwner\":\"The address of the new contract owner. Using the zero address means renouncing ownership.\"}}},\"title\":\"OpenCampusCertificateRevocationRegistry.\",\"version\":1},\"userdoc\":{\"errors\":{\"IllegalInterfaceId()\":[{\"notice\":\"Thrown when setting the illegal interfaceId 0xffffffff.\"}],\"InvalidIssuer()\":[{\"notice\":\"Thrown when the recovered issuer and the passed in issuerDid is not allowed in the DIDRegistry\"}],\"NotContractOwner(address)\":[{\"notice\":\"Thrown when an account is not the contract owner but is required to.\"}]},\"events\":{\"OwnershipTransferred(address,address)\":{\"notice\":\"Emitted when the contract ownership changes.\"},\"VcRevoked(bytes32,address,uint256)\":{\"notice\":\"Emitted when `caller` attempts to revoke `vcId`.\"}},\"kind\":\"user\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"notice\":\"Returns the EIP-712 DOMAIN_SEPARATOR.\"},\"owner()\":{\"notice\":\"Gets the address of the contract owner.\"},\"supportsInterface(bytes4)\":{\"notice\":\"Returns whether this contract implements a given interface.\"},\"transferOwnership(address)\":{\"notice\":\"Sets the address of the new contract owner.\"}},\"notice\":\"A registry storing the revocation of VCs.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/OpenCampusCertificateRevocationRegistry.sol\":\"OpenCampusCertificateRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {ContractOwnershipStorage} from \\\"./libraries/ContractOwnershipStorage.sol\\\";\\nimport {ContractOwnershipBase} from \\\"./base/ContractOwnershipBase.sol\\\";\\nimport {InterfaceDetection} from \\\"./../introspection/InterfaceDetection.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (immutable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) implementation.\\nabstract contract ContractOwnership is ContractOwnershipBase, InterfaceDetection {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @notice Initializes the storage with an initial contract owner.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner the initial contract owner.\\n    constructor(address initialOwner) {\\n        ContractOwnershipStorage.layout().constructorInit(initialOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xbf25b89ce124a65d9af571f493671812d7e373f1c40071d84cf66c1c9dea3d0a\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/base/ContractOwnershipBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {ContractOwnershipStorage} from \\\"./../libraries/ContractOwnershipStorage.sol\\\";\\nimport {Context} from \\\"@openzeppelin/contracts/utils/Context.sol\\\";\\n\\n/// @title ERC173 Contract Ownership Standard (proxiable version).\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev This contract is to be used via inheritance in a proxied implementation.\\n/// @dev Note: This contract requires ERC165 (Interface Detection Standard).\\nabstract contract ContractOwnershipBase is IERC173, Context {\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n\\n    /// @inheritdoc IERC173\\n    function owner() public view virtual returns (address) {\\n        return ContractOwnershipStorage.layout().owner();\\n    }\\n\\n    /// @inheritdoc IERC173\\n    function transferOwnership(address newOwner) public virtual {\\n        ContractOwnershipStorage.layout().transferOwnership(_msgSender(), newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x92b2873506abcaf1635694c5d76f408d71ce674d4b86fcfa1d2bbffda7a4a997\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/Common.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when the target contract is actually not a contract.\\n/// @param targetContract The contract that was checked\\nerror TargetIsNotAContract(address targetContract);\\n\",\"keccak256\":\"0x56667d7d8061ea40461345ecb888a4a83b36895bab4b7beeb7f8de6c55686af2\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/errors/ContractOwnershipErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when an account is not the contract owner but is required to.\\n/// @param account The account that was checked.\\nerror NotContractOwner(address account);\\n\\n/// @notice Thrown when an account is not the target contract owner but is required to.\\n/// @param targetContract The contract that was checked.\\n/// @param account The account that was checked.\\nerror NotTargetContractOwner(address targetContract, address account);\\n\",\"keccak256\":\"0x24c5322d4010d81d6471a859a958aa85d000bf17a858348469ce3a347d4846bd\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/events/ERC173Events.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when the contract ownership changes.\\n/// @param previousOwner the previous contract owner.\\n/// @param newOwner the new contract owner.\\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n\\n\\n\",\"keccak256\":\"0xdc83a7319884244d628b20e351064327cccbc91608971a1a0e42093359423466\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC-173 Contract Ownership Standard (functions)\\n/// @dev See https://eips.ethereum.org/EIPS/eip-173\\n/// @dev Note: the ERC-165 identifier for this interface is 0x7f5828d0\\ninterface IERC173 {\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts if the sender is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(address newOwner) external;\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner() external view returns (address contractOwner);\\n}\\n\",\"keccak256\":\"0x1fa2321a832c981131b705b9999ad33495efc1bb40185c32920372a4bf8d8924\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/access/libraries/ContractOwnershipStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {NotContractOwner, NotTargetContractOwner} from \\\"./../errors/ContractOwnershipErrors.sol\\\";\\nimport {TargetIsNotAContract} from \\\"./../errors/Common.sol\\\";\\nimport {OwnershipTransferred} from \\\"./../events/ERC173Events.sol\\\";\\nimport {IERC173} from \\\"./../interfaces/IERC173.sol\\\";\\nimport {Address} from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport {ProxyInitialization} from \\\"./../../proxy/libraries/ProxyInitialization.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./../../introspection/libraries/InterfaceDetectionStorage.sol\\\";\\n\\nlibrary ContractOwnershipStorage {\\n    using Address for address;\\n    using ContractOwnershipStorage for ContractOwnershipStorage.Layout;\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    struct Layout {\\n        address contractOwner;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.storage\\\")) - 1);\\n    bytes32 internal constant PROXY_INIT_PHASE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.access.ContractOwnership.phase\\\")) - 1);\\n\\n    /// @notice Initializes the storage with an initial contract owner (immutable version).\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the constructor of an immutable (non-proxied) contract.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function constructorInit(Layout storage s, address initialOwner) internal {\\n        if (initialOwner != address(0)) {\\n            s.contractOwner = initialOwner;\\n            emit OwnershipTransferred(address(0), initialOwner);\\n        }\\n        InterfaceDetectionStorage.layout().setSupportedInterface(type(IERC173).interfaceId, true);\\n    }\\n\\n    /// @notice Initializes the storage with an initial contract owner (proxied version).\\n    /// @notice Sets the proxy initialization phase to `1`.\\n    /// @notice Marks the following ERC165 interface(s) as supported: ERC173.\\n    /// @dev Note: This function should be called ONLY in the init function of a proxied contract.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if the proxy initialization phase is set to `1` or above.\\n    /// @dev Emits an {OwnershipTransferred} if `initialOwner` is not the zero address.\\n    /// @param initialOwner The initial contract owner.\\n    function proxyInit(Layout storage s, address initialOwner) internal {\\n        ProxyInitialization.setPhase(PROXY_INIT_PHASE_SLOT, 1);\\n        s.constructorInit(initialOwner);\\n    }\\n\\n    /// @notice Sets the address of the new contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `sender` is not the contract owner.\\n    /// @dev Emits an {OwnershipTransferred} event if `newOwner` is different from the current contract owner.\\n    /// @param newOwner The address of the new contract owner. Using the zero address means renouncing ownership.\\n    function transferOwnership(Layout storage s, address sender, address newOwner) internal {\\n        address previousOwner = s.contractOwner;\\n        if (sender != previousOwner) revert NotContractOwner(sender);\\n        if (previousOwner != newOwner) {\\n            s.contractOwner = newOwner;\\n            emit OwnershipTransferred(previousOwner, newOwner);\\n        }\\n    }\\n\\n    /// @notice Gets the address of the contract owner.\\n    /// @return contractOwner The address of the contract owner.\\n    function owner(Layout storage s) internal view returns (address contractOwner) {\\n        return s.contractOwner;\\n    }\\n\\n    /// @notice Checks whether an account is the owner of a target contract.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    /// @return isTargetContractOwner_ Whether `account` is the owner of `targetContract`.\\n    function isTargetContractOwner(address targetContract, address account) internal view returns (bool isTargetContractOwner_) {\\n        if (!targetContract.isContract()) revert TargetIsNotAContract(targetContract);\\n        return IERC173(targetContract).owner() == account;\\n    }\\n\\n    /// @notice Ensures that an account is the contract owner.\\n    /// @dev Reverts with {NotContractOwner} if `account` is not the contract owner.\\n    /// @param account The account.\\n    function enforceIsContractOwner(Layout storage s, address account) internal view {\\n        if (account != s.contractOwner) revert NotContractOwner(account);\\n    }\\n\\n    /// @notice Enforces that an account is the owner of a target contract.\\n    /// @dev Reverts with {NotTheTargetContractOwner} if the account is not the owner.\\n    /// @param targetContract The contract to check.\\n    /// @param account The account to check.\\n    function enforceIsTargetContractOwner(address targetContract, address account) internal view {\\n        if (!isTargetContractOwner(targetContract, account)) revert NotTargetContractOwner(targetContract, account);\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x05f700b661fd626d8294fa4c8afae5ed2a53f4b4f85d789cb162a3257328159d\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/InterfaceDetection.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IERC165} from \\\"./interfaces/IERC165.sol\\\";\\nimport {InterfaceDetectionStorage} from \\\"./libraries/InterfaceDetectionStorage.sol\\\";\\n\\n/// @title ERC165 Interface Detection Standard (immutable or proxiable version).\\n/// @dev This contract is to be used via inheritance in an immutable (non-proxied) or proxied implementation.\\nabstract contract InterfaceDetection is IERC165 {\\n    using InterfaceDetectionStorage for InterfaceDetectionStorage.Layout;\\n\\n    /// @inheritdoc IERC165\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool) {\\n        return InterfaceDetectionStorage.layout().supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x2ae5907a4ffe5d7e761700fd19a9947d18ba73eddba796dc85196f01dc8fbda5\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/errors/InterfaceDetectionErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Thrown when setting the illegal interfaceId 0xffffffff.\\nerror IllegalInterfaceId();\\n\",\"keccak256\":\"0x4b9d2357b34b970bd0abb4b71dfbc670d805c18ee17f2cf9047ce69f70a48a82\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title ERC165 Interface Detection Standard.\\n/// @dev See https://eips.ethereum.org/EIPS/eip-165.\\n/// @dev Note: The ERC-165 identifier for this interface is 0x01ffc9a7.\\ninterface IERC165 {\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId the interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool supported);\\n}\\n\",\"keccak256\":\"0x1f1957f5918d1c2f6b57a460819363ca1f2aa6042e5841ec35d89024345096fc\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/introspection/libraries/InterfaceDetectionStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {IllegalInterfaceId} from \\\"./../errors/InterfaceDetectionErrors.sol\\\";\\nimport {IERC165} from \\\"./../interfaces/IERC165.sol\\\";\\n\\nlibrary InterfaceDetectionStorage {\\n    struct Layout {\\n        mapping(bytes4 => bool) supportedInterfaces;\\n    }\\n\\n    bytes32 internal constant LAYOUT_STORAGE_SLOT = bytes32(uint256(keccak256(\\\"animoca.core.introspection.InterfaceDetection.storage\\\")) - 1);\\n\\n    bytes4 internal constant ILLEGAL_INTERFACE_ID = 0xffffffff;\\n\\n    /// @notice Sets or unsets an ERC165 interface.\\n    /// @dev Revertswith {IllegalInterfaceId} if `interfaceId` is `0xffffffff`.\\n    /// @param interfaceId the interface identifier.\\n    /// @param supported True to set the interface, false to unset it.\\n    function setSupportedInterface(Layout storage s, bytes4 interfaceId, bool supported) internal {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) revert IllegalInterfaceId();\\n        s.supportedInterfaces[interfaceId] = supported;\\n    }\\n\\n    /// @notice Returns whether this contract implements a given interface.\\n    /// @dev Note: This function call must use less than 30 000 gas.\\n    /// @param interfaceId The interface identifier to test.\\n    /// @return supported True if the interface is supported, false if `interfaceId` is `0xffffffff` or if the interface is not supported.\\n    function supportsInterface(Layout storage s, bytes4 interfaceId) internal view returns (bool supported) {\\n        if (interfaceId == ILLEGAL_INTERFACE_ID) {\\n            return false;\\n        }\\n        if (interfaceId == type(IERC165).interfaceId) {\\n            return true;\\n        }\\n        return s.supportedInterfaces[interfaceId];\\n    }\\n\\n    function layout() internal pure returns (Layout storage s) {\\n        bytes32 position = LAYOUT_STORAGE_SLOT;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x168a2e1e8bf22891de5e36bc75b3b667e0bacf1a0477014af2e30a2eb7e69c0b\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/errors/ProxyInitializationErrors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when trying to set a phase value that has already been reached.\\n/// @param currentPhase The current phase.\\n/// @param newPhase The new phase trying to be set.\\nerror InitializationPhaseAlreadyReached(uint256 currentPhase, uint256 newPhase);\\n\",\"keccak256\":\"0x7da45330a00b82db49c5433ee719ac6722b671de95bd1c8d6f8ba329e3fdee4e\",\"license\":\"MIT\"},\"@animoca/ethereum-contracts/contracts/proxy/libraries/ProxyInitialization.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\nimport {InitializationPhaseAlreadyReached} from \\\"./../errors/ProxyInitializationErrors.sol\\\";\\nimport {StorageSlot} from \\\"@openzeppelin/contracts/utils/StorageSlot.sol\\\";\\n\\n/// @notice Multiple calls protection for storage-modifying proxy initialization functions.\\nlibrary ProxyInitialization {\\n    /// @notice Sets the initialization phase during a storage-modifying proxy initialization function.\\n    /// @dev Reverts with {InitializationPhaseAlreadyReached} if `phase` has been reached already.\\n    /// @param storageSlot the storage slot where `phase` is stored.\\n    /// @param phase the initialization phase.\\n    function setPhase(bytes32 storageSlot, uint256 phase) internal {\\n        StorageSlot.Uint256Slot storage currentVersion = StorageSlot.getUint256Slot(storageSlot);\\n        uint256 currentPhase = currentVersion.value;\\n        if (currentPhase >= phase) revert InitializationPhaseAlreadyReached(currentPhase, phase);\\n        currentVersion.value = phase;\\n    }\\n}\\n\",\"keccak256\":\"0x922e8a6dd942850b805c2a8a18449736ddf25d804194c00bbb48f602369fe65a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x006dd67219697fe68d7fbfdea512e7c4cb64a43565ed86171d67e844982da6fa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, `uint256`._\\n * _Available since v4.9 for `string`, `bytes`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf09e68aa0dc6722a25bc46490e8d48ed864466d17313b8a0b254c36b54e49899\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\nimport \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(int256 value) internal pure returns (string memory) {\\n        return string(abi.encodePacked(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value))));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x3088eb2868e8d13d89d16670b5f8612c4ab9ff8956272837d8e90106c59c14a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32 message) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\")\\n            mstore(0x1c, hash)\\n            message := keccak256(0x00, 0x3c)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 data) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, \\\"\\\\x19\\\\x01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            data := keccak256(ptr, 0x42)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Data with intended validator, created from a\\n     * `validator` and `data` according to the version 0 of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x00\\\", validator, data));\\n    }\\n}\\n\",\"keccak256\":\"0x809bc3edb4bcbef8263fa616c1b60ee0004b50a8a1bfa164d8f57fd31f520c58\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1, \\\"Math: mulDiv overflow\\\");\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe4455ac1eb7fc497bb7402579e7b4d64d928b846fce7d2b6fde06d366f21c2b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf92515413956f529d95977adc9b0567d583c6203fc31ab1c23824c35187e3ddc\",\"license\":\"MIT\"},\"contracts/vc/OpenCampusCertificateRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n// other imports\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n// animoca imports\\nimport {ContractOwnership} from \\\"@animoca/ethereum-contracts/contracts/access/ContractOwnership.sol\\\";\\nimport {IIssuersDIDRegistry} from \\\"./interfaces/IIssuersDIDRegistry.sol\\\";\\nimport {IRevocationRegistry} from \\\"./interfaces/IRevocationRegistry.sol\\\";\\nimport {VcRevoked} from \\\"./events/RevocationRegistryEvents.sol\\\";\\n\\n/// @title OpenCampusCertificateRevocationRegistry.\\n/// @notice A registry storing the revocation of VCs.\\ncontract OpenCampusCertificateRevocationRegistry is IRevocationRegistry, ContractOwnership {\\n    using ECDSA for bytes32;\\n\\n    bytes32 private constant EIP712_DOMAIN_NAME = keccak256(\\\"RevocationRegistryV1\\\");\\n    bytes32 private constant REVOKE_TYPEHASH = keccak256(\\\"revokeVC(bytes32 hashedIssuerDid,uint256 vcId)\\\");\\n    bytes32 private constant BATCH_REVOKE_TYPEHASH = keccak256(\\\"batchRevokeVCs(bytes32 hashedIssuerDid,uint256[] vcIds)\\\");\\n\\n    IIssuersDIDRegistry internal immutable DID_REGISTRY;\\n\\n    mapping(bytes32 => mapping(uint256 => address)) public revocations;\\n\\n    uint256 private immutable _DEPLOYMENT_CHAIN_ID;\\n    bytes32 private immutable _DEPLOYMENT_DOMAIN_SEPARATOR;\\n\\n    /// @notice Thrown when the recovered issuer and the passed in issuerDid is not allowed in the DIDRegistry\\n    error InvalidIssuer();\\n\\n    constructor(IIssuersDIDRegistry didRegistry) ContractOwnership(msg.sender) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n        DID_REGISTRY = didRegistry;\\n        _DEPLOYMENT_CHAIN_ID = chainId;\\n        _DEPLOYMENT_DOMAIN_SEPARATOR = _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @notice Returns the EIP-712 DOMAIN_SEPARATOR.\\n    /// @return domainSeparator The EIP-712 domain separator.\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() public view returns (bytes32 domainSeparator) {\\n        uint256 chainId;\\n        assembly {\\n            chainId := chainid()\\n        }\\n\\n        // in case a fork happens, to support the chain that had to change its chainId, we compute the domain operator\\n        return chainId == _DEPLOYMENT_CHAIN_ID ? _DEPLOYMENT_DOMAIN_SEPARATOR : _calculateDomainSeparator(chainId);\\n    }\\n\\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\\n    /// @param vcId the VC ID to be revoked.\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked) {\\n        // Use-Cases\\n        // 1. issuer addr/did valid & revoked => revoker valid address, DIDRegistry allowed => returns true\\n        // 2. issuer addr/did valid when revoked, invalidated later in DIDRegistry => revoker valid address, DIDRegistry disallowed => returns false\\n        // 3. vcId never revoked => revoker address zero => DIDRegistry disallowed => return false\\n        address revoker = revocations[hashedIssuerDid][vcId];\\n        return DID_REGISTRY.issuers(hashedIssuerDid, revoker);\\n    }\\n\\n    /// @dev Reverts with `InvalidNonce` when the given nonce is invalid.\\n    /// @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\\n    /// @dev Emits a `VcRevoked` event when a vc is revoked\\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\\n    /// @param vcId the VC ID to be revoked.\\n    /// @param signature EIP712 Signature of `revokeVC` function signature, `hashedIssuerDid` and `vcId`\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external {\\n        bytes memory data = abi.encodePacked(\\\"\\\\x19\\\\x01\\\", DOMAIN_SEPARATOR(), keccak256(abi.encode(REVOKE_TYPEHASH, hashedIssuerDid, vcId)));\\n        address signer = keccak256(data).recover(signature);\\n\\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\\n            revocations[hashedIssuerDid][vcId] = signer;\\n            emit VcRevoked(hashedIssuerDid, signer, vcId);\\n        } else {\\n            revert InvalidIssuer();\\n        }\\n    }\\n\\n    /// @dev Reverts with `InvalidNonce` when the given nonce is invalid.\\n    /// @dev Reverts with `InvalidIssuer` when the recovered issuer is invalid.\\n    /// @dev Emits a `VcRevoked` event when a vc is revoked\\n    /// @param hashedIssuerDid keccak256 hashed issuer Did.\\n    /// @param vcIds the list of VC IDs to be revoked.\\n    /// @param signature EIP712 Signature of `batchRevokeVCs` function signature, `hashedIssuerDid` and `vcIds`\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external {\\n        bytes memory data = abi.encodePacked(\\n            \\\"\\\\x19\\\\x01\\\",\\n            DOMAIN_SEPARATOR(),\\n            // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-712.md#definition-of-encodedata\\n            // array type `vcIds` are encoded differently from non-array type data\\n            keccak256(abi.encode(BATCH_REVOKE_TYPEHASH, hashedIssuerDid, keccak256(abi.encodePacked(vcIds))))\\n        );\\n        address signer = keccak256(data).recover(signature);\\n\\n        if (DID_REGISTRY.issuers(hashedIssuerDid, signer)) {\\n            for (uint256 i; i < vcIds.length; i++) {\\n                revocations[hashedIssuerDid][vcIds[i]] = signer;\\n                emit VcRevoked(hashedIssuerDid, signer, vcIds[i]);\\n            }\\n        } else {\\n            revert InvalidIssuer();\\n        }\\n    }\\n\\n    function _calculateDomainSeparator(uint256 chainId) private view returns (bytes32) {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(\\\"EIP712Domain(string name,uint256 chainId,address verifyingContract)\\\"),\\n                    EIP712_DOMAIN_NAME,\\n                    chainId,\\n                    address(this)\\n                )\\n            );\\n    }\\n}\\n\",\"keccak256\":\"0xa5e64ec19a4f6c7ef4804dc33238a21ec396cc01f0c45acd207a71acd1939a27\",\"license\":\"MIT\"},\"contracts/vc/events/RevocationRegistryEvents.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @notice Emitted when `caller` attempts to revoke `vcId`.\\n/// @param hashedIssuerDid the hashed Did for the issuer\\n/// @param caller address of caller that invoked the revocation.\\n/// @param vcId The Id for the VC revoked.\\nevent VcRevoked(bytes32 indexed hashedIssuerDid, address caller, uint256 indexed vcId);\\n\\n\",\"keccak256\":\"0x9d35bd3094db7c9671a0726e6f4f489952b400616c2eefdac24f8e4397543a8d\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"},\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[{"astId":2660,"contract":"contracts/vc/OpenCampusCertificateRevocationRegistry.sol:OpenCampusCertificateRevocationRegistry","label":"revocations","offset":0,"slot":"0","type":"t_mapping(t_bytes32,t_mapping(t_uint256,t_address))"}],"types":{"t_address":{"encoding":"inplace","label":"address","numberOfBytes":"20"},"t_bytes32":{"encoding":"inplace","label":"bytes32","numberOfBytes":"32"},"t_mapping(t_bytes32,t_mapping(t_uint256,t_address))":{"encoding":"mapping","key":"t_bytes32","label":"mapping(bytes32 => mapping(uint256 => address))","numberOfBytes":"32","value":"t_mapping(t_uint256,t_address)"},"t_mapping(t_uint256,t_address)":{"encoding":"mapping","key":"t_uint256","label":"mapping(uint256 => address)","numberOfBytes":"32","value":"t_address"},"t_uint256":{"encoding":"inplace","label":"uint256","numberOfBytes":"32"}}},"userdoc":{"errors":{"IllegalInterfaceId()":[{"notice":"Thrown when setting the illegal interfaceId 0xffffffff."}],"InvalidIssuer()":[{"notice":"Thrown when the recovered issuer and the passed in issuerDid is not allowed in the DIDRegistry"}],"NotContractOwner(address)":[{"notice":"Thrown when an account is not the contract owner but is required to."}]},"events":{"OwnershipTransferred(address,address)":{"notice":"Emitted when the contract ownership changes."},"VcRevoked(bytes32,address,uint256)":{"notice":"Emitted when `caller` attempts to revoke `vcId`."}},"kind":"user","methods":{"DOMAIN_SEPARATOR()":{"notice":"Returns the EIP-712 DOMAIN_SEPARATOR."},"owner()":{"notice":"Gets the address of the contract owner."},"supportsInterface(bytes4)":{"notice":"Returns whether this contract implements a given interface."},"transferOwnership(address)":{"notice":"Sets the address of the new contract owner."}},"notice":"A registry storing the revocation of VCs.","version":1}}},"contracts/vc/interfaces/IIssuersDIDRegistry.sol":{"IIssuersDIDRegistry":{"abi":[{"inputs":[{"internalType":"string","name":"did","type":"string"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"isIssuerAllowed","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedDid","type":"bytes32"},{"internalType":"address","name":"issuerAddress","type":"address"}],"name":"issuers","outputs":[{"internalType":"bool","name":"allowed","type":"bool"}],"stateMutability":"view","type":"function"}],"devdoc":{"kind":"dev","methods":{},"title":"IAllowedIssuersRegistry","version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"isIssuerAllowed(string,address)":"6f176f7e","issuers(bytes32,address)":"f9236a39"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"did\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"isIssuerAllowed\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedDid\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"issuerAddress\",\"type\":\"address\"}],\"name\":\"issuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"allowed\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"IAllowedIssuersRegistry\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Interface for registry to store allowed issuers for VCs to mint NFT VCs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":\"IIssuersDIDRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IIssuersDIDRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\n/// @title IAllowedIssuersRegistry\\n/// @notice Interface for registry to store allowed issuers for VCs to mint NFT VCs\\ninterface IIssuersDIDRegistry {\\n    function issuers(bytes32 hashedDid, address issuerAddress) external view returns (bool allowed);\\n\\n    function isIssuerAllowed(string calldata did, address issuerAddress) external view returns (bool allowed);\\n}\\n\",\"keccak256\":\"0x7360ab20932c540c96ee3de60bb18bc4ed89cfa5e7bbd81dfc8a4f9142d4e63e\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"notice":"Interface for registry to store allowed issuers for VCs to mint NFT VCs","version":1}}},"contracts/vc/interfaces/IRevocationRegistry.sol":{"IRevocationRegistry":{"abi":[{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256[]","name":"vcIds","type":"uint256[]"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"batchRevokeVCs","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"}],"name":"isRevoked","outputs":[{"internalType":"bool","name":"revoked","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"bytes32","name":"hashedIssuerDid","type":"bytes32"},{"internalType":"uint256","name":"vcId","type":"uint256"},{"internalType":"bytes","name":"signature","type":"bytes"}],"name":"revokeVC","outputs":[],"stateMutability":"nonpayable","type":"function"}],"devdoc":{"kind":"dev","methods":{},"version":1},"evm":{"bytecode":{"functionDebugData":{},"generatedSources":[],"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"deployedBytecode":{"functionDebugData":{},"generatedSources":[],"immutableReferences":{},"linkReferences":{},"object":"","opcodes":"","sourceMap":""},"gasEstimates":null,"methodIdentifiers":{"batchRevokeVCs(bytes32,uint256[],bytes)":"e688c27b","isRevoked(bytes32,uint256)":"a3a2656a","revokeVC(bytes32,uint256,bytes)":"98fc75a2"}},"metadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"vcIds\",\"type\":\"uint256[]\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"batchRevokeVCs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"}],\"name\":\"isRevoked\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"revoked\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"hashedIssuerDid\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"vcId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"revokeVC\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":\"IRevocationRegistry\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":99999},\"remappings\":[]},\"sources\":{\"contracts/vc/interfaces/IRevocationRegistry.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.22;\\n\\ninterface IRevocationRegistry {\\n    function revokeVC(bytes32 hashedIssuerDid, uint256 vcId, bytes calldata signature) external;\\n\\n    function batchRevokeVCs(bytes32 hashedIssuerDid, uint256[] calldata vcIds, bytes calldata signature) external;\\n\\n    function isRevoked(bytes32 hashedIssuerDid, uint256 vcId) external view returns (bool revoked);\\n}\\n\",\"keccak256\":\"0x0338f9b80f4482a5533b2b95f1c33e46edfd8dd21dd51c1b21af3adde473dad9\",\"license\":\"MIT\"}},\"version\":1}","storageLayout":{"storage":[],"types":null},"userdoc":{"kind":"user","methods":{},"version":1}}}}}}